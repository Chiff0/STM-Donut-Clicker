
bsp23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ba0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08012e40  08012e40  00013e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013128  08013128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013130  08013130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013134  08013134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000184  24000000  08013138  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000412b8  24000188  080132bc  00015188  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24041440  080132bc  00015440  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015184  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041c9c  00000000  00000000  000151b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000063e9  00000000  00000000  00056e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0005a58a  00000000  00000000  0005d237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001cf8  00000000  00000000  000b77c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000077fc  00000000  00000000  000b94c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000a26b  00000000  00000000  000c0cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000537ec  00000000  00000000  000caf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00192326  00000000  00000000  0011e713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002b0a39  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006694  00000000  00000000  002b0a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000004c  00000000  00000000  002b7110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000188 	.word	0x24000188
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012e28 	.word	0x08012e28

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400018c 	.word	0x2400018c
 80002dc:	08012e28 	.word	0x08012e28

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8000380:	f240 1c01 	movw	ip, #257	@ 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8000384:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8000386:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800038a:	f44f 7388 	mov.w	r3, #272	@ 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800038e:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
 8000390:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8000392:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8000396:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 800039a:	4770      	bx	lr

0800039c <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 800039c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d102      	bne.n	80003aa <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  }

  return ret;
}
 80003aa:	2000      	movs	r0, #0
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr

080003b4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80003b4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80003b6:	6904      	ldr	r4, [r0, #16]
 80003b8:	8900      	ldrh	r0, [r0, #8]
 80003ba:	46a4      	mov	ip, r4
}
 80003bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80003c0:	4760      	bx	ip
 80003c2:	bf00      	nop

080003c4 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80003c4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80003c6:	68c4      	ldr	r4, [r0, #12]
 80003c8:	8900      	ldrh	r0, [r0, #8]
 80003ca:	46a4      	mov	ip, r4
}
 80003cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80003d0:	4760      	bx	ip
 80003d2:	bf00      	nop

080003d4 <FT5336_GestureConfig>:
{
 80003d4:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80003d6:	f100 0518 	add.w	r5, r0, #24
{
 80003da:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80003dc:	7809      	ldrb	r1, [r1, #0]
 80003de:	4628      	mov	r0, r5
 80003e0:	f000 f96c 	bl	80006bc <ft5336_radian_value>
 80003e4:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80003e6:	7931      	ldrb	r1, [r6, #4]
 80003e8:	4628      	mov	r0, r5
 80003ea:	f000 f975 	bl	80006d8 <ft5336_offset_left_right>
 80003ee:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80003f0:	7a31      	ldrb	r1, [r6, #8]
 80003f2:	4628      	mov	r0, r5
 80003f4:	f000 f97e 	bl	80006f4 <ft5336_offset_up_down>
 80003f8:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80003fa:	7b31      	ldrb	r1, [r6, #12]
 80003fc:	4628      	mov	r0, r5
 80003fe:	f000 f987 	bl	8000710 <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000402:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8000404:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000406:	4628      	mov	r0, r5
 8000408:	f000 f990 	bl	800072c <ft5336_distance_up_down>
 800040c:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800040e:	7d31      	ldrb	r1, [r6, #20]
 8000410:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000412:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8000414:	f000 f998 	bl	8000748 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8000418:	42c4      	cmn	r4, r0
}
 800041a:	bf14      	ite	ne
 800041c:	f04f 30ff 	movne.w	r0, #4294967295
 8000420:	2000      	moveq	r0, #0
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8000424:	3018      	adds	r0, #24
 8000426:	f000 b9ab 	b.w	8000780 <ft5336_chip_id>
 800042a:	bf00      	nop

0800042c <FT5336_GetState>:
{
 800042c:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800042e:	f100 0518 	add.w	r5, r0, #24
{
 8000432:	b083      	sub	sp, #12
 8000434:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8000436:	4628      	mov	r0, r5
 8000438:	a901      	add	r1, sp, #4
 800043a:	f000 f931 	bl	80006a0 <ft5336_td_status>
 800043e:	bb10      	cbnz	r0, 8000486 <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8000440:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8000444:	2b05      	cmp	r3, #5
 8000446:	bf94      	ite	ls
 8000448:	4619      	movls	r1, r3
 800044a:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800044c:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800044e:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8000450:	4628      	mov	r0, r5
 8000452:	2103      	movs	r1, #3
 8000454:	eb0d 0203 	add.w	r2, sp, r3
 8000458:	f000 f910 	bl	800067c <ft5336_read_reg>
 800045c:	b9b0      	cbnz	r0, 800048c <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800045e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8000462:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8000466:	0212      	lsls	r2, r2, #8
 8000468:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800046c:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800046e:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8000472:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8000476:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8000478:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800047c:	430b      	orrs	r3, r1
 800047e:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
 8000482:	b003      	add	sp, #12
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f04f 31ff 	mov.w	r1, #4294967295
 800048a:	e7df      	b.n	800044c <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
 800048c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000490:	e7f7      	b.n	8000482 <FT5336_GetState+0x56>
 8000492:	bf00      	nop

08000494 <FT5336_GetMultiTouchState>:
{
 8000494:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8000496:	f100 0518 	add.w	r5, r0, #24
{
 800049a:	b088      	sub	sp, #32
 800049c:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800049e:	4628      	mov	r0, r5
 80004a0:	4669      	mov	r1, sp
 80004a2:	f000 f8fd 	bl	80006a0 <ft5336_td_status>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	f040 809a 	bne.w	80005e0 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80004ac:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80004b0:	2b05      	cmp	r3, #5
 80004b2:	bf94      	ite	ls
 80004b4:	4619      	movls	r1, r3
 80004b6:	2100      	movhi	r1, #0
 80004b8:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80004ba:	231e      	movs	r3, #30
 80004bc:	466a      	mov	r2, sp
 80004be:	4628      	mov	r0, r5
 80004c0:	2103      	movs	r1, #3
 80004c2:	f000 f8db 	bl	800067c <ft5336_read_reg>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	f040 808d 	bne.w	80005e6 <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80004cc:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80004d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80004d4:	020a      	lsls	r2, r1, #8
 80004d6:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80004da:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80004dc:	f89d c007 	ldrb.w	ip, [sp, #7]
 80004e0:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80004e4:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80004e6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80004ea:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80004ee:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80004f0:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80004f4:	6421      	str	r1, [r4, #64]	@ 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80004f6:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80004f8:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80004fa:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80004fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000500:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8000502:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000506:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800050a:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800050c:	62e2      	str	r2, [r4, #44]	@ 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800050e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000512:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8000514:	6563      	str	r3, [r4, #84]	@ 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8000516:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000518:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800051c:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800051e:	6461      	str	r1, [r4, #68]	@ 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000520:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8000524:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8000528:	65a2      	str	r2, [r4, #88]	@ 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800052a:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800052c:	6321      	str	r1, [r4, #48]	@ 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800052e:	ea45 050c 	orr.w	r5, r5, ip
 8000532:	f402 6170 	and.w	r1, r2, #3840	@ 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000536:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800053a:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800053c:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800053e:	0212      	lsls	r2, r2, #8
 8000540:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8000544:	64a3      	str	r3, [r4, #72]	@ 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000546:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800054a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800054e:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8000550:	6363      	str	r3, [r4, #52]	@ 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000552:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000556:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000558:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800055c:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800055e:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000560:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000564:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000566:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800056a:	4313      	orrs	r3, r2
 800056c:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800056e:	65e6      	str	r6, [r4, #92]	@ 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000570:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000574:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000578:	020a      	lsls	r2, r1, #8
 800057a:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800057e:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000580:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8000584:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000586:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800058a:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800058c:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8000590:	64e1      	str	r1, [r4, #76]	@ 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000592:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000594:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8000598:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800059a:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800059c:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800059e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80005a2:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80005a4:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80005a8:	63a2      	str	r2, [r4, #56]	@ 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80005aa:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80005ae:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80005b2:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80005b4:	6521      	str	r1, [r4, #80]	@ 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80005b6:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80005b8:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80005bc:	6625      	str	r5, [r4, #96]	@ 0x60
 80005be:	6663      	str	r3, [r4, #100]	@ 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80005c0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80005c4:	63e1      	str	r1, [r4, #60]	@ 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80005c6:	021b      	lsls	r3, r3, #8
 80005c8:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80005cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80005d0:	430b      	orrs	r3, r1
 80005d2:	62a3      	str	r3, [r4, #40]	@ 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80005d4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80005d8:	4313      	orrs	r3, r2
 80005da:	6163      	str	r3, [r4, #20]
}
 80005dc:	b008      	add	sp, #32
 80005de:	bd70      	pop	{r4, r5, r6, pc}
 80005e0:	f04f 31ff 	mov.w	r1, #4294967295
 80005e4:	e768      	b.n	80004b8 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
 80005e6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80005ea:	e7f7      	b.n	80005dc <FT5336_GetMultiTouchState+0x148>

080005ec <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 80005ec:	3018      	adds	r0, #24
 80005ee:	f000 b84d 	b.w	800068c <ft5336_gest_id>
 80005f2:	bf00      	nop

080005f4 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 80005f4:	2101      	movs	r1, #1
 80005f6:	3018      	adds	r0, #24
 80005f8:	f000 b8b4 	b.w	8000764 <ft5336_g_mode>

080005fc <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80005fc:	2100      	movs	r1, #0
 80005fe:	3018      	adds	r0, #24
 8000600:	f000 b8b0 	b.w	8000764 <ft5336_g_mode>

08000604 <FT5336_Init>:
{
 8000604:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
 8000606:	f890 5024 	ldrb.w	r5, [r0, #36]	@ 0x24
 800060a:	b98d      	cbnz	r5, 8000630 <FT5336_Init+0x2c>
    pObj->IO.Init();
 800060c:	4606      	mov	r6, r0
 800060e:	4604      	mov	r4, r0
 8000610:	f856 3b18 	ldr.w	r3, [r6], #24
 8000614:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8000616:	4629      	mov	r1, r5
 8000618:	4630      	mov	r0, r6
 800061a:	f000 f8a3 	bl	8000764 <ft5336_g_mode>
  if(ret != FT5336_OK)
 800061e:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8000620:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8000624:	bf18      	it	ne
 8000626:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8000628:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT5336_OK)
 800062c:	4240      	negs	r0, r0
}
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	2000      	movs	r0, #0
 8000632:	bd70      	pop	{r4, r5, r6, pc}

08000634 <FT5336_ClearIT>:
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
 8000634:	2000      	movs	r0, #0
 8000636:	4770      	bx	lr

08000638 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8000638:	b1c0      	cbz	r0, 800066c <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
 800063a:	890a      	ldrh	r2, [r1, #8]
{
 800063c:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
 800063e:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8000642:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8000644:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000648:	694a      	ldr	r2, [r1, #20]
 800064a:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800064e:	4909      	ldr	r1, [pc, #36]	@ (8000674 <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000650:	60c5      	str	r5, [r0, #12]
 8000652:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8000656:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
 8000658:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800065c:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 800065e:	b10b      	cbz	r3, 8000664 <FT5336_RegisterBusIO+0x2c>
}
 8000660:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
 8000662:	4718      	bx	r3
}
 8000664:	f04f 30ff 	mov.w	r0, #4294967295
 8000668:	bc30      	pop	{r4, r5}
 800066a:	4770      	bx	lr
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	080003b5 	.word	0x080003b5
 8000678:	080003c5 	.word	0x080003c5

0800067c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800067c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800067e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8000682:	46a4      	mov	ip, r4
}
 8000684:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000688:	4760      	bx	ip
 800068a:	bf00      	nop

0800068c <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800068c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800068e:	2301      	movs	r3, #1
{
 8000690:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000692:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8000696:	4619      	mov	r1, r3
 8000698:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
 800069a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800069e:	4760      	bx	ip

080006a0 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80006a0:	b538      	push	{r3, r4, r5, lr}
 80006a2:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80006a4:	2301      	movs	r3, #1
 80006a6:	2102      	movs	r1, #2
 80006a8:	4622      	mov	r2, r4
 80006aa:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80006ae:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
 80006b0:	b918      	cbnz	r0, 80006ba <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80006b2:	7823      	ldrb	r3, [r4, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80006ba:	bd38      	pop	{r3, r4, r5, pc}

080006bc <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 80006bc:	b510      	push	{r4, lr}
 80006be:	460c      	mov	r4, r1
 80006c0:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80006c2:	2301      	movs	r3, #1
 80006c4:	2191      	movs	r1, #145	@ 0x91
{
 80006c6:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80006ca:	f10d 0207 	add.w	r2, sp, #7
 80006ce:	6804      	ldr	r4, [r0, #0]
 80006d0:	6880      	ldr	r0, [r0, #8]
 80006d2:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
 80006d4:	b002      	add	sp, #8
 80006d6:	bd10      	pop	{r4, pc}

080006d8 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 80006d8:	b510      	push	{r4, lr}
 80006da:	460c      	mov	r4, r1
 80006dc:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80006de:	2301      	movs	r3, #1
 80006e0:	2192      	movs	r1, #146	@ 0x92
{
 80006e2:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80006e6:	f10d 0207 	add.w	r2, sp, #7
 80006ea:	6804      	ldr	r4, [r0, #0]
 80006ec:	6880      	ldr	r0, [r0, #8]
 80006ee:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
 80006f0:	b002      	add	sp, #8
 80006f2:	bd10      	pop	{r4, pc}

080006f4 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80006f4:	b510      	push	{r4, lr}
 80006f6:	460c      	mov	r4, r1
 80006f8:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80006fa:	2301      	movs	r3, #1
 80006fc:	2193      	movs	r1, #147	@ 0x93
{
 80006fe:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000702:	f10d 0207 	add.w	r2, sp, #7
 8000706:	6804      	ldr	r4, [r0, #0]
 8000708:	6880      	ldr	r0, [r0, #8]
 800070a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
 800070c:	b002      	add	sp, #8
 800070e:	bd10      	pop	{r4, pc}

08000710 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8000710:	b510      	push	{r4, lr}
 8000712:	460c      	mov	r4, r1
 8000714:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000716:	2301      	movs	r3, #1
 8000718:	2194      	movs	r1, #148	@ 0x94
{
 800071a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800071e:	f10d 0207 	add.w	r2, sp, #7
 8000722:	6804      	ldr	r4, [r0, #0]
 8000724:	6880      	ldr	r0, [r0, #8]
 8000726:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
 8000728:	b002      	add	sp, #8
 800072a:	bd10      	pop	{r4, pc}

0800072c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800072c:	b510      	push	{r4, lr}
 800072e:	460c      	mov	r4, r1
 8000730:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000732:	2301      	movs	r3, #1
 8000734:	2195      	movs	r1, #149	@ 0x95
{
 8000736:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800073a:	f10d 0207 	add.w	r2, sp, #7
 800073e:	6804      	ldr	r4, [r0, #0]
 8000740:	6880      	ldr	r0, [r0, #8]
 8000742:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
 8000744:	b002      	add	sp, #8
 8000746:	bd10      	pop	{r4, pc}

08000748 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8000748:	b510      	push	{r4, lr}
 800074a:	460c      	mov	r4, r1
 800074c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800074e:	2301      	movs	r3, #1
 8000750:	2196      	movs	r1, #150	@ 0x96
{
 8000752:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000756:	f10d 0207 	add.w	r2, sp, #7
 800075a:	6804      	ldr	r4, [r0, #0]
 800075c:	6880      	ldr	r0, [r0, #8]
 800075e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
 8000760:	b002      	add	sp, #8
 8000762:	bd10      	pop	{r4, pc}

08000764 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8000764:	b510      	push	{r4, lr}
 8000766:	460c      	mov	r4, r1
 8000768:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800076a:	2301      	movs	r3, #1
 800076c:	21a4      	movs	r1, #164	@ 0xa4
{
 800076e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000772:	f10d 0207 	add.w	r2, sp, #7
 8000776:	6804      	ldr	r4, [r0, #0]
 8000778:	6880      	ldr	r0, [r0, #8]
 800077a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
 800077c:	b002      	add	sp, #8
 800077e:	bd10      	pop	{r4, pc}

08000780 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8000780:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000782:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8000786:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000788:	2301      	movs	r3, #1
 800078a:	46a4      	mov	ip, r4
 800078c:	21a8      	movs	r1, #168	@ 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 800078e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000792:	4760      	bx	ip

08000794 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8000794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000796:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8000798:	4c2a      	ldr	r4, [pc, #168]	@ (8000844 <MT48LC4M32B2_Init+0xb0>)
 800079a:	2301      	movs	r3, #1
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 800079c:	2100      	movs	r1, #0
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800079e:	682a      	ldr	r2, [r5, #0]
{
 80007a0:	4607      	mov	r7, r0
  Command.ModeRegisterDefinition = 0;
 80007a2:	60e1      	str	r1, [r4, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007a4:	4621      	mov	r1, r4
  Command.AutoRefreshNumber      = 1;
 80007a6:	60a3      	str	r3, [r4, #8]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 80007a8:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007b0:	f010 fd16 	bl	80111e0 <HAL_SDRAM_SendCommand>
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d142      	bne.n	800083e <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80007b8:	f00d fa7a 	bl	800dcb0 <HAL_GetTick>
 80007bc:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80007be:	f00d fa77 	bl	800dcb0 <HAL_GetTick>
 80007c2:	4286      	cmp	r6, r0
 80007c4:	d0fb      	beq.n	80007be <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80007c6:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80007c8:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
 80007ca:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007cc:	491d      	ldr	r1, [pc, #116]	@ (8000844 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80007ce:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
 80007d0:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 80007d2:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007d4:	4638      	mov	r0, r7
 80007d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.AutoRefreshNumber      = 1;
 80007da:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80007dc:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007de:	f010 fcff 	bl	80111e0 <HAL_SDRAM_SendCommand>
 80007e2:	bb60      	cbnz	r0, 800083e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007e4:	4917      	ldr	r1, [pc, #92]	@ (8000844 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
 80007e6:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
 80007ea:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007ec:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
 80007ee:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
 80007f2:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.AutoRefreshNumber      = 8;
 80007f8:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007fa:	f010 fcf1 	bl	80111e0 <HAL_SDRAM_SendCommand>
 80007fe:	b9f0      	cbnz	r0, 800083e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000800:	4910      	ldr	r1, [pc, #64]	@ (8000844 <MT48LC4M32B2_Init+0xb0>)
 8000802:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000804:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8000808:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 800080a:	696a      	ldr	r2, [r5, #20]
 800080c:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 800080e:	69aa      	ldr	r2, [r5, #24]
 8000810:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000812:	69ea      	ldr	r2, [r5, #28]
 8000814:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
 8000816:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8000818:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800081a:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
 800081c:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000820:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8000824:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000826:	f010 fcdb 	bl	80111e0 <HAL_SDRAM_SendCommand>
 800082a:	b940      	cbnz	r0, 800083e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800082c:	68a9      	ldr	r1, [r5, #8]
 800082e:	4638      	mov	r0, r7
 8000830:	f010 fcf6 	bl	8011220 <HAL_SDRAM_ProgramRefreshRate>
 8000834:	3800      	subs	r0, #0
 8000836:	bf18      	it	ne
 8000838:	2001      	movne	r0, #1
 800083a:	4240      	negs	r0, r0
}
 800083c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
 800083e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000844:	240001a8 	.word	0x240001a8

08000848 <FLP_Draw_Box>:
		}
	}
}

void FLP_Draw_Box (uint16_t* buffer, int x, int y, int border, int height, int width, uint32_t color)
{
 8000848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800084c:	b083      	sub	sp, #12
 800084e:	469a      	mov	sl, r3
 8000850:	4693      	mov	fp, r2
 8000852:	460e      	mov	r6, r1
	for (int row = y; row < y + height; row++)
 8000854:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000856:	2b00      	cmp	r3, #0
 8000858:	eb02 0503 	add.w	r5, r2, r3
 800085c:	dd4c      	ble.n	80008f8 <FLP_Draw_Box+0xb0>
		for (int col = x; col < x + width; col++)
 800085e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000860:	2b00      	cmp	r3, #0
 8000862:	eb01 0803 	add.w	r8, r1, r3
 8000866:	dd47      	ble.n	80008f8 <FLP_Draw_Box+0xb0>
 8000868:	461f      	mov	r7, r3
 800086a:	4541      	cmp	r1, r8
 800086c:	bfa8      	it	ge
 800086e:	2701      	movge	r7, #1
 8000870:	2b01      	cmp	r3, #1
 8000872:	bf18      	it	ne
 8000874:	4541      	cmpne	r1, r8
 8000876:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 800087a:	f027 0401 	bic.w	r4, r7, #1
 800087e:	ea4f 0957 	mov.w	r9, r7, lsr #1
 8000882:	f007 0701 	and.w	r7, r7, #1
 8000886:	eb01 1e43 	add.w	lr, r1, r3, lsl #5
 800088a:	bfac      	ite	ge
 800088c:	f04f 0801 	movge.w	r8, #1
 8000890:	f04f 0800 	movlt.w	r8, #0
 8000894:	440c      	add	r4, r1
 8000896:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800089a:	46bc      	mov	ip, r7
 800089c:	bfa8      	it	ge
 800089e:	460c      	movge	r4, r1
 80008a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80008a2:	015b      	lsls	r3, r3, #5
 80008a4:	f8cd 8004 	str.w	r8, [sp, #4]
 80008a8:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 80008ac:	46c8      	mov	r8, r9
 80008ae:	b289      	uxth	r1, r1
 80008b0:	4637      	mov	r7, r6
 80008b2:	46e1      	mov	r9, ip
 80008b4:	9e01      	ldr	r6, [sp, #4]
 80008b6:	b99e      	cbnz	r6, 80008e0 <FLP_Draw_Box+0x98>
 80008b8:	4646      	mov	r6, r8
 80008ba:	9400      	str	r4, [sp, #0]
 80008bc:	f04f 0c00 	mov.w	ip, #0
 80008c0:	eb0e 0806 	add.w	r8, lr, r6
{
 80008c4:	4674      	mov	r4, lr
 80008c6:	f361 0c0f 	bfi	ip, r1, #0, #16
 80008ca:	f361 4c1f 	bfi	ip, r1, #16, #16
			buffer[col + row * SCREEN_WIDTH] = color;
 80008ce:	f844 cb04 	str.w	ip, [r4], #4
		for (int col = x; col < x + width; col++)
 80008d2:	45a0      	cmp	r8, r4
 80008d4:	d1fb      	bne.n	80008ce <FLP_Draw_Box+0x86>
 80008d6:	f1b9 0f00 	cmp.w	r9, #0
 80008da:	d03b      	beq.n	8000954 <FLP_Draw_Box+0x10c>
 80008dc:	9c00      	ldr	r4, [sp, #0]
 80008de:	46b0      	mov	r8, r6
	for (int row = y; row < y + height; row++)
 80008e0:	3201      	adds	r2, #1
			buffer[col + row * SCREEN_WIDTH] = color;
 80008e2:	eb03 0c04 	add.w	ip, r3, r4
	for (int row = y; row < y + height; row++)
 80008e6:	f50e 7e70 	add.w	lr, lr, #960	@ 0x3c0
 80008ea:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80008ee:	42aa      	cmp	r2, r5
			buffer[col + row * SCREEN_WIDTH] = color;
 80008f0:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
	for (int row = y; row < y + height; row++)
 80008f4:	dbde      	blt.n	80008b4 <FLP_Draw_Box+0x6c>
 80008f6:	463e      	mov	r6, r7
	FLP_Draw_Rectangle (buffer, x, y, height, width, color);
	FLP_Draw_Rectangle (buffer, x + border / 2, y + border / 2, height - border, width - border, 0x0000);
 80008f8:	f1ba 0f00 	cmp.w	sl, #0
 80008fc:	4653      	mov	r3, sl
 80008fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8000900:	bfb8      	it	lt
 8000902:	f10a 0301 	addlt.w	r3, sl, #1
 8000906:	eba2 050a 	sub.w	r5, r2, sl
 800090a:	eb0b 0b63 	add.w	fp, fp, r3, asr #1
 800090e:	eb06 0663 	add.w	r6, r6, r3, asr #1
 8000912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000914:	eba3 030a 	sub.w	r3, r3, sl
	for (int row = y; row < y + height; row++)
 8000918:	445b      	add	r3, fp
 800091a:	459b      	cmp	fp, r3
 800091c:	da17      	bge.n	800094e <FLP_Draw_Box+0x106>
 800091e:	2d00      	cmp	r5, #0
 8000920:	dd15      	ble.n	800094e <FLP_Draw_Box+0x106>
 8000922:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8000926:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
			buffer[col + row * SCREEN_WIDTH] = color;
 800092a:	006d      	lsls	r5, r5, #1
 800092c:	eb06 134b 	add.w	r3, r6, fp, lsl #5
 8000930:	eb06 1642 	add.w	r6, r6, r2, lsl #5
 8000934:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000938:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800093c:	4618      	mov	r0, r3
 800093e:	462a      	mov	r2, r5
 8000940:	2100      	movs	r1, #0
 8000942:	f011 f831 	bl	80119a8 <memset>
	for (int row = y; row < y + height; row++)
 8000946:	f500 7370 	add.w	r3, r0, #960	@ 0x3c0
 800094a:	429e      	cmp	r6, r3
 800094c:	d1f6      	bne.n	800093c <FLP_Draw_Box+0xf4>
}
 800094e:	b003      	add	sp, #12
 8000950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int row = y; row < y + height; row++)
 8000954:	3201      	adds	r2, #1
 8000956:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800095a:	f50e 7e70 	add.w	lr, lr, #960	@ 0x3c0
 800095e:	42aa      	cmp	r2, r5
 8000960:	dbac      	blt.n	80008bc <FLP_Draw_Box+0x74>
 8000962:	e7c8      	b.n	80008f6 <FLP_Draw_Box+0xae>

08000964 <FLP_Draw_Symbol>:

void FLP_Draw_Symbol (uint16_t* buffer, int x, int y, uint32_t color, int intensity)
{
 8000964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	4690      	mov	r8, r2
 800096c:	4699      	mov	r9, r3
    offset = 0;
 800096e:	2200      	movs	r2, #0
{
 8000970:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
    if (index >= sizeof(ascii_map) - 1) index = sizeof(ascii_map) - 2;
 8000972:	f640 4af2 	movw	sl, #3314	@ 0xcf2
    offset = 0;
 8000976:	4ba4      	ldr	r3, [pc, #656]	@ (8000c08 <FLP_Draw_Symbol+0x2a4>)
{
 8000978:	4606      	mov	r6, r0
    int index = (intensity * (sizeof(ascii_map) - 2)) / 255;
 800097a:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
    const char ascii_map[] = " .,-~:;=/*#$@";
 800097e:	4ca3      	ldr	r4, [pc, #652]	@ (8000c0c <FLP_Draw_Symbol+0x2a8>)
{
 8000980:	460f      	mov	r7, r1
    const char ascii_map[] = " .,-~:;=/*#$@";
 8000982:	46ec      	mov	ip, sp
    offset = 0;
 8000984:	601a      	str	r2, [r3, #0]
    if (index >= sizeof(ascii_map) - 1) index = sizeof(ascii_map) - 2;
 8000986:	ebba 0f8e 	cmp.w	sl, lr, lsl #2
    const char ascii_map[] = " .,-~:;=/*#$@";
 800098a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800098e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000992:	f8ac 3000 	strh.w	r3, [ip]
    if (index >= sizeof(ascii_map) - 1) index = sizeof(ascii_map) - 2;
 8000996:	d208      	bcs.n	80009aa <FLP_Draw_Symbol+0x46>
        case '=': copy_equals (buffer, x, y, color); break;
        case '/': copy_slash (buffer, x, y, color); break;
        case '*': copy_star (buffer, x, y, color); break;
        case '#': copy_hashtag (buffer, x, y, color); break;
        case '$': copy_dollar (buffer, x, y, color); break;
        case '@': copy_at (buffer, x, y, color); break;
 8000998:	464b      	mov	r3, r9
 800099a:	4642      	mov	r2, r8
 800099c:	4639      	mov	r1, r7
 800099e:	4630      	mov	r0, r6
        default: break;
    }
}
 80009a0:	b004      	add	sp, #16
 80009a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '@': copy_at (buffer, x, y, color); break;
 80009a6:	f001 b9bb 	b.w	8001d20 <copy_at>
    int index = (intensity * (sizeof(ascii_map) - 2)) / 255;
 80009aa:	4b99      	ldr	r3, [pc, #612]	@ (8000c10 <FLP_Draw_Symbol+0x2ac>)
 80009ac:	ea4f 058e 	mov.w	r5, lr, lsl #2
 80009b0:	fba3 3505 	umull	r3, r5, r3, r5
    return ascii_map[index];
 80009b4:	ab04      	add	r3, sp, #16
 80009b6:	eb03 15d5 	add.w	r5, r3, r5, lsr #7
 80009ba:	f815 3c10 	ldrb.w	r3, [r5, #-16]
    switch(c)
 80009be:	3b23      	subs	r3, #35	@ 0x23
 80009c0:	2b5b      	cmp	r3, #91	@ 0x5b
 80009c2:	f200 80bb 	bhi.w	8000b3c <FLP_Draw_Symbol+0x1d8>
 80009c6:	a201      	add	r2, pc, #4	@ (adr r2, 80009cc <FLP_Draw_Symbol+0x68>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	08000b43 	.word	0x08000b43
 80009d0:	08000b55 	.word	0x08000b55
 80009d4:	08000b3d 	.word	0x08000b3d
 80009d8:	08000b3d 	.word	0x08000b3d
 80009dc:	08000b3d 	.word	0x08000b3d
 80009e0:	08000b3d 	.word	0x08000b3d
 80009e4:	08000b3d 	.word	0x08000b3d
 80009e8:	08000b67 	.word	0x08000b67
 80009ec:	08000b3d 	.word	0x08000b3d
 80009f0:	08000b79 	.word	0x08000b79
 80009f4:	08000b8b 	.word	0x08000b8b
 80009f8:	08000b9d 	.word	0x08000b9d
 80009fc:	08000baf 	.word	0x08000baf
 8000a00:	08000b3d 	.word	0x08000b3d
 8000a04:	08000b3d 	.word	0x08000b3d
 8000a08:	08000b3d 	.word	0x08000b3d
 8000a0c:	08000b3d 	.word	0x08000b3d
 8000a10:	08000b3d 	.word	0x08000b3d
 8000a14:	08000b3d 	.word	0x08000b3d
 8000a18:	08000b3d 	.word	0x08000b3d
 8000a1c:	08000b3d 	.word	0x08000b3d
 8000a20:	08000b3d 	.word	0x08000b3d
 8000a24:	08000b3d 	.word	0x08000b3d
 8000a28:	08000bc1 	.word	0x08000bc1
 8000a2c:	08000bd3 	.word	0x08000bd3
 8000a30:	08000b3d 	.word	0x08000b3d
 8000a34:	08000be5 	.word	0x08000be5
 8000a38:	08000b3d 	.word	0x08000b3d
 8000a3c:	08000b3d 	.word	0x08000b3d
 8000a40:	08000999 	.word	0x08000999
 8000a44:	08000b3d 	.word	0x08000b3d
 8000a48:	08000b3d 	.word	0x08000b3d
 8000a4c:	08000b3d 	.word	0x08000b3d
 8000a50:	08000b3d 	.word	0x08000b3d
 8000a54:	08000b3d 	.word	0x08000b3d
 8000a58:	08000b3d 	.word	0x08000b3d
 8000a5c:	08000b3d 	.word	0x08000b3d
 8000a60:	08000b3d 	.word	0x08000b3d
 8000a64:	08000b3d 	.word	0x08000b3d
 8000a68:	08000b3d 	.word	0x08000b3d
 8000a6c:	08000b3d 	.word	0x08000b3d
 8000a70:	08000b3d 	.word	0x08000b3d
 8000a74:	08000b3d 	.word	0x08000b3d
 8000a78:	08000b3d 	.word	0x08000b3d
 8000a7c:	08000b3d 	.word	0x08000b3d
 8000a80:	08000b3d 	.word	0x08000b3d
 8000a84:	08000b3d 	.word	0x08000b3d
 8000a88:	08000b3d 	.word	0x08000b3d
 8000a8c:	08000b3d 	.word	0x08000b3d
 8000a90:	08000b3d 	.word	0x08000b3d
 8000a94:	08000b3d 	.word	0x08000b3d
 8000a98:	08000b3d 	.word	0x08000b3d
 8000a9c:	08000b3d 	.word	0x08000b3d
 8000aa0:	08000b3d 	.word	0x08000b3d
 8000aa4:	08000b3d 	.word	0x08000b3d
 8000aa8:	08000b3d 	.word	0x08000b3d
 8000aac:	08000b3d 	.word	0x08000b3d
 8000ab0:	08000b3d 	.word	0x08000b3d
 8000ab4:	08000b3d 	.word	0x08000b3d
 8000ab8:	08000b3d 	.word	0x08000b3d
 8000abc:	08000b3d 	.word	0x08000b3d
 8000ac0:	08000b3d 	.word	0x08000b3d
 8000ac4:	08000b3d 	.word	0x08000b3d
 8000ac8:	08000b3d 	.word	0x08000b3d
 8000acc:	08000b3d 	.word	0x08000b3d
 8000ad0:	08000b3d 	.word	0x08000b3d
 8000ad4:	08000b3d 	.word	0x08000b3d
 8000ad8:	08000b3d 	.word	0x08000b3d
 8000adc:	08000b3d 	.word	0x08000b3d
 8000ae0:	08000b3d 	.word	0x08000b3d
 8000ae4:	08000b3d 	.word	0x08000b3d
 8000ae8:	08000b3d 	.word	0x08000b3d
 8000aec:	08000b3d 	.word	0x08000b3d
 8000af0:	08000b3d 	.word	0x08000b3d
 8000af4:	08000b3d 	.word	0x08000b3d
 8000af8:	08000b3d 	.word	0x08000b3d
 8000afc:	08000b3d 	.word	0x08000b3d
 8000b00:	08000b3d 	.word	0x08000b3d
 8000b04:	08000b3d 	.word	0x08000b3d
 8000b08:	08000b3d 	.word	0x08000b3d
 8000b0c:	08000b3d 	.word	0x08000b3d
 8000b10:	08000b3d 	.word	0x08000b3d
 8000b14:	08000b3d 	.word	0x08000b3d
 8000b18:	08000b3d 	.word	0x08000b3d
 8000b1c:	08000b3d 	.word	0x08000b3d
 8000b20:	08000b3d 	.word	0x08000b3d
 8000b24:	08000b3d 	.word	0x08000b3d
 8000b28:	08000b3d 	.word	0x08000b3d
 8000b2c:	08000b3d 	.word	0x08000b3d
 8000b30:	08000b3d 	.word	0x08000b3d
 8000b34:	08000b3d 	.word	0x08000b3d
 8000b38:	08000bf7 	.word	0x08000bf7
}
 8000b3c:	b004      	add	sp, #16
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        case '#': copy_hashtag (buffer, x, y, color); break;
 8000b42:	464b      	mov	r3, r9
 8000b44:	4642      	mov	r2, r8
 8000b46:	4639      	mov	r1, r7
 8000b48:	4630      	mov	r0, r6
}
 8000b4a:	b004      	add	sp, #16
 8000b4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '#': copy_hashtag (buffer, x, y, color); break;
 8000b50:	f001 b86c 	b.w	8001c2c <copy_hashtag>
        case '$': copy_dollar (buffer, x, y, color); break;
 8000b54:	464b      	mov	r3, r9
 8000b56:	4642      	mov	r2, r8
 8000b58:	4639      	mov	r1, r7
 8000b5a:	4630      	mov	r0, r6
}
 8000b5c:	b004      	add	sp, #16
 8000b5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '$': copy_dollar (buffer, x, y, color); break;
 8000b62:	f001 be4d 	b.w	8002800 <copy_dollar>
        case '*': copy_star (buffer, x, y, color); break;
 8000b66:	464b      	mov	r3, r9
 8000b68:	4642      	mov	r2, r8
 8000b6a:	4639      	mov	r1, r7
 8000b6c:	4630      	mov	r0, r6
}
 8000b6e:	b004      	add	sp, #16
 8000b70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '*': copy_star (buffer, x, y, color); break;
 8000b74:	f002 b998 	b.w	8002ea8 <copy_star>
        case ',': copy_comma (buffer, x, y, color); break;
 8000b78:	464b      	mov	r3, r9
 8000b7a:	4642      	mov	r2, r8
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	4630      	mov	r0, r6
}
 8000b80:	b004      	add	sp, #16
 8000b82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case ',': copy_comma (buffer, x, y, color); break;
 8000b86:	f000 bc8b 	b.w	80014a0 <copy_comma>
        case '-': copy_dash (buffer, x, y, color); break;
 8000b8a:	464b      	mov	r3, r9
 8000b8c:	4642      	mov	r2, r8
 8000b8e:	4639      	mov	r1, r7
 8000b90:	4630      	mov	r0, r6
}
 8000b92:	b004      	add	sp, #16
 8000b94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '-': copy_dash (buffer, x, y, color); break;
 8000b98:	f000 bf06 	b.w	80019a8 <copy_dash>
        case '.': copy_dot (buffer, x, y, color); break;
 8000b9c:	464b      	mov	r3, r9
 8000b9e:	4642      	mov	r2, r8
 8000ba0:	4639      	mov	r1, r7
 8000ba2:	4630      	mov	r0, r6
}
 8000ba4:	b004      	add	sp, #16
 8000ba6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '.': copy_dot (buffer, x, y, color); break;
 8000baa:	f000 bb6b 	b.w	8001284 <copy_dot>
        case '/': copy_slash (buffer, x, y, color); break;
 8000bae:	464b      	mov	r3, r9
 8000bb0:	4642      	mov	r2, r8
 8000bb2:	4639      	mov	r1, r7
 8000bb4:	4630      	mov	r0, r6
}
 8000bb6:	b004      	add	sp, #16
 8000bb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '/': copy_slash (buffer, x, y, color); break;
 8000bbc:	f002 b8ac 	b.w	8002d18 <copy_slash>
        case ':': copy_colon (buffer, x, y, color); break;
 8000bc0:	464b      	mov	r3, r9
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	4639      	mov	r1, r7
 8000bc6:	4630      	mov	r0, r6
}
 8000bc8:	b004      	add	sp, #16
 8000bca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case ':': copy_colon (buffer, x, y, color); break;
 8000bce:	f002 bc8b 	b.w	80034e8 <copy_colon>
        case ';': copy_semicolon (buffer, x, y, color); break;
 8000bd2:	464b      	mov	r3, r9
 8000bd4:	4642      	mov	r2, r8
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	4630      	mov	r0, r6
}
 8000bda:	b004      	add	sp, #16
 8000bdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case ';': copy_semicolon (buffer, x, y, color); break;
 8000be0:	f002 bb0a 	b.w	80031f8 <copy_semicolon>
        case '=': copy_equals (buffer, x, y, color); break;
 8000be4:	464b      	mov	r3, r9
 8000be6:	4642      	mov	r2, r8
 8000be8:	4639      	mov	r1, r7
 8000bea:	4630      	mov	r0, r6
}
 8000bec:	b004      	add	sp, #16
 8000bee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '=': copy_equals (buffer, x, y, color); break;
 8000bf2:	f001 bfcb 	b.w	8002b8c <copy_equals>
        case '~': copy_tilde (buffer, x, y, color); break;
 8000bf6:	464b      	mov	r3, r9
 8000bf8:	4642      	mov	r2, r8
 8000bfa:	4639      	mov	r1, r7
 8000bfc:	4630      	mov	r0, r6
}
 8000bfe:	b004      	add	sp, #16
 8000c00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '~': copy_tilde (buffer, x, y, color); break;
 8000c04:	f002 ba50 	b.w	80030a8 <copy_tilde>
 8000c08:	240001b8 	.word	0x240001b8
 8000c0c:	08012e40 	.word	0x08012e40
 8000c10:	80808081 	.word	0x80808081

08000c14 <FLP_Draw_String>:


void FLP_Draw_String (uint16_t* buffer, char* string, int x, int y, uint32_t color)
{
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	4699      	mov	r9, r3
    offset = 0;
 8000c1a:	4eae      	ldr	r6, [pc, #696]	@ (8000ed4 <FLP_Draw_String+0x2c0>)
 8000c1c:	2300      	movs	r3, #0
{
 8000c1e:	f8dd a020 	ldr.w	sl, [sp, #32]
    offset = 0;
 8000c22:	6033      	str	r3, [r6, #0]
    char c;
    int i = 0;
    
    while ((c = string[i]) != '\0')
 8000c24:	780c      	ldrb	r4, [r1, #0]
 8000c26:	2c00      	cmp	r4, #0
 8000c28:	d063      	beq.n	8000cf2 <FLP_Draw_String+0xde>
 8000c2a:	460d      	mov	r5, r1
 8000c2c:	4607      	mov	r7, r0
 8000c2e:	4690      	mov	r8, r2
    {
        switch (c)
 8000c30:	3c2c      	subs	r4, #44	@ 0x2c
 8000c32:	2c4e      	cmp	r4, #78	@ 0x4e
 8000c34:	d857      	bhi.n	8000ce6 <FLP_Draw_String+0xd2>
 8000c36:	e8df f014 	tbh	[pc, r4, lsl #1]
 8000c3a:	01e5      	.short	0x01e5
 8000c3c:	01f40056 	.word	0x01f40056
 8000c40:	02030056 	.word	0x02030056
 8000c44:	02210212 	.word	0x02210212
 8000c48:	023f0230 	.word	0x023f0230
 8000c4c:	025d024e 	.word	0x025d024e
 8000c50:	027b026c 	.word	0x027b026c
 8000c54:	005601d6 	.word	0x005601d6
 8000c58:	00560056 	.word	0x00560056
 8000c5c:	00560056 	.word	0x00560056
 8000c60:	00560056 	.word	0x00560056
 8000c64:	01c7004f 	.word	0x01c7004f
 8000c68:	01a901b8 	.word	0x01a901b8
 8000c6c:	018b019a 	.word	0x018b019a
 8000c70:	016d017c 	.word	0x016d017c
 8000c74:	014f015e 	.word	0x014f015e
 8000c78:	012e013d 	.word	0x012e013d
 8000c7c:	0110011f 	.word	0x0110011f
 8000c80:	00f20101 	.word	0x00f20101
 8000c84:	00d400e3 	.word	0x00d400e3
 8000c88:	00b600c5 	.word	0x00b600c5
 8000c8c:	009800a7 	.word	0x009800a7
 8000c90:	007a0089 	.word	0x007a0089
 8000c94:	005e006c 	.word	0x005e006c
 8000c98:	00560056 	.word	0x00560056
 8000c9c:	00560056 	.word	0x00560056
 8000ca0:	00560056 	.word	0x00560056
 8000ca4:	01c7004f 	.word	0x01c7004f
 8000ca8:	01a901b8 	.word	0x01a901b8
 8000cac:	018b019a 	.word	0x018b019a
 8000cb0:	016d017c 	.word	0x016d017c
 8000cb4:	014f015e 	.word	0x014f015e
 8000cb8:	012e013d 	.word	0x012e013d
 8000cbc:	0110011f 	.word	0x0110011f
 8000cc0:	00f20101 	.word	0x00f20101
 8000cc4:	00d400e3 	.word	0x00d400e3
 8000cc8:	00b600c5 	.word	0x00b600c5
 8000ccc:	009800a7 	.word	0x009800a7
 8000cd0:	007a0089 	.word	0x007a0089
 8000cd4:	005e006c 	.word	0x005e006c
        {
            case 'A': copy_A (buffer, x, y, color); break;
 8000cd8:	4653      	mov	r3, sl
 8000cda:	464a      	mov	r2, r9
 8000cdc:	4641      	mov	r1, r8
 8000cde:	4638      	mov	r0, r7
 8000ce0:	f002 fcc0 	bl	8003664 <copy_A>
            case '.': copy_dot (buffer, x, y, color); break;
            case ',': copy_comma (buffer, x, y, color); break;
            default: break;
        }
        
        offset += 7;  // Move to next character position
 8000ce4:	6833      	ldr	r3, [r6, #0]
 8000ce6:	3307      	adds	r3, #7
 8000ce8:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000cea:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000cee:	2c00      	cmp	r4, #0
 8000cf0:	d19e      	bne.n	8000c30 <FLP_Draw_String+0x1c>
        i++;          // Move to next character in string
    }
}
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            case 'Z': copy_Z (buffer, x, y, color); break;
 8000cf6:	4653      	mov	r3, sl
 8000cf8:	464a      	mov	r2, r9
 8000cfa:	4641      	mov	r1, r8
 8000cfc:	4638      	mov	r0, r7
 8000cfe:	f008 fb97 	bl	8009430 <copy_Z>
        offset += 7;  // Move to next character position
 8000d02:	6833      	ldr	r3, [r6, #0]
 8000d04:	3307      	adds	r3, #7
 8000d06:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000d08:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000d0c:	2c00      	cmp	r4, #0
 8000d0e:	d18f      	bne.n	8000c30 <FLP_Draw_String+0x1c>
 8000d10:	e7ef      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'Y': copy_Y (buffer, x, y, color); break;
 8000d12:	4653      	mov	r3, sl
 8000d14:	464a      	mov	r2, r9
 8000d16:	4641      	mov	r1, r8
 8000d18:	4638      	mov	r0, r7
 8000d1a:	f008 f935 	bl	8008f88 <copy_Y>
        offset += 7;  // Move to next character position
 8000d1e:	6833      	ldr	r3, [r6, #0]
 8000d20:	3307      	adds	r3, #7
 8000d22:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000d24:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000d28:	2c00      	cmp	r4, #0
 8000d2a:	d181      	bne.n	8000c30 <FLP_Draw_String+0x1c>
 8000d2c:	e7e1      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'X': copy_X (buffer, x, y, color); break;
 8000d2e:	4653      	mov	r3, sl
 8000d30:	464a      	mov	r2, r9
 8000d32:	4641      	mov	r1, r8
 8000d34:	4638      	mov	r0, r7
 8000d36:	f007 fd37 	bl	80087a8 <copy_X>
        offset += 7;  // Move to next character position
 8000d3a:	6833      	ldr	r3, [r6, #0]
 8000d3c:	3307      	adds	r3, #7
 8000d3e:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000d40:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	f47f af73 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000d4a:	e7d2      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'W': copy_W (buffer, x, y, color); break;
 8000d4c:	4653      	mov	r3, sl
 8000d4e:	464a      	mov	r2, r9
 8000d50:	4641      	mov	r1, r8
 8000d52:	4638      	mov	r0, r7
 8000d54:	f007 fae0 	bl	8008318 <copy_W>
        offset += 7;  // Move to next character position
 8000d58:	6833      	ldr	r3, [r6, #0]
 8000d5a:	3307      	adds	r3, #7
 8000d5c:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000d5e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000d62:	2c00      	cmp	r4, #0
 8000d64:	f47f af64 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000d68:	e7c3      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'V': copy_V (buffer, x, y, color); break;
 8000d6a:	4653      	mov	r3, sl
 8000d6c:	464a      	mov	r2, r9
 8000d6e:	4641      	mov	r1, r8
 8000d70:	4638      	mov	r0, r7
 8000d72:	f007 f8c5 	bl	8007f00 <copy_V>
        offset += 7;  // Move to next character position
 8000d76:	6833      	ldr	r3, [r6, #0]
 8000d78:	3307      	adds	r3, #7
 8000d7a:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000d7c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000d80:	2c00      	cmp	r4, #0
 8000d82:	f47f af55 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000d86:	e7b4      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'U': copy_U (buffer, x, y, color); break;
 8000d88:	4653      	mov	r3, sl
 8000d8a:	464a      	mov	r2, r9
 8000d8c:	4641      	mov	r1, r8
 8000d8e:	4638      	mov	r0, r7
 8000d90:	f006 ff0a 	bl	8007ba8 <copy_U>
        offset += 7;  // Move to next character position
 8000d94:	6833      	ldr	r3, [r6, #0]
 8000d96:	3307      	adds	r3, #7
 8000d98:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000d9a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	f47f af46 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000da4:	e7a5      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'T': copy_T (buffer, x, y, color); break;
 8000da6:	4653      	mov	r3, sl
 8000da8:	464a      	mov	r2, r9
 8000daa:	4641      	mov	r1, r8
 8000dac:	4638      	mov	r0, r7
 8000dae:	f006 fd3f 	bl	8007830 <copy_T>
        offset += 7;  // Move to next character position
 8000db2:	6833      	ldr	r3, [r6, #0]
 8000db4:	3307      	adds	r3, #7
 8000db6:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000db8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	f47f af37 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000dc2:	e796      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'S': copy_S (buffer, x, y, color); break;
 8000dc4:	4653      	mov	r3, sl
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	4641      	mov	r1, r8
 8000dca:	4638      	mov	r0, r7
 8000dcc:	f006 fbbe 	bl	800754c <copy_S>
        offset += 7;  // Move to next character position
 8000dd0:	6833      	ldr	r3, [r6, #0]
 8000dd2:	3307      	adds	r3, #7
 8000dd4:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000dd6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	f47f af28 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000de0:	e787      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'R': copy_R (buffer, x, y, color); break;
 8000de2:	4653      	mov	r3, sl
 8000de4:	464a      	mov	r2, r9
 8000de6:	4641      	mov	r1, r8
 8000de8:	4638      	mov	r0, r7
 8000dea:	f006 f9b9 	bl	8007160 <copy_R>
        offset += 7;  // Move to next character position
 8000dee:	6833      	ldr	r3, [r6, #0]
 8000df0:	3307      	adds	r3, #7
 8000df2:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000df4:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000df8:	2c00      	cmp	r4, #0
 8000dfa:	f47f af19 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000dfe:	e778      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'Q': copy_Q (buffer, x, y, color); break;
 8000e00:	4653      	mov	r3, sl
 8000e02:	464a      	mov	r2, r9
 8000e04:	4641      	mov	r1, r8
 8000e06:	4638      	mov	r0, r7
 8000e08:	f005 ff9a 	bl	8006d40 <copy_Q>
        offset += 7;  // Move to next character position
 8000e0c:	6833      	ldr	r3, [r6, #0]
 8000e0e:	3307      	adds	r3, #7
 8000e10:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000e12:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000e16:	2c00      	cmp	r4, #0
 8000e18:	f47f af0a 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000e1c:	e769      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'P': copy_P (buffer, x, y, color); break;
 8000e1e:	4653      	mov	r3, sl
 8000e20:	464a      	mov	r2, r9
 8000e22:	4641      	mov	r1, r8
 8000e24:	4638      	mov	r0, r7
 8000e26:	f005 fde3 	bl	80069f0 <copy_P>
        offset += 7;  // Move to next character position
 8000e2a:	6833      	ldr	r3, [r6, #0]
 8000e2c:	3307      	adds	r3, #7
 8000e2e:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000e30:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	f47f aefb 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000e3a:	e75a      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'O': copy_O (buffer, x, y, color); break;
 8000e3c:	4653      	mov	r3, sl
 8000e3e:	464a      	mov	r2, r9
 8000e40:	4641      	mov	r1, r8
 8000e42:	4638      	mov	r0, r7
 8000e44:	f005 fbf4 	bl	8006630 <copy_O>
        offset += 7;  // Move to next character position
 8000e48:	6833      	ldr	r3, [r6, #0]
 8000e4a:	3307      	adds	r3, #7
 8000e4c:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000e4e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000e52:	2c00      	cmp	r4, #0
 8000e54:	f47f aeec 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000e58:	e74b      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'N': copy_N (buffer, x, y, color); break;
 8000e5a:	4653      	mov	r3, sl
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	4641      	mov	r1, r8
 8000e60:	4638      	mov	r0, r7
 8000e62:	f005 f9b7 	bl	80061d4 <copy_N>
        offset += 7;  // Move to next character position
 8000e66:	6833      	ldr	r3, [r6, #0]
 8000e68:	3307      	adds	r3, #7
 8000e6a:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000e6c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000e70:	2c00      	cmp	r4, #0
 8000e72:	f47f aedd 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000e76:	e73c      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'M': copy_M (buffer, x, y, color); break;
 8000e78:	4653      	mov	r3, sl
 8000e7a:	464a      	mov	r2, r9
 8000e7c:	4641      	mov	r1, r8
 8000e7e:	4638      	mov	r0, r7
 8000e80:	f004 ff68 	bl	8005d54 <copy_M>
        offset += 7;  // Move to next character position
 8000e84:	6833      	ldr	r3, [r6, #0]
 8000e86:	3307      	adds	r3, #7
 8000e88:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000e8a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	f47f aece 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000e94:	e72d      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'L': copy_L (buffer, x, y, color); break;
 8000e96:	4653      	mov	r3, sl
 8000e98:	464a      	mov	r2, r9
 8000e9a:	4641      	mov	r1, r8
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	f004 fe5d 	bl	8005b5c <copy_L>
        offset += 7;  // Move to next character position
 8000ea2:	6833      	ldr	r3, [r6, #0]
 8000ea4:	3307      	adds	r3, #7
 8000ea6:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000ea8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	f47f aebf 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000eb2:	e71e      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'K': copy_K (buffer, x, y, color); break;
 8000eb4:	4653      	mov	r3, sl
 8000eb6:	464a      	mov	r2, r9
 8000eb8:	4641      	mov	r1, r8
 8000eba:	4638      	mov	r0, r7
 8000ebc:	f004 fcc4 	bl	8005848 <copy_K>
        offset += 7;  // Move to next character position
 8000ec0:	6833      	ldr	r3, [r6, #0]
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000ec6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000eca:	2c00      	cmp	r4, #0
 8000ecc:	f47f aeb0 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000ed0:	e70f      	b.n	8000cf2 <FLP_Draw_String+0xde>
 8000ed2:	bf00      	nop
 8000ed4:	240001b8 	.word	0x240001b8
            case 'J': copy_J (buffer, x, y, color); break;
 8000ed8:	4653      	mov	r3, sl
 8000eda:	464a      	mov	r2, r9
 8000edc:	4641      	mov	r1, r8
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f004 fb56 	bl	8005590 <copy_J>
        offset += 7;  // Move to next character position
 8000ee4:	6833      	ldr	r3, [r6, #0]
 8000ee6:	3307      	adds	r3, #7
 8000ee8:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000eea:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000eee:	2c00      	cmp	r4, #0
 8000ef0:	f47f ae9e 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000ef4:	e6fd      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'I': copy_I (buffer, x, y, color); break;
 8000ef6:	4653      	mov	r3, sl
 8000ef8:	464a      	mov	r2, r9
 8000efa:	4641      	mov	r1, r8
 8000efc:	4638      	mov	r0, r7
 8000efe:	f004 f93f 	bl	8005180 <copy_I>
        offset += 7;  // Move to next character position
 8000f02:	6833      	ldr	r3, [r6, #0]
 8000f04:	3307      	adds	r3, #7
 8000f06:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f08:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f0c:	2c00      	cmp	r4, #0
 8000f0e:	f47f ae8f 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000f12:	e6ee      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'H': copy_H (buffer, x, y, color); break;
 8000f14:	4653      	mov	r3, sl
 8000f16:	464a      	mov	r2, r9
 8000f18:	4641      	mov	r1, r8
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	f003 ff5a 	bl	8004dd4 <copy_H>
        offset += 7;  // Move to next character position
 8000f20:	6833      	ldr	r3, [r6, #0]
 8000f22:	3307      	adds	r3, #7
 8000f24:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f26:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f2a:	2c00      	cmp	r4, #0
 8000f2c:	f47f ae80 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000f30:	e6df      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'G': copy_G (buffer, x, y, color); break;
 8000f32:	4653      	mov	r3, sl
 8000f34:	464a      	mov	r2, r9
 8000f36:	4641      	mov	r1, r8
 8000f38:	4638      	mov	r0, r7
 8000f3a:	f003 fd8d 	bl	8004a58 <copy_G>
        offset += 7;  // Move to next character position
 8000f3e:	6833      	ldr	r3, [r6, #0]
 8000f40:	3307      	adds	r3, #7
 8000f42:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f44:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	f47f ae71 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000f4e:	e6d0      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'F': copy_F (buffer, x, y, color); break;
 8000f50:	4653      	mov	r3, sl
 8000f52:	464a      	mov	r2, r9
 8000f54:	4641      	mov	r1, r8
 8000f56:	4638      	mov	r0, r7
 8000f58:	f003 fc40 	bl	80047dc <copy_F>
        offset += 7;  // Move to next character position
 8000f5c:	6833      	ldr	r3, [r6, #0]
 8000f5e:	3307      	adds	r3, #7
 8000f60:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f62:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	f47f ae62 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000f6c:	e6c1      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'E': copy_E (buffer, x, y, color); break;
 8000f6e:	4653      	mov	r3, sl
 8000f70:	464a      	mov	r2, r9
 8000f72:	4641      	mov	r1, r8
 8000f74:	4638      	mov	r0, r7
 8000f76:	f003 fa9b 	bl	80044b0 <copy_E>
        offset += 7;  // Move to next character position
 8000f7a:	6833      	ldr	r3, [r6, #0]
 8000f7c:	3307      	adds	r3, #7
 8000f7e:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f80:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	f47f ae53 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000f8a:	e6b2      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'D': copy_D (buffer, x, y, color); break;
 8000f8c:	4653      	mov	r3, sl
 8000f8e:	464a      	mov	r2, r9
 8000f90:	4641      	mov	r1, r8
 8000f92:	4638      	mov	r0, r7
 8000f94:	f003 f880 	bl	8004098 <copy_D>
        offset += 7;  // Move to next character position
 8000f98:	6833      	ldr	r3, [r6, #0]
 8000f9a:	3307      	adds	r3, #7
 8000f9c:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f9e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000fa2:	2c00      	cmp	r4, #0
 8000fa4:	f47f ae44 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000fa8:	e6a3      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'C': copy_C (buffer, x, y, color); break;
 8000faa:	4653      	mov	r3, sl
 8000fac:	464a      	mov	r2, r9
 8000fae:	4641      	mov	r1, r8
 8000fb0:	4638      	mov	r0, r7
 8000fb2:	f002 ff4b 	bl	8003e4c <copy_C>
        offset += 7;  // Move to next character position
 8000fb6:	6833      	ldr	r3, [r6, #0]
 8000fb8:	3307      	adds	r3, #7
 8000fba:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000fbc:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	f47f ae35 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000fc6:	e694      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case 'B': copy_B (buffer, x, y, color); break;
 8000fc8:	4653      	mov	r3, sl
 8000fca:	464a      	mov	r2, r9
 8000fcc:	4641      	mov	r1, r8
 8000fce:	4638      	mov	r0, r7
 8000fd0:	f002 fd2c 	bl	8003a2c <copy_B>
        offset += 7;  // Move to next character position
 8000fd4:	6833      	ldr	r3, [r6, #0]
 8000fd6:	3307      	adds	r3, #7
 8000fd8:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000fda:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000fde:	2c00      	cmp	r4, #0
 8000fe0:	f47f ae26 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8000fe4:	e685      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '9': copy_9 (buffer, x, y, color); break;
 8000fe6:	4653      	mov	r3, sl
 8000fe8:	464a      	mov	r2, r9
 8000fea:	4641      	mov	r1, r8
 8000fec:	4638      	mov	r0, r7
 8000fee:	f00a fb0b 	bl	800b608 <copy_9>
        offset += 7;  // Move to next character position
 8000ff2:	6833      	ldr	r3, [r6, #0]
 8000ff4:	3307      	adds	r3, #7
 8000ff6:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000ff8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	f47f ae17 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8001002:	e676      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case ',': copy_comma (buffer, x, y, color); break;
 8001004:	4653      	mov	r3, sl
 8001006:	464a      	mov	r2, r9
 8001008:	4641      	mov	r1, r8
 800100a:	4638      	mov	r0, r7
 800100c:	f000 fa48 	bl	80014a0 <copy_comma>
        offset += 7;  // Move to next character position
 8001010:	6833      	ldr	r3, [r6, #0]
 8001012:	3307      	adds	r3, #7
 8001014:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001016:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800101a:	2c00      	cmp	r4, #0
 800101c:	f47f ae08 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8001020:	e667      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '.': copy_dot (buffer, x, y, color); break;
 8001022:	4653      	mov	r3, sl
 8001024:	464a      	mov	r2, r9
 8001026:	4641      	mov	r1, r8
 8001028:	4638      	mov	r0, r7
 800102a:	f000 f92b 	bl	8001284 <copy_dot>
        offset += 7;  // Move to next character position
 800102e:	6833      	ldr	r3, [r6, #0]
 8001030:	3307      	adds	r3, #7
 8001032:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001034:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001038:	2c00      	cmp	r4, #0
 800103a:	f47f adf9 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 800103e:	e658      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '0': copy_0 (buffer, x, y, color); break;
 8001040:	4653      	mov	r3, sl
 8001042:	464a      	mov	r2, r9
 8001044:	4641      	mov	r1, r8
 8001046:	4638      	mov	r0, r7
 8001048:	f008 fb66 	bl	8009718 <copy_0>
        offset += 7;  // Move to next character position
 800104c:	6833      	ldr	r3, [r6, #0]
 800104e:	3307      	adds	r3, #7
 8001050:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001052:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001056:	2c00      	cmp	r4, #0
 8001058:	f47f adea 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 800105c:	e649      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '1': copy_1 (buffer, x, y, color); break;
 800105e:	4653      	mov	r3, sl
 8001060:	464a      	mov	r2, r9
 8001062:	4641      	mov	r1, r8
 8001064:	4638      	mov	r0, r7
 8001066:	f008 fd6f 	bl	8009b48 <copy_1>
        offset += 7;  // Move to next character position
 800106a:	6833      	ldr	r3, [r6, #0]
 800106c:	3307      	adds	r3, #7
 800106e:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001070:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001074:	2c00      	cmp	r4, #0
 8001076:	f47f addb 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 800107a:	e63a      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '2': copy_2 (buffer, x, y, color); break;
 800107c:	4653      	mov	r3, sl
 800107e:	464a      	mov	r2, r9
 8001080:	4641      	mov	r1, r8
 8001082:	4638      	mov	r0, r7
 8001084:	f008 fea4 	bl	8009dd0 <copy_2>
        offset += 7;  // Move to next character position
 8001088:	6833      	ldr	r3, [r6, #0]
 800108a:	3307      	adds	r3, #7
 800108c:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 800108e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001092:	2c00      	cmp	r4, #0
 8001094:	f47f adcc 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8001098:	e62b      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '3': copy_3 (buffer, x, y, color); break;
 800109a:	4653      	mov	r3, sl
 800109c:	464a      	mov	r2, r9
 800109e:	4641      	mov	r1, r8
 80010a0:	4638      	mov	r0, r7
 80010a2:	f009 f827 	bl	800a0f4 <copy_3>
        offset += 7;  // Move to next character position
 80010a6:	6833      	ldr	r3, [r6, #0]
 80010a8:	3307      	adds	r3, #7
 80010aa:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 80010ac:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80010b0:	2c00      	cmp	r4, #0
 80010b2:	f47f adbd 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 80010b6:	e61c      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '4': copy_4 (buffer, x, y, color); break;
 80010b8:	4653      	mov	r3, sl
 80010ba:	464a      	mov	r2, r9
 80010bc:	4641      	mov	r1, r8
 80010be:	4638      	mov	r0, r7
 80010c0:	f009 f9b4 	bl	800a42c <copy_4>
        offset += 7;  // Move to next character position
 80010c4:	6833      	ldr	r3, [r6, #0]
 80010c6:	3307      	adds	r3, #7
 80010c8:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 80010ca:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80010ce:	2c00      	cmp	r4, #0
 80010d0:	f47f adae 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 80010d4:	e60d      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '5': copy_5 (buffer, x, y, color); break;
 80010d6:	4653      	mov	r3, sl
 80010d8:	464a      	mov	r2, r9
 80010da:	4641      	mov	r1, r8
 80010dc:	4638      	mov	r0, r7
 80010de:	f009 fb3d 	bl	800a75c <copy_5>
        offset += 7;  // Move to next character position
 80010e2:	6833      	ldr	r3, [r6, #0]
 80010e4:	3307      	adds	r3, #7
 80010e6:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 80010e8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80010ec:	2c00      	cmp	r4, #0
 80010ee:	f47f ad9f 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 80010f2:	e5fe      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '6': copy_6 (buffer, x, y, color); break;
 80010f4:	4653      	mov	r3, sl
 80010f6:	464a      	mov	r2, r9
 80010f8:	4641      	mov	r1, r8
 80010fa:	4638      	mov	r0, r7
 80010fc:	f009 fcd0 	bl	800aaa0 <copy_6>
        offset += 7;  // Move to next character position
 8001100:	6833      	ldr	r3, [r6, #0]
 8001102:	3307      	adds	r3, #7
 8001104:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001106:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800110a:	2c00      	cmp	r4, #0
 800110c:	f47f ad90 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 8001110:	e5ef      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '7': copy_7 (buffer, x, y, color); break;
 8001112:	4653      	mov	r3, sl
 8001114:	464a      	mov	r2, r9
 8001116:	4641      	mov	r1, r8
 8001118:	4638      	mov	r0, r7
 800111a:	f009 fe83 	bl	800ae24 <copy_7>
        offset += 7;  // Move to next character position
 800111e:	6833      	ldr	r3, [r6, #0]
 8001120:	3307      	adds	r3, #7
 8001122:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001124:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001128:	2c00      	cmp	r4, #0
 800112a:	f47f ad81 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 800112e:	e5e0      	b.n	8000cf2 <FLP_Draw_String+0xde>
            case '8': copy_8 (buffer, x, y, color); break;
 8001130:	4653      	mov	r3, sl
 8001132:	464a      	mov	r2, r9
 8001134:	4641      	mov	r1, r8
 8001136:	4638      	mov	r0, r7
 8001138:	f009 ffbe 	bl	800b0b8 <copy_8>
        offset += 7;  // Move to next character position
 800113c:	6833      	ldr	r3, [r6, #0]
 800113e:	3307      	adds	r3, #7
 8001140:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001142:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001146:	2c00      	cmp	r4, #0
 8001148:	f47f ad72 	bne.w	8000c30 <FLP_Draw_String+0x1c>
 800114c:	e5d1      	b.n	8000cf2 <FLP_Draw_String+0xde>
 800114e:	bf00      	nop

08001150 <FLP_Draw_Upgrade>:


void FLP_Draw_Upgrade (uint16_t* buffer, char* text, int x, int y, int height, int width, uint32_t color)
{
 8001150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001154:	b087      	sub	sp, #28
 8001156:	469a      	mov	sl, r3
 8001158:	4616      	mov	r6, r2
 800115a:	4604      	mov	r4, r0
 800115c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800115e:	9103      	str	r1, [sp, #12]
 8001160:	9204      	str	r2, [sp, #16]
 8001162:	e9dd b310 	ldrd	fp, r3, [sp, #64]	@ 0x40
	for (int row = y; row < y + height; row++)
 8001166:	2b00      	cmp	r3, #0
 8001168:	eb0a 0503 	add.w	r5, sl, r3
{
 800116c:	9305      	str	r3, [sp, #20]
	for (int row = y; row < y + height; row++)
 800116e:	dd73      	ble.n	8001258 <FLP_Draw_Upgrade+0x108>
 8001170:	f1bb 0f00 	cmp.w	fp, #0
		for (int col = x; col < x + width; col++)
 8001174:	eb06 080b 	add.w	r8, r6, fp
 8001178:	dd48      	ble.n	800120c <FLP_Draw_Upgrade+0xbc>
 800117a:	4546      	cmp	r6, r8
 800117c:	bfb4      	ite	lt
 800117e:	465f      	movlt	r7, fp
 8001180:	2701      	movge	r7, #1
 8001182:	ebca 130a 	rsb	r3, sl, sl, lsl #4
 8001186:	f1bb 0f01 	cmp.w	fp, #1
 800118a:	bf18      	it	ne
 800118c:	4546      	cmpne	r6, r8
	for (int row = y; row < y + height; row++)
 800118e:	4651      	mov	r1, sl
 8001190:	f027 0001 	bic.w	r0, r7, #1
 8001194:	ea4f 0957 	mov.w	r9, r7, lsr #1
 8001198:	f007 0701 	and.w	r7, r7, #1
 800119c:	bfac      	ite	ge
 800119e:	f04f 0801 	movge.w	r8, #1
 80011a2:	f04f 0800 	movlt.w	r8, #0
 80011a6:	eb06 1e43 	add.w	lr, r6, r3, lsl #5
 80011aa:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80011ae:	46bc      	mov	ip, r7
 80011b0:	4430      	add	r0, r6
 80011b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80011b6:	bfa8      	it	ge
 80011b8:	4630      	movge	r0, r6
 80011ba:	46c8      	mov	r8, r9
 80011bc:	015b      	lsls	r3, r3, #5
 80011be:	4637      	mov	r7, r6
 80011c0:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 80011c4:	46e1      	mov	r9, ip
 80011c6:	b292      	uxth	r2, r2
		for (int col = x; col < x + width; col++)
 80011c8:	9e02      	ldr	r6, [sp, #8]
 80011ca:	b99e      	cbnz	r6, 80011f4 <FLP_Draw_Upgrade+0xa4>
 80011cc:	4646      	mov	r6, r8
 80011ce:	9001      	str	r0, [sp, #4]
 80011d0:	f04f 0c00 	mov.w	ip, #0
 80011d4:	eb06 080e 	add.w	r8, r6, lr
{
 80011d8:	4670      	mov	r0, lr
 80011da:	f362 0c0f 	bfi	ip, r2, #0, #16
 80011de:	f362 4c1f 	bfi	ip, r2, #16, #16
			buffer[col + row * SCREEN_WIDTH] = color;
 80011e2:	f840 cb04 	str.w	ip, [r0], #4
		for (int col = x; col < x + width; col++)
 80011e6:	4580      	cmp	r8, r0
 80011e8:	d1fb      	bne.n	80011e2 <FLP_Draw_Upgrade+0x92>
 80011ea:	f1b9 0f00 	cmp.w	r9, #0
 80011ee:	d040      	beq.n	8001272 <FLP_Draw_Upgrade+0x122>
 80011f0:	46b0      	mov	r8, r6
 80011f2:	9801      	ldr	r0, [sp, #4]
	for (int row = y; row < y + height; row++)
 80011f4:	3101      	adds	r1, #1
			buffer[col + row * SCREEN_WIDTH] = color;
 80011f6:	eb00 0c03 	add.w	ip, r0, r3
	for (int row = y; row < y + height; row++)
 80011fa:	f50e 7e70 	add.w	lr, lr, #960	@ 0x3c0
 80011fe:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001202:	42a9      	cmp	r1, r5
			buffer[col + row * SCREEN_WIDTH] = color;
 8001204:	f824 201c 	strh.w	r2, [r4, ip, lsl #1]
	for (int row = y; row < y + height; row++)
 8001208:	dbde      	blt.n	80011c8 <FLP_Draw_Upgrade+0x78>
 800120a:	463e      	mov	r6, r7
	FLP_Draw_Rectangle (buffer, x + border / 2, y + border / 2, height - border, width - border, 0x0000);
 800120c:	9b05      	ldr	r3, [sp, #20]
 800120e:	f1ab 0204 	sub.w	r2, fp, #4
 8001212:	1cb0      	adds	r0, r6, #2
 8001214:	1f19      	subs	r1, r3, #4
 8001216:	f10a 0302 	add.w	r3, sl, #2
	for (int row = y; row < y + height; row++)
 800121a:	4419      	add	r1, r3
 800121c:	4299      	cmp	r1, r3
 800121e:	dd1b      	ble.n	8001258 <FLP_Draw_Upgrade+0x108>
		for (int col = x; col < x + width; col++)
 8001220:	4402      	add	r2, r0
 8001222:	4290      	cmp	r0, r2
 8001224:	da18      	bge.n	8001258 <FLP_Draw_Upgrade+0x108>
			buffer[col + row * SCREEN_WIDTH] = color;
 8001226:	1b95      	subs	r5, r2, r6
 8001228:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800122c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001230:	1d27      	adds	r7, r4, #4
 8001232:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8001236:	3d02      	subs	r5, #2
 8001238:	eb06 1241 	add.w	r2, r6, r1, lsl #5
 800123c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001240:	006d      	lsls	r5, r5, #1
 8001242:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8001246:	4618      	mov	r0, r3
 8001248:	462a      	mov	r2, r5
 800124a:	2100      	movs	r1, #0
 800124c:	f010 fbac 	bl	80119a8 <memset>
	for (int row = y; row < y + height; row++)
 8001250:	f500 7370 	add.w	r3, r0, #960	@ 0x3c0
 8001254:	429f      	cmp	r7, r3
 8001256:	d1f6      	bne.n	8001246 <FLP_Draw_Upgrade+0xf6>
    FLP_Draw_Box (buffer, x, y, 4, height, width, color);
    FLP_Draw_String (buffer, text, x + 9, y + 9, color);
 8001258:	4620      	mov	r0, r4
 800125a:	f10a 0309 	add.w	r3, sl, #9
 800125e:	9c04      	ldr	r4, [sp, #16]
 8001260:	f106 0209 	add.w	r2, r6, #9
 8001264:	9903      	ldr	r1, [sp, #12]
 8001266:	9410      	str	r4, [sp, #64]	@ 0x40
}
 8001268:	b007      	add	sp, #28
 800126a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FLP_Draw_String (buffer, text, x + 9, y + 9, color);
 800126e:	f7ff bcd1 	b.w	8000c14 <FLP_Draw_String>
	for (int row = y; row < y + height; row++)
 8001272:	3101      	adds	r1, #1
 8001274:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001278:	f50e 7e70 	add.w	lr, lr, #960	@ 0x3c0
 800127c:	428d      	cmp	r5, r1
 800127e:	dca7      	bgt.n	80011d0 <FLP_Draw_Upgrade+0x80>
 8001280:	e7c3      	b.n	800120a <FLP_Draw_Upgrade+0xba>
 8001282:	bf00      	nop

08001284 <copy_dot>:
}

//================================ SYMBOL -> BUFFER =====================================================

void copy_dot(uint16_t* buffer, int x, int y, uint32_t color)
{
 8001284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8001288:	4c84      	ldr	r4, [pc, #528]	@ (800149c <copy_dot+0x218>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800128a:	f240 18df 	movw	r8, #479	@ 0x1df
{
 800128e:	b085      	sub	sp, #20
    int pixel_y = y_base + y;
 8001290:	f102 0709 	add.w	r7, r2, #9
    int pixel_x = x_base + x + offset;
 8001294:	6824      	ldr	r4, [r4, #0]
{
 8001296:	9300      	str	r3, [sp, #0]
    int pixel_x = x_base + x + offset;
 8001298:	190d      	adds	r5, r1, r4
 800129a:	f104 0e01 	add.w	lr, r4, #1
 800129e:	f104 0c02 	add.w	ip, r4, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80012a2:	4545      	cmp	r5, r8
    int pixel_x = x_base + x + offset;
 80012a4:	448e      	add	lr, r1
 80012a6:	448c      	add	ip, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80012a8:	bf8c      	ite	hi
 80012aa:	2600      	movhi	r6, #0
 80012ac:	2601      	movls	r6, #1
 80012ae:	45c6      	cmp	lr, r8
 80012b0:	bf8c      	ite	hi
 80012b2:	2300      	movhi	r3, #0
 80012b4:	2301      	movls	r3, #1
 80012b6:	45c4      	cmp	ip, r8
 80012b8:	ea6f 0807 	mvn.w	r8, r7
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	bf8c      	ite	hi
 80012c0:	2300      	movhi	r3, #0
 80012c2:	2301      	movls	r3, #1
 80012c4:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80012c8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80012cc:	b3ce      	cbz	r6, 8001342 <copy_dot+0xbe>
 80012ce:	f1b8 0f00 	cmp.w	r8, #0
 80012d2:	d036      	beq.n	8001342 <copy_dot+0xbe>
 80012d4:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80012d8:	f280 808b 	bge.w	80013f2 <copy_dot+0x16e>
    int pixel_x = x_base + x + offset;
 80012dc:	f101 0901 	add.w	r9, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80012e0:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 80012e4:	f8bd b000 	ldrh.w	fp, [sp]
    int pixel_x = x_base + x + offset;
 80012e8:	44a1      	add	r9, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80012ea:	eb05 1a48 	add.w	sl, r5, r8, lsl #5
 80012ee:	ea4f 1848 	mov.w	r8, r8, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80012f2:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80012f6:	f820 b01a 	strh.w	fp, [r0, sl, lsl #1]
 80012fa:	ea4f 1a07 	mov.w	sl, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80012fe:	f0c0 80a9 	bcc.w	8001454 <copy_dot+0x1d0>
 8001302:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8001306:	d328      	bcc.n	800135a <copy_dot+0xd6>
    int pixel_y = y_base + y;
 8001308:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800130c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001310:	da6f      	bge.n	80013f2 <copy_dot+0x16e>
    int pixel_x = x_base + x + offset;
 8001312:	f101 0901 	add.w	r9, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001316:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 800131a:	f8bd b000 	ldrh.w	fp, [sp]
 800131e:	013b      	lsls	r3, r7, #4
    int pixel_x = x_base + x + offset;
 8001320:	44a1      	add	r9, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001322:	eb05 1a48 	add.w	sl, r5, r8, lsl #5
 8001326:	ea4f 1848 	mov.w	r8, r8, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800132a:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800132e:	f820 b01a 	strh.w	fp, [r0, sl, lsl #1]
 8001332:	46da      	mov	sl, fp
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001334:	f0c0 80a4 	bcc.w	8001480 <copy_dot+0x1fc>
 8001338:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800133c:	d32c      	bcc.n	8001398 <copy_dot+0x114>
    int pixel_y = y_base + y;
 800133e:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001340:	e037      	b.n	80013b2 <copy_dot+0x12e>
 8001342:	9b01      	ldr	r3, [sp, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d157      	bne.n	80013f8 <copy_dot+0x174>
 8001348:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800134c:	d20d      	bcs.n	800136a <copy_dot+0xe6>
 800134e:	9b02      	ldr	r3, [sp, #8]
 8001350:	b15b      	cbz	r3, 800136a <copy_dot+0xe6>
 8001352:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8001356:	f8bd b000 	ldrh.w	fp, [sp]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800135a:	ebaa 0807 	sub.w	r8, sl, r7
 800135e:	4667      	mov	r7, ip
 8001360:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001364:	4447      	add	r7, r8
 8001366:	f820 b017 	strh.w	fp, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 800136a:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800136e:	ea6f 0807 	mvn.w	r8, r7
 8001372:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8001376:	b116      	cbz	r6, 800137e <copy_dot+0xfa>
 8001378:	f1b8 0f00 	cmp.w	r8, #0
 800137c:	d1c6      	bne.n	800130c <copy_dot+0x88>
 800137e:	9b01      	ldr	r3, [sp, #4]
 8001380:	b113      	cbz	r3, 8001388 <copy_dot+0x104>
 8001382:	f1b8 0f00 	cmp.w	r8, #0
 8001386:	d171      	bne.n	800146c <copy_dot+0x1e8>
 8001388:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800138c:	d20c      	bcs.n	80013a8 <copy_dot+0x124>
 800138e:	9b02      	ldr	r3, [sp, #8]
 8001390:	b153      	cbz	r3, 80013a8 <copy_dot+0x124>
 8001392:	f8bd b000 	ldrh.w	fp, [sp]
 8001396:	013b      	lsls	r3, r7, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001398:	eba3 0807 	sub.w	r8, r3, r7
 800139c:	46da      	mov	sl, fp
 800139e:	ea4f 1848 	mov.w	r8, r8, lsl #5
 80013a2:	44c4      	add	ip, r8
 80013a4:	f820 a01c 	strh.w	sl, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 80013a8:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80013aa:	43d7      	mvns	r7, r2
 80013ac:	0fff      	lsrs	r7, r7, #31
 80013ae:	b37e      	cbz	r6, 8001410 <copy_dot+0x18c>
 80013b0:	b377      	cbz	r7, 8001410 <copy_dot+0x18c>
 80013b2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80013b6:	da1c      	bge.n	80013f2 <copy_dot+0x16e>
    int pixel_x = x_base + x + offset;
 80013b8:	f101 0e01 	add.w	lr, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80013bc:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 80013c0:	f8bd 6000 	ldrh.w	r6, [sp]
    int pixel_x = x_base + x + offset;
 80013c4:	44a6      	add	lr, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80013c6:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 80013ca:	017f      	lsls	r7, r7, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80013cc:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80013d0:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80013d4:	d329      	bcc.n	800142a <copy_dot+0x1a6>
 80013d6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80013da:	d20a      	bcs.n	80013f2 <copy_dot+0x16e>
 80013dc:	9b02      	ldr	r3, [sp, #8]
 80013de:	b143      	cbz	r3, 80013f2 <copy_dot+0x16e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80013e0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80013e4:	9b03      	ldr	r3, [sp, #12]
 80013e6:	f8bd 6000 	ldrh.w	r6, [sp]
 80013ea:	0157      	lsls	r7, r2, #5
 80013ec:	443b      	add	r3, r7
 80013ee:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
    for (int i = 9; i < 12; i++)
    {
        for (int j = 0; j < 3; j++) 
            fill_pixel(buffer, x, y, j, i, color);    
    }
}
 80013f2:	b005      	add	sp, #20
 80013f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80013f8:	f1b8 0f00 	cmp.w	r8, #0
 80013fc:	d0a4      	beq.n	8001348 <copy_dot+0xc4>
 80013fe:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001402:	db20      	blt.n	8001446 <copy_dot+0x1c2>
    int pixel_y = y_base + y;
 8001404:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001406:	43d7      	mvns	r7, r2
 8001408:	0fff      	lsrs	r7, r7, #31
 800140a:	b10e      	cbz	r6, 8001410 <copy_dot+0x18c>
 800140c:	2f00      	cmp	r7, #0
 800140e:	d1f0      	bne.n	80013f2 <copy_dot+0x16e>
 8001410:	9b01      	ldr	r3, [sp, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0df      	beq.n	80013d6 <copy_dot+0x152>
 8001416:	2f00      	cmp	r7, #0
 8001418:	d0dd      	beq.n	80013d6 <copy_dot+0x152>
 800141a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800141e:	dae8      	bge.n	80013f2 <copy_dot+0x16e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001420:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8001424:	f8bd 6000 	ldrh.w	r6, [sp]
 8001428:	017f      	lsls	r7, r7, #5
    int pixel_x = x_base + x + offset;
 800142a:	3102      	adds	r1, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800142c:	44be      	add	lr, r7
    int pixel_x = x_base + x + offset;
 800142e:	190b      	adds	r3, r1, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001430:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001434:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8001438:	9303      	str	r3, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800143a:	d2da      	bcs.n	80013f2 <copy_dot+0x16e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800143c:	9b03      	ldr	r3, [sp, #12]
 800143e:	443b      	add	r3, r7
 8001440:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
    for (int i = 9; i < 12; i++)
 8001444:	e7d5      	b.n	80013f2 <copy_dot+0x16e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001446:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 800144a:	f8bd b000 	ldrh.w	fp, [sp]
 800144e:	46f1      	mov	r9, lr
 8001450:	ea4f 1848 	mov.w	r8, r8, lsl #5
    int pixel_x = x_base + x + offset;
 8001454:	1c8f      	adds	r7, r1, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001456:	44c1      	add	r9, r8
    int pixel_x = x_base + x + offset;
 8001458:	4427      	add	r7, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800145a:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800145e:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8001462:	d282      	bcs.n	800136a <copy_dot+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001464:	4447      	add	r7, r8
 8001466:	f820 b017 	strh.w	fp, [r0, r7, lsl #1]
 800146a:	e77e      	b.n	800136a <copy_dot+0xe6>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800146c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001470:	dac8      	bge.n	8001404 <copy_dot+0x180>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001472:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8001476:	f8bd a000 	ldrh.w	sl, [sp]
 800147a:	46f1      	mov	r9, lr
 800147c:	ea4f 1848 	mov.w	r8, r8, lsl #5
    int pixel_x = x_base + x + offset;
 8001480:	f101 0c02 	add.w	ip, r1, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001484:	44c1      	add	r9, r8
    int pixel_x = x_base + x + offset;
 8001486:	44a4      	add	ip, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001488:	f820 a019 	strh.w	sl, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800148c:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8001490:	d28a      	bcs.n	80013a8 <copy_dot+0x124>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001492:	44c4      	add	ip, r8
 8001494:	f820 a01c 	strh.w	sl, [r0, ip, lsl #1]
 8001498:	e786      	b.n	80013a8 <copy_dot+0x124>
 800149a:	bf00      	nop
 800149c:	240001b8 	.word	0x240001b8

080014a0 <copy_comma>:

void copy_comma(uint16_t* buffer, int x, int y, uint32_t color)
{
 80014a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pixel_x = x_base + x + offset;
 80014a4:	4cc8      	ldr	r4, [pc, #800]	@ (80017c8 <copy_comma+0x328>)
 80014a6:	6824      	ldr	r4, [r4, #0]
 80014a8:	eb01 0e04 	add.w	lr, r1, r4
 80014ac:	f104 0c02 	add.w	ip, r4, #2
 80014b0:	3401      	adds	r4, #1
 80014b2:	448c      	add	ip, r1
 80014b4:	440c      	add	r4, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80014b6:	f240 11df 	movw	r1, #479	@ 0x1df
 80014ba:	458e      	cmp	lr, r1
 80014bc:	bf8c      	ite	hi
 80014be:	2500      	movhi	r5, #0
 80014c0:	2501      	movls	r5, #1
 80014c2:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80014c6:	d33e      	bcc.n	8001546 <copy_comma+0xa6>
 80014c8:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 80014cc:	d35d      	bcc.n	800158a <copy_comma+0xea>
 80014ce:	1dd1      	adds	r1, r2, #7
 80014d0:	f100 8148 	bmi.w	8001764 <copy_comma+0x2c4>
 80014d4:	2d00      	cmp	r5, #0
 80014d6:	f000 8145 	beq.w	8001764 <copy_comma+0x2c4>
 80014da:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80014de:	da30      	bge.n	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80014e0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80014e4:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80014e8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 80014ec:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80014f0:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80014f4:	da25      	bge.n	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80014f6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80014fa:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80014fe:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 8001502:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001506:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800150a:	da1a      	bge.n	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800150c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001510:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 8001514:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 8001518:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800151c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8001520:	da0f      	bge.n	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001522:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    int pixel_y = y_base + y;
 8001526:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001528:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 800152c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001530:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8001534:	da05      	bge.n	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001536:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800153a:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 800153e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    for (int i = 7; i < 12; i++)
    {
        for (int j = 0; j < 3; j++) 
            fill_pixel(buffer, x, y, j, i, color);
    }
}
 8001542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int pixel_y = y_base + y;
 8001546:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001548:	428c      	cmp	r4, r1
 800154a:	ea6f 0607 	mvn.w	r6, r7
 800154e:	bf8c      	ite	hi
 8001550:	2100      	movhi	r1, #0
 8001552:	2101      	movls	r1, #1
 8001554:	0ff6      	lsrs	r6, r6, #31
 8001556:	2d00      	cmp	r5, #0
 8001558:	d058      	beq.n	800160c <copy_comma+0x16c>
 800155a:	2e00      	cmp	r6, #0
 800155c:	d056      	beq.n	800160c <copy_comma+0x16c>
 800155e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001562:	daee      	bge.n	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001564:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001568:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800156c:	b29e      	uxth	r6, r3
 800156e:	eb0e 1a48 	add.w	sl, lr, r8, lsl #5
 8001572:	ea4f 1907 	mov.w	r9, r7, lsl #4
 8001576:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800157a:	f820 601a 	strh.w	r6, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800157e:	d354      	bcc.n	800162a <copy_comma+0x18a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001580:	eba9 0807 	sub.w	r8, r9, r7
 8001584:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001588:	e053      	b.n	8001632 <copy_comma+0x192>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800158a:	1dd1      	adds	r1, r2, #7
 800158c:	f100 8103 	bmi.w	8001796 <copy_comma+0x2f6>
 8001590:	2d00      	cmp	r5, #0
 8001592:	f000 8100 	beq.w	8001796 <copy_comma+0x2f6>
 8001596:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800159a:	dad2      	bge.n	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800159c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80015a0:	b29e      	uxth	r6, r3
 80015a2:	eb0e 1741 	add.w	r7, lr, r1, lsl #5
 80015a6:	0149      	lsls	r1, r1, #5
 80015a8:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
 80015ac:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80015ae:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80015b2:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 80015b6:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80015ba:	f0c0 81e6 	bcc.w	800198a <copy_comma+0x4ea>
 80015be:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80015c2:	f000 80ef 	beq.w	80017a4 <copy_comma+0x304>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80015c6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80015ca:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 80015ce:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 80015d2:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80015d6:	43ce      	mvns	r6, r1
 80015d8:	0ff6      	lsrs	r6, r6, #31
 80015da:	2d00      	cmp	r5, #0
 80015dc:	f000 81cc 	beq.w	8001978 <copy_comma+0x4d8>
 80015e0:	2e00      	cmp	r6, #0
 80015e2:	f040 8178 	bne.w	80018d6 <copy_comma+0x436>
    int pixel_y = y_base + y;
 80015e6:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80015ea:	43ce      	mvns	r6, r1
 80015ec:	0ff6      	lsrs	r6, r6, #31
 80015ee:	2d00      	cmp	r5, #0
 80015f0:	f000 81a6 	beq.w	8001940 <copy_comma+0x4a0>
 80015f4:	2e00      	cmp	r6, #0
 80015f6:	f040 817f 	bne.w	80018f8 <copy_comma+0x458>
    int pixel_y = y_base + y;
 80015fa:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80015fc:	43d1      	mvns	r1, r2
 80015fe:	0fc9      	lsrs	r1, r1, #31
 8001600:	2d00      	cmp	r5, #0
 8001602:	f000 81ad 	beq.w	8001960 <copy_comma+0x4c0>
 8001606:	2900      	cmp	r1, #0
 8001608:	d09b      	beq.n	8001542 <copy_comma+0xa2>
 800160a:	e185      	b.n	8001918 <copy_comma+0x478>
 800160c:	2900      	cmp	r1, #0
 800160e:	f000 80a1 	beq.w	8001754 <copy_comma+0x2b4>
 8001612:	2e00      	cmp	r6, #0
 8001614:	f000 809e 	beq.w	8001754 <copy_comma+0x2b4>
 8001618:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800161c:	f280 8104 	bge.w	8001828 <copy_comma+0x388>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001620:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8001624:	b29e      	uxth	r6, r3
 8001626:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800162a:	eb04 0708 	add.w	r7, r4, r8
 800162e:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
 8001632:	44e0      	add	r8, ip
 8001634:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
    int pixel_y = y_base + y;
 8001638:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800163c:	ea6f 0608 	mvn.w	r6, r8
 8001640:	0ff6      	lsrs	r6, r6, #31
 8001642:	2d00      	cmp	r5, #0
 8001644:	f000 8107 	beq.w	8001856 <copy_comma+0x3b6>
 8001648:	2e00      	cmp	r6, #0
 800164a:	f000 8104 	beq.w	8001856 <copy_comma+0x3b6>
 800164e:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8001652:	f6bf af76 	bge.w	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001656:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800165a:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800165e:	b29e      	uxth	r6, r3
 8001660:	eb0e 1a47 	add.w	sl, lr, r7, lsl #5
 8001664:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8001668:	ea4f 1747 	mov.w	r7, r7, lsl #5
 800166c:	f820 601a 	strh.w	r6, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001670:	f0c0 80fa 	bcc.w	8001868 <copy_comma+0x3c8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001674:	eba9 0708 	sub.w	r7, r9, r8
 8001678:	017f      	lsls	r7, r7, #5
 800167a:	4467      	add	r7, ip
 800167c:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 8001680:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001684:	43fe      	mvns	r6, r7
 8001686:	0ff6      	lsrs	r6, r6, #31
 8001688:	2d00      	cmp	r5, #0
 800168a:	f000 80d5 	beq.w	8001838 <copy_comma+0x398>
 800168e:	2e00      	cmp	r6, #0
 8001690:	f000 80d2 	beq.w	8001838 <copy_comma+0x398>
 8001694:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001698:	f6bf af53 	bge.w	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800169c:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80016a0:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80016a4:	b29e      	uxth	r6, r3
 80016a6:	eb0e 1a48 	add.w	sl, lr, r8, lsl #5
 80016aa:	ea4f 1907 	mov.w	r9, r7, lsl #4
 80016ae:	ea4f 1848 	mov.w	r8, r8, lsl #5
 80016b2:	f820 601a 	strh.w	r6, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80016b6:	f0c0 80c9 	bcc.w	800184c <copy_comma+0x3ac>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80016ba:	eba9 0807 	sub.w	r8, r9, r7
 80016be:	ea4f 1848 	mov.w	r8, r8, lsl #5
 80016c2:	44e0      	add	r8, ip
 80016c4:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
    int pixel_y = y_base + y;
 80016c8:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80016cc:	43fe      	mvns	r6, r7
 80016ce:	0ff6      	lsrs	r6, r6, #31
 80016d0:	2d00      	cmp	r5, #0
 80016d2:	f000 809a 	beq.w	800180a <copy_comma+0x36a>
 80016d6:	2e00      	cmp	r6, #0
 80016d8:	f000 8097 	beq.w	800180a <copy_comma+0x36a>
 80016dc:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80016e0:	f6bf af2f 	bge.w	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80016e4:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80016e8:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80016ec:	b29e      	uxth	r6, r3
 80016ee:	eb0e 1a48 	add.w	sl, lr, r8, lsl #5
 80016f2:	ea4f 1907 	mov.w	r9, r7, lsl #4
 80016f6:	ea4f 1848 	mov.w	r8, r8, lsl #5
 80016fa:	f820 601a 	strh.w	r6, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80016fe:	f0c0 808e 	bcc.w	800181e <copy_comma+0x37e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001702:	eba9 0807 	sub.w	r8, r9, r7
 8001706:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800170a:	44e0      	add	r8, ip
 800170c:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
    int pixel_y = y_base + y;
 8001710:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001712:	43d6      	mvns	r6, r2
 8001714:	0ff6      	lsrs	r6, r6, #31
 8001716:	2d00      	cmp	r5, #0
 8001718:	d05f      	beq.n	80017da <copy_comma+0x33a>
 800171a:	2e00      	cmp	r6, #0
 800171c:	d05d      	beq.n	80017da <copy_comma+0x33a>
 800171e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8001722:	f6bf af0e 	bge.w	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001726:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800172a:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800172e:	b29e      	uxth	r6, r3
 8001730:	eb0e 1341 	add.w	r3, lr, r1, lsl #5
 8001734:	ea4f 1502 	mov.w	r5, r2, lsl #4
 8001738:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 800173c:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8001740:	4633      	mov	r3, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001742:	d356      	bcc.n	80017f2 <copy_comma+0x352>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001744:	1aad      	subs	r5, r5, r2
 8001746:	4633      	mov	r3, r6
 8001748:	0169      	lsls	r1, r5, #5
 800174a:	448c      	add	ip, r1
 800174c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
}
 8001750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001754:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001758:	f4bf af6e 	bcs.w	8001638 <copy_comma+0x198>
 800175c:	b29e      	uxth	r6, r3
 800175e:	ea4f 1907 	mov.w	r9, r7, lsl #4
 8001762:	e70d      	b.n	8001580 <copy_comma+0xe0>
 8001764:	f112 0108 	adds.w	r1, r2, #8
 8001768:	d402      	bmi.n	8001770 <copy_comma+0x2d0>
 800176a:	2d00      	cmp	r5, #0
 800176c:	f47f aec0 	bne.w	80014f0 <copy_comma+0x50>
 8001770:	f112 0109 	adds.w	r1, r2, #9
 8001774:	d402      	bmi.n	800177c <copy_comma+0x2dc>
 8001776:	2d00      	cmp	r5, #0
 8001778:	f47f aec5 	bne.w	8001506 <copy_comma+0x66>
 800177c:	f112 010a 	adds.w	r1, r2, #10
 8001780:	d402      	bmi.n	8001788 <copy_comma+0x2e8>
 8001782:	2d00      	cmp	r5, #0
 8001784:	f47f aeca 	bne.w	800151c <copy_comma+0x7c>
 8001788:	320b      	adds	r2, #11
 800178a:	f53f aeda 	bmi.w	8001542 <copy_comma+0xa2>
 800178e:	2d00      	cmp	r5, #0
 8001790:	f43f aed7 	beq.w	8001542 <copy_comma+0xa2>
 8001794:	e6cc      	b.n	8001530 <copy_comma+0x90>
 8001796:	2900      	cmp	r1, #0
 8001798:	f2c0 808a 	blt.w	80018b0 <copy_comma+0x410>
 800179c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80017a0:	f2c0 80ee 	blt.w	8001980 <copy_comma+0x4e0>
 80017a4:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80017a8:	f4ff aecb 	bcc.w	8001542 <copy_comma+0xa2>
    int pixel_y = y_base + y;
 80017ac:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80017b0:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80017b4:	f280 80ed 	bge.w	8001992 <copy_comma+0x4f2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80017b8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80017bc:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 80017c0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80017c4:	e70f      	b.n	80015e6 <copy_comma+0x146>
 80017c6:	bf00      	nop
 80017c8:	240001b8 	.word	0x240001b8
    int pixel_y = y_base + y;
 80017cc:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80017ce:	43d6      	mvns	r6, r2
 80017d0:	0ff6      	lsrs	r6, r6, #31
 80017d2:	b115      	cbz	r5, 80017da <copy_comma+0x33a>
 80017d4:	2e00      	cmp	r6, #0
 80017d6:	f47f aeb4 	bne.w	8001542 <copy_comma+0xa2>
 80017da:	2900      	cmp	r1, #0
 80017dc:	d049      	beq.n	8001872 <copy_comma+0x3d2>
 80017de:	2e00      	cmp	r6, #0
 80017e0:	d047      	beq.n	8001872 <copy_comma+0x3d2>
 80017e2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80017e6:	f6bf aeac 	bge.w	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80017ea:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	0149      	lsls	r1, r1, #5
 80017f2:	440c      	add	r4, r1
 80017f4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80017f8:	e7a7      	b.n	800174a <copy_comma+0x2aa>
    int pixel_y = y_base + y;
 80017fa:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80017fe:	43fe      	mvns	r6, r7
 8001800:	0ff6      	lsrs	r6, r6, #31
 8001802:	b115      	cbz	r5, 800180a <copy_comma+0x36a>
 8001804:	2e00      	cmp	r6, #0
 8001806:	f47f ae9c 	bne.w	8001542 <copy_comma+0xa2>
 800180a:	b3c9      	cbz	r1, 8001880 <copy_comma+0x3e0>
 800180c:	b3c6      	cbz	r6, 8001880 <copy_comma+0x3e0>
 800180e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001812:	dadb      	bge.n	80017cc <copy_comma+0x32c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001814:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8001818:	b29e      	uxth	r6, r3
 800181a:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800181e:	eb04 0708 	add.w	r7, r4, r8
 8001822:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001826:	e770      	b.n	800170a <copy_comma+0x26a>
    int pixel_y = y_base + y;
 8001828:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800182c:	43fe      	mvns	r6, r7
 800182e:	0ff6      	lsrs	r6, r6, #31
 8001830:	b115      	cbz	r5, 8001838 <copy_comma+0x398>
 8001832:	2e00      	cmp	r6, #0
 8001834:	f47f ae85 	bne.w	8001542 <copy_comma+0xa2>
 8001838:	b391      	cbz	r1, 80018a0 <copy_comma+0x400>
 800183a:	b38e      	cbz	r6, 80018a0 <copy_comma+0x400>
 800183c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001840:	dadb      	bge.n	80017fa <copy_comma+0x35a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001842:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8001846:	b29e      	uxth	r6, r3
 8001848:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800184c:	eb04 0708 	add.w	r7, r4, r8
 8001850:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001854:	e735      	b.n	80016c2 <copy_comma+0x222>
 8001856:	b1d9      	cbz	r1, 8001890 <copy_comma+0x3f0>
 8001858:	b1d6      	cbz	r6, 8001890 <copy_comma+0x3f0>
 800185a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800185e:	dae3      	bge.n	8001828 <copy_comma+0x388>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001860:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 8001864:	b29e      	uxth	r6, r3
 8001866:	017f      	lsls	r7, r7, #5
 8001868:	eb04 0807 	add.w	r8, r4, r7
 800186c:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001870:	e703      	b.n	800167a <copy_comma+0x1da>
 8001872:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8001876:	f4bf ae64 	bcs.w	8001542 <copy_comma+0xa2>
 800187a:	b29e      	uxth	r6, r3
 800187c:	0115      	lsls	r5, r2, #4
 800187e:	e761      	b.n	8001744 <copy_comma+0x2a4>
 8001880:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001884:	f4bf af44 	bcs.w	8001710 <copy_comma+0x270>
 8001888:	b29e      	uxth	r6, r3
 800188a:	ea4f 1907 	mov.w	r9, r7, lsl #4
 800188e:	e738      	b.n	8001702 <copy_comma+0x262>
 8001890:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8001894:	f4bf aef4 	bcs.w	8001680 <copy_comma+0x1e0>
 8001898:	b29e      	uxth	r6, r3
 800189a:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800189e:	e6e9      	b.n	8001674 <copy_comma+0x1d4>
 80018a0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80018a4:	f4bf af10 	bcs.w	80016c8 <copy_comma+0x228>
 80018a8:	b29e      	uxth	r6, r3
 80018aa:	ea4f 1907 	mov.w	r9, r7, lsl #4
 80018ae:	e704      	b.n	80016ba <copy_comma+0x21a>
 80018b0:	f112 0108 	adds.w	r1, r2, #8
 80018b4:	d440      	bmi.n	8001938 <copy_comma+0x498>
 80018b6:	2d00      	cmp	r5, #0
 80018b8:	d03e      	beq.n	8001938 <copy_comma+0x498>
    int pixel_y = y_base + y;
 80018ba:	2100      	movs	r1, #0
 80018bc:	b29e      	uxth	r6, r3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80018be:	ebc1 1501 	rsb	r5, r1, r1, lsl #4
    int pixel_y = y_base + y;
 80018c2:	f102 0109 	add.w	r1, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80018c6:	eb0e 1745 	add.w	r7, lr, r5, lsl #5
 80018ca:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80018ce:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
 80018d2:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80018d6:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80018da:	f6bf ae32 	bge.w	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80018de:	ebc1 1501 	rsb	r5, r1, r1, lsl #4
    int pixel_y = y_base + y;
 80018e2:	f102 010a 	add.w	r1, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80018e6:	b29e      	uxth	r6, r3
 80018e8:	eb0e 1745 	add.w	r7, lr, r5, lsl #5
 80018ec:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80018f0:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
 80018f4:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80018f8:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80018fc:	f6bf ae21 	bge.w	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001900:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    int pixel_y = y_base + y;
 8001904:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001906:	b29d      	uxth	r5, r3
 8001908:	eb0e 1641 	add.w	r6, lr, r1, lsl #5
 800190c:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 8001910:	f820 5016 	strh.w	r5, [r0, r6, lsl #1]
 8001914:	f820 5011 	strh.w	r5, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001918:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800191c:	f6bf ae11 	bge.w	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001920:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001924:	b29b      	uxth	r3, r3
 8001926:	eb0e 1e42 	add.w	lr, lr, r2, lsl #5
 800192a:	0152      	lsls	r2, r2, #5
 800192c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8001930:	4422      	add	r2, r4
 8001932:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001936:	e604      	b.n	8001542 <copy_comma+0xa2>
 8001938:	2900      	cmp	r1, #0
 800193a:	f6bf ae44 	bge.w	80015c6 <copy_comma+0x126>
 800193e:	e648      	b.n	80015d2 <copy_comma+0x132>
 8001940:	2e00      	cmp	r6, #0
 8001942:	f43f ae5a 	beq.w	80015fa <copy_comma+0x15a>
 8001946:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800194a:	da06      	bge.n	800195a <copy_comma+0x4ba>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800194c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001950:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 8001954:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001958:	e64f      	b.n	80015fa <copy_comma+0x15a>
    int pixel_y = y_base + y;
 800195a:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800195c:	43d1      	mvns	r1, r2
 800195e:	0fc9      	lsrs	r1, r1, #31
 8001960:	2900      	cmp	r1, #0
 8001962:	f43f adee 	beq.w	8001542 <copy_comma+0xa2>
 8001966:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800196a:	f6bf adea 	bge.w	8001542 <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800196e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001972:	b29b      	uxth	r3, r3
 8001974:	0152      	lsls	r2, r2, #5
 8001976:	e7db      	b.n	8001930 <copy_comma+0x490>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001978:	2e00      	cmp	r6, #0
 800197a:	f47f af19 	bne.w	80017b0 <copy_comma+0x310>
 800197e:	e632      	b.n	80015e6 <copy_comma+0x146>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001980:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001984:	b29e      	uxth	r6, r3
 8001986:	0149      	lsls	r1, r1, #5
 8001988:	e610      	b.n	80015ac <copy_comma+0x10c>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800198a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800198e:	d196      	bne.n	80018be <copy_comma+0x41e>
 8001990:	e5d7      	b.n	8001542 <copy_comma+0xa2>
    int pixel_y = y_base + y;
 8001992:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001996:	43ce      	mvns	r6, r1
 8001998:	0ff6      	lsrs	r6, r6, #31
 800199a:	2d00      	cmp	r5, #0
 800199c:	d0d0      	beq.n	8001940 <copy_comma+0x4a0>
 800199e:	2e00      	cmp	r6, #0
 80019a0:	f47f adcf 	bne.w	8001542 <copy_comma+0xa2>
 80019a4:	e629      	b.n	80015fa <copy_comma+0x15a>
 80019a6:	bf00      	nop

080019a8 <copy_dash>:

void copy_dash(uint16_t* buffer, int x, int y, uint32_t color)
{
 80019a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80019ac:	4c9e      	ldr	r4, [pc, #632]	@ (8001c28 <copy_dash+0x280>)
{
 80019ae:	b087      	sub	sp, #28
    int pixel_x = x_base + x + offset;
 80019b0:	f101 0804 	add.w	r8, r1, #4
 80019b4:	6824      	ldr	r4, [r4, #0]
 80019b6:	1c65      	adds	r5, r4, #1
 80019b8:	190e      	adds	r6, r1, r4
 80019ba:	44a0      	add	r8, r4
 80019bc:	186f      	adds	r7, r5, r1
 80019be:	1ce5      	adds	r5, r4, #3
 80019c0:	440d      	add	r5, r1
 80019c2:	9703      	str	r7, [sp, #12]
 80019c4:	9500      	str	r5, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80019c6:	f240 15df 	movw	r5, #479	@ 0x1df
 80019ca:	42af      	cmp	r7, r5
 80019cc:	bf8c      	ite	hi
 80019ce:	2700      	movhi	r7, #0
 80019d0:	2701      	movls	r7, #1
 80019d2:	9701      	str	r7, [sp, #4]
 80019d4:	9f00      	ldr	r7, [sp, #0]
 80019d6:	42af      	cmp	r7, r5
 80019d8:	bf8c      	ite	hi
 80019da:	2700      	movhi	r7, #0
 80019dc:	2701      	movls	r7, #1
 80019de:	42ae      	cmp	r6, r5
 80019e0:	9704      	str	r7, [sp, #16]
 80019e2:	bf8c      	ite	hi
 80019e4:	2700      	movhi	r7, #0
 80019e6:	2701      	movls	r7, #1
 80019e8:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80019ec:	d36d      	bcc.n	8001aca <copy_dash+0x122>
    int pixel_x = x_base + x + offset;
 80019ee:	f104 0a05 	add.w	sl, r4, #5
 80019f2:	f102 0c05 	add.w	ip, r2, #5
 80019f6:	3208      	adds	r2, #8
 80019f8:	9102      	str	r1, [sp, #8]
 80019fa:	448a      	add	sl, r1
 80019fc:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a00:	45aa      	cmp	sl, r5
 8001a02:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8001a06:	bf8c      	ite	hi
 8001a08:	2500      	movhi	r5, #0
 8001a0a:	2501      	movls	r5, #1
 8001a0c:	9505      	str	r5, [sp, #20]
 8001a0e:	1c8d      	adds	r5, r1, #2
    int pixel_x = x_base + x + offset;
 8001a10:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a12:	ea6f 080c 	mvn.w	r8, ip
 8001a16:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8001a1a:	b30f      	cbz	r7, 8001a60 <copy_dash+0xb8>
 8001a1c:	f1b8 0f00 	cmp.w	r8, #0
 8001a20:	d01e      	beq.n	8001a60 <copy_dash+0xb8>
 8001a22:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001a26:	da47      	bge.n	8001ab8 <copy_dash+0x110>
    int pixel_x = x_base + x + offset;
 8001a28:	9902      	ldr	r1, [sp, #8]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001a2a:	eb00 0946 	add.w	r9, r0, r6, lsl #1
 8001a2e:	fa1f fb83 	uxth.w	fp, r3
    int pixel_x = x_base + x + offset;
 8001a32:	f101 0801 	add.w	r8, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001a36:	f829 b01e 	strh.w	fp, [r9, lr, lsl #1]
 8001a3a:	ea4f 0946 	mov.w	r9, r6, lsl #1
    int pixel_x = x_base + x + offset;
 8001a3e:	44a0      	add	r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a40:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8001a44:	d31b      	bcc.n	8001a7e <copy_dash+0xd6>
 8001a46:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8001a4a:	d320      	bcc.n	8001a8e <copy_dash+0xe6>
 8001a4c:	9900      	ldr	r1, [sp, #0]
 8001a4e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8001a52:	d228      	bcs.n	8001aa6 <copy_dash+0xfe>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001a54:	f8dd 8000 	ldr.w	r8, [sp]
 8001a58:	44f0      	add	r8, lr
 8001a5a:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a5e:	e022      	b.n	8001aa6 <copy_dash+0xfe>
 8001a60:	9901      	ldr	r1, [sp, #4]
 8001a62:	2900      	cmp	r1, #0
 8001a64:	f000 809c 	beq.w	8001ba0 <copy_dash+0x1f8>
 8001a68:	f1b8 0f00 	cmp.w	r8, #0
 8001a6c:	f000 8098 	beq.w	8001ba0 <copy_dash+0x1f8>
 8001a70:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001a74:	da20      	bge.n	8001ab8 <copy_dash+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001a76:	fa1f fb83 	uxth.w	fp, r3
 8001a7a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001a7e:	44f0      	add	r8, lr
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a80:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001a84:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a88:	d206      	bcs.n	8001a98 <copy_dash+0xf0>
 8001a8a:	ea4f 0946 	mov.w	r9, r6, lsl #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001a8e:	f109 0904 	add.w	r9, r9, #4
 8001a92:	4481      	add	r9, r0
 8001a94:	f829 b01e 	strh.w	fp, [r9, lr, lsl #1]
    int pixel_x = x_base + x + offset;
 8001a98:	9902      	ldr	r1, [sp, #8]
 8001a9a:	f101 0803 	add.w	r8, r1, #3
 8001a9e:	44a0      	add	r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001aa0:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8001aa4:	d3d8      	bcc.n	8001a58 <copy_dash+0xb0>
 8001aa6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001aaa:	d205      	bcs.n	8001ab8 <copy_dash+0x110>
 8001aac:	9905      	ldr	r1, [sp, #20]
 8001aae:	b119      	cbz	r1, 8001ab8 <copy_dash+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001ab0:	eb0e 080a 	add.w	r8, lr, sl
 8001ab4:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    for (int i = 5; i < 8; i++)
 8001ab8:	f10c 0c01 	add.w	ip, ip, #1
 8001abc:	f50e 7ef0 	add.w	lr, lr, #480	@ 0x1e0
 8001ac0:	4562      	cmp	r2, ip
 8001ac2:	d1a6      	bne.n	8001a12 <copy_dash+0x6a>
    {
        for (int j = 0; j < 6; j++) 
            fill_pixel(buffer, x, y, j, i, color);
    }
}
 8001ac4:	b007      	add	sp, #28
 8001ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aca:	f102 0c05 	add.w	ip, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001ace:	1c8d      	adds	r5, r1, #2
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
 8001ad8:	ea6f 090c 	mvn.w	r9, ip
    int pixel_x = x_base + x + offset;
 8001adc:	4425      	add	r5, r4
 8001ade:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001ae2:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8001ae6:	b3c7      	cbz	r7, 8001b5a <copy_dash+0x1b2>
 8001ae8:	f1b9 0f00 	cmp.w	r9, #0
 8001aec:	d065      	beq.n	8001bba <copy_dash+0x212>
 8001aee:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001af2:	da26      	bge.n	8001b42 <copy_dash+0x19a>
    int pixel_x = x_base + x + offset;
 8001af4:	f101 0a01 	add.w	sl, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001af8:	eb00 0b46 	add.w	fp, r0, r6, lsl #1
 8001afc:	f8bd 9008 	ldrh.w	r9, [sp, #8]
    int pixel_x = x_base + x + offset;
 8001b00:	44a2      	add	sl, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b02:	f82b 901e 	strh.w	r9, [fp, lr, lsl #1]
 8001b06:	ea4f 0b46 	mov.w	fp, r6, lsl #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b0a:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8001b0e:	d330      	bcc.n	8001b72 <copy_dash+0x1ca>
 8001b10:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8001b14:	d335      	bcc.n	8001b82 <copy_dash+0x1da>
 8001b16:	9b00      	ldr	r3, [sp, #0]
 8001b18:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001b1c:	d204      	bcs.n	8001b28 <copy_dash+0x180>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b1e:	f8dd a000 	ldr.w	sl, [sp]
 8001b22:	44f2      	add	sl, lr
 8001b24:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    int pixel_x = x_base + x + offset;
 8001b28:	f101 0a05 	add.w	sl, r1, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b2c:	eb00 0b48 	add.w	fp, r0, r8, lsl #1
    int pixel_x = x_base + x + offset;
 8001b30:	44a2      	add	sl, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b32:	f82b 901e 	strh.w	r9, [fp, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b36:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8001b3a:	d202      	bcs.n	8001b42 <copy_dash+0x19a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b3c:	44f2      	add	sl, lr
 8001b3e:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    for (int i = 5; i < 8; i++)
 8001b42:	f10c 0c01 	add.w	ip, ip, #1
 8001b46:	f50e 7ef0 	add.w	lr, lr, #480	@ 0x1e0
 8001b4a:	4562      	cmp	r2, ip
 8001b4c:	d0ba      	beq.n	8001ac4 <copy_dash+0x11c>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b4e:	ea6f 090c 	mvn.w	r9, ip
 8001b52:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8001b56:	2f00      	cmp	r7, #0
 8001b58:	d1c6      	bne.n	8001ae8 <copy_dash+0x140>
 8001b5a:	f1b9 0f00 	cmp.w	r9, #0
 8001b5e:	d02c      	beq.n	8001bba <copy_dash+0x212>
 8001b60:	9b01      	ldr	r3, [sp, #4]
 8001b62:	b353      	cbz	r3, 8001bba <copy_dash+0x212>
 8001b64:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001b68:	daeb      	bge.n	8001b42 <copy_dash+0x19a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b6a:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8001b6e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8001b72:	44f2      	add	sl, lr
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b74:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b78:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b7c:	d229      	bcs.n	8001bd2 <copy_dash+0x22a>
 8001b7e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
    int pixel_x = x_base + x + offset;
 8001b82:	f101 0a03 	add.w	sl, r1, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b86:	f10b 0b04 	add.w	fp, fp, #4
    int pixel_x = x_base + x + offset;
 8001b8a:	44a2      	add	sl, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b8c:	4483      	add	fp, r0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b8e:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b92:	f82b 901e 	strh.w	r9, [fp, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b96:	d2c7      	bcs.n	8001b28 <copy_dash+0x180>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b98:	44f2      	add	sl, lr
 8001b9a:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b9e:	e7c3      	b.n	8001b28 <copy_dash+0x180>
 8001ba0:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8001ba4:	d225      	bcs.n	8001bf2 <copy_dash+0x24a>
 8001ba6:	f1b8 0f00 	cmp.w	r8, #0
 8001baa:	f43f af7c 	beq.w	8001aa6 <copy_dash+0xfe>
 8001bae:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001bb2:	da81      	bge.n	8001ab8 <copy_dash+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001bb4:	fa1f fb83 	uxth.w	fp, r3
 8001bb8:	e767      	b.n	8001a8a <copy_dash+0xe2>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001bba:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8001bbe:	d227      	bcs.n	8001c10 <copy_dash+0x268>
 8001bc0:	f1b9 0f00 	cmp.w	r9, #0
 8001bc4:	d00c      	beq.n	8001be0 <copy_dash+0x238>
 8001bc6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001bca:	daba      	bge.n	8001b42 <copy_dash+0x19a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001bcc:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8001bd0:	e7d5      	b.n	8001b7e <copy_dash+0x1d6>
    int pixel_x = x_base + x + offset;
 8001bd2:	f101 0a03 	add.w	sl, r1, #3
 8001bd6:	44a2      	add	sl, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001bd8:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8001bdc:	d3a1      	bcc.n	8001b22 <copy_dash+0x17a>
 8001bde:	e7a3      	b.n	8001b28 <copy_dash+0x180>
 8001be0:	f1bc 0f00 	cmp.w	ip, #0
 8001be4:	dbad      	blt.n	8001b42 <copy_dash+0x19a>
 8001be6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001bea:	daaa      	bge.n	8001b42 <copy_dash+0x19a>
 8001bec:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8001bf0:	e79a      	b.n	8001b28 <copy_dash+0x180>
 8001bf2:	f1b8 0f00 	cmp.w	r8, #0
 8001bf6:	f43f af56 	beq.w	8001aa6 <copy_dash+0xfe>
 8001bfa:	9904      	ldr	r1, [sp, #16]
 8001bfc:	2900      	cmp	r1, #0
 8001bfe:	f43f af52 	beq.w	8001aa6 <copy_dash+0xfe>
 8001c02:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001c06:	f6bf af57 	bge.w	8001ab8 <copy_dash+0x110>
 8001c0a:	fa1f fb83 	uxth.w	fp, r3
 8001c0e:	e721      	b.n	8001a54 <copy_dash+0xac>
 8001c10:	f1b9 0f00 	cmp.w	r9, #0
 8001c14:	d0e4      	beq.n	8001be0 <copy_dash+0x238>
 8001c16:	9b04      	ldr	r3, [sp, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0e1      	beq.n	8001be0 <copy_dash+0x238>
 8001c1c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001c20:	da8f      	bge.n	8001b42 <copy_dash+0x19a>
 8001c22:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8001c26:	e77a      	b.n	8001b1e <copy_dash+0x176>
 8001c28:	240001b8 	.word	0x240001b8

08001c2c <copy_hashtag>:
            fill_pixel(buffer, x, y, j, i, color);
    }
}

void copy_hashtag(uint16_t* buffer, int x, int y, uint32_t color)
{
 8001c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pixel_x = x_base + x + offset;
 8001c30:	4c3a      	ldr	r4, [pc, #232]	@ (8001d1c <copy_hashtag+0xf0>)
{
 8001c32:	4616      	mov	r6, r2
    for (int i = 2; i < 10; i++)
 8001c34:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
{
 8001c38:	460f      	mov	r7, r1
 8001c3a:	6824      	ldr	r4, [r4, #0]
 8001c3c:	f106 0e02 	add.w	lr, r6, #2
 8001c40:	f106 080a 	add.w	r8, r6, #10
    int pixel_x = x_base + x + offset;
 8001c44:	1c65      	adds	r5, r4, #1
 8001c46:	1d22      	adds	r2, r4, #4
 8001c48:	440d      	add	r5, r1
 8001c4a:	440a      	add	r2, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001c4c:	f240 11df 	movw	r1, #479	@ 0x1df
 8001c50:	eb05 1c49 	add.w	ip, r5, r9, lsl #5
 8001c54:	428d      	cmp	r5, r1
 8001c56:	ea4f 1949 	mov.w	r9, r9, lsl #5
 8001c5a:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 8001c5e:	bf8c      	ite	hi
 8001c60:	2500      	movhi	r5, #0
 8001c62:	2501      	movls	r5, #1
 8001c64:	428a      	cmp	r2, r1
 8001c66:	bf8c      	ite	hi
 8001c68:	f04f 0a00 	movhi.w	sl, #0
 8001c6c:	f04f 0a01 	movls.w	sl, #1
 8001c70:	e009      	b.n	8001c86 <copy_hashtag+0x5a>
 8001c72:	b111      	cbz	r1, 8001c7a <copy_hashtag+0x4e>
 8001c74:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001c78:	db13      	blt.n	8001ca2 <copy_hashtag+0x76>
    for (int i = 2; i < 10; i++)
 8001c7a:	f10e 0e01 	add.w	lr, lr, #1
 8001c7e:	f50c 7c70 	add.w	ip, ip, #960	@ 0x3c0
 8001c82:	45f0      	cmp	r8, lr
 8001c84:	d01a      	beq.n	8001cbc <copy_hashtag+0x90>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001c86:	ea6f 010e 	mvn.w	r1, lr
 8001c8a:	0fc9      	lsrs	r1, r1, #31
 8001c8c:	2d00      	cmp	r5, #0
 8001c8e:	d1f0      	bne.n	8001c72 <copy_hashtag+0x46>
 8001c90:	2900      	cmp	r1, #0
 8001c92:	d0f2      	beq.n	8001c7a <copy_hashtag+0x4e>
 8001c94:	f1ba 0f00 	cmp.w	sl, #0
 8001c98:	d0ef      	beq.n	8001c7a <copy_hashtag+0x4e>
 8001c9a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001c9e:	db05      	blt.n	8001cac <copy_hashtag+0x80>
 8001ca0:	e7eb      	b.n	8001c7a <copy_hashtag+0x4e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001ca2:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8001ca6:	f8ac 3780 	strh.w	r3, [ip, #1920]	@ 0x780
    {
        for (int j = 1; j < 2; j++) 
 8001caa:	d2e6      	bcs.n	8001c7a <copy_hashtag+0x4e>
    for (int i = 2; i < 10; i++)
 8001cac:	f10e 0e01 	add.w	lr, lr, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001cb0:	f8ac 3786 	strh.w	r3, [ip, #1926]	@ 0x786
    for (int i = 2; i < 10; i++)
 8001cb4:	f50c 7c70 	add.w	ip, ip, #960	@ 0x3c0
 8001cb8:	45f0      	cmp	r8, lr
 8001cba:	d1e4      	bne.n	8001c86 <copy_hashtag+0x5a>
 8001cbc:	f504 62f0 	add.w	r2, r4, #1920	@ 0x780
    int pixel_y = y_base + y;
 8001cc0:	f106 0e07 	add.w	lr, r6, #7
 8001cc4:	1da1      	adds	r1, r4, #6
 8001cc6:	3604      	adds	r6, #4
 8001cc8:	443a      	add	r2, r7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001cca:	f240 15df 	movw	r5, #479	@ 0x1df
 8001cce:	ea6f 0c06 	mvn.w	ip, r6
 8001cd2:	444a      	add	r2, r9
 8001cd4:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8001cd8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8001cdc:	19e2      	adds	r2, r4, r7
 8001cde:	19cc      	adds	r4, r1, r7
 8001ce0:	ea6f 070e 	mvn.w	r7, lr
 8001ce4:	0fff      	lsrs	r7, r7, #31
 8001ce6:	42aa      	cmp	r2, r5
 8001ce8:	bf8c      	ite	hi
 8001cea:	2100      	movhi	r1, #0
 8001cec:	2101      	movls	r1, #1
 8001cee:	b161      	cbz	r1, 8001d0a <copy_hashtag+0xde>
 8001cf0:	f1bc 0f00 	cmp.w	ip, #0
 8001cf4:	d002      	beq.n	8001cfc <copy_hashtag+0xd0>
 8001cf6:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8001cfa:	db0c      	blt.n	8001d16 <copy_hashtag+0xea>
 8001cfc:	b129      	cbz	r1, 8001d0a <copy_hashtag+0xde>
 8001cfe:	b127      	cbz	r7, 8001d0a <copy_hashtag+0xde>
 8001d00:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001d04:	da01      	bge.n	8001d0a <copy_hashtag+0xde>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001d06:	f8a0 3b40 	strh.w	r3, [r0, #2880]	@ 0xb40
            fill_pixel(buffer, x, y, j, i, color);
        for (int j = 4; j < 5; j++) 
            fill_pixel(buffer, x, y, j, i, color);
    }
    
    for (int i = 0; i < 6; i++)
 8001d0a:	3201      	adds	r2, #1
 8001d0c:	3002      	adds	r0, #2
 8001d0e:	42a2      	cmp	r2, r4
 8001d10:	d1e9      	bne.n	8001ce6 <copy_hashtag+0xba>
        for (int j = 4; j < 5; j++) 
            fill_pixel(buffer, x, y, i, j, color);
        for (int j = 7; j < 8; j++) 
            fill_pixel(buffer, x, y, i, j, color);
    }
}
 8001d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001d16:	8003      	strh	r3, [r0, #0]
        for (int j = 4; j < 5; j++) 
 8001d18:	e7f0      	b.n	8001cfc <copy_hashtag+0xd0>
 8001d1a:	bf00      	nop
 8001d1c:	240001b8 	.word	0x240001b8

08001d20 <copy_at>:

void copy_at(uint16_t* buffer, int x, int y, uint32_t color)
{
 8001d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d24:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8001d28:	4cc6      	ldr	r4, [pc, #792]	@ (8002044 <copy_at+0x324>)
{
 8001d2a:	b083      	sub	sp, #12
    int pixel_x = x_base + x + offset;
 8001d2c:	6824      	ldr	r4, [r4, #0]
 8001d2e:	db44      	blt.n	8001dba <copy_at+0x9a>
 8001d30:	1d0d      	adds	r5, r1, #4
 8001d32:	f101 0b02 	add.w	fp, r1, #2
 8001d36:	9500      	str	r5, [sp, #0]
 8001d38:	1d67      	adds	r7, r4, #5
 8001d3a:	eb01 0804 	add.w	r8, r1, r4
 8001d3e:	440f      	add	r7, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001d40:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8001d44:	bf2c      	ite	cs
 8001d46:	f04f 0900 	movcs.w	r9, #0
 8001d4a:	f04f 0901 	movcc.w	r9, #1
 8001d4e:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8001d52:	f0c0 80b8 	bcc.w	8001ec6 <copy_at+0x1a6>
 8001d56:	1c57      	adds	r7, r2, #1
 8001d58:	f100 83a9 	bmi.w	80024ae <copy_at+0x78e>
 8001d5c:	f1b9 0f00 	cmp.w	r9, #0
 8001d60:	f000 83a5 	beq.w	80024ae <copy_at+0x78e>
 8001d64:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001d68:	f2c0 84d1 	blt.w	800270e <copy_at+0x9ee>
 8001d6c:	f102 0e03 	add.w	lr, r2, #3
 8001d70:	f102 0c06 	add.w	ip, r2, #6
    int pixel_x = x_base + x + offset;
 8001d74:	eb0b 0704 	add.w	r7, fp, r4
 8001d78:	1ce5      	adds	r5, r4, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001d7a:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8001d7e:	440d      	add	r5, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001d80:	bf2c      	ite	cs
 8001d82:	f04f 0800 	movcs.w	r8, #0
 8001d86:	f04f 0801 	movcc.w	r8, #1
 8001d8a:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8001d8e:	f0c0 815b 	bcc.w	8002048 <copy_at+0x328>
 8001d92:	f1be 0f00 	cmp.w	lr, #0
 8001d96:	f2c0 8249 	blt.w	800222c <copy_at+0x50c>
 8001d9a:	f1b8 0f00 	cmp.w	r8, #0
 8001d9e:	f000 8245 	beq.w	800222c <copy_at+0x50c>
 8001da2:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001da6:	f280 84a5 	bge.w	80026f4 <copy_at+0x9d4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001daa:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    int pixel_y = y_base + y;
 8001dae:	1d15      	adds	r5, r2, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001db0:	eb07 114e 	add.w	r1, r7, lr, lsl #5
 8001db4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001db8:	e24c      	b.n	8002254 <copy_at+0x534>
    int pixel_x = x_base + x + offset;
 8001dba:	1c4e      	adds	r6, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001dbc:	43d7      	mvns	r7, r2
    int pixel_x = x_base + x + offset;
 8001dbe:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001dc0:	0fff      	lsrs	r7, r7, #31
 8001dc2:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8001dc6:	bf2c      	ite	cs
 8001dc8:	f04f 0c00 	movcs.w	ip, #0
 8001dcc:	f04f 0c01 	movcc.w	ip, #1
 8001dd0:	2f00      	cmp	r7, #0
 8001dd2:	f000 812d 	beq.w	8002030 <copy_at+0x310>
 8001dd6:	f1bc 0f00 	cmp.w	ip, #0
 8001dda:	f000 8129 	beq.w	8002030 <copy_at+0x310>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001dde:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8001de2:	eb06 1545 	add.w	r5, r6, r5, lsl #5
 8001de6:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 8001dea:	f102 050b 	add.w	r5, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001dee:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8001df2:	da05      	bge.n	8001e00 <copy_at+0xe0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001df4:	ebc5 1c05 	rsb	ip, r5, r5, lsl #4
 8001df8:	eb06 164c 	add.w	r6, r6, ip, lsl #5
 8001dfc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    int pixel_x = x_base + x + offset;
 8001e00:	f101 0b02 	add.w	fp, r1, #2
 8001e04:	eb0b 0604 	add.w	r6, fp, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e08:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8001e0c:	bf2c      	ite	cs
 8001e0e:	f04f 0c00 	movcs.w	ip, #0
 8001e12:	f04f 0c01 	movcc.w	ip, #1
 8001e16:	2f00      	cmp	r7, #0
 8001e18:	f000 818b 	beq.w	8002132 <copy_at+0x412>
 8001e1c:	f1bc 0f00 	cmp.w	ip, #0
 8001e20:	f000 8187 	beq.w	8002132 <copy_at+0x412>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001e24:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 8001e28:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8001e2c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e30:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8001e34:	da05      	bge.n	8001e42 <copy_at+0x122>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001e36:	ebc5 1c05 	rsb	ip, r5, r5, lsl #4
 8001e3a:	eb06 164c 	add.w	r6, r6, ip, lsl #5
 8001e3e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    int pixel_x = x_base + x + offset;
 8001e42:	1cce      	adds	r6, r1, #3
 8001e44:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e46:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8001e4a:	bf2c      	ite	cs
 8001e4c:	f04f 0c00 	movcs.w	ip, #0
 8001e50:	f04f 0c01 	movcc.w	ip, #1
 8001e54:	2f00      	cmp	r7, #0
 8001e56:	f000 8174 	beq.w	8002142 <copy_at+0x422>
 8001e5a:	f1bc 0f00 	cmp.w	ip, #0
 8001e5e:	f000 8170 	beq.w	8002142 <copy_at+0x422>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001e62:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 8001e66:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8001e6a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e6e:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8001e72:	da05      	bge.n	8001e80 <copy_at+0x160>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001e74:	ebc5 1c05 	rsb	ip, r5, r5, lsl #4
 8001e78:	eb06 164c 	add.w	r6, r6, ip, lsl #5
 8001e7c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    int pixel_x = x_base + x + offset;
 8001e80:	1d0e      	adds	r6, r1, #4
 8001e82:	eb06 0c04 	add.w	ip, r6, r4
 8001e86:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e88:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8001e8c:	bf2c      	ite	cs
 8001e8e:	f04f 0e00 	movcs.w	lr, #0
 8001e92:	f04f 0e01 	movcc.w	lr, #1
 8001e96:	f1be 0f00 	cmp.w	lr, #0
 8001e9a:	f000 815a 	beq.w	8002152 <copy_at+0x432>
 8001e9e:	2f00      	cmp	r7, #0
 8001ea0:	f000 8157 	beq.w	8002152 <copy_at+0x432>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001ea4:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8001ea8:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8001eac:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001eb0:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8001eb4:	f6bf af40 	bge.w	8001d38 <copy_at+0x18>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001eb8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8001ebc:	eb0c 1c45 	add.w	ip, ip, r5, lsl #5
 8001ec0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    for (int i = 1; i < 5; i++)
 8001ec4:	e738      	b.n	8001d38 <copy_at+0x18>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001ec6:	f112 0c01 	adds.w	ip, r2, #1
 8001eca:	9701      	str	r7, [sp, #4]
 8001ecc:	f100 823b 	bmi.w	8002346 <copy_at+0x626>
 8001ed0:	f1b9 0f00 	cmp.w	r9, #0
 8001ed4:	f000 8237 	beq.w	8002346 <copy_at+0x626>
 8001ed8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001edc:	f6bf af46 	bge.w	8001d6c <copy_at+0x4c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001ee0:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
    int pixel_y = y_base + y;
 8001ee4:	f102 0e02 	add.w	lr, r2, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001ee8:	b29d      	uxth	r5, r3
 8001eea:	eb08 194c 	add.w	r9, r8, ip, lsl #5
 8001eee:	eb07 1c4c 	add.w	ip, r7, ip, lsl #5
 8001ef2:	f820 5019 	strh.w	r5, [r0, r9, lsl #1]
 8001ef6:	f820 501c 	strh.w	r5, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001efa:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001efe:	f6bf af35 	bge.w	8001d6c <copy_at+0x4c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f02:	ebce 150e 	rsb	r5, lr, lr, lsl #4
    int pixel_y = y_base + y;
 8001f06:	f102 0e03 	add.w	lr, r2, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f0a:	fa1f fc83 	uxth.w	ip, r3
 8001f0e:	eb08 1945 	add.w	r9, r8, r5, lsl #5
 8001f12:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 8001f16:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8001f1a:	f820 c015 	strh.w	ip, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001f1e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001f22:	f280 8469 	bge.w	80027f8 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f26:	ebce 150e 	rsb	r5, lr, lr, lsl #4
    int pixel_y = y_base + y;
 8001f2a:	f102 0c04 	add.w	ip, r2, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f2e:	fa1f f983 	uxth.w	r9, r3
 8001f32:	eb08 1a45 	add.w	sl, r8, r5, lsl #5
 8001f36:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 8001f3a:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
 8001f3e:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001f42:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001f46:	f280 8457 	bge.w	80027f8 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f4a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
    int pixel_y = y_base + y;
 8001f4e:	f102 0a05 	add.w	sl, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f52:	b29d      	uxth	r5, r3
 8001f54:	eb08 194c 	add.w	r9, r8, ip, lsl #5
 8001f58:	eb07 1c4c 	add.w	ip, r7, ip, lsl #5
 8001f5c:	f820 5019 	strh.w	r5, [r0, r9, lsl #1]
 8001f60:	f820 501c 	strh.w	r5, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001f64:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8001f68:	f280 8446 	bge.w	80027f8 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f6c:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
    int pixel_y = y_base + y;
 8001f70:	f102 0c06 	add.w	ip, r2, #6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f74:	b29d      	uxth	r5, r3
 8001f76:	eb08 194a 	add.w	r9, r8, sl, lsl #5
 8001f7a:	eb07 1a4a 	add.w	sl, r7, sl, lsl #5
 8001f7e:	f820 5019 	strh.w	r5, [r0, r9, lsl #1]
 8001f82:	f820 501a 	strh.w	r5, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001f86:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001f8a:	f6bf aef3 	bge.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f8e:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
    int pixel_y = y_base + y;
 8001f92:	f102 0a07 	add.w	sl, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f96:	fa1f f983 	uxth.w	r9, r3
 8001f9a:	eb08 1645 	add.w	r6, r8, r5, lsl #5
 8001f9e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 8001fa2:	f820 9016 	strh.w	r9, [r0, r6, lsl #1]
 8001fa6:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001faa:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8001fae:	f6bf aee1 	bge.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001fb2:	ebca 150a 	rsb	r5, sl, sl, lsl #4
    int pixel_y = y_base + y;
 8001fb6:	f102 0a08 	add.w	sl, r2, #8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001fba:	fa1f f983 	uxth.w	r9, r3
 8001fbe:	eb08 1645 	add.w	r6, r8, r5, lsl #5
 8001fc2:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 8001fc6:	f820 9016 	strh.w	r9, [r0, r6, lsl #1]
 8001fca:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001fce:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8001fd2:	f6bf aecf 	bge.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001fd6:	ebca 150a 	rsb	r5, sl, sl, lsl #4
    int pixel_y = y_base + y;
 8001fda:	f102 0a09 	add.w	sl, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001fde:	fa1f f983 	uxth.w	r9, r3
 8001fe2:	eb08 1645 	add.w	r6, r8, r5, lsl #5
 8001fe6:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 8001fea:	f820 9016 	strh.w	r9, [r0, r6, lsl #1]
 8001fee:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001ff2:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8001ff6:	f6bf aebd 	bge.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001ffa:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8001ffe:	b29d      	uxth	r5, r3
 8002000:	eb07 174a 	add.w	r7, r7, sl, lsl #5
 8002004:	eb08 1a4a 	add.w	sl, r8, sl, lsl #5
 8002008:	f820 501a 	strh.w	r5, [r0, sl, lsl #1]
 800200c:	f820 5017 	strh.w	r5, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 8002010:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002014:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8002018:	f6bf aeac 	bge.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800201c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002020:	fa1f f983 	uxth.w	r9, r3
 8002024:	eb08 1847 	add.w	r8, r8, r7, lsl #5
 8002028:	017f      	lsls	r7, r7, #5
 800202a:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800202e:	e239      	b.n	80024a4 <copy_at+0x784>
 8002030:	f112 050b 	adds.w	r5, r2, #11
 8002034:	f53f aee4 	bmi.w	8001e00 <copy_at+0xe0>
 8002038:	f1bc 0f00 	cmp.w	ip, #0
 800203c:	f43f aee0 	beq.w	8001e00 <copy_at+0xe0>
 8002040:	e6d5      	b.n	8001dee <copy_at+0xce>
 8002042:	bf00      	nop
 8002044:	240001b8 	.word	0x240001b8
 8002048:	f1be 0f00 	cmp.w	lr, #0
 800204c:	46a9      	mov	r9, r5
 800204e:	f2c0 8088 	blt.w	8002162 <copy_at+0x442>
 8002052:	f1b8 0f00 	cmp.w	r8, #0
 8002056:	f000 8084 	beq.w	8002162 <copy_at+0x442>
 800205a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800205e:	da57      	bge.n	8002110 <copy_at+0x3f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002060:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    int pixel_y = y_base + y;
 8002064:	f102 0a04 	add.w	sl, r2, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002068:	fa1f fb83 	uxth.w	fp, r3
 800206c:	eb07 114e 	add.w	r1, r7, lr, lsl #5
 8002070:	f820 b011 	strh.w	fp, [r0, r1, lsl #1]
 8002074:	eb05 114e 	add.w	r1, r5, lr, lsl #5
 8002078:	f820 b011 	strh.w	fp, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800207c:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8002080:	da46      	bge.n	8002110 <copy_at+0x3f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002082:	ebca 110a 	rsb	r1, sl, sl, lsl #4
    int pixel_y = y_base + y;
 8002086:	f102 0a05 	add.w	sl, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800208a:	fa1f fe83 	uxth.w	lr, r3
 800208e:	eb07 1b41 	add.w	fp, r7, r1, lsl #5
 8002092:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 8002096:	f820 e01b 	strh.w	lr, [r0, fp, lsl #1]
 800209a:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800209e:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80020a2:	da35      	bge.n	8002110 <copy_at+0x3f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80020a4:	ebca 110a 	rsb	r1, sl, sl, lsl #4
 80020a8:	fa1f fe83 	uxth.w	lr, r3
 80020ac:	eb07 1b41 	add.w	fp, r7, r1, lsl #5
 80020b0:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 80020b4:	f820 e01b 	strh.w	lr, [r0, fp, lsl #1]
 80020b8:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80020bc:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80020c0:	da1a      	bge.n	80020f8 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80020c2:	ebcc 110c 	rsb	r1, ip, ip, lsl #4
    int pixel_y = y_base + y;
 80020c6:	3207      	adds	r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80020c8:	fa1f fe83 	uxth.w	lr, r3
 80020cc:	eb05 1541 	add.w	r5, r5, r1, lsl #5
 80020d0:	eb07 1141 	add.w	r1, r7, r1, lsl #5
 80020d4:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 80020d8:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80020dc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80020e0:	da0a      	bge.n	80020f8 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80020e2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80020e6:	b299      	uxth	r1, r3
 80020e8:	eb07 1542 	add.w	r5, r7, r2, lsl #5
 80020ec:	0152      	lsls	r2, r2, #5
 80020ee:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
 80020f2:	4491      	add	r9, r2
 80020f4:	f820 1019 	strh.w	r1, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80020f8:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80020fc:	d208      	bcs.n	8002110 <copy_at+0x3f0>
 80020fe:	f1b8 0f00 	cmp.w	r8, #0
 8002102:	d005      	beq.n	8002110 <copy_at+0x3f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002104:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8002108:	eb07 124a 	add.w	r2, r7, sl, lsl #5
 800210c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    int pixel_x = x_base + x + offset;
 8002110:	9e00      	ldr	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002112:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8002116:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002118:	d208      	bcs.n	800212c <copy_at+0x40c>
 800211a:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800211e:	d205      	bcs.n	800212c <copy_at+0x40c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002120:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8002124:	eb06 164c 	add.w	r6, r6, ip, lsl #5
 8002128:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
        fill_pixel(buffer, x, y, 2, i, color);
        fill_pixel(buffer, x, y, 3, i, color);
    }
    fill_pixel(buffer, x, y, 2, 5, color);
    fill_pixel(buffer, x, y, 4, 6, color);
}
 800212c:	b003      	add	sp, #12
 800212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002132:	2d00      	cmp	r5, #0
 8002134:	f6ff ae85 	blt.w	8001e42 <copy_at+0x122>
 8002138:	f1bc 0f00 	cmp.w	ip, #0
 800213c:	f43f ae81 	beq.w	8001e42 <copy_at+0x122>
 8002140:	e676      	b.n	8001e30 <copy_at+0x110>
 8002142:	2d00      	cmp	r5, #0
 8002144:	f6ff ae9c 	blt.w	8001e80 <copy_at+0x160>
 8002148:	f1bc 0f00 	cmp.w	ip, #0
 800214c:	f43f ae98 	beq.w	8001e80 <copy_at+0x160>
 8002150:	e68d      	b.n	8001e6e <copy_at+0x14e>
 8002152:	2d00      	cmp	r5, #0
 8002154:	f6ff adf0 	blt.w	8001d38 <copy_at+0x18>
 8002158:	f1be 0f00 	cmp.w	lr, #0
 800215c:	f43f adec 	beq.w	8001d38 <copy_at+0x18>
 8002160:	e6a6      	b.n	8001eb0 <copy_at+0x190>
    int pixel_x = x_base + x + offset;
 8002162:	3103      	adds	r1, #3
 8002164:	eb01 0a04 	add.w	sl, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002168:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 800216c:	d208      	bcs.n	8002180 <copy_at+0x460>
 800216e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002172:	d205      	bcs.n	8002180 <copy_at+0x460>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002174:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002178:	eb0a 1a4e 	add.w	sl, sl, lr, lsl #5
 800217c:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002180:	f112 0a04 	adds.w	sl, r2, #4
 8002184:	d403      	bmi.n	800218e <copy_at+0x46e>
 8002186:	f1b8 0f00 	cmp.w	r8, #0
 800218a:	f47f af77 	bne.w	800207c <copy_at+0x35c>
    int pixel_x = x_base + x + offset;
 800218e:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002192:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8002196:	d208      	bcs.n	80021aa <copy_at+0x48a>
 8002198:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800219c:	d205      	bcs.n	80021aa <copy_at+0x48a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800219e:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80021a2:	eb0e 1e4a 	add.w	lr, lr, sl, lsl #5
 80021a6:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80021aa:	f112 0a05 	adds.w	sl, r2, #5
 80021ae:	d403      	bmi.n	80021b8 <copy_at+0x498>
 80021b0:	f1b8 0f00 	cmp.w	r8, #0
 80021b4:	f47f af73 	bne.w	800209e <copy_at+0x37e>
    int pixel_x = x_base + x + offset;
 80021b8:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80021bc:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80021c0:	d208      	bcs.n	80021d4 <copy_at+0x4b4>
 80021c2:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80021c6:	d205      	bcs.n	80021d4 <copy_at+0x4b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80021c8:	ebca 1b0a 	rsb	fp, sl, sl, lsl #4
 80021cc:	eb0e 1e4b 	add.w	lr, lr, fp, lsl #5
 80021d0:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80021d4:	f1bc 0f00 	cmp.w	ip, #0
 80021d8:	db03      	blt.n	80021e2 <copy_at+0x4c2>
 80021da:	f1b8 0f00 	cmp.w	r8, #0
 80021de:	f47f af6d 	bne.w	80020bc <copy_at+0x39c>
    int pixel_x = x_base + x + offset;
 80021e2:	190d      	adds	r5, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80021e4:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80021e8:	d208      	bcs.n	80021fc <copy_at+0x4dc>
 80021ea:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80021ee:	d205      	bcs.n	80021fc <copy_at+0x4dc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80021f0:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
 80021f4:	eb05 154e 	add.w	r5, r5, lr, lsl #5
 80021f8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80021fc:	3207      	adds	r2, #7
 80021fe:	d403      	bmi.n	8002208 <copy_at+0x4e8>
 8002200:	f1b8 0f00 	cmp.w	r8, #0
 8002204:	f47f af6a 	bne.w	80020dc <copy_at+0x3bc>
    int pixel_x = x_base + x + offset;
 8002208:	eb01 0904 	add.w	r9, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800220c:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 8002210:	f4bf af72 	bcs.w	80020f8 <copy_at+0x3d8>
 8002214:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002218:	f4bf af6e 	bcs.w	80020f8 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800221c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002220:	b299      	uxth	r1, r3
 8002222:	0152      	lsls	r2, r2, #5
 8002224:	4491      	add	r9, r2
 8002226:	f820 1019 	strh.w	r1, [r0, r9, lsl #1]
    for (int i = 3; i < 8; i++)
 800222a:	e765      	b.n	80020f8 <copy_at+0x3d8>
    int pixel_x = x_base + x + offset;
 800222c:	3103      	adds	r1, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800222e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8002232:	eb01 0504 	add.w	r5, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002236:	d208      	bcs.n	800224a <copy_at+0x52a>
 8002238:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 800223c:	d205      	bcs.n	800224a <copy_at+0x52a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800223e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002242:	eb05 154e 	add.w	r5, r5, lr, lsl #5
 8002246:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800224a:	1d15      	adds	r5, r2, #4
 800224c:	d40f      	bmi.n	800226e <copy_at+0x54e>
 800224e:	f1b8 0f00 	cmp.w	r8, #0
 8002252:	d00c      	beq.n	800226e <copy_at+0x54e>
 8002254:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8002258:	f280 824c 	bge.w	80026f4 <copy_at+0x9d4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800225c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    int pixel_y = y_base + y;
 8002260:	f102 0a05 	add.w	sl, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002264:	eb07 1145 	add.w	r1, r7, r5, lsl #5
 8002268:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800226c:	e013      	b.n	8002296 <copy_at+0x576>
 800226e:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8002272:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002276:	d208      	bcs.n	800228a <copy_at+0x56a>
 8002278:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800227c:	d205      	bcs.n	800228a <copy_at+0x56a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800227e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8002282:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 8002286:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800228a:	f112 0a05 	adds.w	sl, r2, #5
 800228e:	d40d      	bmi.n	80022ac <copy_at+0x58c>
 8002290:	f1b8 0f00 	cmp.w	r8, #0
 8002294:	d00a      	beq.n	80022ac <copy_at+0x58c>
 8002296:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800229a:	f6bf af2d 	bge.w	80020f8 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800229e:	ebca 110a 	rsb	r1, sl, sl, lsl #4
 80022a2:	eb07 1141 	add.w	r1, r7, r1, lsl #5
 80022a6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80022aa:	e013      	b.n	80022d4 <copy_at+0x5b4>
 80022ac:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80022b0:	eb01 0504 	add.w	r5, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80022b4:	d208      	bcs.n	80022c8 <copy_at+0x5a8>
 80022b6:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80022ba:	d205      	bcs.n	80022c8 <copy_at+0x5a8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80022bc:	ebca 1e0a 	rsb	lr, sl, sl, lsl #4
 80022c0:	eb05 154e 	add.w	r5, r5, lr, lsl #5
 80022c4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80022c8:	f1bc 0f00 	cmp.w	ip, #0
 80022cc:	db0e      	blt.n	80022ec <copy_at+0x5cc>
 80022ce:	f1b8 0f00 	cmp.w	r8, #0
 80022d2:	d00b      	beq.n	80022ec <copy_at+0x5cc>
 80022d4:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80022d8:	f6bf af0e 	bge.w	80020f8 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80022dc:	ebcc 110c 	rsb	r1, ip, ip, lsl #4
    int pixel_y = y_base + y;
 80022e0:	3207      	adds	r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80022e2:	eb07 1141 	add.w	r1, r7, r1, lsl #5
 80022e6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80022ea:	e011      	b.n	8002310 <copy_at+0x5f0>
    int pixel_x = x_base + x + offset;
 80022ec:	190d      	adds	r5, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80022ee:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80022f2:	d208      	bcs.n	8002306 <copy_at+0x5e6>
 80022f4:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80022f8:	d205      	bcs.n	8002306 <copy_at+0x5e6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80022fa:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
 80022fe:	eb05 154e 	add.w	r5, r5, lr, lsl #5
 8002302:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002306:	3207      	adds	r2, #7
 8002308:	d40d      	bmi.n	8002326 <copy_at+0x606>
 800230a:	f1b8 0f00 	cmp.w	r8, #0
 800230e:	d00a      	beq.n	8002326 <copy_at+0x606>
 8002310:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002314:	f6bf aef0 	bge.w	80020f8 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002318:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800231c:	eb07 1242 	add.w	r2, r7, r2, lsl #5
 8002320:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002324:	e6e8      	b.n	80020f8 <copy_at+0x3d8>
    int pixel_x = x_base + x + offset;
 8002326:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002328:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800232c:	f4bf aee4 	bcs.w	80020f8 <copy_at+0x3d8>
 8002330:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002334:	f4bf aee0 	bcs.w	80020f8 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002338:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800233c:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8002340:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8002344:	e6d8      	b.n	80020f8 <copy_at+0x3d8>
    int pixel_x = x_base + x + offset;
 8002346:	1d4d      	adds	r5, r1, #5
 8002348:	eb05 0e04 	add.w	lr, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800234c:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8002350:	d208      	bcs.n	8002364 <copy_at+0x644>
 8002352:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8002356:	d205      	bcs.n	8002364 <copy_at+0x644>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002358:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800235c:	eb0e 1e4c 	add.w	lr, lr, ip, lsl #5
 8002360:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002364:	f112 0e02 	adds.w	lr, r2, #2
 8002368:	f140 81fc 	bpl.w	8002764 <copy_at+0xa44>
    int pixel_x = x_base + x + offset;
 800236c:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002370:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002374:	d208      	bcs.n	8002388 <copy_at+0x668>
 8002376:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800237a:	d205      	bcs.n	8002388 <copy_at+0x668>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800237c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002380:	eb0c 1c4e 	add.w	ip, ip, lr, lsl #5
 8002384:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002388:	f112 0e03 	adds.w	lr, r2, #3
 800238c:	f140 81df 	bpl.w	800274e <copy_at+0xa2e>
    int pixel_x = x_base + x + offset;
 8002390:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002394:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002398:	d208      	bcs.n	80023ac <copy_at+0x68c>
 800239a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800239e:	d205      	bcs.n	80023ac <copy_at+0x68c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80023a0:	ebce 1a0e 	rsb	sl, lr, lr, lsl #4
 80023a4:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
 80023a8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80023ac:	f112 0c04 	adds.w	ip, r2, #4
 80023b0:	f140 81ee 	bpl.w	8002790 <copy_at+0xa70>
    int pixel_x = x_base + x + offset;
 80023b4:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80023b8:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 80023bc:	d208      	bcs.n	80023d0 <copy_at+0x6b0>
 80023be:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80023c2:	d205      	bcs.n	80023d0 <copy_at+0x6b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80023c4:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80023c8:	eb0a 1a4c 	add.w	sl, sl, ip, lsl #5
 80023cc:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80023d0:	f112 0a05 	adds.w	sl, r2, #5
 80023d4:	f140 81d1 	bpl.w	800277a <copy_at+0xa5a>
    int pixel_x = x_base + x + offset;
 80023d8:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80023dc:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80023e0:	d208      	bcs.n	80023f4 <copy_at+0x6d4>
 80023e2:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80023e6:	d205      	bcs.n	80023f4 <copy_at+0x6d4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80023e8:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80023ec:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
 80023f0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80023f4:	f112 0c06 	adds.w	ip, r2, #6
 80023f8:	f140 81df 	bpl.w	80027ba <copy_at+0xa9a>
    int pixel_x = x_base + x + offset;
 80023fc:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002400:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8002404:	d208      	bcs.n	8002418 <copy_at+0x6f8>
 8002406:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800240a:	d205      	bcs.n	8002418 <copy_at+0x6f8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800240c:	ebcc 160c 	rsb	r6, ip, ip, lsl #4
 8002410:	eb0a 1a46 	add.w	sl, sl, r6, lsl #5
 8002414:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002418:	f112 0a07 	adds.w	sl, r2, #7
 800241c:	f140 81c3 	bpl.w	80027a6 <copy_at+0xa86>
    int pixel_x = x_base + x + offset;
 8002420:	192e      	adds	r6, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002422:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8002426:	d208      	bcs.n	800243a <copy_at+0x71a>
 8002428:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800242c:	d205      	bcs.n	800243a <copy_at+0x71a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800242e:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8002432:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 8002436:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800243a:	f112 0a08 	adds.w	sl, r2, #8
 800243e:	f140 81d1 	bpl.w	80027e4 <copy_at+0xac4>
    int pixel_x = x_base + x + offset;
 8002442:	192e      	adds	r6, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002444:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8002448:	d208      	bcs.n	800245c <copy_at+0x73c>
 800244a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800244e:	d205      	bcs.n	800245c <copy_at+0x73c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002450:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8002454:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 8002458:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800245c:	f112 0a09 	adds.w	sl, r2, #9
 8002460:	f140 81b6 	bpl.w	80027d0 <copy_at+0xab0>
    int pixel_x = x_base + x + offset;
 8002464:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002466:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800246a:	d208      	bcs.n	800247e <copy_at+0x75e>
 800246c:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8002470:	d205      	bcs.n	800247e <copy_at+0x75e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002472:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8002476:	eb07 174a 	add.w	r7, r7, sl, lsl #5
 800247a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800247e:	f112 070a 	adds.w	r7, r2, #10
 8002482:	f140 8158 	bpl.w	8002736 <copy_at+0xa16>
    int pixel_x = x_base + x + offset;
 8002486:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002488:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800248c:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800248e:	f4bf ac71 	bcs.w	8001d74 <copy_at+0x54>
 8002492:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8002496:	f4bf ac6d 	bcs.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800249a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800249e:	fa1f f983 	uxth.w	r9, r3
 80024a2:	017f      	lsls	r7, r7, #5
 80024a4:	9d01      	ldr	r5, [sp, #4]
 80024a6:	443d      	add	r5, r7
 80024a8:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    for (int i = 1; i < 11; i++)
 80024ac:	e462      	b.n	8001d74 <copy_at+0x54>
    int pixel_x = x_base + x + offset;
 80024ae:	1d4d      	adds	r5, r1, #5
 80024b0:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80024b4:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80024b8:	d208      	bcs.n	80024cc <copy_at+0x7ac>
 80024ba:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80024be:	d205      	bcs.n	80024cc <copy_at+0x7ac>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80024c0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80024c4:	eb0c 1c47 	add.w	ip, ip, r7, lsl #5
 80024c8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80024cc:	1c97      	adds	r7, r2, #2
 80024ce:	f140 8114 	bpl.w	80026fa <copy_at+0x9da>
    int pixel_x = x_base + x + offset;
 80024d2:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80024d6:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80024da:	d208      	bcs.n	80024ee <copy_at+0x7ce>
 80024dc:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80024e0:	d205      	bcs.n	80024ee <copy_at+0x7ce>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80024e2:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80024e6:	eb0c 1c47 	add.w	ip, ip, r7, lsl #5
 80024ea:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80024ee:	f112 0e03 	adds.w	lr, r2, #3
 80024f2:	d40e      	bmi.n	8002512 <copy_at+0x7f2>
 80024f4:	f1b9 0f00 	cmp.w	r9, #0
 80024f8:	d00b      	beq.n	8002512 <copy_at+0x7f2>
 80024fa:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80024fe:	f280 817b 	bge.w	80027f8 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002502:	ebce 150e 	rsb	r5, lr, lr, lsl #4
    int pixel_y = y_base + y;
 8002506:	1d17      	adds	r7, r2, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002508:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 800250c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002510:	e011      	b.n	8002536 <copy_at+0x816>
    int pixel_x = x_base + x + offset;
 8002512:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002514:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8002518:	d208      	bcs.n	800252c <copy_at+0x80c>
 800251a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800251e:	d205      	bcs.n	800252c <copy_at+0x80c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002520:	ebce 1c0e 	rsb	ip, lr, lr, lsl #4
 8002524:	eb07 174c 	add.w	r7, r7, ip, lsl #5
 8002528:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800252c:	1d17      	adds	r7, r2, #4
 800252e:	d40f      	bmi.n	8002550 <copy_at+0x830>
 8002530:	f1b9 0f00 	cmp.w	r9, #0
 8002534:	d00c      	beq.n	8002550 <copy_at+0x830>
 8002536:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800253a:	f280 815d 	bge.w	80027f8 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800253e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    int pixel_y = y_base + y;
 8002542:	f102 0a05 	add.w	sl, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002546:	eb08 1547 	add.w	r5, r8, r7, lsl #5
 800254a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800254e:	e013      	b.n	8002578 <copy_at+0x858>
    int pixel_x = x_base + x + offset;
 8002550:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002554:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002558:	d208      	bcs.n	800256c <copy_at+0x84c>
 800255a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800255e:	d205      	bcs.n	800256c <copy_at+0x84c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002560:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002564:	eb0c 1c47 	add.w	ip, ip, r7, lsl #5
 8002568:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800256c:	f112 0a05 	adds.w	sl, r2, #5
 8002570:	d40f      	bmi.n	8002592 <copy_at+0x872>
 8002572:	f1b9 0f00 	cmp.w	r9, #0
 8002576:	d00c      	beq.n	8002592 <copy_at+0x872>
 8002578:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800257c:	f280 813c 	bge.w	80027f8 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002580:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
    int pixel_y = y_base + y;
 8002584:	f102 0c06 	add.w	ip, r2, #6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002588:	eb08 154a 	add.w	r5, r8, sl, lsl #5
 800258c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002590:	e012      	b.n	80025b8 <copy_at+0x898>
    int pixel_x = x_base + x + offset;
 8002592:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002594:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8002598:	d208      	bcs.n	80025ac <copy_at+0x88c>
 800259a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800259e:	d205      	bcs.n	80025ac <copy_at+0x88c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80025a0:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80025a4:	eb07 174a 	add.w	r7, r7, sl, lsl #5
 80025a8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80025ac:	f112 0c06 	adds.w	ip, r2, #6
 80025b0:	d40e      	bmi.n	80025d0 <copy_at+0x8b0>
 80025b2:	f1b9 0f00 	cmp.w	r9, #0
 80025b6:	d00b      	beq.n	80025d0 <copy_at+0x8b0>
 80025b8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80025bc:	f6bf abda 	bge.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80025c0:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
    int pixel_y = y_base + y;
 80025c4:	1dd7      	adds	r7, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80025c6:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 80025ca:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80025ce:	e011      	b.n	80025f4 <copy_at+0x8d4>
    int pixel_x = x_base + x + offset;
 80025d0:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80025d2:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80025d6:	d208      	bcs.n	80025ea <copy_at+0x8ca>
 80025d8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80025dc:	d205      	bcs.n	80025ea <copy_at+0x8ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80025de:	ebcc 1a0c 	rsb	sl, ip, ip, lsl #4
 80025e2:	eb07 174a 	add.w	r7, r7, sl, lsl #5
 80025e6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80025ea:	1dd7      	adds	r7, r2, #7
 80025ec:	d40f      	bmi.n	800260e <copy_at+0x8ee>
 80025ee:	f1b9 0f00 	cmp.w	r9, #0
 80025f2:	d00c      	beq.n	800260e <copy_at+0x8ee>
 80025f4:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80025f8:	f6bf abbc 	bge.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80025fc:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002600:	eb08 1547 	add.w	r5, r8, r7, lsl #5
    int pixel_y = y_base + y;
 8002604:	f102 0708 	add.w	r7, r2, #8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002608:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800260c:	e013      	b.n	8002636 <copy_at+0x916>
    int pixel_x = x_base + x + offset;
 800260e:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002612:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8002616:	d208      	bcs.n	800262a <copy_at+0x90a>
 8002618:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800261c:	d205      	bcs.n	800262a <copy_at+0x90a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800261e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002622:	eb0a 1a47 	add.w	sl, sl, r7, lsl #5
 8002626:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800262a:	f112 0708 	adds.w	r7, r2, #8
 800262e:	d40f      	bmi.n	8002650 <copy_at+0x930>
 8002630:	f1b9 0f00 	cmp.w	r9, #0
 8002634:	d00c      	beq.n	8002650 <copy_at+0x930>
 8002636:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800263a:	f6bf ab9b 	bge.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800263e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002642:	eb08 1547 	add.w	r5, r8, r7, lsl #5
    int pixel_y = y_base + y;
 8002646:	f102 0709 	add.w	r7, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800264a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800264e:	e013      	b.n	8002678 <copy_at+0x958>
    int pixel_x = x_base + x + offset;
 8002650:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002654:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8002658:	d208      	bcs.n	800266c <copy_at+0x94c>
 800265a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800265e:	d205      	bcs.n	800266c <copy_at+0x94c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002660:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002664:	eb0a 1a47 	add.w	sl, sl, r7, lsl #5
 8002668:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800266c:	f112 0709 	adds.w	r7, r2, #9
 8002670:	d40f      	bmi.n	8002692 <copy_at+0x972>
 8002672:	f1b9 0f00 	cmp.w	r9, #0
 8002676:	d00c      	beq.n	8002692 <copy_at+0x972>
 8002678:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800267c:	f6bf ab7a 	bge.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002680:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002684:	eb08 1547 	add.w	r5, r8, r7, lsl #5
    int pixel_y = y_base + y;
 8002688:	f102 070a 	add.w	r7, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800268c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002690:	e013      	b.n	80026ba <copy_at+0x99a>
    int pixel_x = x_base + x + offset;
 8002692:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002696:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 800269a:	d208      	bcs.n	80026ae <copy_at+0x98e>
 800269c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80026a0:	d205      	bcs.n	80026ae <copy_at+0x98e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80026a2:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80026a6:	eb0a 1a47 	add.w	sl, sl, r7, lsl #5
 80026aa:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80026ae:	f112 070a 	adds.w	r7, r2, #10
 80026b2:	d40e      	bmi.n	80026d2 <copy_at+0x9b2>
 80026b4:	f1b9 0f00 	cmp.w	r9, #0
 80026b8:	d00b      	beq.n	80026d2 <copy_at+0x9b2>
 80026ba:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80026be:	f6bf ab59 	bge.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80026c2:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80026c6:	eb08 1547 	add.w	r5, r8, r7, lsl #5
 80026ca:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80026ce:	f7ff bb51 	b.w	8001d74 <copy_at+0x54>
 80026d2:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80026d6:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80026d8:	f4bf ab4c 	bcs.w	8001d74 <copy_at+0x54>
 80026dc:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80026e0:	f4bf ab48 	bcs.w	8001d74 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80026e4:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80026e8:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 80026ec:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80026f0:	f7ff bb40 	b.w	8001d74 <copy_at+0x54>
 80026f4:	f102 0a05 	add.w	sl, r2, #5
 80026f8:	e4fe      	b.n	80020f8 <copy_at+0x3d8>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80026fa:	f1b9 0f00 	cmp.w	r9, #0
 80026fe:	d10d      	bne.n	800271c <copy_at+0x9fc>
    int pixel_x = x_base + x + offset;
 8002700:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002704:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002708:	f4ff aee8 	bcc.w	80024dc <copy_at+0x7bc>
 800270c:	e6ef      	b.n	80024ee <copy_at+0x7ce>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800270e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002712:	eb08 1547 	add.w	r5, r8, r7, lsl #5
    int pixel_y = y_base + y;
 8002716:	1c97      	adds	r7, r2, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002718:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800271c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8002720:	f6bf ab24 	bge.w	8001d6c <copy_at+0x4c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002724:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    int pixel_y = y_base + y;
 8002728:	f102 0e03 	add.w	lr, r2, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800272c:	eb08 1547 	add.w	r5, r8, r7, lsl #5
 8002730:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002734:	e6e1      	b.n	80024fa <copy_at+0x7da>
 8002736:	f1b9 0f00 	cmp.w	r9, #0
 800273a:	f47f ac6b 	bne.w	8002014 <copy_at+0x2f4>
    int pixel_x = x_base + x + offset;
 800273e:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002740:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8002744:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002746:	f4ff aea4 	bcc.w	8002492 <copy_at+0x772>
 800274a:	f7ff bb13 	b.w	8001d74 <copy_at+0x54>
 800274e:	f1b9 0f00 	cmp.w	r9, #0
 8002752:	f47f abe4 	bne.w	8001f1e <copy_at+0x1fe>
    int pixel_x = x_base + x + offset;
 8002756:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800275a:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800275e:	f4ff ae1c 	bcc.w	800239a <copy_at+0x67a>
 8002762:	e623      	b.n	80023ac <copy_at+0x68c>
 8002764:	f1b9 0f00 	cmp.w	r9, #0
 8002768:	f47f abc7 	bne.w	8001efa <copy_at+0x1da>
    int pixel_x = x_base + x + offset;
 800276c:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002770:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002774:	f4ff adff 	bcc.w	8002376 <copy_at+0x656>
 8002778:	e606      	b.n	8002388 <copy_at+0x668>
 800277a:	f1b9 0f00 	cmp.w	r9, #0
 800277e:	f47f abf1 	bne.w	8001f64 <copy_at+0x244>
    int pixel_x = x_base + x + offset;
 8002782:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002786:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800278a:	f4ff ae2a 	bcc.w	80023e2 <copy_at+0x6c2>
 800278e:	e631      	b.n	80023f4 <copy_at+0x6d4>
 8002790:	f1b9 0f00 	cmp.w	r9, #0
 8002794:	f47f abd5 	bne.w	8001f42 <copy_at+0x222>
    int pixel_x = x_base + x + offset;
 8002798:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800279c:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 80027a0:	f4ff ae0d 	bcc.w	80023be <copy_at+0x69e>
 80027a4:	e614      	b.n	80023d0 <copy_at+0x6b0>
 80027a6:	f1b9 0f00 	cmp.w	r9, #0
 80027aa:	f47f abfe 	bne.w	8001faa <copy_at+0x28a>
    int pixel_x = x_base + x + offset;
 80027ae:	192e      	adds	r6, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80027b0:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80027b4:	f4ff ae38 	bcc.w	8002428 <copy_at+0x708>
 80027b8:	e63f      	b.n	800243a <copy_at+0x71a>
 80027ba:	f1b9 0f00 	cmp.w	r9, #0
 80027be:	f47f abe2 	bne.w	8001f86 <copy_at+0x266>
    int pixel_x = x_base + x + offset;
 80027c2:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80027c6:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 80027ca:	f4ff ae1c 	bcc.w	8002406 <copy_at+0x6e6>
 80027ce:	e623      	b.n	8002418 <copy_at+0x6f8>
 80027d0:	f1b9 0f00 	cmp.w	r9, #0
 80027d4:	f47f ac0d 	bne.w	8001ff2 <copy_at+0x2d2>
    int pixel_x = x_base + x + offset;
 80027d8:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80027da:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80027de:	f4ff ae45 	bcc.w	800246c <copy_at+0x74c>
 80027e2:	e64c      	b.n	800247e <copy_at+0x75e>
 80027e4:	f1b9 0f00 	cmp.w	r9, #0
 80027e8:	f47f abf1 	bne.w	8001fce <copy_at+0x2ae>
    int pixel_x = x_base + x + offset;
 80027ec:	192e      	adds	r6, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80027ee:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80027f2:	f4ff ae2a 	bcc.w	800244a <copy_at+0x72a>
 80027f6:	e631      	b.n	800245c <copy_at+0x73c>
 80027f8:	f102 0c06 	add.w	ip, r2, #6
 80027fc:	f7ff baba 	b.w	8001d74 <copy_at+0x54>

08002800 <copy_dollar>:

void copy_dollar(uint16_t* buffer, int x, int y, uint32_t color)
{
 8002800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8002804:	4cb9      	ldr	r4, [pc, #740]	@ (8002aec <copy_dollar+0x2ec>)
 8002806:	f101 0c02 	add.w	ip, r1, #2
{
 800280a:	b083      	sub	sp, #12
    int pixel_x = x_base + x + offset;
 800280c:	6825      	ldr	r5, [r4, #0]
 800280e:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002810:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002814:	bf2c      	ite	cs
 8002816:	2400      	movcs	r4, #0
 8002818:	2401      	movcc	r4, #1
 800281a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800281e:	d202      	bcs.n	8002826 <copy_dollar+0x26>
 8002820:	2c00      	cmp	r4, #0
 8002822:	f040 80b0 	bne.w	8002986 <copy_dollar+0x186>
    int pixel_y = y_base + y;
 8002826:	1c56      	adds	r6, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002828:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800282c:	d202      	bcs.n	8002834 <copy_dollar+0x34>
 800282e:	2c00      	cmp	r4, #0
 8002830:	f040 80a2 	bne.w	8002978 <copy_dollar+0x178>
    int pixel_y = y_base + y;
 8002834:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002836:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800283a:	9601      	str	r6, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800283c:	d202      	bcs.n	8002844 <copy_dollar+0x44>
 800283e:	2c00      	cmp	r4, #0
 8002840:	f040 8093 	bne.w	800296a <copy_dollar+0x16a>
    int pixel_y = y_base + y;
 8002844:	f102 0903 	add.w	r9, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002848:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 800284c:	d202      	bcs.n	8002854 <copy_dollar+0x54>
 800284e:	2c00      	cmp	r4, #0
 8002850:	f040 8084 	bne.w	800295c <copy_dollar+0x15c>
    int pixel_y = y_base + y;
 8002854:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002856:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800285a:	d201      	bcs.n	8002860 <copy_dollar+0x60>
 800285c:	2c00      	cmp	r4, #0
 800285e:	d176      	bne.n	800294e <copy_dollar+0x14e>
    int pixel_y = y_base + y;
 8002860:	f102 0e05 	add.w	lr, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002864:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002868:	d201      	bcs.n	800286e <copy_dollar+0x6e>
 800286a:	2c00      	cmp	r4, #0
 800286c:	d168      	bne.n	8002940 <copy_dollar+0x140>
    int pixel_y = y_base + y;
 800286e:	1d96      	adds	r6, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002870:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8002874:	d201      	bcs.n	800287a <copy_dollar+0x7a>
 8002876:	2c00      	cmp	r4, #0
 8002878:	d15b      	bne.n	8002932 <copy_dollar+0x132>
    int pixel_y = y_base + y;
 800287a:	f102 0807 	add.w	r8, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800287e:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8002882:	d201      	bcs.n	8002888 <copy_dollar+0x88>
 8002884:	2c00      	cmp	r4, #0
 8002886:	d14d      	bne.n	8002924 <copy_dollar+0x124>
    int pixel_y = y_base + y;
 8002888:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800288c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8002890:	d201      	bcs.n	8002896 <copy_dollar+0x96>
 8002892:	2c00      	cmp	r4, #0
 8002894:	d13f      	bne.n	8002916 <copy_dollar+0x116>
    int pixel_y = y_base + y;
 8002896:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800289a:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800289e:	d200      	bcs.n	80028a2 <copy_dollar+0xa2>
 80028a0:	bb94      	cbnz	r4, 8002908 <copy_dollar+0x108>
    int pixel_y = y_base + y;
 80028a2:	f102 0a0a 	add.w	sl, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80028a6:	f240 1b0f 	movw	fp, #271	@ 0x10f
 80028aa:	45da      	cmp	sl, fp
 80028ac:	bf8c      	ite	hi
 80028ae:	2700      	movhi	r7, #0
 80028b0:	f004 0701 	andls.w	r7, r4, #1
 80028b4:	9700      	str	r7, [sp, #0]
 80028b6:	2f00      	cmp	r7, #0
 80028b8:	d16c      	bne.n	8002994 <copy_dollar+0x194>
    int pixel_y = y_base + y;
 80028ba:	f102 0a0b 	add.w	sl, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80028be:	45da      	cmp	sl, fp
 80028c0:	d801      	bhi.n	80028c6 <copy_dollar+0xc6>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d171      	bne.n	80029aa <copy_dollar+0x1aa>
    for (int i = 0; i < 12; i++)
 80028c6:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 80028ca:	f2c0 8152 	blt.w	8002b72 <copy_dollar+0x372>
 80028ce:	9c01      	ldr	r4, [sp, #4]
 80028d0:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 80028d4:	f280 80ed 	bge.w	8002ab2 <copy_dollar+0x2b2>
    int pixel_x = x_base + x + offset;
 80028d8:	1c4a      	adds	r2, r1, #1
 80028da:	442a      	add	r2, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80028dc:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 80028e0:	f0c0 8112 	bcc.w	8002b08 <copy_dollar+0x308>
 80028e4:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80028e8:	f080 812d 	bcs.w	8002b46 <copy_dollar+0x346>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80028ec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80028f0:	9c01      	ldr	r4, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80028f2:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80028f6:	fb02 c204 	mla	r2, r2, r4, ip
 80028fa:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80028fe:	f280 8122 	bge.w	8002b46 <copy_dollar+0x346>
 8002902:	ea4f 120e 	mov.w	r2, lr, lsl #4
 8002906:	e118      	b.n	8002b3a <copy_dollar+0x33a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002908:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 800290c:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 8002910:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8002914:	e7c5      	b.n	80028a2 <copy_dollar+0xa2>
 8002916:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800291a:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800291e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002922:	e7b8      	b.n	8002896 <copy_dollar+0x96>
 8002924:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8002928:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800292c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002930:	e7aa      	b.n	8002888 <copy_dollar+0x88>
 8002932:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8002936:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800293a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800293e:	e79c      	b.n	800287a <copy_dollar+0x7a>
 8002940:	ebce 160e 	rsb	r6, lr, lr, lsl #4
 8002944:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002948:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800294c:	e78f      	b.n	800286e <copy_dollar+0x6e>
 800294e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8002952:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002956:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800295a:	e781      	b.n	8002860 <copy_dollar+0x60>
 800295c:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 8002960:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002964:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002968:	e774      	b.n	8002854 <copy_dollar+0x54>
 800296a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800296e:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002972:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002976:	e765      	b.n	8002844 <copy_dollar+0x44>
 8002978:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800297c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002980:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002984:	e756      	b.n	8002834 <copy_dollar+0x34>
 8002986:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800298a:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800298e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002992:	e748      	b.n	8002826 <copy_dollar+0x26>
 8002994:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8002998:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 800299c:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    int pixel_y = y_base + y;
 80029a0:	f102 0a0b 	add.w	sl, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80029a4:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80029a8:	d209      	bcs.n	80029be <copy_dollar+0x1be>
 80029aa:	9f01      	ldr	r7, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80029ac:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80029b0:	43ff      	mvns	r7, r7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80029b2:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80029b6:	0fff      	lsrs	r7, r7, #31
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80029b8:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80029bc:	9700      	str	r7, [sp, #0]
    int pixel_x = x_base + x + offset;
 80029be:	f101 0a01 	add.w	sl, r1, #1
 80029c2:	eb0a 0b05 	add.w	fp, sl, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80029c6:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 80029ca:	bf2c      	ite	cs
 80029cc:	f04f 0a00 	movcs.w	sl, #0
 80029d0:	f04f 0a01 	movcc.w	sl, #1
 80029d4:	f1ba 0f00 	cmp.w	sl, #0
 80029d8:	d06e      	beq.n	8002ab8 <copy_dollar+0x2b8>
 80029da:	9f00      	ldr	r7, [sp, #0]
 80029dc:	2f00      	cmp	r7, #0
 80029de:	d06b      	beq.n	8002ab8 <copy_dollar+0x2b8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80029e0:	9f01      	ldr	r7, [sp, #4]
 80029e2:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 80029e6:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 80029ea:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80029ee:	ebce 1a0e 	rsb	sl, lr, lr, lsl #4
 80029f2:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 80029f6:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80029fa:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 80029fe:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8002a02:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a06:	2c00      	cmp	r4, #0
 8002a08:	d064      	beq.n	8002ad4 <copy_dollar+0x2d4>
 8002a0a:	9f00      	ldr	r7, [sp, #0]
 8002a0c:	2f00      	cmp	r7, #0
 8002a0e:	d061      	beq.n	8002ad4 <copy_dollar+0x2d4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002a10:	9c01      	ldr	r4, [sp, #4]
 8002a12:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002a16:	eb0c 1444 	add.w	r4, ip, r4, lsl #5
 8002a1a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8002a1e:	ebce 140e 	rsb	r4, lr, lr, lsl #4
 8002a22:	eb0c 1444 	add.w	r4, ip, r4, lsl #5
 8002a26:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8002a2a:	ebc6 1406 	rsb	r4, r6, r6, lsl #4
 8002a2e:	eb0c 1444 	add.w	r4, ip, r4, lsl #5
 8002a32:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_x = x_base + x + offset;
 8002a36:	1ccc      	adds	r4, r1, #3
 8002a38:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a3a:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8002a3e:	bf2c      	ite	cs
 8002a40:	f04f 0c00 	movcs.w	ip, #0
 8002a44:	f04f 0c01 	movcc.w	ip, #1
 8002a48:	f1bc 0f00 	cmp.w	ip, #0
 8002a4c:	d050      	beq.n	8002af0 <copy_dollar+0x2f0>
 8002a4e:	9f00      	ldr	r7, [sp, #0]
 8002a50:	2f00      	cmp	r7, #0
 8002a52:	d04d      	beq.n	8002af0 <copy_dollar+0x2f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002a54:	9a01      	ldr	r2, [sp, #4]
 8002a56:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8002a5a:	eb04 1247 	add.w	r2, r4, r7, lsl #5
 8002a5e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8002a62:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002a66:	eb04 124e 	add.w	r2, r4, lr, lsl #5
 8002a6a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8002a6e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8002a72:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 8002a76:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a7a:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8002a7e:	eb01 0205 	add.w	r2, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a82:	d208      	bcs.n	8002a96 <copy_dollar+0x296>
 8002a84:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8002a88:	d205      	bcs.n	8002a96 <copy_dollar+0x296>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002a8a:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8002a8e:	eb02 1249 	add.w	r2, r2, r9, lsl #5
 8002a92:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    int pixel_x = x_base + x + offset;
 8002a96:	3104      	adds	r1, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a98:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8002a9c:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a9e:	d208      	bcs.n	8002ab2 <copy_dollar+0x2b2>
 8002aa0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8002aa4:	d205      	bcs.n	8002ab2 <copy_dollar+0x2b2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002aa6:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8002aaa:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8002aae:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
        fill_pixel(buffer, x, y, j, 5, color);
        fill_pixel(buffer, x, y, j, 9, color);
    }
    fill_pixel(buffer, x, y, 0, 3, color);
    fill_pixel(buffer, x, y, 4, 7, color);
}
 8002ab2:	b003      	add	sp, #12
 8002ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002ab8:	f1be 0f00 	cmp.w	lr, #0
 8002abc:	db02      	blt.n	8002ac4 <copy_dollar+0x2c4>
 8002abe:	f1ba 0f00 	cmp.w	sl, #0
 8002ac2:	d194      	bne.n	80029ee <copy_dollar+0x1ee>
 8002ac4:	f112 0f09 	cmn.w	r2, #9
 8002ac8:	db9d      	blt.n	8002a06 <copy_dollar+0x206>
 8002aca:	f1ba 0f00 	cmp.w	sl, #0
 8002ace:	d194      	bne.n	80029fa <copy_dollar+0x1fa>
 8002ad0:	2c00      	cmp	r4, #0
 8002ad2:	d19a      	bne.n	8002a0a <copy_dollar+0x20a>
 8002ad4:	f1be 0f00 	cmp.w	lr, #0
 8002ad8:	db01      	blt.n	8002ade <copy_dollar+0x2de>
 8002ada:	2c00      	cmp	r4, #0
 8002adc:	d19f      	bne.n	8002a1e <copy_dollar+0x21e>
 8002ade:	f112 0f09 	cmn.w	r2, #9
 8002ae2:	dba8      	blt.n	8002a36 <copy_dollar+0x236>
 8002ae4:	2c00      	cmp	r4, #0
 8002ae6:	d0a6      	beq.n	8002a36 <copy_dollar+0x236>
 8002ae8:	e79f      	b.n	8002a2a <copy_dollar+0x22a>
 8002aea:	bf00      	nop
 8002aec:	240001b8 	.word	0x240001b8
 8002af0:	f1be 0f00 	cmp.w	lr, #0
 8002af4:	db02      	blt.n	8002afc <copy_dollar+0x2fc>
 8002af6:	f1bc 0f00 	cmp.w	ip, #0
 8002afa:	d1b2      	bne.n	8002a62 <copy_dollar+0x262>
 8002afc:	3209      	adds	r2, #9
 8002afe:	dbbc      	blt.n	8002a7a <copy_dollar+0x27a>
 8002b00:	f1bc 0f00 	cmp.w	ip, #0
 8002b04:	d0b9      	beq.n	8002a7a <copy_dollar+0x27a>
 8002b06:	e7b2      	b.n	8002a6e <copy_dollar+0x26e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b08:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b0c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b10:	eb02 1644 	add.w	r6, r2, r4, lsl #5
 8002b14:	ea4f 1444 	mov.w	r4, r4, lsl #5
 8002b18:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b1c:	da2e      	bge.n	8002b7c <copy_dollar+0x37c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b1e:	ebce 160e 	rsb	r6, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b22:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b26:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8002b2a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8002b2e:	ea4f 120e 	mov.w	r2, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b32:	d208      	bcs.n	8002b46 <copy_dollar+0x346>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b34:	4464      	add	r4, ip
 8002b36:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8002b3a:	eba2 020e 	sub.w	r2, r2, lr
 8002b3e:	eb0c 1242 	add.w	r2, ip, r2, lsl #5
 8002b42:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    int pixel_x = x_base + x + offset;
 8002b46:	1cca      	adds	r2, r1, #3
 8002b48:	442a      	add	r2, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b4a:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8002b4e:	d294      	bcs.n	8002a7a <copy_dollar+0x27a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b50:	9c01      	ldr	r4, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b52:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b56:	ebc4 1704 	rsb	r7, r4, r4, lsl #4
 8002b5a:	eb02 1447 	add.w	r4, r2, r7, lsl #5
 8002b5e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b62:	da8a      	bge.n	8002a7a <copy_dollar+0x27a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b64:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002b68:	eb02 124e 	add.w	r2, r2, lr, lsl #5
 8002b6c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b70:	e783      	b.n	8002a7a <copy_dollar+0x27a>
 8002b72:	9f01      	ldr	r7, [sp, #4]
 8002b74:	43ff      	mvns	r7, r7
 8002b76:	0fff      	lsrs	r7, r7, #31
 8002b78:	9700      	str	r7, [sp, #0]
 8002b7a:	e720      	b.n	80029be <copy_dollar+0x1be>
 8002b7c:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002b80:	d2e1      	bcs.n	8002b46 <copy_dollar+0x346>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b82:	4464      	add	r4, ip
 8002b84:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b88:	e7dd      	b.n	8002b46 <copy_dollar+0x346>
 8002b8a:	bf00      	nop

08002b8c <copy_equals>:
    int pixel_y = y_base + y;
 8002b8c:	f102 0c04 	add.w	ip, r2, #4

void copy_equals(uint16_t* buffer, int x, int y, uint32_t color)
{
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8002b96:	4c5f      	ldr	r4, [pc, #380]	@ (8002d14 <copy_equals+0x188>)
 8002b98:	6825      	ldr	r5, [r4, #0]
 8002b9a:	f280 809b 	bge.w	8002cd4 <copy_equals+0x148>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b9e:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002ba2:	ea6f 040c 	mvn.w	r4, ip
    int pixel_x = x_base + x + offset;
 8002ba6:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002baa:	0fe4      	lsrs	r4, r4, #31
 8002bac:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002bb0:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002bb4:	bf2c      	ite	cs
 8002bb6:	2600      	movcs	r6, #0
 8002bb8:	2601      	movcc	r6, #1
 8002bba:	2c00      	cmp	r4, #0
 8002bbc:	f000 808b 	beq.w	8002cd6 <copy_equals+0x14a>
 8002bc0:	2e00      	cmp	r6, #0
 8002bc2:	f000 8088 	beq.w	8002cd6 <copy_equals+0x14a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002bc6:	eb0e 060c 	add.w	r6, lr, ip
    int pixel_y = y_base + y;
 8002bca:	3207      	adds	r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002bcc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002bd0:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002bd4:	da05      	bge.n	8002be2 <copy_equals+0x56>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002bd6:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002bda:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8002bde:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8002be2:	f101 0c01 	add.w	ip, r1, #1
 8002be6:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002be8:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002bec:	bf2c      	ite	cs
 8002bee:	2600      	movcs	r6, #0
 8002bf0:	2601      	movcc	r6, #1
 8002bf2:	2c00      	cmp	r4, #0
 8002bf4:	d074      	beq.n	8002ce0 <copy_equals+0x154>
 8002bf6:	2e00      	cmp	r6, #0
 8002bf8:	d072      	beq.n	8002ce0 <copy_equals+0x154>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002bfa:	eb0e 060c 	add.w	r6, lr, ip
 8002bfe:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c02:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002c06:	da05      	bge.n	8002c14 <copy_equals+0x88>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c08:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002c0c:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8002c10:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8002c14:	f101 0c02 	add.w	ip, r1, #2
 8002c18:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c1a:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002c1e:	bf2c      	ite	cs
 8002c20:	2600      	movcs	r6, #0
 8002c22:	2601      	movcc	r6, #1
 8002c24:	2c00      	cmp	r4, #0
 8002c26:	d060      	beq.n	8002cea <copy_equals+0x15e>
 8002c28:	2e00      	cmp	r6, #0
 8002c2a:	d05e      	beq.n	8002cea <copy_equals+0x15e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c2c:	eb0e 060c 	add.w	r6, lr, ip
 8002c30:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c34:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002c38:	da05      	bge.n	8002c46 <copy_equals+0xba>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c3a:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002c3e:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8002c42:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8002c46:	f101 0c03 	add.w	ip, r1, #3
 8002c4a:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c4c:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002c50:	bf2c      	ite	cs
 8002c52:	2600      	movcs	r6, #0
 8002c54:	2601      	movcc	r6, #1
 8002c56:	2c00      	cmp	r4, #0
 8002c58:	d04c      	beq.n	8002cf4 <copy_equals+0x168>
 8002c5a:	2e00      	cmp	r6, #0
 8002c5c:	d04a      	beq.n	8002cf4 <copy_equals+0x168>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c5e:	eb0e 060c 	add.w	r6, lr, ip
 8002c62:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c66:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002c6a:	da05      	bge.n	8002c78 <copy_equals+0xec>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c6c:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002c70:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8002c74:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8002c78:	f101 0c04 	add.w	ip, r1, #4
 8002c7c:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c7e:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002c82:	bf2c      	ite	cs
 8002c84:	2600      	movcs	r6, #0
 8002c86:	2601      	movcc	r6, #1
 8002c88:	2c00      	cmp	r4, #0
 8002c8a:	d038      	beq.n	8002cfe <copy_equals+0x172>
 8002c8c:	2e00      	cmp	r6, #0
 8002c8e:	d036      	beq.n	8002cfe <copy_equals+0x172>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c90:	eb0e 060c 	add.w	r6, lr, ip
 8002c94:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c98:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002c9c:	da05      	bge.n	8002caa <copy_equals+0x11e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c9e:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002ca2:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8002ca6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8002caa:	3105      	adds	r1, #5
 8002cac:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002cae:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8002cb2:	bf2c      	ite	cs
 8002cb4:	2500      	movcs	r5, #0
 8002cb6:	2501      	movcc	r5, #1
 8002cb8:	b335      	cbz	r5, 8002d08 <copy_equals+0x17c>
 8002cba:	b32c      	cbz	r4, 8002d08 <copy_equals+0x17c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002cbc:	448e      	add	lr, r1
 8002cbe:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002cc2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002cc6:	da05      	bge.n	8002cd4 <copy_equals+0x148>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002cc8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002ccc:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8002cd0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for (int j = 0; j < 6; j++)
    {
        fill_pixel(buffer, x, y, j, 4, color);
        fill_pixel(buffer, x, y, j, 7, color);
    }
}
 8002cd4:	bd70      	pop	{r4, r5, r6, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002cd6:	3207      	adds	r2, #7
 8002cd8:	d483      	bmi.n	8002be2 <copy_equals+0x56>
 8002cda:	2e00      	cmp	r6, #0
 8002cdc:	d081      	beq.n	8002be2 <copy_equals+0x56>
 8002cde:	e777      	b.n	8002bd0 <copy_equals+0x44>
 8002ce0:	2a00      	cmp	r2, #0
 8002ce2:	db97      	blt.n	8002c14 <copy_equals+0x88>
 8002ce4:	2e00      	cmp	r6, #0
 8002ce6:	d095      	beq.n	8002c14 <copy_equals+0x88>
 8002ce8:	e78b      	b.n	8002c02 <copy_equals+0x76>
 8002cea:	2a00      	cmp	r2, #0
 8002cec:	dbab      	blt.n	8002c46 <copy_equals+0xba>
 8002cee:	2e00      	cmp	r6, #0
 8002cf0:	d0a9      	beq.n	8002c46 <copy_equals+0xba>
 8002cf2:	e79f      	b.n	8002c34 <copy_equals+0xa8>
 8002cf4:	2a00      	cmp	r2, #0
 8002cf6:	dbbf      	blt.n	8002c78 <copy_equals+0xec>
 8002cf8:	2e00      	cmp	r6, #0
 8002cfa:	d0bd      	beq.n	8002c78 <copy_equals+0xec>
 8002cfc:	e7b3      	b.n	8002c66 <copy_equals+0xda>
 8002cfe:	2a00      	cmp	r2, #0
 8002d00:	dbd3      	blt.n	8002caa <copy_equals+0x11e>
 8002d02:	2e00      	cmp	r6, #0
 8002d04:	d0d1      	beq.n	8002caa <copy_equals+0x11e>
 8002d06:	e7c7      	b.n	8002c98 <copy_equals+0x10c>
 8002d08:	2a00      	cmp	r2, #0
 8002d0a:	dbe3      	blt.n	8002cd4 <copy_equals+0x148>
 8002d0c:	2d00      	cmp	r5, #0
 8002d0e:	d1d8      	bne.n	8002cc2 <copy_equals+0x136>
}
 8002d10:	bd70      	pop	{r4, r5, r6, pc}
 8002d12:	bf00      	nop
 8002d14:	240001b8 	.word	0x240001b8

08002d18 <copy_slash>:

void copy_slash(uint16_t* buffer, int x, int y, uint32_t color)
{
 8002d18:	b530      	push	{r4, r5, lr}
    int pixel_x = x_base + x + offset;
 8002d1a:	4c62      	ldr	r4, [pc, #392]	@ (8002ea4 <copy_slash+0x18c>)
 8002d1c:	f101 0c05 	add.w	ip, r1, #5
 8002d20:	6824      	ldr	r4, [r4, #0]
 8002d22:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d24:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002d28:	bf2c      	ite	cs
 8002d2a:	2500      	movcs	r5, #0
 8002d2c:	2501      	movcc	r5, #1
 8002d2e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002d32:	d202      	bcs.n	8002d3a <copy_slash+0x22>
 8002d34:	2d00      	cmp	r5, #0
 8002d36:	f040 80ae 	bne.w	8002e96 <copy_slash+0x17e>
    int pixel_y = y_base + y;
 8002d3a:	f102 0e01 	add.w	lr, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d3e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002d42:	d202      	bcs.n	8002d4a <copy_slash+0x32>
 8002d44:	2d00      	cmp	r5, #0
 8002d46:	f040 809f 	bne.w	8002e88 <copy_slash+0x170>
    int pixel_y = y_base + y;
 8002d4a:	f102 0e02 	add.w	lr, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d4e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002d52:	d202      	bcs.n	8002d5a <copy_slash+0x42>
 8002d54:	2d00      	cmp	r5, #0
 8002d56:	f040 8090 	bne.w	8002e7a <copy_slash+0x162>
    int pixel_x = x_base + x + offset;
 8002d5a:	f101 0c04 	add.w	ip, r1, #4
    int pixel_y = y_base + y;
 8002d5e:	f102 0e03 	add.w	lr, r2, #3
    int pixel_x = x_base + x + offset;
 8002d62:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d64:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002d68:	bf2c      	ite	cs
 8002d6a:	2500      	movcs	r5, #0
 8002d6c:	2501      	movcc	r5, #1
 8002d6e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002d72:	d201      	bcs.n	8002d78 <copy_slash+0x60>
 8002d74:	2d00      	cmp	r5, #0
 8002d76:	d179      	bne.n	8002e6c <copy_slash+0x154>
    int pixel_y = y_base + y;
 8002d78:	f102 0e04 	add.w	lr, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d7c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002d80:	d201      	bcs.n	8002d86 <copy_slash+0x6e>
 8002d82:	2d00      	cmp	r5, #0
 8002d84:	d16b      	bne.n	8002e5e <copy_slash+0x146>
    int pixel_y = y_base + y;
 8002d86:	f102 0e05 	add.w	lr, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d8a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002d8e:	d201      	bcs.n	8002d94 <copy_slash+0x7c>
 8002d90:	2d00      	cmp	r5, #0
 8002d92:	d15d      	bne.n	8002e50 <copy_slash+0x138>
    int pixel_x = x_base + x + offset;
 8002d94:	f101 0c03 	add.w	ip, r1, #3
    int pixel_y = y_base + y;
 8002d98:	f102 0e06 	add.w	lr, r2, #6
    int pixel_x = x_base + x + offset;
 8002d9c:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d9e:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002da2:	bf2c      	ite	cs
 8002da4:	2500      	movcs	r5, #0
 8002da6:	2501      	movcc	r5, #1
 8002da8:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002dac:	d201      	bcs.n	8002db2 <copy_slash+0x9a>
 8002dae:	2d00      	cmp	r5, #0
 8002db0:	d147      	bne.n	8002e42 <copy_slash+0x12a>
    int pixel_y = y_base + y;
 8002db2:	f102 0e07 	add.w	lr, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002db6:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002dba:	d200      	bcs.n	8002dbe <copy_slash+0xa6>
 8002dbc:	bbd5      	cbnz	r5, 8002e34 <copy_slash+0x11c>
    int pixel_y = y_base + y;
 8002dbe:	f102 0e08 	add.w	lr, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002dc2:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002dc6:	d200      	bcs.n	8002dca <copy_slash+0xb2>
 8002dc8:	bb6d      	cbnz	r5, 8002e26 <copy_slash+0x10e>
    int pixel_x = x_base + x + offset;
 8002dca:	3102      	adds	r1, #2
 8002dcc:	4421      	add	r1, r4
    int pixel_y = y_base + y;
 8002dce:	f102 0409 	add.w	r4, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002dd2:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8002dd6:	bf2c      	ite	cs
 8002dd8:	2500      	movcs	r5, #0
 8002dda:	2501      	movcc	r5, #1
 8002ddc:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8002de0:	d200      	bcs.n	8002de4 <copy_slash+0xcc>
 8002de2:	b9cd      	cbnz	r5, 8002e18 <copy_slash+0x100>
    int pixel_y = y_base + y;
 8002de4:	f102 040a 	add.w	r4, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002de8:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8002dec:	d200      	bcs.n	8002df0 <copy_slash+0xd8>
 8002dee:	b965      	cbnz	r5, 8002e0a <copy_slash+0xf2>
    int pixel_y = y_base + y;
 8002df0:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002df2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002df6:	d200      	bcs.n	8002dfa <copy_slash+0xe2>
 8002df8:	b905      	cbnz	r5, 8002dfc <copy_slash+0xe4>
    {
        int x_pos = 5 - (i / 3);
        if (x_pos >= 0 && x_pos < 6)
            fill_pixel(buffer, x, y, x_pos, i, color);
    }
}
 8002dfa:	bd30      	pop	{r4, r5, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002dfc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002e00:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8002e04:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8002e08:	bd30      	pop	{r4, r5, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002e0a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002e0e:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8002e12:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8002e16:	e7eb      	b.n	8002df0 <copy_slash+0xd8>
 8002e18:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002e1c:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8002e20:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8002e24:	e7de      	b.n	8002de4 <copy_slash+0xcc>
 8002e26:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002e2a:	eb0c 1c4e 	add.w	ip, ip, lr, lsl #5
 8002e2e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8002e32:	e7ca      	b.n	8002dca <copy_slash+0xb2>
 8002e34:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002e38:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002e3c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002e40:	e7bd      	b.n	8002dbe <copy_slash+0xa6>
 8002e42:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002e46:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002e4a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002e4e:	e7b0      	b.n	8002db2 <copy_slash+0x9a>
 8002e50:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002e54:	eb0c 1c4e 	add.w	ip, ip, lr, lsl #5
 8002e58:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8002e5c:	e79a      	b.n	8002d94 <copy_slash+0x7c>
 8002e5e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002e62:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002e66:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002e6a:	e78c      	b.n	8002d86 <copy_slash+0x6e>
 8002e6c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002e70:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002e74:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002e78:	e77e      	b.n	8002d78 <copy_slash+0x60>
 8002e7a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002e7e:	eb0c 1c4e 	add.w	ip, ip, lr, lsl #5
 8002e82:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8002e86:	e768      	b.n	8002d5a <copy_slash+0x42>
 8002e88:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002e8c:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002e90:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002e94:	e759      	b.n	8002d4a <copy_slash+0x32>
 8002e96:	ebc2 1e02 	rsb	lr, r2, r2, lsl #4
 8002e9a:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002e9e:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002ea2:	e74a      	b.n	8002d3a <copy_slash+0x22>
 8002ea4:	240001b8 	.word	0x240001b8

08002ea8 <copy_star>:

void copy_star(uint16_t* buffer, int x, int y, uint32_t color)
{
 8002ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8002eac:	4c7d      	ldr	r4, [pc, #500]	@ (80030a4 <copy_star+0x1fc>)
 8002eae:	f101 0e02 	add.w	lr, r1, #2
    int pixel_y = y_base + y;
 8002eb2:	f102 0c04 	add.w	ip, r2, #4
 8002eb6:	1d95      	adds	r5, r2, #6
    int pixel_x = x_base + x + offset;
 8002eb8:	f8d4 a000 	ldr.w	sl, [r4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002ebc:	f240 14df 	movw	r4, #479	@ 0x1df
{
 8002ec0:	b083      	sub	sp, #12
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002ec2:	ea6f 060c 	mvn.w	r6, ip
    int pixel_x = x_base + x + offset;
 8002ec6:	44d6      	add	lr, sl
    int pixel_y = y_base + y;
 8002ec8:	f102 0805 	add.w	r8, r2, #5
 8002ecc:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002ece:	0ff6      	lsrs	r6, r6, #31
 8002ed0:	45a6      	cmp	lr, r4
 8002ed2:	bf8c      	ite	hi
 8002ed4:	2500      	movhi	r5, #0
 8002ed6:	2501      	movls	r5, #1
 8002ed8:	ea15 0906 	ands.w	r9, r5, r6
 8002edc:	d05a      	beq.n	8002f94 <copy_star+0xec>
 8002ede:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8002ee2:	f280 80c1 	bge.w	8003068 <copy_star+0x1c0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002ee6:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
 8002eea:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8002eee:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002ef2:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8002ef6:	f280 80c2 	bge.w	800307e <copy_star+0x1d6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002efa:	ebc8 1208 	rsb	r2, r8, r8, lsl #4
 8002efe:	2401      	movs	r4, #1
 8002f00:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8002f04:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002f08:	9a01      	ldr	r2, [sp, #4]
 8002f0a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002f0e:	da05      	bge.n	8002f1c <copy_star+0x74>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002f10:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002f14:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8002f18:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8002f1c:	f04f 0901 	mov.w	r9, #1
    fill_pixel(buffer, x, y, 2, 4, color);
    fill_pixel(buffer, x, y, 2, 5, color);
    fill_pixel(buffer, x, y, 2, 6, color);
    for (int j = 1; j < 4; j++)
 8002f20:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8002f24:	bfac      	ite	ge
 8002f26:	2200      	movge	r2, #0
 8002f28:	f004 0201 	andlt.w	r2, r4, #1
    int pixel_x = x_base + x + offset;
 8002f2c:	1c4c      	adds	r4, r1, #1
 8002f2e:	eb04 0b0a 	add.w	fp, r4, sl
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002f32:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8002f36:	bf2c      	ite	cs
 8002f38:	2400      	movcs	r4, #0
 8002f3a:	2401      	movcc	r4, #1
 8002f3c:	ea14 0702 	ands.w	r7, r4, r2
 8002f40:	d16e      	bne.n	8003020 <copy_star+0x178>
 8002f42:	4015      	ands	r5, r2
 8002f44:	d15c      	bne.n	8003000 <copy_star+0x158>
    int pixel_x = x_base + x + offset;
 8002f46:	3103      	adds	r1, #3
 8002f48:	4451      	add	r1, sl
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002f4a:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8002f4e:	bf2c      	ite	cs
 8002f50:	2500      	movcs	r5, #0
 8002f52:	2501      	movcc	r5, #1
 8002f54:	402a      	ands	r2, r5
 8002f56:	d15b      	bne.n	8003010 <copy_star+0x168>
 8002f58:	2e00      	cmp	r6, #0
 8002f5a:	d02e      	beq.n	8002fba <copy_star+0x112>
 8002f5c:	b36c      	cbz	r4, 8002fba <copy_star+0x112>
 8002f5e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8002f62:	db68      	blt.n	8003036 <copy_star+0x18e>
 8002f64:	2c00      	cmp	r4, #0
 8002f66:	d038      	beq.n	8002fda <copy_star+0x132>
 8002f68:	f1b9 0f00 	cmp.w	r9, #0
 8002f6c:	d035      	beq.n	8002fda <copy_star+0x132>
 8002f6e:	9a01      	ldr	r2, [sp, #4]
 8002f70:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002f74:	da0b      	bge.n	8002f8e <copy_star+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002f76:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	eb0b 1247 	add.w	r2, fp, r7, lsl #5
 8002f80:	017f      	lsls	r7, r7, #5
 8002f82:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002f86:	b115      	cbz	r5, 8002f8e <copy_star+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002f88:	4439      	add	r1, r7
 8002f8a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
        fill_pixel(buffer, x, y, j, 5, color);
    fill_pixel(buffer, x, y, 1, 4, color);
    fill_pixel(buffer, x, y, 3, 4, color);
    fill_pixel(buffer, x, y, 1, 6, color);
    fill_pixel(buffer, x, y, 3, 6, color);
}
 8002f8e:	b003      	add	sp, #12
 8002f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002f94:	1d57      	adds	r7, r2, #5
 8002f96:	bfb4      	ite	lt
 8002f98:	2400      	movlt	r4, #0
 8002f9a:	2401      	movge	r4, #1
 8002f9c:	b10c      	cbz	r4, 8002fa2 <copy_star+0xfa>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d1a7      	bne.n	8002ef2 <copy_star+0x4a>
 8002fa2:	3206      	adds	r2, #6
 8002fa4:	bfb4      	ite	lt
 8002fa6:	f04f 0900 	movlt.w	r9, #0
 8002faa:	f04f 0901 	movge.w	r9, #1
 8002fae:	f1b9 0f00 	cmp.w	r9, #0
 8002fb2:	d0b5      	beq.n	8002f20 <copy_star+0x78>
 8002fb4:	2d00      	cmp	r5, #0
 8002fb6:	d0b3      	beq.n	8002f20 <copy_star+0x78>
 8002fb8:	e7a6      	b.n	8002f08 <copy_star+0x60>
 8002fba:	402e      	ands	r6, r5
 8002fbc:	d0d2      	beq.n	8002f64 <copy_star+0xbc>
 8002fbe:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8002fc2:	da5a      	bge.n	800307a <copy_star+0x1d2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002fc4:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8002fce:	448c      	add	ip, r1
 8002fd0:	2501      	movs	r5, #1
 8002fd2:	f820 201c 	strh.w	r2, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002fd6:	2c00      	cmp	r4, #0
 8002fd8:	d1c6      	bne.n	8002f68 <copy_star+0xc0>
 8002fda:	9c01      	ldr	r4, [sp, #4]
 8002fdc:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8002fe0:	bfac      	ite	ge
 8002fe2:	2200      	movge	r2, #0
 8002fe4:	f009 0201 	andlt.w	r2, r9, #1
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	d0d0      	beq.n	8002f8e <copy_star+0xe6>
 8002fec:	2d00      	cmp	r5, #0
 8002fee:	d0ce      	beq.n	8002f8e <copy_star+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002ff0:	ebc4 1704 	rsb	r7, r4, r4, lsl #4
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	017f      	lsls	r7, r7, #5
 8002ff8:	4439      	add	r1, r7
 8002ffa:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8002ffe:	e7c6      	b.n	8002f8e <copy_star+0xe6>
 8003000:	462a      	mov	r2, r5
 8003002:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
 8003006:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 800300a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 800300e:	e79a      	b.n	8002f46 <copy_star+0x9e>
 8003010:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8003014:	4615      	mov	r5, r2
 8003016:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 800301a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800301e:	e79b      	b.n	8002f58 <copy_star+0xb0>
 8003020:	463a      	mov	r2, r7
 8003022:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003026:	4015      	ands	r5, r2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003028:	eb0b 1444 	add.w	r4, fp, r4, lsl #5
 800302c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003030:	463c      	mov	r4, r7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003032:	d088      	beq.n	8002f46 <copy_star+0x9e>
 8003034:	e7e4      	b.n	8003000 <copy_star+0x158>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003036:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800303a:	b29a      	uxth	r2, r3
 800303c:	eb0b 164c 	add.w	r6, fp, ip, lsl #5
 8003040:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8003044:	f820 2016 	strh.w	r2, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003048:	2d00      	cmp	r5, #0
 800304a:	d1c0      	bne.n	8002fce <copy_star+0x126>
 800304c:	f1b9 0f00 	cmp.w	r9, #0
 8003050:	d09d      	beq.n	8002f8e <copy_star+0xe6>
 8003052:	9b01      	ldr	r3, [sp, #4]
 8003054:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003058:	da99      	bge.n	8002f8e <copy_star+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800305a:	ebc3 1703 	rsb	r7, r3, r3, lsl #4
 800305e:	eb0b 1347 	add.w	r3, fp, r7, lsl #5
 8003062:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003066:	e792      	b.n	8002f8e <copy_star+0xe6>
    int pixel_x = x_base + x + offset;
 8003068:	1c4a      	adds	r2, r1, #1
 800306a:	eb02 0b0a 	add.w	fp, r2, sl
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800306e:	2200      	movs	r2, #0
 8003070:	45a3      	cmp	fp, r4
 8003072:	bf8c      	ite	hi
 8003074:	2400      	movhi	r4, #0
 8003076:	2401      	movls	r4, #1
 8003078:	e765      	b.n	8002f46 <copy_star+0x9e>
 800307a:	4635      	mov	r5, r6
 800307c:	e7ad      	b.n	8002fda <copy_star+0x132>
    int pixel_x = x_base + x + offset;
 800307e:	1c4a      	adds	r2, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003080:	f240 15df 	movw	r5, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 8003084:	3103      	adds	r1, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003086:	f04f 0901 	mov.w	r9, #1
    int pixel_x = x_base + x + offset;
 800308a:	eb02 0b0a 	add.w	fp, r2, sl
 800308e:	4451      	add	r1, sl
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003090:	45ab      	cmp	fp, r5
 8003092:	bf8c      	ite	hi
 8003094:	2400      	movhi	r4, #0
 8003096:	2401      	movls	r4, #1
 8003098:	42a9      	cmp	r1, r5
 800309a:	bf8c      	ite	hi
 800309c:	2500      	movhi	r5, #0
 800309e:	2501      	movls	r5, #1
 80030a0:	e75a      	b.n	8002f58 <copy_star+0xb0>
 80030a2:	bf00      	nop
 80030a4:	240001b8 	.word	0x240001b8

080030a8 <copy_tilde>:

void copy_tilde(uint16_t* buffer, int x, int y, uint32_t color)
{
 80030a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pixel_y = y_base + y;
 80030ac:	f102 0e04 	add.w	lr, r2, #4
    int pixel_x = x_base + x + offset;
 80030b0:	4c50      	ldr	r4, [pc, #320]	@ (80031f4 <copy_tilde+0x14c>)
    int pixel_y = y_base + y;
 80030b2:	3205      	adds	r2, #5
    int pixel_x = x_base + x + offset;
 80030b4:	1c4d      	adds	r5, r1, #1
 80030b6:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80030b8:	ea6f 060e 	mvn.w	r6, lr
 80030bc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80030c0:	f240 18df 	movw	r8, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 80030c4:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80030c6:	ea4f 76d6 	mov.w	r6, r6, lsr #31
    int pixel_x = x_base + x + offset;
 80030ca:	eb01 0904 	add.w	r9, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80030ce:	bf2c      	ite	cs
 80030d0:	f04f 0c00 	movcs.w	ip, #0
 80030d4:	f04f 0c01 	movcc.w	ip, #1
 80030d8:	43d7      	mvns	r7, r2
 80030da:	4545      	cmp	r5, r8
 80030dc:	bf8c      	ite	hi
 80030de:	f04f 0a00 	movhi.w	sl, #0
 80030e2:	f006 0a01 	andls.w	sl, r6, #1
 80030e6:	45c1      	cmp	r9, r8
 80030e8:	ea4f 77d7 	mov.w	r7, r7, lsr #31
 80030ec:	d802      	bhi.n	80030f4 <copy_tilde+0x4c>
 80030ee:	f1bc 0f00 	cmp.w	ip, #0
 80030f2:	d12f      	bne.n	8003154 <copy_tilde+0xac>
 80030f4:	f1ba 0f00 	cmp.w	sl, #0
 80030f8:	d037      	beq.n	800316a <copy_tilde+0xc2>
 80030fa:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80030fe:	db5e      	blt.n	80031be <copy_tilde+0x116>
    int pixel_x = x_base + x + offset;
 8003100:	1ccd      	adds	r5, r1, #3
 8003102:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003104:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8003108:	d245      	bcs.n	8003196 <copy_tilde+0xee>
 800310a:	2f00      	cmp	r7, #0
 800310c:	d043      	beq.n	8003196 <copy_tilde+0xee>
 800310e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8003112:	da48      	bge.n	80031a6 <copy_tilde+0xfe>
    int pixel_x = x_base + x + offset;
 8003114:	1d0f      	adds	r7, r1, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003116:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 800311a:	fa1f f883 	uxth.w	r8, r3
    int pixel_x = x_base + x + offset;
 800311e:	4427      	add	r7, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003120:	eb05 154c 	add.w	r5, r5, ip, lsl #5
 8003124:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003128:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800312c:	f820 8015 	strh.w	r8, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003130:	d239      	bcs.n	80031a6 <copy_tilde+0xfe>
    int pixel_x = x_base + x + offset;
 8003132:	1d4a      	adds	r2, r1, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003134:	4467      	add	r7, ip
    int pixel_x = x_base + x + offset;
 8003136:	1911      	adds	r1, r2, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003138:	f820 8017 	strh.w	r8, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800313c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8003140:	d206      	bcs.n	8003150 <copy_tilde+0xa8>
 8003142:	b12e      	cbz	r6, 8003150 <copy_tilde+0xa8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003144:	ebce 130e 	rsb	r3, lr, lr, lsl #4
 8003148:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 800314c:	f820 8011 	strh.w	r8, [r0, r1, lsl #1]
    fill_pixel(buffer, x, y, 1, 4, color);
    fill_pixel(buffer, x, y, 2, 4, color);
    fill_pixel(buffer, x, y, 3, 5, color);
    fill_pixel(buffer, x, y, 4, 5, color);
    fill_pixel(buffer, x, y, 5, 4, color);
}
 8003150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003154:	ebc2 1802 	rsb	r8, r2, r2, lsl #4
 8003158:	eb09 1948 	add.w	r9, r9, r8, lsl #5
 800315c:	fa1f f883 	uxth.w	r8, r3
 8003160:	f820 8019 	strh.w	r8, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003164:	f1ba 0f00 	cmp.w	sl, #0
 8003168:	d12b      	bne.n	80031c2 <copy_tilde+0x11a>
    int pixel_x = x_base + x + offset;
 800316a:	1c8d      	adds	r5, r1, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800316c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8003170:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003172:	d2c5      	bcs.n	8003100 <copy_tilde+0x58>
 8003174:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8003178:	d2c2      	bcs.n	8003100 <copy_tilde+0x58>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800317a:	ebce 190e 	rsb	r9, lr, lr, lsl #4
 800317e:	fa1f f883 	uxth.w	r8, r3
 8003182:	ea4f 1949 	mov.w	r9, r9, lsl #5
 8003186:	444d      	add	r5, r9
 8003188:	f820 8015 	strh.w	r8, [r0, r5, lsl #1]
    int pixel_x = x_base + x + offset;
 800318c:	1ccd      	adds	r5, r1, #3
 800318e:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003190:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8003194:	d3b9      	bcc.n	800310a <copy_tilde+0x62>
    int pixel_x = x_base + x + offset;
 8003196:	1d0f      	adds	r7, r1, #4
 8003198:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800319a:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800319e:	d202      	bcs.n	80031a6 <copy_tilde+0xfe>
 80031a0:	f1bc 0f00 	cmp.w	ip, #0
 80031a4:	d11e      	bne.n	80031e4 <copy_tilde+0x13c>
    int pixel_x = x_base + x + offset;
 80031a6:	1d4a      	adds	r2, r1, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80031a8:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80031ac:	eb02 0104 	add.w	r1, r2, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80031b0:	d2ce      	bcs.n	8003150 <copy_tilde+0xa8>
 80031b2:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80031b6:	d2cb      	bcs.n	8003150 <copy_tilde+0xa8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80031b8:	fa1f f883 	uxth.w	r8, r3
 80031bc:	e7c2      	b.n	8003144 <copy_tilde+0x9c>
 80031be:	fa1f f883 	uxth.w	r8, r3
 80031c2:	ebce 190e 	rsb	r9, lr, lr, lsl #4
 80031c6:	eb05 1549 	add.w	r5, r5, r9, lsl #5
 80031ca:	ea4f 1949 	mov.w	r9, r9, lsl #5
 80031ce:	f820 8015 	strh.w	r8, [r0, r5, lsl #1]
    int pixel_x = x_base + x + offset;
 80031d2:	1c8d      	adds	r5, r1, #2
 80031d4:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80031d6:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80031da:	d291      	bcs.n	8003100 <copy_tilde+0x58>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80031dc:	444d      	add	r5, r9
 80031de:	f820 8015 	strh.w	r8, [r0, r5, lsl #1]
 80031e2:	e7d3      	b.n	800318c <copy_tilde+0xe4>
 80031e4:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 80031e8:	fa1f f883 	uxth.w	r8, r3
 80031ec:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80031f0:	e79f      	b.n	8003132 <copy_tilde+0x8a>
 80031f2:	bf00      	nop
 80031f4:	240001b8 	.word	0x240001b8

080031f8 <copy_semicolon>:

void copy_semicolon(uint16_t* buffer, int x, int y, uint32_t color)
{
 80031f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pixel_x = x_base + x + offset;
 80031fc:	4cb9      	ldr	r4, [pc, #740]	@ (80034e4 <copy_semicolon+0x2ec>)
 80031fe:	f101 0e01 	add.w	lr, r1, #1
 8003202:	6824      	ldr	r4, [r4, #0]
 8003204:	44a6      	add	lr, r4
 8003206:	f104 0c02 	add.w	ip, r4, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800320a:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800320e:	448c      	add	ip, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003210:	bf2c      	ite	cs
 8003212:	2600      	movcs	r6, #0
 8003214:	2601      	movcc	r6, #1
 8003216:	1d15      	adds	r5, r2, #4
 8003218:	4667      	mov	r7, ip
 800321a:	d45c      	bmi.n	80032d6 <copy_semicolon+0xde>
 800321c:	2e00      	cmp	r6, #0
 800321e:	d05a      	beq.n	80032d6 <copy_semicolon+0xde>
 8003220:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003224:	da55      	bge.n	80032d2 <copy_semicolon+0xda>
    int pixel_x = x_base + x + offset;
 8003226:	f101 0802 	add.w	r8, r1, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800322a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800322e:	fa1f f983 	uxth.w	r9, r3
    int pixel_x = x_base + x + offset;
 8003232:	44a0      	add	r8, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003234:	eb0e 1a45 	add.w	sl, lr, r5, lsl #5
 8003238:	016d      	lsls	r5, r5, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800323a:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800323e:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003242:	f080 8104 	bcs.w	800344e <copy_semicolon+0x256>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003246:	4445      	add	r5, r8
 8003248:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 800324c:	1d55      	adds	r5, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800324e:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003252:	da3e      	bge.n	80032d2 <copy_semicolon+0xda>
    int pixel_x = x_base + x + offset;
 8003254:	f101 0802 	add.w	r8, r1, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003258:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800325c:	fa1f f983 	uxth.w	r9, r3
    int pixel_x = x_base + x + offset;
 8003260:	44a0      	add	r8, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003262:	eb0e 1a45 	add.w	sl, lr, r5, lsl #5
 8003266:	016d      	lsls	r5, r5, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003268:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800326c:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003270:	f0c0 8096 	bcc.w	80033a0 <copy_semicolon+0x1a8>
    for (int i = 4; i < 6; i++)
 8003274:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
    int pixel_y = y_base + y;
 8003278:	f102 0508 	add.w	r5, r2, #8
 800327c:	f0c0 80f0 	bcc.w	8003460 <copy_semicolon+0x268>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003280:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003284:	da25      	bge.n	80032d2 <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003286:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800328a:	eb0e 1145 	add.w	r1, lr, r5, lsl #5
    int pixel_y = y_base + y;
 800328e:	f102 0509 	add.w	r5, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003292:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003296:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800329a:	da1a      	bge.n	80032d2 <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800329c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80032a0:	eb0e 1145 	add.w	r1, lr, r5, lsl #5
    int pixel_y = y_base + y;
 80032a4:	f102 050a 	add.w	r5, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80032a8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80032ac:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80032b0:	da0f      	bge.n	80032d2 <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80032b2:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    int pixel_y = y_base + y;
 80032b6:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80032b8:	eb0e 1145 	add.w	r1, lr, r5, lsl #5
 80032bc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80032c0:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80032c4:	da05      	bge.n	80032d2 <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80032c6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80032ca:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 80032ce:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    for (int i = 8; i < 12; i++)
    {
        for (int j = 1; j < 3; j++)
            fill_pixel(buffer, x, y, j, i, color);
    }
}
 80032d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80032d6:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80032da:	bf2c      	ite	cs
 80032dc:	f04f 0800 	movcs.w	r8, #0
 80032e0:	f04f 0801 	movcc.w	r8, #1
 80032e4:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80032e8:	d203      	bcs.n	80032f2 <copy_semicolon+0xfa>
 80032ea:	f1b8 0f00 	cmp.w	r8, #0
 80032ee:	f040 80b0 	bne.w	8003452 <copy_semicolon+0x25a>
 80032f2:	1d55      	adds	r5, r2, #5
 80032f4:	d401      	bmi.n	80032fa <copy_semicolon+0x102>
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	d1a9      	bne.n	800324e <copy_semicolon+0x56>
 80032fa:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80032fe:	d202      	bcs.n	8003306 <copy_semicolon+0x10e>
 8003300:	f1b8 0f00 	cmp.w	r8, #0
 8003304:	d150      	bne.n	80033a8 <copy_semicolon+0x1b0>
    for (int i = 4; i < 6; i++)
 8003306:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800330a:	d353      	bcc.n	80033b4 <copy_semicolon+0x1bc>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800330c:	f112 0508 	adds.w	r5, r2, #8
 8003310:	d401      	bmi.n	8003316 <copy_semicolon+0x11e>
 8003312:	2e00      	cmp	r6, #0
 8003314:	d1b4      	bne.n	8003280 <copy_semicolon+0x88>
    int pixel_x = x_base + x + offset;
 8003316:	3102      	adds	r1, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003318:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 800331c:	eb01 0704 	add.w	r7, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003320:	d208      	bcs.n	8003334 <copy_semicolon+0x13c>
 8003322:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8003326:	d205      	bcs.n	8003334 <copy_semicolon+0x13c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003328:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800332c:	eb07 1745 	add.w	r7, r7, r5, lsl #5
 8003330:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003334:	f112 0509 	adds.w	r5, r2, #9
 8003338:	d401      	bmi.n	800333e <copy_semicolon+0x146>
 800333a:	2e00      	cmp	r6, #0
 800333c:	d1ab      	bne.n	8003296 <copy_semicolon+0x9e>
    int pixel_x = x_base + x + offset;
 800333e:	190f      	adds	r7, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003340:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8003344:	d208      	bcs.n	8003358 <copy_semicolon+0x160>
 8003346:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800334a:	d205      	bcs.n	8003358 <copy_semicolon+0x160>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800334c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003350:	eb07 1745 	add.w	r7, r7, r5, lsl #5
 8003354:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003358:	f112 050a 	adds.w	r5, r2, #10
 800335c:	d401      	bmi.n	8003362 <copy_semicolon+0x16a>
 800335e:	2e00      	cmp	r6, #0
 8003360:	d1a4      	bne.n	80032ac <copy_semicolon+0xb4>
    int pixel_x = x_base + x + offset;
 8003362:	190f      	adds	r7, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003364:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8003368:	d208      	bcs.n	800337c <copy_semicolon+0x184>
 800336a:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800336e:	d205      	bcs.n	800337c <copy_semicolon+0x184>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003370:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003374:	eb07 1745 	add.w	r7, r7, r5, lsl #5
 8003378:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800337c:	320b      	adds	r2, #11
 800337e:	d401      	bmi.n	8003384 <copy_semicolon+0x18c>
 8003380:	2e00      	cmp	r6, #0
 8003382:	d19d      	bne.n	80032c0 <copy_semicolon+0xc8>
 8003384:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8003388:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800338a:	d2a2      	bcs.n	80032d2 <copy_semicolon+0xda>
 800338c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8003390:	d29f      	bcs.n	80032d2 <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003392:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003396:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 800339a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800339e:	e798      	b.n	80032d2 <copy_semicolon+0xda>
 80033a0:	44a8      	add	r8, r5
 80033a2:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
 80033a6:	e7ae      	b.n	8003306 <copy_semicolon+0x10e>
 80033a8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80033ac:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 80033b0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80033b4:	f112 0508 	adds.w	r5, r2, #8
 80033b8:	d401      	bmi.n	80033be <copy_semicolon+0x1c6>
 80033ba:	2e00      	cmp	r6, #0
 80033bc:	d150      	bne.n	8003460 <copy_semicolon+0x268>
    int pixel_x = x_base + x + offset;
 80033be:	3102      	adds	r1, #2
 80033c0:	eb01 0804 	add.w	r8, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80033c4:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80033c8:	d208      	bcs.n	80033dc <copy_semicolon+0x1e4>
 80033ca:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80033ce:	d205      	bcs.n	80033dc <copy_semicolon+0x1e4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80033d0:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80033d4:	eb08 1845 	add.w	r8, r8, r5, lsl #5
 80033d8:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80033dc:	f112 0509 	adds.w	r5, r2, #9
 80033e0:	d401      	bmi.n	80033e6 <copy_semicolon+0x1ee>
 80033e2:	2e00      	cmp	r6, #0
 80033e4:	d14d      	bne.n	8003482 <copy_semicolon+0x28a>
    int pixel_x = x_base + x + offset;
 80033e6:	eb01 0804 	add.w	r8, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80033ea:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80033ee:	d208      	bcs.n	8003402 <copy_semicolon+0x20a>
 80033f0:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80033f4:	d205      	bcs.n	8003402 <copy_semicolon+0x20a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80033f6:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80033fa:	eb08 1845 	add.w	r8, r8, r5, lsl #5
 80033fe:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003402:	f112 050a 	adds.w	r5, r2, #10
 8003406:	d401      	bmi.n	800340c <copy_semicolon+0x214>
 8003408:	2e00      	cmp	r6, #0
 800340a:	d14b      	bne.n	80034a4 <copy_semicolon+0x2ac>
    int pixel_x = x_base + x + offset;
 800340c:	eb01 0c04 	add.w	ip, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003410:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8003414:	d208      	bcs.n	8003428 <copy_semicolon+0x230>
 8003416:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800341a:	d205      	bcs.n	8003428 <copy_semicolon+0x230>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800341c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003420:	eb0c 1c45 	add.w	ip, ip, r5, lsl #5
 8003424:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003428:	320b      	adds	r2, #11
 800342a:	d401      	bmi.n	8003430 <copy_semicolon+0x238>
 800342c:	2e00      	cmp	r6, #0
 800342e:	d149      	bne.n	80034c4 <copy_semicolon+0x2cc>
 8003430:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8003434:	eb01 0704 	add.w	r7, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003438:	f4bf af4b 	bcs.w	80032d2 <copy_semicolon+0xda>
 800343c:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8003440:	f4bf af47 	bcs.w	80032d2 <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003444:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003448:	b29b      	uxth	r3, r3
 800344a:	0152      	lsls	r2, r2, #5
 800344c:	e046      	b.n	80034dc <copy_semicolon+0x2e4>
    int pixel_y = y_base + y;
 800344e:	1d55      	adds	r5, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003450:	e6fd      	b.n	800324e <copy_semicolon+0x56>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003452:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003456:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 800345a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800345e:	e748      	b.n	80032f2 <copy_semicolon+0xfa>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003460:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003464:	f6bf af35 	bge.w	80032d2 <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003468:	ebc5 1105 	rsb	r1, r5, r5, lsl #4
    int pixel_y = y_base + y;
 800346c:	f102 0509 	add.w	r5, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003470:	b29c      	uxth	r4, r3
 8003472:	eb0e 1641 	add.w	r6, lr, r1, lsl #5
 8003476:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800347a:	f820 4016 	strh.w	r4, [r0, r6, lsl #1]
 800347e:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003482:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003486:	f6bf af24 	bge.w	80032d2 <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800348a:	ebc5 1105 	rsb	r1, r5, r5, lsl #4
    int pixel_y = y_base + y;
 800348e:	f102 050a 	add.w	r5, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003492:	b29c      	uxth	r4, r3
 8003494:	eb0e 1641 	add.w	r6, lr, r1, lsl #5
 8003498:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800349c:	f820 4016 	strh.w	r4, [r0, r6, lsl #1]
 80034a0:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80034a4:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80034a8:	f6bf af13 	bge.w	80032d2 <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80034ac:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    int pixel_y = y_base + y;
 80034b0:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80034b2:	b299      	uxth	r1, r3
 80034b4:	eb0c 1c45 	add.w	ip, ip, r5, lsl #5
 80034b8:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 80034bc:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
 80034c0:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80034c4:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80034c8:	f6bf af03 	bge.w	80032d2 <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80034cc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	eb0e 1e42 	add.w	lr, lr, r2, lsl #5
 80034d6:	0152      	lsls	r2, r2, #5
 80034d8:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80034dc:	443a      	add	r2, r7
 80034de:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 80034e2:	e6f6      	b.n	80032d2 <copy_semicolon+0xda>
 80034e4:	240001b8 	.word	0x240001b8

080034e8 <copy_colon>:

void copy_colon(uint16_t* buffer, int x, int y, uint32_t color)
{
 80034e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int pixel_x = x_base + x + offset;
 80034ea:	4c5d      	ldr	r4, [pc, #372]	@ (8003660 <copy_colon+0x178>)
 80034ec:	f101 0c02 	add.w	ip, r1, #2
 80034f0:	6824      	ldr	r4, [r4, #0]
 80034f2:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80034f4:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80034f8:	bf2c      	ite	cs
 80034fa:	2500      	movcs	r5, #0
 80034fc:	2501      	movcc	r5, #1
 80034fe:	f112 0e03 	adds.w	lr, r2, #3
 8003502:	d456      	bmi.n	80035b2 <copy_colon+0xca>
 8003504:	2d00      	cmp	r5, #0
 8003506:	d054      	beq.n	80035b2 <copy_colon+0xca>
 8003508:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800350c:	da50      	bge.n	80035b0 <copy_colon+0xc8>
    int pixel_x = x_base + x + offset;
 800350e:	1ccd      	adds	r5, r1, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003510:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8003514:	b29e      	uxth	r6, r3
    int pixel_x = x_base + x + offset;
 8003516:	4425      	add	r5, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003518:	eb0c 174e 	add.w	r7, ip, lr, lsl #5
 800351c:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003520:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003524:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003528:	d274      	bcs.n	8003614 <copy_colon+0x12c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800352a:	44ae      	add	lr, r5
 800352c:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
    int pixel_y = y_base + y;
 8003530:	f102 0e04 	add.w	lr, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003534:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8003538:	da3a      	bge.n	80035b0 <copy_colon+0xc8>
    int pixel_x = x_base + x + offset;
 800353a:	1ccd      	adds	r5, r1, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800353c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8003540:	b29e      	uxth	r6, r3
    int pixel_x = x_base + x + offset;
 8003542:	4425      	add	r5, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003544:	eb0c 174e 	add.w	r7, ip, lr, lsl #5
 8003548:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800354c:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003550:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003554:	d275      	bcs.n	8003642 <copy_colon+0x15a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003556:	4475      	add	r5, lr
    int pixel_y = y_base + y;
 8003558:	f102 0e07 	add.w	lr, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800355c:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003560:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8003564:	da24      	bge.n	80035b0 <copy_colon+0xc8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003566:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    int pixel_x = x_base + x + offset;
 800356a:	3103      	adds	r1, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800356c:	b29e      	uxth	r6, r3
 800356e:	eb0c 154e 	add.w	r5, ip, lr, lsl #5
 8003572:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8003576:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
    int pixel_x = x_base + x + offset;
 800357a:	190d      	adds	r5, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800357c:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8003580:	d26c      	bcs.n	800365c <copy_colon+0x174>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003582:	44ae      	add	lr, r5
    int pixel_y = y_base + y;
 8003584:	3208      	adds	r2, #8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003586:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800358a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800358e:	da0f      	bge.n	80035b0 <copy_colon+0xc8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003590:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    int pixel_x = x_base + x + offset;
 8003594:	4421      	add	r1, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003596:	b29b      	uxth	r3, r3
 8003598:	eb0c 1c42 	add.w	ip, ip, r2, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800359c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80035a0:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80035a4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80035a8:	d202      	bcs.n	80035b0 <copy_colon+0xc8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80035aa:	4411      	add	r1, r2
 80035ac:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for (int i = 7; i < 9; i++)
    {
        for (int j = 2; j < 4; j++)
            fill_pixel(buffer, x, y, j, i, color);
    }
}
 80035b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int pixel_x = x_base + x + offset;
 80035b2:	1ce6      	adds	r6, r4, #3
 80035b4:	440e      	add	r6, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80035b6:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80035ba:	bf2c      	ite	cs
 80035bc:	2700      	movcs	r7, #0
 80035be:	2701      	movcc	r7, #1
 80035c0:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80035c4:	d200      	bcs.n	80035c8 <copy_colon+0xe0>
 80035c6:	bb47      	cbnz	r7, 800361a <copy_colon+0x132>
 80035c8:	f112 0e04 	adds.w	lr, r2, #4
 80035cc:	d401      	bmi.n	80035d2 <copy_colon+0xea>
 80035ce:	2d00      	cmp	r5, #0
 80035d0:	d1b0      	bne.n	8003534 <copy_colon+0x4c>
 80035d2:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80035d6:	d200      	bcs.n	80035da <copy_colon+0xf2>
 80035d8:	bb4f      	cbnz	r7, 800362e <copy_colon+0x146>
 80035da:	f112 0e07 	adds.w	lr, r2, #7
 80035de:	d401      	bmi.n	80035e4 <copy_colon+0xfc>
 80035e0:	2d00      	cmp	r5, #0
 80035e2:	d1bd      	bne.n	8003560 <copy_colon+0x78>
    int pixel_x = x_base + x + offset;
 80035e4:	3103      	adds	r1, #3
 80035e6:	190e      	adds	r6, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80035e8:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80035ec:	d202      	bcs.n	80035f4 <copy_colon+0x10c>
 80035ee:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80035f2:	d32c      	bcc.n	800364e <copy_colon+0x166>
 80035f4:	3208      	adds	r2, #8
 80035f6:	d401      	bmi.n	80035fc <copy_colon+0x114>
 80035f8:	2d00      	cmp	r5, #0
 80035fa:	d1c6      	bne.n	800358a <copy_colon+0xa2>
 80035fc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8003600:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003602:	d2d5      	bcs.n	80035b0 <copy_colon+0xc8>
 8003604:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8003608:	d2d2      	bcs.n	80035b0 <copy_colon+0xc8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800360a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800360e:	b29b      	uxth	r3, r3
 8003610:	0152      	lsls	r2, r2, #5
 8003612:	e7ca      	b.n	80035aa <copy_colon+0xc2>
    int pixel_y = y_base + y;
 8003614:	f102 0e04 	add.w	lr, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003618:	e78c      	b.n	8003534 <copy_colon+0x4c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800361a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800361e:	eb06 1e4e 	add.w	lr, r6, lr, lsl #5
 8003622:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003626:	f112 0e04 	adds.w	lr, r2, #4
 800362a:	d5d0      	bpl.n	80035ce <copy_colon+0xe6>
 800362c:	e7d1      	b.n	80035d2 <copy_colon+0xea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800362e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8003632:	eb06 164e 	add.w	r6, r6, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003636:	f112 0e07 	adds.w	lr, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800363a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800363e:	d5cf      	bpl.n	80035e0 <copy_colon+0xf8>
 8003640:	e7d0      	b.n	80035e4 <copy_colon+0xfc>
    int pixel_y = y_base + y;
 8003642:	f102 0e07 	add.w	lr, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003646:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800364a:	db8c      	blt.n	8003566 <copy_colon+0x7e>
 800364c:	e7b0      	b.n	80035b0 <copy_colon+0xc8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800364e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8003652:	eb06 164e 	add.w	r6, r6, lr, lsl #5
 8003656:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800365a:	e7cb      	b.n	80035f4 <copy_colon+0x10c>
    int pixel_y = y_base + y;
 800365c:	3208      	adds	r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800365e:	e794      	b.n	800358a <copy_colon+0xa2>
 8003660:	240001b8 	.word	0x240001b8

08003664 <copy_A>:

//================================ LETTER -> BUFFER =====================================================

void copy_A(uint16_t* buffer, int x, int y, uint32_t color)
{
 8003664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8003668:	4c95      	ldr	r4, [pc, #596]	@ (80038c0 <copy_A+0x25c>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800366a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800366e:	b099      	sub	sp, #100	@ 0x64
    int pixel_x = x_base + x + offset;
 8003670:	6825      	ldr	r5, [r4, #0]
 8003672:	f101 0401 	add.w	r4, r1, #1
 8003676:	eb04 0705 	add.w	r7, r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800367a:	bf2c      	ite	cs
 800367c:	2400      	movcs	r4, #0
 800367e:	2401      	movcc	r4, #1
 8003680:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8003684:	9711      	str	r7, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003686:	bf2c      	ite	cs
 8003688:	2600      	movcs	r6, #0
 800368a:	2601      	movcc	r6, #1
 800368c:	9604      	str	r6, [sp, #16]
 800368e:	b114      	cbz	r4, 8003696 <copy_A+0x32>
 8003690:	2e00      	cmp	r6, #0
 8003692:	f040 815a 	bne.w	800394a <copy_A+0x2e6>
    int pixel_x = x_base + x + offset;
 8003696:	1c8e      	adds	r6, r1, #2
 8003698:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800369a:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800369e:	9712      	str	r7, [sp, #72]	@ 0x48
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036a0:	bf2c      	ite	cs
 80036a2:	2600      	movcs	r6, #0
 80036a4:	2601      	movcc	r6, #1
 80036a6:	9605      	str	r6, [sp, #20]
 80036a8:	b114      	cbz	r4, 80036b0 <copy_A+0x4c>
 80036aa:	2e00      	cmp	r6, #0
 80036ac:	f040 8146 	bne.w	800393c <copy_A+0x2d8>
    int pixel_x = x_base + x + offset;
 80036b0:	1cce      	adds	r6, r1, #3
 80036b2:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036b4:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80036b8:	9713      	str	r7, [sp, #76]	@ 0x4c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036ba:	bf2c      	ite	cs
 80036bc:	2600      	movcs	r6, #0
 80036be:	2601      	movcc	r6, #1
 80036c0:	9606      	str	r6, [sp, #24]
 80036c2:	b114      	cbz	r4, 80036ca <copy_A+0x66>
 80036c4:	2e00      	cmp	r6, #0
 80036c6:	f040 8132 	bne.w	800392e <copy_A+0x2ca>
    int pixel_x = x_base + x + offset;
 80036ca:	1d0e      	adds	r6, r1, #4
 80036cc:	442e      	add	r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036ce:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80036d2:	960f      	str	r6, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036d4:	bf2c      	ite	cs
 80036d6:	2700      	movcs	r7, #0
 80036d8:	2701      	movcc	r7, #1
 80036da:	9701      	str	r7, [sp, #4]
 80036dc:	b117      	cbz	r7, 80036e4 <copy_A+0x80>
 80036de:	2c00      	cmp	r4, #0
 80036e0:	f040 811e 	bne.w	8003920 <copy_A+0x2bc>
    int pixel_x = x_base + x + offset;
 80036e4:	eb01 0e05 	add.w	lr, r1, r5
    int pixel_y = y_base + y;
 80036e8:	1c56      	adds	r6, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036ea:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
    int pixel_y = y_base + y;
 80036ee:	9610      	str	r6, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036f0:	bf2c      	ite	cs
 80036f2:	2400      	movcs	r4, #0
 80036f4:	2401      	movcc	r4, #1
 80036f6:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 80036fa:	bf2c      	ite	cs
 80036fc:	2700      	movcs	r7, #0
 80036fe:	2701      	movcc	r7, #1
 8003700:	9703      	str	r7, [sp, #12]
 8003702:	b114      	cbz	r4, 800370a <copy_A+0xa6>
 8003704:	2f00      	cmp	r7, #0
 8003706:	f040 8127 	bne.w	8003958 <copy_A+0x2f4>
    int pixel_y = y_base + y;
 800370a:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800370c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8003710:	9714      	str	r7, [sp, #80]	@ 0x50
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003712:	bf2c      	ite	cs
 8003714:	2600      	movcs	r6, #0
 8003716:	2601      	movcc	r6, #1
 8003718:	9607      	str	r6, [sp, #28]
 800371a:	b134      	cbz	r4, 800372a <copy_A+0xc6>
 800371c:	b12e      	cbz	r6, 800372a <copy_A+0xc6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800371e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8003722:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003726:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 800372a:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800372c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8003730:	9715      	str	r7, [sp, #84]	@ 0x54
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003732:	bf2c      	ite	cs
 8003734:	2600      	movcs	r6, #0
 8003736:	2601      	movcc	r6, #1
 8003738:	9608      	str	r6, [sp, #32]
 800373a:	b134      	cbz	r4, 800374a <copy_A+0xe6>
 800373c:	b12e      	cbz	r6, 800374a <copy_A+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800373e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8003742:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003746:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 800374a:	1d17      	adds	r7, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800374c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8003750:	9716      	str	r7, [sp, #88]	@ 0x58
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003752:	bf2c      	ite	cs
 8003754:	2600      	movcs	r6, #0
 8003756:	2601      	movcc	r6, #1
 8003758:	9609      	str	r6, [sp, #36]	@ 0x24
 800375a:	b134      	cbz	r4, 800376a <copy_A+0x106>
 800375c:	b12e      	cbz	r6, 800376a <copy_A+0x106>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800375e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8003762:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003766:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 800376a:	1d57      	adds	r7, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800376c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8003770:	9717      	str	r7, [sp, #92]	@ 0x5c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003772:	bf2c      	ite	cs
 8003774:	2600      	movcs	r6, #0
 8003776:	2601      	movcc	r6, #1
 8003778:	960a      	str	r6, [sp, #40]	@ 0x28
 800377a:	b134      	cbz	r4, 800378a <copy_A+0x126>
 800377c:	b12e      	cbz	r6, 800378a <copy_A+0x126>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800377e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8003782:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003786:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 800378a:	f102 0c06 	add.w	ip, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800378e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8003792:	bf2c      	ite	cs
 8003794:	2600      	movcs	r6, #0
 8003796:	2601      	movcc	r6, #1
 8003798:	9602      	str	r6, [sp, #8]
 800379a:	b134      	cbz	r4, 80037aa <copy_A+0x146>
 800379c:	b12e      	cbz	r6, 80037aa <copy_A+0x146>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800379e:	ebcc 170c 	rsb	r7, ip, ip, lsl #4
 80037a2:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 80037a6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 80037aa:	f102 0a07 	add.w	sl, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80037ae:	ea4f 160c 	mov.w	r6, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037b2:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80037b6:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037b8:	bf2c      	ite	cs
 80037ba:	2600      	movcs	r6, #0
 80037bc:	2601      	movcc	r6, #1
 80037be:	960b      	str	r6, [sp, #44]	@ 0x2c
 80037c0:	b134      	cbz	r4, 80037d0 <copy_A+0x16c>
 80037c2:	b12e      	cbz	r6, 80037d0 <copy_A+0x16c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80037c4:	ebca 170a 	rsb	r7, sl, sl, lsl #4
 80037c8:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 80037cc:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 80037d0:	f102 0908 	add.w	r9, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037d4:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 80037d8:	bf2c      	ite	cs
 80037da:	2600      	movcs	r6, #0
 80037dc:	2601      	movcc	r6, #1
 80037de:	960c      	str	r6, [sp, #48]	@ 0x30
 80037e0:	b134      	cbz	r4, 80037f0 <copy_A+0x18c>
 80037e2:	b12e      	cbz	r6, 80037f0 <copy_A+0x18c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80037e4:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 80037e8:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 80037ec:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 80037f0:	f102 0809 	add.w	r8, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037f4:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80037f8:	bf2c      	ite	cs
 80037fa:	2600      	movcs	r6, #0
 80037fc:	2601      	movcc	r6, #1
 80037fe:	960d      	str	r6, [sp, #52]	@ 0x34
 8003800:	b134      	cbz	r4, 8003810 <copy_A+0x1ac>
 8003802:	b12e      	cbz	r6, 8003810 <copy_A+0x1ac>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003804:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 8003808:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 800380c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 8003810:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003814:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8003818:	bf2c      	ite	cs
 800381a:	2600      	movcs	r6, #0
 800381c:	2601      	movcc	r6, #1
 800381e:	960e      	str	r6, [sp, #56]	@ 0x38
 8003820:	b134      	cbz	r4, 8003830 <copy_A+0x1cc>
 8003822:	b12e      	cbz	r6, 8003830 <copy_A+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003824:	ebc7 1b07 	rsb	fp, r7, r7, lsl #4
 8003828:	eb0e 1b4b 	add.w	fp, lr, fp, lsl #5
 800382c:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    int pixel_y = y_base + y;
 8003830:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003832:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8003836:	bf2c      	ite	cs
 8003838:	f04f 0b00 	movcs.w	fp, #0
 800383c:	f04f 0b01 	movcc.w	fp, #1
 8003840:	f1bb 0f00 	cmp.w	fp, #0
 8003844:	d006      	beq.n	8003854 <copy_A+0x1f0>
 8003846:	b12c      	cbz	r4, 8003854 <copy_A+0x1f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003848:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800384c:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 8003850:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    int pixel_x = x_base + x + offset;
 8003854:	3105      	adds	r1, #5
 8003856:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003858:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800385c:	bf2c      	ite	cs
 800385e:	2400      	movcs	r4, #0
 8003860:	2401      	movcc	r4, #1
 8003862:	2c00      	cmp	r4, #0
 8003864:	d037      	beq.n	80038d6 <copy_A+0x272>
 8003866:	9d03      	ldr	r5, [sp, #12]
 8003868:	2d00      	cmp	r5, #0
 800386a:	f040 80d3 	bne.w	8003a14 <copy_A+0x3b0>
 800386e:	2c00      	cmp	r4, #0
 8003870:	d031      	beq.n	80038d6 <copy_A+0x272>
 8003872:	9d07      	ldr	r5, [sp, #28]
 8003874:	2d00      	cmp	r5, #0
 8003876:	f040 80c5 	bne.w	8003a04 <copy_A+0x3a0>
 800387a:	2c00      	cmp	r4, #0
 800387c:	d02b      	beq.n	80038d6 <copy_A+0x272>
 800387e:	9d08      	ldr	r5, [sp, #32]
 8003880:	2d00      	cmp	r5, #0
 8003882:	f040 80b0 	bne.w	80039e6 <copy_A+0x382>
 8003886:	b334      	cbz	r4, 80038d6 <copy_A+0x272>
 8003888:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800388a:	2d00      	cmp	r5, #0
 800388c:	f040 80a3 	bne.w	80039d6 <copy_A+0x372>
 8003890:	b30c      	cbz	r4, 80038d6 <copy_A+0x272>
 8003892:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8003894:	2d00      	cmp	r5, #0
 8003896:	f040 8096 	bne.w	80039c6 <copy_A+0x362>
 800389a:	b1e4      	cbz	r4, 80038d6 <copy_A+0x272>
 800389c:	9d02      	ldr	r5, [sp, #8]
 800389e:	2d00      	cmp	r5, #0
 80038a0:	f040 8089 	bne.w	80039b6 <copy_A+0x352>
 80038a4:	b1bc      	cbz	r4, 80038d6 <copy_A+0x272>
 80038a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80038a8:	2d00      	cmp	r5, #0
 80038aa:	d17d      	bne.n	80039a8 <copy_A+0x344>
 80038ac:	b19c      	cbz	r4, 80038d6 <copy_A+0x272>
 80038ae:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80038b0:	2d00      	cmp	r5, #0
 80038b2:	d166      	bne.n	8003982 <copy_A+0x31e>
 80038b4:	b17c      	cbz	r4, 80038d6 <copy_A+0x272>
 80038b6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80038b8:	2d00      	cmp	r5, #0
 80038ba:	d15b      	bne.n	8003974 <copy_A+0x310>
 80038bc:	e002      	b.n	80038c4 <copy_A+0x260>
 80038be:	bf00      	nop
 80038c0:	240001b8 	.word	0x240001b8
 80038c4:	b13c      	cbz	r4, 80038d6 <copy_A+0x272>
 80038c6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80038c8:	b12d      	cbz	r5, 80038d6 <copy_A+0x272>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80038ca:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80038ce:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 80038d2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80038d6:	f1bb 0f00 	cmp.w	fp, #0
 80038da:	d002      	beq.n	80038e2 <copy_A+0x27e>
 80038dc:	2c00      	cmp	r4, #0
 80038de:	f040 808a 	bne.w	80039f6 <copy_A+0x392>
 80038e2:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80038e6:	9a00      	ldr	r2, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80038e8:	bf28      	it	cs
 80038ea:	2100      	movcs	r1, #0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80038ec:	eba2 020c 	sub.w	r2, r2, ip
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80038f0:	bf38      	it	cc
 80038f2:	2101      	movcc	r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80038f4:	0152      	lsls	r2, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80038f6:	b169      	cbz	r1, 8003914 <copy_A+0x2b0>
 80038f8:	9c04      	ldr	r4, [sp, #16]
 80038fa:	2c00      	cmp	r4, #0
 80038fc:	d14d      	bne.n	800399a <copy_A+0x336>
 80038fe:	b149      	cbz	r1, 8003914 <copy_A+0x2b0>
 8003900:	9c05      	ldr	r4, [sp, #20]
 8003902:	2c00      	cmp	r4, #0
 8003904:	d144      	bne.n	8003990 <copy_A+0x32c>
 8003906:	b129      	cbz	r1, 8003914 <copy_A+0x2b0>
 8003908:	9c06      	ldr	r4, [sp, #24]
 800390a:	b11c      	cbz	r4, 8003914 <copy_A+0x2b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800390c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800390e:	4414      	add	r4, r2
 8003910:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003914:	9c01      	ldr	r4, [sp, #4]
 8003916:	b104      	cbz	r4, 800391a <copy_A+0x2b6>
 8003918:	bb29      	cbnz	r1, 8003966 <copy_A+0x302>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 12; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 6, color);
}
 800391a:	b019      	add	sp, #100	@ 0x64
 800391c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003920:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8003924:	eb06 1444 	add.w	r4, r6, r4, lsl #5
 8003928:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800392c:	e6da      	b.n	80036e4 <copy_A+0x80>
 800392e:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8003932:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8003936:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800393a:	e6c6      	b.n	80036ca <copy_A+0x66>
 800393c:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8003940:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8003944:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8003948:	e6b2      	b.n	80036b0 <copy_A+0x4c>
 800394a:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800394e:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8003952:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8003956:	e69e      	b.n	8003696 <copy_A+0x32>
 8003958:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 800395c:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003960:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8003964:	e6d1      	b.n	800370a <copy_A+0xa6>
 8003966:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003968:	4411      	add	r1, r2
 800396a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 800396e:	b019      	add	sp, #100	@ 0x64
 8003970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003974:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8003978:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 800397c:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8003980:	e7a0      	b.n	80038c4 <copy_A+0x260>
 8003982:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8003986:	eb01 1949 	add.w	r9, r1, r9, lsl #5
 800398a:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800398e:	e791      	b.n	80038b4 <copy_A+0x250>
 8003990:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8003992:	4414      	add	r4, r2
 8003994:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003998:	e7b5      	b.n	8003906 <copy_A+0x2a2>
 800399a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800399c:	4414      	add	r4, r2
 800399e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80039a2:	2900      	cmp	r1, #0
 80039a4:	d1ac      	bne.n	8003900 <copy_A+0x29c>
 80039a6:	e7b5      	b.n	8003914 <copy_A+0x2b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80039a8:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80039ac:	eb01 1a4a 	add.w	sl, r1, sl, lsl #5
 80039b0:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80039b4:	e77a      	b.n	80038ac <copy_A+0x248>
 80039b6:	9d00      	ldr	r5, [sp, #0]
 80039b8:	eba5 050c 	sub.w	r5, r5, ip
 80039bc:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80039c0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80039c4:	e76e      	b.n	80038a4 <copy_A+0x240>
 80039c6:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80039c8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80039cc:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80039d0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80039d4:	e761      	b.n	800389a <copy_A+0x236>
 80039d6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80039d8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80039dc:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80039e0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80039e4:	e754      	b.n	8003890 <copy_A+0x22c>
 80039e6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80039e8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80039ec:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80039f0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80039f4:	e747      	b.n	8003886 <copy_A+0x222>
 80039f6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80039fa:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 80039fe:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8003a02:	e76e      	b.n	80038e2 <copy_A+0x27e>
 8003a04:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8003a06:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003a0a:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8003a0e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8003a12:	e732      	b.n	800387a <copy_A+0x216>
 8003a14:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8003a16:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 8003a1a:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8003a1e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003a22:	2c00      	cmp	r4, #0
 8003a24:	f47f af25 	bne.w	8003872 <copy_A+0x20e>
 8003a28:	e755      	b.n	80038d6 <copy_A+0x272>
 8003a2a:	bf00      	nop

08003a2c <copy_B>:

void copy_B(uint16_t* buffer, int x, int y, uint32_t color)
{
 8003a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8003a30:	4c92      	ldr	r4, [pc, #584]	@ (8003c7c <copy_B+0x250>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003a32:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8003a36:	b097      	sub	sp, #92	@ 0x5c
    int pixel_x = x_base + x + offset;
 8003a38:	f8d4 8000 	ldr.w	r8, [r4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003a3c:	bf2c      	ite	cs
 8003a3e:	2600      	movcs	r6, #0
 8003a40:	2601      	movcc	r6, #1
{
 8003a42:	9101      	str	r1, [sp, #4]
    int pixel_x = x_base + x + offset;
 8003a44:	eb01 0508 	add.w	r5, r1, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003a48:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8003a4c:	bf2c      	ite	cs
 8003a4e:	2400      	movcs	r4, #0
 8003a50:	2401      	movcc	r4, #1
 8003a52:	b114      	cbz	r4, 8003a5a <copy_B+0x2e>
 8003a54:	2e00      	cmp	r6, #0
 8003a56:	f040 8177 	bne.w	8003d48 <copy_B+0x31c>
    int pixel_y = y_base + y;
 8003a5a:	1c51      	adds	r1, r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003a5c:	ea4f 1e02 	mov.w	lr, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003a60:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8003a64:	910c      	str	r1, [sp, #48]	@ 0x30
 8003a66:	bf2c      	ite	cs
 8003a68:	2700      	movcs	r7, #0
 8003a6a:	2701      	movcc	r7, #1
 8003a6c:	9703      	str	r7, [sp, #12]
 8003a6e:	b114      	cbz	r4, 8003a76 <copy_B+0x4a>
 8003a70:	2f00      	cmp	r7, #0
 8003a72:	f040 8161 	bne.w	8003d38 <copy_B+0x30c>
    int pixel_y = y_base + y;
 8003a76:	1c91      	adds	r1, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003a78:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003a7c:	9110      	str	r1, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003a7e:	bf2c      	ite	cs
 8003a80:	2700      	movcs	r7, #0
 8003a82:	2701      	movcc	r7, #1
 8003a84:	9704      	str	r7, [sp, #16]
 8003a86:	b114      	cbz	r4, 8003a8e <copy_B+0x62>
 8003a88:	2f00      	cmp	r7, #0
 8003a8a:	f040 814e 	bne.w	8003d2a <copy_B+0x2fe>
    int pixel_y = y_base + y;
 8003a8e:	1cd1      	adds	r1, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003a90:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003a94:	9111      	str	r1, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003a96:	bf2c      	ite	cs
 8003a98:	2700      	movcs	r7, #0
 8003a9a:	2701      	movcc	r7, #1
 8003a9c:	9705      	str	r7, [sp, #20]
 8003a9e:	b114      	cbz	r4, 8003aa6 <copy_B+0x7a>
 8003aa0:	2f00      	cmp	r7, #0
 8003aa2:	f040 813b 	bne.w	8003d1c <copy_B+0x2f0>
    int pixel_y = y_base + y;
 8003aa6:	1d11      	adds	r1, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003aa8:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003aac:	9112      	str	r1, [sp, #72]	@ 0x48
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003aae:	bf2c      	ite	cs
 8003ab0:	2700      	movcs	r7, #0
 8003ab2:	2701      	movcc	r7, #1
 8003ab4:	9706      	str	r7, [sp, #24]
 8003ab6:	b114      	cbz	r4, 8003abe <copy_B+0x92>
 8003ab8:	2f00      	cmp	r7, #0
 8003aba:	f040 8128 	bne.w	8003d0e <copy_B+0x2e2>
    int pixel_y = y_base + y;
 8003abe:	f102 0a05 	add.w	sl, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ac2:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8003ac6:	d202      	bcs.n	8003ace <copy_B+0xa2>
 8003ac8:	2c00      	cmp	r4, #0
 8003aca:	f040 8119 	bne.w	8003d00 <copy_B+0x2d4>
    int pixel_y = y_base + y;
 8003ace:	1d91      	adds	r1, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ad0:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003ad4:	9113      	str	r1, [sp, #76]	@ 0x4c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ad6:	bf2c      	ite	cs
 8003ad8:	2700      	movcs	r7, #0
 8003ada:	2701      	movcc	r7, #1
 8003adc:	9707      	str	r7, [sp, #28]
 8003ade:	b114      	cbz	r4, 8003ae6 <copy_B+0xba>
 8003ae0:	2f00      	cmp	r7, #0
 8003ae2:	f040 8106 	bne.w	8003cf2 <copy_B+0x2c6>
    int pixel_y = y_base + y;
 8003ae6:	1dd1      	adds	r1, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ae8:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003aec:	9114      	str	r1, [sp, #80]	@ 0x50
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003aee:	bf2c      	ite	cs
 8003af0:	2700      	movcs	r7, #0
 8003af2:	2701      	movcc	r7, #1
 8003af4:	9708      	str	r7, [sp, #32]
 8003af6:	b114      	cbz	r4, 8003afe <copy_B+0xd2>
 8003af8:	2f00      	cmp	r7, #0
 8003afa:	f040 80f3 	bne.w	8003ce4 <copy_B+0x2b8>
    int pixel_y = y_base + y;
 8003afe:	f102 0908 	add.w	r9, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b02:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8003b06:	bf2c      	ite	cs
 8003b08:	2100      	movcs	r1, #0
 8003b0a:	2101      	movcc	r1, #1
 8003b0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b0e:	b114      	cbz	r4, 8003b16 <copy_B+0xea>
 8003b10:	2900      	cmp	r1, #0
 8003b12:	f040 80e0 	bne.w	8003cd6 <copy_B+0x2aa>
    int pixel_y = y_base + y;
 8003b16:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b1a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003b1e:	9115      	str	r1, [sp, #84]	@ 0x54
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b20:	bf2c      	ite	cs
 8003b22:	2700      	movcs	r7, #0
 8003b24:	2701      	movcc	r7, #1
 8003b26:	970a      	str	r7, [sp, #40]	@ 0x28
 8003b28:	b114      	cbz	r4, 8003b30 <copy_B+0x104>
 8003b2a:	2f00      	cmp	r7, #0
 8003b2c:	f040 80cc 	bne.w	8003cc8 <copy_B+0x29c>
    int pixel_y = y_base + y;
 8003b30:	f102 0b0a 	add.w	fp, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b34:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003b38:	bf2c      	ite	cs
 8003b3a:	2100      	movcs	r1, #0
 8003b3c:	2101      	movcc	r1, #1
 8003b3e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003b40:	b114      	cbz	r4, 8003b48 <copy_B+0x11c>
 8003b42:	2900      	cmp	r1, #0
 8003b44:	f040 80b9 	bne.w	8003cba <copy_B+0x28e>
    int pixel_y = y_base + y;
 8003b48:	f102 0c0b 	add.w	ip, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b4c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8003b50:	d202      	bcs.n	8003b58 <copy_B+0x12c>
 8003b52:	2c00      	cmp	r4, #0
 8003b54:	f040 80aa 	bne.w	8003cac <copy_B+0x280>
    int pixel_x = x_base + x + offset;
 8003b58:	9901      	ldr	r1, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003b5a:	ebae 0202 	sub.w	r2, lr, r2
    int pixel_x = x_base + x + offset;
 8003b5e:	1c4c      	adds	r4, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003b60:	0152      	lsls	r2, r2, #5
    int pixel_x = x_base + x + offset;
 8003b62:	eb04 0108 	add.w	r1, r4, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b66:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8003b6a:	910d      	str	r1, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b6c:	bf2c      	ite	cs
 8003b6e:	2700      	movcs	r7, #0
 8003b70:	2701      	movcc	r7, #1
 8003b72:	b117      	cbz	r7, 8003b7a <copy_B+0x14e>
 8003b74:	2e00      	cmp	r6, #0
 8003b76:	f040 80ee 	bne.w	8003d56 <copy_B+0x32a>
    int pixel_x = x_base + x + offset;
 8003b7a:	9901      	ldr	r1, [sp, #4]
 8003b7c:	1c8c      	adds	r4, r1, #2
 8003b7e:	eb04 0108 	add.w	r1, r4, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b82:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8003b86:	910e      	str	r1, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b88:	bf2c      	ite	cs
 8003b8a:	2400      	movcs	r4, #0
 8003b8c:	2401      	movcc	r4, #1
 8003b8e:	9402      	str	r4, [sp, #8]
 8003b90:	b114      	cbz	r4, 8003b98 <copy_B+0x16c>
 8003b92:	2e00      	cmp	r6, #0
 8003b94:	f040 80e3 	bne.w	8003d5e <copy_B+0x332>
    int pixel_x = x_base + x + offset;
 8003b98:	9901      	ldr	r1, [sp, #4]
 8003b9a:	1ccc      	adds	r4, r1, #3
 8003b9c:	eb04 0108 	add.w	r1, r4, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ba0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8003ba4:	910f      	str	r1, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ba6:	bf2c      	ite	cs
 8003ba8:	2400      	movcs	r4, #0
 8003baa:	2401      	movcc	r4, #1
 8003bac:	b114      	cbz	r4, 8003bb4 <copy_B+0x188>
 8003bae:	2e00      	cmp	r6, #0
 8003bb0:	f040 80de 	bne.w	8003d70 <copy_B+0x344>
    int pixel_x = x_base + x + offset;
 8003bb4:	9901      	ldr	r1, [sp, #4]
 8003bb6:	f101 0e04 	add.w	lr, r1, #4
 8003bba:	44c6      	add	lr, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003bbc:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8003bc0:	bf2c      	ite	cs
 8003bc2:	2500      	movcs	r5, #0
 8003bc4:	2501      	movcc	r5, #1
 8003bc6:	b115      	cbz	r5, 8003bce <copy_B+0x1a2>
 8003bc8:	2e00      	cmp	r6, #0
 8003bca:	f040 80cc 	bne.w	8003d66 <copy_B+0x33a>
 8003bce:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003bd2:	f502 6a16 	add.w	sl, r2, #2400	@ 0x960
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003bd6:	bf2c      	ite	cs
 8003bd8:	2600      	movcs	r6, #0
 8003bda:	2601      	movcc	r6, #1
 8003bdc:	b16e      	cbz	r6, 8003bfa <copy_B+0x1ce>
 8003bde:	2f00      	cmp	r7, #0
 8003be0:	f040 80ca 	bne.w	8003d78 <copy_B+0x34c>
 8003be4:	b14e      	cbz	r6, 8003bfa <copy_B+0x1ce>
 8003be6:	9902      	ldr	r1, [sp, #8]
 8003be8:	2900      	cmp	r1, #0
 8003bea:	f040 8121 	bne.w	8003e30 <copy_B+0x404>
 8003bee:	b126      	cbz	r6, 8003bfa <copy_B+0x1ce>
 8003bf0:	b11c      	cbz	r4, 8003bfa <copy_B+0x1ce>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003bf2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003bf4:	4451      	add	r1, sl
 8003bf6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003bfa:	b115      	cbz	r5, 8003c02 <copy_B+0x1d6>
 8003bfc:	2e00      	cmp	r6, #0
 8003bfe:	f040 8104 	bne.w	8003e0a <copy_B+0x3de>
 8003c02:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003c06:	f502 52a5 	add.w	r2, r2, #5280	@ 0x14a0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c0a:	bf2c      	ite	cs
 8003c0c:	2600      	movcs	r6, #0
 8003c0e:	2601      	movcc	r6, #1
 8003c10:	b16e      	cbz	r6, 8003c2e <copy_B+0x202>
 8003c12:	2f00      	cmp	r7, #0
 8003c14:	f040 80f1 	bne.w	8003dfa <copy_B+0x3ce>
 8003c18:	b14e      	cbz	r6, 8003c2e <copy_B+0x202>
 8003c1a:	9902      	ldr	r1, [sp, #8]
 8003c1c:	2900      	cmp	r1, #0
 8003c1e:	f040 80df 	bne.w	8003de0 <copy_B+0x3b4>
 8003c22:	b126      	cbz	r6, 8003c2e <copy_B+0x202>
 8003c24:	b11c      	cbz	r4, 8003c2e <copy_B+0x202>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003c26:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8003c28:	4414      	add	r4, r2
 8003c2a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c2e:	b115      	cbz	r5, 8003c36 <copy_B+0x20a>
 8003c30:	2e00      	cmp	r6, #0
 8003c32:	f040 80f9 	bne.w	8003e28 <copy_B+0x3fc>
    int pixel_x = x_base + x + offset;
 8003c36:	9901      	ldr	r1, [sp, #4]
 8003c38:	3105      	adds	r1, #5
 8003c3a:	4441      	add	r1, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c3c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8003c40:	bf2c      	ite	cs
 8003c42:	2200      	movcs	r2, #0
 8003c44:	2201      	movcc	r2, #1
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	d02d      	beq.n	8003ca6 <copy_B+0x27a>
 8003c4a:	9c03      	ldr	r4, [sp, #12]
 8003c4c:	2c00      	cmp	r4, #0
 8003c4e:	f040 80e0 	bne.w	8003e12 <copy_B+0x3e6>
 8003c52:	b342      	cbz	r2, 8003ca6 <copy_B+0x27a>
 8003c54:	9c04      	ldr	r4, [sp, #16]
 8003c56:	2c00      	cmp	r4, #0
 8003c58:	f040 80aa 	bne.w	8003db0 <copy_B+0x384>
 8003c5c:	b31a      	cbz	r2, 8003ca6 <copy_B+0x27a>
 8003c5e:	9c05      	ldr	r4, [sp, #20]
 8003c60:	2c00      	cmp	r4, #0
 8003c62:	f040 80c2 	bne.w	8003dea <copy_B+0x3be>
 8003c66:	b1f2      	cbz	r2, 8003ca6 <copy_B+0x27a>
 8003c68:	9c06      	ldr	r4, [sp, #24]
 8003c6a:	2c00      	cmp	r4, #0
 8003c6c:	f040 80b0 	bne.w	8003dd0 <copy_B+0x3a4>
 8003c70:	b1ca      	cbz	r2, 8003ca6 <copy_B+0x27a>
 8003c72:	9c07      	ldr	r4, [sp, #28]
 8003c74:	2c00      	cmp	r4, #0
 8003c76:	f040 80a3 	bne.w	8003dc0 <copy_B+0x394>
 8003c7a:	e001      	b.n	8003c80 <copy_B+0x254>
 8003c7c:	240001b8 	.word	0x240001b8
 8003c80:	b18a      	cbz	r2, 8003ca6 <copy_B+0x27a>
 8003c82:	9c08      	ldr	r4, [sp, #32]
 8003c84:	2c00      	cmp	r4, #0
 8003c86:	f040 8083 	bne.w	8003d90 <copy_B+0x364>
 8003c8a:	b162      	cbz	r2, 8003ca6 <copy_B+0x27a>
 8003c8c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8003c8e:	2c00      	cmp	r4, #0
 8003c90:	d177      	bne.n	8003d82 <copy_B+0x356>
 8003c92:	b142      	cbz	r2, 8003ca6 <copy_B+0x27a>
 8003c94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003c96:	2c00      	cmp	r4, #0
 8003c98:	f040 8082 	bne.w	8003da0 <copy_B+0x374>
 8003c9c:	b11a      	cbz	r2, 8003ca6 <copy_B+0x27a>
 8003c9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003ca0:	2a00      	cmp	r2, #0
 8003ca2:	f040 80ca 	bne.w	8003e3a <copy_B+0x40e>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 5, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 6; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
}
 8003ca6:	b017      	add	sp, #92	@ 0x5c
 8003ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003cac:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 8003cb0:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 8003cb4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8003cb8:	e74e      	b.n	8003b58 <copy_B+0x12c>
 8003cba:	ebcb 1c0b 	rsb	ip, fp, fp, lsl #4
 8003cbe:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003cc2:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003cc6:	e73f      	b.n	8003b48 <copy_B+0x11c>
 8003cc8:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003ccc:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003cd0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003cd4:	e72c      	b.n	8003b30 <copy_B+0x104>
 8003cd6:	ebc9 1c09 	rsb	ip, r9, r9, lsl #4
 8003cda:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003cde:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003ce2:	e718      	b.n	8003b16 <copy_B+0xea>
 8003ce4:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003ce8:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003cec:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003cf0:	e705      	b.n	8003afe <copy_B+0xd2>
 8003cf2:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003cf6:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003cfa:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003cfe:	e6f2      	b.n	8003ae6 <copy_B+0xba>
 8003d00:	ebca 1c0a 	rsb	ip, sl, sl, lsl #4
 8003d04:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003d08:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003d0c:	e6df      	b.n	8003ace <copy_B+0xa2>
 8003d0e:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003d12:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003d16:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003d1a:	e6d0      	b.n	8003abe <copy_B+0x92>
 8003d1c:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003d20:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003d24:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003d28:	e6bd      	b.n	8003aa6 <copy_B+0x7a>
 8003d2a:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003d2e:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003d32:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003d36:	e6aa      	b.n	8003a8e <copy_B+0x62>
 8003d38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003d3a:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003d3e:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003d42:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003d46:	e696      	b.n	8003a76 <copy_B+0x4a>
 8003d48:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8003d4c:	eb05 1747 	add.w	r7, r5, r7, lsl #5
 8003d50:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8003d54:	e681      	b.n	8003a5a <copy_B+0x2e>
 8003d56:	1854      	adds	r4, r2, r1
 8003d58:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003d5c:	e70d      	b.n	8003b7a <copy_B+0x14e>
 8003d5e:	1854      	adds	r4, r2, r1
 8003d60:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003d64:	e718      	b.n	8003b98 <copy_B+0x16c>
 8003d66:	eb0e 0602 	add.w	r6, lr, r2
 8003d6a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8003d6e:	e72e      	b.n	8003bce <copy_B+0x1a2>
 8003d70:	1855      	adds	r5, r2, r1
 8003d72:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8003d76:	e71d      	b.n	8003bb4 <copy_B+0x188>
 8003d78:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003d7a:	4451      	add	r1, sl
 8003d7c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8003d80:	e730      	b.n	8003be4 <copy_B+0x1b8>
 8003d82:	ebc9 1409 	rsb	r4, r9, r9, lsl #4
 8003d86:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003d8a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003d8e:	e780      	b.n	8003c92 <copy_B+0x266>
 8003d90:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8003d92:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003d96:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003d9a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003d9e:	e774      	b.n	8003c8a <copy_B+0x25e>
 8003da0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8003da2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003da6:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003daa:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003dae:	e775      	b.n	8003c9c <copy_B+0x270>
 8003db0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8003db2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003db6:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003dba:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003dbe:	e74d      	b.n	8003c5c <copy_B+0x230>
 8003dc0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8003dc2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003dc6:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003dca:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003dce:	e757      	b.n	8003c80 <copy_B+0x254>
 8003dd0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8003dd2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003dd6:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003dda:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003dde:	e747      	b.n	8003c70 <copy_B+0x244>
 8003de0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8003de2:	4417      	add	r7, r2
 8003de4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8003de8:	e71b      	b.n	8003c22 <copy_B+0x1f6>
 8003dea:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8003dec:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003df0:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003df4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003df8:	e735      	b.n	8003c66 <copy_B+0x23a>
 8003dfa:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8003dfc:	4417      	add	r7, r2
 8003dfe:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003e02:	2e00      	cmp	r6, #0
 8003e04:	f47f af09 	bne.w	8003c1a <copy_B+0x1ee>
 8003e08:	e711      	b.n	8003c2e <copy_B+0x202>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003e0a:	44f2      	add	sl, lr
 8003e0c:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8003e10:	e6f7      	b.n	8003c02 <copy_B+0x1d6>
 8003e12:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8003e14:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003e18:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003e1c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003e20:	2a00      	cmp	r2, #0
 8003e22:	f47f af17 	bne.w	8003c54 <copy_B+0x228>
 8003e26:	e73e      	b.n	8003ca6 <copy_B+0x27a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003e28:	4496      	add	lr, r2
 8003e2a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8003e2e:	e702      	b.n	8003c36 <copy_B+0x20a>
 8003e30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003e32:	4451      	add	r1, sl
 8003e34:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8003e38:	e6d9      	b.n	8003bee <copy_B+0x1c2>
 8003e3a:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
 8003e3e:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8003e42:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8003e46:	b017      	add	sp, #92	@ 0x5c
 8003e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003e4c <copy_C>:

void copy_C(uint16_t* buffer, int x, int y, uint32_t color)
{
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8003e50:	4c90      	ldr	r4, [pc, #576]	@ (8004094 <copy_C+0x248>)
 8003e52:	1c4e      	adds	r6, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003e54:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8003e58:	468a      	mov	sl, r1
    int pixel_x = x_base + x + offset;
 8003e5a:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003e5c:	bf2c      	ite	cs
 8003e5e:	f04f 0b00 	movcs.w	fp, #0
 8003e62:	f04f 0b01 	movcc.w	fp, #1
    int pixel_x = x_base + x + offset;
 8003e66:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003e68:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8003e6c:	bf2c      	ite	cs
 8003e6e:	f04f 0900 	movcs.w	r9, #0
 8003e72:	f04f 0901 	movcc.w	r9, #1
 8003e76:	f1bb 0f00 	cmp.w	fp, #0
 8003e7a:	d003      	beq.n	8003e84 <copy_C+0x38>
 8003e7c:	f1b9 0f00 	cmp.w	r9, #0
 8003e80:	f040 80ab 	bne.w	8003fda <copy_C+0x18e>
    int pixel_x = x_base + x + offset;
 8003e84:	f10a 0502 	add.w	r5, sl, #2
 8003e88:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003e8a:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8003e8e:	bf2c      	ite	cs
 8003e90:	f04f 0800 	movcs.w	r8, #0
 8003e94:	f04f 0801 	movcc.w	r8, #1
 8003e98:	f1bb 0f00 	cmp.w	fp, #0
 8003e9c:	d003      	beq.n	8003ea6 <copy_C+0x5a>
 8003e9e:	f1b8 0f00 	cmp.w	r8, #0
 8003ea2:	f040 8093 	bne.w	8003fcc <copy_C+0x180>
    int pixel_x = x_base + x + offset;
 8003ea6:	f10a 0e03 	add.w	lr, sl, #3
 8003eaa:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003eac:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8003eb0:	bf2c      	ite	cs
 8003eb2:	2100      	movcs	r1, #0
 8003eb4:	2101      	movcc	r1, #1
 8003eb6:	f1bb 0f00 	cmp.w	fp, #0
 8003eba:	d001      	beq.n	8003ec0 <copy_C+0x74>
 8003ebc:	2900      	cmp	r1, #0
 8003ebe:	d17e      	bne.n	8003fbe <copy_C+0x172>
    int pixel_x = x_base + x + offset;
 8003ec0:	f10a 0c04 	add.w	ip, sl, #4
 8003ec4:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ec6:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8003eca:	bf2c      	ite	cs
 8003ecc:	2700      	movcs	r7, #0
 8003ece:	2701      	movcc	r7, #1
 8003ed0:	b117      	cbz	r7, 8003ed8 <copy_C+0x8c>
 8003ed2:	f1bb 0f00 	cmp.w	fp, #0
 8003ed6:	d16b      	bne.n	8003fb0 <copy_C+0x164>
    int pixel_x = x_base + x + offset;
 8003ed8:	44a2      	add	sl, r4
    int pixel_y = y_base + y;
 8003eda:	f102 0b01 	add.w	fp, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ede:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8003ee2:	bf2c      	ite	cs
 8003ee4:	2400      	movcs	r4, #0
 8003ee6:	2401      	movcc	r4, #1
 8003ee8:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003eec:	d201      	bcs.n	8003ef2 <copy_C+0xa6>
 8003eee:	2c00      	cmp	r4, #0
 8003ef0:	d17a      	bne.n	8003fe8 <copy_C+0x19c>
    int pixel_y = y_base + y;
 8003ef2:	f102 0b02 	add.w	fp, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ef6:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003efa:	d202      	bcs.n	8003f02 <copy_C+0xb6>
 8003efc:	2c00      	cmp	r4, #0
 8003efe:	f040 8097 	bne.w	8004030 <copy_C+0x1e4>
    int pixel_y = y_base + y;
 8003f02:	f102 0b03 	add.w	fp, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f06:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003f0a:	d202      	bcs.n	8003f12 <copy_C+0xc6>
 8003f0c:	2c00      	cmp	r4, #0
 8003f0e:	f040 8088 	bne.w	8004022 <copy_C+0x1d6>
    int pixel_y = y_base + y;
 8003f12:	f102 0b04 	add.w	fp, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f16:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003f1a:	d202      	bcs.n	8003f22 <copy_C+0xd6>
 8003f1c:	2c00      	cmp	r4, #0
 8003f1e:	f040 80b1 	bne.w	8004084 <copy_C+0x238>
    int pixel_y = y_base + y;
 8003f22:	f102 0b05 	add.w	fp, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f26:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003f2a:	d202      	bcs.n	8003f32 <copy_C+0xe6>
 8003f2c:	2c00      	cmp	r4, #0
 8003f2e:	f040 80a2 	bne.w	8004076 <copy_C+0x22a>
    int pixel_y = y_base + y;
 8003f32:	f102 0b06 	add.w	fp, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f36:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003f3a:	d202      	bcs.n	8003f42 <copy_C+0xf6>
 8003f3c:	2c00      	cmp	r4, #0
 8003f3e:	f040 8093 	bne.w	8004068 <copy_C+0x21c>
    int pixel_y = y_base + y;
 8003f42:	f102 0b07 	add.w	fp, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f46:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003f4a:	d202      	bcs.n	8003f52 <copy_C+0x106>
 8003f4c:	2c00      	cmp	r4, #0
 8003f4e:	f040 8084 	bne.w	800405a <copy_C+0x20e>
    int pixel_y = y_base + y;
 8003f52:	f102 0b08 	add.w	fp, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f56:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003f5a:	d201      	bcs.n	8003f60 <copy_C+0x114>
 8003f5c:	2c00      	cmp	r4, #0
 8003f5e:	d175      	bne.n	800404c <copy_C+0x200>
    int pixel_y = y_base + y;
 8003f60:	f102 0b09 	add.w	fp, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f64:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003f68:	d201      	bcs.n	8003f6e <copy_C+0x122>
 8003f6a:	2c00      	cmp	r4, #0
 8003f6c:	d167      	bne.n	800403e <copy_C+0x1f2>
    int pixel_y = y_base + y;
 8003f6e:	f102 0b0a 	add.w	fp, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f72:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003f76:	d201      	bcs.n	8003f7c <copy_C+0x130>
 8003f78:	2c00      	cmp	r4, #0
 8003f7a:	d14b      	bne.n	8004014 <copy_C+0x1c8>
    int pixel_y = y_base + y;
 8003f7c:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f7e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003f82:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f86:	bf2c      	ite	cs
 8003f88:	2200      	movcs	r2, #0
 8003f8a:	2201      	movcc	r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003f8c:	0164      	lsls	r4, r4, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f8e:	b15a      	cbz	r2, 8003fa8 <copy_C+0x15c>
 8003f90:	f1b9 0f00 	cmp.w	r9, #0
 8003f94:	d138      	bne.n	8004008 <copy_C+0x1bc>
 8003f96:	b13a      	cbz	r2, 8003fa8 <copy_C+0x15c>
 8003f98:	f1b8 0f00 	cmp.w	r8, #0
 8003f9c:	d130      	bne.n	8004000 <copy_C+0x1b4>
 8003f9e:	b11a      	cbz	r2, 8003fa8 <copy_C+0x15c>
 8003fa0:	b111      	cbz	r1, 8003fa8 <copy_C+0x15c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003fa2:	44a6      	add	lr, r4
 8003fa4:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003fa8:	b107      	cbz	r7, 8003fac <copy_C+0x160>
 8003faa:	bb22      	cbnz	r2, 8003ff6 <copy_C+0x1aa>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 8003fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003fb0:	ebc2 1b02 	rsb	fp, r2, r2, lsl #4
 8003fb4:	eb0c 1b4b 	add.w	fp, ip, fp, lsl #5
 8003fb8:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8003fbc:	e78c      	b.n	8003ed8 <copy_C+0x8c>
 8003fbe:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8003fc2:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003fc6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8003fca:	e779      	b.n	8003ec0 <copy_C+0x74>
 8003fcc:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8003fd0:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 8003fd4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8003fd8:	e765      	b.n	8003ea6 <copy_C+0x5a>
 8003fda:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8003fde:	eb06 1141 	add.w	r1, r6, r1, lsl #5
 8003fe2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8003fe6:	e74d      	b.n	8003e84 <copy_C+0x38>
 8003fe8:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8003fec:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 8003ff0:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8003ff4:	e77d      	b.n	8003ef2 <copy_C+0xa6>
 8003ff6:	44a4      	add	ip, r4
 8003ff8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
}
 8003ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004000:	4425      	add	r5, r4
 8004002:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8004006:	e7ca      	b.n	8003f9e <copy_C+0x152>
 8004008:	4426      	add	r6, r4
 800400a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800400e:	2a00      	cmp	r2, #0
 8004010:	d1c2      	bne.n	8003f98 <copy_C+0x14c>
 8004012:	e7c9      	b.n	8003fa8 <copy_C+0x15c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004014:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8004018:	eb0a 144b 	add.w	r4, sl, fp, lsl #5
 800401c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8004020:	e7ac      	b.n	8003f7c <copy_C+0x130>
 8004022:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8004026:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 800402a:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800402e:	e770      	b.n	8003f12 <copy_C+0xc6>
 8004030:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8004034:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 8004038:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800403c:	e761      	b.n	8003f02 <copy_C+0xb6>
 800403e:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8004042:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 8004046:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800404a:	e790      	b.n	8003f6e <copy_C+0x122>
 800404c:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8004050:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 8004054:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004058:	e782      	b.n	8003f60 <copy_C+0x114>
 800405a:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 800405e:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 8004062:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004066:	e774      	b.n	8003f52 <copy_C+0x106>
 8004068:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 800406c:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 8004070:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004074:	e765      	b.n	8003f42 <copy_C+0xf6>
 8004076:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 800407a:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 800407e:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004082:	e756      	b.n	8003f32 <copy_C+0xe6>
 8004084:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8004088:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 800408c:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004090:	e747      	b.n	8003f22 <copy_C+0xd6>
 8004092:	bf00      	nop
 8004094:	240001b8 	.word	0x240001b8

08004098 <copy_D>:

void copy_D(uint16_t* buffer, int x, int y, uint32_t color)
{
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800409c:	4c8a      	ldr	r4, [pc, #552]	@ (80042c8 <copy_D+0x230>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800409e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 80040a2:	b095      	sub	sp, #84	@ 0x54
    int pixel_x = x_base + x + offset;
 80040a4:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80040a6:	bf2c      	ite	cs
 80040a8:	f04f 0800 	movcs.w	r8, #0
 80040ac:	f04f 0801 	movcc.w	r8, #1
{
 80040b0:	9100      	str	r1, [sp, #0]
    int pixel_x = x_base + x + offset;
 80040b2:	190e      	adds	r6, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80040b4:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80040b8:	bf2c      	ite	cs
 80040ba:	2500      	movcs	r5, #0
 80040bc:	2501      	movcc	r5, #1
 80040be:	b11d      	cbz	r5, 80040c8 <copy_D+0x30>
 80040c0:	f1b8 0f00 	cmp.w	r8, #0
 80040c4:	f040 8132 	bne.w	800432c <copy_D+0x294>
    int pixel_y = y_base + y;
 80040c8:	1c57      	adds	r7, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80040ca:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80040ce:	970c      	str	r7, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80040d0:	bf2c      	ite	cs
 80040d2:	2100      	movcs	r1, #0
 80040d4:	2101      	movcc	r1, #1
 80040d6:	9101      	str	r1, [sp, #4]
 80040d8:	b115      	cbz	r5, 80040e0 <copy_D+0x48>
 80040da:	2900      	cmp	r1, #0
 80040dc:	f040 811f 	bne.w	800431e <copy_D+0x286>
    int pixel_y = y_base + y;
 80040e0:	f102 0a02 	add.w	sl, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80040e4:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80040e8:	bf2c      	ite	cs
 80040ea:	2100      	movcs	r1, #0
 80040ec:	2101      	movcc	r1, #1
 80040ee:	9102      	str	r1, [sp, #8]
 80040f0:	b115      	cbz	r5, 80040f8 <copy_D+0x60>
 80040f2:	2900      	cmp	r1, #0
 80040f4:	f040 8136 	bne.w	8004364 <copy_D+0x2cc>
    int pixel_y = y_base + y;
 80040f8:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80040fa:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80040fe:	970d      	str	r7, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004100:	bf2c      	ite	cs
 8004102:	2100      	movcs	r1, #0
 8004104:	2101      	movcc	r1, #1
 8004106:	9103      	str	r1, [sp, #12]
 8004108:	b115      	cbz	r5, 8004110 <copy_D+0x78>
 800410a:	2900      	cmp	r1, #0
 800410c:	f040 8123 	bne.w	8004356 <copy_D+0x2be>
    int pixel_y = y_base + y;
 8004110:	1d17      	adds	r7, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004112:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8004116:	970e      	str	r7, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004118:	bf2c      	ite	cs
 800411a:	2100      	movcs	r1, #0
 800411c:	2101      	movcc	r1, #1
 800411e:	9104      	str	r1, [sp, #16]
 8004120:	b115      	cbz	r5, 8004128 <copy_D+0x90>
 8004122:	2900      	cmp	r1, #0
 8004124:	f040 8110 	bne.w	8004348 <copy_D+0x2b0>
    int pixel_y = y_base + y;
 8004128:	1d57      	adds	r7, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800412a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800412e:	970f      	str	r7, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004130:	bf2c      	ite	cs
 8004132:	2100      	movcs	r1, #0
 8004134:	2101      	movcc	r1, #1
 8004136:	9105      	str	r1, [sp, #20]
 8004138:	b115      	cbz	r5, 8004140 <copy_D+0xa8>
 800413a:	2900      	cmp	r1, #0
 800413c:	f040 80fd 	bne.w	800433a <copy_D+0x2a2>
    int pixel_y = y_base + y;
 8004140:	1d97      	adds	r7, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004142:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8004146:	9710      	str	r7, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004148:	bf2c      	ite	cs
 800414a:	2100      	movcs	r1, #0
 800414c:	2101      	movcc	r1, #1
 800414e:	9106      	str	r1, [sp, #24]
 8004150:	b115      	cbz	r5, 8004158 <copy_D+0xc0>
 8004152:	2900      	cmp	r1, #0
 8004154:	f040 8130 	bne.w	80043b8 <copy_D+0x320>
    int pixel_y = y_base + y;
 8004158:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800415a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800415e:	9711      	str	r7, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004160:	bf2c      	ite	cs
 8004162:	2100      	movcs	r1, #0
 8004164:	2101      	movcc	r1, #1
 8004166:	9107      	str	r1, [sp, #28]
 8004168:	b115      	cbz	r5, 8004170 <copy_D+0xd8>
 800416a:	2900      	cmp	r1, #0
 800416c:	f040 811d 	bne.w	80043aa <copy_D+0x312>
    int pixel_y = y_base + y;
 8004170:	f102 0708 	add.w	r7, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004174:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8004178:	9712      	str	r7, [sp, #72]	@ 0x48
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800417a:	bf2c      	ite	cs
 800417c:	2100      	movcs	r1, #0
 800417e:	2101      	movcc	r1, #1
 8004180:	9108      	str	r1, [sp, #32]
 8004182:	b115      	cbz	r5, 800418a <copy_D+0xf2>
 8004184:	2900      	cmp	r1, #0
 8004186:	f040 8109 	bne.w	800439c <copy_D+0x304>
    int pixel_y = y_base + y;
 800418a:	f102 0b09 	add.w	fp, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800418e:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8004192:	bf2c      	ite	cs
 8004194:	2100      	movcs	r1, #0
 8004196:	2101      	movcc	r1, #1
 8004198:	9109      	str	r1, [sp, #36]	@ 0x24
 800419a:	b115      	cbz	r5, 80041a2 <copy_D+0x10a>
 800419c:	2900      	cmp	r1, #0
 800419e:	f040 80f6 	bne.w	800438e <copy_D+0x2f6>
    int pixel_y = y_base + y;
 80041a2:	f102 090a 	add.w	r9, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041a6:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 80041aa:	bf2c      	ite	cs
 80041ac:	2100      	movcs	r1, #0
 80041ae:	2101      	movcc	r1, #1
 80041b0:	910a      	str	r1, [sp, #40]	@ 0x28
 80041b2:	b115      	cbz	r5, 80041ba <copy_D+0x122>
 80041b4:	2900      	cmp	r1, #0
 80041b6:	f040 80e3 	bne.w	8004380 <copy_D+0x2e8>
    int pixel_y = y_base + y;
 80041ba:	f102 0c0b 	add.w	ip, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041be:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80041c2:	d202      	bcs.n	80041ca <copy_D+0x132>
 80041c4:	2d00      	cmp	r5, #0
 80041c6:	f040 80d4 	bne.w	8004372 <copy_D+0x2da>
    int pixel_x = x_base + x + offset;
 80041ca:	9900      	ldr	r1, [sp, #0]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80041cc:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
    int pixel_x = x_base + x + offset;
 80041d0:	1c4d      	adds	r5, r1, #1
 80041d2:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041d4:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80041d8:	970b      	str	r7, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041da:	bf2c      	ite	cs
 80041dc:	2500      	movcs	r5, #0
 80041de:	2501      	movcc	r5, #1
 80041e0:	b11d      	cbz	r5, 80041ea <copy_D+0x152>
 80041e2:	f1b8 0f00 	cmp.w	r8, #0
 80041e6:	f040 80ee 	bne.w	80043c6 <copy_D+0x32e>
    int pixel_x = x_base + x + offset;
 80041ea:	9900      	ldr	r1, [sp, #0]
 80041ec:	1c8f      	adds	r7, r1, #2
 80041ee:	193e      	adds	r6, r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041f0:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80041f4:	4631      	mov	r1, r6
 80041f6:	9613      	str	r6, [sp, #76]	@ 0x4c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041f8:	bf2c      	ite	cs
 80041fa:	2700      	movcs	r7, #0
 80041fc:	2701      	movcc	r7, #1
 80041fe:	b11f      	cbz	r7, 8004208 <copy_D+0x170>
 8004200:	f1b8 0f00 	cmp.w	r8, #0
 8004204:	f040 80e6 	bne.w	80043d4 <copy_D+0x33c>
    int pixel_x = x_base + x + offset;
 8004208:	9900      	ldr	r1, [sp, #0]
 800420a:	1cce      	adds	r6, r1, #3
 800420c:	1931      	adds	r1, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800420e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8004212:	bf2c      	ite	cs
 8004214:	2600      	movcs	r6, #0
 8004216:	2601      	movcc	r6, #1
 8004218:	b11e      	cbz	r6, 8004222 <copy_D+0x18a>
 800421a:	f1b8 0f00 	cmp.w	r8, #0
 800421e:	f040 80e0 	bne.w	80043e2 <copy_D+0x34a>
 8004222:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004226:	ebae 0e0c 	sub.w	lr, lr, ip
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800422a:	bf2c      	ite	cs
 800422c:	2200      	movcs	r2, #0
 800422e:	2201      	movcc	r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004230:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004234:	b132      	cbz	r2, 8004244 <copy_D+0x1ac>
 8004236:	2d00      	cmp	r5, #0
 8004238:	f040 80da 	bne.w	80043f0 <copy_D+0x358>
 800423c:	b112      	cbz	r2, 8004244 <copy_D+0x1ac>
 800423e:	2f00      	cmp	r7, #0
 8004240:	f040 8120 	bne.w	8004484 <copy_D+0x3ec>
 8004244:	b116      	cbz	r6, 800424c <copy_D+0x1b4>
 8004246:	2a00      	cmp	r2, #0
 8004248:	f040 8124 	bne.w	8004494 <copy_D+0x3fc>
    int pixel_x = x_base + x + offset;
 800424c:	9a00      	ldr	r2, [sp, #0]
 800424e:	3204      	adds	r2, #4
 8004250:	4422      	add	r2, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004252:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8004256:	bf2c      	ite	cs
 8004258:	2500      	movcs	r5, #0
 800425a:	2501      	movcc	r5, #1
 800425c:	2d00      	cmp	r5, #0
 800425e:	d035      	beq.n	80042cc <copy_D+0x234>
 8004260:	9901      	ldr	r1, [sp, #4]
 8004262:	2900      	cmp	r1, #0
 8004264:	f040 811b 	bne.w	800449e <copy_D+0x406>
 8004268:	2d00      	cmp	r5, #0
 800426a:	d02f      	beq.n	80042cc <copy_D+0x234>
 800426c:	9902      	ldr	r1, [sp, #8]
 800426e:	2900      	cmp	r1, #0
 8004270:	f040 8101 	bne.w	8004476 <copy_D+0x3de>
 8004274:	b355      	cbz	r5, 80042cc <copy_D+0x234>
 8004276:	9903      	ldr	r1, [sp, #12]
 8004278:	2900      	cmp	r1, #0
 800427a:	f040 80f4 	bne.w	8004466 <copy_D+0x3ce>
 800427e:	b32d      	cbz	r5, 80042cc <copy_D+0x234>
 8004280:	9904      	ldr	r1, [sp, #16]
 8004282:	2900      	cmp	r1, #0
 8004284:	f040 80e7 	bne.w	8004456 <copy_D+0x3be>
 8004288:	b305      	cbz	r5, 80042cc <copy_D+0x234>
 800428a:	9905      	ldr	r1, [sp, #20]
 800428c:	2900      	cmp	r1, #0
 800428e:	f040 80da 	bne.w	8004446 <copy_D+0x3ae>
 8004292:	b1dd      	cbz	r5, 80042cc <copy_D+0x234>
 8004294:	9906      	ldr	r1, [sp, #24]
 8004296:	2900      	cmp	r1, #0
 8004298:	f040 80cd 	bne.w	8004436 <copy_D+0x39e>
 800429c:	b1b5      	cbz	r5, 80042cc <copy_D+0x234>
 800429e:	9907      	ldr	r1, [sp, #28]
 80042a0:	2900      	cmp	r1, #0
 80042a2:	f040 80c0 	bne.w	8004426 <copy_D+0x38e>
 80042a6:	b18d      	cbz	r5, 80042cc <copy_D+0x234>
 80042a8:	9908      	ldr	r1, [sp, #32]
 80042aa:	2900      	cmp	r1, #0
 80042ac:	f040 80b3 	bne.w	8004416 <copy_D+0x37e>
 80042b0:	b165      	cbz	r5, 80042cc <copy_D+0x234>
 80042b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80042b4:	2900      	cmp	r1, #0
 80042b6:	f040 80a7 	bne.w	8004408 <copy_D+0x370>
 80042ba:	b13d      	cbz	r5, 80042cc <copy_D+0x234>
 80042bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80042be:	2900      	cmp	r1, #0
 80042c0:	f040 809b 	bne.w	80043fa <copy_D+0x362>
 80042c4:	e002      	b.n	80042cc <copy_D+0x234>
 80042c6:	bf00      	nop
 80042c8:	240001b8 	.word	0x240001b8
    int pixel_x = x_base + x + offset;
 80042cc:	9900      	ldr	r1, [sp, #0]
 80042ce:	3105      	adds	r1, #5
 80042d0:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80042d2:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80042d6:	bf2c      	ite	cs
 80042d8:	2200      	movcs	r2, #0
 80042da:	2201      	movcc	r2, #1
 80042dc:	f1ba 0f00 	cmp.w	sl, #0
 80042e0:	db15      	blt.n	800430e <copy_D+0x276>
 80042e2:	b1a2      	cbz	r2, 800430e <copy_D+0x276>
 80042e4:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80042e8:	da0e      	bge.n	8004308 <copy_D+0x270>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80042ea:	ebca 120a 	rsb	r2, sl, sl, lsl #4
 80042ee:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 80042f2:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80042f6:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 80042fa:	da05      	bge.n	8004308 <copy_D+0x270>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80042fc:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
 8004300:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8004304:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for (int i = 1; i < 4; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 4; i++) fill_pixel(buffer, x, y, i, 11, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 4, i, color);
    fill_pixel(buffer, x, y, 5, 2, color);
    fill_pixel(buffer, x, y, 5, 9, color);
}
 8004308:	b015      	add	sp, #84	@ 0x54
 800430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800430e:	f1bb 0f00 	cmp.w	fp, #0
 8004312:	dbf9      	blt.n	8004308 <copy_D+0x270>
 8004314:	2a00      	cmp	r2, #0
 8004316:	d1ee      	bne.n	80042f6 <copy_D+0x25e>
}
 8004318:	b015      	add	sp, #84	@ 0x54
 800431a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800431e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8004322:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004326:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800432a:	e6d9      	b.n	80040e0 <copy_D+0x48>
 800432c:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8004330:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004334:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004338:	e6c6      	b.n	80040c8 <copy_D+0x30>
 800433a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800433e:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004342:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004346:	e6fb      	b.n	8004140 <copy_D+0xa8>
 8004348:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800434c:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004350:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004354:	e6e8      	b.n	8004128 <copy_D+0x90>
 8004356:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800435a:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800435e:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004362:	e6d5      	b.n	8004110 <copy_D+0x78>
 8004364:	ebca 170a 	rsb	r7, sl, sl, lsl #4
 8004368:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800436c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004370:	e6c2      	b.n	80040f8 <copy_D+0x60>
 8004372:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
 8004376:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800437a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800437e:	e724      	b.n	80041ca <copy_D+0x132>
 8004380:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 8004384:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004388:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800438c:	e715      	b.n	80041ba <copy_D+0x122>
 800438e:	ebcb 170b 	rsb	r7, fp, fp, lsl #4
 8004392:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004396:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800439a:	e702      	b.n	80041a2 <copy_D+0x10a>
 800439c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80043a0:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80043a4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80043a8:	e6ef      	b.n	800418a <copy_D+0xf2>
 80043aa:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80043ae:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80043b2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80043b6:	e6db      	b.n	8004170 <copy_D+0xd8>
 80043b8:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80043bc:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80043c0:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80043c4:	e6c8      	b.n	8004158 <copy_D+0xc0>
 80043c6:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80043ca:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 80043ce:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80043d2:	e70a      	b.n	80041ea <copy_D+0x152>
 80043d4:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80043d8:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 80043dc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80043e0:	e712      	b.n	8004208 <copy_D+0x170>
 80043e2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80043e6:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 80043ea:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80043ee:	e718      	b.n	8004222 <copy_D+0x18a>
 80043f0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80043f2:	4475      	add	r5, lr
 80043f4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80043f8:	e720      	b.n	800423c <copy_D+0x1a4>
 80043fa:	ebc9 1509 	rsb	r5, r9, r9, lsl #4
 80043fe:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 8004402:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8004406:	e761      	b.n	80042cc <copy_D+0x234>
 8004408:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 800440c:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 8004410:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004414:	e751      	b.n	80042ba <copy_D+0x222>
 8004416:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8004418:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 800441c:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 8004420:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004424:	e744      	b.n	80042b0 <copy_D+0x218>
 8004426:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004428:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 800442c:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 8004430:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004434:	e737      	b.n	80042a6 <copy_D+0x20e>
 8004436:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004438:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 800443c:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 8004440:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004444:	e72a      	b.n	800429c <copy_D+0x204>
 8004446:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004448:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 800444c:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 8004450:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004454:	e71d      	b.n	8004292 <copy_D+0x1fa>
 8004456:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004458:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 800445c:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 8004460:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004464:	e710      	b.n	8004288 <copy_D+0x1f0>
 8004466:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004468:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 800446c:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 8004470:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004474:	e703      	b.n	800427e <copy_D+0x1e6>
 8004476:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 800447a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 800447e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004482:	e6f7      	b.n	8004274 <copy_D+0x1dc>
 8004484:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8004486:	4477      	add	r7, lr
 8004488:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800448c:	2e00      	cmp	r6, #0
 800448e:	f47f aeda 	bne.w	8004246 <copy_D+0x1ae>
 8004492:	e6db      	b.n	800424c <copy_D+0x1b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004494:	460e      	mov	r6, r1
 8004496:	4476      	add	r6, lr
 8004498:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800449c:	e6d6      	b.n	800424c <copy_D+0x1b4>
 800449e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80044a0:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 80044a4:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 80044a8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80044ac:	e6dc      	b.n	8004268 <copy_D+0x1d0>
 80044ae:	bf00      	nop

080044b0 <copy_E>:

void copy_E(uint16_t* buffer, int x, int y, uint32_t color)
{
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80044b4:	4cbb      	ldr	r4, [pc, #748]	@ (80047a4 <copy_E+0x2f4>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80044b6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 80044ba:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 80044bc:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80044be:	bf2c      	ite	cs
 80044c0:	2700      	movcs	r7, #0
 80044c2:	2701      	movcc	r7, #1
    int pixel_x = x_base + x + offset;
 80044c4:	190e      	adds	r6, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80044c6:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80044ca:	bf2c      	ite	cs
 80044cc:	2500      	movcs	r5, #0
 80044ce:	2501      	movcc	r5, #1
 80044d0:	b115      	cbz	r5, 80044d8 <copy_E+0x28>
 80044d2:	2f00      	cmp	r7, #0
 80044d4:	f040 8134 	bne.w	8004740 <copy_E+0x290>
    int pixel_y = y_base + y;
 80044d8:	f102 0c01 	add.w	ip, r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80044dc:	ea4f 1802 	mov.w	r8, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80044e0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80044e4:	d202      	bcs.n	80044ec <copy_E+0x3c>
 80044e6:	2d00      	cmp	r5, #0
 80044e8:	f040 8123 	bne.w	8004732 <copy_E+0x282>
    int pixel_y = y_base + y;
 80044ec:	f102 0c02 	add.w	ip, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80044f0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80044f4:	d202      	bcs.n	80044fc <copy_E+0x4c>
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	f040 8114 	bne.w	8004724 <copy_E+0x274>
    int pixel_y = y_base + y;
 80044fc:	f102 0c03 	add.w	ip, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004500:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004504:	d202      	bcs.n	800450c <copy_E+0x5c>
 8004506:	2d00      	cmp	r5, #0
 8004508:	f040 8105 	bne.w	8004716 <copy_E+0x266>
    int pixel_y = y_base + y;
 800450c:	f102 0c04 	add.w	ip, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004510:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004514:	d202      	bcs.n	800451c <copy_E+0x6c>
 8004516:	2d00      	cmp	r5, #0
 8004518:	f040 80f6 	bne.w	8004708 <copy_E+0x258>
    int pixel_y = y_base + y;
 800451c:	f102 0e05 	add.w	lr, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004520:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8004524:	d202      	bcs.n	800452c <copy_E+0x7c>
 8004526:	2d00      	cmp	r5, #0
 8004528:	f040 80e7 	bne.w	80046fa <copy_E+0x24a>
    int pixel_y = y_base + y;
 800452c:	f102 0c06 	add.w	ip, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004530:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004534:	d202      	bcs.n	800453c <copy_E+0x8c>
 8004536:	2d00      	cmp	r5, #0
 8004538:	f040 80d8 	bne.w	80046ec <copy_E+0x23c>
    int pixel_y = y_base + y;
 800453c:	f102 0c07 	add.w	ip, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004540:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004544:	d202      	bcs.n	800454c <copy_E+0x9c>
 8004546:	2d00      	cmp	r5, #0
 8004548:	f040 80c9 	bne.w	80046de <copy_E+0x22e>
    int pixel_y = y_base + y;
 800454c:	f102 0c08 	add.w	ip, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004550:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004554:	d202      	bcs.n	800455c <copy_E+0xac>
 8004556:	2d00      	cmp	r5, #0
 8004558:	f040 80ba 	bne.w	80046d0 <copy_E+0x220>
    int pixel_y = y_base + y;
 800455c:	f102 0c09 	add.w	ip, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004560:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004564:	d202      	bcs.n	800456c <copy_E+0xbc>
 8004566:	2d00      	cmp	r5, #0
 8004568:	f040 80ab 	bne.w	80046c2 <copy_E+0x212>
    int pixel_y = y_base + y;
 800456c:	f102 0c0a 	add.w	ip, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004570:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004574:	d202      	bcs.n	800457c <copy_E+0xcc>
 8004576:	2d00      	cmp	r5, #0
 8004578:	f040 809c 	bne.w	80046b4 <copy_E+0x204>
    int pixel_y = y_base + y;
 800457c:	f102 0c0b 	add.w	ip, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004580:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004584:	d202      	bcs.n	800458c <copy_E+0xdc>
 8004586:	2d00      	cmp	r5, #0
 8004588:	f040 808d 	bne.w	80046a6 <copy_E+0x1f6>
    int pixel_x = x_base + x + offset;
 800458c:	1c4d      	adds	r5, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800458e:	eba8 0202 	sub.w	r2, r8, r2
    int pixel_x = x_base + x + offset;
 8004592:	4425      	add	r5, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004594:	0152      	lsls	r2, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004596:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 800459a:	bf2c      	ite	cs
 800459c:	f04f 0800 	movcs.w	r8, #0
 80045a0:	f04f 0801 	movcc.w	r8, #1
 80045a4:	f1b8 0f00 	cmp.w	r8, #0
 80045a8:	d002      	beq.n	80045b0 <copy_E+0x100>
 80045aa:	2f00      	cmp	r7, #0
 80045ac:	f040 80cf 	bne.w	800474e <copy_E+0x29e>
    int pixel_x = x_base + x + offset;
 80045b0:	1c8e      	adds	r6, r1, #2
 80045b2:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80045b4:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80045b8:	9603      	str	r6, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80045ba:	bf2c      	ite	cs
 80045bc:	f04f 0a00 	movcs.w	sl, #0
 80045c0:	f04f 0a01 	movcc.w	sl, #1
 80045c4:	f1ba 0f00 	cmp.w	sl, #0
 80045c8:	d002      	beq.n	80045d0 <copy_E+0x120>
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	f040 80c3 	bne.w	8004756 <copy_E+0x2a6>
    int pixel_x = x_base + x + offset;
 80045d0:	f101 0903 	add.w	r9, r1, #3
 80045d4:	44a1      	add	r9, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80045d6:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 80045da:	bf2c      	ite	cs
 80045dc:	2600      	movcs	r6, #0
 80045de:	2601      	movcc	r6, #1
 80045e0:	9600      	str	r6, [sp, #0]
 80045e2:	b116      	cbz	r6, 80045ea <copy_E+0x13a>
 80045e4:	2f00      	cmp	r7, #0
 80045e6:	f040 80c1 	bne.w	800476c <copy_E+0x2bc>
    int pixel_x = x_base + x + offset;
 80045ea:	f101 0b04 	add.w	fp, r1, #4
 80045ee:	eb0b 0604 	add.w	r6, fp, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80045f2:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80045f6:	9602      	str	r6, [sp, #8]
 80045f8:	bf2c      	ite	cs
 80045fa:	f04f 0b00 	movcs.w	fp, #0
 80045fe:	f04f 0b01 	movcc.w	fp, #1
 8004602:	465e      	mov	r6, fp
 8004604:	f8cd b004 	str.w	fp, [sp, #4]
 8004608:	b116      	cbz	r6, 8004610 <copy_E+0x160>
 800460a:	2f00      	cmp	r7, #0
 800460c:	f040 80a8 	bne.w	8004760 <copy_E+0x2b0>
    int pixel_x = x_base + x + offset;
 8004610:	3105      	adds	r1, #5
 8004612:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004614:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8004618:	bf2c      	ite	cs
 800461a:	f04f 0b00 	movcs.w	fp, #0
 800461e:	f04f 0b01 	movcc.w	fp, #1
 8004622:	f1bb 0f00 	cmp.w	fp, #0
 8004626:	d002      	beq.n	800462e <copy_E+0x17e>
 8004628:	2f00      	cmp	r7, #0
 800462a:	f040 80a4 	bne.w	8004776 <copy_E+0x2c6>
 800462e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8004632:	bf2c      	ite	cs
 8004634:	2400      	movcs	r4, #0
 8004636:	2401      	movcc	r4, #1
 8004638:	b18c      	cbz	r4, 800465e <copy_E+0x1ae>
 800463a:	f1b8 0f00 	cmp.w	r8, #0
 800463e:	f040 809e 	bne.w	800477e <copy_E+0x2ce>
 8004642:	b164      	cbz	r4, 800465e <copy_E+0x1ae>
 8004644:	f1ba 0f00 	cmp.w	sl, #0
 8004648:	f040 80a0 	bne.w	800478c <copy_E+0x2dc>
 800464c:	b13c      	cbz	r4, 800465e <copy_E+0x1ae>
 800464e:	9c00      	ldr	r4, [sp, #0]
 8004650:	b12c      	cbz	r4, 800465e <copy_E+0x1ae>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004652:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8004656:	eb09 1e4e 	add.w	lr, r9, lr, lsl #5
 800465a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800465e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004662:	f502 52a5 	add.w	r2, r2, #5280	@ 0x14a0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004666:	bf2c      	ite	cs
 8004668:	2400      	movcs	r4, #0
 800466a:	2401      	movcc	r4, #1
 800466c:	b194      	cbz	r4, 8004694 <copy_E+0x1e4>
 800466e:	f1b8 0f00 	cmp.w	r8, #0
 8004672:	f040 8093 	bne.w	800479c <copy_E+0x2ec>
 8004676:	b16c      	cbz	r4, 8004694 <copy_E+0x1e4>
 8004678:	f1ba 0f00 	cmp.w	sl, #0
 800467c:	f040 80a2 	bne.w	80047c4 <copy_E+0x314>
 8004680:	b144      	cbz	r4, 8004694 <copy_E+0x1e4>
 8004682:	9d00      	ldr	r5, [sp, #0]
 8004684:	2d00      	cmp	r5, #0
 8004686:	f040 8098 	bne.w	80047ba <copy_E+0x30a>
 800468a:	b11c      	cbz	r4, 8004694 <copy_E+0x1e4>
 800468c:	9d01      	ldr	r5, [sp, #4]
 800468e:	2d00      	cmp	r5, #0
 8004690:	f040 808a 	bne.w	80047a8 <copy_E+0x2f8>
 8004694:	f1bb 0f00 	cmp.w	fp, #0
 8004698:	d002      	beq.n	80046a0 <copy_E+0x1f0>
 800469a:	2c00      	cmp	r4, #0
 800469c:	f040 8097 	bne.w	80047ce <copy_E+0x31e>
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 6; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 4; i++) fill_pixel(buffer, x, y, i, 5, color);
    for (int i = 1; i < 6; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 80046a0:	b005      	add	sp, #20
 80046a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80046a6:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
 80046aa:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 80046ae:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80046b2:	e76b      	b.n	800458c <copy_E+0xdc>
 80046b4:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80046b8:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80046bc:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80046c0:	e75c      	b.n	800457c <copy_E+0xcc>
 80046c2:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80046c6:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80046ca:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80046ce:	e74d      	b.n	800456c <copy_E+0xbc>
 80046d0:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80046d4:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80046d8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80046dc:	e73e      	b.n	800455c <copy_E+0xac>
 80046de:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80046e2:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80046e6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80046ea:	e72f      	b.n	800454c <copy_E+0x9c>
 80046ec:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80046f0:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80046f4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80046f8:	e720      	b.n	800453c <copy_E+0x8c>
 80046fa:	ebce 1c0e 	rsb	ip, lr, lr, lsl #4
 80046fe:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004702:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004706:	e711      	b.n	800452c <copy_E+0x7c>
 8004708:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800470c:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004710:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004714:	e702      	b.n	800451c <copy_E+0x6c>
 8004716:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800471a:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 800471e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004722:	e6f3      	b.n	800450c <copy_E+0x5c>
 8004724:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004728:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 800472c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004730:	e6e4      	b.n	80044fc <copy_E+0x4c>
 8004732:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004736:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 800473a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800473e:	e6d5      	b.n	80044ec <copy_E+0x3c>
 8004740:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 8004744:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004748:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800474c:	e6c4      	b.n	80044d8 <copy_E+0x28>
 800474e:	1956      	adds	r6, r2, r5
 8004750:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004754:	e72c      	b.n	80045b0 <copy_E+0x100>
 8004756:	eb02 0906 	add.w	r9, r2, r6
 800475a:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800475e:	e737      	b.n	80045d0 <copy_E+0x120>
 8004760:	9e02      	ldr	r6, [sp, #8]
 8004762:	eb02 0b06 	add.w	fp, r2, r6
 8004766:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800476a:	e751      	b.n	8004610 <copy_E+0x160>
 800476c:	eb02 0b09 	add.w	fp, r2, r9
 8004770:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004774:	e739      	b.n	80045ea <copy_E+0x13a>
 8004776:	188c      	adds	r4, r1, r2
 8004778:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800477c:	e757      	b.n	800462e <copy_E+0x17e>
 800477e:	ebce 170e 	rsb	r7, lr, lr, lsl #4
 8004782:	eb05 1747 	add.w	r7, r5, r7, lsl #5
 8004786:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800478a:	e75a      	b.n	8004642 <copy_E+0x192>
 800478c:	ebce 170e 	rsb	r7, lr, lr, lsl #4
 8004790:	9e03      	ldr	r6, [sp, #12]
 8004792:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004796:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800479a:	e757      	b.n	800464c <copy_E+0x19c>
 800479c:	4415      	add	r5, r2
 800479e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80047a2:	e768      	b.n	8004676 <copy_E+0x1c6>
 80047a4:	240001b8 	.word	0x240001b8
 80047a8:	9d02      	ldr	r5, [sp, #8]
 80047aa:	4415      	add	r5, r2
 80047ac:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80047b0:	f1bb 0f00 	cmp.w	fp, #0
 80047b4:	f47f af71 	bne.w	800469a <copy_E+0x1ea>
 80047b8:	e772      	b.n	80046a0 <copy_E+0x1f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80047ba:	eb02 0509 	add.w	r5, r2, r9
 80047be:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80047c2:	e762      	b.n	800468a <copy_E+0x1da>
 80047c4:	9e03      	ldr	r6, [sp, #12]
 80047c6:	4416      	add	r6, r2
 80047c8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80047cc:	e758      	b.n	8004680 <copy_E+0x1d0>
 80047ce:	4411      	add	r1, r2
 80047d0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 80047d4:	b005      	add	sp, #20
 80047d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047da:	bf00      	nop

080047dc <copy_F>:

void copy_F(uint16_t* buffer, int x, int y, uint32_t color)
{
 80047dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80047e0:	4c9c      	ldr	r4, [pc, #624]	@ (8004a54 <copy_F+0x278>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80047e2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80047e6:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80047e8:	bf2c      	ite	cs
 80047ea:	2700      	movcs	r7, #0
 80047ec:	2701      	movcc	r7, #1
    int pixel_x = x_base + x + offset;
 80047ee:	190e      	adds	r6, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80047f0:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80047f4:	bf2c      	ite	cs
 80047f6:	2500      	movcs	r5, #0
 80047f8:	2501      	movcc	r5, #1
 80047fa:	b115      	cbz	r5, 8004802 <copy_F+0x26>
 80047fc:	2f00      	cmp	r7, #0
 80047fe:	f040 80fe 	bne.w	80049fe <copy_F+0x222>
    int pixel_y = y_base + y;
 8004802:	f102 0c01 	add.w	ip, r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004806:	ea4f 1e02 	mov.w	lr, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800480a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800480e:	d202      	bcs.n	8004816 <copy_F+0x3a>
 8004810:	2d00      	cmp	r5, #0
 8004812:	f040 80ed 	bne.w	80049f0 <copy_F+0x214>
    int pixel_y = y_base + y;
 8004816:	f102 0c02 	add.w	ip, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800481a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800481e:	d202      	bcs.n	8004826 <copy_F+0x4a>
 8004820:	2d00      	cmp	r5, #0
 8004822:	f040 80de 	bne.w	80049e2 <copy_F+0x206>
    int pixel_y = y_base + y;
 8004826:	f102 0c03 	add.w	ip, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800482a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800482e:	d202      	bcs.n	8004836 <copy_F+0x5a>
 8004830:	2d00      	cmp	r5, #0
 8004832:	f040 80cf 	bne.w	80049d4 <copy_F+0x1f8>
    int pixel_y = y_base + y;
 8004836:	f102 0c04 	add.w	ip, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800483a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800483e:	d202      	bcs.n	8004846 <copy_F+0x6a>
 8004840:	2d00      	cmp	r5, #0
 8004842:	f040 80c0 	bne.w	80049c6 <copy_F+0x1ea>
    int pixel_y = y_base + y;
 8004846:	f102 0c05 	add.w	ip, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800484a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800484e:	d202      	bcs.n	8004856 <copy_F+0x7a>
 8004850:	2d00      	cmp	r5, #0
 8004852:	f040 80b1 	bne.w	80049b8 <copy_F+0x1dc>
    int pixel_y = y_base + y;
 8004856:	f102 0806 	add.w	r8, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800485a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800485e:	d202      	bcs.n	8004866 <copy_F+0x8a>
 8004860:	2d00      	cmp	r5, #0
 8004862:	f040 80a2 	bne.w	80049aa <copy_F+0x1ce>
    int pixel_y = y_base + y;
 8004866:	f102 0807 	add.w	r8, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800486a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800486e:	d202      	bcs.n	8004876 <copy_F+0x9a>
 8004870:	2d00      	cmp	r5, #0
 8004872:	f040 8093 	bne.w	800499c <copy_F+0x1c0>
    int pixel_y = y_base + y;
 8004876:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800487a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800487e:	d202      	bcs.n	8004886 <copy_F+0xaa>
 8004880:	2d00      	cmp	r5, #0
 8004882:	f040 8084 	bne.w	800498e <copy_F+0x1b2>
    int pixel_y = y_base + y;
 8004886:	f102 0809 	add.w	r8, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800488a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800488e:	d201      	bcs.n	8004894 <copy_F+0xb8>
 8004890:	2d00      	cmp	r5, #0
 8004892:	d175      	bne.n	8004980 <copy_F+0x1a4>
    int pixel_y = y_base + y;
 8004894:	f102 080a 	add.w	r8, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004898:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800489c:	d201      	bcs.n	80048a2 <copy_F+0xc6>
 800489e:	2d00      	cmp	r5, #0
 80048a0:	d167      	bne.n	8004972 <copy_F+0x196>
    int pixel_y = y_base + y;
 80048a2:	f102 080b 	add.w	r8, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80048a6:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80048aa:	d201      	bcs.n	80048b0 <copy_F+0xd4>
 80048ac:	2d00      	cmp	r5, #0
 80048ae:	d159      	bne.n	8004964 <copy_F+0x188>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80048b0:	ebae 0202 	sub.w	r2, lr, r2
    int pixel_x = x_base + x + offset;
 80048b4:	f101 0e01 	add.w	lr, r1, #1
 80048b8:	44a6      	add	lr, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80048ba:	0152      	lsls	r2, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80048bc:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80048c0:	bf2c      	ite	cs
 80048c2:	f04f 0800 	movcs.w	r8, #0
 80048c6:	f04f 0801 	movcc.w	r8, #1
 80048ca:	f1b8 0f00 	cmp.w	r8, #0
 80048ce:	d002      	beq.n	80048d6 <copy_F+0xfa>
 80048d0:	2f00      	cmp	r7, #0
 80048d2:	f040 809b 	bne.w	8004a0c <copy_F+0x230>
    int pixel_x = x_base + x + offset;
 80048d6:	1c8e      	adds	r6, r1, #2
 80048d8:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80048da:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80048de:	bf2c      	ite	cs
 80048e0:	f04f 0a00 	movcs.w	sl, #0
 80048e4:	f04f 0a01 	movcc.w	sl, #1
 80048e8:	f1ba 0f00 	cmp.w	sl, #0
 80048ec:	d002      	beq.n	80048f4 <copy_F+0x118>
 80048ee:	2f00      	cmp	r7, #0
 80048f0:	f040 8095 	bne.w	8004a1e <copy_F+0x242>
    int pixel_x = x_base + x + offset;
 80048f4:	1ccd      	adds	r5, r1, #3
 80048f6:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80048f8:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80048fc:	bf2c      	ite	cs
 80048fe:	f04f 0900 	movcs.w	r9, #0
 8004902:	f04f 0901 	movcc.w	r9, #1
 8004906:	f1b9 0f00 	cmp.w	r9, #0
 800490a:	d002      	beq.n	8004912 <copy_F+0x136>
 800490c:	2f00      	cmp	r7, #0
 800490e:	f040 808e 	bne.w	8004a2e <copy_F+0x252>
    int pixel_x = x_base + x + offset;
 8004912:	f101 0b04 	add.w	fp, r1, #4
 8004916:	44a3      	add	fp, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004918:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 800491c:	d202      	bcs.n	8004924 <copy_F+0x148>
 800491e:	2f00      	cmp	r7, #0
 8004920:	f040 8081 	bne.w	8004a26 <copy_F+0x24a>
    int pixel_x = x_base + x + offset;
 8004924:	3105      	adds	r1, #5
 8004926:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004928:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800492c:	d201      	bcs.n	8004932 <copy_F+0x156>
 800492e:	2f00      	cmp	r7, #0
 8004930:	d171      	bne.n	8004a16 <copy_F+0x23a>
 8004932:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004936:	bf2c      	ite	cs
 8004938:	2200      	movcs	r2, #0
 800493a:	2201      	movcc	r2, #1
 800493c:	b182      	cbz	r2, 8004960 <copy_F+0x184>
 800493e:	f1b8 0f00 	cmp.w	r8, #0
 8004942:	d179      	bne.n	8004a38 <copy_F+0x25c>
 8004944:	b162      	cbz	r2, 8004960 <copy_F+0x184>
 8004946:	f1ba 0f00 	cmp.w	sl, #0
 800494a:	d17c      	bne.n	8004a46 <copy_F+0x26a>
 800494c:	b142      	cbz	r2, 8004960 <copy_F+0x184>
 800494e:	f1b9 0f00 	cmp.w	r9, #0
 8004952:	d005      	beq.n	8004960 <copy_F+0x184>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004954:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004958:	eb05 154c 	add.w	r5, r5, ip, lsl #5
 800495c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 6; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 4; i++) fill_pixel(buffer, x, y, i, 5, color);
}
 8004960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004964:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8004968:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800496c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004970:	e79e      	b.n	80048b0 <copy_F+0xd4>
 8004972:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8004976:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 800497a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800497e:	e790      	b.n	80048a2 <copy_F+0xc6>
 8004980:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8004984:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 8004988:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800498c:	e782      	b.n	8004894 <copy_F+0xb8>
 800498e:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8004992:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 8004996:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800499a:	e774      	b.n	8004886 <copy_F+0xaa>
 800499c:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80049a0:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 80049a4:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80049a8:	e765      	b.n	8004876 <copy_F+0x9a>
 80049aa:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80049ae:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 80049b2:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80049b6:	e756      	b.n	8004866 <copy_F+0x8a>
 80049b8:	ebcc 180c 	rsb	r8, ip, ip, lsl #4
 80049bc:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 80049c0:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80049c4:	e747      	b.n	8004856 <copy_F+0x7a>
 80049c6:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80049ca:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80049ce:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80049d2:	e738      	b.n	8004846 <copy_F+0x6a>
 80049d4:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80049d8:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80049dc:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80049e0:	e729      	b.n	8004836 <copy_F+0x5a>
 80049e2:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80049e6:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80049ea:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80049ee:	e71a      	b.n	8004826 <copy_F+0x4a>
 80049f0:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80049f4:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80049f8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80049fc:	e70b      	b.n	8004816 <copy_F+0x3a>
 80049fe:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 8004a02:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004a06:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004a0a:	e6fa      	b.n	8004802 <copy_F+0x26>
 8004a0c:	eb02 050e 	add.w	r5, r2, lr
 8004a10:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8004a14:	e75f      	b.n	80048d6 <copy_F+0xfa>
 8004a16:	4411      	add	r1, r2
 8004a18:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8004a1c:	e789      	b.n	8004932 <copy_F+0x156>
 8004a1e:	1995      	adds	r5, r2, r6
 8004a20:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8004a24:	e766      	b.n	80048f4 <copy_F+0x118>
 8004a26:	4493      	add	fp, r2
 8004a28:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004a2c:	e77a      	b.n	8004924 <copy_F+0x148>
 8004a2e:	eb02 0b05 	add.w	fp, r2, r5
 8004a32:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004a36:	e76c      	b.n	8004912 <copy_F+0x136>
 8004a38:	ebcc 110c 	rsb	r1, ip, ip, lsl #4
 8004a3c:	eb0e 1e41 	add.w	lr, lr, r1, lsl #5
 8004a40:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8004a44:	e77e      	b.n	8004944 <copy_F+0x168>
 8004a46:	ebcc 110c 	rsb	r1, ip, ip, lsl #4
 8004a4a:	eb06 1641 	add.w	r6, r6, r1, lsl #5
 8004a4e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004a52:	e77b      	b.n	800494c <copy_F+0x170>
 8004a54:	240001b8 	.word	0x240001b8

08004a58 <copy_G>:

void copy_G(uint16_t* buffer, int x, int y, uint32_t color)
{
 8004a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8004a5c:	4c9b      	ldr	r4, [pc, #620]	@ (8004ccc <copy_G+0x274>)
 8004a5e:	1c4d      	adds	r5, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004a60:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8004a64:	b08f      	sub	sp, #60	@ 0x3c
    int pixel_x = x_base + x + offset;
 8004a66:	6824      	ldr	r4, [r4, #0]
 8004a68:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004a6c:	bf2c      	ite	cs
 8004a6e:	2500      	movcs	r5, #0
 8004a70:	2501      	movcc	r5, #1
 8004a72:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8004a76:	bf2c      	ite	cs
 8004a78:	2600      	movcs	r6, #0
 8004a7a:	2601      	movcc	r6, #1
 8004a7c:	9604      	str	r6, [sp, #16]
 8004a7e:	b115      	cbz	r5, 8004a86 <copy_G+0x2e>
 8004a80:	2e00      	cmp	r6, #0
 8004a82:	f040 80fd 	bne.w	8004c80 <copy_G+0x228>
    int pixel_x = x_base + x + offset;
 8004a86:	1c8e      	adds	r6, r1, #2
 8004a88:	eb06 0804 	add.w	r8, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004a8c:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8004a90:	bf2c      	ite	cs
 8004a92:	2600      	movcs	r6, #0
 8004a94:	2601      	movcc	r6, #1
 8004a96:	9605      	str	r6, [sp, #20]
 8004a98:	b115      	cbz	r5, 8004aa0 <copy_G+0x48>
 8004a9a:	2e00      	cmp	r6, #0
 8004a9c:	f040 80e9 	bne.w	8004c72 <copy_G+0x21a>
    int pixel_x = x_base + x + offset;
 8004aa0:	1cce      	adds	r6, r1, #3
 8004aa2:	1937      	adds	r7, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004aa4:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8004aa8:	9706      	str	r7, [sp, #24]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004aaa:	bf2c      	ite	cs
 8004aac:	2600      	movcs	r6, #0
 8004aae:	2601      	movcc	r6, #1
 8004ab0:	9602      	str	r6, [sp, #8]
 8004ab2:	b115      	cbz	r5, 8004aba <copy_G+0x62>
 8004ab4:	2e00      	cmp	r6, #0
 8004ab6:	f040 80d5 	bne.w	8004c64 <copy_G+0x20c>
    int pixel_x = x_base + x + offset;
 8004aba:	1d0e      	adds	r6, r1, #4
 8004abc:	eb06 0b04 	add.w	fp, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004ac0:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8004ac4:	bf2c      	ite	cs
 8004ac6:	2600      	movcs	r6, #0
 8004ac8:	2601      	movcc	r6, #1
 8004aca:	9601      	str	r6, [sp, #4]
 8004acc:	b116      	cbz	r6, 8004ad4 <copy_G+0x7c>
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	f040 80c1 	bne.w	8004c56 <copy_G+0x1fe>
    int pixel_x = x_base + x + offset;
 8004ad4:	eb01 0e04 	add.w	lr, r1, r4
    int pixel_y = y_base + y;
 8004ad8:	1c56      	adds	r6, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004ada:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8004ade:	bf2c      	ite	cs
 8004ae0:	2500      	movcs	r5, #0
 8004ae2:	2501      	movcc	r5, #1
 8004ae4:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004ae8:	d202      	bcs.n	8004af0 <copy_G+0x98>
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	f040 80cf 	bne.w	8004c8e <copy_G+0x236>
    int pixel_y = y_base + y;
 8004af0:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004af2:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004af6:	d202      	bcs.n	8004afe <copy_G+0xa6>
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	f040 8130 	bne.w	8004d5e <copy_G+0x306>
    int pixel_y = y_base + y;
 8004afe:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b00:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004b04:	d202      	bcs.n	8004b0c <copy_G+0xb4>
 8004b06:	2d00      	cmp	r5, #0
 8004b08:	f040 8122 	bne.w	8004d50 <copy_G+0x2f8>
    int pixel_y = y_base + y;
 8004b0c:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b0e:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004b12:	d202      	bcs.n	8004b1a <copy_G+0xc2>
 8004b14:	2d00      	cmp	r5, #0
 8004b16:	f040 8114 	bne.w	8004d42 <copy_G+0x2ea>
    int pixel_y = y_base + y;
 8004b1a:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b1c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004b20:	d202      	bcs.n	8004b28 <copy_G+0xd0>
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	f040 8106 	bne.w	8004d34 <copy_G+0x2dc>
    int pixel_y = y_base + y;
 8004b28:	f102 0c06 	add.w	ip, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b2c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004b30:	bf2c      	ite	cs
 8004b32:	2600      	movcs	r6, #0
 8004b34:	2601      	movcc	r6, #1
 8004b36:	9607      	str	r6, [sp, #28]
 8004b38:	b115      	cbz	r5, 8004b40 <copy_G+0xe8>
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	f040 80f3 	bne.w	8004d26 <copy_G+0x2ce>
    int pixel_y = y_base + y;
 8004b40:	f102 0907 	add.w	r9, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b44:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8004b48:	bf2c      	ite	cs
 8004b4a:	2600      	movcs	r6, #0
 8004b4c:	2601      	movcc	r6, #1
 8004b4e:	9608      	str	r6, [sp, #32]
 8004b50:	b115      	cbz	r5, 8004b58 <copy_G+0x100>
 8004b52:	2e00      	cmp	r6, #0
 8004b54:	f040 80e0 	bne.w	8004d18 <copy_G+0x2c0>
    int pixel_y = y_base + y;
 8004b58:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b5c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004b60:	960b      	str	r6, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b62:	bf2c      	ite	cs
 8004b64:	2700      	movcs	r7, #0
 8004b66:	2701      	movcc	r7, #1
 8004b68:	9709      	str	r7, [sp, #36]	@ 0x24
 8004b6a:	b115      	cbz	r5, 8004b72 <copy_G+0x11a>
 8004b6c:	2f00      	cmp	r7, #0
 8004b6e:	f040 80cc 	bne.w	8004d0a <copy_G+0x2b2>
    int pixel_y = y_base + y;
 8004b72:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b76:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004b7a:	960c      	str	r6, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b7c:	bf2c      	ite	cs
 8004b7e:	2700      	movcs	r7, #0
 8004b80:	2701      	movcc	r7, #1
 8004b82:	970a      	str	r7, [sp, #40]	@ 0x28
 8004b84:	b115      	cbz	r5, 8004b8c <copy_G+0x134>
 8004b86:	2f00      	cmp	r7, #0
 8004b88:	f040 80b8 	bne.w	8004cfc <copy_G+0x2a4>
    int pixel_y = y_base + y;
 8004b8c:	f102 060a 	add.w	r6, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b90:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004b94:	bf2c      	ite	cs
 8004b96:	2700      	movcs	r7, #0
 8004b98:	2701      	movcc	r7, #1
 8004b9a:	9703      	str	r7, [sp, #12]
 8004b9c:	b117      	cbz	r7, 8004ba4 <copy_G+0x14c>
 8004b9e:	2d00      	cmp	r5, #0
 8004ba0:	f040 80a5 	bne.w	8004cee <copy_G+0x296>
    int pixel_y = y_base + y;
 8004ba4:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004ba6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004baa:	ebc2 1e02 	rsb	lr, r2, r2, lsl #4
 8004bae:	ea4f 1702 	mov.w	r7, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004bb2:	bf2c      	ite	cs
 8004bb4:	2500      	movcs	r5, #0
 8004bb6:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004bb8:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8004bbc:	970d      	str	r7, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004bbe:	b175      	cbz	r5, 8004bde <copy_G+0x186>
 8004bc0:	9f04      	ldr	r7, [sp, #16]
 8004bc2:	2f00      	cmp	r7, #0
 8004bc4:	d173      	bne.n	8004cae <copy_G+0x256>
 8004bc6:	b155      	cbz	r5, 8004bde <copy_G+0x186>
 8004bc8:	9f05      	ldr	r7, [sp, #20]
 8004bca:	2f00      	cmp	r7, #0
 8004bcc:	d166      	bne.n	8004c9c <copy_G+0x244>
 8004bce:	b135      	cbz	r5, 8004bde <copy_G+0x186>
 8004bd0:	9f02      	ldr	r7, [sp, #8]
 8004bd2:	b127      	cbz	r7, 8004bde <copy_G+0x186>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004bd4:	9f06      	ldr	r7, [sp, #24]
 8004bd6:	eb0e 0a07 	add.w	sl, lr, r7
 8004bda:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004bde:	9f01      	ldr	r7, [sp, #4]
 8004be0:	b10f      	cbz	r7, 8004be6 <copy_G+0x18e>
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	d15f      	bne.n	8004ca6 <copy_G+0x24e>
    int pixel_x = x_base + x + offset;
 8004be6:	3105      	adds	r1, #5
 8004be8:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004bea:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8004bee:	bf2c      	ite	cs
 8004bf0:	2400      	movcs	r4, #0
 8004bf2:	2401      	movcc	r4, #1
 8004bf4:	b194      	cbz	r4, 8004c1c <copy_G+0x1c4>
 8004bf6:	9d07      	ldr	r5, [sp, #28]
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	f040 80b7 	bne.w	8004d6c <copy_G+0x314>
 8004bfe:	b16c      	cbz	r4, 8004c1c <copy_G+0x1c4>
 8004c00:	9d08      	ldr	r5, [sp, #32]
 8004c02:	2d00      	cmp	r5, #0
 8004c04:	f040 80cd 	bne.w	8004da2 <copy_G+0x34a>
 8004c08:	b144      	cbz	r4, 8004c1c <copy_G+0x1c4>
 8004c0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	f040 80c0 	bne.w	8004d92 <copy_G+0x33a>
 8004c12:	b11c      	cbz	r4, 8004c1c <copy_G+0x1c4>
 8004c14:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8004c16:	2d00      	cmp	r5, #0
 8004c18:	f040 80af 	bne.w	8004d7a <copy_G+0x322>
 8004c1c:	9d03      	ldr	r5, [sp, #12]
 8004c1e:	b115      	cbz	r5, 8004c26 <copy_G+0x1ce>
 8004c20:	2c00      	cmp	r4, #0
 8004c22:	f040 80c5 	bne.w	8004db0 <copy_G+0x358>
 8004c26:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8004c2a:	d202      	bcs.n	8004c32 <copy_G+0x1da>
 8004c2c:	2c00      	cmp	r4, #0
 8004c2e:	f040 80ca 	bne.w	8004dc6 <copy_G+0x36e>
 8004c32:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004c36:	bf2c      	ite	cs
 8004c38:	2500      	movcs	r5, #0
 8004c3a:	2501      	movcc	r5, #1
 8004c3c:	b115      	cbz	r5, 8004c44 <copy_G+0x1ec>
 8004c3e:	9a02      	ldr	r2, [sp, #8]
 8004c40:	2a00      	cmp	r2, #0
 8004c42:	d14c      	bne.n	8004cde <copy_G+0x286>
 8004c44:	9a01      	ldr	r2, [sp, #4]
 8004c46:	b10a      	cbz	r2, 8004c4c <copy_G+0x1f4>
 8004c48:	2d00      	cmp	r5, #0
 8004c4a:	d141      	bne.n	8004cd0 <copy_G+0x278>
 8004c4c:	b104      	cbz	r4, 8004c50 <copy_G+0x1f8>
 8004c4e:	bba5      	cbnz	r5, 8004cba <copy_G+0x262>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
    for (int i = 6; i < 12; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 3; i < 6; i++) fill_pixel(buffer, x, y, i, 6, color);
}
 8004c50:	b00f      	add	sp, #60	@ 0x3c
 8004c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004c56:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8004c5a:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 8004c5e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8004c62:	e737      	b.n	8004ad4 <copy_G+0x7c>
 8004c64:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8004c68:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8004c6c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004c70:	e723      	b.n	8004aba <copy_G+0x62>
 8004c72:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8004c76:	eb08 1646 	add.w	r6, r8, r6, lsl #5
 8004c7a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004c7e:	e70f      	b.n	8004aa0 <copy_G+0x48>
 8004c80:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8004c84:	eb0a 1646 	add.w	r6, sl, r6, lsl #5
 8004c88:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004c8c:	e6fb      	b.n	8004a86 <copy_G+0x2e>
 8004c8e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004c92:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004c96:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004c9a:	e729      	b.n	8004af0 <copy_G+0x98>
 8004c9c:	eb0e 0a08 	add.w	sl, lr, r8
 8004ca0:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8004ca4:	e793      	b.n	8004bce <copy_G+0x176>
 8004ca6:	44de      	add	lr, fp
 8004ca8:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8004cac:	e79b      	b.n	8004be6 <copy_G+0x18e>
 8004cae:	44f2      	add	sl, lr
 8004cb0:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	d187      	bne.n	8004bc8 <copy_G+0x170>
 8004cb8:	e791      	b.n	8004bde <copy_G+0x186>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004cba:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004cbe:	eb01 114c 	add.w	r1, r1, ip, lsl #5
 8004cc2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8004cc6:	b00f      	add	sp, #60	@ 0x3c
 8004cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ccc:	240001b8 	.word	0x240001b8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004cd0:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
 8004cd4:	eb0b 1242 	add.w	r2, fp, r2, lsl #5
 8004cd8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8004cdc:	e7b6      	b.n	8004c4c <copy_G+0x1f4>
 8004cde:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
 8004ce2:	9e06      	ldr	r6, [sp, #24]
 8004ce4:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 8004ce8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8004cec:	e7aa      	b.n	8004c44 <copy_G+0x1ec>
 8004cee:	ebc6 1506 	rsb	r5, r6, r6, lsl #4
 8004cf2:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 8004cf6:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8004cfa:	e753      	b.n	8004ba4 <copy_G+0x14c>
 8004cfc:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004d00:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004d04:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d08:	e740      	b.n	8004b8c <copy_G+0x134>
 8004d0a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004d0e:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004d12:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d16:	e72c      	b.n	8004b72 <copy_G+0x11a>
 8004d18:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 8004d1c:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004d20:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d24:	e718      	b.n	8004b58 <copy_G+0x100>
 8004d26:	ebcc 160c 	rsb	r6, ip, ip, lsl #4
 8004d2a:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004d2e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d32:	e705      	b.n	8004b40 <copy_G+0xe8>
 8004d34:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004d38:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004d3c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d40:	e6f2      	b.n	8004b28 <copy_G+0xd0>
 8004d42:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004d46:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004d4a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d4e:	e6e4      	b.n	8004b1a <copy_G+0xc2>
 8004d50:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004d54:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004d58:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d5c:	e6d6      	b.n	8004b0c <copy_G+0xb4>
 8004d5e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004d62:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004d66:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d6a:	e6c8      	b.n	8004afe <copy_G+0xa6>
 8004d6c:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
 8004d70:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8004d74:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8004d78:	e741      	b.n	8004bfe <copy_G+0x1a6>
 8004d7a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004d7c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8004d80:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8004d84:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004d88:	9d03      	ldr	r5, [sp, #12]
 8004d8a:	2d00      	cmp	r5, #0
 8004d8c:	f47f af48 	bne.w	8004c20 <copy_G+0x1c8>
 8004d90:	e749      	b.n	8004c26 <copy_G+0x1ce>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004d92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004d94:	ebc5 1805 	rsb	r8, r5, r5, lsl #4
 8004d98:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 8004d9c:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8004da0:	e737      	b.n	8004c12 <copy_G+0x1ba>
 8004da2:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8004da6:	eb01 1949 	add.w	r9, r1, r9, lsl #5
 8004daa:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8004dae:	e72b      	b.n	8004c08 <copy_G+0x1b0>
 8004db0:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004db4:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004db8:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8004dbc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004dc0:	f4ff af34 	bcc.w	8004c2c <copy_G+0x1d4>
 8004dc4:	e735      	b.n	8004c32 <copy_G+0x1da>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004dc6:	0115      	lsls	r5, r2, #4
 8004dc8:	1aaa      	subs	r2, r5, r2
 8004dca:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8004dce:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8004dd2:	e72e      	b.n	8004c32 <copy_G+0x1da>

08004dd4 <copy_H>:

void copy_H(uint16_t* buffer, int x, int y, uint32_t color)
{
 8004dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8004dd8:	4c9c      	ldr	r4, [pc, #624]	@ (800504c <copy_H+0x278>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004dda:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8004dde:	b093      	sub	sp, #76	@ 0x4c
    int pixel_x = x_base + x + offset;
 8004de0:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004de2:	bf2c      	ite	cs
 8004de4:	2400      	movcs	r4, #0
 8004de6:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 8004de8:	eb01 0e05 	add.w	lr, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004dec:	4626      	mov	r6, r4
 8004dee:	9403      	str	r4, [sp, #12]
 8004df0:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8004df4:	bf2c      	ite	cs
 8004df6:	2400      	movcs	r4, #0
 8004df8:	2401      	movcc	r4, #1
 8004dfa:	b114      	cbz	r4, 8004e02 <copy_H+0x2e>
 8004dfc:	2e00      	cmp	r6, #0
 8004dfe:	f040 8151 	bne.w	80050a4 <copy_H+0x2d0>
    int pixel_y = y_base + y;
 8004e02:	f102 0901 	add.w	r9, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e06:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8004e0a:	bf2c      	ite	cs
 8004e0c:	2600      	movcs	r6, #0
 8004e0e:	2601      	movcc	r6, #1
 8004e10:	9604      	str	r6, [sp, #16]
 8004e12:	b114      	cbz	r4, 8004e1a <copy_H+0x46>
 8004e14:	2e00      	cmp	r6, #0
 8004e16:	f040 813e 	bne.w	8005096 <copy_H+0x2c2>
    int pixel_y = y_base + y;
 8004e1a:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e1c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004e20:	960e      	str	r6, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e22:	bf2c      	ite	cs
 8004e24:	2700      	movcs	r7, #0
 8004e26:	2701      	movcc	r7, #1
 8004e28:	9705      	str	r7, [sp, #20]
 8004e2a:	b114      	cbz	r4, 8004e32 <copy_H+0x5e>
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	f040 812b 	bne.w	8005088 <copy_H+0x2b4>
    int pixel_y = y_base + y;
 8004e32:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e34:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004e38:	960f      	str	r6, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e3a:	bf2c      	ite	cs
 8004e3c:	2700      	movcs	r7, #0
 8004e3e:	2701      	movcc	r7, #1
 8004e40:	9706      	str	r7, [sp, #24]
 8004e42:	b114      	cbz	r4, 8004e4a <copy_H+0x76>
 8004e44:	2f00      	cmp	r7, #0
 8004e46:	f040 8118 	bne.w	800507a <copy_H+0x2a6>
    int pixel_y = y_base + y;
 8004e4a:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e4c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004e50:	9610      	str	r6, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e52:	bf2c      	ite	cs
 8004e54:	2700      	movcs	r7, #0
 8004e56:	2701      	movcc	r7, #1
 8004e58:	9707      	str	r7, [sp, #28]
 8004e5a:	b114      	cbz	r4, 8004e62 <copy_H+0x8e>
 8004e5c:	2f00      	cmp	r7, #0
 8004e5e:	f040 8105 	bne.w	800506c <copy_H+0x298>
    int pixel_y = y_base + y;
 8004e62:	f102 0c05 	add.w	ip, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e66:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004e6a:	bf2c      	ite	cs
 8004e6c:	2600      	movcs	r6, #0
 8004e6e:	2601      	movcc	r6, #1
 8004e70:	9600      	str	r6, [sp, #0]
 8004e72:	b114      	cbz	r4, 8004e7a <copy_H+0xa6>
 8004e74:	2e00      	cmp	r6, #0
 8004e76:	f040 80f2 	bne.w	800505e <copy_H+0x28a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004e7a:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8004e7e:	9601      	str	r6, [sp, #4]
    int pixel_y = y_base + y;
 8004e80:	1d96      	adds	r6, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e82:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004e86:	9611      	str	r6, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e88:	bf2c      	ite	cs
 8004e8a:	2700      	movcs	r7, #0
 8004e8c:	2701      	movcc	r7, #1
 8004e8e:	9708      	str	r7, [sp, #32]
 8004e90:	b114      	cbz	r4, 8004e98 <copy_H+0xc4>
 8004e92:	2f00      	cmp	r7, #0
 8004e94:	f040 80dc 	bne.w	8005050 <copy_H+0x27c>
    int pixel_y = y_base + y;
 8004e98:	f102 0b07 	add.w	fp, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e9c:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8004ea0:	bf2c      	ite	cs
 8004ea2:	2600      	movcs	r6, #0
 8004ea4:	2601      	movcc	r6, #1
 8004ea6:	9609      	str	r6, [sp, #36]	@ 0x24
 8004ea8:	b114      	cbz	r4, 8004eb0 <copy_H+0xdc>
 8004eaa:	2e00      	cmp	r6, #0
 8004eac:	f040 80c6 	bne.w	800503c <copy_H+0x268>
    int pixel_y = y_base + y;
 8004eb0:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004eb4:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8004eb8:	bf2c      	ite	cs
 8004eba:	2600      	movcs	r6, #0
 8004ebc:	2601      	movcc	r6, #1
 8004ebe:	960a      	str	r6, [sp, #40]	@ 0x28
 8004ec0:	b114      	cbz	r4, 8004ec8 <copy_H+0xf4>
 8004ec2:	2e00      	cmp	r6, #0
 8004ec4:	f040 80b3 	bne.w	800502e <copy_H+0x25a>
    int pixel_y = y_base + y;
 8004ec8:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004ecc:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8004ed0:	bf2c      	ite	cs
 8004ed2:	2600      	movcs	r6, #0
 8004ed4:	2601      	movcc	r6, #1
 8004ed6:	960b      	str	r6, [sp, #44]	@ 0x2c
 8004ed8:	b114      	cbz	r4, 8004ee0 <copy_H+0x10c>
 8004eda:	2e00      	cmp	r6, #0
 8004edc:	f040 80a0 	bne.w	8005020 <copy_H+0x24c>
    int pixel_y = y_base + y;
 8004ee0:	f102 060a 	add.w	r6, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004ee4:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004ee8:	960d      	str	r6, [sp, #52]	@ 0x34
 8004eea:	bf2c      	ite	cs
 8004eec:	2600      	movcs	r6, #0
 8004eee:	2601      	movcc	r6, #1
 8004ef0:	960c      	str	r6, [sp, #48]	@ 0x30
 8004ef2:	b114      	cbz	r4, 8004efa <copy_H+0x126>
 8004ef4:	2e00      	cmp	r6, #0
 8004ef6:	f040 808b 	bne.w	8005010 <copy_H+0x23c>
    int pixel_y = y_base + y;
 8004efa:	f102 0a0b 	add.w	sl, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004efe:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8004f02:	bf2c      	ite	cs
 8004f04:	2600      	movcs	r6, #0
 8004f06:	2601      	movcc	r6, #1
 8004f08:	9602      	str	r6, [sp, #8]
 8004f0a:	b10c      	cbz	r4, 8004f10 <copy_H+0x13c>
 8004f0c:	2e00      	cmp	r6, #0
 8004f0e:	d178      	bne.n	8005002 <copy_H+0x22e>
    int pixel_x = x_base + x + offset;
 8004f10:	f101 0e05 	add.w	lr, r1, #5
 8004f14:	44ae      	add	lr, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f16:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8004f1a:	bf2c      	ite	cs
 8004f1c:	2400      	movcs	r4, #0
 8004f1e:	2401      	movcc	r4, #1
 8004f20:	2c00      	cmp	r4, #0
 8004f22:	d03c      	beq.n	8004f9e <copy_H+0x1ca>
 8004f24:	9e03      	ldr	r6, [sp, #12]
 8004f26:	2e00      	cmp	r6, #0
 8004f28:	f040 80c3 	bne.w	80050b2 <copy_H+0x2de>
 8004f2c:	2c00      	cmp	r4, #0
 8004f2e:	d036      	beq.n	8004f9e <copy_H+0x1ca>
 8004f30:	9a04      	ldr	r2, [sp, #16]
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	f040 80fd 	bne.w	8005132 <copy_H+0x35e>
 8004f38:	2c00      	cmp	r4, #0
 8004f3a:	d030      	beq.n	8004f9e <copy_H+0x1ca>
 8004f3c:	9a05      	ldr	r2, [sp, #20]
 8004f3e:	2a00      	cmp	r2, #0
 8004f40:	f040 80ef 	bne.w	8005122 <copy_H+0x34e>
 8004f44:	b35c      	cbz	r4, 8004f9e <copy_H+0x1ca>
 8004f46:	9a06      	ldr	r2, [sp, #24]
 8004f48:	2a00      	cmp	r2, #0
 8004f4a:	f040 8111 	bne.w	8005170 <copy_H+0x39c>
 8004f4e:	b334      	cbz	r4, 8004f9e <copy_H+0x1ca>
 8004f50:	9a07      	ldr	r2, [sp, #28]
 8004f52:	2a00      	cmp	r2, #0
 8004f54:	f040 8104 	bne.w	8005160 <copy_H+0x38c>
 8004f58:	b30c      	cbz	r4, 8004f9e <copy_H+0x1ca>
 8004f5a:	9a00      	ldr	r2, [sp, #0]
 8004f5c:	2a00      	cmp	r2, #0
 8004f5e:	f040 80f7 	bne.w	8005150 <copy_H+0x37c>
 8004f62:	b1e4      	cbz	r4, 8004f9e <copy_H+0x1ca>
 8004f64:	9a08      	ldr	r2, [sp, #32]
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	f040 80ea 	bne.w	8005140 <copy_H+0x36c>
 8004f6c:	b1bc      	cbz	r4, 8004f9e <copy_H+0x1ca>
 8004f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f70:	2a00      	cmp	r2, #0
 8004f72:	f040 80af 	bne.w	80050d4 <copy_H+0x300>
 8004f76:	b194      	cbz	r4, 8004f9e <copy_H+0x1ca>
 8004f78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	f040 80a3 	bne.w	80050c6 <copy_H+0x2f2>
 8004f80:	b16c      	cbz	r4, 8004f9e <copy_H+0x1ca>
 8004f82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f84:	2a00      	cmp	r2, #0
 8004f86:	f040 80c5 	bne.w	8005114 <copy_H+0x340>
 8004f8a:	b144      	cbz	r4, 8004f9e <copy_H+0x1ca>
 8004f8c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004f8e:	b132      	cbz	r2, 8004f9e <copy_H+0x1ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004f90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004f92:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8004f96:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004f9a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f9e:	9a02      	ldr	r2, [sp, #8]
 8004fa0:	b112      	cbz	r2, 8004fa8 <copy_H+0x1d4>
 8004fa2:	2c00      	cmp	r4, #0
 8004fa4:	f040 80a9 	bne.w	80050fa <copy_H+0x326>
    int pixel_x = x_base + x + offset;
 8004fa8:	1c4c      	adds	r4, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004faa:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004fae:	9a01      	ldr	r2, [sp, #4]
    int pixel_x = x_base + x + offset;
 8004fb0:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004fb2:	bf28      	it	cs
 8004fb4:	2600      	movcs	r6, #0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004fb6:	eba2 020c 	sub.w	r2, r2, ip
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004fba:	bf38      	it	cc
 8004fbc:	2601      	movcc	r6, #1
 8004fbe:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004fc2:	ea4f 1242 	mov.w	r2, r2, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004fc6:	d202      	bcs.n	8004fce <copy_H+0x1fa>
 8004fc8:	2e00      	cmp	r6, #0
 8004fca:	f040 8092 	bne.w	80050f2 <copy_H+0x31e>
    int pixel_x = x_base + x + offset;
 8004fce:	1c8c      	adds	r4, r1, #2
 8004fd0:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004fd2:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8004fd6:	d202      	bcs.n	8004fde <copy_H+0x20a>
 8004fd8:	2e00      	cmp	r6, #0
 8004fda:	f040 8086 	bne.w	80050ea <copy_H+0x316>
    int pixel_x = x_base + x + offset;
 8004fde:	1ccc      	adds	r4, r1, #3
 8004fe0:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004fe2:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8004fe6:	d201      	bcs.n	8004fec <copy_H+0x218>
 8004fe8:	2e00      	cmp	r6, #0
 8004fea:	d17a      	bne.n	80050e2 <copy_H+0x30e>
    int pixel_x = x_base + x + offset;
 8004fec:	3104      	adds	r1, #4
 8004fee:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004ff0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8004ff4:	d202      	bcs.n	8004ffc <copy_H+0x228>
 8004ff6:	2e00      	cmp	r6, #0
 8004ff8:	f040 8086 	bne.w	8005108 <copy_H+0x334>
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 5, color);
}
 8004ffc:	b013      	add	sp, #76	@ 0x4c
 8004ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005002:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 8005006:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 800500a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 800500e:	e77f      	b.n	8004f10 <copy_H+0x13c>
 8005010:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8005012:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 8005016:	eb0e 1a4a 	add.w	sl, lr, sl, lsl #5
 800501a:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 800501e:	e76c      	b.n	8004efa <copy_H+0x126>
 8005020:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 8005024:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005028:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800502c:	e758      	b.n	8004ee0 <copy_H+0x10c>
 800502e:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8005032:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005036:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800503a:	e745      	b.n	8004ec8 <copy_H+0xf4>
 800503c:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 8005040:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005044:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005048:	e732      	b.n	8004eb0 <copy_H+0xdc>
 800504a:	bf00      	nop
 800504c:	240001b8 	.word	0x240001b8
 8005050:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8005054:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005058:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800505c:	e71c      	b.n	8004e98 <copy_H+0xc4>
 800505e:	ebcc 160c 	rsb	r6, ip, ip, lsl #4
 8005062:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005066:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800506a:	e706      	b.n	8004e7a <copy_H+0xa6>
 800506c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8005070:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005074:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005078:	e6f3      	b.n	8004e62 <copy_H+0x8e>
 800507a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800507e:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005082:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005086:	e6e0      	b.n	8004e4a <copy_H+0x76>
 8005088:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800508c:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005090:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005094:	e6cd      	b.n	8004e32 <copy_H+0x5e>
 8005096:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 800509a:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 800509e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80050a2:	e6ba      	b.n	8004e1a <copy_H+0x46>
 80050a4:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80050a8:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 80050ac:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80050b0:	e6a7      	b.n	8004e02 <copy_H+0x2e>
 80050b2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80050b6:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 80050ba:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80050be:	2c00      	cmp	r4, #0
 80050c0:	f47f af36 	bne.w	8004f30 <copy_H+0x15c>
 80050c4:	e76b      	b.n	8004f9e <copy_H+0x1ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80050c6:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80050ca:	eb0e 1848 	add.w	r8, lr, r8, lsl #5
 80050ce:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80050d2:	e755      	b.n	8004f80 <copy_H+0x1ac>
 80050d4:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
 80050d8:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 80050dc:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80050e0:	e749      	b.n	8004f76 <copy_H+0x1a2>
 80050e2:	4414      	add	r4, r2
 80050e4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80050e8:	e780      	b.n	8004fec <copy_H+0x218>
 80050ea:	4414      	add	r4, r2
 80050ec:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80050f0:	e775      	b.n	8004fde <copy_H+0x20a>
 80050f2:	4414      	add	r4, r2
 80050f4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80050f8:	e769      	b.n	8004fce <copy_H+0x1fa>
 80050fa:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80050fe:	eb0e 1e4a 	add.w	lr, lr, sl, lsl #5
 8005102:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005106:	e74f      	b.n	8004fa8 <copy_H+0x1d4>
 8005108:	4411      	add	r1, r2
 800510a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 800510e:	b013      	add	sp, #76	@ 0x4c
 8005110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005114:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005118:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 800511c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005120:	e733      	b.n	8004f8a <copy_H+0x1b6>
 8005122:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005124:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005128:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 800512c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8005130:	e708      	b.n	8004f44 <copy_H+0x170>
 8005132:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8005136:	eb0e 1949 	add.w	r9, lr, r9, lsl #5
 800513a:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800513e:	e6fb      	b.n	8004f38 <copy_H+0x164>
 8005140:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005142:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005146:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 800514a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800514e:	e70d      	b.n	8004f6c <copy_H+0x198>
 8005150:	9a01      	ldr	r2, [sp, #4]
 8005152:	eba2 020c 	sub.w	r2, r2, ip
 8005156:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 800515a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800515e:	e700      	b.n	8004f62 <copy_H+0x18e>
 8005160:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005162:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005166:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 800516a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800516e:	e6f3      	b.n	8004f58 <copy_H+0x184>
 8005170:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005172:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005176:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 800517a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800517e:	e6e6      	b.n	8004f4e <copy_H+0x17a>

08005180 <copy_I>:

void copy_I(uint16_t* buffer, int x, int y, uint32_t color)
{
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8005184:	4c9a      	ldr	r4, [pc, #616]	@ (80053f0 <copy_I+0x270>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005186:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800518a:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
{
 800518e:	b08f      	sub	sp, #60	@ 0x3c
    int pixel_x = x_base + x + offset;
 8005190:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005192:	bf2c      	ite	cs
 8005194:	2600      	movcs	r6, #0
 8005196:	2601      	movcc	r6, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005198:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    int pixel_x = x_base + x + offset;
 800519c:	eb01 0805 	add.w	r8, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80051a0:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80051a4:	bf2c      	ite	cs
 80051a6:	f04f 0900 	movcs.w	r9, #0
 80051aa:	f04f 0901 	movcc.w	r9, #1
 80051ae:	b11e      	cbz	r6, 80051b8 <copy_I+0x38>
 80051b0:	f1b9 0f00 	cmp.w	r9, #0
 80051b4:	f040 8132 	bne.w	800541c <copy_I+0x29c>
    int pixel_x = x_base + x + offset;
 80051b8:	1c4f      	adds	r7, r1, #1
 80051ba:	442f      	add	r7, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80051bc:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80051c0:	9704      	str	r7, [sp, #16]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80051c2:	bf2c      	ite	cs
 80051c4:	2400      	movcs	r4, #0
 80051c6:	2401      	movcc	r4, #1
 80051c8:	9402      	str	r4, [sp, #8]
 80051ca:	b116      	cbz	r6, 80051d2 <copy_I+0x52>
 80051cc:	2c00      	cmp	r4, #0
 80051ce:	f040 8120 	bne.w	8005412 <copy_I+0x292>
    int pixel_x = x_base + x + offset;
 80051d2:	1c8c      	adds	r4, r1, #2
 80051d4:	eb04 0a05 	add.w	sl, r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80051d8:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 80051dc:	bf2c      	ite	cs
 80051de:	2400      	movcs	r4, #0
 80051e0:	2401      	movcc	r4, #1
 80051e2:	b116      	cbz	r6, 80051ea <copy_I+0x6a>
 80051e4:	2c00      	cmp	r4, #0
 80051e6:	f040 810f 	bne.w	8005408 <copy_I+0x288>
    int pixel_x = x_base + x + offset;
 80051ea:	f101 0e03 	add.w	lr, r1, #3
 80051ee:	eb0e 0705 	add.w	r7, lr, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80051f2:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80051f6:	9701      	str	r7, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80051f8:	bf2c      	ite	cs
 80051fa:	f04f 0b00 	movcs.w	fp, #0
 80051fe:	f04f 0b01 	movcc.w	fp, #1
 8005202:	b11e      	cbz	r6, 800520c <copy_I+0x8c>
 8005204:	f1bb 0f00 	cmp.w	fp, #0
 8005208:	f040 80f9 	bne.w	80053fe <copy_I+0x27e>
    int pixel_x = x_base + x + offset;
 800520c:	f101 0e04 	add.w	lr, r1, #4
 8005210:	44ae      	add	lr, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005212:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8005216:	bf2c      	ite	cs
 8005218:	2700      	movcs	r7, #0
 800521a:	2701      	movcc	r7, #1
 800521c:	9703      	str	r7, [sp, #12]
 800521e:	b116      	cbz	r6, 8005226 <copy_I+0xa6>
 8005220:	2f00      	cmp	r7, #0
 8005222:	f040 80e7 	bne.w	80053f4 <copy_I+0x274>
    int pixel_x = x_base + x + offset;
 8005226:	3105      	adds	r1, #5
 8005228:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800522a:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800522e:	bf2c      	ite	cs
 8005230:	2500      	movcs	r5, #0
 8005232:	2501      	movcc	r5, #1
 8005234:	b115      	cbz	r5, 800523c <copy_I+0xbc>
 8005236:	2e00      	cmp	r6, #0
 8005238:	f040 80d5 	bne.w	80053e6 <copy_I+0x266>
 800523c:	f102 060b 	add.w	r6, r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005240:	f50c 5ca5 	add.w	ip, ip, #5280	@ 0x14a0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005244:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8005248:	bf2c      	ite	cs
 800524a:	2600      	movcs	r6, #0
 800524c:	2601      	movcc	r6, #1
 800524e:	b1be      	cbz	r6, 8005280 <copy_I+0x100>
 8005250:	f1b9 0f00 	cmp.w	r9, #0
 8005254:	f040 80e7 	bne.w	8005426 <copy_I+0x2a6>
 8005258:	b196      	cbz	r6, 8005280 <copy_I+0x100>
 800525a:	9f02      	ldr	r7, [sp, #8]
 800525c:	2f00      	cmp	r7, #0
 800525e:	f040 8143 	bne.w	80054e8 <copy_I+0x368>
 8005262:	b16e      	cbz	r6, 8005280 <copy_I+0x100>
 8005264:	2c00      	cmp	r4, #0
 8005266:	f040 813a 	bne.w	80054de <copy_I+0x35e>
 800526a:	b14e      	cbz	r6, 8005280 <copy_I+0x100>
 800526c:	f1bb 0f00 	cmp.w	fp, #0
 8005270:	f040 813f 	bne.w	80054f2 <copy_I+0x372>
 8005274:	b126      	cbz	r6, 8005280 <copy_I+0x100>
 8005276:	9f03      	ldr	r7, [sp, #12]
 8005278:	b117      	cbz	r7, 8005280 <copy_I+0x100>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800527a:	44e6      	add	lr, ip
 800527c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005280:	b115      	cbz	r5, 8005288 <copy_I+0x108>
 8005282:	2e00      	cmp	r6, #0
 8005284:	f040 8180 	bne.w	8005588 <copy_I+0x408>
    int pixel_y = y_base + y;
 8005288:	1c51      	adds	r1, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800528a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 800528e:	9109      	str	r1, [sp, #36]	@ 0x24
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005290:	bf2c      	ite	cs
 8005292:	2500      	movcs	r5, #0
 8005294:	2501      	movcc	r5, #1
 8005296:	9502      	str	r5, [sp, #8]
 8005298:	b115      	cbz	r5, 80052a0 <copy_I+0x120>
 800529a:	2c00      	cmp	r4, #0
 800529c:	f040 816d 	bne.w	800557a <copy_I+0x3fa>
    int pixel_y = y_base + y;
 80052a0:	1c91      	adds	r1, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052a2:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 80052a6:	910a      	str	r1, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052a8:	bf2c      	ite	cs
 80052aa:	2500      	movcs	r5, #0
 80052ac:	2501      	movcc	r5, #1
 80052ae:	9503      	str	r5, [sp, #12]
 80052b0:	b115      	cbz	r5, 80052b8 <copy_I+0x138>
 80052b2:	2c00      	cmp	r4, #0
 80052b4:	f040 815a 	bne.w	800556c <copy_I+0x3ec>
    int pixel_y = y_base + y;
 80052b8:	1cd1      	adds	r1, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052ba:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 80052be:	910b      	str	r1, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052c0:	bf2c      	ite	cs
 80052c2:	2500      	movcs	r5, #0
 80052c4:	2501      	movcc	r5, #1
 80052c6:	9504      	str	r5, [sp, #16]
 80052c8:	b115      	cbz	r5, 80052d0 <copy_I+0x150>
 80052ca:	2c00      	cmp	r4, #0
 80052cc:	f040 8147 	bne.w	800555e <copy_I+0x3de>
    int pixel_y = y_base + y;
 80052d0:	1d11      	adds	r1, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052d2:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 80052d6:	910c      	str	r1, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052d8:	bf2c      	ite	cs
 80052da:	2500      	movcs	r5, #0
 80052dc:	2501      	movcc	r5, #1
 80052de:	9505      	str	r5, [sp, #20]
 80052e0:	b115      	cbz	r5, 80052e8 <copy_I+0x168>
 80052e2:	2c00      	cmp	r4, #0
 80052e4:	f040 8134 	bne.w	8005550 <copy_I+0x3d0>
    int pixel_y = y_base + y;
 80052e8:	f102 0805 	add.w	r8, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052ec:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80052f0:	bf2c      	ite	cs
 80052f2:	2100      	movcs	r1, #0
 80052f4:	2101      	movcc	r1, #1
 80052f6:	9106      	str	r1, [sp, #24]
 80052f8:	b111      	cbz	r1, 8005300 <copy_I+0x180>
 80052fa:	2c00      	cmp	r4, #0
 80052fc:	f040 8121 	bne.w	8005542 <copy_I+0x3c2>
    int pixel_y = y_base + y;
 8005300:	f102 0e06 	add.w	lr, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005304:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005308:	bf2c      	ite	cs
 800530a:	2100      	movcs	r1, #0
 800530c:	2101      	movcc	r1, #1
 800530e:	9107      	str	r1, [sp, #28]
 8005310:	b111      	cbz	r1, 8005318 <copy_I+0x198>
 8005312:	2c00      	cmp	r4, #0
 8005314:	f040 810e 	bne.w	8005534 <copy_I+0x3b4>
    int pixel_y = y_base + y;
 8005318:	f102 0c07 	add.w	ip, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800531c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8005320:	bf2c      	ite	cs
 8005322:	2500      	movcs	r5, #0
 8005324:	2501      	movcc	r5, #1
 8005326:	b115      	cbz	r5, 800532e <copy_I+0x1ae>
 8005328:	2c00      	cmp	r4, #0
 800532a:	f040 80fc 	bne.w	8005526 <copy_I+0x3a6>
    int pixel_y = y_base + y;
 800532e:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005332:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8005336:	910d      	str	r1, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005338:	bf2c      	ite	cs
 800533a:	2700      	movcs	r7, #0
 800533c:	2701      	movcc	r7, #1
 800533e:	b117      	cbz	r7, 8005346 <copy_I+0x1c6>
 8005340:	2c00      	cmp	r4, #0
 8005342:	f040 80e9 	bne.w	8005518 <copy_I+0x398>
    int pixel_y = y_base + y;
 8005346:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800534a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800534e:	bf2c      	ite	cs
 8005350:	2600      	movcs	r6, #0
 8005352:	2601      	movcc	r6, #1
 8005354:	b116      	cbz	r6, 800535c <copy_I+0x1dc>
 8005356:	2c00      	cmp	r4, #0
 8005358:	f040 80d7 	bne.w	800550a <copy_I+0x38a>
    int pixel_y = y_base + y;
 800535c:	320a      	adds	r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800535e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_y = y_base + y;
 8005362:	9208      	str	r2, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005364:	bf2c      	ite	cs
 8005366:	f04f 0900 	movcs.w	r9, #0
 800536a:	f04f 0901 	movcc.w	r9, #1
 800536e:	f1b9 0f00 	cmp.w	r9, #0
 8005372:	d002      	beq.n	800537a <copy_I+0x1fa>
 8005374:	2c00      	cmp	r4, #0
 8005376:	f040 80c1 	bne.w	80054fc <copy_I+0x37c>
 800537a:	9c02      	ldr	r4, [sp, #8]
 800537c:	b11c      	cbz	r4, 8005386 <copy_I+0x206>
 800537e:	f1bb 0f00 	cmp.w	fp, #0
 8005382:	f040 80a3 	bne.w	80054cc <copy_I+0x34c>
 8005386:	9c03      	ldr	r4, [sp, #12]
 8005388:	b11c      	cbz	r4, 8005392 <copy_I+0x212>
 800538a:	f1bb 0f00 	cmp.w	fp, #0
 800538e:	f040 8094 	bne.w	80054ba <copy_I+0x33a>
 8005392:	9c04      	ldr	r4, [sp, #16]
 8005394:	b11c      	cbz	r4, 800539e <copy_I+0x21e>
 8005396:	f1bb 0f00 	cmp.w	fp, #0
 800539a:	f040 8085 	bne.w	80054a8 <copy_I+0x328>
 800539e:	9c05      	ldr	r4, [sp, #20]
 80053a0:	b114      	cbz	r4, 80053a8 <copy_I+0x228>
 80053a2:	f1bb 0f00 	cmp.w	fp, #0
 80053a6:	d176      	bne.n	8005496 <copy_I+0x316>
 80053a8:	9c06      	ldr	r4, [sp, #24]
 80053aa:	b114      	cbz	r4, 80053b2 <copy_I+0x232>
 80053ac:	f1bb 0f00 	cmp.w	fp, #0
 80053b0:	d169      	bne.n	8005486 <copy_I+0x306>
 80053b2:	9c07      	ldr	r4, [sp, #28]
 80053b4:	b114      	cbz	r4, 80053bc <copy_I+0x23c>
 80053b6:	f1bb 0f00 	cmp.w	fp, #0
 80053ba:	d15c      	bne.n	8005476 <copy_I+0x2f6>
 80053bc:	b115      	cbz	r5, 80053c4 <copy_I+0x244>
 80053be:	f1bb 0f00 	cmp.w	fp, #0
 80053c2:	d150      	bne.n	8005466 <copy_I+0x2e6>
 80053c4:	b117      	cbz	r7, 80053cc <copy_I+0x24c>
 80053c6:	f1bb 0f00 	cmp.w	fp, #0
 80053ca:	d143      	bne.n	8005454 <copy_I+0x2d4>
 80053cc:	b116      	cbz	r6, 80053d4 <copy_I+0x254>
 80053ce:	f1bb 0f00 	cmp.w	fp, #0
 80053d2:	d137      	bne.n	8005444 <copy_I+0x2c4>
 80053d4:	f1b9 0f00 	cmp.w	r9, #0
 80053d8:	d002      	beq.n	80053e0 <copy_I+0x260>
 80053da:	f1bb 0f00 	cmp.w	fp, #0
 80053de:	d126      	bne.n	800542e <copy_I+0x2ae>
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 11, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 2, i, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 3, i, color);
}
 80053e0:	b00f      	add	sp, #60	@ 0x3c
 80053e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80053e6:	eb01 060c 	add.w	r6, r1, ip
 80053ea:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80053ee:	e725      	b.n	800523c <copy_I+0xbc>
 80053f0:	240001b8 	.word	0x240001b8
 80053f4:	eb0c 070e 	add.w	r7, ip, lr
 80053f8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80053fc:	e713      	b.n	8005226 <copy_I+0xa6>
 80053fe:	eb0c 0e07 	add.w	lr, ip, r7
 8005402:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005406:	e701      	b.n	800520c <copy_I+0x8c>
 8005408:	eb0c 0e0a 	add.w	lr, ip, sl
 800540c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005410:	e6eb      	b.n	80051ea <copy_I+0x6a>
 8005412:	eb0c 0407 	add.w	r4, ip, r7
 8005416:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800541a:	e6da      	b.n	80051d2 <copy_I+0x52>
 800541c:	eb0c 0408 	add.w	r4, ip, r8
 8005420:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005424:	e6c8      	b.n	80051b8 <copy_I+0x38>
 8005426:	44e0      	add	r8, ip
 8005428:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800542c:	e714      	b.n	8005258 <copy_I+0xd8>
 800542e:	9a08      	ldr	r2, [sp, #32]
 8005430:	9901      	ldr	r1, [sp, #4]
 8005432:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005436:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 800543a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800543e:	b00f      	add	sp, #60	@ 0x3c
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005444:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005448:	9a01      	ldr	r2, [sp, #4]
 800544a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800544e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005452:	e7bf      	b.n	80053d4 <copy_I+0x254>
 8005454:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005456:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800545a:	9a01      	ldr	r2, [sp, #4]
 800545c:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 8005460:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8005464:	e7b2      	b.n	80053cc <copy_I+0x24c>
 8005466:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 800546a:	9a01      	ldr	r2, [sp, #4]
 800546c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8005470:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005474:	e7a6      	b.n	80053c4 <copy_I+0x244>
 8005476:	ebce 140e 	rsb	r4, lr, lr, lsl #4
 800547a:	9a01      	ldr	r2, [sp, #4]
 800547c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8005480:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005484:	e79a      	b.n	80053bc <copy_I+0x23c>
 8005486:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 800548a:	9a01      	ldr	r2, [sp, #4]
 800548c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8005490:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005494:	e78d      	b.n	80053b2 <copy_I+0x232>
 8005496:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005498:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800549c:	9a01      	ldr	r2, [sp, #4]
 800549e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80054a2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80054a6:	e77f      	b.n	80053a8 <copy_I+0x228>
 80054a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80054aa:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 80054ae:	9a01      	ldr	r2, [sp, #4]
 80054b0:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80054b4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80054b8:	e771      	b.n	800539e <copy_I+0x21e>
 80054ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80054bc:	9a01      	ldr	r2, [sp, #4]
 80054be:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 80054c2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80054c6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80054ca:	e762      	b.n	8005392 <copy_I+0x212>
 80054cc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80054ce:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
 80054d2:	9c01      	ldr	r4, [sp, #4]
 80054d4:	eb04 1a4a 	add.w	sl, r4, sl, lsl #5
 80054d8:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80054dc:	e753      	b.n	8005386 <copy_I+0x206>
 80054de:	eb0c 070a 	add.w	r7, ip, sl
 80054e2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80054e6:	e6c0      	b.n	800526a <copy_I+0xea>
 80054e8:	9f04      	ldr	r7, [sp, #16]
 80054ea:	4467      	add	r7, ip
 80054ec:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80054f0:	e6b7      	b.n	8005262 <copy_I+0xe2>
 80054f2:	9f01      	ldr	r7, [sp, #4]
 80054f4:	4467      	add	r7, ip
 80054f6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80054fa:	e6bb      	b.n	8005274 <copy_I+0xf4>
 80054fc:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8005500:	eb0a 1444 	add.w	r4, sl, r4, lsl #5
 8005504:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005508:	e737      	b.n	800537a <copy_I+0x1fa>
 800550a:	ebc1 1901 	rsb	r9, r1, r1, lsl #4
 800550e:	eb0a 1949 	add.w	r9, sl, r9, lsl #5
 8005512:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8005516:	e721      	b.n	800535c <copy_I+0x1dc>
 8005518:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800551c:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8005520:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005524:	e70f      	b.n	8005346 <copy_I+0x1c6>
 8005526:	ebcc 110c 	rsb	r1, ip, ip, lsl #4
 800552a:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 800552e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005532:	e6fc      	b.n	800532e <copy_I+0x1ae>
 8005534:	ebce 110e 	rsb	r1, lr, lr, lsl #4
 8005538:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 800553c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005540:	e6ea      	b.n	8005318 <copy_I+0x198>
 8005542:	ebc8 1108 	rsb	r1, r8, r8, lsl #4
 8005546:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 800554a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800554e:	e6d7      	b.n	8005300 <copy_I+0x180>
 8005550:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005554:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8005558:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800555c:	e6c4      	b.n	80052e8 <copy_I+0x168>
 800555e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005562:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8005566:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800556a:	e6b1      	b.n	80052d0 <copy_I+0x150>
 800556c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005570:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8005574:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005578:	e69e      	b.n	80052b8 <copy_I+0x138>
 800557a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800557e:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8005582:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005586:	e68b      	b.n	80052a0 <copy_I+0x120>
 8005588:	4461      	add	r1, ip
 800558a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800558e:	e67b      	b.n	8005288 <copy_I+0x108>

08005590 <copy_J>:

void copy_J(uint16_t* buffer, int x, int y, uint32_t color)
{
 8005590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8005594:	4cab      	ldr	r4, [pc, #684]	@ (8005844 <copy_J+0x2b4>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005596:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800559a:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
{
 800559e:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 80055a0:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80055a2:	bf2c      	ite	cs
 80055a4:	2500      	movcs	r5, #0
 80055a6:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80055a8:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    int pixel_x = x_base + x + offset;
 80055ac:	eb01 0904 	add.w	r9, r1, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80055b0:	ea4f 1b02 	mov.w	fp, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80055b4:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 80055b8:	bf2c      	ite	cs
 80055ba:	f04f 0a00 	movcs.w	sl, #0
 80055be:	f04f 0a01 	movcc.w	sl, #1
 80055c2:	b11d      	cbz	r5, 80055cc <copy_J+0x3c>
 80055c4:	f1ba 0f00 	cmp.w	sl, #0
 80055c8:	f040 80cb 	bne.w	8005762 <copy_J+0x1d2>
    int pixel_x = x_base + x + offset;
 80055cc:	f101 0801 	add.w	r8, r1, #1
 80055d0:	44a0      	add	r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80055d2:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80055d6:	bf2c      	ite	cs
 80055d8:	2600      	movcs	r6, #0
 80055da:	2601      	movcc	r6, #1
 80055dc:	9600      	str	r6, [sp, #0]
 80055de:	b115      	cbz	r5, 80055e6 <copy_J+0x56>
 80055e0:	2e00      	cmp	r6, #0
 80055e2:	f040 80b9 	bne.w	8005758 <copy_J+0x1c8>
    int pixel_x = x_base + x + offset;
 80055e6:	1c8f      	adds	r7, r1, #2
 80055e8:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80055ea:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80055ee:	bf2c      	ite	cs
 80055f0:	2600      	movcs	r6, #0
 80055f2:	2601      	movcc	r6, #1
 80055f4:	9601      	str	r6, [sp, #4]
 80055f6:	b115      	cbz	r5, 80055fe <copy_J+0x6e>
 80055f8:	2e00      	cmp	r6, #0
 80055fa:	f040 809a 	bne.w	8005732 <copy_J+0x1a2>
    int pixel_x = x_base + x + offset;
 80055fe:	1cce      	adds	r6, r1, #3
 8005600:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005602:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8005606:	9603      	str	r6, [sp, #12]
 8005608:	bf2c      	ite	cs
 800560a:	2600      	movcs	r6, #0
 800560c:	2601      	movcc	r6, #1
 800560e:	9602      	str	r6, [sp, #8]
 8005610:	b115      	cbz	r5, 8005618 <copy_J+0x88>
 8005612:	2e00      	cmp	r6, #0
 8005614:	f040 8088 	bne.w	8005728 <copy_J+0x198>
    int pixel_x = x_base + x + offset;
 8005618:	f101 0e04 	add.w	lr, r1, #4
 800561c:	3105      	adds	r1, #5
 800561e:	44a6      	add	lr, r4
 8005620:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005622:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8005626:	bf2c      	ite	cs
 8005628:	2600      	movcs	r6, #0
 800562a:	2601      	movcc	r6, #1
 800562c:	b115      	cbz	r5, 8005634 <copy_J+0xa4>
 800562e:	2e00      	cmp	r6, #0
 8005630:	f040 8084 	bne.w	800573c <copy_J+0x1ac>
 8005634:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005638:	d202      	bcs.n	8005640 <copy_J+0xb0>
 800563a:	2d00      	cmp	r5, #0
 800563c:	f040 80f9 	bne.w	8005832 <copy_J+0x2a2>
    int pixel_y = y_base + y;
 8005640:	1c51      	adds	r1, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005642:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005646:	d202      	bcs.n	800564e <copy_J+0xbe>
 8005648:	2e00      	cmp	r6, #0
 800564a:	f040 80dc 	bne.w	8005806 <copy_J+0x276>
    int pixel_y = y_base + y;
 800564e:	1c91      	adds	r1, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005650:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005654:	d202      	bcs.n	800565c <copy_J+0xcc>
 8005656:	2e00      	cmp	r6, #0
 8005658:	f040 80ce 	bne.w	80057f8 <copy_J+0x268>
    int pixel_y = y_base + y;
 800565c:	1cd1      	adds	r1, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800565e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005662:	d202      	bcs.n	800566a <copy_J+0xda>
 8005664:	2e00      	cmp	r6, #0
 8005666:	f040 80c0 	bne.w	80057ea <copy_J+0x25a>
    int pixel_y = y_base + y;
 800566a:	1d11      	adds	r1, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800566c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005670:	d202      	bcs.n	8005678 <copy_J+0xe8>
 8005672:	2e00      	cmp	r6, #0
 8005674:	f040 80b2 	bne.w	80057dc <copy_J+0x24c>
    int pixel_y = y_base + y;
 8005678:	1d51      	adds	r1, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800567a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800567e:	d202      	bcs.n	8005686 <copy_J+0xf6>
 8005680:	2e00      	cmp	r6, #0
 8005682:	f040 80a4 	bne.w	80057ce <copy_J+0x23e>
    int pixel_y = y_base + y;
 8005686:	1d91      	adds	r1, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005688:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800568c:	d202      	bcs.n	8005694 <copy_J+0x104>
 800568e:	2e00      	cmp	r6, #0
 8005690:	f040 8096 	bne.w	80057c0 <copy_J+0x230>
    int pixel_y = y_base + y;
 8005694:	1dd1      	adds	r1, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005696:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800569a:	d202      	bcs.n	80056a2 <copy_J+0x112>
 800569c:	2e00      	cmp	r6, #0
 800569e:	f040 8088 	bne.w	80057b2 <copy_J+0x222>
    int pixel_y = y_base + y;
 80056a2:	f102 0408 	add.w	r4, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80056a6:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 80056aa:	bf2c      	ite	cs
 80056ac:	f04f 0b00 	movcs.w	fp, #0
 80056b0:	f04f 0b01 	movcc.w	fp, #1
 80056b4:	f1bb 0f00 	cmp.w	fp, #0
 80056b8:	d001      	beq.n	80056be <copy_J+0x12e>
 80056ba:	2e00      	cmp	r6, #0
 80056bc:	d172      	bne.n	80057a4 <copy_J+0x214>
    int pixel_y = y_base + y;
 80056be:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80056c2:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80056c6:	bf2c      	ite	cs
 80056c8:	2500      	movcs	r5, #0
 80056ca:	2501      	movcc	r5, #1
 80056cc:	b10d      	cbz	r5, 80056d2 <copy_J+0x142>
 80056ce:	2e00      	cmp	r6, #0
 80056d0:	d161      	bne.n	8005796 <copy_J+0x206>
 80056d2:	f1bb 0f00 	cmp.w	fp, #0
 80056d6:	d002      	beq.n	80056de <copy_J+0x14e>
 80056d8:	f1ba 0f00 	cmp.w	sl, #0
 80056dc:	d154      	bne.n	8005788 <copy_J+0x1f8>
 80056de:	b115      	cbz	r5, 80056e6 <copy_J+0x156>
 80056e0:	f1ba 0f00 	cmp.w	sl, #0
 80056e4:	d149      	bne.n	800577a <copy_J+0x1ea>
    int pixel_y = y_base + y;
 80056e6:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80056ea:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80056ee:	d202      	bcs.n	80056f6 <copy_J+0x166>
 80056f0:	f1ba 0f00 	cmp.w	sl, #0
 80056f4:	d13a      	bne.n	800576c <copy_J+0x1dc>
 80056f6:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80056f8:	f50c 5ca5 	add.w	ip, ip, #5280	@ 0x14a0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80056fc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8005700:	bf2c      	ite	cs
 8005702:	2200      	movcs	r2, #0
 8005704:	2201      	movcc	r2, #1
 8005706:	b162      	cbz	r2, 8005722 <copy_J+0x192>
 8005708:	9900      	ldr	r1, [sp, #0]
 800570a:	2900      	cmp	r1, #0
 800570c:	f040 8082 	bne.w	8005814 <copy_J+0x284>
 8005710:	b13a      	cbz	r2, 8005722 <copy_J+0x192>
 8005712:	9901      	ldr	r1, [sp, #4]
 8005714:	2900      	cmp	r1, #0
 8005716:	f040 8088 	bne.w	800582a <copy_J+0x29a>
 800571a:	b112      	cbz	r2, 8005722 <copy_J+0x192>
 800571c:	9a02      	ldr	r2, [sp, #8]
 800571e:	2a00      	cmp	r2, #0
 8005720:	d17c      	bne.n	800581c <copy_J+0x28c>
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 0; i < 10; i++) fill_pixel(buffer, x, y, 4, i, color);
    for (int i = 8; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 4; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 8005722:	b005      	add	sp, #20
 8005724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005728:	9e03      	ldr	r6, [sp, #12]
 800572a:	4466      	add	r6, ip
 800572c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005730:	e772      	b.n	8005618 <copy_J+0x88>
 8005732:	eb0c 0607 	add.w	r6, ip, r7
 8005736:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800573a:	e760      	b.n	80055fe <copy_J+0x6e>
 800573c:	eb0c 040e 	add.w	r4, ip, lr
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005740:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005744:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005748:	d377      	bcc.n	800583a <copy_J+0x2aa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800574a:	ebab 0b02 	sub.w	fp, fp, r2
 800574e:	eb0e 1b4b 	add.w	fp, lr, fp, lsl #5
 8005752:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8005756:	e773      	b.n	8005640 <copy_J+0xb0>
 8005758:	eb0c 0608 	add.w	r6, ip, r8
 800575c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005760:	e741      	b.n	80055e6 <copy_J+0x56>
 8005762:	eb0c 0609 	add.w	r6, ip, r9
 8005766:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800576a:	e72f      	b.n	80055cc <copy_J+0x3c>
 800576c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005770:	eb09 1941 	add.w	r9, r9, r1, lsl #5
 8005774:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8005778:	e7bd      	b.n	80056f6 <copy_J+0x166>
 800577a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800577e:	eb09 1141 	add.w	r1, r9, r1, lsl #5
 8005782:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005786:	e7ae      	b.n	80056e6 <copy_J+0x156>
 8005788:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800578c:	eb09 1444 	add.w	r4, r9, r4, lsl #5
 8005790:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005794:	e7a3      	b.n	80056de <copy_J+0x14e>
 8005796:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 800579a:	eb0e 1e46 	add.w	lr, lr, r6, lsl #5
 800579e:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80057a2:	e796      	b.n	80056d2 <copy_J+0x142>
 80057a4:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
 80057a8:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80057ac:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80057b0:	e785      	b.n	80056be <copy_J+0x12e>
 80057b2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80057b6:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80057ba:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80057be:	e770      	b.n	80056a2 <copy_J+0x112>
 80057c0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80057c4:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80057c8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80057cc:	e762      	b.n	8005694 <copy_J+0x104>
 80057ce:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80057d2:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80057d6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80057da:	e754      	b.n	8005686 <copy_J+0xf6>
 80057dc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80057e0:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80057e4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80057e8:	e746      	b.n	8005678 <copy_J+0xe8>
 80057ea:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80057ee:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80057f2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80057f6:	e738      	b.n	800566a <copy_J+0xda>
 80057f8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80057fc:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 8005800:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005804:	e72a      	b.n	800565c <copy_J+0xcc>
 8005806:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800580a:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 800580e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005812:	e71c      	b.n	800564e <copy_J+0xbe>
 8005814:	44e0      	add	r8, ip
 8005816:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800581a:	e779      	b.n	8005710 <copy_J+0x180>
 800581c:	9a03      	ldr	r2, [sp, #12]
 800581e:	4494      	add	ip, r2
 8005820:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
}
 8005824:	b005      	add	sp, #20
 8005826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800582a:	4467      	add	r7, ip
 800582c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005830:	e773      	b.n	800571a <copy_J+0x18a>
 8005832:	4461      	add	r1, ip
 8005834:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005838:	e702      	b.n	8005640 <copy_J+0xb0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800583a:	4461      	add	r1, ip
 800583c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005840:	e783      	b.n	800574a <copy_J+0x1ba>
 8005842:	bf00      	nop
 8005844:	240001b8 	.word	0x240001b8

08005848 <copy_K>:

void copy_K(uint16_t* buffer, int x, int y, uint32_t color)
{
 8005848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800584c:	4cbd      	ldr	r4, [pc, #756]	@ (8005b44 <copy_K+0x2fc>)
{
 800584e:	b087      	sub	sp, #28
    int pixel_x = x_base + x + offset;
 8005850:	6825      	ldr	r5, [r4, #0]
 8005852:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005856:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800585a:	bf2c      	ite	cs
 800585c:	2400      	movcs	r4, #0
 800585e:	2401      	movcc	r4, #1
 8005860:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8005864:	d202      	bcs.n	800586c <copy_K+0x24>
 8005866:	2c00      	cmp	r4, #0
 8005868:	f040 815e 	bne.w	8005b28 <copy_K+0x2e0>
    int pixel_y = y_base + y;
 800586c:	f102 0e01 	add.w	lr, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005870:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005874:	d202      	bcs.n	800587c <copy_K+0x34>
 8005876:	2c00      	cmp	r4, #0
 8005878:	f040 814f 	bne.w	8005b1a <copy_K+0x2d2>
    int pixel_y = y_base + y;
 800587c:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800587e:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8005882:	d202      	bcs.n	800588a <copy_K+0x42>
 8005884:	2c00      	cmp	r4, #0
 8005886:	f040 8141 	bne.w	8005b0c <copy_K+0x2c4>
    int pixel_y = y_base + y;
 800588a:	f102 0a03 	add.w	sl, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800588e:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8005892:	d202      	bcs.n	800589a <copy_K+0x52>
 8005894:	2c00      	cmp	r4, #0
 8005896:	f040 8132 	bne.w	8005afe <copy_K+0x2b6>
    int pixel_y = y_base + y;
 800589a:	f102 0904 	add.w	r9, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800589e:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 80058a2:	d202      	bcs.n	80058aa <copy_K+0x62>
 80058a4:	2c00      	cmp	r4, #0
 80058a6:	f040 8123 	bne.w	8005af0 <copy_K+0x2a8>
    int pixel_y = y_base + y;
 80058aa:	f102 0805 	add.w	r8, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80058ae:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80058b2:	d202      	bcs.n	80058ba <copy_K+0x72>
 80058b4:	2c00      	cmp	r4, #0
 80058b6:	f040 8114 	bne.w	8005ae2 <copy_K+0x29a>
    int pixel_y = y_base + y;
 80058ba:	f102 0b06 	add.w	fp, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80058be:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 80058c2:	d202      	bcs.n	80058ca <copy_K+0x82>
 80058c4:	2c00      	cmp	r4, #0
 80058c6:	f040 8105 	bne.w	8005ad4 <copy_K+0x28c>
    int pixel_y = y_base + y;
 80058ca:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80058cc:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80058d0:	9702      	str	r7, [sp, #8]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80058d2:	d202      	bcs.n	80058da <copy_K+0x92>
 80058d4:	2c00      	cmp	r4, #0
 80058d6:	f040 80f6 	bne.w	8005ac6 <copy_K+0x27e>
    int pixel_y = y_base + y;
 80058da:	f102 0708 	add.w	r7, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80058de:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80058e2:	9703      	str	r7, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80058e4:	d202      	bcs.n	80058ec <copy_K+0xa4>
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	f040 80e6 	bne.w	8005ab8 <copy_K+0x270>
    int pixel_y = y_base + y;
 80058ec:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80058f0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80058f4:	9704      	str	r7, [sp, #16]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80058f6:	d202      	bcs.n	80058fe <copy_K+0xb6>
 80058f8:	2c00      	cmp	r4, #0
 80058fa:	f040 80d6 	bne.w	8005aaa <copy_K+0x262>
    int pixel_y = y_base + y;
 80058fe:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005902:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005906:	9701      	str	r7, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005908:	d202      	bcs.n	8005910 <copy_K+0xc8>
 800590a:	2c00      	cmp	r4, #0
 800590c:	f040 80c6 	bne.w	8005a9c <copy_K+0x254>
    int pixel_y = y_base + y;
 8005910:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005912:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8005916:	d202      	bcs.n	800591e <copy_K+0xd6>
 8005918:	2c00      	cmp	r4, #0
 800591a:	f040 80b8 	bne.w	8005a8e <copy_K+0x246>
    int pixel_x = x_base + x + offset;
 800591e:	1c4a      	adds	r2, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005920:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8005924:	442a      	add	r2, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005926:	d203      	bcs.n	8005930 <copy_K+0xe8>
 8005928:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 800592c:	f0c0 80a8 	bcc.w	8005a80 <copy_K+0x238>
    int pixel_x = x_base + x + offset;
 8005930:	f101 0802 	add.w	r8, r1, #2
 8005934:	44a8      	add	r8, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005936:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800593a:	bf2c      	ite	cs
 800593c:	2200      	movcs	r2, #0
 800593e:	2201      	movcc	r2, #1
 8005940:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8005944:	9205      	str	r2, [sp, #20]
 8005946:	d202      	bcs.n	800594e <copy_K+0x106>
 8005948:	2a00      	cmp	r2, #0
 800594a:	f040 80f4 	bne.w	8005b36 <copy_K+0x2ee>
    int pixel_x = x_base + x + offset;
 800594e:	f101 0c03 	add.w	ip, r1, #3
 8005952:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005954:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005958:	bf2c      	ite	cs
 800595a:	f04f 0900 	movcs.w	r9, #0
 800595e:	f04f 0901 	movcc.w	r9, #1
 8005962:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8005966:	d203      	bcs.n	8005970 <copy_K+0x128>
 8005968:	f1b9 0f00 	cmp.w	r9, #0
 800596c:	f040 8081 	bne.w	8005a72 <copy_K+0x22a>
    int pixel_x = x_base + x + offset;
 8005970:	1d4a      	adds	r2, r1, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005972:	f240 14df 	movw	r4, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 8005976:	3104      	adds	r1, #4
 8005978:	442a      	add	r2, r5
 800597a:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800597c:	42a2      	cmp	r2, r4
 800597e:	bf8c      	ite	hi
 8005980:	2500      	movhi	r5, #0
 8005982:	2501      	movls	r5, #1
 8005984:	42a1      	cmp	r1, r4
 8005986:	bf8c      	ite	hi
 8005988:	2400      	movhi	r4, #0
 800598a:	2401      	movls	r4, #1
 800598c:	f1be 0f00 	cmp.w	lr, #0
 8005990:	bfb4      	ite	lt
 8005992:	f04f 0a00 	movlt.w	sl, #0
 8005996:	f005 0a01 	andge.w	sl, r5, #1
 800599a:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800599e:	d201      	bcs.n	80059a4 <copy_K+0x15c>
 80059a0:	2c00      	cmp	r4, #0
 80059a2:	d154      	bne.n	8005a4e <copy_K+0x206>
 80059a4:	f1ba 0f00 	cmp.w	sl, #0
 80059a8:	d146      	bne.n	8005a38 <copy_K+0x1f0>
 80059aa:	f1bb 0f00 	cmp.w	fp, #0
 80059ae:	db0a      	blt.n	80059c6 <copy_K+0x17e>
 80059b0:	9e05      	ldr	r6, [sp, #20]
 80059b2:	b146      	cbz	r6, 80059c6 <copy_K+0x17e>
 80059b4:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 80059b8:	da3b      	bge.n	8005a32 <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80059ba:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 80059be:	eb08 1846 	add.w	r8, r8, r6, lsl #5
 80059c2:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059c6:	9e02      	ldr	r6, [sp, #8]
 80059c8:	2e00      	cmp	r6, #0
 80059ca:	db0b      	blt.n	80059e4 <copy_K+0x19c>
 80059cc:	f1b9 0f00 	cmp.w	r9, #0
 80059d0:	d008      	beq.n	80059e4 <copy_K+0x19c>
 80059d2:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 80059d6:	da2c      	bge.n	8005a32 <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80059d8:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80059dc:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 80059e0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059e4:	9e03      	ldr	r6, [sp, #12]
 80059e6:	2e00      	cmp	r6, #0
 80059e8:	db09      	blt.n	80059fe <copy_K+0x1b6>
 80059ea:	b144      	cbz	r4, 80059fe <copy_K+0x1b6>
 80059ec:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 80059f0:	da1f      	bge.n	8005a32 <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80059f2:	ebc6 1406 	rsb	r4, r6, r6, lsl #4
 80059f6:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 80059fa:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059fe:	9904      	ldr	r1, [sp, #16]
 8005a00:	2900      	cmp	r1, #0
 8005a02:	f2c0 80a1 	blt.w	8005b48 <copy_K+0x300>
 8005a06:	2d00      	cmp	r5, #0
 8005a08:	f000 809e 	beq.w	8005b48 <copy_K+0x300>
 8005a0c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005a10:	da0f      	bge.n	8005a32 <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005a12:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005a16:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8005a1a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005a1e:	9901      	ldr	r1, [sp, #4]
 8005a20:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005a24:	da05      	bge.n	8005a32 <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005a26:	ebc1 1701 	rsb	r7, r1, r1, lsl #4
 8005a2a:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8005a2e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 2, 6, color);
    fill_pixel(buffer, x, y, 3, 7, color);
    fill_pixel(buffer, x, y, 4, 8, color);
    fill_pixel(buffer, x, y, 5, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
}
 8005a32:	b007      	add	sp, #28
 8005a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005a38:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005a3c:	daf9      	bge.n	8005a32 <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005a3e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005a42:	b29e      	uxth	r6, r3
 8005a44:	eb02 1e4e 	add.w	lr, r2, lr, lsl #5
 8005a48:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
 8005a4c:	e7ad      	b.n	80059aa <copy_K+0x162>
 8005a4e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8005a52:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8005a56:	4637      	mov	r7, r6
 8005a58:	b29e      	uxth	r6, r3
 8005a5a:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005a5e:	f1ba 0f00 	cmp.w	sl, #0
 8005a62:	d0a2      	beq.n	80059aa <copy_K+0x162>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005a64:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005a68:	eb02 1e4e 	add.w	lr, r2, lr, lsl #5
 8005a6c:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
 8005a70:	e79b      	b.n	80059aa <copy_K+0x162>
 8005a72:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8005a76:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 8005a7a:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8005a7e:	e777      	b.n	8005970 <copy_K+0x128>
 8005a80:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8005a84:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 8005a88:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8005a8c:	e750      	b.n	8005930 <copy_K+0xe8>
 8005a8e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005a92:	eb0c 1c42 	add.w	ip, ip, r2, lsl #5
 8005a96:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005a9a:	e740      	b.n	800591e <copy_K+0xd6>
 8005a9c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005aa0:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005aa4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005aa8:	e732      	b.n	8005910 <copy_K+0xc8>
 8005aaa:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005aae:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005ab2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005ab6:	e722      	b.n	80058fe <copy_K+0xb6>
 8005ab8:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005abc:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005ac0:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005ac4:	e712      	b.n	80058ec <copy_K+0xa4>
 8005ac6:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005aca:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005ace:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005ad2:	e702      	b.n	80058da <copy_K+0x92>
 8005ad4:	ebcb 170b 	rsb	r7, fp, fp, lsl #4
 8005ad8:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005adc:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005ae0:	e6f3      	b.n	80058ca <copy_K+0x82>
 8005ae2:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 8005ae6:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005aea:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005aee:	e6e4      	b.n	80058ba <copy_K+0x72>
 8005af0:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 8005af4:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005af8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005afc:	e6d5      	b.n	80058aa <copy_K+0x62>
 8005afe:	ebca 170a 	rsb	r7, sl, sl, lsl #4
 8005b02:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005b06:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005b0a:	e6c6      	b.n	800589a <copy_K+0x52>
 8005b0c:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 8005b10:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005b14:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005b18:	e6b7      	b.n	800588a <copy_K+0x42>
 8005b1a:	ebce 160e 	rsb	r6, lr, lr, lsl #4
 8005b1e:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8005b22:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005b26:	e6a9      	b.n	800587c <copy_K+0x34>
 8005b28:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8005b2c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8005b30:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005b34:	e69a      	b.n	800586c <copy_K+0x24>
 8005b36:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8005b3a:	eb08 1949 	add.w	r9, r8, r9, lsl #5
 8005b3e:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8005b42:	e704      	b.n	800594e <copy_K+0x106>
 8005b44:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005b48:	9901      	ldr	r1, [sp, #4]
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	f6ff af71 	blt.w	8005a32 <copy_K+0x1ea>
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	f47f af64 	bne.w	8005a1e <copy_K+0x1d6>
}
 8005b56:	b007      	add	sp, #28
 8005b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b5c <copy_L>:

void copy_L(uint16_t* buffer, int x, int y, uint32_t color)
{
 8005b5c:	b530      	push	{r4, r5, lr}
    int pixel_x = x_base + x + offset;
 8005b5e:	4c7c      	ldr	r4, [pc, #496]	@ (8005d50 <copy_L+0x1f4>)
 8005b60:	6825      	ldr	r5, [r4, #0]
 8005b62:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005b66:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005b6a:	bf2c      	ite	cs
 8005b6c:	2400      	movcs	r4, #0
 8005b6e:	2401      	movcc	r4, #1
 8005b70:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8005b74:	d202      	bcs.n	8005b7c <copy_L+0x20>
 8005b76:	2c00      	cmp	r4, #0
 8005b78:	f040 80cf 	bne.w	8005d1a <copy_L+0x1be>
    int pixel_y = y_base + y;
 8005b7c:	f102 0e01 	add.w	lr, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005b80:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005b84:	d202      	bcs.n	8005b8c <copy_L+0x30>
 8005b86:	2c00      	cmp	r4, #0
 8005b88:	f040 80c0 	bne.w	8005d0c <copy_L+0x1b0>
    int pixel_y = y_base + y;
 8005b8c:	f102 0e02 	add.w	lr, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005b90:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005b94:	d202      	bcs.n	8005b9c <copy_L+0x40>
 8005b96:	2c00      	cmp	r4, #0
 8005b98:	f040 80b1 	bne.w	8005cfe <copy_L+0x1a2>
    int pixel_y = y_base + y;
 8005b9c:	f102 0e03 	add.w	lr, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005ba0:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005ba4:	d202      	bcs.n	8005bac <copy_L+0x50>
 8005ba6:	2c00      	cmp	r4, #0
 8005ba8:	f040 80a2 	bne.w	8005cf0 <copy_L+0x194>
    int pixel_y = y_base + y;
 8005bac:	f102 0e04 	add.w	lr, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005bb0:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005bb4:	d202      	bcs.n	8005bbc <copy_L+0x60>
 8005bb6:	2c00      	cmp	r4, #0
 8005bb8:	f040 8093 	bne.w	8005ce2 <copy_L+0x186>
    int pixel_y = y_base + y;
 8005bbc:	f102 0e05 	add.w	lr, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005bc0:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005bc4:	d202      	bcs.n	8005bcc <copy_L+0x70>
 8005bc6:	2c00      	cmp	r4, #0
 8005bc8:	f040 8084 	bne.w	8005cd4 <copy_L+0x178>
    int pixel_y = y_base + y;
 8005bcc:	f102 0e06 	add.w	lr, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005bd0:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005bd4:	d201      	bcs.n	8005bda <copy_L+0x7e>
 8005bd6:	2c00      	cmp	r4, #0
 8005bd8:	d175      	bne.n	8005cc6 <copy_L+0x16a>
    int pixel_y = y_base + y;
 8005bda:	f102 0e07 	add.w	lr, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005bde:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005be2:	d201      	bcs.n	8005be8 <copy_L+0x8c>
 8005be4:	2c00      	cmp	r4, #0
 8005be6:	d167      	bne.n	8005cb8 <copy_L+0x15c>
    int pixel_y = y_base + y;
 8005be8:	f102 0e08 	add.w	lr, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005bec:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005bf0:	d201      	bcs.n	8005bf6 <copy_L+0x9a>
 8005bf2:	2c00      	cmp	r4, #0
 8005bf4:	d159      	bne.n	8005caa <copy_L+0x14e>
    int pixel_y = y_base + y;
 8005bf6:	f102 0e09 	add.w	lr, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005bfa:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005bfe:	d201      	bcs.n	8005c04 <copy_L+0xa8>
 8005c00:	2c00      	cmp	r4, #0
 8005c02:	d14b      	bne.n	8005c9c <copy_L+0x140>
    int pixel_y = y_base + y;
 8005c04:	f102 0e0a 	add.w	lr, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c08:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005c0c:	d201      	bcs.n	8005c12 <copy_L+0xb6>
 8005c0e:	2c00      	cmp	r4, #0
 8005c10:	d13d      	bne.n	8005c8e <copy_L+0x132>
    int pixel_y = y_base + y;
 8005c12:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c14:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8005c18:	d200      	bcs.n	8005c1c <copy_L+0xc0>
 8005c1a:	bb8c      	cbnz	r4, 8005c80 <copy_L+0x124>
    int pixel_x = x_base + x + offset;
 8005c1c:	f101 0c01 	add.w	ip, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005c20:	0114      	lsls	r4, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c22:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8005c26:	44ac      	add	ip, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005c28:	eba4 0402 	sub.w	r4, r4, r2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c2c:	bf2c      	ite	cs
 8005c2e:	2200      	movcs	r2, #0
 8005c30:	2201      	movcc	r2, #1
 8005c32:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005c36:	ea4f 1444 	mov.w	r4, r4, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c3a:	d201      	bcs.n	8005c40 <copy_L+0xe4>
 8005c3c:	2a00      	cmp	r2, #0
 8005c3e:	d173      	bne.n	8005d28 <copy_L+0x1cc>
    int pixel_x = x_base + x + offset;
 8005c40:	f101 0c02 	add.w	ip, r1, #2
 8005c44:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c46:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005c4a:	d201      	bcs.n	8005c50 <copy_L+0xf4>
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	d173      	bne.n	8005d38 <copy_L+0x1dc>
    int pixel_x = x_base + x + offset;
 8005c50:	f101 0c03 	add.w	ip, r1, #3
 8005c54:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c56:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005c5a:	d201      	bcs.n	8005c60 <copy_L+0x104>
 8005c5c:	2a00      	cmp	r2, #0
 8005c5e:	d173      	bne.n	8005d48 <copy_L+0x1ec>
    int pixel_x = x_base + x + offset;
 8005c60:	f101 0c04 	add.w	ip, r1, #4
 8005c64:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c66:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005c6a:	d201      	bcs.n	8005c70 <copy_L+0x114>
 8005c6c:	2a00      	cmp	r2, #0
 8005c6e:	d167      	bne.n	8005d40 <copy_L+0x1e4>
    int pixel_x = x_base + x + offset;
 8005c70:	3105      	adds	r1, #5
 8005c72:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c74:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005c78:	d201      	bcs.n	8005c7e <copy_L+0x122>
 8005c7a:	2a00      	cmp	r2, #0
 8005c7c:	d158      	bne.n	8005d30 <copy_L+0x1d4>
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 6; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 8005c7e:	bd30      	pop	{r4, r5, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005c80:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8005c84:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 8005c88:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005c8c:	e7c6      	b.n	8005c1c <copy_L+0xc0>
 8005c8e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005c92:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005c96:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005c9a:	e7ba      	b.n	8005c12 <copy_L+0xb6>
 8005c9c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005ca0:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005ca4:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005ca8:	e7ac      	b.n	8005c04 <copy_L+0xa8>
 8005caa:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005cae:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005cb2:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005cb6:	e79e      	b.n	8005bf6 <copy_L+0x9a>
 8005cb8:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005cbc:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005cc0:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005cc4:	e790      	b.n	8005be8 <copy_L+0x8c>
 8005cc6:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005cca:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005cce:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005cd2:	e782      	b.n	8005bda <copy_L+0x7e>
 8005cd4:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005cd8:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005cdc:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005ce0:	e774      	b.n	8005bcc <copy_L+0x70>
 8005ce2:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005ce6:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005cea:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005cee:	e765      	b.n	8005bbc <copy_L+0x60>
 8005cf0:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005cf4:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005cf8:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005cfc:	e756      	b.n	8005bac <copy_L+0x50>
 8005cfe:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005d02:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005d06:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005d0a:	e747      	b.n	8005b9c <copy_L+0x40>
 8005d0c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005d10:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005d14:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005d18:	e738      	b.n	8005b8c <copy_L+0x30>
 8005d1a:	ebc2 1e02 	rsb	lr, r2, r2, lsl #4
 8005d1e:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005d22:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005d26:	e729      	b.n	8005b7c <copy_L+0x20>
 8005d28:	44a4      	add	ip, r4
 8005d2a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005d2e:	e787      	b.n	8005c40 <copy_L+0xe4>
 8005d30:	4421      	add	r1, r4
 8005d32:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8005d36:	bd30      	pop	{r4, r5, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005d38:	44a4      	add	ip, r4
 8005d3a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005d3e:	e787      	b.n	8005c50 <copy_L+0xf4>
 8005d40:	44a4      	add	ip, r4
 8005d42:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005d46:	e793      	b.n	8005c70 <copy_L+0x114>
 8005d48:	44a4      	add	ip, r4
 8005d4a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005d4e:	e787      	b.n	8005c60 <copy_L+0x104>
 8005d50:	240001b8 	.word	0x240001b8

08005d54 <copy_M>:

void copy_M(uint16_t* buffer, int x, int y, uint32_t color)
{
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8005d58:	4c9e      	ldr	r4, [pc, #632]	@ (8005fd4 <copy_M+0x280>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005d5a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8005d5e:	b093      	sub	sp, #76	@ 0x4c
    int pixel_x = x_base + x + offset;
 8005d60:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005d62:	bf2c      	ite	cs
 8005d64:	f04f 0900 	movcs.w	r9, #0
 8005d68:	f04f 0901 	movcc.w	r9, #1
    int pixel_x = x_base + x + offset;
 8005d6c:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005d70:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005d74:	bf2c      	ite	cs
 8005d76:	2400      	movcs	r4, #0
 8005d78:	2401      	movcc	r4, #1
 8005d7a:	b11c      	cbz	r4, 8005d84 <copy_M+0x30>
 8005d7c:	f1b9 0f00 	cmp.w	r9, #0
 8005d80:	f040 8158 	bne.w	8006034 <copy_M+0x2e0>
    int pixel_y = y_base + y;
 8005d84:	1c56      	adds	r6, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005d86:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8005d8a:	9601      	str	r6, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005d8c:	bf2c      	ite	cs
 8005d8e:	2700      	movcs	r7, #0
 8005d90:	2701      	movcc	r7, #1
 8005d92:	9703      	str	r7, [sp, #12]
 8005d94:	b114      	cbz	r4, 8005d9c <copy_M+0x48>
 8005d96:	2f00      	cmp	r7, #0
 8005d98:	f040 8145 	bne.w	8006026 <copy_M+0x2d2>
    int pixel_y = y_base + y;
 8005d9c:	f102 0e02 	add.w	lr, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005da0:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005da4:	bf2c      	ite	cs
 8005da6:	2700      	movcs	r7, #0
 8005da8:	2701      	movcc	r7, #1
 8005daa:	9704      	str	r7, [sp, #16]
 8005dac:	b114      	cbz	r4, 8005db4 <copy_M+0x60>
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	f040 815c 	bne.w	800606c <copy_M+0x318>
    int pixel_y = y_base + y;
 8005db4:	f102 0b03 	add.w	fp, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005db8:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8005dbc:	bf2c      	ite	cs
 8005dbe:	2700      	movcs	r7, #0
 8005dc0:	2701      	movcc	r7, #1
 8005dc2:	9705      	str	r7, [sp, #20]
 8005dc4:	b114      	cbz	r4, 8005dcc <copy_M+0x78>
 8005dc6:	2f00      	cmp	r7, #0
 8005dc8:	f040 8149 	bne.w	800605e <copy_M+0x30a>
    int pixel_y = y_base + y;
 8005dcc:	1d17      	adds	r7, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005dce:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005dd2:	970d      	str	r7, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005dd4:	bf2c      	ite	cs
 8005dd6:	2600      	movcs	r6, #0
 8005dd8:	2601      	movcc	r6, #1
 8005dda:	9606      	str	r6, [sp, #24]
 8005ddc:	b114      	cbz	r4, 8005de4 <copy_M+0x90>
 8005dde:	2e00      	cmp	r6, #0
 8005de0:	f040 8136 	bne.w	8006050 <copy_M+0x2fc>
    int pixel_y = y_base + y;
 8005de4:	1d57      	adds	r7, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005de6:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005dea:	970e      	str	r7, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005dec:	bf2c      	ite	cs
 8005dee:	2600      	movcs	r6, #0
 8005df0:	2601      	movcc	r6, #1
 8005df2:	9607      	str	r6, [sp, #28]
 8005df4:	b114      	cbz	r4, 8005dfc <copy_M+0xa8>
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	f040 8123 	bne.w	8006042 <copy_M+0x2ee>
    int pixel_y = y_base + y;
 8005dfc:	1d97      	adds	r7, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005dfe:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005e02:	970f      	str	r7, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e04:	bf2c      	ite	cs
 8005e06:	2600      	movcs	r6, #0
 8005e08:	2601      	movcc	r6, #1
 8005e0a:	9608      	str	r6, [sp, #32]
 8005e0c:	b114      	cbz	r4, 8005e14 <copy_M+0xc0>
 8005e0e:	2e00      	cmp	r6, #0
 8005e10:	f040 815d 	bne.w	80060ce <copy_M+0x37a>
    int pixel_y = y_base + y;
 8005e14:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e16:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005e1a:	9710      	str	r7, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e1c:	bf2c      	ite	cs
 8005e1e:	2600      	movcs	r6, #0
 8005e20:	2601      	movcc	r6, #1
 8005e22:	9609      	str	r6, [sp, #36]	@ 0x24
 8005e24:	b114      	cbz	r4, 8005e2c <copy_M+0xd8>
 8005e26:	2e00      	cmp	r6, #0
 8005e28:	f040 814a 	bne.w	80060c0 <copy_M+0x36c>
    int pixel_y = y_base + y;
 8005e2c:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e30:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8005e34:	bf2c      	ite	cs
 8005e36:	2600      	movcs	r6, #0
 8005e38:	2601      	movcc	r6, #1
 8005e3a:	960a      	str	r6, [sp, #40]	@ 0x28
 8005e3c:	b114      	cbz	r4, 8005e44 <copy_M+0xf0>
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	f040 8137 	bne.w	80060b2 <copy_M+0x35e>
    int pixel_y = y_base + y;
 8005e44:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e48:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005e4c:	9711      	str	r7, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e4e:	bf2c      	ite	cs
 8005e50:	2600      	movcs	r6, #0
 8005e52:	2601      	movcc	r6, #1
 8005e54:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005e56:	b114      	cbz	r4, 8005e5e <copy_M+0x10a>
 8005e58:	2e00      	cmp	r6, #0
 8005e5a:	f040 8123 	bne.w	80060a4 <copy_M+0x350>
    int pixel_y = y_base + y;
 8005e5e:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e62:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8005e66:	bf2c      	ite	cs
 8005e68:	2600      	movcs	r6, #0
 8005e6a:	2601      	movcc	r6, #1
 8005e6c:	960c      	str	r6, [sp, #48]	@ 0x30
 8005e6e:	b114      	cbz	r4, 8005e76 <copy_M+0x122>
 8005e70:	2e00      	cmp	r6, #0
 8005e72:	f040 8110 	bne.w	8006096 <copy_M+0x342>
    int pixel_y = y_base + y;
 8005e76:	f102 0a0b 	add.w	sl, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e7a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8005e7e:	bf2c      	ite	cs
 8005e80:	2600      	movcs	r6, #0
 8005e82:	2601      	movcc	r6, #1
 8005e84:	9602      	str	r6, [sp, #8]
 8005e86:	b114      	cbz	r4, 8005e8e <copy_M+0x13a>
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	f040 80fd 	bne.w	8006088 <copy_M+0x334>
    int pixel_x = x_base + x + offset;
 8005e8e:	f101 0c05 	add.w	ip, r1, #5
 8005e92:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e94:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005e98:	bf2c      	ite	cs
 8005e9a:	2400      	movcs	r4, #0
 8005e9c:	2401      	movcc	r4, #1
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	d03b      	beq.n	8005f1a <copy_M+0x1c6>
 8005ea2:	f1b9 0f00 	cmp.w	r9, #0
 8005ea6:	f040 8119 	bne.w	80060dc <copy_M+0x388>
 8005eaa:	2c00      	cmp	r4, #0
 8005eac:	d035      	beq.n	8005f1a <copy_M+0x1c6>
 8005eae:	9e03      	ldr	r6, [sp, #12]
 8005eb0:	2e00      	cmp	r6, #0
 8005eb2:	f040 811d 	bne.w	80060f0 <copy_M+0x39c>
 8005eb6:	2c00      	cmp	r4, #0
 8005eb8:	d02f      	beq.n	8005f1a <copy_M+0x1c6>
 8005eba:	9e04      	ldr	r6, [sp, #16]
 8005ebc:	2e00      	cmp	r6, #0
 8005ebe:	f040 811f 	bne.w	8006100 <copy_M+0x3ac>
 8005ec2:	b354      	cbz	r4, 8005f1a <copy_M+0x1c6>
 8005ec4:	9e05      	ldr	r6, [sp, #20]
 8005ec6:	2e00      	cmp	r6, #0
 8005ec8:	f040 8157 	bne.w	800617a <copy_M+0x426>
 8005ecc:	b32c      	cbz	r4, 8005f1a <copy_M+0x1c6>
 8005ece:	9e06      	ldr	r6, [sp, #24]
 8005ed0:	2e00      	cmp	r6, #0
 8005ed2:	f040 814a 	bne.w	800616a <copy_M+0x416>
 8005ed6:	b304      	cbz	r4, 8005f1a <copy_M+0x1c6>
 8005ed8:	9e07      	ldr	r6, [sp, #28]
 8005eda:	2e00      	cmp	r6, #0
 8005edc:	f040 813d 	bne.w	800615a <copy_M+0x406>
 8005ee0:	b1dc      	cbz	r4, 8005f1a <copy_M+0x1c6>
 8005ee2:	9e08      	ldr	r6, [sp, #32]
 8005ee4:	2e00      	cmp	r6, #0
 8005ee6:	f040 8130 	bne.w	800614a <copy_M+0x3f6>
 8005eea:	b1b4      	cbz	r4, 8005f1a <copy_M+0x1c6>
 8005eec:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8005eee:	2e00      	cmp	r6, #0
 8005ef0:	f040 8123 	bne.w	800613a <copy_M+0x3e6>
 8005ef4:	b18c      	cbz	r4, 8005f1a <copy_M+0x1c6>
 8005ef6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005ef8:	2e00      	cmp	r6, #0
 8005efa:	f040 8117 	bne.w	800612c <copy_M+0x3d8>
 8005efe:	b164      	cbz	r4, 8005f1a <copy_M+0x1c6>
 8005f00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005f02:	2e00      	cmp	r6, #0
 8005f04:	f040 810a 	bne.w	800611c <copy_M+0x3c8>
 8005f08:	b13c      	cbz	r4, 8005f1a <copy_M+0x1c6>
 8005f0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f0c:	b12e      	cbz	r6, 8005f1a <copy_M+0x1c6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005f0e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005f12:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005f16:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f1a:	9e02      	ldr	r6, [sp, #8]
 8005f1c:	b116      	cbz	r6, 8005f24 <copy_M+0x1d0>
 8005f1e:	2c00      	cmp	r4, #0
 8005f20:	f040 80f5 	bne.w	800610e <copy_M+0x3ba>
    int pixel_x = x_base + x + offset;
 8005f24:	1c4c      	adds	r4, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f26:	9e01      	ldr	r6, [sp, #4]
    int pixel_x = x_base + x + offset;
 8005f28:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f2a:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8005f2e:	bf2c      	ite	cs
 8005f30:	f04f 0900 	movcs.w	r9, #0
 8005f34:	f04f 0901 	movcc.w	r9, #1
 8005f38:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8005f3c:	d203      	bcs.n	8005f46 <copy_M+0x1f2>
 8005f3e:	f1b9 0f00 	cmp.w	r9, #0
 8005f42:	f040 809a 	bne.w	800607a <copy_M+0x326>
    int pixel_x = x_base + x + offset;
 8005f46:	1c8c      	adds	r4, r1, #2
 8005f48:	1ccf      	adds	r7, r1, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f4a:	ea6f 0c0e 	mvn.w	ip, lr
    int pixel_x = x_base + x + offset;
 8005f4e:	442c      	add	r4, r5
 8005f50:	442f      	add	r7, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f52:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8005f56:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8005f5a:	bf2c      	ite	cs
 8005f5c:	f04f 0800 	movcs.w	r8, #0
 8005f60:	f04f 0801 	movcc.w	r8, #1
 8005f64:	f1b8 0f00 	cmp.w	r8, #0
 8005f68:	d036      	beq.n	8005fd8 <copy_M+0x284>
 8005f6a:	f1bc 0f00 	cmp.w	ip, #0
 8005f6e:	d033      	beq.n	8005fd8 <copy_M+0x284>
 8005f70:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005f74:	da4d      	bge.n	8006012 <copy_M+0x2be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005f76:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f7a:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	eb04 144e 	add.w	r4, r4, lr, lsl #5
 8005f84:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8005f88:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f8c:	f000 810a 	beq.w	80061a4 <copy_M+0x450>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005f90:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f94:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005f98:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f9c:	d239      	bcs.n	8006012 <copy_M+0x2be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005f9e:	44be      	add	lr, r7
 8005fa0:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
 8005fa4:	ebcb 130b 	rsb	r3, fp, fp, lsl #4
    int pixel_x = x_base + x + offset;
 8005fa8:	3104      	adds	r1, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005faa:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    int pixel_x = x_base + x + offset;
 8005fae:	4429      	add	r1, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005fb0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	db09      	blt.n	8005fce <copy_M+0x27a>
 8005fba:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005fbe:	d206      	bcs.n	8005fce <copy_M+0x27a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005fc0:	9b01      	ldr	r3, [sp, #4]
 8005fc2:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
 8005fc6:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005fca:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
    fill_pixel(buffer, x, y, 2, 2, color);
    fill_pixel(buffer, x, y, 2, 3, color);
    fill_pixel(buffer, x, y, 3, 2, color);
    fill_pixel(buffer, x, y, 3, 3, color);
    fill_pixel(buffer, x, y, 4, 1, color);
}
 8005fce:	b013      	add	sp, #76	@ 0x4c
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005fd8:	1cd6      	adds	r6, r2, #3
 8005fda:	bfb4      	ite	lt
 8005fdc:	2200      	movlt	r2, #0
 8005fde:	2201      	movge	r2, #1
 8005fe0:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8005fe4:	bf2c      	ite	cs
 8005fe6:	f04f 0a00 	movcs.w	sl, #0
 8005fea:	f04f 0a01 	movcc.w	sl, #1
 8005fee:	b11a      	cbz	r2, 8005ff8 <copy_M+0x2a4>
 8005ff0:	f1b8 0f00 	cmp.w	r8, #0
 8005ff4:	f040 80df 	bne.w	80061b6 <copy_M+0x462>
 8005ff8:	ea1c 0c0a 	ands.w	ip, ip, sl
 8005ffc:	f040 80c4 	bne.w	8006188 <copy_M+0x434>
 8006000:	ea02 0c0a 	and.w	ip, r2, sl
 8006004:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8006008:	da03      	bge.n	8006012 <copy_M+0x2be>
 800600a:	f1bc 0f00 	cmp.w	ip, #0
 800600e:	f040 80c7 	bne.w	80061a0 <copy_M+0x44c>
    int pixel_x = x_base + x + offset;
 8006012:	3104      	adds	r1, #4
 8006014:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006016:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800601a:	d2d8      	bcs.n	8005fce <copy_M+0x27a>
 800601c:	f1b9 0f00 	cmp.w	r9, #0
 8006020:	d0d5      	beq.n	8005fce <copy_M+0x27a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006022:	b29a      	uxth	r2, r3
 8006024:	e7cc      	b.n	8005fc0 <copy_M+0x26c>
 8006026:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 800602a:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 800602e:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006032:	e6b3      	b.n	8005d9c <copy_M+0x48>
 8006034:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8006038:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800603c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006040:	e6a0      	b.n	8005d84 <copy_M+0x30>
 8006042:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006046:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 800604a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800604e:	e6d5      	b.n	8005dfc <copy_M+0xa8>
 8006050:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006054:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8006058:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800605c:	e6c2      	b.n	8005de4 <copy_M+0x90>
 800605e:	ebcb 170b 	rsb	r7, fp, fp, lsl #4
 8006062:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8006066:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800606a:	e6af      	b.n	8005dcc <copy_M+0x78>
 800606c:	ebce 170e 	rsb	r7, lr, lr, lsl #4
 8006070:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8006074:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006078:	e69c      	b.n	8005db4 <copy_M+0x60>
 800607a:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 800607e:	eb04 1447 	add.w	r4, r4, r7, lsl #5
 8006082:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006086:	e75e      	b.n	8005f46 <copy_M+0x1f2>
 8006088:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 800608c:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 8006090:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006094:	e6fb      	b.n	8005e8e <copy_M+0x13a>
 8006096:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 800609a:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 800609e:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80060a2:	e6e8      	b.n	8005e76 <copy_M+0x122>
 80060a4:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80060a8:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 80060ac:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80060b0:	e6d5      	b.n	8005e5e <copy_M+0x10a>
 80060b2:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 80060b6:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 80060ba:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80060be:	e6c1      	b.n	8005e44 <copy_M+0xf0>
 80060c0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80060c4:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 80060c8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80060cc:	e6ae      	b.n	8005e2c <copy_M+0xd8>
 80060ce:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80060d2:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 80060d6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80060da:	e69b      	b.n	8005e14 <copy_M+0xc0>
 80060dc:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
 80060e0:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80060e4:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80060e8:	2c00      	cmp	r4, #0
 80060ea:	f47f aee0 	bne.w	8005eae <copy_M+0x15a>
 80060ee:	e714      	b.n	8005f1a <copy_M+0x1c6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80060f0:	9e01      	ldr	r6, [sp, #4]
 80060f2:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 80060f6:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80060fa:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80060fe:	e6da      	b.n	8005eb6 <copy_M+0x162>
 8006100:	ebce 190e 	rsb	r9, lr, lr, lsl #4
 8006104:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006108:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800610c:	e6d9      	b.n	8005ec2 <copy_M+0x16e>
 800610e:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8006112:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
 8006116:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800611a:	e703      	b.n	8005f24 <copy_M+0x1d0>
 800611c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800611e:	ebc6 1806 	rsb	r8, r6, r6, lsl #4
 8006122:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8006126:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800612a:	e6ed      	b.n	8005f08 <copy_M+0x1b4>
 800612c:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8006130:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8006134:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8006138:	e6e1      	b.n	8005efe <copy_M+0x1aa>
 800613a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800613c:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006140:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006144:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006148:	e6d4      	b.n	8005ef4 <copy_M+0x1a0>
 800614a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800614c:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006150:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006154:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006158:	e6c7      	b.n	8005eea <copy_M+0x196>
 800615a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800615c:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006160:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006164:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006168:	e6ba      	b.n	8005ee0 <copy_M+0x18c>
 800616a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800616c:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006170:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006174:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006178:	e6ad      	b.n	8005ed6 <copy_M+0x182>
 800617a:	ebcb 190b 	rsb	r9, fp, fp, lsl #4
 800617e:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006182:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006186:	e6a1      	b.n	8005ecc <copy_M+0x178>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006188:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800618c:	f6bf af3a 	bge.w	8006004 <copy_M+0x2b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006190:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8006194:	4694      	mov	ip, r2
 8006196:	eb07 124e 	add.w	r2, r7, lr, lsl #5
 800619a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800619e:	e731      	b.n	8006004 <copy_M+0x2b0>
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	e6ff      	b.n	8005fa4 <copy_M+0x250>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80061a4:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80061a8:	f4bf af33 	bcs.w	8006012 <copy_M+0x2be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80061ac:	4a08      	ldr	r2, [pc, #32]	@ (80061d0 <copy_M+0x47c>)
 80061ae:	443a      	add	r2, r7
 80061b0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80061b4:	e72d      	b.n	8006012 <copy_M+0x2be>
 80061b6:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 80061ba:	f6bf af2a 	bge.w	8006012 <copy_M+0x2be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80061be:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
 80061c2:	46d4      	mov	ip, sl
 80061c4:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 80061c8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80061cc:	e71a      	b.n	8006004 <copy_M+0x2b0>
 80061ce:	bf00      	nop
 80061d0:	0001fc20 	.word	0x0001fc20

080061d4 <copy_N>:

void copy_N(uint16_t* buffer, int x, int y, uint32_t color)
{
 80061d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80061d8:	4c78      	ldr	r4, [pc, #480]	@ (80063bc <copy_N+0x1e8>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80061da:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 80061de:	b093      	sub	sp, #76	@ 0x4c
    int pixel_x = x_base + x + offset;
 80061e0:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80061e2:	bf2c      	ite	cs
 80061e4:	2400      	movcs	r4, #0
 80061e6:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 80061e8:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80061ec:	4626      	mov	r6, r4
 80061ee:	9404      	str	r4, [sp, #16]
 80061f0:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80061f4:	bf2c      	ite	cs
 80061f6:	2400      	movcs	r4, #0
 80061f8:	2401      	movcc	r4, #1
 80061fa:	b114      	cbz	r4, 8006202 <copy_N+0x2e>
 80061fc:	2e00      	cmp	r6, #0
 80061fe:	f040 81a8 	bne.w	8006552 <copy_N+0x37e>
    int pixel_y = y_base + y;
 8006202:	f102 0901 	add.w	r9, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006206:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 800620a:	bf2c      	ite	cs
 800620c:	2600      	movcs	r6, #0
 800620e:	2601      	movcc	r6, #1
 8006210:	9605      	str	r6, [sp, #20]
 8006212:	b114      	cbz	r4, 800621a <copy_N+0x46>
 8006214:	2e00      	cmp	r6, #0
 8006216:	f040 8195 	bne.w	8006544 <copy_N+0x370>
    int pixel_y = y_base + y;
 800621a:	f102 0802 	add.w	r8, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800621e:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8006222:	bf2c      	ite	cs
 8006224:	2600      	movcs	r6, #0
 8006226:	2601      	movcc	r6, #1
 8006228:	9606      	str	r6, [sp, #24]
 800622a:	b114      	cbz	r4, 8006232 <copy_N+0x5e>
 800622c:	2e00      	cmp	r6, #0
 800622e:	f040 8182 	bne.w	8006536 <copy_N+0x362>
    int pixel_y = y_base + y;
 8006232:	f102 0e03 	add.w	lr, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006236:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800623a:	bf2c      	ite	cs
 800623c:	2600      	movcs	r6, #0
 800623e:	2601      	movcc	r6, #1
 8006240:	9607      	str	r6, [sp, #28]
 8006242:	b114      	cbz	r4, 800624a <copy_N+0x76>
 8006244:	2e00      	cmp	r6, #0
 8006246:	f040 816f 	bne.w	8006528 <copy_N+0x354>
    int pixel_y = y_base + y;
 800624a:	f102 0b04 	add.w	fp, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800624e:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8006252:	bf2c      	ite	cs
 8006254:	2600      	movcs	r6, #0
 8006256:	2601      	movcc	r6, #1
 8006258:	9608      	str	r6, [sp, #32]
 800625a:	b114      	cbz	r4, 8006262 <copy_N+0x8e>
 800625c:	2e00      	cmp	r6, #0
 800625e:	f040 815c 	bne.w	800651a <copy_N+0x346>
    int pixel_y = y_base + y;
 8006262:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006264:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006268:	960f      	str	r6, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800626a:	bf2c      	ite	cs
 800626c:	2700      	movcs	r7, #0
 800626e:	2701      	movcc	r7, #1
 8006270:	9709      	str	r7, [sp, #36]	@ 0x24
 8006272:	b114      	cbz	r4, 800627a <copy_N+0xa6>
 8006274:	2f00      	cmp	r7, #0
 8006276:	f040 8149 	bne.w	800650c <copy_N+0x338>
    int pixel_y = y_base + y;
 800627a:	1d96      	adds	r6, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800627c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006280:	9603      	str	r6, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006282:	bf2c      	ite	cs
 8006284:	2700      	movcs	r7, #0
 8006286:	2701      	movcc	r7, #1
 8006288:	970a      	str	r7, [sp, #40]	@ 0x28
 800628a:	b114      	cbz	r4, 8006292 <copy_N+0xbe>
 800628c:	2f00      	cmp	r7, #0
 800628e:	f040 8136 	bne.w	80064fe <copy_N+0x32a>
    int pixel_y = y_base + y;
 8006292:	1dd6      	adds	r6, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006294:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006298:	9601      	str	r6, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800629a:	bf2c      	ite	cs
 800629c:	2700      	movcs	r7, #0
 800629e:	2701      	movcc	r7, #1
 80062a0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80062a2:	b114      	cbz	r4, 80062aa <copy_N+0xd6>
 80062a4:	2f00      	cmp	r7, #0
 80062a6:	f040 8123 	bne.w	80064f0 <copy_N+0x31c>
    int pixel_y = y_base + y;
 80062aa:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062ae:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 80062b2:	9602      	str	r6, [sp, #8]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062b4:	bf2c      	ite	cs
 80062b6:	2700      	movcs	r7, #0
 80062b8:	2701      	movcc	r7, #1
 80062ba:	970c      	str	r7, [sp, #48]	@ 0x30
 80062bc:	b114      	cbz	r4, 80062c4 <copy_N+0xf0>
 80062be:	2f00      	cmp	r7, #0
 80062c0:	f040 810f 	bne.w	80064e2 <copy_N+0x30e>
    int pixel_y = y_base + y;
 80062c4:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062c8:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80062cc:	9710      	str	r7, [sp, #64]	@ 0x40
 80062ce:	bf2c      	ite	cs
 80062d0:	2600      	movcs	r6, #0
 80062d2:	2601      	movcc	r6, #1
 80062d4:	960d      	str	r6, [sp, #52]	@ 0x34
 80062d6:	b114      	cbz	r4, 80062de <copy_N+0x10a>
 80062d8:	2e00      	cmp	r6, #0
 80062da:	f040 80fa 	bne.w	80064d2 <copy_N+0x2fe>
    int pixel_y = y_base + y;
 80062de:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062e2:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80062e6:	9711      	str	r7, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062e8:	bf2c      	ite	cs
 80062ea:	2600      	movcs	r6, #0
 80062ec:	2601      	movcc	r6, #1
 80062ee:	960e      	str	r6, [sp, #56]	@ 0x38
 80062f0:	b114      	cbz	r4, 80062f8 <copy_N+0x124>
 80062f2:	2e00      	cmp	r6, #0
 80062f4:	f040 80e6 	bne.w	80064c4 <copy_N+0x2f0>
    int pixel_y = y_base + y;
 80062f8:	f102 0a0b 	add.w	sl, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062fc:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8006300:	bf2c      	ite	cs
 8006302:	2600      	movcs	r6, #0
 8006304:	2601      	movcc	r6, #1
 8006306:	4637      	mov	r7, r6
 8006308:	b114      	cbz	r4, 8006310 <copy_N+0x13c>
 800630a:	2e00      	cmp	r6, #0
 800630c:	f040 80d3 	bne.w	80064b6 <copy_N+0x2e2>
    int pixel_x = x_base + x + offset;
 8006310:	f101 0c05 	add.w	ip, r1, #5
 8006314:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006316:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800631a:	bf2c      	ite	cs
 800631c:	2400      	movcs	r4, #0
 800631e:	2401      	movcc	r4, #1
 8006320:	2c00      	cmp	r4, #0
 8006322:	d03c      	beq.n	800639e <copy_N+0x1ca>
 8006324:	9e04      	ldr	r6, [sp, #16]
 8006326:	2e00      	cmp	r6, #0
 8006328:	f040 811a 	bne.w	8006560 <copy_N+0x38c>
 800632c:	2c00      	cmp	r4, #0
 800632e:	d036      	beq.n	800639e <copy_N+0x1ca>
 8006330:	9e05      	ldr	r6, [sp, #20]
 8006332:	2e00      	cmp	r6, #0
 8006334:	f040 8126 	bne.w	8006584 <copy_N+0x3b0>
 8006338:	2c00      	cmp	r4, #0
 800633a:	d030      	beq.n	800639e <copy_N+0x1ca>
 800633c:	9e06      	ldr	r6, [sp, #24]
 800633e:	2e00      	cmp	r6, #0
 8006340:	f040 8155 	bne.w	80065ee <copy_N+0x41a>
 8006344:	b35c      	cbz	r4, 800639e <copy_N+0x1ca>
 8006346:	9e07      	ldr	r6, [sp, #28]
 8006348:	2e00      	cmp	r6, #0
 800634a:	f040 8149 	bne.w	80065e0 <copy_N+0x40c>
 800634e:	b334      	cbz	r4, 800639e <copy_N+0x1ca>
 8006350:	9e08      	ldr	r6, [sp, #32]
 8006352:	2e00      	cmp	r6, #0
 8006354:	f040 813d 	bne.w	80065d2 <copy_N+0x3fe>
 8006358:	b30c      	cbz	r4, 800639e <copy_N+0x1ca>
 800635a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800635c:	2e00      	cmp	r6, #0
 800635e:	f040 8130 	bne.w	80065c2 <copy_N+0x3ee>
 8006362:	b1e4      	cbz	r4, 800639e <copy_N+0x1ca>
 8006364:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006366:	2e00      	cmp	r6, #0
 8006368:	f040 8123 	bne.w	80065b2 <copy_N+0x3de>
 800636c:	b1bc      	cbz	r4, 800639e <copy_N+0x1ca>
 800636e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006370:	2e00      	cmp	r6, #0
 8006372:	f040 8116 	bne.w	80065a2 <copy_N+0x3ce>
 8006376:	b194      	cbz	r4, 800639e <copy_N+0x1ca>
 8006378:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800637a:	2e00      	cmp	r6, #0
 800637c:	f040 8109 	bne.w	8006592 <copy_N+0x3be>
 8006380:	b16c      	cbz	r4, 800639e <copy_N+0x1ca>
 8006382:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8006384:	2e00      	cmp	r6, #0
 8006386:	f040 80f5 	bne.w	8006574 <copy_N+0x3a0>
 800638a:	b144      	cbz	r4, 800639e <copy_N+0x1ca>
 800638c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800638e:	b136      	cbz	r6, 800639e <copy_N+0x1ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006390:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8006392:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006396:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 800639a:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800639e:	b117      	cbz	r7, 80063a6 <copy_N+0x1d2>
 80063a0:	2c00      	cmp	r4, #0
 80063a2:	f040 812b 	bne.w	80065fc <copy_N+0x428>
    int pixel_x = x_base + x + offset;
 80063a6:	1c4c      	adds	r4, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80063a8:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80063ac:	eb04 0c05 	add.w	ip, r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80063b0:	d206      	bcs.n	80063c0 <copy_N+0x1ec>
 80063b2:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80063b6:	d377      	bcc.n	80064a8 <copy_N+0x2d4>
 80063b8:	e002      	b.n	80063c0 <copy_N+0x1ec>
 80063ba:	bf00      	nop
 80063bc:	240001b8 	.word	0x240001b8
    int pixel_x = x_base + x + offset;
 80063c0:	1c8c      	adds	r4, r1, #2
 80063c2:	f101 0c03 	add.w	ip, r1, #3
 80063c6:	442c      	add	r4, r5
 80063c8:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80063ca:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 80063ce:	bf2c      	ite	cs
 80063d0:	f04f 0900 	movcs.w	r9, #0
 80063d4:	f04f 0901 	movcc.w	r9, #1
 80063d8:	f1be 0f00 	cmp.w	lr, #0
 80063dc:	db57      	blt.n	800648e <copy_N+0x2ba>
 80063de:	f1b9 0f00 	cmp.w	r9, #0
 80063e2:	d054      	beq.n	800648e <copy_N+0x2ba>
 80063e4:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80063e8:	da58      	bge.n	800649c <copy_N+0x2c8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80063ea:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 80063ee:	eb04 1e4e 	add.w	lr, r4, lr, lsl #5
 80063f2:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80063f6:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 80063fa:	da4f      	bge.n	800649c <copy_N+0x2c8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80063fc:	ebcb 1e0b 	rsb	lr, fp, fp, lsl #4
 8006400:	eb04 144e 	add.w	r4, r4, lr, lsl #5
 8006404:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006408:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800640c:	bf2c      	ite	cs
 800640e:	2400      	movcs	r4, #0
 8006410:	2401      	movcc	r4, #1
 8006412:	1d56      	adds	r6, r2, #5
 8006414:	f2c0 80f9 	blt.w	800660a <copy_N+0x436>
 8006418:	2c00      	cmp	r4, #0
 800641a:	f000 80f6 	beq.w	800660a <copy_N+0x436>
 800641e:	f5b2 7f85 	cmp.w	r2, #266	@ 0x10a
 8006422:	dc31      	bgt.n	8006488 <copy_N+0x2b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006424:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006426:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800642a:	eb0c 1242 	add.w	r2, ip, r2, lsl #5
 800642e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006432:	9a03      	ldr	r2, [sp, #12]
 8006434:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8006438:	da05      	bge.n	8006446 <copy_N+0x272>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800643a:	ebc2 1802 	rsb	r8, r2, r2, lsl #4
 800643e:	eb0c 1c48 	add.w	ip, ip, r8, lsl #5
 8006442:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8006446:	3104      	adds	r1, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006448:	9c01      	ldr	r4, [sp, #4]
    int pixel_x = x_base + x + offset;
 800644a:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800644c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8006450:	bf2c      	ite	cs
 8006452:	2200      	movcs	r2, #0
 8006454:	2201      	movcc	r2, #1
 8006456:	2c00      	cmp	r4, #0
 8006458:	f2c0 80df 	blt.w	800661a <copy_N+0x446>
 800645c:	2a00      	cmp	r2, #0
 800645e:	f000 80dc 	beq.w	800661a <copy_N+0x446>
 8006462:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8006466:	da0f      	bge.n	8006488 <copy_N+0x2b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006468:	ebc4 1604 	rsb	r6, r4, r4, lsl #4
 800646c:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8006470:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006474:	9a02      	ldr	r2, [sp, #8]
 8006476:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800647a:	da05      	bge.n	8006488 <copy_N+0x2b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800647c:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8006480:	eb01 1147 	add.w	r1, r1, r7, lsl #5
 8006484:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    fill_pixel(buffer, x, y, 2, 4, color);
    fill_pixel(buffer, x, y, 3, 5, color);
    fill_pixel(buffer, x, y, 3, 6, color);
    fill_pixel(buffer, x, y, 4, 7, color);
    fill_pixel(buffer, x, y, 4, 8, color);
}
 8006488:	b013      	add	sp, #76	@ 0x4c
 800648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800648e:	f1bb 0f00 	cmp.w	fp, #0
 8006492:	dbb9      	blt.n	8006408 <copy_N+0x234>
 8006494:	f1b9 0f00 	cmp.w	r9, #0
 8006498:	d0b6      	beq.n	8006408 <copy_N+0x234>
 800649a:	e7ac      	b.n	80063f6 <copy_N+0x222>
 800649c:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80064a0:	d2d1      	bcs.n	8006446 <copy_N+0x272>
}
 80064a2:	b013      	add	sp, #76	@ 0x4c
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80064a8:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 80064ac:	eb0c 1444 	add.w	r4, ip, r4, lsl #5
 80064b0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80064b4:	e784      	b.n	80063c0 <copy_N+0x1ec>
 80064b6:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 80064ba:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 80064be:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80064c2:	e725      	b.n	8006310 <copy_N+0x13c>
 80064c4:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 80064c8:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 80064cc:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80064d0:	e712      	b.n	80062f8 <copy_N+0x124>
 80064d2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80064d4:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 80064d8:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 80064dc:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80064e0:	e6fd      	b.n	80062de <copy_N+0x10a>
 80064e2:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 80064e6:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 80064ea:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80064ee:	e6e9      	b.n	80062c4 <copy_N+0xf0>
 80064f0:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 80064f4:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 80064f8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80064fc:	e6d5      	b.n	80062aa <copy_N+0xd6>
 80064fe:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8006502:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8006506:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800650a:	e6c2      	b.n	8006292 <copy_N+0xbe>
 800650c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8006510:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8006514:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006518:	e6af      	b.n	800627a <copy_N+0xa6>
 800651a:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 800651e:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8006522:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006526:	e69c      	b.n	8006262 <copy_N+0x8e>
 8006528:	ebce 160e 	rsb	r6, lr, lr, lsl #4
 800652c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8006530:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006534:	e689      	b.n	800624a <copy_N+0x76>
 8006536:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 800653a:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800653e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006542:	e676      	b.n	8006232 <copy_N+0x5e>
 8006544:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 8006548:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800654c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006550:	e663      	b.n	800621a <copy_N+0x46>
 8006552:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8006556:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800655a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800655e:	e650      	b.n	8006202 <copy_N+0x2e>
 8006560:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8006564:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8006568:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800656c:	2c00      	cmp	r4, #0
 800656e:	f47f aedf 	bne.w	8006330 <copy_N+0x15c>
 8006572:	e714      	b.n	800639e <copy_N+0x1ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006574:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006576:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 800657a:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 800657e:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006582:	e702      	b.n	800638a <copy_N+0x1b6>
 8006584:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8006588:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 800658c:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006590:	e6d2      	b.n	8006338 <copy_N+0x164>
 8006592:	9e02      	ldr	r6, [sp, #8]
 8006594:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006598:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 800659c:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80065a0:	e6ee      	b.n	8006380 <copy_N+0x1ac>
 80065a2:	9e01      	ldr	r6, [sp, #4]
 80065a4:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 80065a8:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80065ac:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80065b0:	e6e1      	b.n	8006376 <copy_N+0x1a2>
 80065b2:	9e03      	ldr	r6, [sp, #12]
 80065b4:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 80065b8:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80065bc:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80065c0:	e6d4      	b.n	800636c <copy_N+0x198>
 80065c2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80065c4:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 80065c8:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80065cc:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80065d0:	e6c7      	b.n	8006362 <copy_N+0x18e>
 80065d2:	ebcb 190b 	rsb	r9, fp, fp, lsl #4
 80065d6:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80065da:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80065de:	e6bb      	b.n	8006358 <copy_N+0x184>
 80065e0:	ebce 190e 	rsb	r9, lr, lr, lsl #4
 80065e4:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80065e8:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80065ec:	e6af      	b.n	800634e <copy_N+0x17a>
 80065ee:	ebc8 1908 	rsb	r9, r8, r8, lsl #4
 80065f2:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80065f6:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80065fa:	e6a3      	b.n	8006344 <copy_N+0x170>
 80065fc:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8006600:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
 8006604:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006608:	e6cd      	b.n	80063a6 <copy_N+0x1d2>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800660a:	9a03      	ldr	r2, [sp, #12]
 800660c:	2a00      	cmp	r2, #0
 800660e:	f6ff af1a 	blt.w	8006446 <copy_N+0x272>
 8006612:	2c00      	cmp	r4, #0
 8006614:	f43f af17 	beq.w	8006446 <copy_N+0x272>
 8006618:	e70b      	b.n	8006432 <copy_N+0x25e>
 800661a:	9c02      	ldr	r4, [sp, #8]
 800661c:	2c00      	cmp	r4, #0
 800661e:	f6ff af33 	blt.w	8006488 <copy_N+0x2b4>
 8006622:	2a00      	cmp	r2, #0
 8006624:	f47f af26 	bne.w	8006474 <copy_N+0x2a0>
}
 8006628:	b013      	add	sp, #76	@ 0x4c
 800662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662e:	bf00      	nop

08006630 <copy_O>:

void copy_O(uint16_t* buffer, int x, int y, uint32_t color)
{
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8006634:	4c93      	ldr	r4, [pc, #588]	@ (8006884 <copy_O+0x254>)
 8006636:	f101 0e01 	add.w	lr, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800663a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800663e:	b097      	sub	sp, #92	@ 0x5c
    int pixel_x = x_base + x + offset;
 8006640:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006642:	bf2c      	ite	cs
 8006644:	2400      	movcs	r4, #0
 8006646:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 8006648:	44ae      	add	lr, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800664a:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800664e:	bf2c      	ite	cs
 8006650:	2600      	movcs	r6, #0
 8006652:	2601      	movcc	r6, #1
 8006654:	9603      	str	r6, [sp, #12]
 8006656:	b114      	cbz	r4, 800665e <copy_O+0x2e>
 8006658:	2e00      	cmp	r6, #0
 800665a:	f040 811c 	bne.w	8006896 <copy_O+0x266>
    int pixel_x = x_base + x + offset;
 800665e:	f101 0c02 	add.w	ip, r1, #2
 8006662:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006664:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8006668:	bf2c      	ite	cs
 800666a:	2600      	movcs	r6, #0
 800666c:	2601      	movcc	r6, #1
 800666e:	9604      	str	r6, [sp, #16]
 8006670:	b114      	cbz	r4, 8006678 <copy_O+0x48>
 8006672:	2e00      	cmp	r6, #0
 8006674:	f040 8108 	bne.w	8006888 <copy_O+0x258>
    int pixel_x = x_base + x + offset;
 8006678:	1cce      	adds	r6, r1, #3
 800667a:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800667c:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8006680:	970e      	str	r7, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006682:	bf2c      	ite	cs
 8006684:	2600      	movcs	r6, #0
 8006686:	2601      	movcc	r6, #1
 8006688:	9605      	str	r6, [sp, #20]
 800668a:	b114      	cbz	r4, 8006692 <copy_O+0x62>
 800668c:	2e00      	cmp	r6, #0
 800668e:	f040 80f2 	bne.w	8006876 <copy_O+0x246>
    int pixel_x = x_base + x + offset;
 8006692:	1d0e      	adds	r6, r1, #4
 8006694:	eb06 0805 	add.w	r8, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006698:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800669c:	bf2c      	ite	cs
 800669e:	f04f 0900 	movcs.w	r9, #0
 80066a2:	f04f 0901 	movcc.w	r9, #1
 80066a6:	f1b9 0f00 	cmp.w	r9, #0
 80066aa:	d002      	beq.n	80066b2 <copy_O+0x82>
 80066ac:	2c00      	cmp	r4, #0
 80066ae:	f040 80db 	bne.w	8006868 <copy_O+0x238>
    int pixel_x = x_base + x + offset;
 80066b2:	194e      	adds	r6, r1, r5
    int pixel_y = y_base + y;
 80066b4:	f102 0b01 	add.w	fp, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80066b8:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80066bc:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80066be:	bf2c      	ite	cs
 80066c0:	2400      	movcs	r4, #0
 80066c2:	2401      	movcc	r4, #1
 80066c4:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 80066c8:	bf2c      	ite	cs
 80066ca:	2700      	movcs	r7, #0
 80066cc:	2701      	movcc	r7, #1
 80066ce:	9702      	str	r7, [sp, #8]
 80066d0:	b114      	cbz	r4, 80066d8 <copy_O+0xa8>
 80066d2:	2f00      	cmp	r7, #0
 80066d4:	f040 80e6 	bne.w	80068a4 <copy_O+0x274>
    int pixel_y = y_base + y;
 80066d8:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80066da:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80066de:	970f      	str	r7, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80066e0:	bf2c      	ite	cs
 80066e2:	2600      	movcs	r6, #0
 80066e4:	2601      	movcc	r6, #1
 80066e6:	9606      	str	r6, [sp, #24]
 80066e8:	b114      	cbz	r4, 80066f0 <copy_O+0xc0>
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	f040 80f7 	bne.w	80068de <copy_O+0x2ae>
    int pixel_y = y_base + y;
 80066f0:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80066f2:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80066f6:	9710      	str	r7, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80066f8:	bf2c      	ite	cs
 80066fa:	2600      	movcs	r6, #0
 80066fc:	2601      	movcc	r6, #1
 80066fe:	9607      	str	r6, [sp, #28]
 8006700:	b114      	cbz	r4, 8006708 <copy_O+0xd8>
 8006702:	2e00      	cmp	r6, #0
 8006704:	f040 814c 	bne.w	80069a0 <copy_O+0x370>
    int pixel_y = y_base + y;
 8006708:	1d17      	adds	r7, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800670a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800670e:	9711      	str	r7, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006710:	bf2c      	ite	cs
 8006712:	2600      	movcs	r6, #0
 8006714:	2601      	movcc	r6, #1
 8006716:	9608      	str	r6, [sp, #32]
 8006718:	b114      	cbz	r4, 8006720 <copy_O+0xf0>
 800671a:	2e00      	cmp	r6, #0
 800671c:	f040 8138 	bne.w	8006990 <copy_O+0x360>
    int pixel_y = y_base + y;
 8006720:	1d57      	adds	r7, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006722:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8006726:	9712      	str	r7, [sp, #72]	@ 0x48
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006728:	bf2c      	ite	cs
 800672a:	2600      	movcs	r6, #0
 800672c:	2601      	movcc	r6, #1
 800672e:	9609      	str	r6, [sp, #36]	@ 0x24
 8006730:	b114      	cbz	r4, 8006738 <copy_O+0x108>
 8006732:	2e00      	cmp	r6, #0
 8006734:	f040 8154 	bne.w	80069e0 <copy_O+0x3b0>
    int pixel_y = y_base + y;
 8006738:	1d97      	adds	r7, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800673a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800673e:	9713      	str	r7, [sp, #76]	@ 0x4c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006740:	bf2c      	ite	cs
 8006742:	2600      	movcs	r6, #0
 8006744:	2601      	movcc	r6, #1
 8006746:	960a      	str	r6, [sp, #40]	@ 0x28
 8006748:	b114      	cbz	r4, 8006750 <copy_O+0x120>
 800674a:	2e00      	cmp	r6, #0
 800674c:	f040 8140 	bne.w	80069d0 <copy_O+0x3a0>
    int pixel_y = y_base + y;
 8006750:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006752:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8006756:	9714      	str	r7, [sp, #80]	@ 0x50
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006758:	bf2c      	ite	cs
 800675a:	2600      	movcs	r6, #0
 800675c:	2601      	movcc	r6, #1
 800675e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006760:	b114      	cbz	r4, 8006768 <copy_O+0x138>
 8006762:	2e00      	cmp	r6, #0
 8006764:	f040 812c 	bne.w	80069c0 <copy_O+0x390>
    int pixel_y = y_base + y;
 8006768:	f102 0708 	add.w	r7, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800676c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8006770:	9715      	str	r7, [sp, #84]	@ 0x54
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006772:	bf2c      	ite	cs
 8006774:	2600      	movcs	r6, #0
 8006776:	2601      	movcc	r6, #1
 8006778:	960c      	str	r6, [sp, #48]	@ 0x30
 800677a:	b114      	cbz	r4, 8006782 <copy_O+0x152>
 800677c:	2e00      	cmp	r6, #0
 800677e:	f040 8117 	bne.w	80069b0 <copy_O+0x380>
    int pixel_y = y_base + y;
 8006782:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006786:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800678a:	bf2c      	ite	cs
 800678c:	2600      	movcs	r6, #0
 800678e:	2601      	movcc	r6, #1
 8006790:	960d      	str	r6, [sp, #52]	@ 0x34
 8006792:	b114      	cbz	r4, 800679a <copy_O+0x16a>
 8006794:	2e00      	cmp	r6, #0
 8006796:	f040 80b2 	bne.w	80068fe <copy_O+0x2ce>
    int pixel_y = y_base + y;
 800679a:	f102 0a0a 	add.w	sl, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800679e:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80067a2:	bf2c      	ite	cs
 80067a4:	2600      	movcs	r6, #0
 80067a6:	2601      	movcc	r6, #1
 80067a8:	9601      	str	r6, [sp, #4]
 80067aa:	b116      	cbz	r6, 80067b2 <copy_O+0x182>
 80067ac:	2c00      	cmp	r4, #0
 80067ae:	f040 809e 	bne.w	80068ee <copy_O+0x2be>
    int pixel_y = y_base + y;
 80067b2:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067b4:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80067b8:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067bc:	bf2c      	ite	cs
 80067be:	2200      	movcs	r2, #0
 80067c0:	2201      	movcc	r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80067c2:	0164      	lsls	r4, r4, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067c4:	b16a      	cbz	r2, 80067e2 <copy_O+0x1b2>
 80067c6:	9e03      	ldr	r6, [sp, #12]
 80067c8:	2e00      	cmp	r6, #0
 80067ca:	d176      	bne.n	80068ba <copy_O+0x28a>
 80067cc:	b14a      	cbz	r2, 80067e2 <copy_O+0x1b2>
 80067ce:	9e04      	ldr	r6, [sp, #16]
 80067d0:	2e00      	cmp	r6, #0
 80067d2:	d16e      	bne.n	80068b2 <copy_O+0x282>
 80067d4:	b12a      	cbz	r2, 80067e2 <copy_O+0x1b2>
 80067d6:	9e05      	ldr	r6, [sp, #20]
 80067d8:	b11e      	cbz	r6, 80067e2 <copy_O+0x1b2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80067da:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80067dc:	4426      	add	r6, r4
 80067de:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067e2:	f1b9 0f00 	cmp.w	r9, #0
 80067e6:	d001      	beq.n	80067ec <copy_O+0x1bc>
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	d16c      	bne.n	80068c6 <copy_O+0x296>
    int pixel_x = x_base + x + offset;
 80067ec:	3105      	adds	r1, #5
 80067ee:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067f0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80067f4:	bf2c      	ite	cs
 80067f6:	2200      	movcs	r2, #0
 80067f8:	2201      	movcc	r2, #1
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	d02d      	beq.n	800685a <copy_O+0x22a>
 80067fe:	9c02      	ldr	r4, [sp, #8]
 8006800:	2c00      	cmp	r4, #0
 8006802:	d165      	bne.n	80068d0 <copy_O+0x2a0>
 8006804:	b34a      	cbz	r2, 800685a <copy_O+0x22a>
 8006806:	9c06      	ldr	r4, [sp, #24]
 8006808:	2c00      	cmp	r4, #0
 800680a:	f040 8080 	bne.w	800690e <copy_O+0x2de>
 800680e:	b322      	cbz	r2, 800685a <copy_O+0x22a>
 8006810:	9c07      	ldr	r4, [sp, #28]
 8006812:	2c00      	cmp	r4, #0
 8006814:	f040 80a4 	bne.w	8006960 <copy_O+0x330>
 8006818:	b1fa      	cbz	r2, 800685a <copy_O+0x22a>
 800681a:	9c08      	ldr	r4, [sp, #32]
 800681c:	2c00      	cmp	r4, #0
 800681e:	f040 8097 	bne.w	8006950 <copy_O+0x320>
 8006822:	b1d2      	cbz	r2, 800685a <copy_O+0x22a>
 8006824:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8006826:	2c00      	cmp	r4, #0
 8006828:	f040 808a 	bne.w	8006940 <copy_O+0x310>
 800682c:	b1aa      	cbz	r2, 800685a <copy_O+0x22a>
 800682e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006830:	2c00      	cmp	r4, #0
 8006832:	d17d      	bne.n	8006930 <copy_O+0x300>
 8006834:	b18a      	cbz	r2, 800685a <copy_O+0x22a>
 8006836:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006838:	2c00      	cmp	r4, #0
 800683a:	f040 80a1 	bne.w	8006980 <copy_O+0x350>
 800683e:	b162      	cbz	r2, 800685a <copy_O+0x22a>
 8006840:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006842:	2c00      	cmp	r4, #0
 8006844:	f040 8094 	bne.w	8006970 <copy_O+0x340>
 8006848:	b13a      	cbz	r2, 800685a <copy_O+0x22a>
 800684a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800684c:	b12c      	cbz	r4, 800685a <copy_O+0x22a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800684e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006852:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 8006856:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800685a:	9c01      	ldr	r4, [sp, #4]
 800685c:	b10c      	cbz	r4, 8006862 <copy_O+0x232>
 800685e:	2a00      	cmp	r2, #0
 8006860:	d15d      	bne.n	800691e <copy_O+0x2ee>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
}
 8006862:	b017      	add	sp, #92	@ 0x5c
 8006864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006868:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800686c:	eb08 1444 	add.w	r4, r8, r4, lsl #5
 8006870:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006874:	e71d      	b.n	80066b2 <copy_O+0x82>
 8006876:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800687a:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800687e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006882:	e706      	b.n	8006692 <copy_O+0x62>
 8006884:	240001b8 	.word	0x240001b8
 8006888:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800688c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8006890:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006894:	e6f0      	b.n	8006678 <copy_O+0x48>
 8006896:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800689a:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 800689e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80068a2:	e6dc      	b.n	800665e <copy_O+0x2e>
 80068a4:	ebcb 170b 	rsb	r7, fp, fp, lsl #4
 80068a8:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80068ac:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80068b0:	e712      	b.n	80066d8 <copy_O+0xa8>
 80068b2:	44a4      	add	ip, r4
 80068b4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80068b8:	e78c      	b.n	80067d4 <copy_O+0x1a4>
 80068ba:	44a6      	add	lr, r4
 80068bc:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80068c0:	2a00      	cmp	r2, #0
 80068c2:	d184      	bne.n	80067ce <copy_O+0x19e>
 80068c4:	e78d      	b.n	80067e2 <copy_O+0x1b2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80068c6:	eb08 0204 	add.w	r2, r8, r4
 80068ca:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80068ce:	e78d      	b.n	80067ec <copy_O+0x1bc>
 80068d0:	ebcb 140b 	rsb	r4, fp, fp, lsl #4
 80068d4:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 80068d8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80068dc:	e792      	b.n	8006804 <copy_O+0x1d4>
 80068de:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80068e2:	9e00      	ldr	r6, [sp, #0]
 80068e4:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80068e8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80068ec:	e700      	b.n	80066f0 <copy_O+0xc0>
 80068ee:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 80068f2:	9e00      	ldr	r6, [sp, #0]
 80068f4:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 80068f8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80068fc:	e759      	b.n	80067b2 <copy_O+0x182>
 80068fe:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 8006902:	9e00      	ldr	r6, [sp, #0]
 8006904:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 8006908:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 800690c:	e745      	b.n	800679a <copy_O+0x16a>
 800690e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8006910:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006914:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006918:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800691c:	e777      	b.n	800680e <copy_O+0x1de>
 800691e:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8006922:	eb01 114a 	add.w	r1, r1, sl, lsl #5
 8006926:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 800692a:	b017      	add	sp, #92	@ 0x5c
 800692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006930:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006932:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006936:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800693a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800693e:	e779      	b.n	8006834 <copy_O+0x204>
 8006940:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8006942:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006946:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800694a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800694e:	e76d      	b.n	800682c <copy_O+0x1fc>
 8006950:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006952:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006956:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800695a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800695e:	e760      	b.n	8006822 <copy_O+0x1f2>
 8006960:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8006962:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006966:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800696a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800696e:	e753      	b.n	8006818 <copy_O+0x1e8>
 8006970:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8006972:	ebc4 1804 	rsb	r8, r4, r4, lsl #4
 8006976:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 800697a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800697e:	e763      	b.n	8006848 <copy_O+0x218>
 8006980:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8006982:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006986:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800698a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800698e:	e756      	b.n	800683e <copy_O+0x20e>
 8006990:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006994:	9e00      	ldr	r6, [sp, #0]
 8006996:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800699a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800699e:	e6bf      	b.n	8006720 <copy_O+0xf0>
 80069a0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80069a4:	9e00      	ldr	r6, [sp, #0]
 80069a6:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80069aa:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80069ae:	e6ab      	b.n	8006708 <copy_O+0xd8>
 80069b0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80069b4:	9e00      	ldr	r6, [sp, #0]
 80069b6:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80069ba:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80069be:	e6e0      	b.n	8006782 <copy_O+0x152>
 80069c0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80069c4:	9e00      	ldr	r6, [sp, #0]
 80069c6:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80069ca:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80069ce:	e6cb      	b.n	8006768 <copy_O+0x138>
 80069d0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80069d4:	9e00      	ldr	r6, [sp, #0]
 80069d6:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80069da:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80069de:	e6b7      	b.n	8006750 <copy_O+0x120>
 80069e0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80069e4:	9e00      	ldr	r6, [sp, #0]
 80069e6:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80069ea:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80069ee:	e6a3      	b.n	8006738 <copy_O+0x108>

080069f0 <copy_P>:

void copy_P(uint16_t* buffer, int x, int y, uint32_t color)
{
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80069f4:	4caf      	ldr	r4, [pc, #700]	@ (8006cb4 <copy_P+0x2c4>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80069f6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 80069fa:	b08d      	sub	sp, #52	@ 0x34
    int pixel_x = x_base + x + offset;
 80069fc:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80069fe:	bf2c      	ite	cs
 8006a00:	f04f 0b00 	movcs.w	fp, #0
 8006a04:	f04f 0b01 	movcc.w	fp, #1
    int pixel_x = x_base + x + offset;
 8006a08:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006a0c:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8006a10:	bf2c      	ite	cs
 8006a12:	2500      	movcs	r5, #0
 8006a14:	2501      	movcc	r5, #1
 8006a16:	b11d      	cbz	r5, 8006a20 <copy_P+0x30>
 8006a18:	f1bb 0f00 	cmp.w	fp, #0
 8006a1c:	f040 8137 	bne.w	8006c8e <copy_P+0x29e>
    int pixel_y = y_base + y;
 8006a20:	1c57      	adds	r7, r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006a22:	0116      	lsls	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006a24:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006a28:	9601      	str	r6, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006a2a:	9709      	str	r7, [sp, #36]	@ 0x24
 8006a2c:	bf2c      	ite	cs
 8006a2e:	2600      	movcs	r6, #0
 8006a30:	2601      	movcc	r6, #1
 8006a32:	9602      	str	r6, [sp, #8]
 8006a34:	b115      	cbz	r5, 8006a3c <copy_P+0x4c>
 8006a36:	2e00      	cmp	r6, #0
 8006a38:	f040 8121 	bne.w	8006c7e <copy_P+0x28e>
    int pixel_y = y_base + y;
 8006a3c:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006a3e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8006a42:	970a      	str	r7, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006a44:	bf2c      	ite	cs
 8006a46:	2600      	movcs	r6, #0
 8006a48:	2601      	movcc	r6, #1
 8006a4a:	9603      	str	r6, [sp, #12]
 8006a4c:	b115      	cbz	r5, 8006a54 <copy_P+0x64>
 8006a4e:	2e00      	cmp	r6, #0
 8006a50:	f040 8124 	bne.w	8006c9c <copy_P+0x2ac>
    int pixel_y = y_base + y;
 8006a54:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006a56:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8006a5a:	970b      	str	r7, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006a5c:	bf2c      	ite	cs
 8006a5e:	2600      	movcs	r6, #0
 8006a60:	2601      	movcc	r6, #1
 8006a62:	9604      	str	r6, [sp, #16]
 8006a64:	b115      	cbz	r5, 8006a6c <copy_P+0x7c>
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	f040 80ca 	bne.w	8006c00 <copy_P+0x210>
    int pixel_y = y_base + y;
 8006a6c:	f102 0804 	add.w	r8, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006a70:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8006a74:	bf2c      	ite	cs
 8006a76:	2600      	movcs	r6, #0
 8006a78:	2601      	movcc	r6, #1
 8006a7a:	9605      	str	r6, [sp, #20]
 8006a7c:	b115      	cbz	r5, 8006a84 <copy_P+0x94>
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	f040 80f6 	bne.w	8006c70 <copy_P+0x280>
    int pixel_y = y_base + y;
 8006a84:	f102 0a05 	add.w	sl, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006a88:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8006a8c:	bf2c      	ite	cs
 8006a8e:	2600      	movcs	r6, #0
 8006a90:	2601      	movcc	r6, #1
 8006a92:	9606      	str	r6, [sp, #24]
 8006a94:	b115      	cbz	r5, 8006a9c <copy_P+0xac>
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	f040 80e3 	bne.w	8006c62 <copy_P+0x272>
    int pixel_y = y_base + y;
 8006a9c:	f102 0906 	add.w	r9, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006aa0:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8006aa4:	d202      	bcs.n	8006aac <copy_P+0xbc>
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	f040 80d4 	bne.w	8006c54 <copy_P+0x264>
    int pixel_y = y_base + y;
 8006aac:	f102 0c07 	add.w	ip, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ab0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006ab4:	d202      	bcs.n	8006abc <copy_P+0xcc>
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	f040 80c5 	bne.w	8006c46 <copy_P+0x256>
    int pixel_y = y_base + y;
 8006abc:	f102 0c08 	add.w	ip, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ac0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006ac4:	d202      	bcs.n	8006acc <copy_P+0xdc>
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	f040 80b6 	bne.w	8006c38 <copy_P+0x248>
    int pixel_y = y_base + y;
 8006acc:	f102 0c09 	add.w	ip, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ad0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006ad4:	d202      	bcs.n	8006adc <copy_P+0xec>
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	f040 80a7 	bne.w	8006c2a <copy_P+0x23a>
    int pixel_y = y_base + y;
 8006adc:	f102 0c0a 	add.w	ip, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ae0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006ae4:	d202      	bcs.n	8006aec <copy_P+0xfc>
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	f040 8098 	bne.w	8006c1c <copy_P+0x22c>
    int pixel_y = y_base + y;
 8006aec:	f102 0c0b 	add.w	ip, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006af0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006af4:	d202      	bcs.n	8006afc <copy_P+0x10c>
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	f040 8089 	bne.w	8006c0e <copy_P+0x21e>
    int pixel_x = x_base + x + offset;
 8006afc:	f101 0c01 	add.w	ip, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006b00:	9d01      	ldr	r5, [sp, #4]
    int pixel_x = x_base + x + offset;
 8006b02:	44a4      	add	ip, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006b04:	1aaa      	subs	r2, r5, r2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b06:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006b0a:	ea4f 1242 	mov.w	r2, r2, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b0e:	bf2c      	ite	cs
 8006b10:	2500      	movcs	r5, #0
 8006b12:	2501      	movcc	r5, #1
 8006b14:	9501      	str	r5, [sp, #4]
 8006b16:	b11d      	cbz	r5, 8006b20 <copy_P+0x130>
 8006b18:	f1bb 0f00 	cmp.w	fp, #0
 8006b1c:	f040 80c5 	bne.w	8006caa <copy_P+0x2ba>
    int pixel_x = x_base + x + offset;
 8006b20:	1c8e      	adds	r6, r1, #2
 8006b22:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b24:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8006b28:	bf2c      	ite	cs
 8006b2a:	2500      	movcs	r5, #0
 8006b2c:	2501      	movcc	r5, #1
 8006b2e:	9507      	str	r5, [sp, #28]
 8006b30:	b11d      	cbz	r5, 8006b3a <copy_P+0x14a>
 8006b32:	f1bb 0f00 	cmp.w	fp, #0
 8006b36:	f040 80bf 	bne.w	8006cb8 <copy_P+0x2c8>
    int pixel_x = x_base + x + offset;
 8006b3a:	1ccd      	adds	r5, r1, #3
 8006b3c:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b3e:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8006b42:	bf2c      	ite	cs
 8006b44:	2700      	movcs	r7, #0
 8006b46:	2701      	movcc	r7, #1
 8006b48:	9708      	str	r7, [sp, #32]
 8006b4a:	b11f      	cbz	r7, 8006b54 <copy_P+0x164>
 8006b4c:	f1bb 0f00 	cmp.w	fp, #0
 8006b50:	f040 80bb 	bne.w	8006cca <copy_P+0x2da>
    int pixel_x = x_base + x + offset;
 8006b54:	f101 0e04 	add.w	lr, r1, #4
 8006b58:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b5a:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8006b5e:	bf2c      	ite	cs
 8006b60:	2700      	movcs	r7, #0
 8006b62:	2701      	movcc	r7, #1
 8006b64:	b11f      	cbz	r7, 8006b6e <copy_P+0x17e>
 8006b66:	f1bb 0f00 	cmp.w	fp, #0
 8006b6a:	f040 80a9 	bne.w	8006cc0 <copy_P+0x2d0>
    int pixel_x = x_base + x + offset;
 8006b6e:	3105      	adds	r1, #5
 8006b70:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b72:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8006b76:	bf2c      	ite	cs
 8006b78:	f04f 0b00 	movcs.w	fp, #0
 8006b7c:	f04f 0b01 	movcc.w	fp, #1
 8006b80:	f1bb 0f00 	cmp.w	fp, #0
 8006b84:	d01f      	beq.n	8006bc6 <copy_P+0x1d6>
 8006b86:	9c02      	ldr	r4, [sp, #8]
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	f040 80a2 	bne.w	8006cd2 <copy_P+0x2e2>
 8006b8e:	f1bb 0f00 	cmp.w	fp, #0
 8006b92:	d018      	beq.n	8006bc6 <copy_P+0x1d6>
 8006b94:	9c03      	ldr	r4, [sp, #12]
 8006b96:	2c00      	cmp	r4, #0
 8006b98:	f040 80ca 	bne.w	8006d30 <copy_P+0x340>
 8006b9c:	f1bb 0f00 	cmp.w	fp, #0
 8006ba0:	d011      	beq.n	8006bc6 <copy_P+0x1d6>
 8006ba2:	9c04      	ldr	r4, [sp, #16]
 8006ba4:	2c00      	cmp	r4, #0
 8006ba6:	f040 80bb 	bne.w	8006d20 <copy_P+0x330>
 8006baa:	f1bb 0f00 	cmp.w	fp, #0
 8006bae:	d00a      	beq.n	8006bc6 <copy_P+0x1d6>
 8006bb0:	9c05      	ldr	r4, [sp, #20]
 8006bb2:	2c00      	cmp	r4, #0
 8006bb4:	f040 80a6 	bne.w	8006d04 <copy_P+0x314>
 8006bb8:	f1bb 0f00 	cmp.w	fp, #0
 8006bbc:	d003      	beq.n	8006bc6 <copy_P+0x1d6>
 8006bbe:	9c06      	ldr	r4, [sp, #24]
 8006bc0:	2c00      	cmp	r4, #0
 8006bc2:	f040 80a6 	bne.w	8006d12 <copy_P+0x322>
 8006bc6:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006bca:	f502 6234 	add.w	r2, r2, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006bce:	bf2c      	ite	cs
 8006bd0:	2100      	movcs	r1, #0
 8006bd2:	2101      	movcc	r1, #1
 8006bd4:	b171      	cbz	r1, 8006bf4 <copy_P+0x204>
 8006bd6:	9c01      	ldr	r4, [sp, #4]
 8006bd8:	2c00      	cmp	r4, #0
 8006bda:	f040 808c 	bne.w	8006cf6 <copy_P+0x306>
 8006bde:	b149      	cbz	r1, 8006bf4 <copy_P+0x204>
 8006be0:	9c07      	ldr	r4, [sp, #28]
 8006be2:	2c00      	cmp	r4, #0
 8006be4:	f040 8083 	bne.w	8006cee <copy_P+0x2fe>
 8006be8:	b121      	cbz	r1, 8006bf4 <copy_P+0x204>
 8006bea:	9c08      	ldr	r4, [sp, #32]
 8006bec:	b114      	cbz	r4, 8006bf4 <copy_P+0x204>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006bee:	4415      	add	r5, r2
 8006bf0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006bf4:	b10f      	cbz	r7, 8006bfa <copy_P+0x20a>
 8006bf6:	2900      	cmp	r1, #0
 8006bf8:	d173      	bne.n	8006ce2 <copy_P+0x2f2>
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 6; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 6, color);
}
 8006bfa:	b00d      	add	sp, #52	@ 0x34
 8006bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006c00:	ebc7 1c07 	rsb	ip, r7, r7, lsl #4
 8006c04:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006c08:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006c0c:	e72e      	b.n	8006a6c <copy_P+0x7c>
 8006c0e:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006c12:	eb0e 164c 	add.w	r6, lr, ip, lsl #5
 8006c16:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006c1a:	e76f      	b.n	8006afc <copy_P+0x10c>
 8006c1c:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006c20:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006c24:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006c28:	e760      	b.n	8006aec <copy_P+0xfc>
 8006c2a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006c2e:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006c32:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006c36:	e751      	b.n	8006adc <copy_P+0xec>
 8006c38:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006c3c:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006c40:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006c44:	e742      	b.n	8006acc <copy_P+0xdc>
 8006c46:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006c4a:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006c4e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006c52:	e733      	b.n	8006abc <copy_P+0xcc>
 8006c54:	ebc9 1c09 	rsb	ip, r9, r9, lsl #4
 8006c58:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006c5c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006c60:	e724      	b.n	8006aac <copy_P+0xbc>
 8006c62:	ebca 1c0a 	rsb	ip, sl, sl, lsl #4
 8006c66:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006c6a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006c6e:	e715      	b.n	8006a9c <copy_P+0xac>
 8006c70:	ebc8 1c08 	rsb	ip, r8, r8, lsl #4
 8006c74:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006c78:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006c7c:	e702      	b.n	8006a84 <copy_P+0x94>
 8006c7e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8006c80:	ebc7 1c07 	rsb	ip, r7, r7, lsl #4
 8006c84:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006c88:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006c8c:	e6d6      	b.n	8006a3c <copy_P+0x4c>
 8006c8e:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8006c92:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8006c96:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006c9a:	e6c1      	b.n	8006a20 <copy_P+0x30>
 8006c9c:	ebc7 1c07 	rsb	ip, r7, r7, lsl #4
 8006ca0:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006ca4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006ca8:	e6d4      	b.n	8006a54 <copy_P+0x64>
 8006caa:	eb02 050c 	add.w	r5, r2, ip
 8006cae:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8006cb2:	e735      	b.n	8006b20 <copy_P+0x130>
 8006cb4:	240001b8 	.word	0x240001b8
 8006cb8:	1995      	adds	r5, r2, r6
 8006cba:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8006cbe:	e73c      	b.n	8006b3a <copy_P+0x14a>
 8006cc0:	eb0e 0b02 	add.w	fp, lr, r2
 8006cc4:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8006cc8:	e751      	b.n	8006b6e <copy_P+0x17e>
 8006cca:	1957      	adds	r7, r2, r5
 8006ccc:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006cd0:	e740      	b.n	8006b54 <copy_P+0x164>
 8006cd2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8006cd4:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006cd8:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006cdc:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006ce0:	e755      	b.n	8006b8e <copy_P+0x19e>
 8006ce2:	4496      	add	lr, r2
 8006ce4:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
}
 8006ce8:	b00d      	add	sp, #52	@ 0x34
 8006cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006cee:	4416      	add	r6, r2
 8006cf0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006cf4:	e778      	b.n	8006be8 <copy_P+0x1f8>
 8006cf6:	4494      	add	ip, r2
 8006cf8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	f47f af6f 	bne.w	8006be0 <copy_P+0x1f0>
 8006d02:	e777      	b.n	8006bf4 <copy_P+0x204>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006d04:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 8006d08:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006d0c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006d10:	e752      	b.n	8006bb8 <copy_P+0x1c8>
 8006d12:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 8006d16:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 8006d1a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8006d1e:	e752      	b.n	8006bc6 <copy_P+0x1d6>
 8006d20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006d22:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006d26:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006d2a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006d2e:	e73c      	b.n	8006baa <copy_P+0x1ba>
 8006d30:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d32:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006d36:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006d3a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006d3e:	e72d      	b.n	8006b9c <copy_P+0x1ac>

08006d40 <copy_Q>:

void copy_Q(uint16_t* buffer, int x, int y, uint32_t color)
{
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8006d44:	4c93      	ldr	r4, [pc, #588]	@ (8006f94 <copy_Q+0x254>)
 8006d46:	1c4e      	adds	r6, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006d48:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8006d4c:	b097      	sub	sp, #92	@ 0x5c
    int pixel_x = x_base + x + offset;
 8006d4e:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006d50:	bf2c      	ite	cs
 8006d52:	2400      	movcs	r4, #0
 8006d54:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 8006d56:	442e      	add	r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006d58:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8006d5c:	9607      	str	r6, [sp, #28]
 8006d5e:	bf2c      	ite	cs
 8006d60:	2600      	movcs	r6, #0
 8006d62:	2601      	movcc	r6, #1
 8006d64:	9604      	str	r6, [sp, #16]
 8006d66:	b114      	cbz	r4, 8006d6e <copy_Q+0x2e>
 8006d68:	2e00      	cmp	r6, #0
 8006d6a:	f040 8135 	bne.w	8006fd8 <copy_Q+0x298>
    int pixel_x = x_base + x + offset;
 8006d6e:	f101 0e02 	add.w	lr, r1, #2
 8006d72:	44ae      	add	lr, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006d74:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8006d78:	bf2c      	ite	cs
 8006d7a:	2600      	movcs	r6, #0
 8006d7c:	2601      	movcc	r6, #1
 8006d7e:	9605      	str	r6, [sp, #20]
 8006d80:	b114      	cbz	r4, 8006d88 <copy_Q+0x48>
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	f040 813f 	bne.w	8007006 <copy_Q+0x2c6>
    int pixel_x = x_base + x + offset;
 8006d88:	1ccf      	adds	r7, r1, #3
 8006d8a:	442f      	add	r7, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006d8c:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8006d90:	9702      	str	r7, [sp, #8]
 8006d92:	bf2c      	ite	cs
 8006d94:	2600      	movcs	r6, #0
 8006d96:	2601      	movcc	r6, #1
 8006d98:	9601      	str	r6, [sp, #4]
 8006d9a:	b114      	cbz	r4, 8006da2 <copy_Q+0x62>
 8006d9c:	2e00      	cmp	r6, #0
 8006d9e:	f040 812a 	bne.w	8006ff6 <copy_Q+0x2b6>
    int pixel_x = x_base + x + offset;
 8006da2:	1d0f      	adds	r7, r1, #4
 8006da4:	197e      	adds	r6, r7, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006da6:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8006daa:	9606      	str	r6, [sp, #24]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006dac:	bf2c      	ite	cs
 8006dae:	2700      	movcs	r7, #0
 8006db0:	2701      	movcc	r7, #1
 8006db2:	9700      	str	r7, [sp, #0]
 8006db4:	b114      	cbz	r4, 8006dbc <copy_Q+0x7c>
 8006db6:	2f00      	cmp	r7, #0
 8006db8:	f040 8116 	bne.w	8006fe8 <copy_Q+0x2a8>
    int pixel_x = x_base + x + offset;
 8006dbc:	eb01 0b05 	add.w	fp, r1, r5
    int pixel_y = y_base + y;
 8006dc0:	f102 0901 	add.w	r9, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006dc4:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8006dc8:	bf2c      	ite	cs
 8006dca:	2400      	movcs	r4, #0
 8006dcc:	2401      	movcc	r4, #1
 8006dce:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8006dd2:	bf2c      	ite	cs
 8006dd4:	2600      	movcs	r6, #0
 8006dd6:	2601      	movcc	r6, #1
 8006dd8:	9603      	str	r6, [sp, #12]
 8006dda:	b114      	cbz	r4, 8006de2 <copy_Q+0xa2>
 8006ddc:	2e00      	cmp	r6, #0
 8006dde:	f040 8129 	bne.w	8007034 <copy_Q+0x2f4>
    int pixel_y = y_base + y;
 8006de2:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006de4:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006de8:	9610      	str	r6, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006dea:	bf2c      	ite	cs
 8006dec:	2700      	movcs	r7, #0
 8006dee:	2701      	movcc	r7, #1
 8006df0:	9708      	str	r7, [sp, #32]
 8006df2:	b114      	cbz	r4, 8006dfa <copy_Q+0xba>
 8006df4:	2f00      	cmp	r7, #0
 8006df6:	f040 81ab 	bne.w	8007150 <copy_Q+0x410>
    int pixel_y = y_base + y;
 8006dfa:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006dfc:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006e00:	9611      	str	r6, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e02:	bf2c      	ite	cs
 8006e04:	2700      	movcs	r7, #0
 8006e06:	2701      	movcc	r7, #1
 8006e08:	9709      	str	r7, [sp, #36]	@ 0x24
 8006e0a:	b114      	cbz	r4, 8006e12 <copy_Q+0xd2>
 8006e0c:	2f00      	cmp	r7, #0
 8006e0e:	f040 8198 	bne.w	8007142 <copy_Q+0x402>
    int pixel_y = y_base + y;
 8006e12:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e14:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006e18:	9612      	str	r6, [sp, #72]	@ 0x48
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e1a:	bf2c      	ite	cs
 8006e1c:	2700      	movcs	r7, #0
 8006e1e:	2701      	movcc	r7, #1
 8006e20:	970a      	str	r7, [sp, #40]	@ 0x28
 8006e22:	b114      	cbz	r4, 8006e2a <copy_Q+0xea>
 8006e24:	2f00      	cmp	r7, #0
 8006e26:	f040 8185 	bne.w	8007134 <copy_Q+0x3f4>
    int pixel_y = y_base + y;
 8006e2a:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e2c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006e30:	9613      	str	r6, [sp, #76]	@ 0x4c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e32:	bf2c      	ite	cs
 8006e34:	2700      	movcs	r7, #0
 8006e36:	2701      	movcc	r7, #1
 8006e38:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006e3a:	b114      	cbz	r4, 8006e42 <copy_Q+0x102>
 8006e3c:	2f00      	cmp	r7, #0
 8006e3e:	f040 8172 	bne.w	8007126 <copy_Q+0x3e6>
    int pixel_y = y_base + y;
 8006e42:	1d96      	adds	r6, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e44:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006e48:	9614      	str	r6, [sp, #80]	@ 0x50
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e4a:	bf2c      	ite	cs
 8006e4c:	2700      	movcs	r7, #0
 8006e4e:	2701      	movcc	r7, #1
 8006e50:	970c      	str	r7, [sp, #48]	@ 0x30
 8006e52:	b114      	cbz	r4, 8006e5a <copy_Q+0x11a>
 8006e54:	2f00      	cmp	r7, #0
 8006e56:	f040 8140 	bne.w	80070da <copy_Q+0x39a>
    int pixel_y = y_base + y;
 8006e5a:	f102 0a07 	add.w	sl, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e5e:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8006e62:	bf2c      	ite	cs
 8006e64:	2600      	movcs	r6, #0
 8006e66:	2601      	movcc	r6, #1
 8006e68:	960d      	str	r6, [sp, #52]	@ 0x34
 8006e6a:	b114      	cbz	r4, 8006e72 <copy_Q+0x132>
 8006e6c:	2e00      	cmp	r6, #0
 8006e6e:	f040 812d 	bne.w	80070cc <copy_Q+0x38c>
    int pixel_y = y_base + y;
 8006e72:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e76:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8006e7a:	bf2c      	ite	cs
 8006e7c:	2600      	movcs	r6, #0
 8006e7e:	2601      	movcc	r6, #1
 8006e80:	960e      	str	r6, [sp, #56]	@ 0x38
 8006e82:	b114      	cbz	r4, 8006e8a <copy_Q+0x14a>
 8006e84:	2e00      	cmp	r6, #0
 8006e86:	f040 811a 	bne.w	80070be <copy_Q+0x37e>
    int pixel_y = y_base + y;
 8006e8a:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e8e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8006e92:	bf2c      	ite	cs
 8006e94:	2600      	movcs	r6, #0
 8006e96:	2601      	movcc	r6, #1
 8006e98:	960f      	str	r6, [sp, #60]	@ 0x3c
 8006e9a:	b114      	cbz	r4, 8006ea2 <copy_Q+0x162>
 8006e9c:	2e00      	cmp	r6, #0
 8006e9e:	f040 8107 	bne.w	80070b0 <copy_Q+0x370>
    int pixel_y = y_base + y;
 8006ea2:	f102 0c0a 	add.w	ip, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ea6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006eaa:	d202      	bcs.n	8006eb2 <copy_Q+0x172>
 8006eac:	2c00      	cmp	r4, #0
 8006eae:	f040 80e1 	bne.w	8007074 <copy_Q+0x334>
    int pixel_y = y_base + y;
 8006eb2:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006eb4:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006eb8:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8006ebc:	ea4f 1602 	mov.w	r6, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ec0:	bf2c      	ite	cs
 8006ec2:	f04f 0b00 	movcs.w	fp, #0
 8006ec6:	f04f 0b01 	movcc.w	fp, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006eca:	0164      	lsls	r4, r4, #5
 8006ecc:	9615      	str	r6, [sp, #84]	@ 0x54
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ece:	f1bb 0f00 	cmp.w	fp, #0
 8006ed2:	d013      	beq.n	8006efc <copy_Q+0x1bc>
 8006ed4:	9e04      	ldr	r6, [sp, #16]
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	f040 80bc 	bne.w	8007054 <copy_Q+0x314>
 8006edc:	f1bb 0f00 	cmp.w	fp, #0
 8006ee0:	d00c      	beq.n	8006efc <copy_Q+0x1bc>
 8006ee2:	9e05      	ldr	r6, [sp, #20]
 8006ee4:	2e00      	cmp	r6, #0
 8006ee6:	f040 80ac 	bne.w	8007042 <copy_Q+0x302>
 8006eea:	f1bb 0f00 	cmp.w	fp, #0
 8006eee:	d005      	beq.n	8006efc <copy_Q+0x1bc>
 8006ef0:	9e01      	ldr	r6, [sp, #4]
 8006ef2:	b11e      	cbz	r6, 8006efc <copy_Q+0x1bc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006ef4:	9e02      	ldr	r6, [sp, #8]
 8006ef6:	19a6      	adds	r6, r4, r6
 8006ef8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006efc:	9e00      	ldr	r6, [sp, #0]
 8006efe:	b11e      	cbz	r6, 8006f08 <copy_Q+0x1c8>
 8006f00:	f1bb 0f00 	cmp.w	fp, #0
 8006f04:	f040 80a1 	bne.w	800704a <copy_Q+0x30a>
    int pixel_x = x_base + x + offset;
 8006f08:	3105      	adds	r1, #5
 8006f0a:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f0c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8006f10:	bf2c      	ite	cs
 8006f12:	2400      	movcs	r4, #0
 8006f14:	2401      	movcc	r4, #1
 8006f16:	2c00      	cmp	r4, #0
 8006f18:	d02f      	beq.n	8006f7a <copy_Q+0x23a>
 8006f1a:	9d03      	ldr	r5, [sp, #12]
 8006f1c:	2d00      	cmp	r5, #0
 8006f1e:	f040 80a2 	bne.w	8007066 <copy_Q+0x326>
 8006f22:	b354      	cbz	r4, 8006f7a <copy_Q+0x23a>
 8006f24:	9d08      	ldr	r5, [sp, #32]
 8006f26:	2d00      	cmp	r5, #0
 8006f28:	f040 80ba 	bne.w	80070a0 <copy_Q+0x360>
 8006f2c:	b32c      	cbz	r4, 8006f7a <copy_Q+0x23a>
 8006f2e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006f30:	2d00      	cmp	r5, #0
 8006f32:	f040 80ad 	bne.w	8007090 <copy_Q+0x350>
 8006f36:	b304      	cbz	r4, 8006f7a <copy_Q+0x23a>
 8006f38:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006f3a:	2d00      	cmp	r5, #0
 8006f3c:	f040 80eb 	bne.w	8007116 <copy_Q+0x3d6>
 8006f40:	b1dc      	cbz	r4, 8006f7a <copy_Q+0x23a>
 8006f42:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	f040 80de 	bne.w	8007106 <copy_Q+0x3c6>
 8006f4a:	b1b4      	cbz	r4, 8006f7a <copy_Q+0x23a>
 8006f4c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006f4e:	2d00      	cmp	r5, #0
 8006f50:	f040 80d1 	bne.w	80070f6 <copy_Q+0x3b6>
 8006f54:	b18c      	cbz	r4, 8006f7a <copy_Q+0x23a>
 8006f56:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006f58:	2d00      	cmp	r5, #0
 8006f5a:	f040 80c5 	bne.w	80070e8 <copy_Q+0x3a8>
 8006f5e:	b164      	cbz	r4, 8006f7a <copy_Q+0x23a>
 8006f60:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	f040 808d 	bne.w	8007082 <copy_Q+0x342>
 8006f68:	b13c      	cbz	r4, 8006f7a <copy_Q+0x23a>
 8006f6a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006f6c:	b12d      	cbz	r5, 8006f7a <copy_Q+0x23a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006f6e:	ebc7 1507 	rsb	r5, r7, r7, lsl #4
 8006f72:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8006f76:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f7a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8006f7e:	d202      	bcs.n	8006f86 <copy_Q+0x246>
 8006f80:	9d01      	ldr	r5, [sp, #4]
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	d146      	bne.n	8007014 <copy_Q+0x2d4>
 8006f86:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8006f8a:	d205      	bcs.n	8006f98 <copy_Q+0x258>
 8006f8c:	9d00      	ldr	r5, [sp, #0]
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	d148      	bne.n	8007024 <copy_Q+0x2e4>
 8006f92:	e001      	b.n	8006f98 <copy_Q+0x258>
 8006f94:	240001b8 	.word	0x240001b8
 8006f98:	f1bc 0f00 	cmp.w	ip, #0
 8006f9c:	db15      	blt.n	8006fca <copy_Q+0x28a>
 8006f9e:	b1a4      	cbz	r4, 8006fca <copy_Q+0x28a>
 8006fa0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006fa4:	da0e      	bge.n	8006fc4 <copy_Q+0x284>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006fa6:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006faa:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 8006fae:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006fb2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8006fb6:	da05      	bge.n	8006fc4 <copy_Q+0x284>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006fb8:	0114      	lsls	r4, r2, #4
 8006fba:	1aa2      	subs	r2, r4, r2
 8006fbc:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8006fc0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for (int i = 1; i < 10; i++) fill_pixel(buffer, x, y, 5, i, color);
    fill_pixel(buffer, x, y, 3, 8, color);
    fill_pixel(buffer, x, y, 4, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    fill_pixel(buffer, x, y, 5, 11, color);
}
 8006fc4:	b017      	add	sp, #92	@ 0x5c
 8006fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	dbfa      	blt.n	8006fc4 <copy_Q+0x284>
 8006fce:	2c00      	cmp	r4, #0
 8006fd0:	d1ef      	bne.n	8006fb2 <copy_Q+0x272>
}
 8006fd2:	b017      	add	sp, #92	@ 0x5c
 8006fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006fd8:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8006fdc:	9e07      	ldr	r6, [sp, #28]
 8006fde:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8006fe2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006fe6:	e6c2      	b.n	8006d6e <copy_Q+0x2e>
 8006fe8:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8006fec:	eb06 1444 	add.w	r4, r6, r4, lsl #5
 8006ff0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006ff4:	e6e2      	b.n	8006dbc <copy_Q+0x7c>
 8006ff6:	463e      	mov	r6, r7
 8006ff8:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8006ffc:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8007000:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007004:	e6cd      	b.n	8006da2 <copy_Q+0x62>
 8007006:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 800700a:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 800700e:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007012:	e6b9      	b.n	8006d88 <copy_Q+0x48>
 8007014:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8007018:	9d02      	ldr	r5, [sp, #8]
 800701a:	eb05 1548 	add.w	r5, r5, r8, lsl #5
 800701e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007022:	e7b0      	b.n	8006f86 <copy_Q+0x246>
 8007024:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8007028:	9d06      	ldr	r5, [sp, #24]
 800702a:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 800702e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007032:	e7b1      	b.n	8006f98 <copy_Q+0x258>
 8007034:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 8007038:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 800703c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007040:	e6cf      	b.n	8006de2 <copy_Q+0xa2>
 8007042:	44a6      	add	lr, r4
 8007044:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8007048:	e74f      	b.n	8006eea <copy_Q+0x1aa>
 800704a:	9e06      	ldr	r6, [sp, #24]
 800704c:	4434      	add	r4, r6
 800704e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007052:	e759      	b.n	8006f08 <copy_Q+0x1c8>
 8007054:	9e07      	ldr	r6, [sp, #28]
 8007056:	4426      	add	r6, r4
 8007058:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800705c:	f1bb 0f00 	cmp.w	fp, #0
 8007060:	f47f af3f 	bne.w	8006ee2 <copy_Q+0x1a2>
 8007064:	e74a      	b.n	8006efc <copy_Q+0x1bc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007066:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 800706a:	eb01 1949 	add.w	r9, r1, r9, lsl #5
 800706e:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8007072:	e756      	b.n	8006f22 <copy_Q+0x1e2>
 8007074:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 8007078:	eb0b 1b44 	add.w	fp, fp, r4, lsl #5
 800707c:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8007080:	e717      	b.n	8006eb2 <copy_Q+0x172>
 8007082:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
 8007086:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800708a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800708e:	e76b      	b.n	8006f68 <copy_Q+0x228>
 8007090:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8007092:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007096:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800709a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800709e:	e74a      	b.n	8006f36 <copy_Q+0x1f6>
 80070a0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80070a2:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80070a6:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80070aa:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80070ae:	e73d      	b.n	8006f2c <copy_Q+0x1ec>
 80070b0:	ebc7 1c07 	rsb	ip, r7, r7, lsl #4
 80070b4:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 80070b8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80070bc:	e6f1      	b.n	8006ea2 <copy_Q+0x162>
 80070be:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 80070c2:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 80070c6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80070ca:	e6de      	b.n	8006e8a <copy_Q+0x14a>
 80070cc:	ebca 170a 	rsb	r7, sl, sl, lsl #4
 80070d0:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 80070d4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80070d8:	e6cb      	b.n	8006e72 <copy_Q+0x132>
 80070da:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 80070de:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 80070e2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80070e6:	e6b8      	b.n	8006e5a <copy_Q+0x11a>
 80070e8:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80070ec:	eb01 1a4a 	add.w	sl, r1, sl, lsl #5
 80070f0:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80070f4:	e733      	b.n	8006f5e <copy_Q+0x21e>
 80070f6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80070f8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80070fc:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8007100:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007104:	e726      	b.n	8006f54 <copy_Q+0x214>
 8007106:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8007108:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800710c:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8007110:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007114:	e719      	b.n	8006f4a <copy_Q+0x20a>
 8007116:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8007118:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800711c:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8007120:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007124:	e70c      	b.n	8006f40 <copy_Q+0x200>
 8007126:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 800712a:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 800712e:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007132:	e686      	b.n	8006e42 <copy_Q+0x102>
 8007134:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 8007138:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 800713c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007140:	e673      	b.n	8006e2a <copy_Q+0xea>
 8007142:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 8007146:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 800714a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800714e:	e660      	b.n	8006e12 <copy_Q+0xd2>
 8007150:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 8007154:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 8007158:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800715c:	e64d      	b.n	8006dfa <copy_Q+0xba>
 800715e:	bf00      	nop

08007160 <copy_R>:

void copy_R(uint16_t* buffer, int x, int y, uint32_t color)
{
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8007164:	4ca4      	ldr	r4, [pc, #656]	@ (80073f8 <copy_R+0x298>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007166:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800716a:	b093      	sub	sp, #76	@ 0x4c
    int pixel_x = x_base + x + offset;
 800716c:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800716e:	bf2c      	ite	cs
 8007170:	f04f 0b00 	movcs.w	fp, #0
 8007174:	f04f 0b01 	movcc.w	fp, #1
    int pixel_x = x_base + x + offset;
 8007178:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800717c:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8007180:	bf2c      	ite	cs
 8007182:	2700      	movcs	r7, #0
 8007184:	2701      	movcc	r7, #1
 8007186:	b11f      	cbz	r7, 8007190 <copy_R+0x30>
 8007188:	f1bb 0f00 	cmp.w	fp, #0
 800718c:	f040 818c 	bne.w	80074a8 <copy_R+0x348>
    int pixel_y = y_base + y;
 8007190:	1c55      	adds	r5, r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007192:	ea4f 1802 	mov.w	r8, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007196:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 800719a:	950d      	str	r5, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800719c:	bf2c      	ite	cs
 800719e:	2600      	movcs	r6, #0
 80071a0:	2601      	movcc	r6, #1
 80071a2:	9604      	str	r6, [sp, #16]
 80071a4:	b117      	cbz	r7, 80071ac <copy_R+0x4c>
 80071a6:	2e00      	cmp	r6, #0
 80071a8:	f040 8177 	bne.w	800749a <copy_R+0x33a>
    int pixel_y = y_base + y;
 80071ac:	1c95      	adds	r5, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80071ae:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 80071b2:	950e      	str	r5, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80071b4:	bf2c      	ite	cs
 80071b6:	2600      	movcs	r6, #0
 80071b8:	2601      	movcc	r6, #1
 80071ba:	9606      	str	r6, [sp, #24]
 80071bc:	b117      	cbz	r7, 80071c4 <copy_R+0x64>
 80071be:	2e00      	cmp	r6, #0
 80071c0:	f040 8164 	bne.w	800748c <copy_R+0x32c>
    int pixel_y = y_base + y;
 80071c4:	1cd5      	adds	r5, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80071c6:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 80071ca:	950f      	str	r5, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80071cc:	bf2c      	ite	cs
 80071ce:	2600      	movcs	r6, #0
 80071d0:	2601      	movcc	r6, #1
 80071d2:	9607      	str	r6, [sp, #28]
 80071d4:	b117      	cbz	r7, 80071dc <copy_R+0x7c>
 80071d6:	2e00      	cmp	r6, #0
 80071d8:	f040 8151 	bne.w	800747e <copy_R+0x31e>
    int pixel_y = y_base + y;
 80071dc:	1d15      	adds	r5, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80071de:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 80071e2:	9510      	str	r5, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80071e4:	bf2c      	ite	cs
 80071e6:	2600      	movcs	r6, #0
 80071e8:	2601      	movcc	r6, #1
 80071ea:	9608      	str	r6, [sp, #32]
 80071ec:	b117      	cbz	r7, 80071f4 <copy_R+0x94>
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	f040 813e 	bne.w	8007470 <copy_R+0x310>
    int pixel_y = y_base + y;
 80071f4:	1d55      	adds	r5, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80071f6:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 80071fa:	9511      	str	r5, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80071fc:	bf2c      	ite	cs
 80071fe:	2600      	movcs	r6, #0
 8007200:	2601      	movcc	r6, #1
 8007202:	9609      	str	r6, [sp, #36]	@ 0x24
 8007204:	b117      	cbz	r7, 800720c <copy_R+0xac>
 8007206:	2e00      	cmp	r6, #0
 8007208:	f040 812b 	bne.w	8007462 <copy_R+0x302>
    int pixel_y = y_base + y;
 800720c:	1d95      	adds	r5, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800720e:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 8007212:	9502      	str	r5, [sp, #8]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007214:	d202      	bcs.n	800721c <copy_R+0xbc>
 8007216:	2f00      	cmp	r7, #0
 8007218:	f040 811c 	bne.w	8007454 <copy_R+0x2f4>
    int pixel_y = y_base + y;
 800721c:	f102 0a07 	add.w	sl, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007220:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8007224:	d202      	bcs.n	800722c <copy_R+0xcc>
 8007226:	2f00      	cmp	r7, #0
 8007228:	f040 80f6 	bne.w	8007418 <copy_R+0x2b8>
    int pixel_y = y_base + y;
 800722c:	f102 0908 	add.w	r9, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007230:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8007234:	d202      	bcs.n	800723c <copy_R+0xdc>
 8007236:	2f00      	cmp	r7, #0
 8007238:	f040 80e7 	bne.w	800740a <copy_R+0x2aa>
    int pixel_y = y_base + y;
 800723c:	f102 0509 	add.w	r5, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007240:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8007244:	d202      	bcs.n	800724c <copy_R+0xec>
 8007246:	2f00      	cmp	r7, #0
 8007248:	f040 80d8 	bne.w	80073fc <copy_R+0x29c>
    int pixel_y = y_base + y;
 800724c:	f102 0c0a 	add.w	ip, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007250:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8007254:	d202      	bcs.n	800725c <copy_R+0xfc>
 8007256:	2f00      	cmp	r7, #0
 8007258:	f040 80c7 	bne.w	80073ea <copy_R+0x28a>
    int pixel_y = y_base + y;
 800725c:	f102 060b 	add.w	r6, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007260:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007264:	9603      	str	r6, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007266:	d202      	bcs.n	800726e <copy_R+0x10e>
 8007268:	2f00      	cmp	r7, #0
 800726a:	f040 80b7 	bne.w	80073dc <copy_R+0x27c>
    int pixel_x = x_base + x + offset;
 800726e:	1c4f      	adds	r7, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007270:	eba8 0202 	sub.w	r2, r8, r2
    int pixel_x = x_base + x + offset;
 8007274:	4427      	add	r7, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007276:	0152      	lsls	r2, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007278:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800727c:	970c      	str	r7, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800727e:	bf2c      	ite	cs
 8007280:	2600      	movcs	r6, #0
 8007282:	2601      	movcc	r6, #1
 8007284:	9605      	str	r6, [sp, #20]
 8007286:	b11e      	cbz	r6, 8007290 <copy_R+0x130>
 8007288:	f1bb 0f00 	cmp.w	fp, #0
 800728c:	f040 8113 	bne.w	80074b6 <copy_R+0x356>
    int pixel_x = x_base + x + offset;
 8007290:	1c8f      	adds	r7, r1, #2
 8007292:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007294:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8007298:	970a      	str	r7, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800729a:	bf2c      	ite	cs
 800729c:	2600      	movcs	r6, #0
 800729e:	2601      	movcc	r6, #1
 80072a0:	9601      	str	r6, [sp, #4]
 80072a2:	b11e      	cbz	r6, 80072ac <copy_R+0x14c>
 80072a4:	f1bb 0f00 	cmp.w	fp, #0
 80072a8:	f040 810d 	bne.w	80074c6 <copy_R+0x366>
    int pixel_x = x_base + x + offset;
 80072ac:	1ccf      	adds	r7, r1, #3
 80072ae:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072b0:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80072b4:	970b      	str	r7, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072b6:	bf2c      	ite	cs
 80072b8:	f04f 0800 	movcs.w	r8, #0
 80072bc:	f04f 0801 	movcc.w	r8, #1
 80072c0:	f1b8 0f00 	cmp.w	r8, #0
 80072c4:	d003      	beq.n	80072ce <copy_R+0x16e>
 80072c6:	f1bb 0f00 	cmp.w	fp, #0
 80072ca:	f040 80f8 	bne.w	80074be <copy_R+0x35e>
    int pixel_x = x_base + x + offset;
 80072ce:	f101 0e04 	add.w	lr, r1, #4
 80072d2:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072d4:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80072d8:	bf2c      	ite	cs
 80072da:	2700      	movcs	r7, #0
 80072dc:	2701      	movcc	r7, #1
 80072de:	b11f      	cbz	r7, 80072e8 <copy_R+0x188>
 80072e0:	f1bb 0f00 	cmp.w	fp, #0
 80072e4:	f040 80f3 	bne.w	80074ce <copy_R+0x36e>
    int pixel_x = x_base + x + offset;
 80072e8:	3105      	adds	r1, #5
 80072ea:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072ec:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80072f0:	bf2c      	ite	cs
 80072f2:	2400      	movcs	r4, #0
 80072f4:	2401      	movcc	r4, #1
 80072f6:	b1bc      	cbz	r4, 8007328 <copy_R+0x1c8>
 80072f8:	9e04      	ldr	r6, [sp, #16]
 80072fa:	2e00      	cmp	r6, #0
 80072fc:	f040 80ec 	bne.w	80074d8 <copy_R+0x378>
 8007300:	b194      	cbz	r4, 8007328 <copy_R+0x1c8>
 8007302:	9e06      	ldr	r6, [sp, #24]
 8007304:	2e00      	cmp	r6, #0
 8007306:	f040 8119 	bne.w	800753c <copy_R+0x3dc>
 800730a:	b16c      	cbz	r4, 8007328 <copy_R+0x1c8>
 800730c:	9e07      	ldr	r6, [sp, #28]
 800730e:	2e00      	cmp	r6, #0
 8007310:	f040 8104 	bne.w	800751c <copy_R+0x3bc>
 8007314:	b144      	cbz	r4, 8007328 <copy_R+0x1c8>
 8007316:	9e08      	ldr	r6, [sp, #32]
 8007318:	2e00      	cmp	r6, #0
 800731a:	f040 80f7 	bne.w	800750c <copy_R+0x3ac>
 800731e:	b11c      	cbz	r4, 8007328 <copy_R+0x1c8>
 8007320:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007322:	2e00      	cmp	r6, #0
 8007324:	f040 8102 	bne.w	800752c <copy_R+0x3cc>
 8007328:	9e02      	ldr	r6, [sp, #8]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800732a:	f502 6234 	add.w	r2, r2, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800732e:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8007332:	bf2c      	ite	cs
 8007334:	f04f 0b00 	movcs.w	fp, #0
 8007338:	f04f 0b01 	movcc.w	fp, #1
 800733c:	f1bb 0f00 	cmp.w	fp, #0
 8007340:	d014      	beq.n	800736c <copy_R+0x20c>
 8007342:	9e05      	ldr	r6, [sp, #20]
 8007344:	2e00      	cmp	r6, #0
 8007346:	f040 80d8 	bne.w	80074fa <copy_R+0x39a>
 800734a:	f1bb 0f00 	cmp.w	fp, #0
 800734e:	d00d      	beq.n	800736c <copy_R+0x20c>
 8007350:	9e01      	ldr	r6, [sp, #4]
 8007352:	2e00      	cmp	r6, #0
 8007354:	f040 80cc 	bne.w	80074f0 <copy_R+0x390>
 8007358:	f1bb 0f00 	cmp.w	fp, #0
 800735c:	d006      	beq.n	800736c <copy_R+0x20c>
 800735e:	f1b8 0f00 	cmp.w	r8, #0
 8007362:	d003      	beq.n	800736c <copy_R+0x20c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007364:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007366:	1996      	adds	r6, r2, r6
 8007368:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800736c:	b11f      	cbz	r7, 8007376 <copy_R+0x216>
 800736e:	f1bb 0f00 	cmp.w	fp, #0
 8007372:	f040 80b9 	bne.w	80074e8 <copy_R+0x388>
 8007376:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800737a:	d202      	bcs.n	8007382 <copy_R+0x222>
 800737c:	9a01      	ldr	r2, [sp, #4]
 800737e:	2a00      	cmp	r2, #0
 8007380:	d160      	bne.n	8007444 <copy_R+0x2e4>
 8007382:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8007386:	d202      	bcs.n	800738e <copy_R+0x22e>
 8007388:	f1b8 0f00 	cmp.w	r8, #0
 800738c:	d152      	bne.n	8007434 <copy_R+0x2d4>
 800738e:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8007392:	d201      	bcs.n	8007398 <copy_R+0x238>
 8007394:	2f00      	cmp	r7, #0
 8007396:	d146      	bne.n	8007426 <copy_R+0x2c6>
 8007398:	f1bc 0f00 	cmp.w	ip, #0
 800739c:	db16      	blt.n	80073cc <copy_R+0x26c>
 800739e:	b1ac      	cbz	r4, 80073cc <copy_R+0x26c>
 80073a0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80073a4:	da0f      	bge.n	80073c6 <copy_R+0x266>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80073a6:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80073aa:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 80073ae:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80073b2:	9a03      	ldr	r2, [sp, #12]
 80073b4:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80073b8:	da05      	bge.n	80073c6 <copy_R+0x266>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80073ba:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80073be:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 80073c2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    fill_pixel(buffer, x, y, 2, 7, color);
    fill_pixel(buffer, x, y, 3, 8, color);
    fill_pixel(buffer, x, y, 4, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    fill_pixel(buffer, x, y, 5, 11, color);
}
 80073c6:	b013      	add	sp, #76	@ 0x4c
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80073cc:	9a03      	ldr	r2, [sp, #12]
 80073ce:	2a00      	cmp	r2, #0
 80073d0:	dbf9      	blt.n	80073c6 <copy_R+0x266>
 80073d2:	2c00      	cmp	r4, #0
 80073d4:	d1ed      	bne.n	80073b2 <copy_R+0x252>
}
 80073d6:	b013      	add	sp, #76	@ 0x4c
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80073dc:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 80073e0:	eb0e 1e47 	add.w	lr, lr, r7, lsl #5
 80073e4:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80073e8:	e741      	b.n	800726e <copy_R+0x10e>
 80073ea:	ebcc 160c 	rsb	r6, ip, ip, lsl #4
 80073ee:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 80073f2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80073f6:	e731      	b.n	800725c <copy_R+0xfc>
 80073f8:	240001b8 	.word	0x240001b8
 80073fc:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 8007400:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007404:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007408:	e720      	b.n	800724c <copy_R+0xec>
 800740a:	ebc9 1509 	rsb	r5, r9, r9, lsl #4
 800740e:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007412:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007416:	e711      	b.n	800723c <copy_R+0xdc>
 8007418:	ebca 150a 	rsb	r5, sl, sl, lsl #4
 800741c:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007420:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007424:	e702      	b.n	800722c <copy_R+0xcc>
 8007426:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800742a:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 800742e:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8007432:	e7b1      	b.n	8007398 <copy_R+0x238>
 8007434:	ebc9 1209 	rsb	r2, r9, r9, lsl #4
 8007438:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800743a:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 800743e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8007442:	e7a4      	b.n	800738e <copy_R+0x22e>
 8007444:	ebca 120a 	rsb	r2, sl, sl, lsl #4
 8007448:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800744a:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 800744e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8007452:	e796      	b.n	8007382 <copy_R+0x222>
 8007454:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007458:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 800745c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007460:	e6dc      	b.n	800721c <copy_R+0xbc>
 8007462:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007466:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 800746a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800746e:	e6cd      	b.n	800720c <copy_R+0xac>
 8007470:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007474:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007478:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800747c:	e6ba      	b.n	80071f4 <copy_R+0x94>
 800747e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007482:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007486:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800748a:	e6a7      	b.n	80071dc <copy_R+0x7c>
 800748c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007490:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007494:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007498:	e694      	b.n	80071c4 <copy_R+0x64>
 800749a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800749e:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 80074a2:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80074a6:	e681      	b.n	80071ac <copy_R+0x4c>
 80074a8:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 80074ac:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 80074b0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80074b4:	e66c      	b.n	8007190 <copy_R+0x30>
 80074b6:	19d7      	adds	r7, r2, r7
 80074b8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80074bc:	e6e8      	b.n	8007290 <copy_R+0x130>
 80074be:	19d7      	adds	r7, r2, r7
 80074c0:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80074c4:	e703      	b.n	80072ce <copy_R+0x16e>
 80074c6:	19d7      	adds	r7, r2, r7
 80074c8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80074cc:	e6ee      	b.n	80072ac <copy_R+0x14c>
 80074ce:	eb0e 0b02 	add.w	fp, lr, r2
 80074d2:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 80074d6:	e707      	b.n	80072e8 <copy_R+0x188>
 80074d8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80074da:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 80074de:	eb01 1b4b 	add.w	fp, r1, fp, lsl #5
 80074e2:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 80074e6:	e70b      	b.n	8007300 <copy_R+0x1a0>
 80074e8:	4472      	add	r2, lr
 80074ea:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80074ee:	e742      	b.n	8007376 <copy_R+0x216>
 80074f0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80074f2:	1996      	adds	r6, r2, r6
 80074f4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80074f8:	e72e      	b.n	8007358 <copy_R+0x1f8>
 80074fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074fc:	4416      	add	r6, r2
 80074fe:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007502:	f1bb 0f00 	cmp.w	fp, #0
 8007506:	f47f af23 	bne.w	8007350 <copy_R+0x1f0>
 800750a:	e72f      	b.n	800736c <copy_R+0x20c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800750c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800750e:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 8007512:	eb01 1b4b 	add.w	fp, r1, fp, lsl #5
 8007516:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800751a:	e700      	b.n	800731e <copy_R+0x1be>
 800751c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800751e:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 8007522:	eb01 1b4b 	add.w	fp, r1, fp, lsl #5
 8007526:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800752a:	e6f3      	b.n	8007314 <copy_R+0x1b4>
 800752c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800752e:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 8007532:	eb01 1b4b 	add.w	fp, r1, fp, lsl #5
 8007536:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800753a:	e6f5      	b.n	8007328 <copy_R+0x1c8>
 800753c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800753e:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 8007542:	eb01 1b4b 	add.w	fp, r1, fp, lsl #5
 8007546:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800754a:	e6de      	b.n	800730a <copy_R+0x1aa>

0800754c <copy_S>:

void copy_S(uint16_t* buffer, int x, int y, uint32_t color)
{
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8007550:	4cb6      	ldr	r4, [pc, #728]	@ (800782c <copy_S+0x2e0>)
 8007552:	f101 0801 	add.w	r8, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007556:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800755a:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 800755c:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800755e:	bf2c      	ite	cs
 8007560:	2500      	movcs	r5, #0
 8007562:	2501      	movcc	r5, #1
    int pixel_x = x_base + x + offset;
 8007564:	44a0      	add	r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007566:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800756a:	bf2c      	ite	cs
 800756c:	f04f 0a00 	movcs.w	sl, #0
 8007570:	f04f 0a01 	movcc.w	sl, #1
 8007574:	b11d      	cbz	r5, 800757e <copy_S+0x32>
 8007576:	f1ba 0f00 	cmp.w	sl, #0
 800757a:	f040 80d7 	bne.w	800772c <copy_S+0x1e0>
    int pixel_x = x_base + x + offset;
 800757e:	1c8f      	adds	r7, r1, #2
 8007580:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007582:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8007586:	bf2c      	ite	cs
 8007588:	2600      	movcs	r6, #0
 800758a:	2601      	movcc	r6, #1
 800758c:	9601      	str	r6, [sp, #4]
 800758e:	b115      	cbz	r5, 8007596 <copy_S+0x4a>
 8007590:	2e00      	cmp	r6, #0
 8007592:	f040 80c4 	bne.w	800771e <copy_S+0x1d2>
    int pixel_x = x_base + x + offset;
 8007596:	1cce      	adds	r6, r1, #3
 8007598:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800759a:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800759e:	9603      	str	r6, [sp, #12]
 80075a0:	bf2c      	ite	cs
 80075a2:	2600      	movcs	r6, #0
 80075a4:	2601      	movcc	r6, #1
 80075a6:	9602      	str	r6, [sp, #8]
 80075a8:	b115      	cbz	r5, 80075b0 <copy_S+0x64>
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	f040 80af 	bne.w	800770e <copy_S+0x1c2>
    int pixel_x = x_base + x + offset;
 80075b0:	f101 0e04 	add.w	lr, r1, #4
 80075b4:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80075b6:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80075ba:	bf2c      	ite	cs
 80075bc:	f04f 0900 	movcs.w	r9, #0
 80075c0:	f04f 0901 	movcc.w	r9, #1
 80075c4:	f1b9 0f00 	cmp.w	r9, #0
 80075c8:	d002      	beq.n	80075d0 <copy_S+0x84>
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	f040 8098 	bne.w	8007700 <copy_S+0x1b4>
    int pixel_x = x_base + x + offset;
 80075d0:	190d      	adds	r5, r1, r4
    int pixel_y = y_base + y;
 80075d2:	f102 0c01 	add.w	ip, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80075d6:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80075da:	bf2c      	ite	cs
 80075dc:	f04f 0b00 	movcs.w	fp, #0
 80075e0:	f04f 0b01 	movcc.w	fp, #1
 80075e4:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80075e8:	d203      	bcs.n	80075f2 <copy_S+0xa6>
 80075ea:	f1bb 0f00 	cmp.w	fp, #0
 80075ee:	f040 80a4 	bne.w	800773a <copy_S+0x1ee>
    int pixel_y = y_base + y;
 80075f2:	f102 0c02 	add.w	ip, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80075f6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80075fa:	d203      	bcs.n	8007604 <copy_S+0xb8>
 80075fc:	f1bb 0f00 	cmp.w	fp, #0
 8007600:	f040 80c4 	bne.w	800778c <copy_S+0x240>
    int pixel_y = y_base + y;
 8007604:	f102 0c03 	add.w	ip, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007608:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800760c:	d203      	bcs.n	8007616 <copy_S+0xca>
 800760e:	f1bb 0f00 	cmp.w	fp, #0
 8007612:	f040 80c9 	bne.w	80077a8 <copy_S+0x25c>
    int pixel_y = y_base + y;
 8007616:	f102 0c04 	add.w	ip, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800761a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800761e:	d203      	bcs.n	8007628 <copy_S+0xdc>
 8007620:	f1bb 0f00 	cmp.w	fp, #0
 8007624:	f040 80b9 	bne.w	800779a <copy_S+0x24e>
    int pixel_y = y_base + y;
 8007628:	1d55      	adds	r5, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800762a:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800762e:	ebc5 1c05 	rsb	ip, r5, r5, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007632:	bf2c      	ite	cs
 8007634:	2500      	movcs	r5, #0
 8007636:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007638:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800763c:	b185      	cbz	r5, 8007660 <copy_S+0x114>
 800763e:	f1ba 0f00 	cmp.w	sl, #0
 8007642:	f040 8096 	bne.w	8007772 <copy_S+0x226>
 8007646:	b15d      	cbz	r5, 8007660 <copy_S+0x114>
 8007648:	9e01      	ldr	r6, [sp, #4]
 800764a:	2e00      	cmp	r6, #0
 800764c:	f040 808c 	bne.w	8007768 <copy_S+0x21c>
 8007650:	b135      	cbz	r5, 8007660 <copy_S+0x114>
 8007652:	9e02      	ldr	r6, [sp, #8]
 8007654:	b126      	cbz	r6, 8007660 <copy_S+0x114>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007656:	9e03      	ldr	r6, [sp, #12]
 8007658:	eb0c 0b06 	add.w	fp, ip, r6
 800765c:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007660:	f1b9 0f00 	cmp.w	r9, #0
 8007664:	d002      	beq.n	800766c <copy_S+0x120>
 8007666:	2d00      	cmp	r5, #0
 8007668:	f040 808b 	bne.w	8007782 <copy_S+0x236>
    int pixel_x = x_base + x + offset;
 800766c:	3105      	adds	r1, #5
    int pixel_y = y_base + y;
 800766e:	1d95      	adds	r5, r2, #6
    int pixel_x = x_base + x + offset;
 8007670:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007672:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8007676:	bf2c      	ite	cs
 8007678:	2400      	movcs	r4, #0
 800767a:	2401      	movcc	r4, #1
 800767c:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8007680:	d202      	bcs.n	8007688 <copy_S+0x13c>
 8007682:	2c00      	cmp	r4, #0
 8007684:	f040 80c5 	bne.w	8007812 <copy_S+0x2c6>
    int pixel_y = y_base + y;
 8007688:	1dd5      	adds	r5, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800768a:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800768e:	d202      	bcs.n	8007696 <copy_S+0x14a>
 8007690:	2c00      	cmp	r4, #0
 8007692:	f040 8090 	bne.w	80077b6 <copy_S+0x26a>
    int pixel_y = y_base + y;
 8007696:	f102 0508 	add.w	r5, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800769a:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800769e:	d202      	bcs.n	80076a6 <copy_S+0x15a>
 80076a0:	2c00      	cmp	r4, #0
 80076a2:	f040 8095 	bne.w	80077d0 <copy_S+0x284>
    int pixel_y = y_base + y;
 80076a6:	f102 0509 	add.w	r5, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80076aa:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80076ae:	d202      	bcs.n	80076b6 <copy_S+0x16a>
 80076b0:	2c00      	cmp	r4, #0
 80076b2:	f040 809a 	bne.w	80077ea <copy_S+0x29e>
    int pixel_y = y_base + y;
 80076b6:	f102 050a 	add.w	r5, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80076ba:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80076be:	d202      	bcs.n	80076c6 <copy_S+0x17a>
 80076c0:	2c00      	cmp	r4, #0
 80076c2:	f040 809f 	bne.w	8007804 <copy_S+0x2b8>
 80076c6:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80076c8:	f50c 6c34 	add.w	ip, ip, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80076cc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80076d0:	bf2c      	ite	cs
 80076d2:	2200      	movcs	r2, #0
 80076d4:	2201      	movcc	r2, #1
 80076d6:	b162      	cbz	r2, 80076f2 <copy_S+0x1a6>
 80076d8:	f1ba 0f00 	cmp.w	sl, #0
 80076dc:	d13e      	bne.n	800775c <copy_S+0x210>
 80076de:	b142      	cbz	r2, 80076f2 <copy_S+0x1a6>
 80076e0:	9901      	ldr	r1, [sp, #4]
 80076e2:	bbb9      	cbnz	r1, 8007754 <copy_S+0x208>
 80076e4:	b12a      	cbz	r2, 80076f2 <copy_S+0x1a6>
 80076e6:	9902      	ldr	r1, [sp, #8]
 80076e8:	b119      	cbz	r1, 80076f2 <copy_S+0x1a6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80076ea:	9e03      	ldr	r6, [sp, #12]
 80076ec:	4466      	add	r6, ip
 80076ee:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80076f2:	f1b9 0f00 	cmp.w	r9, #0
 80076f6:	d000      	beq.n	80076fa <copy_S+0x1ae>
 80076f8:	bb32      	cbnz	r2, 8007748 <copy_S+0x1fc>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 5, color);
    for (int i = 6; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 80076fa:	b005      	add	sp, #20
 80076fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007700:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8007704:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007708:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800770c:	e760      	b.n	80075d0 <copy_S+0x84>
 800770e:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 8007712:	9e03      	ldr	r6, [sp, #12]
 8007714:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8007718:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800771c:	e748      	b.n	80075b0 <copy_S+0x64>
 800771e:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8007722:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8007726:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800772a:	e734      	b.n	8007596 <copy_S+0x4a>
 800772c:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8007730:	eb08 1646 	add.w	r6, r8, r6, lsl #5
 8007734:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007738:	e721      	b.n	800757e <copy_S+0x32>
 800773a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800773e:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8007742:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8007746:	e754      	b.n	80075f2 <copy_S+0xa6>
 8007748:	44e6      	add	lr, ip
 800774a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
}
 800774e:	b005      	add	sp, #20
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007754:	4467      	add	r7, ip
 8007756:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800775a:	e7c3      	b.n	80076e4 <copy_S+0x198>
 800775c:	44e0      	add	r8, ip
 800775e:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007762:	2a00      	cmp	r2, #0
 8007764:	d1bc      	bne.n	80076e0 <copy_S+0x194>
 8007766:	e7c4      	b.n	80076f2 <copy_S+0x1a6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007768:	eb0c 0b07 	add.w	fp, ip, r7
 800776c:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8007770:	e76e      	b.n	8007650 <copy_S+0x104>
 8007772:	eb0c 0b08 	add.w	fp, ip, r8
 8007776:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800777a:	2d00      	cmp	r5, #0
 800777c:	f47f af64 	bne.w	8007648 <copy_S+0xfc>
 8007780:	e76e      	b.n	8007660 <copy_S+0x114>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007782:	eb0e 050c 	add.w	r5, lr, ip
 8007786:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800778a:	e76f      	b.n	800766c <copy_S+0x120>
 800778c:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8007790:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8007794:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8007798:	e734      	b.n	8007604 <copy_S+0xb8>
 800779a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800779e:	eb05 154c 	add.w	r5, r5, ip, lsl #5
 80077a2:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80077a6:	e73f      	b.n	8007628 <copy_S+0xdc>
 80077a8:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80077ac:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 80077b0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80077b4:	e72f      	b.n	8007616 <copy_S+0xca>
 80077b6:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80077ba:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80077be:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 80077c2:	f102 0508 	add.w	r5, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80077c6:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80077ca:	f4ff af69 	bcc.w	80076a0 <copy_S+0x154>
 80077ce:	e76a      	b.n	80076a6 <copy_S+0x15a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80077d0:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80077d4:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80077d8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 80077dc:	f102 0509 	add.w	r5, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80077e0:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80077e4:	f4ff af64 	bcc.w	80076b0 <copy_S+0x164>
 80077e8:	e765      	b.n	80076b6 <copy_S+0x16a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80077ea:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80077ee:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80077f2:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 80077f6:	f102 050a 	add.w	r5, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80077fa:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80077fe:	f4ff af5f 	bcc.w	80076c0 <copy_S+0x174>
 8007802:	e760      	b.n	80076c6 <copy_S+0x17a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007804:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007808:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800780c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007810:	e759      	b.n	80076c6 <copy_S+0x17a>
 8007812:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007816:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800781a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 800781e:	1dd5      	adds	r5, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007820:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8007824:	f4ff af34 	bcc.w	8007690 <copy_S+0x144>
 8007828:	e735      	b.n	8007696 <copy_S+0x14a>
 800782a:	bf00      	nop
 800782c:	240001b8 	.word	0x240001b8

08007830 <copy_T>:

void copy_T(uint16_t* buffer, int x, int y, uint32_t color)
{
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8007834:	4c9c      	ldr	r4, [pc, #624]	@ (8007aa8 <copy_T+0x278>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007836:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800783a:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
{
 800783e:	b091      	sub	sp, #68	@ 0x44
    int pixel_x = x_base + x + offset;
 8007840:	6826      	ldr	r6, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007842:	bf2c      	ite	cs
 8007844:	2700      	movcs	r7, #0
 8007846:	2701      	movcc	r7, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007848:	ea4f 1949 	mov.w	r9, r9, lsl #5
    int pixel_x = x_base + x + offset;
 800784c:	198c      	adds	r4, r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800784e:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8007852:	d202      	bcs.n	800785a <copy_T+0x2a>
 8007854:	2f00      	cmp	r7, #0
 8007856:	f040 80fe 	bne.w	8007a56 <copy_T+0x226>
    int pixel_x = x_base + x + offset;
 800785a:	1c4c      	adds	r4, r1, #1
 800785c:	4434      	add	r4, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800785e:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8007862:	d202      	bcs.n	800786a <copy_T+0x3a>
 8007864:	2f00      	cmp	r7, #0
 8007866:	f040 80f2 	bne.w	8007a4e <copy_T+0x21e>
    int pixel_x = x_base + x + offset;
 800786a:	f101 0e02 	add.w	lr, r1, #2
 800786e:	44b6      	add	lr, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007870:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8007874:	bf2c      	ite	cs
 8007876:	2500      	movcs	r5, #0
 8007878:	2501      	movcc	r5, #1
 800787a:	b117      	cbz	r7, 8007882 <copy_T+0x52>
 800787c:	2d00      	cmp	r5, #0
 800787e:	f040 80e1 	bne.w	8007a44 <copy_T+0x214>
    int pixel_x = x_base + x + offset;
 8007882:	f101 0c03 	add.w	ip, r1, #3
 8007886:	44b4      	add	ip, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007888:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800788c:	bf2c      	ite	cs
 800788e:	2400      	movcs	r4, #0
 8007890:	2401      	movcc	r4, #1
 8007892:	b117      	cbz	r7, 800789a <copy_T+0x6a>
 8007894:	2c00      	cmp	r4, #0
 8007896:	f040 80d0 	bne.w	8007a3a <copy_T+0x20a>
    int pixel_x = x_base + x + offset;
 800789a:	f101 0804 	add.w	r8, r1, #4
 800789e:	44b0      	add	r8, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078a0:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80078a4:	d202      	bcs.n	80078ac <copy_T+0x7c>
 80078a6:	2f00      	cmp	r7, #0
 80078a8:	f040 80c3 	bne.w	8007a32 <copy_T+0x202>
    int pixel_x = x_base + x + offset;
 80078ac:	3105      	adds	r1, #5
 80078ae:	4431      	add	r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078b0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80078b4:	d202      	bcs.n	80078bc <copy_T+0x8c>
 80078b6:	2f00      	cmp	r7, #0
 80078b8:	f040 80b7 	bne.w	8007a2a <copy_T+0x1fa>
    int pixel_y = y_base + y;
 80078bc:	1c51      	adds	r1, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078be:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 80078c2:	910a      	str	r1, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078c4:	bf2c      	ite	cs
 80078c6:	2700      	movcs	r7, #0
 80078c8:	2701      	movcc	r7, #1
 80078ca:	b117      	cbz	r7, 80078d2 <copy_T+0xa2>
 80078cc:	2d00      	cmp	r5, #0
 80078ce:	f040 80c6 	bne.w	8007a5e <copy_T+0x22e>
    int pixel_y = y_base + y;
 80078d2:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078d4:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 80078d8:	960b      	str	r6, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078da:	bf2c      	ite	cs
 80078dc:	2100      	movcs	r1, #0
 80078de:	2101      	movcc	r1, #1
 80078e0:	9101      	str	r1, [sp, #4]
 80078e2:	b111      	cbz	r1, 80078ea <copy_T+0xba>
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	f040 8127 	bne.w	8007b38 <copy_T+0x308>
    int pixel_y = y_base + y;
 80078ea:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078ec:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 80078f0:	960c      	str	r6, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078f2:	bf2c      	ite	cs
 80078f4:	2100      	movcs	r1, #0
 80078f6:	2101      	movcc	r1, #1
 80078f8:	9102      	str	r1, [sp, #8]
 80078fa:	b111      	cbz	r1, 8007902 <copy_T+0xd2>
 80078fc:	2d00      	cmp	r5, #0
 80078fe:	f040 8114 	bne.w	8007b2a <copy_T+0x2fa>
    int pixel_y = y_base + y;
 8007902:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007904:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007908:	960d      	str	r6, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800790a:	bf2c      	ite	cs
 800790c:	2100      	movcs	r1, #0
 800790e:	2101      	movcc	r1, #1
 8007910:	9103      	str	r1, [sp, #12]
 8007912:	b111      	cbz	r1, 800791a <copy_T+0xea>
 8007914:	2d00      	cmp	r5, #0
 8007916:	f040 8101 	bne.w	8007b1c <copy_T+0x2ec>
    int pixel_y = y_base + y;
 800791a:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800791c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007920:	960e      	str	r6, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007922:	bf2c      	ite	cs
 8007924:	2100      	movcs	r1, #0
 8007926:	2101      	movcc	r1, #1
 8007928:	9104      	str	r1, [sp, #16]
 800792a:	b111      	cbz	r1, 8007932 <copy_T+0x102>
 800792c:	2d00      	cmp	r5, #0
 800792e:	f040 8134 	bne.w	8007b9a <copy_T+0x36a>
    int pixel_y = y_base + y;
 8007932:	f102 0806 	add.w	r8, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007936:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800793a:	bf2c      	ite	cs
 800793c:	2100      	movcs	r1, #0
 800793e:	2101      	movcc	r1, #1
 8007940:	9105      	str	r1, [sp, #20]
 8007942:	b111      	cbz	r1, 800794a <copy_T+0x11a>
 8007944:	2d00      	cmp	r5, #0
 8007946:	f040 8121 	bne.w	8007b8c <copy_T+0x35c>
    int pixel_y = y_base + y;
 800794a:	f102 0a07 	add.w	sl, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800794e:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8007952:	bf2c      	ite	cs
 8007954:	2100      	movcs	r1, #0
 8007956:	2101      	movcc	r1, #1
 8007958:	9106      	str	r1, [sp, #24]
 800795a:	b111      	cbz	r1, 8007962 <copy_T+0x132>
 800795c:	2d00      	cmp	r5, #0
 800795e:	f040 810e 	bne.w	8007b7e <copy_T+0x34e>
    int pixel_y = y_base + y;
 8007962:	f102 0908 	add.w	r9, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007966:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 800796a:	bf2c      	ite	cs
 800796c:	2100      	movcs	r1, #0
 800796e:	2101      	movcc	r1, #1
 8007970:	9107      	str	r1, [sp, #28]
 8007972:	b111      	cbz	r1, 800797a <copy_T+0x14a>
 8007974:	2d00      	cmp	r5, #0
 8007976:	f040 80fb 	bne.w	8007b70 <copy_T+0x340>
    int pixel_y = y_base + y;
 800797a:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800797e:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007982:	960f      	str	r6, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007984:	bf2c      	ite	cs
 8007986:	2100      	movcs	r1, #0
 8007988:	2101      	movcc	r1, #1
 800798a:	9108      	str	r1, [sp, #32]
 800798c:	b111      	cbz	r1, 8007994 <copy_T+0x164>
 800798e:	2d00      	cmp	r5, #0
 8007990:	f040 80e7 	bne.w	8007b62 <copy_T+0x332>
    int pixel_y = y_base + y;
 8007994:	f102 060a 	add.w	r6, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007998:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800799c:	bf2c      	ite	cs
 800799e:	2100      	movcs	r1, #0
 80079a0:	2101      	movcc	r1, #1
 80079a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80079a4:	b111      	cbz	r1, 80079ac <copy_T+0x17c>
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	f040 80d4 	bne.w	8007b54 <copy_T+0x324>
    int pixel_y = y_base + y;
 80079ac:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80079ae:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80079b2:	bf2c      	ite	cs
 80079b4:	f04f 0b00 	movcs.w	fp, #0
 80079b8:	f04f 0b01 	movcc.w	fp, #1
 80079bc:	f1bb 0f00 	cmp.w	fp, #0
 80079c0:	d002      	beq.n	80079c8 <copy_T+0x198>
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	f040 80bf 	bne.w	8007b46 <copy_T+0x316>
 80079c8:	b117      	cbz	r7, 80079d0 <copy_T+0x1a0>
 80079ca:	2c00      	cmp	r4, #0
 80079cc:	f040 809e 	bne.w	8007b0c <copy_T+0x2dc>
 80079d0:	9901      	ldr	r1, [sp, #4]
 80079d2:	b111      	cbz	r1, 80079da <copy_T+0x1aa>
 80079d4:	2c00      	cmp	r4, #0
 80079d6:	f040 8091 	bne.w	8007afc <copy_T+0x2cc>
 80079da:	9902      	ldr	r1, [sp, #8]
 80079dc:	b111      	cbz	r1, 80079e4 <copy_T+0x1b4>
 80079de:	2c00      	cmp	r4, #0
 80079e0:	f040 8084 	bne.w	8007aec <copy_T+0x2bc>
 80079e4:	9903      	ldr	r1, [sp, #12]
 80079e6:	b109      	cbz	r1, 80079ec <copy_T+0x1bc>
 80079e8:	2c00      	cmp	r4, #0
 80079ea:	d177      	bne.n	8007adc <copy_T+0x2ac>
 80079ec:	9904      	ldr	r1, [sp, #16]
 80079ee:	b109      	cbz	r1, 80079f4 <copy_T+0x1c4>
 80079f0:	2c00      	cmp	r4, #0
 80079f2:	d16b      	bne.n	8007acc <copy_T+0x29c>
 80079f4:	9905      	ldr	r1, [sp, #20]
 80079f6:	b109      	cbz	r1, 80079fc <copy_T+0x1cc>
 80079f8:	2c00      	cmp	r4, #0
 80079fa:	d14d      	bne.n	8007a98 <copy_T+0x268>
 80079fc:	9906      	ldr	r1, [sp, #24]
 80079fe:	b109      	cbz	r1, 8007a04 <copy_T+0x1d4>
 8007a00:	2c00      	cmp	r4, #0
 8007a02:	d142      	bne.n	8007a8a <copy_T+0x25a>
 8007a04:	9907      	ldr	r1, [sp, #28]
 8007a06:	b109      	cbz	r1, 8007a0c <copy_T+0x1dc>
 8007a08:	2c00      	cmp	r4, #0
 8007a0a:	d137      	bne.n	8007a7c <copy_T+0x24c>
 8007a0c:	9908      	ldr	r1, [sp, #32]
 8007a0e:	b101      	cbz	r1, 8007a12 <copy_T+0x1e2>
 8007a10:	bb64      	cbnz	r4, 8007a6c <copy_T+0x23c>
 8007a12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a14:	b109      	cbz	r1, 8007a1a <copy_T+0x1ea>
 8007a16:	2c00      	cmp	r4, #0
 8007a18:	d151      	bne.n	8007abe <copy_T+0x28e>
 8007a1a:	f1bb 0f00 	cmp.w	fp, #0
 8007a1e:	d001      	beq.n	8007a24 <copy_T+0x1f4>
 8007a20:	2c00      	cmp	r4, #0
 8007a22:	d143      	bne.n	8007aac <copy_T+0x27c>
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 12; i++) fill_pixel(buffer, x, y, 2, i, color);
    for (int i = 1; i < 12; i++) fill_pixel(buffer, x, y, 3, i, color);
}
 8007a24:	b011      	add	sp, #68	@ 0x44
 8007a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007a2a:	4449      	add	r1, r9
 8007a2c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007a30:	e744      	b.n	80078bc <copy_T+0x8c>
 8007a32:	44c8      	add	r8, r9
 8007a34:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8007a38:	e738      	b.n	80078ac <copy_T+0x7c>
 8007a3a:	eb09 080c 	add.w	r8, r9, ip
 8007a3e:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8007a42:	e72a      	b.n	800789a <copy_T+0x6a>
 8007a44:	eb09 040e 	add.w	r4, r9, lr
 8007a48:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007a4c:	e719      	b.n	8007882 <copy_T+0x52>
 8007a4e:	444c      	add	r4, r9
 8007a50:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007a54:	e709      	b.n	800786a <copy_T+0x3a>
 8007a56:	444c      	add	r4, r9
 8007a58:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007a5c:	e6fd      	b.n	800785a <copy_T+0x2a>
 8007a5e:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 8007a62:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007a66:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007a6a:	e732      	b.n	80078d2 <copy_T+0xa2>
 8007a6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a6e:	ebc1 1701 	rsb	r7, r1, r1, lsl #4
 8007a72:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007a76:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007a7a:	e7ca      	b.n	8007a12 <copy_T+0x1e2>
 8007a7c:	ebc9 1109 	rsb	r1, r9, r9, lsl #4
 8007a80:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007a84:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007a88:	e7c0      	b.n	8007a0c <copy_T+0x1dc>
 8007a8a:	ebca 110a 	rsb	r1, sl, sl, lsl #4
 8007a8e:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007a92:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007a96:	e7b5      	b.n	8007a04 <copy_T+0x1d4>
 8007a98:	ebc8 1108 	rsb	r1, r8, r8, lsl #4
 8007a9c:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007aa0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007aa4:	e7aa      	b.n	80079fc <copy_T+0x1cc>
 8007aa6:	bf00      	nop
 8007aa8:	240001b8 	.word	0x240001b8
 8007aac:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8007ab0:	eb0c 1c42 	add.w	ip, ip, r2, lsl #5
 8007ab4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
}
 8007ab8:	b011      	add	sp, #68	@ 0x44
 8007aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007abe:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007ac2:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007ac6:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007aca:	e7a6      	b.n	8007a1a <copy_T+0x1ea>
 8007acc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007ace:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007ad2:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007ad6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007ada:	e78b      	b.n	80079f4 <copy_T+0x1c4>
 8007adc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007ade:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007ae2:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007ae6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007aea:	e77f      	b.n	80079ec <copy_T+0x1bc>
 8007aec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007aee:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007af2:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007af6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007afa:	e773      	b.n	80079e4 <copy_T+0x1b4>
 8007afc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007afe:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007b02:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007b06:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007b0a:	e766      	b.n	80079da <copy_T+0x1aa>
 8007b0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b0e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007b12:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007b16:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007b1a:	e759      	b.n	80079d0 <copy_T+0x1a0>
 8007b1c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007b20:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007b24:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007b28:	e6f7      	b.n	800791a <copy_T+0xea>
 8007b2a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007b2e:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007b32:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007b36:	e6e4      	b.n	8007902 <copy_T+0xd2>
 8007b38:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007b3c:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007b40:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007b44:	e6d1      	b.n	80078ea <copy_T+0xba>
 8007b46:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8007b4a:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 8007b4e:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8007b52:	e739      	b.n	80079c8 <copy_T+0x198>
 8007b54:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 8007b58:	eb0e 1b4b 	add.w	fp, lr, fp, lsl #5
 8007b5c:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8007b60:	e724      	b.n	80079ac <copy_T+0x17c>
 8007b62:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007b66:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007b6a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007b6e:	e711      	b.n	8007994 <copy_T+0x164>
 8007b70:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 8007b74:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007b78:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007b7c:	e6fd      	b.n	800797a <copy_T+0x14a>
 8007b7e:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8007b82:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007b86:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007b8a:	e6ea      	b.n	8007962 <copy_T+0x132>
 8007b8c:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8007b90:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007b94:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007b98:	e6d7      	b.n	800794a <copy_T+0x11a>
 8007b9a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007b9e:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007ba2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007ba6:	e6c4      	b.n	8007932 <copy_T+0x102>

08007ba8 <copy_U>:

void copy_U(uint16_t* buffer, int x, int y, uint32_t color)
{
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8007bac:	4ca0      	ldr	r4, [pc, #640]	@ (8007e30 <copy_U+0x288>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007bae:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8007bb2:	b091      	sub	sp, #68	@ 0x44
    int pixel_x = x_base + x + offset;
 8007bb4:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007bb6:	bf2c      	ite	cs
 8007bb8:	2400      	movcs	r4, #0
 8007bba:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 8007bbc:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007bc0:	4626      	mov	r6, r4
 8007bc2:	9402      	str	r4, [sp, #8]
 8007bc4:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8007bc8:	bf2c      	ite	cs
 8007bca:	2400      	movcs	r4, #0
 8007bcc:	2401      	movcc	r4, #1
 8007bce:	b114      	cbz	r4, 8007bd6 <copy_U+0x2e>
 8007bd0:	2e00      	cmp	r6, #0
 8007bd2:	f040 812f 	bne.w	8007e34 <copy_U+0x28c>
    int pixel_y = y_base + y;
 8007bd6:	f102 0801 	add.w	r8, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007bda:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8007bde:	bf2c      	ite	cs
 8007be0:	2600      	movcs	r6, #0
 8007be2:	2601      	movcc	r6, #1
 8007be4:	9603      	str	r6, [sp, #12]
 8007be6:	b114      	cbz	r4, 8007bee <copy_U+0x46>
 8007be8:	2e00      	cmp	r6, #0
 8007bea:	f040 8119 	bne.w	8007e20 <copy_U+0x278>
    int pixel_y = y_base + y;
 8007bee:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007bf0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8007bf4:	970c      	str	r7, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007bf6:	bf2c      	ite	cs
 8007bf8:	2600      	movcs	r6, #0
 8007bfa:	2601      	movcc	r6, #1
 8007bfc:	9604      	str	r6, [sp, #16]
 8007bfe:	b114      	cbz	r4, 8007c06 <copy_U+0x5e>
 8007c00:	2e00      	cmp	r6, #0
 8007c02:	f040 8106 	bne.w	8007e12 <copy_U+0x26a>
    int pixel_y = y_base + y;
 8007c06:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c08:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007c0c:	960d      	str	r6, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c0e:	bf2c      	ite	cs
 8007c10:	2700      	movcs	r7, #0
 8007c12:	2701      	movcc	r7, #1
 8007c14:	9705      	str	r7, [sp, #20]
 8007c16:	b114      	cbz	r4, 8007c1e <copy_U+0x76>
 8007c18:	2f00      	cmp	r7, #0
 8007c1a:	f040 80f3 	bne.w	8007e04 <copy_U+0x25c>
    int pixel_y = y_base + y;
 8007c1e:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c20:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007c24:	960e      	str	r6, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c26:	bf2c      	ite	cs
 8007c28:	2700      	movcs	r7, #0
 8007c2a:	2701      	movcc	r7, #1
 8007c2c:	9706      	str	r7, [sp, #24]
 8007c2e:	b114      	cbz	r4, 8007c36 <copy_U+0x8e>
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	f040 80e0 	bne.w	8007df6 <copy_U+0x24e>
    int pixel_y = y_base + y;
 8007c36:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c38:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007c3c:	960f      	str	r6, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c3e:	bf2c      	ite	cs
 8007c40:	2700      	movcs	r7, #0
 8007c42:	2701      	movcc	r7, #1
 8007c44:	9707      	str	r7, [sp, #28]
 8007c46:	b114      	cbz	r4, 8007c4e <copy_U+0xa6>
 8007c48:	2f00      	cmp	r7, #0
 8007c4a:	f040 80cd 	bne.w	8007de8 <copy_U+0x240>
    int pixel_y = y_base + y;
 8007c4e:	f102 0b06 	add.w	fp, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c52:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8007c56:	bf2c      	ite	cs
 8007c58:	2600      	movcs	r6, #0
 8007c5a:	2601      	movcc	r6, #1
 8007c5c:	9608      	str	r6, [sp, #32]
 8007c5e:	b114      	cbz	r4, 8007c66 <copy_U+0xbe>
 8007c60:	2e00      	cmp	r6, #0
 8007c62:	f040 80ba 	bne.w	8007dda <copy_U+0x232>
    int pixel_y = y_base + y;
 8007c66:	f102 0a07 	add.w	sl, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c6a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8007c6e:	bf2c      	ite	cs
 8007c70:	2600      	movcs	r6, #0
 8007c72:	2601      	movcc	r6, #1
 8007c74:	9609      	str	r6, [sp, #36]	@ 0x24
 8007c76:	b114      	cbz	r4, 8007c7e <copy_U+0xd6>
 8007c78:	2e00      	cmp	r6, #0
 8007c7a:	f040 80a7 	bne.w	8007dcc <copy_U+0x224>
    int pixel_y = y_base + y;
 8007c7e:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c82:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8007c86:	bf2c      	ite	cs
 8007c88:	2700      	movcs	r7, #0
 8007c8a:	2701      	movcc	r7, #1
 8007c8c:	970a      	str	r7, [sp, #40]	@ 0x28
 8007c8e:	b114      	cbz	r4, 8007c96 <copy_U+0xee>
 8007c90:	2f00      	cmp	r7, #0
 8007c92:	f040 8094 	bne.w	8007dbe <copy_U+0x216>
    int pixel_y = y_base + y;
 8007c96:	f102 0e09 	add.w	lr, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c9a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8007c9e:	bf2c      	ite	cs
 8007ca0:	2700      	movcs	r7, #0
 8007ca2:	2701      	movcc	r7, #1
 8007ca4:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007ca6:	b114      	cbz	r4, 8007cae <copy_U+0x106>
 8007ca8:	2f00      	cmp	r7, #0
 8007caa:	f040 8081 	bne.w	8007db0 <copy_U+0x208>
    int pixel_y = y_base + y;
 8007cae:	f102 090a 	add.w	r9, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007cb2:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8007cb6:	bf2c      	ite	cs
 8007cb8:	2700      	movcs	r7, #0
 8007cba:	2701      	movcc	r7, #1
 8007cbc:	9701      	str	r7, [sp, #4]
 8007cbe:	b10c      	cbz	r4, 8007cc4 <copy_U+0x11c>
 8007cc0:	2f00      	cmp	r7, #0
 8007cc2:	d16e      	bne.n	8007da2 <copy_U+0x1fa>
    int pixel_x = x_base + x + offset;
 8007cc4:	f101 0c05 	add.w	ip, r1, #5
 8007cc8:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007cca:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8007cce:	bf2c      	ite	cs
 8007cd0:	2400      	movcs	r4, #0
 8007cd2:	2401      	movcc	r4, #1
 8007cd4:	2c00      	cmp	r4, #0
 8007cd6:	d035      	beq.n	8007d44 <copy_U+0x19c>
 8007cd8:	9f02      	ldr	r7, [sp, #8]
 8007cda:	2f00      	cmp	r7, #0
 8007cdc:	f040 80b1 	bne.w	8007e42 <copy_U+0x29a>
 8007ce0:	2c00      	cmp	r4, #0
 8007ce2:	d02f      	beq.n	8007d44 <copy_U+0x19c>
 8007ce4:	9f03      	ldr	r7, [sp, #12]
 8007ce6:	2f00      	cmp	r7, #0
 8007ce8:	f040 80b5 	bne.w	8007e56 <copy_U+0x2ae>
 8007cec:	b354      	cbz	r4, 8007d44 <copy_U+0x19c>
 8007cee:	9f04      	ldr	r7, [sp, #16]
 8007cf0:	2f00      	cmp	r7, #0
 8007cf2:	f040 80df 	bne.w	8007eb4 <copy_U+0x30c>
 8007cf6:	b32c      	cbz	r4, 8007d44 <copy_U+0x19c>
 8007cf8:	9f05      	ldr	r7, [sp, #20]
 8007cfa:	2f00      	cmp	r7, #0
 8007cfc:	f040 80d2 	bne.w	8007ea4 <copy_U+0x2fc>
 8007d00:	b304      	cbz	r4, 8007d44 <copy_U+0x19c>
 8007d02:	9f06      	ldr	r7, [sp, #24]
 8007d04:	2f00      	cmp	r7, #0
 8007d06:	f040 80f3 	bne.w	8007ef0 <copy_U+0x348>
 8007d0a:	b1dc      	cbz	r4, 8007d44 <copy_U+0x19c>
 8007d0c:	9f07      	ldr	r7, [sp, #28]
 8007d0e:	2f00      	cmp	r7, #0
 8007d10:	f040 80e6 	bne.w	8007ee0 <copy_U+0x338>
 8007d14:	b1b4      	cbz	r4, 8007d44 <copy_U+0x19c>
 8007d16:	9f08      	ldr	r7, [sp, #32]
 8007d18:	2f00      	cmp	r7, #0
 8007d1a:	f040 80da 	bne.w	8007ed2 <copy_U+0x32a>
 8007d1e:	b18c      	cbz	r4, 8007d44 <copy_U+0x19c>
 8007d20:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007d22:	2f00      	cmp	r7, #0
 8007d24:	f040 80ce 	bne.w	8007ec4 <copy_U+0x31c>
 8007d28:	b164      	cbz	r4, 8007d44 <copy_U+0x19c>
 8007d2a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	f040 80ac 	bne.w	8007e8a <copy_U+0x2e2>
 8007d32:	b13c      	cbz	r4, 8007d44 <copy_U+0x19c>
 8007d34:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007d36:	b12e      	cbz	r6, 8007d44 <copy_U+0x19c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007d38:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8007d3c:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8007d40:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d44:	9e01      	ldr	r6, [sp, #4]
 8007d46:	b116      	cbz	r6, 8007d4e <copy_U+0x1a6>
 8007d48:	2c00      	cmp	r4, #0
 8007d4a:	f040 8097 	bne.w	8007e7c <copy_U+0x2d4>
    int pixel_y = y_base + y;
 8007d4e:	320b      	adds	r2, #11
    int pixel_x = x_base + x + offset;
 8007d50:	1c4c      	adds	r4, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d52:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8007d56:	442c      	add	r4, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007d58:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d5c:	bf2c      	ite	cs
 8007d5e:	2200      	movcs	r2, #0
 8007d60:	2201      	movcc	r2, #1
 8007d62:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007d66:	ea4f 1646 	mov.w	r6, r6, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d6a:	d202      	bcs.n	8007d72 <copy_U+0x1ca>
 8007d6c:	2a00      	cmp	r2, #0
 8007d6e:	f040 8081 	bne.w	8007e74 <copy_U+0x2cc>
    int pixel_x = x_base + x + offset;
 8007d72:	1c8c      	adds	r4, r1, #2
 8007d74:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d76:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8007d7a:	d201      	bcs.n	8007d80 <copy_U+0x1d8>
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	d175      	bne.n	8007e6c <copy_U+0x2c4>
    int pixel_x = x_base + x + offset;
 8007d80:	1ccc      	adds	r4, r1, #3
 8007d82:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d84:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8007d88:	d201      	bcs.n	8007d8e <copy_U+0x1e6>
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	d16a      	bne.n	8007e64 <copy_U+0x2bc>
    int pixel_x = x_base + x + offset;
 8007d8e:	3104      	adds	r1, #4
 8007d90:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d92:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8007d96:	d201      	bcs.n	8007d9c <copy_U+0x1f4>
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	d17d      	bne.n	8007e98 <copy_U+0x2f0>
    for (int i = 0; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 0; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 8007d9c:	b011      	add	sp, #68	@ 0x44
 8007d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007da2:	ebc9 1409 	rsb	r4, r9, r9, lsl #4
 8007da6:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 8007daa:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8007dae:	e789      	b.n	8007cc4 <copy_U+0x11c>
 8007db0:	ebce 190e 	rsb	r9, lr, lr, lsl #4
 8007db4:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8007db8:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8007dbc:	e777      	b.n	8007cae <copy_U+0x106>
 8007dbe:	ebc6 1e06 	rsb	lr, r6, r6, lsl #4
 8007dc2:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8007dc6:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8007dca:	e764      	b.n	8007c96 <copy_U+0xee>
 8007dcc:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8007dd0:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007dd4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007dd8:	e751      	b.n	8007c7e <copy_U+0xd6>
 8007dda:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 8007dde:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007de2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007de6:	e73e      	b.n	8007c66 <copy_U+0xbe>
 8007de8:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007dec:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007df0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007df4:	e72b      	b.n	8007c4e <copy_U+0xa6>
 8007df6:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007dfa:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007dfe:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007e02:	e718      	b.n	8007c36 <copy_U+0x8e>
 8007e04:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007e08:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007e0c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007e10:	e705      	b.n	8007c1e <copy_U+0x76>
 8007e12:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 8007e16:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007e1a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007e1e:	e6f2      	b.n	8007c06 <copy_U+0x5e>
 8007e20:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8007e24:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007e28:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007e2c:	e6df      	b.n	8007bee <copy_U+0x46>
 8007e2e:	bf00      	nop
 8007e30:	240001b8 	.word	0x240001b8
 8007e34:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8007e38:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007e3c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007e40:	e6c9      	b.n	8007bd6 <copy_U+0x2e>
 8007e42:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8007e46:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007e4a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007e4e:	2c00      	cmp	r4, #0
 8007e50:	f47f af48 	bne.w	8007ce4 <copy_U+0x13c>
 8007e54:	e776      	b.n	8007d44 <copy_U+0x19c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007e56:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8007e5a:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8007e5e:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8007e62:	e743      	b.n	8007cec <copy_U+0x144>
 8007e64:	4434      	add	r4, r6
 8007e66:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007e6a:	e790      	b.n	8007d8e <copy_U+0x1e6>
 8007e6c:	4434      	add	r4, r6
 8007e6e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007e72:	e785      	b.n	8007d80 <copy_U+0x1d8>
 8007e74:	4434      	add	r4, r6
 8007e76:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007e7a:	e77a      	b.n	8007d72 <copy_U+0x1ca>
 8007e7c:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8007e80:	eb0c 1c49 	add.w	ip, ip, r9, lsl #5
 8007e84:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8007e88:	e761      	b.n	8007d4e <copy_U+0x1a6>
 8007e8a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007e8e:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007e92:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007e96:	e74c      	b.n	8007d32 <copy_U+0x18a>
 8007e98:	4431      	add	r1, r6
 8007e9a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8007e9e:	b011      	add	sp, #68	@ 0x44
 8007ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007ea4:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8007ea6:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8007eaa:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007eae:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007eb2:	e725      	b.n	8007d00 <copy_U+0x158>
 8007eb4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8007eb6:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8007eba:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007ebe:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007ec2:	e718      	b.n	8007cf6 <copy_U+0x14e>
 8007ec4:	ebca 170a 	rsb	r7, sl, sl, lsl #4
 8007ec8:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007ecc:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007ed0:	e72a      	b.n	8007d28 <copy_U+0x180>
 8007ed2:	ebcb 170b 	rsb	r7, fp, fp, lsl #4
 8007ed6:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007eda:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007ede:	e71e      	b.n	8007d1e <copy_U+0x176>
 8007ee0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8007ee2:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8007ee6:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007eea:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007eee:	e711      	b.n	8007d14 <copy_U+0x16c>
 8007ef0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8007ef2:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8007ef6:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007efa:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007efe:	e704      	b.n	8007d0a <copy_U+0x162>

08007f00 <copy_V>:

void copy_V(uint16_t* buffer, int x, int y, uint32_t color)
{
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8007f04:	4cab      	ldr	r4, [pc, #684]	@ (80081b4 <copy_V+0x2b4>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007f06:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8007f0a:	b08b      	sub	sp, #44	@ 0x2c
    int pixel_x = x_base + x + offset;
 8007f0c:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007f0e:	bf2c      	ite	cs
 8007f10:	2400      	movcs	r4, #0
 8007f12:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 8007f14:	eb01 0b05 	add.w	fp, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007f18:	4626      	mov	r6, r4
 8007f1a:	9401      	str	r4, [sp, #4]
 8007f1c:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8007f20:	bf2c      	ite	cs
 8007f22:	2400      	movcs	r4, #0
 8007f24:	2401      	movcc	r4, #1
 8007f26:	b114      	cbz	r4, 8007f2e <copy_V+0x2e>
 8007f28:	2e00      	cmp	r6, #0
 8007f2a:	f040 813b 	bne.w	80081a4 <copy_V+0x2a4>
    int pixel_y = y_base + y;
 8007f2e:	1c57      	adds	r7, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007f30:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8007f34:	bf2c      	ite	cs
 8007f36:	2600      	movcs	r6, #0
 8007f38:	2601      	movcc	r6, #1
 8007f3a:	9603      	str	r6, [sp, #12]
 8007f3c:	b114      	cbz	r4, 8007f44 <copy_V+0x44>
 8007f3e:	2e00      	cmp	r6, #0
 8007f40:	f040 8129 	bne.w	8008196 <copy_V+0x296>
    int pixel_y = y_base + y;
 8007f44:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007f46:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8007f4a:	9609      	str	r6, [sp, #36]	@ 0x24
 8007f4c:	bf2c      	ite	cs
 8007f4e:	2600      	movcs	r6, #0
 8007f50:	2601      	movcc	r6, #1
 8007f52:	9604      	str	r6, [sp, #16]
 8007f54:	b114      	cbz	r4, 8007f5c <copy_V+0x5c>
 8007f56:	2e00      	cmp	r6, #0
 8007f58:	f040 8169 	bne.w	800822e <copy_V+0x32e>
    int pixel_y = y_base + y;
 8007f5c:	f102 0903 	add.w	r9, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007f60:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8007f64:	bf2c      	ite	cs
 8007f66:	2600      	movcs	r6, #0
 8007f68:	2601      	movcc	r6, #1
 8007f6a:	9605      	str	r6, [sp, #20]
 8007f6c:	b114      	cbz	r4, 8007f74 <copy_V+0x74>
 8007f6e:	2e00      	cmp	r6, #0
 8007f70:	f040 8156 	bne.w	8008220 <copy_V+0x320>
    int pixel_y = y_base + y;
 8007f74:	f102 0a04 	add.w	sl, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007f78:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8007f7c:	bf2c      	ite	cs
 8007f7e:	2600      	movcs	r6, #0
 8007f80:	2601      	movcc	r6, #1
 8007f82:	9606      	str	r6, [sp, #24]
 8007f84:	b114      	cbz	r4, 8007f8c <copy_V+0x8c>
 8007f86:	2e00      	cmp	r6, #0
 8007f88:	f040 8143 	bne.w	8008212 <copy_V+0x312>
    int pixel_y = y_base + y;
 8007f8c:	f102 0e05 	add.w	lr, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007f90:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8007f94:	bf2c      	ite	cs
 8007f96:	2600      	movcs	r6, #0
 8007f98:	2601      	movcc	r6, #1
 8007f9a:	9607      	str	r6, [sp, #28]
 8007f9c:	b114      	cbz	r4, 8007fa4 <copy_V+0xa4>
 8007f9e:	2e00      	cmp	r6, #0
 8007fa0:	f040 8130 	bne.w	8008204 <copy_V+0x304>
    int pixel_y = y_base + y;
 8007fa4:	f102 0c06 	add.w	ip, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007fa8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8007fac:	bf2c      	ite	cs
 8007fae:	2600      	movcs	r6, #0
 8007fb0:	2601      	movcc	r6, #1
 8007fb2:	9608      	str	r6, [sp, #32]
 8007fb4:	b114      	cbz	r4, 8007fbc <copy_V+0xbc>
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	f040 8141 	bne.w	800823e <copy_V+0x33e>
    int pixel_y = y_base + y;
 8007fbc:	f102 0807 	add.w	r8, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007fc0:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8007fc4:	bf2c      	ite	cs
 8007fc6:	2600      	movcs	r6, #0
 8007fc8:	2601      	movcc	r6, #1
 8007fca:	9602      	str	r6, [sp, #8]
 8007fcc:	b114      	cbz	r4, 8007fd4 <copy_V+0xd4>
 8007fce:	2e00      	cmp	r6, #0
 8007fd0:	f040 8111 	bne.w	80081f6 <copy_V+0x2f6>
    int pixel_x = x_base + x + offset;
 8007fd4:	1d4c      	adds	r4, r1, #5
 8007fd6:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007fd8:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8007fdc:	bf2c      	ite	cs
 8007fde:	f04f 0b00 	movcs.w	fp, #0
 8007fe2:	f04f 0b01 	movcc.w	fp, #1
 8007fe6:	f1bb 0f00 	cmp.w	fp, #0
 8007fea:	d038      	beq.n	800805e <copy_V+0x15e>
 8007fec:	9e01      	ldr	r6, [sp, #4]
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	f040 812c 	bne.w	800824c <copy_V+0x34c>
 8007ff4:	f1bb 0f00 	cmp.w	fp, #0
 8007ff8:	d031      	beq.n	800805e <copy_V+0x15e>
 8007ffa:	9e03      	ldr	r6, [sp, #12]
 8007ffc:	2e00      	cmp	r6, #0
 8007ffe:	f040 8130 	bne.w	8008262 <copy_V+0x362>
 8008002:	f1bb 0f00 	cmp.w	fp, #0
 8008006:	d02a      	beq.n	800805e <copy_V+0x15e>
 8008008:	9e04      	ldr	r6, [sp, #16]
 800800a:	2e00      	cmp	r6, #0
 800800c:	f040 814c 	bne.w	80082a8 <copy_V+0x3a8>
 8008010:	f1bb 0f00 	cmp.w	fp, #0
 8008014:	d023      	beq.n	800805e <copy_V+0x15e>
 8008016:	9e05      	ldr	r6, [sp, #20]
 8008018:	2e00      	cmp	r6, #0
 800801a:	f040 813e 	bne.w	800829a <copy_V+0x39a>
 800801e:	f1bb 0f00 	cmp.w	fp, #0
 8008022:	d01c      	beq.n	800805e <copy_V+0x15e>
 8008024:	9e06      	ldr	r6, [sp, #24]
 8008026:	2e00      	cmp	r6, #0
 8008028:	f040 8130 	bne.w	800828c <copy_V+0x38c>
 800802c:	f1bb 0f00 	cmp.w	fp, #0
 8008030:	d015      	beq.n	800805e <copy_V+0x15e>
 8008032:	9e07      	ldr	r6, [sp, #28]
 8008034:	2e00      	cmp	r6, #0
 8008036:	f040 8122 	bne.w	800827e <copy_V+0x37e>
 800803a:	f1bb 0f00 	cmp.w	fp, #0
 800803e:	d00e      	beq.n	800805e <copy_V+0x15e>
 8008040:	9e08      	ldr	r6, [sp, #32]
 8008042:	2e00      	cmp	r6, #0
 8008044:	f040 8114 	bne.w	8008270 <copy_V+0x370>
 8008048:	f1bb 0f00 	cmp.w	fp, #0
 800804c:	d007      	beq.n	800805e <copy_V+0x15e>
 800804e:	9e02      	ldr	r6, [sp, #8]
 8008050:	b12e      	cbz	r6, 800805e <copy_V+0x15e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008052:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8008056:	eb04 1448 	add.w	r4, r4, r8, lsl #5
 800805a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_x = x_base + x + offset;
 800805e:	1c4c      	adds	r4, r1, #1
 8008060:	1d0e      	adds	r6, r1, #4
    int pixel_y = y_base + y;
 8008062:	f102 0c08 	add.w	ip, r2, #8
 8008066:	f102 0809 	add.w	r8, r2, #9
    int pixel_x = x_base + x + offset;
 800806a:	442c      	add	r4, r5
 800806c:	eb06 0e05 	add.w	lr, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008070:	ea6f 060c 	mvn.w	r6, ip
 8008074:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8008078:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800807c:	bf2c      	ite	cs
 800807e:	2700      	movcs	r7, #0
 8008080:	2701      	movcc	r7, #1
 8008082:	2f00      	cmp	r7, #0
 8008084:	d056      	beq.n	8008134 <copy_V+0x234>
 8008086:	2e00      	cmp	r6, #0
 8008088:	d054      	beq.n	8008134 <copy_V+0x234>
 800808a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800808e:	f2c0 8093 	blt.w	80081b8 <copy_V+0x2b8>
    int pixel_x = x_base + x + offset;
 8008092:	1c8e      	adds	r6, r1, #2
    int pixel_y = y_base + y;
 8008094:	f102 040a 	add.w	r4, r2, #10
    int pixel_x = x_base + x + offset;
 8008098:	3103      	adds	r1, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800809a:	f240 1edf 	movw	lr, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 800809e:	442e      	add	r6, r5
 80080a0:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80080a2:	43e5      	mvns	r5, r4
 80080a4:	4576      	cmp	r6, lr
 80080a6:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 80080aa:	bf8c      	ite	hi
 80080ac:	f04f 0c00 	movhi.w	ip, #0
 80080b0:	f04f 0c01 	movls.w	ip, #1
 80080b4:	ea1c 0705 	ands.w	r7, ip, r5
 80080b8:	d022      	beq.n	8008100 <copy_V+0x200>
 80080ba:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 80080be:	da1c      	bge.n	80080fa <copy_V+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80080c0:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80080c4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80080c8:	b29d      	uxth	r5, r3
 80080ca:	eb06 1c44 	add.w	ip, r6, r4, lsl #5
 80080ce:	ea4f 1444 	mov.w	r4, r4, lsl #5
 80080d2:	f820 501c 	strh.w	r5, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80080d6:	f080 80fb 	bcs.w	80082d0 <copy_V+0x3d0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80080da:	440c      	add	r4, r1
    int pixel_y = y_base + y;
 80080dc:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80080de:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80080e2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80080e6:	da08      	bge.n	80080fa <copy_V+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80080e8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	eb06 1642 	add.w	r6, r6, r2, lsl #5
 80080f2:	0152      	lsls	r2, r2, #5
 80080f4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80080f8:	b9b7      	cbnz	r7, 8008128 <copy_V+0x228>
    fill_pixel(buffer, x, y, 4, 9, color);
    fill_pixel(buffer, x, y, 2, 10, color);
    fill_pixel(buffer, x, y, 3, 10, color);
    fill_pixel(buffer, x, y, 2, 11, color);
    fill_pixel(buffer, x, y, 3, 11, color);
}
 80080fa:	b00b      	add	sp, #44	@ 0x2c
 80080fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008100:	4571      	cmp	r1, lr
 8008102:	bf8c      	ite	hi
 8008104:	2700      	movhi	r7, #0
 8008106:	2701      	movls	r7, #1
 8008108:	403d      	ands	r5, r7
 800810a:	d139      	bne.n	8008180 <copy_V+0x280>
 800810c:	320b      	adds	r2, #11
 800810e:	d4f4      	bmi.n	80080fa <copy_V+0x1fa>
 8008110:	f1bc 0f00 	cmp.w	ip, #0
 8008114:	d1e5      	bne.n	80080e2 <copy_V+0x1e2>
 8008116:	2f00      	cmp	r7, #0
 8008118:	d0ef      	beq.n	80080fa <copy_V+0x1fa>
 800811a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800811e:	daec      	bge.n	80080fa <copy_V+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008120:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8008124:	b29b      	uxth	r3, r3
 8008126:	0152      	lsls	r2, r2, #5
 8008128:	440a      	add	r2, r1
 800812a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800812e:	b00b      	add	sp, #44	@ 0x2c
 8008130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008134:	f112 0f09 	cmn.w	r2, #9
 8008138:	bfb4      	ite	lt
 800813a:	f04f 0900 	movlt.w	r9, #0
 800813e:	f04f 0901 	movge.w	r9, #1
 8008142:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8008146:	bf2c      	ite	cs
 8008148:	f04f 0a00 	movcs.w	sl, #0
 800814c:	f04f 0a01 	movcc.w	sl, #1
 8008150:	f1b9 0f00 	cmp.w	r9, #0
 8008154:	d002      	beq.n	800815c <copy_V+0x25c>
 8008156:	2f00      	cmp	r7, #0
 8008158:	f040 80cf 	bne.w	80082fa <copy_V+0x3fa>
 800815c:	ea16 060a 	ands.w	r6, r6, sl
 8008160:	f040 80aa 	bne.w	80082b8 <copy_V+0x3b8>
 8008164:	ea09 060a 	and.w	r6, r9, sl
 8008168:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800816c:	da91      	bge.n	8008092 <copy_V+0x192>
 800816e:	2e00      	cmp	r6, #0
 8008170:	d08f      	beq.n	8008092 <copy_V+0x192>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008172:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8008176:	eb0e 1848 	add.w	r8, lr, r8, lsl #5
 800817a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800817e:	e788      	b.n	8008092 <copy_V+0x192>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008180:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8008184:	dab9      	bge.n	80080fa <copy_V+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008186:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800818a:	462f      	mov	r7, r5
 800818c:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8008190:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8008194:	e7ba      	b.n	800810c <copy_V+0x20c>
 8008196:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 800819a:	eb0b 1646 	add.w	r6, fp, r6, lsl #5
 800819e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80081a2:	e6cf      	b.n	8007f44 <copy_V+0x44>
 80081a4:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80081a8:	eb0b 1646 	add.w	r6, fp, r6, lsl #5
 80081ac:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80081b0:	e6bd      	b.n	8007f2e <copy_V+0x2e>
 80081b2:	bf00      	nop
 80081b4:	240001b8 	.word	0x240001b8
 80081b8:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80081bc:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80081c0:	b29e      	uxth	r6, r3
 80081c2:	eb04 144c 	add.w	r4, r4, ip, lsl #5
 80081c6:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80081ca:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80081ce:	f000 808b 	beq.w	80082e8 <copy_V+0x3e8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80081d2:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80081d6:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80081da:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80081de:	f4bf af58 	bcs.w	8008092 <copy_V+0x192>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80081e2:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80081e6:	44f4      	add	ip, lr
 80081e8:	eb0e 1848 	add.w	r8, lr, r8, lsl #5
 80081ec:	f820 601c 	strh.w	r6, [r0, ip, lsl #1]
 80081f0:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80081f4:	e74d      	b.n	8008092 <copy_V+0x192>
 80081f6:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 80081fa:	eb0b 1b44 	add.w	fp, fp, r4, lsl #5
 80081fe:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8008202:	e6e7      	b.n	8007fd4 <copy_V+0xd4>
 8008204:	ebce 1c0e 	rsb	ip, lr, lr, lsl #4
 8008208:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 800820c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8008210:	e6c8      	b.n	8007fa4 <copy_V+0xa4>
 8008212:	ebca 1c0a 	rsb	ip, sl, sl, lsl #4
 8008216:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 800821a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800821e:	e6b5      	b.n	8007f8c <copy_V+0x8c>
 8008220:	ebc9 1c09 	rsb	ip, r9, r9, lsl #4
 8008224:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 8008228:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800822c:	e6a2      	b.n	8007f74 <copy_V+0x74>
 800822e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008230:	ebc6 1c06 	rsb	ip, r6, r6, lsl #4
 8008234:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 8008238:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800823c:	e68e      	b.n	8007f5c <copy_V+0x5c>
 800823e:	ebcc 180c 	rsb	r8, ip, ip, lsl #4
 8008242:	eb0b 1848 	add.w	r8, fp, r8, lsl #5
 8008246:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800824a:	e6b7      	b.n	8007fbc <copy_V+0xbc>
 800824c:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8008250:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8008254:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008258:	f1bb 0f00 	cmp.w	fp, #0
 800825c:	f47f aecd 	bne.w	8007ffa <copy_V+0xfa>
 8008260:	e6fd      	b.n	800805e <copy_V+0x15e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008262:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8008266:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 800826a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800826e:	e6c8      	b.n	8008002 <copy_V+0x102>
 8008270:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8008274:	eb04 1c4c 	add.w	ip, r4, ip, lsl #5
 8008278:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800827c:	e6e4      	b.n	8008048 <copy_V+0x148>
 800827e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8008282:	eb04 1e4e 	add.w	lr, r4, lr, lsl #5
 8008286:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 800828a:	e6d6      	b.n	800803a <copy_V+0x13a>
 800828c:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8008290:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8008294:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8008298:	e6c8      	b.n	800802c <copy_V+0x12c>
 800829a:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 800829e:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80082a2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80082a6:	e6ba      	b.n	800801e <copy_V+0x11e>
 80082a8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80082aa:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80082ae:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80082b2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80082b6:	e6ab      	b.n	8008010 <copy_V+0x110>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80082b8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80082bc:	f6bf af54 	bge.w	8008168 <copy_V+0x268>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80082c0:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 80082c4:	464e      	mov	r6, r9
 80082c6:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 80082ca:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80082ce:	e74b      	b.n	8008168 <copy_V+0x268>
    int pixel_y = y_base + y;
 80082d0:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80082d2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80082d6:	f43f af10 	beq.w	80080fa <copy_V+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80082da:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80082de:	eb06 1342 	add.w	r3, r6, r2, lsl #5
 80082e2:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80082e6:	e708      	b.n	80080fa <copy_V+0x1fa>
 80082e8:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80082ec:	f4bf aed1 	bcs.w	8008092 <copy_V+0x192>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80082f0:	4c08      	ldr	r4, [pc, #32]	@ (8008314 <copy_V+0x414>)
 80082f2:	4474      	add	r4, lr
 80082f4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80082f8:	e6cb      	b.n	8008092 <copy_V+0x192>
 80082fa:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80082fe:	f6bf aec8 	bge.w	8008092 <copy_V+0x192>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008302:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 8008306:	4656      	mov	r6, sl
 8008308:	eb04 1447 	add.w	r4, r4, r7, lsl #5
 800830c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008310:	e72a      	b.n	8008168 <copy_V+0x268>
 8008312:	bf00      	nop
 8008314:	0001fc20 	.word	0x0001fc20

08008318 <copy_W>:

void copy_W(uint16_t* buffer, int x, int y, uint32_t color)
{
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800831c:	4c9c      	ldr	r4, [pc, #624]	@ (8008590 <copy_W+0x278>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800831e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8008322:	b093      	sub	sp, #76	@ 0x4c
    int pixel_x = x_base + x + offset;
 8008324:	6826      	ldr	r6, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008326:	bf2c      	ite	cs
 8008328:	2400      	movcs	r4, #0
 800832a:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 800832c:	eb01 0c06 	add.w	ip, r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008330:	4625      	mov	r5, r4
 8008332:	9403      	str	r4, [sp, #12]
 8008334:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8008338:	bf2c      	ite	cs
 800833a:	2400      	movcs	r4, #0
 800833c:	2401      	movcc	r4, #1
 800833e:	b114      	cbz	r4, 8008346 <copy_W+0x2e>
 8008340:	2d00      	cmp	r5, #0
 8008342:	f040 8161 	bne.w	8008608 <copy_W+0x2f0>
    int pixel_y = y_base + y;
 8008346:	f102 0801 	add.w	r8, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800834a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800834e:	bf2c      	ite	cs
 8008350:	2500      	movcs	r5, #0
 8008352:	2501      	movcc	r5, #1
 8008354:	9504      	str	r5, [sp, #16]
 8008356:	b114      	cbz	r4, 800835e <copy_W+0x46>
 8008358:	2d00      	cmp	r5, #0
 800835a:	f040 81a4 	bne.w	80086a6 <copy_W+0x38e>
    int pixel_y = y_base + y;
 800835e:	1c95      	adds	r5, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008360:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 8008364:	950e      	str	r5, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008366:	bf2c      	ite	cs
 8008368:	2700      	movcs	r7, #0
 800836a:	2701      	movcc	r7, #1
 800836c:	9705      	str	r7, [sp, #20]
 800836e:	b114      	cbz	r4, 8008376 <copy_W+0x5e>
 8008370:	2f00      	cmp	r7, #0
 8008372:	f040 8191 	bne.w	8008698 <copy_W+0x380>
    int pixel_y = y_base + y;
 8008376:	1cd5      	adds	r5, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008378:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 800837c:	950f      	str	r5, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800837e:	bf2c      	ite	cs
 8008380:	2700      	movcs	r7, #0
 8008382:	2701      	movcc	r7, #1
 8008384:	9706      	str	r7, [sp, #24]
 8008386:	b114      	cbz	r4, 800838e <copy_W+0x76>
 8008388:	2f00      	cmp	r7, #0
 800838a:	f040 817e 	bne.w	800868a <copy_W+0x372>
    int pixel_y = y_base + y;
 800838e:	1d15      	adds	r5, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008390:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 8008394:	9510      	str	r5, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008396:	bf2c      	ite	cs
 8008398:	2700      	movcs	r7, #0
 800839a:	2701      	movcc	r7, #1
 800839c:	9707      	str	r7, [sp, #28]
 800839e:	b114      	cbz	r4, 80083a6 <copy_W+0x8e>
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	f040 816b 	bne.w	800867c <copy_W+0x364>
    int pixel_y = y_base + y;
 80083a6:	1d55      	adds	r5, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083a8:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 80083ac:	9511      	str	r5, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083ae:	bf2c      	ite	cs
 80083b0:	2700      	movcs	r7, #0
 80083b2:	2701      	movcc	r7, #1
 80083b4:	9708      	str	r7, [sp, #32]
 80083b6:	b114      	cbz	r4, 80083be <copy_W+0xa6>
 80083b8:	2f00      	cmp	r7, #0
 80083ba:	f040 8158 	bne.w	800866e <copy_W+0x356>
    int pixel_y = y_base + y;
 80083be:	f102 0b06 	add.w	fp, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083c2:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 80083c6:	bf2c      	ite	cs
 80083c8:	2500      	movcs	r5, #0
 80083ca:	2501      	movcc	r5, #1
 80083cc:	9509      	str	r5, [sp, #36]	@ 0x24
 80083ce:	b114      	cbz	r4, 80083d6 <copy_W+0xbe>
 80083d0:	2d00      	cmp	r5, #0
 80083d2:	f040 8145 	bne.w	8008660 <copy_W+0x348>
    int pixel_y = y_base + y;
 80083d6:	f102 0a07 	add.w	sl, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083da:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80083de:	bf2c      	ite	cs
 80083e0:	2500      	movcs	r5, #0
 80083e2:	2501      	movcc	r5, #1
 80083e4:	950a      	str	r5, [sp, #40]	@ 0x28
 80083e6:	b114      	cbz	r4, 80083ee <copy_W+0xd6>
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	f040 8132 	bne.w	8008652 <copy_W+0x33a>
    int pixel_y = y_base + y;
 80083ee:	f102 0e08 	add.w	lr, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083f2:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80083f6:	bf2c      	ite	cs
 80083f8:	2500      	movcs	r5, #0
 80083fa:	2501      	movcc	r5, #1
 80083fc:	950b      	str	r5, [sp, #44]	@ 0x2c
 80083fe:	b114      	cbz	r4, 8008406 <copy_W+0xee>
 8008400:	2d00      	cmp	r5, #0
 8008402:	f040 811f 	bne.w	8008644 <copy_W+0x32c>
    int pixel_y = y_base + y;
 8008406:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800840a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800840e:	9701      	str	r7, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008410:	bf2c      	ite	cs
 8008412:	2500      	movcs	r5, #0
 8008414:	2501      	movcc	r5, #1
 8008416:	950c      	str	r5, [sp, #48]	@ 0x30
 8008418:	b114      	cbz	r4, 8008420 <copy_W+0x108>
 800841a:	2d00      	cmp	r5, #0
 800841c:	f040 810b 	bne.w	8008636 <copy_W+0x31e>
    int pixel_y = y_base + y;
 8008420:	f102 050a 	add.w	r5, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008424:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8008428:	bf2c      	ite	cs
 800842a:	2700      	movcs	r7, #0
 800842c:	2701      	movcc	r7, #1
 800842e:	970d      	str	r7, [sp, #52]	@ 0x34
 8008430:	b114      	cbz	r4, 8008438 <copy_W+0x120>
 8008432:	2f00      	cmp	r7, #0
 8008434:	f040 80f8 	bne.w	8008628 <copy_W+0x310>
    int pixel_y = y_base + y;
 8008438:	f102 090b 	add.w	r9, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800843c:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8008440:	bf2c      	ite	cs
 8008442:	2700      	movcs	r7, #0
 8008444:	2701      	movcc	r7, #1
 8008446:	9702      	str	r7, [sp, #8]
 8008448:	b117      	cbz	r7, 8008450 <copy_W+0x138>
 800844a:	2c00      	cmp	r4, #0
 800844c:	f040 80d5 	bne.w	80085fa <copy_W+0x2e2>
    int pixel_x = x_base + x + offset;
 8008450:	f101 0c05 	add.w	ip, r1, #5
 8008454:	44b4      	add	ip, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008456:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800845a:	bf2c      	ite	cs
 800845c:	2400      	movcs	r4, #0
 800845e:	2401      	movcc	r4, #1
 8008460:	2c00      	cmp	r4, #0
 8008462:	d03b      	beq.n	80084dc <copy_W+0x1c4>
 8008464:	9f03      	ldr	r7, [sp, #12]
 8008466:	2f00      	cmp	r7, #0
 8008468:	f040 8124 	bne.w	80086b4 <copy_W+0x39c>
 800846c:	2c00      	cmp	r4, #0
 800846e:	d035      	beq.n	80084dc <copy_W+0x1c4>
 8008470:	9f04      	ldr	r7, [sp, #16]
 8008472:	2f00      	cmp	r7, #0
 8008474:	f040 813e 	bne.w	80086f4 <copy_W+0x3dc>
 8008478:	2c00      	cmp	r4, #0
 800847a:	d02f      	beq.n	80084dc <copy_W+0x1c4>
 800847c:	9f05      	ldr	r7, [sp, #20]
 800847e:	2f00      	cmp	r7, #0
 8008480:	f040 8130 	bne.w	80086e4 <copy_W+0x3cc>
 8008484:	b354      	cbz	r4, 80084dc <copy_W+0x1c4>
 8008486:	9f06      	ldr	r7, [sp, #24]
 8008488:	2f00      	cmp	r7, #0
 800848a:	f040 8160 	bne.w	800874e <copy_W+0x436>
 800848e:	b32c      	cbz	r4, 80084dc <copy_W+0x1c4>
 8008490:	9f07      	ldr	r7, [sp, #28]
 8008492:	2f00      	cmp	r7, #0
 8008494:	f040 8153 	bne.w	800873e <copy_W+0x426>
 8008498:	b304      	cbz	r4, 80084dc <copy_W+0x1c4>
 800849a:	9f08      	ldr	r7, [sp, #32]
 800849c:	2f00      	cmp	r7, #0
 800849e:	f040 8146 	bne.w	800872e <copy_W+0x416>
 80084a2:	b1dc      	cbz	r4, 80084dc <copy_W+0x1c4>
 80084a4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80084a6:	2f00      	cmp	r7, #0
 80084a8:	f040 813a 	bne.w	8008720 <copy_W+0x408>
 80084ac:	b1b4      	cbz	r4, 80084dc <copy_W+0x1c4>
 80084ae:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80084b0:	2f00      	cmp	r7, #0
 80084b2:	f040 8110 	bne.w	80086d6 <copy_W+0x3be>
 80084b6:	b18c      	cbz	r4, 80084dc <copy_W+0x1c4>
 80084b8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80084ba:	2f00      	cmp	r7, #0
 80084bc:	f040 8104 	bne.w	80086c8 <copy_W+0x3b0>
 80084c0:	b164      	cbz	r4, 80084dc <copy_W+0x1c4>
 80084c2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80084c4:	2f00      	cmp	r7, #0
 80084c6:	f040 811c 	bne.w	8008702 <copy_W+0x3ea>
 80084ca:	b13c      	cbz	r4, 80084dc <copy_W+0x1c4>
 80084cc:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80084ce:	b12f      	cbz	r7, 80084dc <copy_W+0x1c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80084d0:	ebc5 1805 	rsb	r8, r5, r5, lsl #4
 80084d4:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80084d8:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80084dc:	9f02      	ldr	r7, [sp, #8]
 80084de:	b117      	cbz	r7, 80084e6 <copy_W+0x1ce>
 80084e0:	2c00      	cmp	r4, #0
 80084e2:	f040 8116 	bne.w	8008712 <copy_W+0x3fa>
    int pixel_x = x_base + x + offset;
 80084e6:	1c8c      	adds	r4, r1, #2
 80084e8:	f101 0c03 	add.w	ip, r1, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80084ec:	ea6f 080e 	mvn.w	r8, lr
    int pixel_x = x_base + x + offset;
 80084f0:	4434      	add	r4, r6
 80084f2:	44b4      	add	ip, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80084f4:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80084f8:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 80084fc:	bf2c      	ite	cs
 80084fe:	f04f 0900 	movcs.w	r9, #0
 8008502:	f04f 0901 	movcc.w	r9, #1
 8008506:	f1b9 0f00 	cmp.w	r9, #0
 800850a:	d043      	beq.n	8008594 <copy_W+0x27c>
 800850c:	f1b8 0f00 	cmp.w	r8, #0
 8008510:	d040      	beq.n	8008594 <copy_W+0x27c>
 8008512:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8008516:	da7e      	bge.n	8008616 <copy_W+0x2fe>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008518:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800851c:	9f01      	ldr	r7, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800851e:	b29a      	uxth	r2, r3
 8008520:	eb04 144e 	add.w	r4, r4, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008524:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008528:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 800852c:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008530:	f000 8121 	beq.w	8008776 <copy_W+0x45e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008534:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008538:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800853c:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008540:	d209      	bcs.n	8008556 <copy_W+0x23e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008542:	44e6      	add	lr, ip
 8008544:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
 8008548:	9a01      	ldr	r2, [sp, #4]
 800854a:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 800854e:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8008552:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_x = x_base + x + offset;
 8008556:	1c4a      	adds	r2, r1, #1
 8008558:	4432      	add	r2, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800855a:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 800855e:	d23c      	bcs.n	80085da <copy_W+0x2c2>
 8008560:	2d00      	cmp	r5, #0
 8008562:	db3a      	blt.n	80085da <copy_W+0x2c2>
 8008564:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8008568:	da0f      	bge.n	800858a <copy_W+0x272>
    int pixel_x = x_base + x + offset;
 800856a:	3104      	adds	r1, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800856c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8008570:	b29b      	uxth	r3, r3
    int pixel_x = x_base + x + offset;
 8008572:	4431      	add	r1, r6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008574:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 8008578:	016d      	lsls	r5, r5, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800857a:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800857e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008582:	d202      	bcs.n	800858a <copy_W+0x272>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008584:	4429      	add	r1, r5
 8008586:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    fill_pixel(buffer, x, y, 2, 9, color);
    fill_pixel(buffer, x, y, 3, 8, color);
    fill_pixel(buffer, x, y, 3, 9, color);
    fill_pixel(buffer, x, y, 1, 10, color);
    fill_pixel(buffer, x, y, 4, 10, color);
}
 800858a:	b013      	add	sp, #76	@ 0x4c
 800858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008594:	f112 0f09 	cmn.w	r2, #9
 8008598:	bfb4      	ite	lt
 800859a:	2200      	movlt	r2, #0
 800859c:	2201      	movge	r2, #1
 800859e:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80085a2:	bf2c      	ite	cs
 80085a4:	f04f 0a00 	movcs.w	sl, #0
 80085a8:	f04f 0a01 	movcc.w	sl, #1
 80085ac:	b11a      	cbz	r2, 80085b6 <copy_W+0x29e>
 80085ae:	f1b9 0f00 	cmp.w	r9, #0
 80085b2:	f040 80e9 	bne.w	8008788 <copy_W+0x470>
 80085b6:	ea18 080a 	ands.w	r8, r8, sl
 80085ba:	f040 80d0 	bne.w	800875e <copy_W+0x446>
 80085be:	ea02 080a 	and.w	r8, r2, sl
 80085c2:	9a01      	ldr	r2, [sp, #4]
 80085c4:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80085c8:	dac5      	bge.n	8008556 <copy_W+0x23e>
 80085ca:	f1b8 0f00 	cmp.w	r8, #0
 80085ce:	d1bb      	bne.n	8008548 <copy_W+0x230>
    int pixel_x = x_base + x + offset;
 80085d0:	1c4a      	adds	r2, r1, #1
 80085d2:	4432      	add	r2, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80085d4:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 80085d8:	d3c2      	bcc.n	8008560 <copy_W+0x248>
    int pixel_x = x_base + x + offset;
 80085da:	3104      	adds	r1, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80085dc:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80085e0:	4431      	add	r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80085e2:	d2d2      	bcs.n	800858a <copy_W+0x272>
 80085e4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80085e8:	d2cf      	bcs.n	800858a <copy_W+0x272>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80085ea:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	016d      	lsls	r5, r5, #5
 80085f2:	4429      	add	r1, r5
 80085f4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80085f8:	e7c7      	b.n	800858a <copy_W+0x272>
 80085fa:	ebc9 1409 	rsb	r4, r9, r9, lsl #4
 80085fe:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 8008602:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8008606:	e723      	b.n	8008450 <copy_W+0x138>
 8008608:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800860c:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8008610:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008614:	e697      	b.n	8008346 <copy_W+0x2e>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008616:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800861a:	d29c      	bcs.n	8008556 <copy_W+0x23e>
    int pixel_x = x_base + x + offset;
 800861c:	1c4a      	adds	r2, r1, #1
 800861e:	4432      	add	r2, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008620:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8008624:	d3b1      	bcc.n	800858a <copy_W+0x272>
 8008626:	e7d8      	b.n	80085da <copy_W+0x2c2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008628:	ebc5 1905 	rsb	r9, r5, r5, lsl #4
 800862c:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8008630:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8008634:	e700      	b.n	8008438 <copy_W+0x120>
 8008636:	ebc7 1507 	rsb	r5, r7, r7, lsl #4
 800863a:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 800863e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008642:	e6ed      	b.n	8008420 <copy_W+0x108>
 8008644:	ebce 150e 	rsb	r5, lr, lr, lsl #4
 8008648:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 800864c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008650:	e6d9      	b.n	8008406 <copy_W+0xee>
 8008652:	ebca 150a 	rsb	r5, sl, sl, lsl #4
 8008656:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 800865a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800865e:	e6c6      	b.n	80083ee <copy_W+0xd6>
 8008660:	ebcb 150b 	rsb	r5, fp, fp, lsl #4
 8008664:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8008668:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800866c:	e6b3      	b.n	80083d6 <copy_W+0xbe>
 800866e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8008672:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8008676:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800867a:	e6a0      	b.n	80083be <copy_W+0xa6>
 800867c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8008680:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8008684:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008688:	e68d      	b.n	80083a6 <copy_W+0x8e>
 800868a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800868e:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8008692:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008696:	e67a      	b.n	800838e <copy_W+0x76>
 8008698:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800869c:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 80086a0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80086a4:	e667      	b.n	8008376 <copy_W+0x5e>
 80086a6:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
 80086aa:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 80086ae:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80086b2:	e654      	b.n	800835e <copy_W+0x46>
 80086b4:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 80086b8:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 80086bc:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80086c0:	2c00      	cmp	r4, #0
 80086c2:	f47f aed5 	bne.w	8008470 <copy_W+0x158>
 80086c6:	e709      	b.n	80084dc <copy_W+0x1c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80086c8:	ebce 180e 	rsb	r8, lr, lr, lsl #4
 80086cc:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80086d0:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80086d4:	e6f4      	b.n	80084c0 <copy_W+0x1a8>
 80086d6:	ebca 180a 	rsb	r8, sl, sl, lsl #4
 80086da:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80086de:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80086e2:	e6e8      	b.n	80084b6 <copy_W+0x19e>
 80086e4:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80086e6:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 80086ea:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80086ee:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80086f2:	e6c7      	b.n	8008484 <copy_W+0x16c>
 80086f4:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80086f8:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80086fc:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8008700:	e6ba      	b.n	8008478 <copy_W+0x160>
 8008702:	9f01      	ldr	r7, [sp, #4]
 8008704:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8008708:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 800870c:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8008710:	e6db      	b.n	80084ca <copy_W+0x1b2>
 8008712:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8008716:	eb0c 1c49 	add.w	ip, ip, r9, lsl #5
 800871a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800871e:	e6e2      	b.n	80084e6 <copy_W+0x1ce>
 8008720:	ebcb 180b 	rsb	r8, fp, fp, lsl #4
 8008724:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8008728:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800872c:	e6be      	b.n	80084ac <copy_W+0x194>
 800872e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8008730:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8008734:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8008738:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800873c:	e6b1      	b.n	80084a2 <copy_W+0x18a>
 800873e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008740:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8008744:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8008748:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800874c:	e6a4      	b.n	8008498 <copy_W+0x180>
 800874e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8008750:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8008754:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8008758:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800875c:	e697      	b.n	800848e <copy_W+0x176>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800875e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8008762:	f6bf af2e 	bge.w	80085c2 <copy_W+0x2aa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008766:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800876a:	4690      	mov	r8, r2
 800876c:	eb0c 124e 	add.w	r2, ip, lr, lsl #5
 8008770:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8008774:	e725      	b.n	80085c2 <copy_W+0x2aa>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008776:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800877a:	f4bf af4f 	bcs.w	800861c <copy_W+0x304>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800877e:	4a09      	ldr	r2, [pc, #36]	@ (80087a4 <copy_W+0x48c>)
 8008780:	4462      	add	r2, ip
 8008782:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008786:	e6e6      	b.n	8008556 <copy_W+0x23e>
 8008788:	9a01      	ldr	r2, [sp, #4]
 800878a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800878e:	f6bf af45 	bge.w	800861c <copy_W+0x304>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008792:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8008796:	46d0      	mov	r8, sl
 8008798:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 800879c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80087a0:	e70f      	b.n	80085c2 <copy_W+0x2aa>
 80087a2:	bf00      	nop
 80087a4:	0001fc20 	.word	0x0001fc20

080087a8 <copy_X>:

void copy_X(uint16_t* buffer, int x, int y, uint32_t color)
{
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80087ac:	4c9b      	ldr	r4, [pc, #620]	@ (8008a1c <copy_X+0x274>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80087ae:	f240 1edf 	movw	lr, #479	@ 0x1df
{
 80087b2:	b087      	sub	sp, #28
    int pixel_x = x_base + x + offset;
 80087b4:	1d4e      	adds	r6, r1, #5
 80087b6:	6824      	ldr	r4, [r4, #0]
    int pixel_y = y_base + y;
 80087b8:	f102 0c01 	add.w	ip, r2, #1
    int pixel_x = x_base + x + offset;
 80087bc:	190f      	adds	r7, r1, r4
 80087be:	1935      	adds	r5, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80087c0:	4577      	cmp	r7, lr
 80087c2:	463e      	mov	r6, r7
    int pixel_x = x_base + x + offset;
 80087c4:	9705      	str	r7, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80087c6:	bf8c      	ite	hi
 80087c8:	2700      	movhi	r7, #0
 80087ca:	2701      	movls	r7, #1
    int pixel_x = x_base + x + offset;
 80087cc:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80087ce:	9702      	str	r7, [sp, #8]
 80087d0:	463d      	mov	r5, r7
 80087d2:	43d7      	mvns	r7, r2
 80087d4:	0fff      	lsrs	r7, r7, #31
 80087d6:	403d      	ands	r5, r7
 80087d8:	9500      	str	r5, [sp, #0]
 80087da:	f000 80fb 	beq.w	80089d4 <copy_X+0x22c>
 80087de:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80087e2:	f280 80ef 	bge.w	80089c4 <copy_X+0x21c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80087e6:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80087ea:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80087ee:	fa1f fe83 	uxth.w	lr, r3
 80087f2:	eb06 1745 	add.w	r7, r6, r5, lsl #5
 80087f6:	ea4f 1545 	mov.w	r5, r5, lsl #5
 80087fa:	f820 e017 	strh.w	lr, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80087fe:	f000 8303 	beq.w	8008e08 <copy_X+0x660>
 8008802:	9e01      	ldr	r6, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008804:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008808:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800880c:	f820 e017 	strh.w	lr, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008810:	f080 80dd 	bcs.w	80089ce <copy_X+0x226>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008814:	4435      	add	r5, r6
 8008816:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
 800881a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800881e:	9d01      	ldr	r5, [sp, #4]
 8008820:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8008824:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8008828:	1c4d      	adds	r5, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800882a:	f240 1edf 	movw	lr, #479	@ 0x1df
    int pixel_y = y_base + y;
 800882e:	1c97      	adds	r7, r2, #2
    int pixel_x = x_base + x + offset;
 8008830:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008832:	ea6f 0c07 	mvn.w	ip, r7
    int pixel_x = x_base + x + offset;
 8008836:	462e      	mov	r6, r5
 8008838:	1d0d      	adds	r5, r1, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800883a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 800883e:	4576      	cmp	r6, lr
    int pixel_x = x_base + x + offset;
 8008840:	eb05 0b04 	add.w	fp, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008844:	9604      	str	r6, [sp, #16]
 8008846:	bf8c      	ite	hi
 8008848:	2600      	movhi	r6, #0
 800884a:	2601      	movls	r6, #1
 800884c:	45f3      	cmp	fp, lr
 800884e:	9603      	str	r6, [sp, #12]
 8008850:	bf8c      	ite	hi
 8008852:	f04f 0e00 	movhi.w	lr, #0
 8008856:	f04f 0e01 	movls.w	lr, #1
 800885a:	ea16 050c 	ands.w	r5, r6, ip
 800885e:	f000 80df 	beq.w	8008a20 <copy_X+0x278>
 8008862:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8008866:	f2c0 81a1 	blt.w	8008bac <copy_X+0x404>
    int pixel_x = x_base + x + offset;
 800886a:	f101 0c02 	add.w	ip, r1, #2
 800886e:	3103      	adds	r1, #3
 8008870:	44a4      	add	ip, r4
 8008872:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008874:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8008878:	f0c0 81f1 	bcc.w	8008c5e <copy_X+0x4b6>
 800887c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008880:	f0c0 81db 	bcc.w	8008c3a <copy_X+0x492>
 8008884:	2400      	movs	r4, #0
 8008886:	46a8      	mov	r8, r5
    int pixel_y = y_base + y;
 8008888:	f102 0a05 	add.w	sl, r2, #5
 800888c:	4675      	mov	r5, lr
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800888e:	4627      	mov	r7, r4
 8008890:	ea08 0804 	and.w	r8, r8, r4
 8008894:	fa5f f888 	uxtb.w	r8, r8
 8008898:	f1b8 0f00 	cmp.w	r8, #0
 800889c:	f040 81c3 	bne.w	8008c26 <copy_X+0x47e>
    int pixel_y = y_base + y;
 80088a0:	f102 0806 	add.w	r8, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80088a4:	ea6f 0e08 	mvn.w	lr, r8
 80088a8:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 80088ac:	f1be 0f00 	cmp.w	lr, #0
 80088b0:	f000 8123 	beq.w	8008afa <copy_X+0x352>
 80088b4:	2f00      	cmp	r7, #0
 80088b6:	f000 8120 	beq.w	8008afa <copy_X+0x352>
 80088ba:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80088be:	f280 81d4 	bge.w	8008c6a <copy_X+0x4c2>
 80088c2:	46a2      	mov	sl, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80088c4:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
    int pixel_y = y_base + y;
 80088c8:	f102 0907 	add.w	r9, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80088cc:	eb0c 1444 	add.w	r4, ip, r4, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80088d0:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80088d4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80088d8:	ea4f 1408 	mov.w	r4, r8, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80088dc:	f000 82f9 	beq.w	8008ed2 <copy_X+0x72a>
 80088e0:	4654      	mov	r4, sl
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80088e2:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 80088e6:	fa1f fe83 	uxth.w	lr, r3
 80088ea:	eb0c 1c47 	add.w	ip, ip, r7, lsl #5
 80088ee:	017f      	lsls	r7, r7, #5
 80088f0:	f820 e01c 	strh.w	lr, [r0, ip, lsl #1]
 80088f4:	ea4f 1c09 	mov.w	ip, r9, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80088f8:	f1ba 0f00 	cmp.w	sl, #0
 80088fc:	f000 82c5 	beq.w	8008e8a <copy_X+0x6e2>
 8008900:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008904:	da09      	bge.n	800891a <copy_X+0x172>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008906:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800890a:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 800890e:	f820 e018 	strh.w	lr, [r0, r8, lsl #1]
 8008912:	ebac 0c09 	sub.w	ip, ip, r9
 8008916:	ea4f 174c 	mov.w	r7, ip, lsl #5
 800891a:	440f      	add	r7, r1
    int pixel_y = y_base + y;
 800891c:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008920:	43cc      	mvns	r4, r1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008922:	f820 e017 	strh.w	lr, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008926:	0fe4      	lsrs	r4, r4, #31
 8008928:	2c00      	cmp	r4, #0
 800892a:	f040 810b 	bne.w	8008b44 <copy_X+0x39c>
    int pixel_y = y_base + y;
 800892e:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008932:	402c      	ands	r4, r5
 8008934:	ea6f 0c07 	mvn.w	ip, r7
 8008938:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 800893c:	f1bc 0f00 	cmp.w	ip, #0
 8008940:	d003      	beq.n	800894a <copy_X+0x1a2>
 8008942:	9e03      	ldr	r6, [sp, #12]
 8008944:	2e00      	cmp	r6, #0
 8008946:	f040 829a 	bne.w	8008e7e <copy_X+0x6d6>
 800894a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800894e:	ea0c 0505 	and.w	r5, ip, r5
 8008952:	da02      	bge.n	800895a <copy_X+0x1b2>
 8008954:	2c00      	cmp	r4, #0
 8008956:	f040 820f 	bne.w	8008d78 <copy_X+0x5d0>
 800895a:	2d00      	cmp	r5, #0
 800895c:	f040 81a1 	bne.w	8008ca2 <copy_X+0x4fa>
    int pixel_y = y_base + y;
 8008960:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008964:	43cc      	mvns	r4, r1
 8008966:	0fe4      	lsrs	r4, r4, #31
 8008968:	2c00      	cmp	r4, #0
 800896a:	f000 81a6 	beq.w	8008cba <copy_X+0x512>
 800896e:	9d02      	ldr	r5, [sp, #8]
 8008970:	2d00      	cmp	r5, #0
 8008972:	f000 81a2 	beq.w	8008cba <copy_X+0x512>
 8008976:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800897a:	da20      	bge.n	80089be <copy_X+0x216>
    int pixel_y = y_base + y;
 800897c:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800897e:	ebc1 1401 	rsb	r4, r1, r1, lsl #4
 8008982:	9d05      	ldr	r5, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008984:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008988:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 800898c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008990:	f000 8224 	beq.w	8008ddc <copy_X+0x634>
 8008994:	9c00      	ldr	r4, [sp, #0]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008996:	fa1f fe83 	uxth.w	lr, r3
 800899a:	9d05      	ldr	r5, [sp, #20]
 800899c:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 80089a0:	eb05 1543 	add.w	r5, r5, r3, lsl #5
 80089a4:	015b      	lsls	r3, r3, #5
 80089a6:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
 80089aa:	0115      	lsls	r5, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80089ac:	2c00      	cmp	r4, #0
 80089ae:	f040 8252 	bne.w	8008e56 <copy_X+0x6ae>
 80089b2:	9a00      	ldr	r2, [sp, #0]
 80089b4:	b11a      	cbz	r2, 80089be <copy_X+0x216>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80089b6:	9a01      	ldr	r2, [sp, #4]
 80089b8:	4413      	add	r3, r2
 80089ba:	f820 e013 	strh.w	lr, [r0, r3, lsl #1]
    fill_pixel(buffer, x, y, 4, 9, color);
    fill_pixel(buffer, x, y, 0, 10, color);
    fill_pixel(buffer, x, y, 0, 11, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    fill_pixel(buffer, x, y, 5, 11, color);
}
 80089be:	b007      	add	sp, #28
 80089c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80089c4:	9d01      	ldr	r5, [sp, #4]
 80089c6:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80089ca:	f4ff af2d 	bcc.w	8008828 <copy_X+0x80>
 80089ce:	2500      	movs	r5, #0
 80089d0:	9500      	str	r5, [sp, #0]
 80089d2:	e729      	b.n	8008828 <copy_X+0x80>
 80089d4:	9d01      	ldr	r5, [sp, #4]
 80089d6:	4575      	cmp	r5, lr
 80089d8:	bf8c      	ite	hi
 80089da:	2500      	movhi	r5, #0
 80089dc:	2501      	movls	r5, #1
 80089de:	1c56      	adds	r6, r2, #1
 80089e0:	bfb4      	ite	lt
 80089e2:	f04f 0e00 	movlt.w	lr, #0
 80089e6:	f04f 0e01 	movge.w	lr, #1
 80089ea:	f1be 0f00 	cmp.w	lr, #0
 80089ee:	d003      	beq.n	80089f8 <copy_X+0x250>
 80089f0:	9e02      	ldr	r6, [sp, #8]
 80089f2:	2e00      	cmp	r6, #0
 80089f4:	f040 8277 	bne.w	8008ee6 <copy_X+0x73e>
 80089f8:	ea17 0605 	ands.w	r6, r7, r5
 80089fc:	9600      	str	r6, [sp, #0]
 80089fe:	f040 817d 	bne.w	8008cfc <copy_X+0x554>
 8008a02:	ea0e 0e05 	and.w	lr, lr, r5
 8008a06:	9500      	str	r5, [sp, #0]
 8008a08:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8008a0c:	f6bf af0c 	bge.w	8008828 <copy_X+0x80>
 8008a10:	f1be 0f00 	cmp.w	lr, #0
 8008a14:	f43f af08 	beq.w	8008828 <copy_X+0x80>
 8008a18:	e6ff      	b.n	800881a <copy_X+0x72>
 8008a1a:	bf00      	nop
 8008a1c:	240001b8 	.word	0x240001b8
    int pixel_y = y_base + y;
 8008a20:	f102 0803 	add.w	r8, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008a24:	ea6f 0908 	mvn.w	r9, r8
 8008a28:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8008a2c:	f1b9 0f00 	cmp.w	r9, #0
 8008a30:	d002      	beq.n	8008a38 <copy_X+0x290>
 8008a32:	2e00      	cmp	r6, #0
 8008a34:	f040 828a 	bne.w	8008f4c <copy_X+0x7a4>
 8008a38:	ea1c 050e 	ands.w	r5, ip, lr
 8008a3c:	f040 8169 	bne.w	8008d12 <copy_X+0x56a>
 8008a40:	ea09 090e 	and.w	r9, r9, lr
 8008a44:	4675      	mov	r5, lr
 8008a46:	fa5f f989 	uxtb.w	r9, r9
 8008a4a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008a4e:	da08      	bge.n	8008a62 <copy_X+0x2ba>
 8008a50:	f1b9 0f00 	cmp.w	r9, #0
 8008a54:	d005      	beq.n	8008a62 <copy_X+0x2ba>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008a56:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8008a5a:	eb0b 1848 	add.w	r8, fp, r8, lsl #5
 8008a5e:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    int pixel_x = x_base + x + offset;
 8008a62:	f101 0c02 	add.w	ip, r1, #2
 8008a66:	3103      	adds	r1, #3
    int pixel_y = y_base + y;
 8008a68:	f102 0e04 	add.w	lr, r2, #4
 8008a6c:	f102 0a05 	add.w	sl, r2, #5
    int pixel_x = x_base + x + offset;
 8008a70:	44a4      	add	ip, r4
 8008a72:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008a74:	f240 14df 	movw	r4, #479	@ 0x1df
 8008a78:	ea6f 090e 	mvn.w	r9, lr
 8008a7c:	45a4      	cmp	ip, r4
 8008a7e:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8008a82:	bf8c      	ite	hi
 8008a84:	2700      	movhi	r7, #0
 8008a86:	2701      	movls	r7, #1
 8008a88:	42a1      	cmp	r1, r4
 8008a8a:	bf8c      	ite	hi
 8008a8c:	2400      	movhi	r4, #0
 8008a8e:	2401      	movls	r4, #1
 8008a90:	ea17 0809 	ands.w	r8, r7, r9
 8008a94:	f000 80a7 	beq.w	8008be6 <copy_X+0x43e>
 8008a98:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8008a9c:	f280 80e5 	bge.w	8008c6a <copy_X+0x4c2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008aa0:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008aa4:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008aa8:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8008aac:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ab0:	f000 81fe 	beq.w	8008eb0 <copy_X+0x708>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008ab4:	ebca 190a 	rsb	r9, sl, sl, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ab8:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008abc:	fa1f fe83 	uxth.w	lr, r3
 8008ac0:	eb0c 1449 	add.w	r4, ip, r9, lsl #5
 8008ac4:	ea4f 1949 	mov.w	r9, r9, lsl #5
 8008ac8:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008acc:	f080 8169 	bcs.w	8008da2 <copy_X+0x5fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008ad0:	eb09 0401 	add.w	r4, r9, r1
 8008ad4:	4647      	mov	r7, r8
 8008ad6:	f5a4 74f0 	sub.w	r4, r4, #480	@ 0x1e0
 8008ada:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
 8008ade:	4489      	add	r9, r1
    int pixel_y = y_base + y;
 8008ae0:	f102 0806 	add.w	r8, r2, #6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008ae4:	f820 e019 	strh.w	lr, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ae8:	ea6f 0e08 	mvn.w	lr, r8
 8008aec:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8008af0:	ea17 0a0e 	ands.w	sl, r7, lr
 8008af4:	f040 81cd 	bne.w	8008e92 <copy_X+0x6ea>
 8008af8:	2401      	movs	r4, #1
    int pixel_y = y_base + y;
 8008afa:	f102 0907 	add.w	r9, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008afe:	ea0e 0a04 	and.w	sl, lr, r4
 8008b02:	ea6f 0e09 	mvn.w	lr, r9
 8008b06:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8008b0a:	f1be 0f00 	cmp.w	lr, #0
 8008b0e:	f040 810b 	bne.w	8008d28 <copy_X+0x580>
 8008b12:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008b16:	f280 809f 	bge.w	8008c58 <copy_X+0x4b0>
 8008b1a:	f1ba 0f00 	cmp.w	sl, #0
 8008b1e:	f000 809b 	beq.w	8008c58 <copy_X+0x4b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b22:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8008b26:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 8008b2a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008b2e:	f1be 0f00 	cmp.w	lr, #0
 8008b32:	f040 8174 	bne.w	8008e1e <copy_X+0x676>
    int pixel_y = y_base + y;
 8008b36:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008b3a:	43cc      	mvns	r4, r1
 8008b3c:	0fe4      	lsrs	r4, r4, #31
 8008b3e:	2c00      	cmp	r4, #0
 8008b40:	f43f aef5 	beq.w	800892e <copy_X+0x186>
 8008b44:	9e03      	ldr	r6, [sp, #12]
 8008b46:	2e00      	cmp	r6, #0
 8008b48:	f43f aef1 	beq.w	800892e <copy_X+0x186>
 8008b4c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008b50:	f280 81a4 	bge.w	8008e9c <copy_X+0x6f4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b54:	ebc1 1401 	rsb	r4, r1, r1, lsl #4
 8008b58:	9e04      	ldr	r6, [sp, #16]
    int pixel_y = y_base + y;
 8008b5a:	f102 0709 	add.w	r7, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b5e:	eb06 1444 	add.w	r4, r6, r4, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008b62:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b66:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008b6a:	f000 813e 	beq.w	8008dea <copy_X+0x642>
 8008b6e:	46ac      	mov	ip, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b70:	ebc7 1407 	rsb	r4, r7, r7, lsl #4
 8008b74:	9e04      	ldr	r6, [sp, #16]
 8008b76:	fa1f fe83 	uxth.w	lr, r3
 8008b7a:	eb06 1844 	add.w	r8, r6, r4, lsl #5
 8008b7e:	0164      	lsls	r4, r4, #5
 8008b80:	f820 e018 	strh.w	lr, [r0, r8, lsl #1]
 8008b84:	ea4f 1807 	mov.w	r8, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	f000 8174 	beq.w	8008e76 <copy_X+0x6ce>
 8008b8e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008b92:	f280 811f 	bge.w	8008dd4 <copy_X+0x62c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b96:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008b9a:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
 8008b9e:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ba2:	f1bc 0f00 	cmp.w	ip, #0
 8008ba6:	f43f aedb 	beq.w	8008960 <copy_X+0x1b8>
 8008baa:	e10f      	b.n	8008dcc <copy_X+0x624>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008bac:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    int pixel_y = y_base + y;
 8008bb0:	f102 0803 	add.w	r8, r2, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008bb4:	9e04      	ldr	r6, [sp, #16]
 8008bb6:	fa1f fe83 	uxth.w	lr, r3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008bba:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008bbe:	eb06 1c47 	add.w	ip, r6, r7, lsl #5
 8008bc2:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8008bc6:	f820 e01c 	strh.w	lr, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008bca:	f000 8178 	beq.w	8008ebe <copy_X+0x716>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008bce:	f50c 7cf0 	add.w	ip, ip, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008bd2:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008bd6:	f820 e01c 	strh.w	lr, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008bda:	f080 80e0 	bcs.w	8008d9e <copy_X+0x5f6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008bde:	445f      	add	r7, fp
 8008be0:	f820 e017 	strh.w	lr, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008be4:	e737      	b.n	8008a56 <copy_X+0x2ae>
 8008be6:	1d56      	adds	r6, r2, #5
 8008be8:	bfb4      	ite	lt
 8008bea:	f04f 0800 	movlt.w	r8, #0
 8008bee:	f04f 0801 	movge.w	r8, #1
 8008bf2:	ea18 0607 	ands.w	r6, r8, r7
 8008bf6:	f040 8196 	bne.w	8008f26 <copy_X+0x77e>
 8008bfa:	f1b9 0f00 	cmp.w	r9, #0
 8008bfe:	f43f ae47 	beq.w	8008890 <copy_X+0xe8>
 8008c02:	2c00      	cmp	r4, #0
 8008c04:	f43f ae44 	beq.w	8008890 <copy_X+0xe8>
 8008c08:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8008c0c:	f280 8184 	bge.w	8008f18 <copy_X+0x770>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c10:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8008c14:	2401      	movs	r4, #1
 8008c16:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 8008c1a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c1e:	f1b8 0f00 	cmp.w	r8, #0
 8008c22:	f43f ae3d 	beq.w	80088a0 <copy_X+0xf8>
 8008c26:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8008c2a:	da21      	bge.n	8008c70 <copy_X+0x4c8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c2c:	ebca 190a 	rsb	r9, sl, sl, lsl #4
 8008c30:	fa1f fe83 	uxth.w	lr, r3
 8008c34:	ea4f 1949 	mov.w	r9, r9, lsl #5
 8008c38:	e751      	b.n	8008ade <copy_X+0x336>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c3a:	2700      	movs	r7, #0
 8008c3c:	2d00      	cmp	r5, #0
 8008c3e:	f040 8146 	bne.w	8008ece <copy_X+0x726>
 8008c42:	2f00      	cmp	r7, #0
 8008c44:	f040 8143 	bne.w	8008ece <copy_X+0x726>
    int pixel_y = y_base + y;
 8008c48:	f102 0907 	add.w	r9, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c4c:	4675      	mov	r5, lr
 8008c4e:	2401      	movs	r4, #1
 8008c50:	ea6f 0e09 	mvn.w	lr, r9
 8008c54:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8008c58:	ea04 0e0e 	and.w	lr, r4, lr
 8008c5c:	e767      	b.n	8008b2e <copy_X+0x386>
 8008c5e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008c62:	4675      	mov	r5, lr
 8008c64:	bf2c      	ite	cs
 8008c66:	2400      	movcs	r4, #0
 8008c68:	2401      	movcc	r4, #1
 8008c6a:	2c00      	cmp	r4, #0
 8008c6c:	f000 80a1 	beq.w	8008db2 <copy_X+0x60a>
    int pixel_y = y_base + y;
 8008c70:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c74:	9e03      	ldr	r6, [sp, #12]
 8008c76:	43cc      	mvns	r4, r1
 8008c78:	0fe4      	lsrs	r4, r4, #31
 8008c7a:	2e00      	cmp	r6, #0
 8008c7c:	f43f ae57 	beq.w	800892e <copy_X+0x186>
 8008c80:	2c00      	cmp	r4, #0
 8008c82:	f43f ae54 	beq.w	800892e <copy_X+0x186>
 8008c86:	2d00      	cmp	r5, #0
 8008c88:	f43f ae6a 	beq.w	8008960 <copy_X+0x1b8>
 8008c8c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8008c90:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c94:	da05      	bge.n	8008ca2 <copy_X+0x4fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c96:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008c9a:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
 8008c9e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ca2:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8008ca6:	f2c0 808d 	blt.w	8008dc4 <copy_X+0x61c>
    int pixel_y = y_base + y;
 8008caa:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008cae:	9d02      	ldr	r5, [sp, #8]
 8008cb0:	43cc      	mvns	r4, r1
 8008cb2:	0fe4      	lsrs	r4, r4, #31
 8008cb4:	b10d      	cbz	r5, 8008cba <copy_X+0x512>
 8008cb6:	2c00      	cmp	r4, #0
 8008cb8:	d14d      	bne.n	8008d56 <copy_X+0x5ae>
 8008cba:	9d00      	ldr	r5, [sp, #0]
    int pixel_y = y_base + y;
 8008cbc:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008cbe:	402c      	ands	r4, r5
 8008cc0:	43d5      	mvns	r5, r2
 8008cc2:	0fed      	lsrs	r5, r5, #31
 8008cc4:	b11d      	cbz	r5, 8008cce <copy_X+0x526>
 8008cc6:	9e02      	ldr	r6, [sp, #8]
 8008cc8:	2e00      	cmp	r6, #0
 8008cca:	f040 80b1 	bne.w	8008e30 <copy_X+0x688>
 8008cce:	9e00      	ldr	r6, [sp, #0]
 8008cd0:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008cd4:	ea06 0605 	and.w	r6, r6, r5
 8008cd8:	9600      	str	r6, [sp, #0]
 8008cda:	da01      	bge.n	8008ce0 <copy_X+0x538>
 8008cdc:	2c00      	cmp	r4, #0
 8008cde:	d152      	bne.n	8008d86 <copy_X+0x5de>
 8008ce0:	9900      	ldr	r1, [sp, #0]
 8008ce2:	2900      	cmp	r1, #0
 8008ce4:	f43f ae6b 	beq.w	80089be <copy_X+0x216>
 8008ce8:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8008cec:	f6bf ae67 	bge.w	80089be <copy_X+0x216>
 8008cf0:	fa1f fe83 	uxth.w	lr, r3
 8008cf4:	0115      	lsls	r5, r2, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008cf6:	1aad      	subs	r5, r5, r2
 8008cf8:	016b      	lsls	r3, r5, #5
 8008cfa:	e65c      	b.n	80089b6 <copy_X+0x20e>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008cfc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8008d00:	da5e      	bge.n	8008dc0 <copy_X+0x618>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008d02:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8008d06:	9e01      	ldr	r6, [sp, #4]
 8008d08:	eb06 1545 	add.w	r5, r6, r5, lsl #5
 8008d0c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008d10:	e67a      	b.n	8008a08 <copy_X+0x260>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d12:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8008d16:	f6bf aea4 	bge.w	8008a62 <copy_X+0x2ba>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008d1a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8008d1e:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 8008d22:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8008d26:	e690      	b.n	8008a4a <copy_X+0x2a2>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d28:	2f00      	cmp	r7, #0
 8008d2a:	f43f aef2 	beq.w	8008b12 <copy_X+0x36a>
 8008d2e:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8008d32:	f6ff add6 	blt.w	80088e2 <copy_X+0x13a>
 8008d36:	f1ba 0f00 	cmp.w	sl, #0
 8008d3a:	f000 80f0 	beq.w	8008f1e <copy_X+0x776>
 8008d3e:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008d42:	da95      	bge.n	8008c70 <copy_X+0x4c8>
 8008d44:	ea4f 1408 	mov.w	r4, r8, lsl #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008d48:	eba4 0408 	sub.w	r4, r4, r8
 8008d4c:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8008d50:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d54:	e78c      	b.n	8008c70 <copy_X+0x4c8>
 8008d56:	9c00      	ldr	r4, [sp, #0]
 8008d58:	2c00      	cmp	r4, #0
 8008d5a:	f43f ae30 	beq.w	80089be <copy_X+0x216>
 8008d5e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8008d62:	f102 020b 	add.w	r2, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d66:	dabf      	bge.n	8008ce8 <copy_X+0x540>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008d68:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008d6c:	9c01      	ldr	r4, [sp, #4]
 8008d6e:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 8008d72:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d76:	e7b7      	b.n	8008ce8 <copy_X+0x540>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008d78:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008d7c:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
 8008d80:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8008d84:	e5e9      	b.n	800895a <copy_X+0x1b2>
 8008d86:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008d8a:	9c01      	ldr	r4, [sp, #4]
 8008d8c:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 8008d90:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d94:	9900      	ldr	r1, [sp, #0]
 8008d96:	2900      	cmp	r1, #0
 8008d98:	f43f ae11 	beq.w	80089be <copy_X+0x216>
 8008d9c:	e7a4      	b.n	8008ce8 <copy_X+0x540>
 8008d9e:	2500      	movs	r5, #0
 8008da0:	e65f      	b.n	8008a62 <copy_X+0x2ba>
 8008da2:	f04f 0a00 	mov.w	sl, #0
    int pixel_y = y_base + y;
 8008da6:	f102 0806 	add.w	r8, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008daa:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008dae:	f6ff ad89 	blt.w	80088c4 <copy_X+0x11c>
 8008db2:	9904      	ldr	r1, [sp, #16]
 8008db4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008db8:	d370      	bcc.n	8008e9c <copy_X+0x6f4>
    int pixel_y = y_base + y;
 8008dba:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008dbe:	e5cc      	b.n	800895a <copy_X+0x1b2>
 8008dc0:	46b6      	mov	lr, r6
 8008dc2:	e621      	b.n	8008a08 <copy_X+0x260>
 8008dc4:	fa1f fe83 	uxth.w	lr, r3
 8008dc8:	ea4f 1807 	mov.w	r8, r7, lsl #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008dcc:	eba8 0807 	sub.w	r8, r8, r7
 8008dd0:	ea4f 1448 	mov.w	r4, r8, lsl #5
 8008dd4:	445c      	add	r4, fp
 8008dd6:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
 8008dda:	e5c1      	b.n	8008960 <copy_X+0x1b8>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ddc:	9a00      	ldr	r2, [sp, #0]
 8008dde:	2a00      	cmp	r2, #0
 8008de0:	f43f aded 	beq.w	80089be <copy_X+0x216>
 8008de4:	f240 110f 	movw	r1, #271	@ 0x10f
 8008de8:	e02d      	b.n	8008e46 <copy_X+0x69e>
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	f43f adb8 	beq.w	8008960 <copy_X+0x1b8>
 8008df0:	f240 110f 	movw	r1, #271	@ 0x10f
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008df4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008df8:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
 8008dfc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e00:	2d00      	cmp	r5, #0
 8008e02:	f43f adad 	beq.w	8008960 <copy_X+0x1b8>
 8008e06:	e750      	b.n	8008caa <copy_X+0x502>
 8008e08:	9d01      	ldr	r5, [sp, #4]
 8008e0a:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8008e0e:	f4bf adde 	bcs.w	80089ce <copy_X+0x226>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008e12:	462e      	mov	r6, r5
 8008e14:	4d5b      	ldr	r5, [pc, #364]	@ (8008f84 <copy_X+0x7dc>)
 8008e16:	4435      	add	r5, r6
 8008e18:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e1c:	e504      	b.n	8008828 <copy_X+0x80>
 8008e1e:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8008e22:	f6bf af25 	bge.w	8008c70 <copy_X+0x4c8>
 8008e26:	fa1f fe83 	uxth.w	lr, r3
 8008e2a:	ea4f 1c09 	mov.w	ip, r9, lsl #4
 8008e2e:	e570      	b.n	8008912 <copy_X+0x16a>
 8008e30:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8008e34:	f6ff adaf 	blt.w	8008996 <copy_X+0x1ee>
 8008e38:	2c00      	cmp	r4, #0
 8008e3a:	f43f adc0 	beq.w	80089be <copy_X+0x216>
 8008e3e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008e42:	f6bf adbc 	bge.w	80089be <copy_X+0x216>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008e46:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008e4a:	9a01      	ldr	r2, [sp, #4]
 8008e4c:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8008e50:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e54:	e5b3      	b.n	80089be <copy_X+0x216>
 8008e56:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008e5a:	f6bf adac 	bge.w	80089b6 <copy_X+0x20e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008e5e:	9b01      	ldr	r3, [sp, #4]
 8008e60:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008e64:	eb03 1141 	add.w	r1, r3, r1, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e68:	9b00      	ldr	r3, [sp, #0]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008e6a:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f43f ada5 	beq.w	80089be <copy_X+0x216>
 8008e74:	e73f      	b.n	8008cf6 <copy_X+0x54e>
 8008e76:	f1bc 0f00 	cmp.w	ip, #0
 8008e7a:	d1ab      	bne.n	8008dd4 <copy_X+0x62c>
 8008e7c:	e570      	b.n	8008960 <copy_X+0x1b8>
 8008e7e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8008e82:	da3f      	bge.n	8008f04 <copy_X+0x75c>
 8008e84:	46ac      	mov	ip, r5
 8008e86:	4625      	mov	r5, r4
 8008e88:	e672      	b.n	8008b70 <copy_X+0x3c8>
 8008e8a:	2c00      	cmp	r4, #0
 8008e8c:	f47f ad45 	bne.w	800891a <copy_X+0x172>
 8008e90:	e651      	b.n	8008b36 <copy_X+0x38e>
 8008e92:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008e96:	f6ff ad15 	blt.w	80088c4 <copy_X+0x11c>
 8008e9a:	e6e9      	b.n	8008c70 <copy_X+0x4c8>
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	f47f af04 	bne.w	8008caa <copy_X+0x502>
 8008ea2:	9905      	ldr	r1, [sp, #20]
 8008ea4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008ea8:	f4ff ad89 	bcc.w	80089be <copy_X+0x216>
    int pixel_y = y_base + y;
 8008eac:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008eae:	e717      	b.n	8008ce0 <copy_X+0x538>
 8008eb0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008eb4:	4647      	mov	r7, r8
 8008eb6:	d214      	bcs.n	8008ee2 <copy_X+0x73a>
 8008eb8:	f240 1e0f 	movw	lr, #271	@ 0x10f
 8008ebc:	e6a8      	b.n	8008c10 <copy_X+0x468>
 8008ebe:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8008ec2:	d20b      	bcs.n	8008edc <copy_X+0x734>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008ec4:	4f2f      	ldr	r7, [pc, #188]	@ (8008f84 <copy_X+0x7dc>)
 8008ec6:	445f      	add	r7, fp
 8008ec8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ecc:	e5c9      	b.n	8008a62 <copy_X+0x2ba>
 8008ece:	4675      	mov	r5, lr
 8008ed0:	e6ce      	b.n	8008c70 <copy_X+0x4c8>
 8008ed2:	f1ba 0f00 	cmp.w	sl, #0
 8008ed6:	f47f af37 	bne.w	8008d48 <copy_X+0x5a0>
 8008eda:	e62c      	b.n	8008b36 <copy_X+0x38e>
 8008edc:	f04f 0e00 	mov.w	lr, #0
 8008ee0:	e4c3      	b.n	800886a <copy_X+0xc2>
 8008ee2:	2400      	movs	r4, #0
 8008ee4:	e4d4      	b.n	8008890 <copy_X+0xe8>
 8008ee6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8008eea:	f6bf ad71 	bge.w	80089d0 <copy_X+0x228>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008eee:	46ae      	mov	lr, r5
 8008ef0:	9e05      	ldr	r6, [sp, #20]
 8008ef2:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ef6:	f8cd e000 	str.w	lr, [sp]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008efa:	eb06 1545 	add.w	r5, r6, r5, lsl #5
 8008efe:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008f02:	e581      	b.n	8008a08 <copy_X+0x260>
 8008f04:	b124      	cbz	r4, 8008f10 <copy_X+0x768>
 8008f06:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008f0a:	f6bf aece 	bge.w	8008caa <copy_X+0x502>
 8008f0e:	e771      	b.n	8008df4 <copy_X+0x64c>
 8008f10:	2d00      	cmp	r5, #0
 8008f12:	f47f aeca 	bne.w	8008caa <copy_X+0x502>
 8008f16:	e523      	b.n	8008960 <copy_X+0x1b8>
 8008f18:	46ae      	mov	lr, r5
 8008f1a:	4645      	mov	r5, r8
 8008f1c:	e68e      	b.n	8008c3c <copy_X+0x494>
 8008f1e:	2c00      	cmp	r4, #0
 8008f20:	f47f aea6 	bne.w	8008c70 <copy_X+0x4c8>
 8008f24:	e607      	b.n	8008b36 <copy_X+0x38e>
 8008f26:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8008f2a:	da1c      	bge.n	8008f66 <copy_X+0x7be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008f2c:	f44f 79f0 	mov.w	r9, #480	@ 0x1e0
 8008f30:	fa1f fe83 	uxth.w	lr, r3
 8008f34:	fb09 f90a 	mul.w	r9, r9, sl
 8008f38:	46a2      	mov	sl, r4
 8008f3a:	eb0c 0709 	add.w	r7, ip, r9
 8008f3e:	f820 e017 	strh.w	lr, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008f42:	2c00      	cmp	r4, #0
 8008f44:	f43f af2f 	beq.w	8008da6 <copy_X+0x5fe>
 8008f48:	4627      	mov	r7, r4
 8008f4a:	e5c8      	b.n	8008ade <copy_X+0x336>
 8008f4c:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008f50:	da12      	bge.n	8008f78 <copy_X+0x7d0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008f52:	f44f 75f0 	mov.w	r5, #480	@ 0x1e0
 8008f56:	9e04      	ldr	r6, [sp, #16]
 8008f58:	46f1      	mov	r9, lr
 8008f5a:	fb05 6508 	mla	r5, r5, r8, r6
 8008f5e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008f62:	4675      	mov	r5, lr
 8008f64:	e571      	b.n	8008a4a <copy_X+0x2a2>
 8008f66:	ea19 0704 	ands.w	r7, r9, r4
 8008f6a:	d007      	beq.n	8008f7c <copy_X+0x7d4>
 8008f6c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8008f70:	f6bf ae7e 	bge.w	8008c70 <copy_X+0x4c8>
 8008f74:	46b8      	mov	r8, r7
 8008f76:	e64b      	b.n	8008c10 <copy_X+0x468>
 8008f78:	4675      	mov	r5, lr
 8008f7a:	e572      	b.n	8008a62 <copy_X+0x2ba>
 8008f7c:	46b0      	mov	r8, r6
 8008f7e:	4637      	mov	r7, r6
 8008f80:	e486      	b.n	8008890 <copy_X+0xe8>
 8008f82:	bf00      	nop
 8008f84:	0001fc20 	.word	0x0001fc20

08008f88 <copy_Y>:

void copy_Y(uint16_t* buffer, int x, int y, uint32_t color)
{
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8008f8c:	4cbf      	ldr	r4, [pc, #764]	@ (800928c <copy_Y+0x304>)
 8008f8e:	1d4d      	adds	r5, r1, #5
{
 8008f90:	b085      	sub	sp, #20
    int pixel_y = y_base + y;
 8008f92:	f102 0801 	add.w	r8, r2, #1
    int pixel_x = x_base + x + offset;
 8008f96:	6824      	ldr	r4, [r4, #0]
 8008f98:	eb01 0e04 	add.w	lr, r1, r4
 8008f9c:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008fa0:	43d5      	mvns	r5, r2
 8008fa2:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8008fa6:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 8008faa:	bf2c      	ite	cs
 8008fac:	2600      	movcs	r6, #0
 8008fae:	2601      	movcc	r6, #1
 8008fb0:	2e00      	cmp	r6, #0
 8008fb2:	f000 80d4 	beq.w	800915e <copy_Y+0x1d6>
 8008fb6:	2d00      	cmp	r5, #0
 8008fb8:	f000 80d1 	beq.w	800915e <copy_Y+0x1d6>
 8008fbc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8008fc0:	f2c0 8166 	blt.w	8009290 <copy_Y+0x308>
    int pixel_x = x_base + x + offset;
 8008fc4:	1c4d      	adds	r5, r1, #1
    int pixel_y = y_base + y;
 8008fc6:	1c96      	adds	r6, r2, #2
    int pixel_x = x_base + x + offset;
 8008fc8:	1d0f      	adds	r7, r1, #4
 8008fca:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008fcc:	ea6f 0806 	mvn.w	r8, r6
    int pixel_x = x_base + x + offset;
 8008fd0:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008fd2:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8008fd6:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8008fda:	bf2c      	ite	cs
 8008fdc:	f04f 0e00 	movcs.w	lr, #0
 8008fe0:	f04f 0e01 	movcc.w	lr, #1
 8008fe4:	f1be 0f00 	cmp.w	lr, #0
 8008fe8:	f000 8095 	beq.w	8009116 <copy_Y+0x18e>
 8008fec:	f1b8 0f00 	cmp.w	r8, #0
 8008ff0:	f000 8091 	beq.w	8009116 <copy_Y+0x18e>
 8008ff4:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8008ff8:	da17      	bge.n	800902a <copy_Y+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008ffa:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    int pixel_y = y_base + y;
 8008ffe:	f102 0c03 	add.w	ip, r2, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009002:	fa1f fe83 	uxth.w	lr, r3
 8009006:	eb05 1546 	add.w	r5, r5, r6, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800900a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800900e:	ea4f 1646 	mov.w	r6, r6, lsl #5
 8009012:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009016:	f000 81e7 	beq.w	80093e8 <copy_Y+0x460>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800901a:	f505 75f0 	add.w	r5, r5, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800901e:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009022:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009026:	f0c0 81c8 	bcc.w	80093ba <copy_Y+0x432>
    int pixel_x = x_base + x + offset;
 800902a:	f101 0c02 	add.w	ip, r1, #2
 800902e:	3103      	adds	r1, #3
    int pixel_y = y_base + y;
 8009030:	1d16      	adds	r6, r2, #4
    int pixel_x = x_base + x + offset;
 8009032:	44a4      	add	ip, r4
 8009034:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009036:	f240 14df 	movw	r4, #479	@ 0x1df
 800903a:	ea6f 0e06 	mvn.w	lr, r6
 800903e:	45a4      	cmp	ip, r4
 8009040:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8009044:	bf8c      	ite	hi
 8009046:	2500      	movhi	r5, #0
 8009048:	2501      	movls	r5, #1
 800904a:	42a1      	cmp	r1, r4
 800904c:	bf8c      	ite	hi
 800904e:	2400      	movhi	r4, #0
 8009050:	2401      	movls	r4, #1
 8009052:	ea15 080e 	ands.w	r8, r5, lr
 8009056:	f000 80a7 	beq.w	80091a8 <copy_Y+0x220>
 800905a:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800905e:	f2c0 80f2 	blt.w	8009246 <copy_Y+0x2be>
    int pixel_y = y_base + y;
 8009062:	f102 0906 	add.w	r9, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009066:	2700      	movs	r7, #0
    int pixel_y = y_base + y;
 8009068:	1dd6      	adds	r6, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800906a:	46ba      	mov	sl, r7
    int pixel_y = y_base + y;
 800906c:	9602      	str	r6, [sp, #8]
 800906e:	46b8      	mov	r8, r7
 8009070:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009074:	9700      	str	r7, [sp, #0]
    int pixel_y = y_base + y;
 8009076:	9601      	str	r6, [sp, #4]
 8009078:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800907c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8009080:	4637      	mov	r7, r6
 8009082:	9603      	str	r6, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009084:	bf2c      	ite	cs
 8009086:	2600      	movcs	r6, #0
 8009088:	2601      	movcc	r6, #1
 800908a:	b136      	cbz	r6, 800909a <copy_Y+0x112>
 800908c:	b12d      	cbz	r5, 800909a <copy_Y+0x112>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800908e:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
 8009092:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8009096:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    int pixel_y = y_base + y;
 800909a:	f102 0e0a 	add.w	lr, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800909e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80090a2:	bf2c      	ite	cs
 80090a4:	2700      	movcs	r7, #0
 80090a6:	2701      	movcc	r7, #1
 80090a8:	b135      	cbz	r5, 80090b8 <copy_Y+0x130>
 80090aa:	b12f      	cbz	r7, 80090b8 <copy_Y+0x130>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80090ac:	ebce 1b0e 	rsb	fp, lr, lr, lsl #4
 80090b0:	eb0c 1b4b 	add.w	fp, ip, fp, lsl #5
 80090b4:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    int pixel_y = y_base + y;
 80090b8:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80090ba:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80090be:	bf2c      	ite	cs
 80090c0:	f04f 0b00 	movcs.w	fp, #0
 80090c4:	f04f 0b01 	movcc.w	fp, #1
 80090c8:	b11d      	cbz	r5, 80090d2 <copy_Y+0x14a>
 80090ca:	f1bb 0f00 	cmp.w	fp, #0
 80090ce:	f040 8149 	bne.w	8009364 <copy_Y+0x3dc>
 80090d2:	f1b8 0f00 	cmp.w	r8, #0
 80090d6:	f000 8136 	beq.w	8009346 <copy_Y+0x3be>
 80090da:	2c00      	cmp	r4, #0
 80090dc:	f040 812d 	bne.w	800933a <copy_Y+0x3b2>
 80090e0:	f1ba 0f00 	cmp.w	sl, #0
 80090e4:	d002      	beq.n	80090ec <copy_Y+0x164>
 80090e6:	2c00      	cmp	r4, #0
 80090e8:	f040 8117 	bne.w	800931a <copy_Y+0x392>
 80090ec:	b116      	cbz	r6, 80090f4 <copy_Y+0x16c>
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	f040 811b 	bne.w	800932a <copy_Y+0x3a2>
 80090f4:	b117      	cbz	r7, 80090fc <copy_Y+0x174>
 80090f6:	2c00      	cmp	r4, #0
 80090f8:	f040 8108 	bne.w	800930c <copy_Y+0x384>
 80090fc:	f1bb 0f00 	cmp.w	fp, #0
 8009100:	d006      	beq.n	8009110 <copy_Y+0x188>
 8009102:	b12c      	cbz	r4, 8009110 <copy_Y+0x188>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009104:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8009108:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 800910c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 2, 5, color);
    fill_pixel(buffer, x, y, 3, 4, color);
    fill_pixel(buffer, x, y, 3, 5, color);
    for (int i = 6; i < 12; i++) fill_pixel(buffer, x, y, 2, i, color);
    for (int i = 6; i < 12; i++) fill_pixel(buffer, x, y, 3, i, color);
}
 8009110:	b005      	add	sp, #20
 8009112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int pixel_y = y_base + y;
 8009116:	f102 0c03 	add.w	ip, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800911a:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800911e:	ea6f 090c 	mvn.w	r9, ip
 8009122:	bf2c      	ite	cs
 8009124:	f04f 0a00 	movcs.w	sl, #0
 8009128:	f04f 0a01 	movcc.w	sl, #1
 800912c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8009130:	f1b9 0f00 	cmp.w	r9, #0
 8009134:	f040 80cb 	bne.w	80092ce <copy_Y+0x346>
 8009138:	f1b8 0f00 	cmp.w	r8, #0
 800913c:	f000 8125 	beq.w	800938a <copy_Y+0x402>
 8009140:	f1ba 0f00 	cmp.w	sl, #0
 8009144:	f000 8121 	beq.w	800938a <copy_Y+0x402>
 8009148:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800914c:	f6bf af6d 	bge.w	800902a <copy_Y+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009150:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009154:	eb07 1546 	add.w	r5, r7, r6, lsl #5
 8009158:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800915c:	e117      	b.n	800938e <copy_Y+0x406>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800915e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009162:	bfb4      	ite	lt
 8009164:	f04f 0900 	movlt.w	r9, #0
 8009168:	f04f 0901 	movge.w	r9, #1
 800916c:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8009170:	bf2c      	ite	cs
 8009172:	2700      	movcs	r7, #0
 8009174:	2701      	movcc	r7, #1
 8009176:	f1b9 0f00 	cmp.w	r9, #0
 800917a:	d002      	beq.n	8009182 <copy_Y+0x1fa>
 800917c:	2e00      	cmp	r6, #0
 800917e:	f040 8149 	bne.w	8009414 <copy_Y+0x48c>
 8009182:	403d      	ands	r5, r7
 8009184:	f040 80f5 	bne.w	8009372 <copy_Y+0x3ea>
 8009188:	ea09 0507 	and.w	r5, r9, r7
 800918c:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8009190:	f6bf af18 	bge.w	8008fc4 <copy_Y+0x3c>
 8009194:	2d00      	cmp	r5, #0
 8009196:	f43f af15 	beq.w	8008fc4 <copy_Y+0x3c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800919a:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800919e:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80091a2:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80091a6:	e70d      	b.n	8008fc4 <copy_Y+0x3c>
    int pixel_y = y_base + y;
 80091a8:	1d57      	adds	r7, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80091aa:	ea6f 0807 	mvn.w	r8, r7
 80091ae:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80091b2:	f1b8 0f00 	cmp.w	r8, #0
 80091b6:	f040 809a 	bne.w	80092ee <copy_Y+0x366>
 80091ba:	ea1e 0e04 	ands.w	lr, lr, r4
 80091be:	f040 80f5 	bne.w	80093ac <copy_Y+0x424>
 80091c2:	ea08 0804 	and.w	r8, r8, r4
 80091c6:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80091ca:	da02      	bge.n	80091d2 <copy_Y+0x24a>
 80091cc:	f1b8 0f00 	cmp.w	r8, #0
 80091d0:	d154      	bne.n	800927c <copy_Y+0x2f4>
    int pixel_y = y_base + y;
 80091d2:	f102 0906 	add.w	r9, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80091d6:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 80091da:	bf2c      	ite	cs
 80091dc:	f04f 0800 	movcs.w	r8, #0
 80091e0:	f04f 0801 	movcc.w	r8, #1
 80091e4:	ea15 0608 	ands.w	r6, r5, r8
 80091e8:	d006      	beq.n	80091f8 <copy_Y+0x270>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80091ea:	46b0      	mov	r8, r6
 80091ec:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 80091f0:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 80091f4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    int pixel_y = y_base + y;
 80091f8:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80091fa:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80091fe:	9702      	str	r7, [sp, #8]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009200:	bf2c      	ite	cs
 8009202:	2600      	movcs	r6, #0
 8009204:	2601      	movcc	r6, #1
 8009206:	9600      	str	r6, [sp, #0]
 8009208:	402e      	ands	r6, r5
 800920a:	d006      	beq.n	800921a <copy_Y+0x292>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800920c:	9600      	str	r6, [sp, #0]
 800920e:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 8009212:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009216:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    int pixel_y = y_base + y;
 800921a:	f102 0708 	add.w	r7, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800921e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8009222:	9701      	str	r7, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009224:	bf2c      	ite	cs
 8009226:	f04f 0a00 	movcs.w	sl, #0
 800922a:	f04f 0a01 	movcc.w	sl, #1
 800922e:	ea15 060a 	ands.w	r6, r5, sl
 8009232:	f43f af21 	beq.w	8009078 <copy_Y+0xf0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009236:	46b2      	mov	sl, r6
 8009238:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 800923c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009240:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009244:	e718      	b.n	8009078 <copy_Y+0xf0>
 8009246:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    int pixel_y = y_base + y;
 800924a:	1d57      	adds	r7, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800924c:	fa1f fe83 	uxth.w	lr, r3
 8009250:	eb0c 1446 	add.w	r4, ip, r6, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009254:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009258:	ea4f 1646 	mov.w	r6, r6, lsl #5
 800925c:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009260:	f000 80b9 	beq.w	80093d6 <copy_Y+0x44e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009264:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009268:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800926c:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009270:	f080 80a7 	bcs.w	80093c2 <copy_Y+0x43a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009274:	440e      	add	r6, r1
 8009276:	4644      	mov	r4, r8
 8009278:	f820 e016 	strh.w	lr, [r0, r6, lsl #1]
 800927c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8009280:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 8009284:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    for (int i = 6; i < 12; i++) fill_pixel(buffer, x, y, 2, i, color);
 8009288:	e7a3      	b.n	80091d2 <copy_Y+0x24a>
 800928a:	bf00      	nop
 800928c:	240001b8 	.word	0x240001b8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009290:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009294:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009298:	b29e      	uxth	r6, r3
 800929a:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 800929e:	ea4f 1545 	mov.w	r5, r5, lsl #5
 80092a2:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80092a6:	f000 80a8 	beq.w	80093fa <copy_Y+0x472>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80092aa:	f50e 7ef0 	add.w	lr, lr, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80092ae:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80092b2:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80092b6:	f4bf ae85 	bcs.w	8008fc4 <copy_Y+0x3c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80092ba:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80092be:	4465      	add	r5, ip
 80092c0:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80092c4:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
 80092c8:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80092cc:	e67a      	b.n	8008fc4 <copy_Y+0x3c>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80092ce:	f1be 0f00 	cmp.w	lr, #0
 80092d2:	f43f af31 	beq.w	8009138 <copy_Y+0x1b0>
 80092d6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80092da:	f6bf aea6 	bge.w	800902a <copy_Y+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80092de:	f44f 76f0 	mov.w	r6, #480	@ 0x1e0
 80092e2:	46d1      	mov	r9, sl
 80092e4:	fb06 550c 	mla	r5, r6, ip, r5
 80092e8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80092ec:	e04f      	b.n	800938e <copy_Y+0x406>
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	f43f af63 	beq.w	80091ba <copy_Y+0x232>
 80092f4:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80092f8:	f6bf aeb3 	bge.w	8009062 <copy_Y+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80092fc:	f44f 76f0 	mov.w	r6, #480	@ 0x1e0
 8009300:	46a0      	mov	r8, r4
 8009302:	fb06 c607 	mla	r6, r6, r7, ip
 8009306:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800930a:	e75c      	b.n	80091c6 <copy_Y+0x23e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800930c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8009310:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 8009314:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8009318:	e6f0      	b.n	80090fc <copy_Y+0x174>
 800931a:	9d01      	ldr	r5, [sp, #4]
 800931c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8009320:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8009324:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8009328:	e6e0      	b.n	80090ec <copy_Y+0x164>
 800932a:	9d03      	ldr	r5, [sp, #12]
 800932c:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 8009330:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8009334:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009338:	e6dc      	b.n	80090f4 <copy_Y+0x16c>
 800933a:	ebc9 1509 	rsb	r5, r9, r9, lsl #4
 800933e:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8009342:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009346:	2c00      	cmp	r4, #0
 8009348:	f43f aeca 	beq.w	80090e0 <copy_Y+0x158>
 800934c:	9d00      	ldr	r5, [sp, #0]
 800934e:	2d00      	cmp	r5, #0
 8009350:	f43f aec6 	beq.w	80090e0 <copy_Y+0x158>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009354:	9d02      	ldr	r5, [sp, #8]
 8009356:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800935a:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800935e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8009362:	e6bd      	b.n	80090e0 <copy_Y+0x158>
 8009364:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8009368:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 800936c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8009370:	e6af      	b.n	80090d2 <copy_Y+0x14a>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009372:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8009376:	f6bf af09 	bge.w	800918c <copy_Y+0x204>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800937a:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800937e:	464d      	mov	r5, r9
 8009380:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009384:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009388:	e700      	b.n	800918c <copy_Y+0x204>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800938a:	ea09 090a 	and.w	r9, r9, sl
 800938e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009392:	f6bf ae4a 	bge.w	800902a <copy_Y+0xa2>
 8009396:	f1b9 0f00 	cmp.w	r9, #0
 800939a:	f43f ae46 	beq.w	800902a <copy_Y+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800939e:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80093a2:	eb07 1c4c 	add.w	ip, r7, ip, lsl #5
 80093a6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80093aa:	e63e      	b.n	800902a <copy_Y+0xa2>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80093ac:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 80093b0:	db09      	blt.n	80093c6 <copy_Y+0x43e>
    int pixel_y = y_base + y;
 80093b2:	4674      	mov	r4, lr
 80093b4:	f102 0906 	add.w	r9, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80093b8:	e655      	b.n	8009066 <copy_Y+0xde>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80093ba:	443e      	add	r6, r7
 80093bc:	f820 e016 	strh.w	lr, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80093c0:	e7ed      	b.n	800939e <copy_Y+0x416>
 80093c2:	2400      	movs	r4, #0
    for (int i = 6; i < 12; i++) fill_pixel(buffer, x, y, 2, i, color);
 80093c4:	e705      	b.n	80091d2 <copy_Y+0x24a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80093c6:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80093ca:	4674      	mov	r4, lr
 80093cc:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 80093d0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80093d4:	e6f7      	b.n	80091c6 <copy_Y+0x23e>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80093d6:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80093da:	d217      	bcs.n	800940c <copy_Y+0x484>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80093dc:	4e13      	ldr	r6, [pc, #76]	@ (800942c <copy_Y+0x4a4>)
 80093de:	4644      	mov	r4, r8
 80093e0:	440e      	add	r6, r1
 80093e2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80093e6:	e6f4      	b.n	80091d2 <copy_Y+0x24a>
 80093e8:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80093ec:	f4bf ae1d 	bcs.w	800902a <copy_Y+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80093f0:	4d0e      	ldr	r5, [pc, #56]	@ (800942c <copy_Y+0x4a4>)
 80093f2:	443d      	add	r5, r7
 80093f4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80093f8:	e617      	b.n	800902a <copy_Y+0xa2>
 80093fa:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80093fe:	f4bf ade1 	bcs.w	8008fc4 <copy_Y+0x3c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009402:	4d0a      	ldr	r5, [pc, #40]	@ (800942c <copy_Y+0x4a4>)
 8009404:	4465      	add	r5, ip
 8009406:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800940a:	e5db      	b.n	8008fc4 <copy_Y+0x3c>
 800940c:	2400      	movs	r4, #0
    int pixel_y = y_base + y;
 800940e:	f240 1911 	movw	r9, #273	@ 0x111
 8009412:	e628      	b.n	8009066 <copy_Y+0xde>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009414:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8009418:	f6bf add4 	bge.w	8008fc4 <copy_Y+0x3c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800941c:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8009420:	463d      	mov	r5, r7
 8009422:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8009426:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800942a:	e6af      	b.n	800918c <copy_Y+0x204>
 800942c:	0001fc20 	.word	0x0001fc20

08009430 <copy_Z>:

void copy_Z(uint16_t* buffer, int x, int y, uint32_t color)
{
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8009434:	4cac      	ldr	r4, [pc, #688]	@ (80096e8 <copy_Z+0x2b8>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009436:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800943a:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
{
 800943e:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 8009440:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009442:	bf2c      	ite	cs
 8009444:	2500      	movcs	r5, #0
 8009446:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009448:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    int pixel_x = x_base + x + offset;
 800944c:	eb01 0904 	add.w	r9, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009450:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 8009454:	bf2c      	ite	cs
 8009456:	f04f 0a00 	movcs.w	sl, #0
 800945a:	f04f 0a01 	movcc.w	sl, #1
 800945e:	b11d      	cbz	r5, 8009468 <copy_Z+0x38>
 8009460:	f1ba 0f00 	cmp.w	sl, #0
 8009464:	f040 8102 	bne.w	800966c <copy_Z+0x23c>
    int pixel_x = x_base + x + offset;
 8009468:	f101 0801 	add.w	r8, r1, #1
 800946c:	44a0      	add	r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800946e:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8009472:	bf2c      	ite	cs
 8009474:	2600      	movcs	r6, #0
 8009476:	2601      	movcc	r6, #1
 8009478:	9603      	str	r6, [sp, #12]
 800947a:	b115      	cbz	r5, 8009482 <copy_Z+0x52>
 800947c:	2e00      	cmp	r6, #0
 800947e:	f040 8109 	bne.w	8009694 <copy_Z+0x264>
    int pixel_x = x_base + x + offset;
 8009482:	1c8e      	adds	r6, r1, #2
 8009484:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009486:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800948a:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800948c:	bf2c      	ite	cs
 800948e:	2700      	movcs	r7, #0
 8009490:	2701      	movcc	r7, #1
 8009492:	9702      	str	r7, [sp, #8]
 8009494:	b115      	cbz	r5, 800949c <copy_Z+0x6c>
 8009496:	2f00      	cmp	r7, #0
 8009498:	f040 80f7 	bne.w	800968a <copy_Z+0x25a>
    int pixel_x = x_base + x + offset;
 800949c:	f101 0e03 	add.w	lr, r1, #3
 80094a0:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80094a2:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80094a6:	bf2c      	ite	cs
 80094a8:	2700      	movcs	r7, #0
 80094aa:	2701      	movcc	r7, #1
 80094ac:	9701      	str	r7, [sp, #4]
 80094ae:	b115      	cbz	r5, 80094b6 <copy_Z+0x86>
 80094b0:	2f00      	cmp	r7, #0
 80094b2:	f040 80e5 	bne.w	8009680 <copy_Z+0x250>
    int pixel_x = x_base + x + offset;
 80094b6:	1d0f      	adds	r7, r1, #4
 80094b8:	193e      	adds	r6, r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80094ba:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80094be:	bf2c      	ite	cs
 80094c0:	2700      	movcs	r7, #0
 80094c2:	2701      	movcc	r7, #1
 80094c4:	b115      	cbz	r5, 80094cc <copy_Z+0x9c>
 80094c6:	2f00      	cmp	r7, #0
 80094c8:	f040 80d5 	bne.w	8009676 <copy_Z+0x246>
    int pixel_x = x_base + x + offset;
 80094cc:	3105      	adds	r1, #5
 80094ce:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80094d0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80094d4:	bf2c      	ite	cs
 80094d6:	f04f 0b00 	movcs.w	fp, #0
 80094da:	f04f 0b01 	movcc.w	fp, #1
 80094de:	f1bb 0f00 	cmp.w	fp, #0
 80094e2:	d002      	beq.n	80094ea <copy_Z+0xba>
 80094e4:	2d00      	cmp	r5, #0
 80094e6:	f040 80da 	bne.w	800969e <copy_Z+0x26e>
 80094ea:	f102 040b 	add.w	r4, r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80094ee:	f50c 5ca5 	add.w	ip, ip, #5280	@ 0x14a0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80094f2:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 80094f6:	bf2c      	ite	cs
 80094f8:	2400      	movcs	r4, #0
 80094fa:	2401      	movcc	r4, #1
 80094fc:	b1c4      	cbz	r4, 8009530 <copy_Z+0x100>
 80094fe:	f1ba 0f00 	cmp.w	sl, #0
 8009502:	f040 80d1 	bne.w	80096a8 <copy_Z+0x278>
 8009506:	b19c      	cbz	r4, 8009530 <copy_Z+0x100>
 8009508:	9d03      	ldr	r5, [sp, #12]
 800950a:	2d00      	cmp	r5, #0
 800950c:	f040 80df 	bne.w	80096ce <copy_Z+0x29e>
 8009510:	b174      	cbz	r4, 8009530 <copy_Z+0x100>
 8009512:	9d02      	ldr	r5, [sp, #8]
 8009514:	2d00      	cmp	r5, #0
 8009516:	f040 80d5 	bne.w	80096c4 <copy_Z+0x294>
 800951a:	b14c      	cbz	r4, 8009530 <copy_Z+0x100>
 800951c:	9d01      	ldr	r5, [sp, #4]
 800951e:	2d00      	cmp	r5, #0
 8009520:	f040 80c7 	bne.w	80096b2 <copy_Z+0x282>
 8009524:	b124      	cbz	r4, 8009530 <copy_Z+0x100>
 8009526:	b11f      	cbz	r7, 8009530 <copy_Z+0x100>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009528:	eb0c 0506 	add.w	r5, ip, r6
 800952c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009530:	f1bb 0f00 	cmp.w	fp, #0
 8009534:	d002      	beq.n	800953c <copy_Z+0x10c>
 8009536:	2c00      	cmp	r4, #0
 8009538:	f040 80c0 	bne.w	80096bc <copy_Z+0x28c>
 800953c:	1c54      	adds	r4, r2, #1
 800953e:	f100 8085 	bmi.w	800964c <copy_Z+0x21c>
 8009542:	f1bb 0f00 	cmp.w	fp, #0
 8009546:	f000 8081 	beq.w	800964c <copy_Z+0x21c>
 800954a:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800954e:	f280 8083 	bge.w	8009658 <copy_Z+0x228>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009552:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009556:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800955a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800955e:	1c94      	adds	r4, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009560:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8009564:	da05      	bge.n	8009572 <copy_Z+0x142>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009566:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800956a:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 800956e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009572:	1cd1      	adds	r1, r2, #3
 8009574:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8009578:	d206      	bcs.n	8009588 <copy_Z+0x158>
 800957a:	b12f      	cbz	r7, 8009588 <copy_Z+0x158>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800957c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8009580:	eb06 1741 	add.w	r7, r6, r1, lsl #5
 8009584:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009588:	1d11      	adds	r1, r2, #4
 800958a:	f100 80a5 	bmi.w	80096d8 <copy_Z+0x2a8>
 800958e:	9c01      	ldr	r4, [sp, #4]
 8009590:	2c00      	cmp	r4, #0
 8009592:	f000 80a1 	beq.w	80096d8 <copy_Z+0x2a8>
 8009596:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800959a:	f280 80a7 	bge.w	80096ec <copy_Z+0x2bc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800959e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80095a2:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80095a6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 80095aa:	1d51      	adds	r1, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80095ac:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80095b0:	da05      	bge.n	80095be <copy_Z+0x18e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80095b2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80095b6:	eb0e 1e41 	add.w	lr, lr, r1, lsl #5
 80095ba:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80095be:	1d91      	adds	r1, r2, #6
 80095c0:	d44e      	bmi.n	8009660 <copy_Z+0x230>
 80095c2:	9c02      	ldr	r4, [sp, #8]
 80095c4:	2c00      	cmp	r4, #0
 80095c6:	d04b      	beq.n	8009660 <copy_Z+0x230>
 80095c8:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80095cc:	f280 8092 	bge.w	80096f4 <copy_Z+0x2c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80095d0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80095d4:	9c00      	ldr	r4, [sp, #0]
 80095d6:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 80095da:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 80095de:	1dd1      	adds	r1, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80095e0:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80095e4:	da06      	bge.n	80095f4 <copy_Z+0x1c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80095e6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80095ea:	9c00      	ldr	r4, [sp, #0]
 80095ec:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 80095f0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80095f4:	f112 0f08 	cmn.w	r2, #8
 80095f8:	db0c      	blt.n	8009614 <copy_Z+0x1e4>
 80095fa:	9903      	ldr	r1, [sp, #12]
 80095fc:	b151      	cbz	r1, 8009614 <copy_Z+0x1e4>
 80095fe:	f5b2 7f84 	cmp.w	r2, #264	@ 0x108
 8009602:	da20      	bge.n	8009646 <copy_Z+0x216>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009604:	f102 0108 	add.w	r1, r2, #8
 8009608:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800960c:	eb08 1141 	add.w	r1, r8, r1, lsl #5
 8009610:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009614:	f112 0109 	adds.w	r1, r2, #9
 8009618:	d472      	bmi.n	8009700 <copy_Z+0x2d0>
 800961a:	f1ba 0f00 	cmp.w	sl, #0
 800961e:	d06f      	beq.n	8009700 <copy_Z+0x2d0>
 8009620:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8009624:	da0f      	bge.n	8009646 <copy_Z+0x216>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009626:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    int pixel_y = y_base + y;
 800962a:	320a      	adds	r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800962c:	eb09 1141 	add.w	r1, r9, r1, lsl #5
 8009630:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009634:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8009638:	da05      	bge.n	8009646 <copy_Z+0x216>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800963a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800963e:	eb09 1242 	add.w	r2, r9, r2, lsl #5
 8009642:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 2, 6, color);
    fill_pixel(buffer, x, y, 2, 7, color);
    fill_pixel(buffer, x, y, 1, 8, color);
    fill_pixel(buffer, x, y, 0, 9, color);
    fill_pixel(buffer, x, y, 0, 10, color);
}
 8009646:	b005      	add	sp, #20
 8009648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800964c:	1c94      	adds	r4, r2, #2
 800964e:	d490      	bmi.n	8009572 <copy_Z+0x142>
 8009650:	f1bb 0f00 	cmp.w	fp, #0
 8009654:	d08d      	beq.n	8009572 <copy_Z+0x142>
 8009656:	e783      	b.n	8009560 <copy_Z+0x130>
 8009658:	9900      	ldr	r1, [sp, #0]
 800965a:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800965e:	d349      	bcc.n	80096f4 <copy_Z+0x2c4>
 8009660:	1dd1      	adds	r1, r2, #7
 8009662:	d4c7      	bmi.n	80095f4 <copy_Z+0x1c4>
 8009664:	9c02      	ldr	r4, [sp, #8]
 8009666:	2c00      	cmp	r4, #0
 8009668:	d0c4      	beq.n	80095f4 <copy_Z+0x1c4>
 800966a:	e7b9      	b.n	80095e0 <copy_Z+0x1b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800966c:	eb0c 0609 	add.w	r6, ip, r9
 8009670:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009674:	e6f8      	b.n	8009468 <copy_Z+0x38>
 8009676:	eb0c 0b06 	add.w	fp, ip, r6
 800967a:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800967e:	e725      	b.n	80094cc <copy_Z+0x9c>
 8009680:	eb0c 070e 	add.w	r7, ip, lr
 8009684:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8009688:	e715      	b.n	80094b6 <copy_Z+0x86>
 800968a:	eb0c 0706 	add.w	r7, ip, r6
 800968e:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8009692:	e703      	b.n	800949c <copy_Z+0x6c>
 8009694:	eb0c 0608 	add.w	r6, ip, r8
 8009698:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800969c:	e6f1      	b.n	8009482 <copy_Z+0x52>
 800969e:	eb01 040c 	add.w	r4, r1, ip
 80096a2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80096a6:	e720      	b.n	80094ea <copy_Z+0xba>
 80096a8:	eb0c 0509 	add.w	r5, ip, r9
 80096ac:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80096b0:	e729      	b.n	8009506 <copy_Z+0xd6>
 80096b2:	eb0c 050e 	add.w	r5, ip, lr
 80096b6:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80096ba:	e733      	b.n	8009524 <copy_Z+0xf4>
 80096bc:	448c      	add	ip, r1
 80096be:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80096c2:	e73b      	b.n	800953c <copy_Z+0x10c>
 80096c4:	9d00      	ldr	r5, [sp, #0]
 80096c6:	4465      	add	r5, ip
 80096c8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80096cc:	e725      	b.n	800951a <copy_Z+0xea>
 80096ce:	eb0c 0508 	add.w	r5, ip, r8
 80096d2:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80096d6:	e71b      	b.n	8009510 <copy_Z+0xe0>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80096d8:	1d51      	adds	r1, r2, #5
 80096da:	f53f af70 	bmi.w	80095be <copy_Z+0x18e>
 80096de:	9c01      	ldr	r4, [sp, #4]
 80096e0:	2c00      	cmp	r4, #0
 80096e2:	f43f af6c 	beq.w	80095be <copy_Z+0x18e>
 80096e6:	e761      	b.n	80095ac <copy_Z+0x17c>
 80096e8:	240001b8 	.word	0x240001b8
 80096ec:	9900      	ldr	r1, [sp, #0]
 80096ee:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80096f2:	d20d      	bcs.n	8009710 <copy_Z+0x2e0>
 80096f4:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80096f8:	d3a5      	bcc.n	8009646 <copy_Z+0x216>
 80096fa:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 80096fe:	d3a2      	bcc.n	8009646 <copy_Z+0x216>
 8009700:	320a      	adds	r2, #10
 8009702:	d4a0      	bmi.n	8009646 <copy_Z+0x216>
 8009704:	f1ba 0f00 	cmp.w	sl, #0
 8009708:	d194      	bne.n	8009634 <copy_Z+0x204>
}
 800970a:	b005      	add	sp, #20
 800970c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009710:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8009714:	d397      	bcc.n	8009646 <copy_Z+0x216>
 8009716:	e77d      	b.n	8009614 <copy_Z+0x1e4>

08009718 <copy_0>:
}

//================================ NUMBER -> BUFFER =====================================================

void copy_0(uint16_t* buffer, int x, int y, uint32_t color)
{
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800971c:	4c91      	ldr	r4, [pc, #580]	@ (8009964 <copy_0+0x24c>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800971e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8009722:	b097      	sub	sp, #92	@ 0x5c
    int pixel_x = x_base + x + offset;
 8009724:	6825      	ldr	r5, [r4, #0]
 8009726:	f101 0401 	add.w	r4, r1, #1
 800972a:	eb04 0705 	add.w	r7, r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800972e:	bf2c      	ite	cs
 8009730:	2400      	movcs	r4, #0
 8009732:	2401      	movcc	r4, #1
 8009734:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8009738:	9708      	str	r7, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800973a:	bf2c      	ite	cs
 800973c:	2600      	movcs	r6, #0
 800973e:	2601      	movcc	r6, #1
 8009740:	9601      	str	r6, [sp, #4]
 8009742:	b114      	cbz	r4, 800974a <copy_0+0x32>
 8009744:	2e00      	cmp	r6, #0
 8009746:	f040 8159 	bne.w	80099fc <copy_0+0x2e4>
    int pixel_x = x_base + x + offset;
 800974a:	1c8e      	adds	r6, r1, #2
 800974c:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800974e:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8009752:	9709      	str	r7, [sp, #36]	@ 0x24
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009754:	bf2c      	ite	cs
 8009756:	2600      	movcs	r6, #0
 8009758:	2601      	movcc	r6, #1
 800975a:	9602      	str	r6, [sp, #8]
 800975c:	b114      	cbz	r4, 8009764 <copy_0+0x4c>
 800975e:	2e00      	cmp	r6, #0
 8009760:	f040 8145 	bne.w	80099ee <copy_0+0x2d6>
    int pixel_x = x_base + x + offset;
 8009764:	1cce      	adds	r6, r1, #3
 8009766:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009768:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800976c:	970a      	str	r7, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800976e:	bf2c      	ite	cs
 8009770:	2600      	movcs	r6, #0
 8009772:	2601      	movcc	r6, #1
 8009774:	9603      	str	r6, [sp, #12]
 8009776:	b114      	cbz	r4, 800977e <copy_0+0x66>
 8009778:	2e00      	cmp	r6, #0
 800977a:	f040 8131 	bne.w	80099e0 <copy_0+0x2c8>
    int pixel_x = x_base + x + offset;
 800977e:	1d0e      	adds	r6, r1, #4
 8009780:	442e      	add	r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009782:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8009786:	9607      	str	r6, [sp, #28]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009788:	bf2c      	ite	cs
 800978a:	2700      	movcs	r7, #0
 800978c:	2701      	movcc	r7, #1
 800978e:	9700      	str	r7, [sp, #0]
 8009790:	b117      	cbz	r7, 8009798 <copy_0+0x80>
 8009792:	2c00      	cmp	r4, #0
 8009794:	f040 811d 	bne.w	80099d2 <copy_0+0x2ba>
    int pixel_x = x_base + x + offset;
 8009798:	eb01 0b05 	add.w	fp, r1, r5
    int pixel_y = y_base + y;
 800979c:	f102 0801 	add.w	r8, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80097a0:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 80097a4:	bf2c      	ite	cs
 80097a6:	2400      	movcs	r4, #0
 80097a8:	2401      	movcc	r4, #1
 80097aa:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80097ae:	bf2c      	ite	cs
 80097b0:	2600      	movcs	r6, #0
 80097b2:	2601      	movcc	r6, #1
 80097b4:	9606      	str	r6, [sp, #24]
 80097b6:	b114      	cbz	r4, 80097be <copy_0+0xa6>
 80097b8:	2e00      	cmp	r6, #0
 80097ba:	f040 8126 	bne.w	8009a0a <copy_0+0x2f2>
    int pixel_y = y_base + y;
 80097be:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80097c0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80097c4:	9704      	str	r7, [sp, #16]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80097c6:	bf2c      	ite	cs
 80097c8:	2600      	movcs	r6, #0
 80097ca:	2601      	movcc	r6, #1
 80097cc:	960b      	str	r6, [sp, #44]	@ 0x2c
 80097ce:	b114      	cbz	r4, 80097d6 <copy_0+0xbe>
 80097d0:	2e00      	cmp	r6, #0
 80097d2:	f040 813c 	bne.w	8009a4e <copy_0+0x336>
    int pixel_y = y_base + y;
 80097d6:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80097d8:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80097dc:	9705      	str	r7, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80097de:	bf2c      	ite	cs
 80097e0:	2600      	movcs	r6, #0
 80097e2:	2601      	movcc	r6, #1
 80097e4:	960c      	str	r6, [sp, #48]	@ 0x30
 80097e6:	b114      	cbz	r4, 80097ee <copy_0+0xd6>
 80097e8:	2e00      	cmp	r6, #0
 80097ea:	f040 8188 	bne.w	8009afe <copy_0+0x3e6>
    int pixel_y = y_base + y;
 80097ee:	f102 0e04 	add.w	lr, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80097f2:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80097f6:	bf2c      	ite	cs
 80097f8:	2600      	movcs	r6, #0
 80097fa:	2601      	movcc	r6, #1
 80097fc:	960d      	str	r6, [sp, #52]	@ 0x34
 80097fe:	b114      	cbz	r4, 8009806 <copy_0+0xee>
 8009800:	2e00      	cmp	r6, #0
 8009802:	f040 8175 	bne.w	8009af0 <copy_0+0x3d8>
    int pixel_y = y_base + y;
 8009806:	f102 0c05 	add.w	ip, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800980a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800980e:	bf2c      	ite	cs
 8009810:	2600      	movcs	r6, #0
 8009812:	2601      	movcc	r6, #1
 8009814:	960e      	str	r6, [sp, #56]	@ 0x38
 8009816:	b114      	cbz	r4, 800981e <copy_0+0x106>
 8009818:	2e00      	cmp	r6, #0
 800981a:	f040 818d 	bne.w	8009b38 <copy_0+0x420>
    int pixel_y = y_base + y;
 800981e:	f102 0906 	add.w	r9, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009822:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8009826:	bf2c      	ite	cs
 8009828:	2600      	movcs	r6, #0
 800982a:	2601      	movcc	r6, #1
 800982c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800982e:	b114      	cbz	r4, 8009836 <copy_0+0x11e>
 8009830:	2e00      	cmp	r6, #0
 8009832:	f040 817a 	bne.w	8009b2a <copy_0+0x412>
    int pixel_y = y_base + y;
 8009836:	1dd6      	adds	r6, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009838:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800983c:	9613      	str	r6, [sp, #76]	@ 0x4c
 800983e:	bf2c      	ite	cs
 8009840:	2700      	movcs	r7, #0
 8009842:	2701      	movcc	r7, #1
 8009844:	9710      	str	r7, [sp, #64]	@ 0x40
 8009846:	b114      	cbz	r4, 800984e <copy_0+0x136>
 8009848:	2f00      	cmp	r7, #0
 800984a:	f040 8166 	bne.w	8009b1a <copy_0+0x402>
    int pixel_y = y_base + y;
 800984e:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009852:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8009856:	9614      	str	r6, [sp, #80]	@ 0x50
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009858:	bf2c      	ite	cs
 800985a:	2700      	movcs	r7, #0
 800985c:	2701      	movcc	r7, #1
 800985e:	9711      	str	r7, [sp, #68]	@ 0x44
 8009860:	b114      	cbz	r4, 8009868 <copy_0+0x150>
 8009862:	2f00      	cmp	r7, #0
 8009864:	f040 8152 	bne.w	8009b0c <copy_0+0x3f4>
    int pixel_y = y_base + y;
 8009868:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800986c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8009870:	9615      	str	r6, [sp, #84]	@ 0x54
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009872:	bf2c      	ite	cs
 8009874:	2700      	movcs	r7, #0
 8009876:	2701      	movcc	r7, #1
 8009878:	9712      	str	r7, [sp, #72]	@ 0x48
 800987a:	b114      	cbz	r4, 8009882 <copy_0+0x16a>
 800987c:	2f00      	cmp	r7, #0
 800987e:	f040 80f4 	bne.w	8009a6a <copy_0+0x352>
    int pixel_y = y_base + y;
 8009882:	f102 0a0a 	add.w	sl, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009886:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800988a:	bf2c      	ite	cs
 800988c:	2600      	movcs	r6, #0
 800988e:	2601      	movcc	r6, #1
 8009890:	4637      	mov	r7, r6
 8009892:	b116      	cbz	r6, 800989a <copy_0+0x182>
 8009894:	2c00      	cmp	r4, #0
 8009896:	f040 80e1 	bne.w	8009a5c <copy_0+0x344>
    int pixel_y = y_base + y;
 800989a:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800989c:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80098a0:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80098a4:	bf2c      	ite	cs
 80098a6:	2200      	movcs	r2, #0
 80098a8:	2201      	movcc	r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80098aa:	0164      	lsls	r4, r4, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80098ac:	b182      	cbz	r2, 80098d0 <copy_0+0x1b8>
 80098ae:	9e01      	ldr	r6, [sp, #4]
 80098b0:	2e00      	cmp	r6, #0
 80098b2:	f040 80bc 	bne.w	8009a2e <copy_0+0x316>
 80098b6:	b15a      	cbz	r2, 80098d0 <copy_0+0x1b8>
 80098b8:	9e02      	ldr	r6, [sp, #8]
 80098ba:	2e00      	cmp	r6, #0
 80098bc:	f040 80b1 	bne.w	8009a22 <copy_0+0x30a>
 80098c0:	b132      	cbz	r2, 80098d0 <copy_0+0x1b8>
 80098c2:	9e03      	ldr	r6, [sp, #12]
 80098c4:	b126      	cbz	r6, 80098d0 <copy_0+0x1b8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80098c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80098c8:	eb04 0b06 	add.w	fp, r4, r6
 80098cc:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80098d0:	9e00      	ldr	r6, [sp, #0]
 80098d2:	b116      	cbz	r6, 80098da <copy_0+0x1c2>
 80098d4:	2a00      	cmp	r2, #0
 80098d6:	f040 809f 	bne.w	8009a18 <copy_0+0x300>
    int pixel_x = x_base + x + offset;
 80098da:	3105      	adds	r1, #5
 80098dc:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80098de:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80098e2:	bf2c      	ite	cs
 80098e4:	2200      	movcs	r2, #0
 80098e6:	2201      	movcc	r2, #1
 80098e8:	2a00      	cmp	r2, #0
 80098ea:	d030      	beq.n	800994e <copy_0+0x236>
 80098ec:	9c06      	ldr	r4, [sp, #24]
 80098ee:	2c00      	cmp	r4, #0
 80098f0:	f040 80a6 	bne.w	8009a40 <copy_0+0x328>
 80098f4:	b35a      	cbz	r2, 800994e <copy_0+0x236>
 80098f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80098f8:	2c00      	cmp	r4, #0
 80098fa:	f040 80bd 	bne.w	8009a78 <copy_0+0x360>
 80098fe:	b332      	cbz	r2, 800994e <copy_0+0x236>
 8009900:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8009902:	2c00      	cmp	r4, #0
 8009904:	f040 80dc 	bne.w	8009ac0 <copy_0+0x3a8>
 8009908:	b30a      	cbz	r2, 800994e <copy_0+0x236>
 800990a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800990c:	2c00      	cmp	r4, #0
 800990e:	f040 80d0 	bne.w	8009ab2 <copy_0+0x39a>
 8009912:	b1e2      	cbz	r2, 800994e <copy_0+0x236>
 8009914:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8009916:	2c00      	cmp	r4, #0
 8009918:	f040 80c4 	bne.w	8009aa4 <copy_0+0x38c>
 800991c:	b1ba      	cbz	r2, 800994e <copy_0+0x236>
 800991e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8009920:	2c00      	cmp	r4, #0
 8009922:	f040 80b8 	bne.w	8009a96 <copy_0+0x37e>
 8009926:	b192      	cbz	r2, 800994e <copy_0+0x236>
 8009928:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800992a:	2c00      	cmp	r4, #0
 800992c:	f040 80d8 	bne.w	8009ae0 <copy_0+0x3c8>
 8009930:	b16a      	cbz	r2, 800994e <copy_0+0x236>
 8009932:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009934:	2c00      	cmp	r4, #0
 8009936:	f040 80cb 	bne.w	8009ad0 <copy_0+0x3b8>
 800993a:	b142      	cbz	r2, 800994e <copy_0+0x236>
 800993c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800993e:	b134      	cbz	r4, 800994e <copy_0+0x236>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009940:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8009942:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009946:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800994a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800994e:	b117      	cbz	r7, 8009956 <copy_0+0x23e>
 8009950:	2a00      	cmp	r2, #0
 8009952:	f040 8099 	bne.w	8009a88 <copy_0+0x370>
 8009956:	9904      	ldr	r1, [sp, #16]
 8009958:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800995c:	d204      	bcs.n	8009968 <copy_0+0x250>
 800995e:	9a00      	ldr	r2, [sp, #0]
 8009960:	bb7a      	cbnz	r2, 80099c2 <copy_0+0x2aa>
 8009962:	e001      	b.n	8009968 <copy_0+0x250>
 8009964:	240001b8 	.word	0x240001b8
 8009968:	9905      	ldr	r1, [sp, #20]
 800996a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800996e:	d201      	bcs.n	8009974 <copy_0+0x25c>
 8009970:	9a03      	ldr	r2, [sp, #12]
 8009972:	b9f2      	cbnz	r2, 80099b2 <copy_0+0x29a>
 8009974:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8009978:	d201      	bcs.n	800997e <copy_0+0x266>
 800997a:	9a02      	ldr	r2, [sp, #8]
 800997c:	b98a      	cbnz	r2, 80099a2 <copy_0+0x28a>
 800997e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009982:	d201      	bcs.n	8009988 <copy_0+0x270>
 8009984:	9a01      	ldr	r2, [sp, #4]
 8009986:	b912      	cbnz	r2, 800998e <copy_0+0x276>
    // Diagonal line to distinguish from O
    fill_pixel(buffer, x, y, 4, 2, color);
    fill_pixel(buffer, x, y, 3, 3, color);
    fill_pixel(buffer, x, y, 2, 4, color);
    fill_pixel(buffer, x, y, 1, 5, color);
}
 8009988:	b017      	add	sp, #92	@ 0x5c
 800998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800998e:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009992:	9a08      	ldr	r2, [sp, #32]
 8009994:	eb02 124c 	add.w	r2, r2, ip, lsl #5
 8009998:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800999c:	b017      	add	sp, #92	@ 0x5c
 800999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80099a2:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 80099a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099a8:	eb02 124e 	add.w	r2, r2, lr, lsl #5
 80099ac:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80099b0:	e7e5      	b.n	800997e <copy_0+0x266>
 80099b2:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 80099b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099b8:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 80099bc:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80099c0:	e7d8      	b.n	8009974 <copy_0+0x25c>
 80099c2:	ebc1 1701 	rsb	r7, r1, r1, lsl #4
 80099c6:	9a07      	ldr	r2, [sp, #28]
 80099c8:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 80099cc:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80099d0:	e7ca      	b.n	8009968 <copy_0+0x250>
 80099d2:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 80099d6:	eb06 1444 	add.w	r4, r6, r4, lsl #5
 80099da:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80099de:	e6db      	b.n	8009798 <copy_0+0x80>
 80099e0:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80099e4:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 80099e8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80099ec:	e6c7      	b.n	800977e <copy_0+0x66>
 80099ee:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80099f2:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 80099f6:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80099fa:	e6b3      	b.n	8009764 <copy_0+0x4c>
 80099fc:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8009a00:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8009a04:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009a08:	e69f      	b.n	800974a <copy_0+0x32>
 8009a0a:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8009a0e:	eb0b 1646 	add.w	r6, fp, r6, lsl #5
 8009a12:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009a16:	e6d2      	b.n	80097be <copy_0+0xa6>
 8009a18:	9a07      	ldr	r2, [sp, #28]
 8009a1a:	4414      	add	r4, r2
 8009a1c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009a20:	e75b      	b.n	80098da <copy_0+0x1c2>
 8009a22:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009a24:	eb04 0b06 	add.w	fp, r4, r6
 8009a28:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8009a2c:	e748      	b.n	80098c0 <copy_0+0x1a8>
 8009a2e:	9e08      	ldr	r6, [sp, #32]
 8009a30:	eb04 0b06 	add.w	fp, r4, r6
 8009a34:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	f47f af3d 	bne.w	80098b8 <copy_0+0x1a0>
 8009a3e:	e747      	b.n	80098d0 <copy_0+0x1b8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009a40:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8009a44:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 8009a48:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8009a4c:	e752      	b.n	80098f4 <copy_0+0x1dc>
 8009a4e:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 8009a52:	eb0b 1646 	add.w	r6, fp, r6, lsl #5
 8009a56:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009a5a:	e6bc      	b.n	80097d6 <copy_0+0xbe>
 8009a5c:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 8009a60:	eb0b 1b44 	add.w	fp, fp, r4, lsl #5
 8009a64:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8009a68:	e717      	b.n	800989a <copy_0+0x182>
 8009a6a:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 8009a6e:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8009a72:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8009a76:	e704      	b.n	8009882 <copy_0+0x16a>
 8009a78:	9c04      	ldr	r4, [sp, #16]
 8009a7a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009a7e:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009a82:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009a86:	e73a      	b.n	80098fe <copy_0+0x1e6>
 8009a88:	ebca 120a 	rsb	r2, sl, sl, lsl #4
 8009a8c:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8009a90:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8009a94:	e75f      	b.n	8009956 <copy_0+0x23e>
 8009a96:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8009a9a:	eb01 1949 	add.w	r9, r1, r9, lsl #5
 8009a9e:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8009aa2:	e740      	b.n	8009926 <copy_0+0x20e>
 8009aa4:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 8009aa8:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009aac:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009ab0:	e734      	b.n	800991c <copy_0+0x204>
 8009ab2:	ebce 140e 	rsb	r4, lr, lr, lsl #4
 8009ab6:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009aba:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009abe:	e728      	b.n	8009912 <copy_0+0x1fa>
 8009ac0:	9c05      	ldr	r4, [sp, #20]
 8009ac2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009ac6:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009aca:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009ace:	e71b      	b.n	8009908 <copy_0+0x1f0>
 8009ad0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8009ad2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009ad6:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009ada:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009ade:	e72c      	b.n	800993a <copy_0+0x222>
 8009ae0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009ae2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009ae6:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009aea:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009aee:	e71f      	b.n	8009930 <copy_0+0x218>
 8009af0:	ebce 1c0e 	rsb	ip, lr, lr, lsl #4
 8009af4:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 8009af8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8009afc:	e683      	b.n	8009806 <copy_0+0xee>
 8009afe:	ebc7 1c07 	rsb	ip, r7, r7, lsl #4
 8009b02:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 8009b06:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8009b0a:	e670      	b.n	80097ee <copy_0+0xd6>
 8009b0c:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 8009b10:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8009b14:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8009b18:	e6a6      	b.n	8009868 <copy_0+0x150>
 8009b1a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009b1c:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 8009b20:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8009b24:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8009b28:	e691      	b.n	800984e <copy_0+0x136>
 8009b2a:	ebc9 1a09 	rsb	sl, r9, r9, lsl #4
 8009b2e:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8009b32:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8009b36:	e67e      	b.n	8009836 <copy_0+0x11e>
 8009b38:	ebcc 190c 	rsb	r9, ip, ip, lsl #4
 8009b3c:	eb0b 1949 	add.w	r9, fp, r9, lsl #5
 8009b40:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8009b44:	e66b      	b.n	800981e <copy_0+0x106>
 8009b46:	bf00      	nop

08009b48 <copy_1>:

void copy_1(uint16_t* buffer, int x, int y, uint32_t color)
{
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8009b4c:	4c9f      	ldr	r4, [pc, #636]	@ (8009dcc <copy_1+0x284>)
 8009b4e:	f101 0c02 	add.w	ip, r1, #2
 8009b52:	6825      	ldr	r5, [r4, #0]
 8009b54:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009b56:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8009b5a:	bf2c      	ite	cs
 8009b5c:	2400      	movcs	r4, #0
 8009b5e:	2401      	movcc	r4, #1
 8009b60:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8009b64:	d202      	bcs.n	8009b6c <copy_1+0x24>
 8009b66:	2c00      	cmp	r4, #0
 8009b68:	f040 811e 	bne.w	8009da8 <copy_1+0x260>
    int pixel_y = y_base + y;
 8009b6c:	f102 0e01 	add.w	lr, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009b70:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8009b74:	d202      	bcs.n	8009b7c <copy_1+0x34>
 8009b76:	2c00      	cmp	r4, #0
 8009b78:	f040 810f 	bne.w	8009d9a <copy_1+0x252>
    int pixel_y = y_base + y;
 8009b7c:	f102 0a02 	add.w	sl, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009b80:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8009b84:	d202      	bcs.n	8009b8c <copy_1+0x44>
 8009b86:	2c00      	cmp	r4, #0
 8009b88:	f040 8100 	bne.w	8009d8c <copy_1+0x244>
    int pixel_y = y_base + y;
 8009b8c:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009b8e:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009b92:	d202      	bcs.n	8009b9a <copy_1+0x52>
 8009b94:	2c00      	cmp	r4, #0
 8009b96:	f040 80f2 	bne.w	8009d7e <copy_1+0x236>
    int pixel_y = y_base + y;
 8009b9a:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009b9c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009ba0:	d202      	bcs.n	8009ba8 <copy_1+0x60>
 8009ba2:	2c00      	cmp	r4, #0
 8009ba4:	f040 80e4 	bne.w	8009d70 <copy_1+0x228>
    int pixel_y = y_base + y;
 8009ba8:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009baa:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009bae:	d202      	bcs.n	8009bb6 <copy_1+0x6e>
 8009bb0:	2c00      	cmp	r4, #0
 8009bb2:	f040 80d6 	bne.w	8009d62 <copy_1+0x21a>
    int pixel_y = y_base + y;
 8009bb6:	1d96      	adds	r6, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009bb8:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009bbc:	d202      	bcs.n	8009bc4 <copy_1+0x7c>
 8009bbe:	2c00      	cmp	r4, #0
 8009bc0:	f040 80c8 	bne.w	8009d54 <copy_1+0x20c>
    int pixel_y = y_base + y;
 8009bc4:	1dd6      	adds	r6, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009bc6:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009bca:	d202      	bcs.n	8009bd2 <copy_1+0x8a>
 8009bcc:	2c00      	cmp	r4, #0
 8009bce:	f040 80ba 	bne.w	8009d46 <copy_1+0x1fe>
    int pixel_y = y_base + y;
 8009bd2:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009bd6:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009bda:	d202      	bcs.n	8009be2 <copy_1+0x9a>
 8009bdc:	2c00      	cmp	r4, #0
 8009bde:	f040 80ab 	bne.w	8009d38 <copy_1+0x1f0>
    int pixel_y = y_base + y;
 8009be2:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009be6:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009bea:	d202      	bcs.n	8009bf2 <copy_1+0xaa>
 8009bec:	2c00      	cmp	r4, #0
 8009bee:	f040 809c 	bne.w	8009d2a <copy_1+0x1e2>
    int pixel_y = y_base + y;
 8009bf2:	f102 060a 	add.w	r6, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009bf6:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009bfa:	d202      	bcs.n	8009c02 <copy_1+0xba>
 8009bfc:	2c00      	cmp	r4, #0
 8009bfe:	f040 808d 	bne.w	8009d1c <copy_1+0x1d4>
    int pixel_y = y_base + y;
 8009c02:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c04:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8009c08:	d201      	bcs.n	8009c0e <copy_1+0xc6>
 8009c0a:	2c00      	cmp	r4, #0
 8009c0c:	d15f      	bne.n	8009cce <copy_1+0x186>
    int pixel_x = x_base + x + offset;
 8009c0e:	1c4f      	adds	r7, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c10:	f240 16df 	movw	r6, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 8009c14:	eb01 0905 	add.w	r9, r1, r5
 8009c18:	442f      	add	r7, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c1a:	42b7      	cmp	r7, r6
 8009c1c:	bf8c      	ite	hi
 8009c1e:	f04f 0800 	movhi.w	r8, #0
 8009c22:	f04f 0801 	movls.w	r8, #1
 8009c26:	45b1      	cmp	r9, r6
 8009c28:	bf8c      	ite	hi
 8009c2a:	2600      	movhi	r6, #0
 8009c2c:	2601      	movls	r6, #1
 8009c2e:	f1be 0f00 	cmp.w	lr, #0
 8009c32:	bfb4      	ite	lt
 8009c34:	f04f 0b00 	movlt.w	fp, #0
 8009c38:	f008 0b01 	andge.w	fp, r8, #1
 8009c3c:	f1bb 0f00 	cmp.w	fp, #0
 8009c40:	d007      	beq.n	8009c52 <copy_1+0x10a>
 8009c42:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8009c46:	f2c0 80be 	blt.w	8009dc6 <copy_1+0x27e>
 8009c4a:	46d8      	mov	r8, fp
 8009c4c:	ea4f 1b02 	mov.w	fp, r2, lsl #4
 8009c50:	e012      	b.n	8009c78 <copy_1+0x130>
 8009c52:	ea4f 1b02 	mov.w	fp, r2, lsl #4
 8009c56:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8009c5a:	bf2c      	ite	cs
 8009c5c:	f04f 0e00 	movcs.w	lr, #0
 8009c60:	f006 0e01 	andcc.w	lr, r6, #1
 8009c64:	f1be 0f00 	cmp.w	lr, #0
 8009c68:	d006      	beq.n	8009c78 <copy_1+0x130>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009c6a:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8009c6e:	4676      	mov	r6, lr
 8009c70:	eb09 1a4a 	add.w	sl, r9, sl, lsl #5
 8009c74:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c78:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009c7c:	ebab 0e02 	sub.w	lr, fp, r2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c80:	bf2c      	ite	cs
 8009c82:	2200      	movcs	r2, #0
 8009c84:	2201      	movcc	r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009c86:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c8a:	b13a      	cbz	r2, 8009c9c <copy_1+0x154>
 8009c8c:	2e00      	cmp	r6, #0
 8009c8e:	f040 8096 	bne.w	8009dbe <copy_1+0x276>
 8009c92:	b11a      	cbz	r2, 8009c9c <copy_1+0x154>
 8009c94:	f1b8 0f00 	cmp.w	r8, #0
 8009c98:	f040 808d 	bne.w	8009db6 <copy_1+0x26e>
 8009c9c:	b11c      	cbz	r4, 8009ca6 <copy_1+0x15e>
 8009c9e:	b112      	cbz	r2, 8009ca6 <copy_1+0x15e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009ca0:	44f4      	add	ip, lr
 8009ca2:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8009ca6:	1ccc      	adds	r4, r1, #3
 8009ca8:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009caa:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8009cae:	d203      	bcs.n	8009cb8 <copy_1+0x170>
 8009cb0:	b112      	cbz	r2, 8009cb8 <copy_1+0x170>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009cb2:	4474      	add	r4, lr
 8009cb4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_x = x_base + x + offset;
 8009cb8:	3104      	adds	r1, #4
 8009cba:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009cbc:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8009cc0:	d203      	bcs.n	8009cca <copy_1+0x182>
 8009cc2:	b112      	cbz	r2, 8009cca <copy_1+0x182>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009cc4:	4471      	add	r1, lr
 8009cc6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 2, i, color);
    fill_pixel(buffer, x, y, 1, 1, color);
    fill_pixel(buffer, x, y, 0, 2, color);
    for (int i = 0; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 8009cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009cce:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
    int pixel_x = x_base + x + offset;
 8009cd2:	1c4f      	adds	r7, r1, #1
 8009cd4:	eb01 0905 	add.w	r9, r1, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009cd8:	ea4f 1b02 	mov.w	fp, r2, lsl #4
 8009cdc:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
    int pixel_x = x_base + x + offset;
 8009ce0:	442f      	add	r7, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009ce2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009ce6:	f240 16df 	movw	r6, #479	@ 0x1df
 8009cea:	42b7      	cmp	r7, r6
 8009cec:	bf8c      	ite	hi
 8009cee:	f04f 0800 	movhi.w	r8, #0
 8009cf2:	f04f 0801 	movls.w	r8, #1
 8009cf6:	45b1      	cmp	r9, r6
 8009cf8:	bf8c      	ite	hi
 8009cfa:	2600      	movhi	r6, #0
 8009cfc:	2601      	movls	r6, #1
 8009cfe:	f1be 0f00 	cmp.w	lr, #0
 8009d02:	dba8      	blt.n	8009c56 <copy_1+0x10e>
 8009d04:	f1b8 0f00 	cmp.w	r8, #0
 8009d08:	d0a5      	beq.n	8009c56 <copy_1+0x10e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009d0a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8009d0e:	f04f 0801 	mov.w	r8, #1
 8009d12:	eb07 1e4e 	add.w	lr, r7, lr, lsl #5
 8009d16:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8009d1a:	e79c      	b.n	8009c56 <copy_1+0x10e>
 8009d1c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009d20:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009d24:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009d28:	e76b      	b.n	8009c02 <copy_1+0xba>
 8009d2a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009d2e:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009d32:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009d36:	e75c      	b.n	8009bf2 <copy_1+0xaa>
 8009d38:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009d3c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009d40:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009d44:	e74d      	b.n	8009be2 <copy_1+0x9a>
 8009d46:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009d4a:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009d4e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009d52:	e73e      	b.n	8009bd2 <copy_1+0x8a>
 8009d54:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009d58:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009d5c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009d60:	e730      	b.n	8009bc4 <copy_1+0x7c>
 8009d62:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009d66:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009d6a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009d6e:	e722      	b.n	8009bb6 <copy_1+0x6e>
 8009d70:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009d74:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009d78:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009d7c:	e714      	b.n	8009ba8 <copy_1+0x60>
 8009d7e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009d82:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009d86:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009d8a:	e706      	b.n	8009b9a <copy_1+0x52>
 8009d8c:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8009d90:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009d94:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009d98:	e6f8      	b.n	8009b8c <copy_1+0x44>
 8009d9a:	ebce 160e 	rsb	r6, lr, lr, lsl #4
 8009d9e:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009da2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009da6:	e6e9      	b.n	8009b7c <copy_1+0x34>
 8009da8:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8009dac:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009db0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009db4:	e6da      	b.n	8009b6c <copy_1+0x24>
 8009db6:	4477      	add	r7, lr
 8009db8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8009dbc:	e76e      	b.n	8009c9c <copy_1+0x154>
 8009dbe:	44f1      	add	r9, lr
 8009dc0:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8009dc4:	e765      	b.n	8009c92 <copy_1+0x14a>
 8009dc6:	ea4f 1b02 	mov.w	fp, r2, lsl #4
 8009dca:	e79e      	b.n	8009d0a <copy_1+0x1c2>
 8009dcc:	240001b8 	.word	0x240001b8

08009dd0 <copy_2>:

void copy_2(uint16_t* buffer, int x, int y, uint32_t color)
{
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8009dd4:	4cbb      	ldr	r4, [pc, #748]	@ (800a0c4 <copy_2+0x2f4>)
 8009dd6:	f101 0e01 	add.w	lr, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009dda:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8009dde:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 8009de0:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009de2:	bf2c      	ite	cs
 8009de4:	f04f 0c00 	movcs.w	ip, #0
 8009de8:	f04f 0c01 	movcc.w	ip, #1
    int pixel_x = x_base + x + offset;
 8009dec:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009dee:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8009df2:	bf2c      	ite	cs
 8009df4:	2500      	movcs	r5, #0
 8009df6:	2501      	movcc	r5, #1
 8009df8:	f1bc 0f00 	cmp.w	ip, #0
 8009dfc:	d002      	beq.n	8009e04 <copy_2+0x34>
 8009dfe:	2d00      	cmp	r5, #0
 8009e00:	f040 8146 	bne.w	800a090 <copy_2+0x2c0>
    int pixel_x = x_base + x + offset;
 8009e04:	1c8e      	adds	r6, r1, #2
 8009e06:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009e08:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8009e0c:	4637      	mov	r7, r6
 8009e0e:	9603      	str	r6, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009e10:	bf2c      	ite	cs
 8009e12:	2600      	movcs	r6, #0
 8009e14:	2601      	movcc	r6, #1
 8009e16:	9601      	str	r6, [sp, #4]
 8009e18:	f1bc 0f00 	cmp.w	ip, #0
 8009e1c:	d002      	beq.n	8009e24 <copy_2+0x54>
 8009e1e:	2e00      	cmp	r6, #0
 8009e20:	f040 8128 	bne.w	800a074 <copy_2+0x2a4>
    int pixel_x = x_base + x + offset;
 8009e24:	1cce      	adds	r6, r1, #3
 8009e26:	eb06 0904 	add.w	r9, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009e2a:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 8009e2e:	bf2c      	ite	cs
 8009e30:	2600      	movcs	r6, #0
 8009e32:	2601      	movcc	r6, #1
 8009e34:	f1bc 0f00 	cmp.w	ip, #0
 8009e38:	d002      	beq.n	8009e40 <copy_2+0x70>
 8009e3a:	2e00      	cmp	r6, #0
 8009e3c:	f040 8121 	bne.w	800a082 <copy_2+0x2b2>
    int pixel_x = x_base + x + offset;
 8009e40:	f101 0804 	add.w	r8, r1, #4
 8009e44:	eb08 0b04 	add.w	fp, r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009e48:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8009e4c:	bf2c      	ite	cs
 8009e4e:	2700      	movcs	r7, #0
 8009e50:	2701      	movcc	r7, #1
 8009e52:	9700      	str	r7, [sp, #0]
 8009e54:	f1bc 0f00 	cmp.w	ip, #0
 8009e58:	d002      	beq.n	8009e60 <copy_2+0x90>
 8009e5a:	2f00      	cmp	r7, #0
 8009e5c:	f040 8103 	bne.w	800a066 <copy_2+0x296>
    int pixel_x = x_base + x + offset;
 8009e60:	eb01 0804 	add.w	r8, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009e64:	f240 1adf 	movw	sl, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 8009e68:	3105      	adds	r1, #5
    int pixel_y = y_base + y;
 8009e6a:	f102 0c01 	add.w	ip, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009e6e:	45d0      	cmp	r8, sl
    int pixel_x = x_base + x + offset;
 8009e70:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009e72:	bf8c      	ite	hi
 8009e74:	2400      	movhi	r4, #0
 8009e76:	2401      	movls	r4, #1
 8009e78:	4551      	cmp	r1, sl
 8009e7a:	ea6f 0a0c 	mvn.w	sl, ip
 8009e7e:	bf8c      	ite	hi
 8009e80:	2700      	movhi	r7, #0
 8009e82:	2701      	movls	r7, #1
 8009e84:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8009e88:	9702      	str	r7, [sp, #8]
 8009e8a:	2c00      	cmp	r4, #0
 8009e8c:	f000 8081 	beq.w	8009f92 <copy_2+0x1c2>
 8009e90:	f1ba 0f00 	cmp.w	sl, #0
 8009e94:	d07d      	beq.n	8009f92 <copy_2+0x1c2>
 8009e96:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009e9a:	f280 8096 	bge.w	8009fca <copy_2+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009e9e:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009ea2:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009ea6:	fa1f fa83 	uxth.w	sl, r3
 8009eaa:	eb08 174c 	add.w	r7, r8, ip, lsl #5
 8009eae:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8009eb2:	f820 a017 	strh.w	sl, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009eb6:	d218      	bcs.n	8009eea <copy_2+0x11a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009eb8:	448c      	add	ip, r1
 8009eba:	f820 a01c 	strh.w	sl, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 8009ebe:	f102 0c02 	add.w	ip, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009ec2:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009ec6:	da37      	bge.n	8009f38 <copy_2+0x168>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009ec8:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009ecc:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 8009ed0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 8009ed4:	f102 0c03 	add.w	ip, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009ed8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009edc:	da05      	bge.n	8009eea <copy_2+0x11a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009ede:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009ee2:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 8009ee6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009eea:	f102 0c04 	add.w	ip, r2, #4
 8009eee:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009ef2:	d207      	bcs.n	8009f04 <copy_2+0x134>
 8009ef4:	9f00      	ldr	r7, [sp, #0]
 8009ef6:	b12f      	cbz	r7, 8009f04 <copy_2+0x134>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009ef8:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009efc:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 8009f00:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f04:	f102 0c05 	add.w	ip, r2, #5
 8009f08:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009f0c:	d206      	bcs.n	8009f1c <copy_2+0x14c>
 8009f0e:	b12e      	cbz	r6, 8009f1c <copy_2+0x14c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009f10:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009f14:	eb09 1c4c 	add.w	ip, r9, ip, lsl #5
 8009f18:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f1c:	f102 0c06 	add.w	ip, r2, #6
 8009f20:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009f24:	d208      	bcs.n	8009f38 <copy_2+0x168>
 8009f26:	9f01      	ldr	r7, [sp, #4]
 8009f28:	b137      	cbz	r7, 8009f38 <copy_2+0x168>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009f2a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009f2e:	9f03      	ldr	r7, [sp, #12]
 8009f30:	eb07 1c4c 	add.w	ip, r7, ip, lsl #5
 8009f34:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f38:	f112 0c07 	adds.w	ip, r2, #7
 8009f3c:	d44b      	bmi.n	8009fd6 <copy_2+0x206>
 8009f3e:	2d00      	cmp	r5, #0
 8009f40:	d049      	beq.n	8009fd6 <copy_2+0x206>
 8009f42:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009f46:	f2c0 80c8 	blt.w	800a0da <copy_2+0x30a>
    int pixel_y = y_base + y;
 8009f4a:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f4c:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8009f50:	f04f 0c00 	mov.w	ip, #0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009f54:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8009f58:	ea4f 1242 	mov.w	r2, r2, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f5c:	d30e      	bcc.n	8009f7c <copy_2+0x1ac>
 8009f5e:	ea15 050c 	ands.w	r5, r5, ip
 8009f62:	d172      	bne.n	800a04a <copy_2+0x27a>
 8009f64:	9c01      	ldr	r4, [sp, #4]
 8009f66:	ea1c 0704 	ands.w	r7, ip, r4
 8009f6a:	d176      	bne.n	800a05a <copy_2+0x28a>
 8009f6c:	ea1c 0606 	ands.w	r6, ip, r6
 8009f70:	d004      	beq.n	8009f7c <copy_2+0x1ac>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009f72:	eb02 0409 	add.w	r4, r2, r9
 8009f76:	46b4      	mov	ip, r6
 8009f78:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f7c:	9c00      	ldr	r4, [sp, #0]
 8009f7e:	2c00      	cmp	r4, #0
 8009f80:	f000 8091 	beq.w	800a0a6 <copy_2+0x2d6>
 8009f84:	f1bc 0f00 	cmp.w	ip, #0
 8009f88:	f040 8089 	bne.w	800a09e <copy_2+0x2ce>
    fill_pixel(buffer, x, y, 1, 7, color);
    fill_pixel(buffer, x, y, 0, 8, color);
    fill_pixel(buffer, x, y, 0, 9, color);
    fill_pixel(buffer, x, y, 0, 10, color);
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 8009f8c:	b005      	add	sp, #20
 8009f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f92:	9f02      	ldr	r7, [sp, #8]
 8009f94:	ea1a 0a07 	ands.w	sl, sl, r7
 8009f98:	d10d      	bne.n	8009fb6 <copy_2+0x1e6>
 8009f9a:	46ba      	mov	sl, r7
 8009f9c:	f112 0c02 	adds.w	ip, r2, #2
 8009fa0:	d402      	bmi.n	8009fa8 <copy_2+0x1d8>
 8009fa2:	f1ba 0f00 	cmp.w	sl, #0
 8009fa6:	d18c      	bne.n	8009ec2 <copy_2+0xf2>
 8009fa8:	f112 0c03 	adds.w	ip, r2, #3
 8009fac:	d49d      	bmi.n	8009eea <copy_2+0x11a>
 8009fae:	f1ba 0f00 	cmp.w	sl, #0
 8009fb2:	d09a      	beq.n	8009eea <copy_2+0x11a>
 8009fb4:	e790      	b.n	8009ed8 <copy_2+0x108>
 8009fb6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009fba:	dabd      	bge.n	8009f38 <copy_2+0x168>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009fbc:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009fc0:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 8009fc4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8009fc8:	e7e8      	b.n	8009f9c <copy_2+0x1cc>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009fca:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8009fce:	d299      	bcs.n	8009f04 <copy_2+0x134>
 8009fd0:	f112 0c07 	adds.w	ip, r2, #7
 8009fd4:	d5b3      	bpl.n	8009f3e <copy_2+0x16e>
 8009fd6:	f112 0c08 	adds.w	ip, r2, #8
 8009fda:	d475      	bmi.n	800a0c8 <copy_2+0x2f8>
 8009fdc:	2c00      	cmp	r4, #0
 8009fde:	d073      	beq.n	800a0c8 <copy_2+0x2f8>
 8009fe0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009fe4:	da1b      	bge.n	800a01e <copy_2+0x24e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009fe6:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009fea:	eb08 1c4c 	add.w	ip, r8, ip, lsl #5
 8009fee:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 8009ff2:	f102 0c09 	add.w	ip, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009ff6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009ffa:	da10      	bge.n	800a01e <copy_2+0x24e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009ffc:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800a000:	eb08 1c4c 	add.w	ip, r8, ip, lsl #5
 800a004:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 800a008:	f102 0c0a 	add.w	ip, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a00c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800a010:	da05      	bge.n	800a01e <copy_2+0x24e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a012:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800a016:	eb08 1c4c 	add.w	ip, r8, ip, lsl #5
 800a01a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 800a01e:	f102 0c0b 	add.w	ip, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a022:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a026:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a02a:	bf2c      	ite	cs
 800a02c:	f04f 0c00 	movcs.w	ip, #0
 800a030:	f04f 0c01 	movcc.w	ip, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a034:	0152      	lsls	r2, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a036:	ea14 040c 	ands.w	r4, r4, ip
 800a03a:	d090      	beq.n	8009f5e <copy_2+0x18e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a03c:	46a4      	mov	ip, r4
 800a03e:	4490      	add	r8, r2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a040:	ea15 050c 	ands.w	r5, r5, ip
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a044:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a048:	d08c      	beq.n	8009f64 <copy_2+0x194>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a04a:	46ac      	mov	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a04c:	9c01      	ldr	r4, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a04e:	4496      	add	lr, r2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a050:	ea1c 0704 	ands.w	r7, ip, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a054:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a058:	d088      	beq.n	8009f6c <copy_2+0x19c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a05a:	9c03      	ldr	r4, [sp, #12]
 800a05c:	46bc      	mov	ip, r7
 800a05e:	4414      	add	r4, r2
 800a060:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a064:	e782      	b.n	8009f6c <copy_2+0x19c>
 800a066:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 800a06a:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 800a06e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800a072:	e6f5      	b.n	8009e60 <copy_2+0x90>
 800a074:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a078:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800a07c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a080:	e6d0      	b.n	8009e24 <copy_2+0x54>
 800a082:	ebc2 1802 	rsb	r8, r2, r2, lsl #4
 800a086:	eb09 1848 	add.w	r8, r9, r8, lsl #5
 800a08a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800a08e:	e6d7      	b.n	8009e40 <copy_2+0x70>
 800a090:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a094:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 800a098:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a09c:	e6b2      	b.n	8009e04 <copy_2+0x34>
 800a09e:	eb0b 0402 	add.w	r4, fp, r2
 800a0a2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a0a6:	f1bc 0f00 	cmp.w	ip, #0
 800a0aa:	f43f af6f 	beq.w	8009f8c <copy_2+0x1bc>
 800a0ae:	9c02      	ldr	r4, [sp, #8]
 800a0b0:	2c00      	cmp	r4, #0
 800a0b2:	f43f af6b 	beq.w	8009f8c <copy_2+0x1bc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a0b6:	440a      	add	r2, r1
 800a0b8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800a0bc:	b005      	add	sp, #20
 800a0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c2:	bf00      	nop
 800a0c4:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a0c8:	f112 0c09 	adds.w	ip, r2, #9
 800a0cc:	d50c      	bpl.n	800a0e8 <copy_2+0x318>
 800a0ce:	f112 0c0a 	adds.w	ip, r2, #10
 800a0d2:	d4a4      	bmi.n	800a01e <copy_2+0x24e>
 800a0d4:	2c00      	cmp	r4, #0
 800a0d6:	d0a2      	beq.n	800a01e <copy_2+0x24e>
 800a0d8:	e798      	b.n	800a00c <copy_2+0x23c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a0da:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800a0de:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 800a0e2:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800a0e6:	e776      	b.n	8009fd6 <copy_2+0x206>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a0e8:	2c00      	cmp	r4, #0
 800a0ea:	d184      	bne.n	8009ff6 <copy_2+0x226>
 800a0ec:	f112 0c0a 	adds.w	ip, r2, #10
 800a0f0:	d495      	bmi.n	800a01e <copy_2+0x24e>
 800a0f2:	e7ef      	b.n	800a0d4 <copy_2+0x304>

0800a0f4 <copy_3>:

void copy_3(uint16_t* buffer, int x, int y, uint32_t color)
{
 800a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800a0f8:	4cad      	ldr	r4, [pc, #692]	@ (800a3b0 <copy_3+0x2bc>)
 800a0fa:	1c4d      	adds	r5, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a0fc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800a100:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 800a102:	6824      	ldr	r4, [r4, #0]
 800a104:	eb05 0704 	add.w	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a108:	bf2c      	ite	cs
 800a10a:	2500      	movcs	r5, #0
 800a10c:	2501      	movcc	r5, #1
 800a10e:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800a112:	9703      	str	r7, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a114:	bf2c      	ite	cs
 800a116:	2600      	movcs	r6, #0
 800a118:	2601      	movcc	r6, #1
 800a11a:	9600      	str	r6, [sp, #0]
 800a11c:	b116      	cbz	r6, 800a124 <copy_3+0x30>
 800a11e:	2d00      	cmp	r5, #0
 800a120:	f040 8118 	bne.w	800a354 <copy_3+0x260>
    int pixel_x = x_base + x + offset;
 800a124:	f101 0e02 	add.w	lr, r1, #2
 800a128:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a12a:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800a12e:	bf2c      	ite	cs
 800a130:	f04f 0900 	movcs.w	r9, #0
 800a134:	f04f 0901 	movcc.w	r9, #1
 800a138:	b11d      	cbz	r5, 800a142 <copy_3+0x4e>
 800a13a:	f1b9 0f00 	cmp.w	r9, #0
 800a13e:	f040 8102 	bne.w	800a346 <copy_3+0x252>
    int pixel_x = x_base + x + offset;
 800a142:	f101 0c03 	add.w	ip, r1, #3
 800a146:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a148:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800a14c:	bf2c      	ite	cs
 800a14e:	f04f 0800 	movcs.w	r8, #0
 800a152:	f04f 0801 	movcc.w	r8, #1
 800a156:	b11d      	cbz	r5, 800a160 <copy_3+0x6c>
 800a158:	f1b8 0f00 	cmp.w	r8, #0
 800a15c:	f040 80ec 	bne.w	800a338 <copy_3+0x244>
    int pixel_x = x_base + x + offset;
 800a160:	1d0e      	adds	r6, r1, #4
 800a162:	eb06 0a04 	add.w	sl, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a166:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 800a16a:	bf2c      	ite	cs
 800a16c:	2700      	movcs	r7, #0
 800a16e:	2701      	movcc	r7, #1
 800a170:	b117      	cbz	r7, 800a178 <copy_3+0x84>
 800a172:	2d00      	cmp	r5, #0
 800a174:	f040 80d9 	bne.w	800a32a <copy_3+0x236>
    int pixel_x = x_base + x + offset;
 800a178:	190d      	adds	r5, r1, r4
 800a17a:	3105      	adds	r1, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a17c:	f240 1bdf 	movw	fp, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 800a180:	4421      	add	r1, r4
    int pixel_y = y_base + y;
 800a182:	1c54      	adds	r4, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a184:	455d      	cmp	r5, fp
    int pixel_x = x_base + x + offset;
 800a186:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a188:	ea6f 0604 	mvn.w	r6, r4
 800a18c:	bf8c      	ite	hi
 800a18e:	2500      	movhi	r5, #0
 800a190:	2501      	movls	r5, #1
 800a192:	0ff6      	lsrs	r6, r6, #31
 800a194:	9502      	str	r5, [sp, #8]
 800a196:	4035      	ands	r5, r6
 800a198:	f000 80a1 	beq.w	800a2de <copy_3+0x1ea>
 800a19c:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a1a0:	f280 80bc 	bge.w	800a31c <copy_3+0x228>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a1a4:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a1a8:	9e01      	ldr	r6, [sp, #4]
 800a1aa:	b29d      	uxth	r5, r3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a1ac:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a1b0:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800a1b4:	ea4f 1444 	mov.w	r4, r4, lsl #5
 800a1b8:	f820 5016 	strh.w	r5, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a1bc:	f080 8133 	bcs.w	800a426 <copy_3+0x332>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a1c0:	440c      	add	r4, r1
 800a1c2:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a1c6:	1c94      	adds	r4, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a1c8:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a1cc:	da19      	bge.n	800a202 <copy_3+0x10e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a1ce:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a1d2:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a1d6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a1da:	1cd4      	adds	r4, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a1dc:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a1e0:	da0f      	bge.n	800a202 <copy_3+0x10e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a1e2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a1e6:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a1ea:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a1ee:	1d14      	adds	r4, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a1f0:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a1f4:	da05      	bge.n	800a202 <copy_3+0x10e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a1f6:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a1fa:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a1fe:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a202:	2501      	movs	r5, #1
    int pixel_y = y_base + y;
 800a204:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a206:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800a20a:	bf2c      	ite	cs
 800a20c:	2400      	movcs	r4, #0
 800a20e:	2401      	movcc	r4, #1
 800a210:	ea14 0b09 	ands.w	fp, r4, r9
 800a214:	f040 80f8 	bne.w	800a408 <copy_3+0x314>
 800a218:	ea18 0b04 	ands.w	fp, r8, r4
 800a21c:	f040 80a1 	bne.w	800a362 <copy_3+0x26e>
 800a220:	b137      	cbz	r7, 800a230 <copy_3+0x13c>
 800a222:	b12c      	cbz	r4, 800a230 <copy_3+0x13c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a224:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800a228:	eb0a 1646 	add.w	r6, sl, r6, lsl #5
 800a22c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a230:	1d94      	adds	r4, r2, #6
 800a232:	f100 80bf 	bmi.w	800a3b4 <copy_3+0x2c0>
 800a236:	2d00      	cmp	r5, #0
 800a238:	f000 80bc 	beq.w	800a3b4 <copy_3+0x2c0>
 800a23c:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a240:	da37      	bge.n	800a2b2 <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a242:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a246:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a24a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a24e:	1dd4      	adds	r4, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a250:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a254:	da2d      	bge.n	800a2b2 <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a256:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a25a:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a25e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a262:	f102 0408 	add.w	r4, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a266:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a26a:	da22      	bge.n	800a2b2 <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a26c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a270:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a274:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a278:	f102 0409 	add.w	r4, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a27c:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a280:	da17      	bge.n	800a2b2 <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a282:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    int pixel_y = y_base + y;
 800a286:	f102 060a 	add.w	r6, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a28a:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a28e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a292:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800a296:	da0c      	bge.n	800a2b2 <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a298:	ebc6 1406 	rsb	r4, r6, r6, lsl #4
 800a29c:	b29d      	uxth	r5, r3
 800a29e:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 800a2a2:	0164      	lsls	r4, r4, #5
 800a2a4:	f820 5011 	strh.w	r5, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a2a8:	9901      	ldr	r1, [sp, #4]
 800a2aa:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a2ae:	f0c0 80a6 	bcc.w	800a3fe <copy_3+0x30a>
 800a2b2:	320b      	adds	r2, #11
 800a2b4:	9c00      	ldr	r4, [sp, #0]
 800a2b6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800a2ba:	bf2c      	ite	cs
 800a2bc:	2100      	movcs	r1, #0
 800a2be:	2101      	movcc	r1, #1
 800a2c0:	2c00      	cmp	r4, #0
 800a2c2:	d05d      	beq.n	800a380 <copy_3+0x28c>
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	d154      	bne.n	800a372 <copy_3+0x27e>
 800a2c8:	b137      	cbz	r7, 800a2d8 <copy_3+0x1e4>
 800a2ca:	b129      	cbz	r1, 800a2d8 <copy_3+0x1e4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a2cc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800a2d0:	eb0a 1242 	add.w	r2, sl, r2, lsl #5
 800a2d4:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 5, 8, color);
    fill_pixel(buffer, x, y, 5, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    fill_pixel(buffer, x, y, 0, 10, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800a2d8:	b005      	add	sp, #20
 800a2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a2de:	4559      	cmp	r1, fp
 800a2e0:	bf8c      	ite	hi
 800a2e2:	2500      	movhi	r5, #0
 800a2e4:	2501      	movls	r5, #1
 800a2e6:	402e      	ands	r6, r5
 800a2e8:	d10c      	bne.n	800a304 <copy_3+0x210>
 800a2ea:	1c94      	adds	r4, r2, #2
 800a2ec:	d402      	bmi.n	800a2f4 <copy_3+0x200>
 800a2ee:	2d00      	cmp	r5, #0
 800a2f0:	f47f af6a 	bne.w	800a1c8 <copy_3+0xd4>
 800a2f4:	1cd4      	adds	r4, r2, #3
 800a2f6:	f140 808f 	bpl.w	800a418 <copy_3+0x324>
 800a2fa:	1d16      	adds	r6, r2, #4
 800a2fc:	db82      	blt.n	800a204 <copy_3+0x110>
 800a2fe:	2d00      	cmp	r5, #0
 800a300:	d080      	beq.n	800a204 <copy_3+0x110>
 800a302:	e774      	b.n	800a1ee <copy_3+0xfa>
 800a304:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a308:	f6bf af7b 	bge.w	800a202 <copy_3+0x10e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a30c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a310:	4635      	mov	r5, r6
 800a312:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a316:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a31a:	e7e6      	b.n	800a2ea <copy_3+0x1f6>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a31c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a320:	f080 8081 	bcs.w	800a426 <copy_3+0x332>
    int pixel_y = y_base + y;
 800a324:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a326:	2400      	movs	r4, #0
 800a328:	e77a      	b.n	800a220 <copy_3+0x12c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a32a:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800a32e:	eb0a 1545 	add.w	r5, sl, r5, lsl #5
 800a332:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800a336:	e71f      	b.n	800a178 <copy_3+0x84>
 800a338:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a33c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a340:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a344:	e70c      	b.n	800a160 <copy_3+0x6c>
 800a346:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a34a:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 800a34e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a352:	e6f6      	b.n	800a142 <copy_3+0x4e>
 800a354:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a358:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800a35c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a360:	e6e0      	b.n	800a124 <copy_3+0x30>
 800a362:	465c      	mov	r4, fp
 800a364:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 800a368:	eb0c 1b4b 	add.w	fp, ip, fp, lsl #5
 800a36c:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800a370:	e756      	b.n	800a220 <copy_3+0x12c>
 800a372:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800a376:	9d03      	ldr	r5, [sp, #12]
 800a378:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 800a37c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a380:	2900      	cmp	r1, #0
 800a382:	d0a1      	beq.n	800a2c8 <copy_3+0x1d4>
 800a384:	f1b9 0f00 	cmp.w	r9, #0
 800a388:	d10b      	bne.n	800a3a2 <copy_3+0x2ae>
 800a38a:	2900      	cmp	r1, #0
 800a38c:	d09c      	beq.n	800a2c8 <copy_3+0x1d4>
 800a38e:	f1b8 0f00 	cmp.w	r8, #0
 800a392:	d099      	beq.n	800a2c8 <copy_3+0x1d4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a394:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800a398:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 800a39c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800a3a0:	e792      	b.n	800a2c8 <copy_3+0x1d4>
 800a3a2:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800a3a6:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 800a3aa:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 800a3ae:	e7ec      	b.n	800a38a <copy_3+0x296>
 800a3b0:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a3b4:	1dd4      	adds	r4, r2, #7
 800a3b6:	d402      	bmi.n	800a3be <copy_3+0x2ca>
 800a3b8:	2d00      	cmp	r5, #0
 800a3ba:	f47f af49 	bne.w	800a250 <copy_3+0x15c>
 800a3be:	f112 0408 	adds.w	r4, r2, #8
 800a3c2:	d402      	bmi.n	800a3ca <copy_3+0x2d6>
 800a3c4:	2d00      	cmp	r5, #0
 800a3c6:	f47f af4e 	bne.w	800a266 <copy_3+0x172>
 800a3ca:	f112 0409 	adds.w	r4, r2, #9
 800a3ce:	d402      	bmi.n	800a3d6 <copy_3+0x2e2>
 800a3d0:	2d00      	cmp	r5, #0
 800a3d2:	f47f af53 	bne.w	800a27c <copy_3+0x188>
    int pixel_y = y_base + y;
 800a3d6:	f102 040a 	add.w	r4, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a3da:	2c00      	cmp	r4, #0
    int pixel_y = y_base + y;
 800a3dc:	4626      	mov	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a3de:	db02      	blt.n	800a3e6 <copy_3+0x2f2>
 800a3e0:	2d00      	cmp	r5, #0
 800a3e2:	f47f af56 	bne.w	800a292 <copy_3+0x19e>
 800a3e6:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a3ea:	f4bf af62 	bcs.w	800a2b2 <copy_3+0x1be>
 800a3ee:	9902      	ldr	r1, [sp, #8]
 800a3f0:	2900      	cmp	r1, #0
 800a3f2:	f43f af5e 	beq.w	800a2b2 <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a3f6:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a3fa:	b29d      	uxth	r5, r3
 800a3fc:	0164      	lsls	r4, r4, #5
 800a3fe:	9901      	ldr	r1, [sp, #4]
 800a400:	4421      	add	r1, r4
 800a402:	f820 5011 	strh.w	r5, [r0, r1, lsl #1]
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
 800a406:	e754      	b.n	800a2b2 <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a408:	465c      	mov	r4, fp
 800a40a:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 800a40e:	eb0e 1b4b 	add.w	fp, lr, fp, lsl #5
 800a412:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800a416:	e6ff      	b.n	800a218 <copy_3+0x124>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a418:	2d00      	cmp	r5, #0
 800a41a:	f47f aedf 	bne.w	800a1dc <copy_3+0xe8>
 800a41e:	1d16      	adds	r6, r2, #4
 800a420:	f6ff aef0 	blt.w	800a204 <copy_3+0x110>
 800a424:	e76b      	b.n	800a2fe <copy_3+0x20a>
 800a426:	2500      	movs	r5, #0
 800a428:	e6ec      	b.n	800a204 <copy_3+0x110>
 800a42a:	bf00      	nop

0800a42c <copy_4>:

void copy_4(uint16_t* buffer, int x, int y, uint32_t color)
{
 800a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800a430:	4ca8      	ldr	r4, [pc, #672]	@ (800a6d4 <copy_4+0x2a8>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a432:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800a436:	b08b      	sub	sp, #44	@ 0x2c
    int pixel_x = x_base + x + offset;
 800a438:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a43a:	bf2c      	ite	cs
 800a43c:	2400      	movcs	r4, #0
 800a43e:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 800a440:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a444:	4626      	mov	r6, r4
 800a446:	9402      	str	r4, [sp, #8]
 800a448:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800a44c:	bf2c      	ite	cs
 800a44e:	2400      	movcs	r4, #0
 800a450:	2401      	movcc	r4, #1
 800a452:	b114      	cbz	r4, 800a45a <copy_4+0x2e>
 800a454:	2e00      	cmp	r6, #0
 800a456:	f040 810a 	bne.w	800a66e <copy_4+0x242>
    int pixel_y = y_base + y;
 800a45a:	f102 0901 	add.w	r9, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a45e:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 800a462:	bf2c      	ite	cs
 800a464:	2600      	movcs	r6, #0
 800a466:	2601      	movcc	r6, #1
 800a468:	9603      	str	r6, [sp, #12]
 800a46a:	b114      	cbz	r4, 800a472 <copy_4+0x46>
 800a46c:	2e00      	cmp	r6, #0
 800a46e:	f040 80f7 	bne.w	800a660 <copy_4+0x234>
    int pixel_y = y_base + y;
 800a472:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a474:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800a478:	9608      	str	r6, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a47a:	bf2c      	ite	cs
 800a47c:	2700      	movcs	r7, #0
 800a47e:	2701      	movcc	r7, #1
 800a480:	9704      	str	r7, [sp, #16]
 800a482:	b114      	cbz	r4, 800a48a <copy_4+0x5e>
 800a484:	2f00      	cmp	r7, #0
 800a486:	f040 80e4 	bne.w	800a652 <copy_4+0x226>
    int pixel_y = y_base + y;
 800a48a:	f102 0a03 	add.w	sl, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a48e:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800a492:	bf2c      	ite	cs
 800a494:	2600      	movcs	r6, #0
 800a496:	2601      	movcc	r6, #1
 800a498:	9605      	str	r6, [sp, #20]
 800a49a:	b114      	cbz	r4, 800a4a2 <copy_4+0x76>
 800a49c:	2e00      	cmp	r6, #0
 800a49e:	f040 80d1 	bne.w	800a644 <copy_4+0x218>
    int pixel_y = y_base + y;
 800a4a2:	f102 0b04 	add.w	fp, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a4a6:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 800a4aa:	bf2c      	ite	cs
 800a4ac:	2600      	movcs	r6, #0
 800a4ae:	2601      	movcc	r6, #1
 800a4b0:	9606      	str	r6, [sp, #24]
 800a4b2:	b114      	cbz	r4, 800a4ba <copy_4+0x8e>
 800a4b4:	2e00      	cmp	r6, #0
 800a4b6:	f040 80be 	bne.w	800a636 <copy_4+0x20a>
    int pixel_y = y_base + y;
 800a4ba:	f102 0805 	add.w	r8, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a4be:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800a4c2:	bf2c      	ite	cs
 800a4c4:	2600      	movcs	r6, #0
 800a4c6:	2601      	movcc	r6, #1
 800a4c8:	9607      	str	r6, [sp, #28]
 800a4ca:	b114      	cbz	r4, 800a4d2 <copy_4+0xa6>
 800a4cc:	2e00      	cmp	r6, #0
 800a4ce:	f040 80ab 	bne.w	800a628 <copy_4+0x1fc>
    int pixel_y = y_base + y;
 800a4d2:	f102 0e06 	add.w	lr, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a4d6:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800a4da:	bf2c      	ite	cs
 800a4dc:	2600      	movcs	r6, #0
 800a4de:	2601      	movcc	r6, #1
 800a4e0:	9601      	str	r6, [sp, #4]
 800a4e2:	b114      	cbz	r4, 800a4ea <copy_4+0xbe>
 800a4e4:	2e00      	cmp	r6, #0
 800a4e6:	f040 808e 	bne.w	800a606 <copy_4+0x1da>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a4ea:	ebce 160e 	rsb	r6, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a4ee:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a4f2:	ea4f 170e 	mov.w	r7, lr, lsl #4
 800a4f6:	ea4f 1646 	mov.w	r6, r6, lsl #5
 800a4fa:	9709      	str	r7, [sp, #36]	@ 0x24
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a4fc:	bf2c      	ite	cs
 800a4fe:	2700      	movcs	r7, #0
 800a500:	2701      	movcc	r7, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a502:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a504:	2c00      	cmp	r4, #0
 800a506:	d17b      	bne.n	800a600 <copy_4+0x1d4>
    int pixel_x = x_base + x + offset;
 800a508:	1c4c      	adds	r4, r1, #1
 800a50a:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a50c:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 800a510:	d202      	bcs.n	800a518 <copy_4+0xec>
 800a512:	2f00      	cmp	r7, #0
 800a514:	f040 80c1 	bne.w	800a69a <copy_4+0x26e>
    int pixel_x = x_base + x + offset;
 800a518:	1c8c      	adds	r4, r1, #2
 800a51a:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a51c:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 800a520:	d202      	bcs.n	800a528 <copy_4+0xfc>
 800a522:	2f00      	cmp	r7, #0
 800a524:	f040 80b4 	bne.w	800a690 <copy_4+0x264>
    int pixel_x = x_base + x + offset;
 800a528:	1ccc      	adds	r4, r1, #3
 800a52a:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a52c:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 800a530:	d202      	bcs.n	800a538 <copy_4+0x10c>
 800a532:	2f00      	cmp	r7, #0
 800a534:	f040 80a7 	bne.w	800a686 <copy_4+0x25a>
    int pixel_x = x_base + x + offset;
 800a538:	f101 0c04 	add.w	ip, r1, #4
 800a53c:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a53e:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800a542:	bf2c      	ite	cs
 800a544:	2400      	movcs	r4, #0
 800a546:	2401      	movcc	r4, #1
 800a548:	b117      	cbz	r7, 800a550 <copy_4+0x124>
 800a54a:	2c00      	cmp	r4, #0
 800a54c:	f040 8096 	bne.w	800a67c <copy_4+0x250>
    int pixel_x = x_base + x + offset;
 800a550:	3105      	adds	r1, #5
 800a552:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a554:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a558:	d202      	bcs.n	800a560 <copy_4+0x134>
 800a55a:	2f00      	cmp	r7, #0
 800a55c:	f040 80a2 	bne.w	800a6a4 <copy_4+0x278>
 800a560:	b304      	cbz	r4, 800a5a4 <copy_4+0x178>
 800a562:	9902      	ldr	r1, [sp, #8]
 800a564:	2900      	cmp	r1, #0
 800a566:	f040 80a2 	bne.w	800a6ae <copy_4+0x282>
 800a56a:	b1dc      	cbz	r4, 800a5a4 <copy_4+0x178>
 800a56c:	9903      	ldr	r1, [sp, #12]
 800a56e:	2900      	cmp	r1, #0
 800a570:	f040 80b2 	bne.w	800a6d8 <copy_4+0x2ac>
 800a574:	b1b4      	cbz	r4, 800a5a4 <copy_4+0x178>
 800a576:	9904      	ldr	r1, [sp, #16]
 800a578:	2900      	cmp	r1, #0
 800a57a:	f040 80a2 	bne.w	800a6c2 <copy_4+0x296>
 800a57e:	b18c      	cbz	r4, 800a5a4 <copy_4+0x178>
 800a580:	9905      	ldr	r1, [sp, #20]
 800a582:	2900      	cmp	r1, #0
 800a584:	f040 80b6 	bne.w	800a6f4 <copy_4+0x2c8>
 800a588:	b164      	cbz	r4, 800a5a4 <copy_4+0x178>
 800a58a:	9906      	ldr	r1, [sp, #24]
 800a58c:	2900      	cmp	r1, #0
 800a58e:	f040 80aa 	bne.w	800a6e6 <copy_4+0x2ba>
 800a592:	b13c      	cbz	r4, 800a5a4 <copy_4+0x178>
 800a594:	9907      	ldr	r1, [sp, #28]
 800a596:	b129      	cbz	r1, 800a5a4 <copy_4+0x178>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a598:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800a59c:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 800a5a0:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5a4:	9901      	ldr	r1, [sp, #4]
 800a5a6:	b111      	cbz	r1, 800a5ae <copy_4+0x182>
 800a5a8:	2c00      	cmp	r4, #0
 800a5aa:	f040 80cf 	bne.w	800a74c <copy_4+0x320>
    int pixel_y = y_base + y;
 800a5ae:	1dd1      	adds	r1, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5b0:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800a5b4:	d202      	bcs.n	800a5bc <copy_4+0x190>
 800a5b6:	2c00      	cmp	r4, #0
 800a5b8:	f040 80c1 	bne.w	800a73e <copy_4+0x312>
    int pixel_y = y_base + y;
 800a5bc:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5c0:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800a5c4:	d202      	bcs.n	800a5cc <copy_4+0x1a0>
 800a5c6:	2c00      	cmp	r4, #0
 800a5c8:	f040 80b2 	bne.w	800a730 <copy_4+0x304>
    int pixel_y = y_base + y;
 800a5cc:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5d0:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800a5d4:	d202      	bcs.n	800a5dc <copy_4+0x1b0>
 800a5d6:	2c00      	cmp	r4, #0
 800a5d8:	f040 80a3 	bne.w	800a722 <copy_4+0x2f6>
    int pixel_y = y_base + y;
 800a5dc:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5e0:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800a5e4:	d202      	bcs.n	800a5ec <copy_4+0x1c0>
 800a5e6:	2c00      	cmp	r4, #0
 800a5e8:	f040 8094 	bne.w	800a714 <copy_4+0x2e8>
    int pixel_y = y_base + y;
 800a5ec:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5ee:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800a5f2:	d202      	bcs.n	800a5fa <copy_4+0x1ce>
 800a5f4:	2c00      	cmp	r4, #0
 800a5f6:	f040 8084 	bne.w	800a702 <copy_4+0x2d6>
    for (int i = 0; i < 7; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 6, color);
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 4, i, color);
}
 800a5fa:	b00b      	add	sp, #44	@ 0x2c
 800a5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a600:	2f00      	cmp	r7, #0
 800a602:	d081      	beq.n	800a508 <copy_4+0xdc>
 800a604:	e00a      	b.n	800a61c <copy_4+0x1f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a606:	ebce 160e 	rsb	r6, lr, lr, lsl #4
 800a60a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a60e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a610:	eb0c 1446 	add.w	r4, ip, r6, lsl #5
 800a614:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    for (int i = 0; i < 7; i++) fill_pixel(buffer, x, y, 0, i, color);
 800a618:	0174      	lsls	r4, r6, #5
 800a61a:	9400      	str	r4, [sp, #0]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a61c:	9c00      	ldr	r4, [sp, #0]
 800a61e:	2701      	movs	r7, #1
 800a620:	44a4      	add	ip, r4
 800a622:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800a626:	e76f      	b.n	800a508 <copy_4+0xdc>
 800a628:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 800a62c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a630:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a634:	e74d      	b.n	800a4d2 <copy_4+0xa6>
 800a636:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 800a63a:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a63e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a642:	e73a      	b.n	800a4ba <copy_4+0x8e>
 800a644:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 800a648:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a64c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a650:	e727      	b.n	800a4a2 <copy_4+0x76>
 800a652:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800a656:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a65a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a65e:	e714      	b.n	800a48a <copy_4+0x5e>
 800a660:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 800a664:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a668:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a66c:	e701      	b.n	800a472 <copy_4+0x46>
 800a66e:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a672:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a676:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a67a:	e6ee      	b.n	800a45a <copy_4+0x2e>
 800a67c:	9e00      	ldr	r6, [sp, #0]
 800a67e:	4466      	add	r6, ip
 800a680:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a684:	e764      	b.n	800a550 <copy_4+0x124>
 800a686:	9e00      	ldr	r6, [sp, #0]
 800a688:	4434      	add	r4, r6
 800a68a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a68e:	e753      	b.n	800a538 <copy_4+0x10c>
 800a690:	9e00      	ldr	r6, [sp, #0]
 800a692:	4434      	add	r4, r6
 800a694:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a698:	e746      	b.n	800a528 <copy_4+0xfc>
 800a69a:	9e00      	ldr	r6, [sp, #0]
 800a69c:	4434      	add	r4, r6
 800a69e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a6a2:	e739      	b.n	800a518 <copy_4+0xec>
 800a6a4:	9d00      	ldr	r5, [sp, #0]
 800a6a6:	4429      	add	r1, r5
 800a6a8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a6ac:	e758      	b.n	800a560 <copy_4+0x134>
 800a6ae:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 800a6b2:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a6b6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	f47f af56 	bne.w	800a56c <copy_4+0x140>
 800a6c0:	e770      	b.n	800a5a4 <copy_4+0x178>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a6c2:	9908      	ldr	r1, [sp, #32]
 800a6c4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800a6c8:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a6cc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a6d0:	e755      	b.n	800a57e <copy_4+0x152>
 800a6d2:	bf00      	nop
 800a6d4:	240001b8 	.word	0x240001b8
 800a6d8:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 800a6dc:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 800a6e0:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800a6e4:	e746      	b.n	800a574 <copy_4+0x148>
 800a6e6:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 800a6ea:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a6ee:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a6f2:	e74e      	b.n	800a592 <copy_4+0x166>
 800a6f4:	ebca 110a 	rsb	r1, sl, sl, lsl #4
 800a6f8:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a6fc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a700:	e742      	b.n	800a588 <copy_4+0x15c>
 800a702:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800a706:	eb0c 1c42 	add.w	ip, ip, r2, lsl #5
 800a70a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
}
 800a70e:	b00b      	add	sp, #44	@ 0x2c
 800a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a714:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800a718:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a71c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a720:	e764      	b.n	800a5ec <copy_4+0x1c0>
 800a722:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800a726:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a72a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a72e:	e755      	b.n	800a5dc <copy_4+0x1b0>
 800a730:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800a734:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a738:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a73c:	e746      	b.n	800a5cc <copy_4+0x1a0>
 800a73e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800a742:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a746:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a74a:	e737      	b.n	800a5bc <copy_4+0x190>
 800a74c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a74e:	eba1 010e 	sub.w	r1, r1, lr
 800a752:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a756:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a75a:	e728      	b.n	800a5ae <copy_4+0x182>

0800a75c <copy_5>:

void copy_5(uint16_t* buffer, int x, int y, uint32_t color)
{
 800a75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800a760:	4ca9      	ldr	r4, [pc, #676]	@ (800aa08 <copy_5+0x2ac>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a762:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a766:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
{
 800a76a:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 800a76c:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a76e:	bf2c      	ite	cs
 800a770:	2500      	movcs	r5, #0
 800a772:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a774:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    int pixel_x = x_base + x + offset;
 800a778:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a77c:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800a780:	bf2c      	ite	cs
 800a782:	2600      	movcs	r6, #0
 800a784:	2601      	movcc	r6, #1
 800a786:	b115      	cbz	r5, 800a78e <copy_5+0x32>
 800a788:	2e00      	cmp	r6, #0
 800a78a:	f040 8131 	bne.w	800a9f0 <copy_5+0x294>
    int pixel_x = x_base + x + offset;
 800a78e:	1c4f      	adds	r7, r1, #1
 800a790:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a792:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800a796:	9703      	str	r7, [sp, #12]
 800a798:	bf2c      	ite	cs
 800a79a:	2700      	movcs	r7, #0
 800a79c:	2701      	movcc	r7, #1
 800a79e:	9700      	str	r7, [sp, #0]
 800a7a0:	b115      	cbz	r5, 800a7a8 <copy_5+0x4c>
 800a7a2:	2f00      	cmp	r7, #0
 800a7a4:	f040 815a 	bne.w	800aa5c <copy_5+0x300>
    int pixel_x = x_base + x + offset;
 800a7a8:	1c8f      	adds	r7, r1, #2
 800a7aa:	eb07 0a04 	add.w	sl, r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a7ae:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 800a7b2:	bf2c      	ite	cs
 800a7b4:	2700      	movcs	r7, #0
 800a7b6:	2701      	movcc	r7, #1
 800a7b8:	9701      	str	r7, [sp, #4]
 800a7ba:	b115      	cbz	r5, 800a7c2 <copy_5+0x66>
 800a7bc:	2f00      	cmp	r7, #0
 800a7be:	f040 8148 	bne.w	800aa52 <copy_5+0x2f6>
    int pixel_x = x_base + x + offset;
 800a7c2:	1ccf      	adds	r7, r1, #3
 800a7c4:	eb07 0904 	add.w	r9, r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a7c8:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 800a7cc:	bf2c      	ite	cs
 800a7ce:	2700      	movcs	r7, #0
 800a7d0:	2701      	movcc	r7, #1
 800a7d2:	9702      	str	r7, [sp, #8]
 800a7d4:	b115      	cbz	r5, 800a7dc <copy_5+0x80>
 800a7d6:	2f00      	cmp	r7, #0
 800a7d8:	f040 8145 	bne.w	800aa66 <copy_5+0x30a>
    int pixel_x = x_base + x + offset;
 800a7dc:	1d0f      	adds	r7, r1, #4
 800a7de:	eb07 0804 	add.w	r8, r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a7e2:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800a7e6:	bf2c      	ite	cs
 800a7e8:	2700      	movcs	r7, #0
 800a7ea:	2701      	movcc	r7, #1
 800a7ec:	b115      	cbz	r5, 800a7f4 <copy_5+0x98>
 800a7ee:	2f00      	cmp	r7, #0
 800a7f0:	f040 810c 	bne.w	800aa0c <copy_5+0x2b0>
    int pixel_x = x_base + x + offset;
 800a7f4:	3105      	adds	r1, #5
 800a7f6:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a7f8:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a7fc:	bf2c      	ite	cs
 800a7fe:	f04f 0b00 	movcs.w	fp, #0
 800a802:	f04f 0b01 	movcc.w	fp, #1
 800a806:	f1bb 0f00 	cmp.w	fp, #0
 800a80a:	d002      	beq.n	800a812 <copy_5+0xb6>
 800a80c:	2d00      	cmp	r5, #0
 800a80e:	f040 8102 	bne.w	800aa16 <copy_5+0x2ba>
 800a812:	1c54      	adds	r4, r2, #1
 800a814:	f100 80b8 	bmi.w	800a988 <copy_5+0x22c>
 800a818:	2e00      	cmp	r6, #0
 800a81a:	f000 80b5 	beq.w	800a988 <copy_5+0x22c>
 800a81e:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a822:	da23      	bge.n	800a86c <copy_5+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a824:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a828:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 800a82c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a830:	1c94      	adds	r4, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a832:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a836:	da19      	bge.n	800a86c <copy_5+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a838:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a83c:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 800a840:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a844:	1cd4      	adds	r4, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a846:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a84a:	da0f      	bge.n	800a86c <copy_5+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a84c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a850:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 800a854:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a858:	1d14      	adds	r4, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a85a:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a85e:	da05      	bge.n	800a86c <copy_5+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a860:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a864:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 800a868:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a86c:	1d54      	adds	r4, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a86e:	f50c 6c16 	add.w	ip, ip, #2400	@ 0x960
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a872:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a876:	bf2c      	ite	cs
 800a878:	2400      	movcs	r4, #0
 800a87a:	2401      	movcc	r4, #1
 800a87c:	b1ac      	cbz	r4, 800a8aa <copy_5+0x14e>
 800a87e:	2e00      	cmp	r6, #0
 800a880:	f040 80fb 	bne.w	800aa7a <copy_5+0x31e>
 800a884:	b18c      	cbz	r4, 800a8aa <copy_5+0x14e>
 800a886:	9d00      	ldr	r5, [sp, #0]
 800a888:	2d00      	cmp	r5, #0
 800a88a:	f040 80f1 	bne.w	800aa70 <copy_5+0x314>
 800a88e:	b164      	cbz	r4, 800a8aa <copy_5+0x14e>
 800a890:	9d01      	ldr	r5, [sp, #4]
 800a892:	2d00      	cmp	r5, #0
 800a894:	f040 80ff 	bne.w	800aa96 <copy_5+0x33a>
 800a898:	b13c      	cbz	r4, 800a8aa <copy_5+0x14e>
 800a89a:	9d02      	ldr	r5, [sp, #8]
 800a89c:	2d00      	cmp	r5, #0
 800a89e:	f040 80f1 	bne.w	800aa84 <copy_5+0x328>
 800a8a2:	b114      	cbz	r4, 800a8aa <copy_5+0x14e>
 800a8a4:	2f00      	cmp	r7, #0
 800a8a6:	f040 80f2 	bne.w	800aa8e <copy_5+0x332>
 800a8aa:	1d94      	adds	r4, r2, #6
 800a8ac:	d452      	bmi.n	800a954 <copy_5+0x1f8>
 800a8ae:	f1bb 0f00 	cmp.w	fp, #0
 800a8b2:	d04f      	beq.n	800a954 <copy_5+0x1f8>
 800a8b4:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a8b8:	da36      	bge.n	800a928 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a8ba:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a8be:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a8c2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a8c6:	1dd4      	adds	r4, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a8c8:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a8cc:	da2c      	bge.n	800a928 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a8ce:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a8d2:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a8d6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a8da:	f102 0408 	add.w	r4, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a8de:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a8e2:	da21      	bge.n	800a928 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a8e4:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a8e8:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a8ec:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a8f0:	f102 0409 	add.w	r4, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a8f4:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a8f8:	da16      	bge.n	800a928 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a8fa:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    int pixel_y = y_base + y;
 800a8fe:	f102 050a 	add.w	r5, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a902:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a906:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a90a:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800a90e:	da0b      	bge.n	800a928 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a910:	ebc5 1405 	rsb	r4, r5, r5, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a914:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a918:	b29d      	uxth	r5, r3
 800a91a:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 800a91e:	ea4f 1444 	mov.w	r4, r4, lsl #5
 800a922:	f820 5011 	strh.w	r5, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a926:	d32b      	bcc.n	800a980 <copy_5+0x224>
    int pixel_y = y_base + y;
 800a928:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a92a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800a92e:	bf2c      	ite	cs
 800a930:	2100      	movcs	r1, #0
 800a932:	2101      	movcc	r1, #1
 800a934:	b159      	cbz	r1, 800a94e <copy_5+0x1f2>
 800a936:	9c00      	ldr	r4, [sp, #0]
 800a938:	2c00      	cmp	r4, #0
 800a93a:	d14a      	bne.n	800a9d2 <copy_5+0x276>
 800a93c:	b139      	cbz	r1, 800a94e <copy_5+0x1f2>
 800a93e:	9c01      	ldr	r4, [sp, #4]
 800a940:	2c00      	cmp	r4, #0
 800a942:	d13f      	bne.n	800a9c4 <copy_5+0x268>
 800a944:	b119      	cbz	r1, 800a94e <copy_5+0x1f2>
 800a946:	9c02      	ldr	r4, [sp, #8]
 800a948:	bbac      	cbnz	r4, 800a9b6 <copy_5+0x25a>
 800a94a:	b101      	cbz	r1, 800a94e <copy_5+0x1f2>
 800a94c:	bb57      	cbnz	r7, 800a9a4 <copy_5+0x248>
    fill_pixel(buffer, x, y, 5, 8, color);
    fill_pixel(buffer, x, y, 5, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    fill_pixel(buffer, x, y, 0, 10, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800a94e:	b005      	add	sp, #20
 800a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a954:	1dd4      	adds	r4, r2, #7
 800a956:	d574      	bpl.n	800aa42 <copy_5+0x2e6>
 800a958:	f112 0408 	adds.w	r4, r2, #8
 800a95c:	d560      	bpl.n	800aa20 <copy_5+0x2c4>
 800a95e:	f112 0409 	adds.w	r4, r2, #9
 800a962:	d564      	bpl.n	800aa2e <copy_5+0x2d2>
    int pixel_y = y_base + y;
 800a964:	f102 040a 	add.w	r4, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a968:	2c00      	cmp	r4, #0
    int pixel_y = y_base + y;
 800a96a:	4625      	mov	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a96c:	da45      	bge.n	800a9fa <copy_5+0x29e>
 800a96e:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a972:	d2d9      	bcs.n	800a928 <copy_5+0x1cc>
 800a974:	2e00      	cmp	r6, #0
 800a976:	d0d7      	beq.n	800a928 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a978:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a97c:	b29d      	uxth	r5, r3
 800a97e:	0164      	lsls	r4, r4, #5
 800a980:	4474      	add	r4, lr
 800a982:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
 800a986:	e7cf      	b.n	800a928 <copy_5+0x1cc>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a988:	1c94      	adds	r4, r2, #2
 800a98a:	d402      	bmi.n	800a992 <copy_5+0x236>
 800a98c:	2e00      	cmp	r6, #0
 800a98e:	f47f af50 	bne.w	800a832 <copy_5+0xd6>
 800a992:	1cd4      	adds	r4, r2, #3
 800a994:	d525      	bpl.n	800a9e2 <copy_5+0x286>
 800a996:	1d14      	adds	r4, r2, #4
 800a998:	f53f af68 	bmi.w	800a86c <copy_5+0x110>
 800a99c:	2e00      	cmp	r6, #0
 800a99e:	f43f af65 	beq.w	800a86c <copy_5+0x110>
 800a9a2:	e75a      	b.n	800a85a <copy_5+0xfe>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a9a4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800a9a8:	eb08 1242 	add.w	r2, r8, r2, lsl #5
 800a9ac:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800a9b0:	b005      	add	sp, #20
 800a9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a9b6:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800a9ba:	eb09 1444 	add.w	r4, r9, r4, lsl #5
 800a9be:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a9c2:	e7c2      	b.n	800a94a <copy_5+0x1ee>
 800a9c4:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800a9c8:	eb0a 1444 	add.w	r4, sl, r4, lsl #5
 800a9cc:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a9d0:	e7b8      	b.n	800a944 <copy_5+0x1e8>
 800a9d2:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800a9d6:	9d03      	ldr	r5, [sp, #12]
 800a9d8:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 800a9dc:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a9e0:	e7ac      	b.n	800a93c <copy_5+0x1e0>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a9e2:	2e00      	cmp	r6, #0
 800a9e4:	f47f af2f 	bne.w	800a846 <copy_5+0xea>
 800a9e8:	1d14      	adds	r4, r2, #4
 800a9ea:	f53f af3f 	bmi.w	800a86c <copy_5+0x110>
 800a9ee:	e7d5      	b.n	800a99c <copy_5+0x240>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a9f0:	eb0c 070e 	add.w	r7, ip, lr
 800a9f4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800a9f8:	e6c9      	b.n	800a78e <copy_5+0x32>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a9fa:	f1bb 0f00 	cmp.w	fp, #0
 800a9fe:	d184      	bne.n	800a90a <copy_5+0x1ae>
 800aa00:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800aa04:	d3b6      	bcc.n	800a974 <copy_5+0x218>
 800aa06:	e78f      	b.n	800a928 <copy_5+0x1cc>
 800aa08:	240001b8 	.word	0x240001b8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aa0c:	eb0c 0b08 	add.w	fp, ip, r8
 800aa10:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800aa14:	e6ee      	b.n	800a7f4 <copy_5+0x98>
 800aa16:	eb01 040c 	add.w	r4, r1, ip
 800aa1a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800aa1e:	e6f8      	b.n	800a812 <copy_5+0xb6>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aa20:	f1bb 0f00 	cmp.w	fp, #0
 800aa24:	f47f af5b 	bne.w	800a8de <copy_5+0x182>
 800aa28:	f112 0409 	adds.w	r4, r2, #9
 800aa2c:	d49a      	bmi.n	800a964 <copy_5+0x208>
 800aa2e:	f1bb 0f00 	cmp.w	fp, #0
 800aa32:	f47f af5f 	bne.w	800a8f4 <copy_5+0x198>
    int pixel_y = y_base + y;
 800aa36:	f102 040a 	add.w	r4, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aa3a:	2c00      	cmp	r4, #0
    int pixel_y = y_base + y;
 800aa3c:	4625      	mov	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aa3e:	db96      	blt.n	800a96e <copy_5+0x212>
 800aa40:	e7db      	b.n	800a9fa <copy_5+0x29e>
 800aa42:	f1bb 0f00 	cmp.w	fp, #0
 800aa46:	f47f af3f 	bne.w	800a8c8 <copy_5+0x16c>
 800aa4a:	f112 0408 	adds.w	r4, r2, #8
 800aa4e:	d486      	bmi.n	800a95e <copy_5+0x202>
 800aa50:	e7e6      	b.n	800aa20 <copy_5+0x2c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aa52:	eb0c 070a 	add.w	r7, ip, sl
 800aa56:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800aa5a:	e6b2      	b.n	800a7c2 <copy_5+0x66>
 800aa5c:	9f03      	ldr	r7, [sp, #12]
 800aa5e:	4467      	add	r7, ip
 800aa60:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800aa64:	e6a0      	b.n	800a7a8 <copy_5+0x4c>
 800aa66:	eb0c 0709 	add.w	r7, ip, r9
 800aa6a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800aa6e:	e6b5      	b.n	800a7dc <copy_5+0x80>
 800aa70:	9d03      	ldr	r5, [sp, #12]
 800aa72:	4465      	add	r5, ip
 800aa74:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800aa78:	e709      	b.n	800a88e <copy_5+0x132>
 800aa7a:	eb0c 050e 	add.w	r5, ip, lr
 800aa7e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800aa82:	e6ff      	b.n	800a884 <copy_5+0x128>
 800aa84:	eb0c 0509 	add.w	r5, ip, r9
 800aa88:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800aa8c:	e709      	b.n	800a8a2 <copy_5+0x146>
 800aa8e:	44c4      	add	ip, r8
 800aa90:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800aa94:	e709      	b.n	800a8aa <copy_5+0x14e>
 800aa96:	eb0c 050a 	add.w	r5, ip, sl
 800aa9a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800aa9e:	e6fb      	b.n	800a898 <copy_5+0x13c>

0800aaa0 <copy_6>:

void copy_6(uint16_t* buffer, int x, int y, uint32_t color)
{
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800aaa4:	4c9c      	ldr	r4, [pc, #624]	@ (800ad18 <copy_6+0x278>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aaa6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800aaaa:	b08f      	sub	sp, #60	@ 0x3c
    int pixel_x = x_base + x + offset;
 800aaac:	6825      	ldr	r5, [r4, #0]
 800aaae:	f101 0401 	add.w	r4, r1, #1
 800aab2:	eb04 0705 	add.w	r7, r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aab6:	bf2c      	ite	cs
 800aab8:	2400      	movcs	r4, #0
 800aaba:	2401      	movcc	r4, #1
 800aabc:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800aac0:	9706      	str	r7, [sp, #24]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aac2:	bf2c      	ite	cs
 800aac4:	2600      	movcs	r6, #0
 800aac6:	2601      	movcc	r6, #1
 800aac8:	9601      	str	r6, [sp, #4]
 800aaca:	b114      	cbz	r4, 800aad2 <copy_6+0x32>
 800aacc:	2e00      	cmp	r6, #0
 800aace:	f040 8104 	bne.w	800acda <copy_6+0x23a>
    int pixel_x = x_base + x + offset;
 800aad2:	1c8e      	adds	r6, r1, #2
 800aad4:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aad6:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800aada:	9707      	str	r7, [sp, #28]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aadc:	bf2c      	ite	cs
 800aade:	2600      	movcs	r6, #0
 800aae0:	2601      	movcc	r6, #1
 800aae2:	9602      	str	r6, [sp, #8]
 800aae4:	b114      	cbz	r4, 800aaec <copy_6+0x4c>
 800aae6:	2e00      	cmp	r6, #0
 800aae8:	f040 80f0 	bne.w	800accc <copy_6+0x22c>
    int pixel_x = x_base + x + offset;
 800aaec:	1cce      	adds	r6, r1, #3
 800aaee:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aaf0:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800aaf4:	9708      	str	r7, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aaf6:	bf2c      	ite	cs
 800aaf8:	2600      	movcs	r6, #0
 800aafa:	2601      	movcc	r6, #1
 800aafc:	9603      	str	r6, [sp, #12]
 800aafe:	b114      	cbz	r4, 800ab06 <copy_6+0x66>
 800ab00:	2e00      	cmp	r6, #0
 800ab02:	f040 80dc 	bne.w	800acbe <copy_6+0x21e>
    int pixel_x = x_base + x + offset;
 800ab06:	1d0e      	adds	r6, r1, #4
 800ab08:	442e      	add	r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab0a:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800ab0e:	9605      	str	r6, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab10:	bf2c      	ite	cs
 800ab12:	f04f 0b00 	movcs.w	fp, #0
 800ab16:	f04f 0b01 	movcc.w	fp, #1
 800ab1a:	f1bb 0f00 	cmp.w	fp, #0
 800ab1e:	d002      	beq.n	800ab26 <copy_6+0x86>
 800ab20:	2c00      	cmp	r4, #0
 800ab22:	f040 80c5 	bne.w	800acb0 <copy_6+0x210>
    int pixel_x = x_base + x + offset;
 800ab26:	194e      	adds	r6, r1, r5
    int pixel_y = y_base + y;
 800ab28:	1c57      	adds	r7, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab2a:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800ab2e:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab30:	bf2c      	ite	cs
 800ab32:	2400      	movcs	r4, #0
 800ab34:	2401      	movcc	r4, #1
 800ab36:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800ab3a:	d202      	bcs.n	800ab42 <copy_6+0xa2>
 800ab3c:	2c00      	cmp	r4, #0
 800ab3e:	f040 80d3 	bne.w	800ace8 <copy_6+0x248>
    int pixel_y = y_base + y;
 800ab42:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab44:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800ab48:	d202      	bcs.n	800ab50 <copy_6+0xb0>
 800ab4a:	2c00      	cmp	r4, #0
 800ab4c:	f040 80f9 	bne.w	800ad42 <copy_6+0x2a2>
    int pixel_y = y_base + y;
 800ab50:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab52:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800ab56:	d202      	bcs.n	800ab5e <copy_6+0xbe>
 800ab58:	2c00      	cmp	r4, #0
 800ab5a:	f040 8112 	bne.w	800ad82 <copy_6+0x2e2>
    int pixel_y = y_base + y;
 800ab5e:	1d17      	adds	r7, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab60:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800ab64:	d202      	bcs.n	800ab6c <copy_6+0xcc>
 800ab66:	2c00      	cmp	r4, #0
 800ab68:	f040 8103 	bne.w	800ad72 <copy_6+0x2d2>
    int pixel_y = y_base + y;
 800ab6c:	f102 0c05 	add.w	ip, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab70:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800ab74:	d202      	bcs.n	800ab7c <copy_6+0xdc>
 800ab76:	2c00      	cmp	r4, #0
 800ab78:	f040 8123 	bne.w	800adc2 <copy_6+0x322>
    int pixel_y = y_base + y;
 800ab7c:	1d97      	adds	r7, r2, #6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ab7e:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab82:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800ab86:	970d      	str	r7, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab88:	bf2c      	ite	cs
 800ab8a:	2600      	movcs	r6, #0
 800ab8c:	2601      	movcc	r6, #1
 800ab8e:	9609      	str	r6, [sp, #36]	@ 0x24
 800ab90:	b114      	cbz	r4, 800ab98 <copy_6+0xf8>
 800ab92:	2e00      	cmp	r6, #0
 800ab94:	f040 810d 	bne.w	800adb2 <copy_6+0x312>
    int pixel_y = y_base + y;
 800ab98:	f102 0907 	add.w	r9, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab9c:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 800aba0:	bf2c      	ite	cs
 800aba2:	2600      	movcs	r6, #0
 800aba4:	2601      	movcc	r6, #1
 800aba6:	960a      	str	r6, [sp, #40]	@ 0x28
 800aba8:	b114      	cbz	r4, 800abb0 <copy_6+0x110>
 800abaa:	2e00      	cmp	r6, #0
 800abac:	f040 80f9 	bne.w	800ada2 <copy_6+0x302>
    int pixel_y = y_base + y;
 800abb0:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800abb4:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800abb8:	bf2c      	ite	cs
 800abba:	2600      	movcs	r6, #0
 800abbc:	2601      	movcc	r6, #1
 800abbe:	960b      	str	r6, [sp, #44]	@ 0x2c
 800abc0:	b114      	cbz	r4, 800abc8 <copy_6+0x128>
 800abc2:	2e00      	cmp	r6, #0
 800abc4:	f040 80e5 	bne.w	800ad92 <copy_6+0x2f2>
    int pixel_y = y_base + y;
 800abc8:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800abcc:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800abd0:	bf2c      	ite	cs
 800abd2:	2600      	movcs	r6, #0
 800abd4:	2601      	movcc	r6, #1
 800abd6:	960c      	str	r6, [sp, #48]	@ 0x30
 800abd8:	b114      	cbz	r4, 800abe0 <copy_6+0x140>
 800abda:	2e00      	cmp	r6, #0
 800abdc:	f040 80c1 	bne.w	800ad62 <copy_6+0x2c2>
    int pixel_y = y_base + y;
 800abe0:	f102 0a0a 	add.w	sl, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800abe4:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800abe8:	bf2c      	ite	cs
 800abea:	2600      	movcs	r6, #0
 800abec:	2601      	movcc	r6, #1
 800abee:	9604      	str	r6, [sp, #16]
 800abf0:	b116      	cbz	r6, 800abf8 <copy_6+0x158>
 800abf2:	2c00      	cmp	r4, #0
 800abf4:	f040 80ad 	bne.w	800ad52 <copy_6+0x2b2>
 800abf8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800abfc:	ebae 0e0c 	sub.w	lr, lr, ip
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac00:	bf2c      	ite	cs
 800ac02:	2400      	movcs	r4, #0
 800ac04:	2401      	movcc	r4, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ac06:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac0a:	b16c      	cbz	r4, 800ac28 <copy_6+0x188>
 800ac0c:	9e01      	ldr	r6, [sp, #4]
 800ac0e:	2e00      	cmp	r6, #0
 800ac10:	d176      	bne.n	800ad00 <copy_6+0x260>
 800ac12:	b14c      	cbz	r4, 800ac28 <copy_6+0x188>
 800ac14:	9e02      	ldr	r6, [sp, #8]
 800ac16:	2e00      	cmp	r6, #0
 800ac18:	d16d      	bne.n	800acf6 <copy_6+0x256>
 800ac1a:	b12c      	cbz	r4, 800ac28 <copy_6+0x188>
 800ac1c:	9e03      	ldr	r6, [sp, #12]
 800ac1e:	b11e      	cbz	r6, 800ac28 <copy_6+0x188>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ac20:	9e08      	ldr	r6, [sp, #32]
 800ac22:	4476      	add	r6, lr
 800ac24:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac28:	f1bb 0f00 	cmp.w	fp, #0
 800ac2c:	d001      	beq.n	800ac32 <copy_6+0x192>
 800ac2e:	2c00      	cmp	r4, #0
 800ac30:	d16d      	bne.n	800ad0e <copy_6+0x26e>
    int pixel_x = x_base + x + offset;
 800ac32:	3105      	adds	r1, #5
 800ac34:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac36:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800ac3a:	bf2c      	ite	cs
 800ac3c:	2400      	movcs	r4, #0
 800ac3e:	2401      	movcc	r4, #1
 800ac40:	b194      	cbz	r4, 800ac68 <copy_6+0x1c8>
 800ac42:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ac44:	2d00      	cmp	r5, #0
 800ac46:	f040 80c4 	bne.w	800add2 <copy_6+0x332>
 800ac4a:	b16c      	cbz	r4, 800ac68 <copy_6+0x1c8>
 800ac4c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ac4e:	2d00      	cmp	r5, #0
 800ac50:	f040 80d9 	bne.w	800ae06 <copy_6+0x366>
 800ac54:	b144      	cbz	r4, 800ac68 <copy_6+0x1c8>
 800ac56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ac58:	2d00      	cmp	r5, #0
 800ac5a:	f040 80cd 	bne.w	800adf8 <copy_6+0x358>
 800ac5e:	b11c      	cbz	r4, 800ac68 <copy_6+0x1c8>
 800ac60:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800ac62:	2d00      	cmp	r5, #0
 800ac64:	f040 80bd 	bne.w	800ade2 <copy_6+0x342>
 800ac68:	9d04      	ldr	r5, [sp, #16]
 800ac6a:	b115      	cbz	r5, 800ac72 <copy_6+0x1d2>
 800ac6c:	2c00      	cmp	r4, #0
 800ac6e:	f040 80d1 	bne.w	800ae14 <copy_6+0x374>
 800ac72:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ac74:	f50e 6e34 	add.w	lr, lr, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac78:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800ac7c:	bf2c      	ite	cs
 800ac7e:	2200      	movcs	r2, #0
 800ac80:	2201      	movcc	r2, #1
 800ac82:	b16a      	cbz	r2, 800aca0 <copy_6+0x200>
 800ac84:	9901      	ldr	r1, [sp, #4]
 800ac86:	2900      	cmp	r1, #0
 800ac88:	d14d      	bne.n	800ad26 <copy_6+0x286>
 800ac8a:	b14a      	cbz	r2, 800aca0 <copy_6+0x200>
 800ac8c:	9902      	ldr	r1, [sp, #8]
 800ac8e:	2900      	cmp	r1, #0
 800ac90:	d144      	bne.n	800ad1c <copy_6+0x27c>
 800ac92:	b12a      	cbz	r2, 800aca0 <copy_6+0x200>
 800ac94:	9903      	ldr	r1, [sp, #12]
 800ac96:	b119      	cbz	r1, 800aca0 <copy_6+0x200>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ac98:	9908      	ldr	r1, [sp, #32]
 800ac9a:	4471      	add	r1, lr
 800ac9c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aca0:	f1bb 0f00 	cmp.w	fp, #0
 800aca4:	d001      	beq.n	800acaa <copy_6+0x20a>
 800aca6:	2a00      	cmp	r2, #0
 800aca8:	d144      	bne.n	800ad34 <copy_6+0x294>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 5, color);
    for (int i = 6; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800acaa:	b00f      	add	sp, #60	@ 0x3c
 800acac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800acb0:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800acb4:	eb06 1444 	add.w	r4, r6, r4, lsl #5
 800acb8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800acbc:	e733      	b.n	800ab26 <copy_6+0x86>
 800acbe:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800acc2:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800acc6:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800acca:	e71c      	b.n	800ab06 <copy_6+0x66>
 800accc:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800acd0:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800acd4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800acd8:	e708      	b.n	800aaec <copy_6+0x4c>
 800acda:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800acde:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800ace2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800ace6:	e6f4      	b.n	800aad2 <copy_6+0x32>
 800ace8:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800acec:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800acf0:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800acf4:	e725      	b.n	800ab42 <copy_6+0xa2>
 800acf6:	9e07      	ldr	r6, [sp, #28]
 800acf8:	4476      	add	r6, lr
 800acfa:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800acfe:	e78c      	b.n	800ac1a <copy_6+0x17a>
 800ad00:	9e06      	ldr	r6, [sp, #24]
 800ad02:	4476      	add	r6, lr
 800ad04:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ad08:	2c00      	cmp	r4, #0
 800ad0a:	d183      	bne.n	800ac14 <copy_6+0x174>
 800ad0c:	e78c      	b.n	800ac28 <copy_6+0x188>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ad0e:	9c05      	ldr	r4, [sp, #20]
 800ad10:	4474      	add	r4, lr
 800ad12:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800ad16:	e78c      	b.n	800ac32 <copy_6+0x192>
 800ad18:	240001b8 	.word	0x240001b8
 800ad1c:	9907      	ldr	r1, [sp, #28]
 800ad1e:	4471      	add	r1, lr
 800ad20:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800ad24:	e7b5      	b.n	800ac92 <copy_6+0x1f2>
 800ad26:	9906      	ldr	r1, [sp, #24]
 800ad28:	4471      	add	r1, lr
 800ad2a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ad2e:	2a00      	cmp	r2, #0
 800ad30:	d1ac      	bne.n	800ac8c <copy_6+0x1ec>
 800ad32:	e7b5      	b.n	800aca0 <copy_6+0x200>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ad34:	9a05      	ldr	r2, [sp, #20]
 800ad36:	4472      	add	r2, lr
 800ad38:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800ad3c:	b00f      	add	sp, #60	@ 0x3c
 800ad3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ad42:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800ad46:	9e00      	ldr	r6, [sp, #0]
 800ad48:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ad4c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ad50:	e6fe      	b.n	800ab50 <copy_6+0xb0>
 800ad52:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 800ad56:	9e00      	ldr	r6, [sp, #0]
 800ad58:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800ad5c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800ad60:	e74a      	b.n	800abf8 <copy_6+0x158>
 800ad62:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 800ad66:	9e00      	ldr	r6, [sp, #0]
 800ad68:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 800ad6c:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 800ad70:	e736      	b.n	800abe0 <copy_6+0x140>
 800ad72:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800ad76:	9e00      	ldr	r6, [sp, #0]
 800ad78:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ad7c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ad80:	e6f4      	b.n	800ab6c <copy_6+0xcc>
 800ad82:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800ad86:	9e00      	ldr	r6, [sp, #0]
 800ad88:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ad8c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ad90:	e6e5      	b.n	800ab5e <copy_6+0xbe>
 800ad92:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 800ad96:	9e00      	ldr	r6, [sp, #0]
 800ad98:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ad9c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ada0:	e712      	b.n	800abc8 <copy_6+0x128>
 800ada2:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 800ada6:	9e00      	ldr	r6, [sp, #0]
 800ada8:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800adac:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800adb0:	e6fe      	b.n	800abb0 <copy_6+0x110>
 800adb2:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800adb6:	9e00      	ldr	r6, [sp, #0]
 800adb8:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800adbc:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800adc0:	e6ea      	b.n	800ab98 <copy_6+0xf8>
 800adc2:	ebcc 170c 	rsb	r7, ip, ip, lsl #4
 800adc6:	9e00      	ldr	r6, [sp, #0]
 800adc8:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800adcc:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800add0:	e6d4      	b.n	800ab7c <copy_6+0xdc>
 800add2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800add4:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800add8:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800addc:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800ade0:	e733      	b.n	800ac4a <copy_6+0x1aa>
 800ade2:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ade6:	9d04      	ldr	r5, [sp, #16]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ade8:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 800adec:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800adf0:	2d00      	cmp	r5, #0
 800adf2:	f47f af3b 	bne.w	800ac6c <copy_6+0x1cc>
 800adf6:	e73c      	b.n	800ac72 <copy_6+0x1d2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800adf8:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800adfc:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 800ae00:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800ae04:	e72b      	b.n	800ac5e <copy_6+0x1be>
 800ae06:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 800ae0a:	eb01 1949 	add.w	r9, r1, r9, lsl #5
 800ae0e:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800ae12:	e71f      	b.n	800ac54 <copy_6+0x1b4>
 800ae14:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 800ae18:	eb01 114a 	add.w	r1, r1, sl, lsl #5
 800ae1c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800ae20:	e727      	b.n	800ac72 <copy_6+0x1d2>
 800ae22:	bf00      	nop

0800ae24 <copy_7>:

void copy_7(uint16_t* buffer, int x, int y, uint32_t color)
{
 800ae24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800ae28:	4ca2      	ldr	r4, [pc, #648]	@ (800b0b4 <copy_7+0x290>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ae2a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ae2e:	ebc2 1802 	rsb	r8, r2, r2, lsl #4
{
 800ae32:	b083      	sub	sp, #12
    int pixel_x = x_base + x + offset;
 800ae34:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ae36:	bf2c      	ite	cs
 800ae38:	2500      	movcs	r5, #0
 800ae3a:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ae3c:	ea4f 1848 	mov.w	r8, r8, lsl #5
    int pixel_x = x_base + x + offset;
 800ae40:	190e      	adds	r6, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ae42:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800ae46:	d202      	bcs.n	800ae4e <copy_7+0x2a>
 800ae48:	2d00      	cmp	r5, #0
 800ae4a:	f040 811a 	bne.w	800b082 <copy_7+0x25e>
    int pixel_x = x_base + x + offset;
 800ae4e:	1c4f      	adds	r7, r1, #1
 800ae50:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ae52:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800ae56:	bf2c      	ite	cs
 800ae58:	f04f 0a00 	movcs.w	sl, #0
 800ae5c:	f04f 0a01 	movcc.w	sl, #1
 800ae60:	b11d      	cbz	r5, 800ae6a <copy_7+0x46>
 800ae62:	f1ba 0f00 	cmp.w	sl, #0
 800ae66:	f040 8107 	bne.w	800b078 <copy_7+0x254>
    int pixel_x = x_base + x + offset;
 800ae6a:	f101 0e02 	add.w	lr, r1, #2
 800ae6e:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ae70:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800ae74:	bf2c      	ite	cs
 800ae76:	2600      	movcs	r6, #0
 800ae78:	2601      	movcc	r6, #1
 800ae7a:	9601      	str	r6, [sp, #4]
 800ae7c:	b115      	cbz	r5, 800ae84 <copy_7+0x60>
 800ae7e:	2e00      	cmp	r6, #0
 800ae80:	f040 8103 	bne.w	800b08a <copy_7+0x266>
    int pixel_x = x_base + x + offset;
 800ae84:	1cce      	adds	r6, r1, #3
 800ae86:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ae88:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800ae8c:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ae8e:	bf2c      	ite	cs
 800ae90:	f04f 0900 	movcs.w	r9, #0
 800ae94:	f04f 0901 	movcc.w	r9, #1
 800ae98:	f1b9 0f00 	cmp.w	r9, #0
 800ae9c:	d002      	beq.n	800aea4 <copy_7+0x80>
 800ae9e:	2d00      	cmp	r5, #0
 800aea0:	f040 80dc 	bne.w	800b05c <copy_7+0x238>
    int pixel_x = x_base + x + offset;
 800aea4:	f101 0c04 	add.w	ip, r1, #4
 800aea8:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aeaa:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800aeae:	bf2c      	ite	cs
 800aeb0:	f04f 0b00 	movcs.w	fp, #0
 800aeb4:	f04f 0b01 	movcc.w	fp, #1
 800aeb8:	b11d      	cbz	r5, 800aec2 <copy_7+0x9e>
 800aeba:	f1bb 0f00 	cmp.w	fp, #0
 800aebe:	f040 80d6 	bne.w	800b06e <copy_7+0x24a>
    int pixel_x = x_base + x + offset;
 800aec2:	3105      	adds	r1, #5
 800aec4:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aec6:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800aeca:	bf2c      	ite	cs
 800aecc:	2400      	movcs	r4, #0
 800aece:	2401      	movcc	r4, #1
 800aed0:	b114      	cbz	r4, 800aed8 <copy_7+0xb4>
 800aed2:	2d00      	cmp	r5, #0
 800aed4:	f040 80c7 	bne.w	800b066 <copy_7+0x242>
 800aed8:	1c55      	adds	r5, r2, #1
 800aeda:	f100 8086 	bmi.w	800afea <copy_7+0x1c6>
 800aede:	2c00      	cmp	r4, #0
 800aee0:	f000 8083 	beq.w	800afea <copy_7+0x1c6>
 800aee4:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800aee8:	f280 80aa 	bge.w	800b040 <copy_7+0x21c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aeec:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800aef0:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800aef4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 800aef8:	1c95      	adds	r5, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aefa:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800aefe:	da05      	bge.n	800af0c <copy_7+0xe8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800af00:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800af04:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800af08:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af0c:	1cd1      	adds	r1, r2, #3
 800af0e:	db72      	blt.n	800aff6 <copy_7+0x1d2>
 800af10:	f1bb 0f00 	cmp.w	fp, #0
 800af14:	d06f      	beq.n	800aff6 <copy_7+0x1d2>
 800af16:	f5b2 7f86 	cmp.w	r2, #268	@ 0x10c
 800af1a:	f300 8094 	bgt.w	800b046 <copy_7+0x222>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800af1e:	1cd1      	adds	r1, r2, #3
 800af20:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800af24:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800af28:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800af2c:	1d11      	adds	r1, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af2e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800af32:	da05      	bge.n	800af40 <copy_7+0x11c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800af34:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800af38:	eb0c 1c41 	add.w	ip, ip, r1, lsl #5
 800af3c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af40:	1d51      	adds	r1, r2, #5
 800af42:	d45f      	bmi.n	800b004 <copy_7+0x1e0>
 800af44:	f1b9 0f00 	cmp.w	r9, #0
 800af48:	d05c      	beq.n	800b004 <copy_7+0x1e0>
 800af4a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800af4e:	da7e      	bge.n	800b04e <copy_7+0x22a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800af50:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800af54:	9c00      	ldr	r4, [sp, #0]
 800af56:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 800af5a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800af5e:	1d91      	adds	r1, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af60:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800af64:	da06      	bge.n	800af74 <copy_7+0x150>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800af66:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800af6a:	9c00      	ldr	r4, [sp, #0]
 800af6c:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 800af70:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af74:	1dd1      	adds	r1, r2, #7
 800af76:	d44c      	bmi.n	800b012 <copy_7+0x1ee>
 800af78:	9c01      	ldr	r4, [sp, #4]
 800af7a:	2c00      	cmp	r4, #0
 800af7c:	d049      	beq.n	800b012 <copy_7+0x1ee>
 800af7e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800af82:	da2f      	bge.n	800afe4 <copy_7+0x1c0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800af84:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800af88:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 800af8c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800af90:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af94:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800af98:	da05      	bge.n	800afa6 <copy_7+0x182>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800af9a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800af9e:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 800afa2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800afa6:	f112 0109 	adds.w	r1, r2, #9
 800afaa:	d43b      	bmi.n	800b024 <copy_7+0x200>
 800afac:	f1ba 0f00 	cmp.w	sl, #0
 800afb0:	d038      	beq.n	800b024 <copy_7+0x200>
 800afb2:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800afb6:	da15      	bge.n	800afe4 <copy_7+0x1c0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800afb8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800afbc:	eb07 1141 	add.w	r1, r7, r1, lsl #5
 800afc0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800afc4:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800afc8:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 800afcc:	f102 020b 	add.w	r2, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800afd0:	db60      	blt.n	800b094 <copy_7+0x270>
 800afd2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800afd6:	da05      	bge.n	800afe4 <copy_7+0x1c0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800afd8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800afdc:	eb07 1242 	add.w	r2, r7, r2, lsl #5
 800afe0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 2, 7, color);
    fill_pixel(buffer, x, y, 2, 8, color);
    fill_pixel(buffer, x, y, 1, 9, color);
    fill_pixel(buffer, x, y, 1, 10, color);
    fill_pixel(buffer, x, y, 1, 11, color);
}
 800afe4:	b003      	add	sp, #12
 800afe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800afea:	1c95      	adds	r5, r2, #2
 800afec:	d48e      	bmi.n	800af0c <copy_7+0xe8>
 800afee:	2c00      	cmp	r4, #0
 800aff0:	d183      	bne.n	800aefa <copy_7+0xd6>
 800aff2:	1cd1      	adds	r1, r2, #3
 800aff4:	da8c      	bge.n	800af10 <copy_7+0xec>
 800aff6:	1d11      	adds	r1, r2, #4
 800aff8:	d4a2      	bmi.n	800af40 <copy_7+0x11c>
 800affa:	f1bb 0f00 	cmp.w	fp, #0
 800affe:	d196      	bne.n	800af2e <copy_7+0x10a>
 800b000:	1d51      	adds	r1, r2, #5
 800b002:	d59f      	bpl.n	800af44 <copy_7+0x120>
 800b004:	1d91      	adds	r1, r2, #6
 800b006:	d4b5      	bmi.n	800af74 <copy_7+0x150>
 800b008:	f1b9 0f00 	cmp.w	r9, #0
 800b00c:	d1a8      	bne.n	800af60 <copy_7+0x13c>
 800b00e:	1dd1      	adds	r1, r2, #7
 800b010:	d5b2      	bpl.n	800af78 <copy_7+0x154>
 800b012:	f112 0108 	adds.w	r1, r2, #8
 800b016:	d4c6      	bmi.n	800afa6 <copy_7+0x182>
 800b018:	9c01      	ldr	r4, [sp, #4]
 800b01a:	2c00      	cmp	r4, #0
 800b01c:	d1ba      	bne.n	800af94 <copy_7+0x170>
 800b01e:	f112 0109 	adds.w	r1, r2, #9
 800b022:	d5c3      	bpl.n	800afac <copy_7+0x188>
 800b024:	f112 010a 	adds.w	r1, r2, #10
 800b028:	d402      	bmi.n	800b030 <copy_7+0x20c>
 800b02a:	f1ba 0f00 	cmp.w	sl, #0
 800b02e:	d1cb      	bne.n	800afc8 <copy_7+0x1a4>
 800b030:	f112 0f0b 	cmn.w	r2, #11
 800b034:	dbd6      	blt.n	800afe4 <copy_7+0x1c0>
 800b036:	f1ba 0f00 	cmp.w	sl, #0
 800b03a:	d0d3      	beq.n	800afe4 <copy_7+0x1c0>
    int pixel_y = y_base + y;
 800b03c:	320b      	adds	r2, #11
 800b03e:	e7c8      	b.n	800afd2 <copy_7+0x1ae>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b040:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800b044:	d231      	bcs.n	800b0aa <copy_7+0x286>
 800b046:	9900      	ldr	r1, [sp, #0]
 800b048:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800b04c:	d229      	bcs.n	800b0a2 <copy_7+0x27e>
 800b04e:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800b052:	d3c7      	bcc.n	800afe4 <copy_7+0x1c0>
 800b054:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800b058:	d3c4      	bcc.n	800afe4 <copy_7+0x1c0>
 800b05a:	e7e3      	b.n	800b024 <copy_7+0x200>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b05c:	eb08 0c06 	add.w	ip, r8, r6
 800b060:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800b064:	e71e      	b.n	800aea4 <copy_7+0x80>
 800b066:	4488      	add	r8, r1
 800b068:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800b06c:	e734      	b.n	800aed8 <copy_7+0xb4>
 800b06e:	eb08 060c 	add.w	r6, r8, ip
 800b072:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b076:	e724      	b.n	800aec2 <copy_7+0x9e>
 800b078:	eb08 0607 	add.w	r6, r8, r7
 800b07c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b080:	e6f3      	b.n	800ae6a <copy_7+0x46>
 800b082:	4446      	add	r6, r8
 800b084:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b088:	e6e1      	b.n	800ae4e <copy_7+0x2a>
 800b08a:	eb08 060e 	add.w	r6, r8, lr
 800b08e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b092:	e6f7      	b.n	800ae84 <copy_7+0x60>
 800b094:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800b098:	eb07 1141 	add.w	r1, r7, r1, lsl #5
 800b09c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b0a0:	e797      	b.n	800afd2 <copy_7+0x1ae>
 800b0a2:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800b0a6:	d39d      	bcc.n	800afe4 <copy_7+0x1c0>
 800b0a8:	e7b3      	b.n	800b012 <copy_7+0x1ee>
 800b0aa:	9900      	ldr	r1, [sp, #0]
 800b0ac:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800b0b0:	d3cd      	bcc.n	800b04e <copy_7+0x22a>
 800b0b2:	e7a7      	b.n	800b004 <copy_7+0x1e0>
 800b0b4:	240001b8 	.word	0x240001b8

0800b0b8 <copy_8>:

void copy_8(uint16_t* buffer, int x, int y, uint32_t color)
{
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800b0bc:	4c4a      	ldr	r4, [pc, #296]	@ (800b1e8 <copy_8+0x130>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b0be:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800b0c2:	b08d      	sub	sp, #52	@ 0x34
    int pixel_x = x_base + x + offset;
 800b0c4:	6826      	ldr	r6, [r4, #0]
 800b0c6:	f101 0401 	add.w	r4, r1, #1
 800b0ca:	eb04 0706 	add.w	r7, r4, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b0ce:	bf2c      	ite	cs
 800b0d0:	2400      	movcs	r4, #0
 800b0d2:	2401      	movcc	r4, #1
 800b0d4:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b0d8:	970a      	str	r7, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b0da:	bf2c      	ite	cs
 800b0dc:	2500      	movcs	r5, #0
 800b0de:	2501      	movcc	r5, #1
 800b0e0:	9504      	str	r5, [sp, #16]
 800b0e2:	b115      	cbz	r5, 800b0ea <copy_8+0x32>
 800b0e4:	2c00      	cmp	r4, #0
 800b0e6:	f040 817d 	bne.w	800b3e4 <copy_8+0x32c>
    int pixel_x = x_base + x + offset;
 800b0ea:	1c8d      	adds	r5, r1, #2
 800b0ec:	19af      	adds	r7, r5, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b0ee:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b0f2:	9708      	str	r7, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b0f4:	bf2c      	ite	cs
 800b0f6:	2500      	movcs	r5, #0
 800b0f8:	2501      	movcc	r5, #1
 800b0fa:	9503      	str	r5, [sp, #12]
 800b0fc:	b115      	cbz	r5, 800b104 <copy_8+0x4c>
 800b0fe:	2c00      	cmp	r4, #0
 800b100:	f040 8162 	bne.w	800b3c8 <copy_8+0x310>
    int pixel_x = x_base + x + offset;
 800b104:	1ccd      	adds	r5, r1, #3
 800b106:	19af      	adds	r7, r5, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b108:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b10c:	970b      	str	r7, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b10e:	bf2c      	ite	cs
 800b110:	2500      	movcs	r5, #0
 800b112:	2501      	movcc	r5, #1
 800b114:	9507      	str	r5, [sp, #28]
 800b116:	b114      	cbz	r4, 800b11e <copy_8+0x66>
 800b118:	2d00      	cmp	r5, #0
 800b11a:	f040 815c 	bne.w	800b3d6 <copy_8+0x31e>
    int pixel_x = x_base + x + offset;
 800b11e:	1d0d      	adds	r5, r1, #4
 800b120:	4435      	add	r5, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b122:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b126:	9509      	str	r5, [sp, #36]	@ 0x24
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b128:	bf2c      	ite	cs
 800b12a:	2700      	movcs	r7, #0
 800b12c:	2701      	movcc	r7, #1
 800b12e:	9702      	str	r7, [sp, #8]
 800b130:	b117      	cbz	r7, 800b138 <copy_8+0x80>
 800b132:	2c00      	cmp	r4, #0
 800b134:	f040 813d 	bne.w	800b3b2 <copy_8+0x2fa>
    int pixel_x = x_base + x + offset;
 800b138:	eb01 0b06 	add.w	fp, r1, r6
    int pixel_y = y_base + y;
 800b13c:	f102 0c01 	add.w	ip, r2, #1
 800b140:	1d17      	adds	r7, r2, #4
 800b142:	f102 0e03 	add.w	lr, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b146:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 800b14a:	ea6f 050c 	mvn.w	r5, ip
    int pixel_y = y_base + y;
 800b14e:	f102 0802 	add.w	r8, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b152:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 800b156:	bf2c      	ite	cs
 800b158:	2400      	movcs	r4, #0
 800b15a:	2401      	movcc	r4, #1
 800b15c:	9506      	str	r5, [sp, #24]
 800b15e:	4025      	ands	r5, r4
 800b160:	d044      	beq.n	800b1ec <copy_8+0x134>
 800b162:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800b166:	f280 8118 	bge.w	800b39a <copy_8+0x2e2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b16a:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
 800b16e:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 800b172:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b176:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800b17a:	f280 81f7 	bge.w	800b56c <copy_8+0x4b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b17e:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
 800b182:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 800b186:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b18a:	2501      	movs	r5, #1
 800b18c:	9505      	str	r5, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b18e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800b192:	f280 81ed 	bge.w	800b570 <copy_8+0x4b8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b196:	ebce 150e 	rsb	r5, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b19a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b19e:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 800b1a2:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1a6:	f000 81eb 	beq.w	800b580 <copy_8+0x4c8>
    int pixel_x = x_base + x + offset;
 800b1aa:	3105      	adds	r1, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b1ac:	ebc7 1507 	rsb	r5, r7, r7, lsl #4
    int pixel_x = x_base + x + offset;
 800b1b0:	198e      	adds	r6, r1, r6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b1b2:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 800b1b6:	b299      	uxth	r1, r3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1b8:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b1bc:	9601      	str	r6, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b1be:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1c2:	9e06      	ldr	r6, [sp, #24]
 800b1c4:	bf2c      	ite	cs
 800b1c6:	2500      	movcs	r5, #0
 800b1c8:	2501      	movcc	r5, #1
 800b1ca:	ea16 0a05 	ands.w	sl, r6, r5
 800b1ce:	f000 81b6 	beq.w	800b53e <copy_8+0x486>
 800b1d2:	46d1      	mov	r9, sl
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b1d4:	9d01      	ldr	r5, [sp, #4]
 800b1d6:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800b1da:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 800b1de:	2501      	movs	r5, #1
 800b1e0:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
 800b1e4:	e033      	b.n	800b24e <copy_8+0x196>
 800b1e6:	bf00      	nop
 800b1e8:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1ec:	f112 0f02 	cmn.w	r2, #2
 800b1f0:	bfb4      	ite	lt
 800b1f2:	2500      	movlt	r5, #0
 800b1f4:	2501      	movge	r5, #1
 800b1f6:	9505      	str	r5, [sp, #20]
 800b1f8:	b10d      	cbz	r5, 800b1fe <copy_8+0x146>
 800b1fa:	2c00      	cmp	r4, #0
 800b1fc:	d1bb      	bne.n	800b176 <copy_8+0xbe>
 800b1fe:	1cd5      	adds	r5, r2, #3
 800b200:	bfb4      	ite	lt
 800b202:	f04f 0900 	movlt.w	r9, #0
 800b206:	f04f 0901 	movge.w	r9, #1
 800b20a:	f1b9 0f00 	cmp.w	r9, #0
 800b20e:	f040 80d7 	bne.w	800b3c0 <copy_8+0x308>
 800b212:	1d15      	adds	r5, r2, #4
 800b214:	bfb4      	ite	lt
 800b216:	f04f 0a00 	movlt.w	sl, #0
 800b21a:	f04f 0a01 	movge.w	sl, #1
 800b21e:	ea1a 0504 	ands.w	r5, sl, r4
 800b222:	f040 81c9 	bne.w	800b5b8 <copy_8+0x500>
    int pixel_x = x_base + x + offset;
 800b226:	3105      	adds	r1, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b228:	9d06      	ldr	r5, [sp, #24]
    int pixel_x = x_base + x + offset;
 800b22a:	4431      	add	r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b22c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b230:	9101      	str	r1, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b232:	bf2c      	ite	cs
 800b234:	2100      	movcs	r1, #0
 800b236:	2101      	movcc	r1, #1
 800b238:	400d      	ands	r5, r1
 800b23a:	f040 80da 	bne.w	800b3f2 <copy_8+0x33a>
 800b23e:	9d05      	ldr	r5, [sp, #20]
 800b240:	ea0a 0a01 	and.w	sl, sl, r1
 800b244:	ea09 0901 	and.w	r9, r9, r1
 800b248:	400d      	ands	r5, r1
 800b24a:	9505      	str	r5, [sp, #20]
 800b24c:	460d      	mov	r5, r1
 800b24e:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800b252:	da08      	bge.n	800b266 <copy_8+0x1ae>
 800b254:	9905      	ldr	r1, [sp, #20]
 800b256:	b131      	cbz	r1, 800b266 <copy_8+0x1ae>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b258:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800b25c:	9901      	ldr	r1, [sp, #4]
 800b25e:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 800b262:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b266:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800b26a:	da09      	bge.n	800b280 <copy_8+0x1c8>
 800b26c:	f1b9 0f00 	cmp.w	r9, #0
 800b270:	d006      	beq.n	800b280 <copy_8+0x1c8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b272:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800b276:	9901      	ldr	r1, [sp, #4]
 800b278:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 800b27c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b280:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800b284:	da09      	bge.n	800b29a <copy_8+0x1e2>
 800b286:	f1ba 0f00 	cmp.w	sl, #0
 800b28a:	d006      	beq.n	800b29a <copy_8+0x1e2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b28c:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 800b290:	9e01      	ldr	r6, [sp, #4]
 800b292:	eb06 1141 	add.w	r1, r6, r1, lsl #5
 800b296:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800b29a:	1d51      	adds	r1, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b29c:	9f04      	ldr	r7, [sp, #16]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b29e:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b2a2:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b2a6:	ea4f 1646 	mov.w	r6, r6, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b2aa:	bf2c      	ite	cs
 800b2ac:	2100      	movcs	r1, #0
 800b2ae:	2101      	movcc	r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b2b0:	9606      	str	r6, [sp, #24]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b2b2:	b127      	cbz	r7, 800b2be <copy_8+0x206>
 800b2b4:	b119      	cbz	r1, 800b2be <copy_8+0x206>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b2b6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800b2b8:	443e      	add	r6, r7
 800b2ba:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b2be:	9e03      	ldr	r6, [sp, #12]
 800b2c0:	2e00      	cmp	r6, #0
 800b2c2:	f000 80f9 	beq.w	800b4b8 <copy_8+0x400>
 800b2c6:	2900      	cmp	r1, #0
 800b2c8:	f040 80f1 	bne.w	800b4ae <copy_8+0x3f6>
 800b2cc:	9e02      	ldr	r6, [sp, #8]
 800b2ce:	b12e      	cbz	r6, 800b2dc <copy_8+0x224>
 800b2d0:	b121      	cbz	r1, 800b2dc <copy_8+0x224>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b2d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2d4:	9e06      	ldr	r6, [sp, #24]
 800b2d6:	4431      	add	r1, r6
 800b2d8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800b2dc:	1d91      	adds	r1, r2, #6
 800b2de:	f102 0708 	add.w	r7, r2, #8
 800b2e2:	f102 0e0a 	add.w	lr, r2, #10
 800b2e6:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b2ea:	ea6f 0a01 	mvn.w	sl, r1
    int pixel_y = y_base + y;
 800b2ee:	9705      	str	r7, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b2f0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800b2f4:	2c00      	cmp	r4, #0
 800b2f6:	f000 8090 	beq.w	800b41a <copy_8+0x362>
 800b2fa:	f1ba 0f00 	cmp.w	sl, #0
 800b2fe:	f000 808c 	beq.w	800b41a <copy_8+0x362>
 800b302:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b306:	f2c0 80e4 	blt.w	800b4d2 <copy_8+0x41a>
 800b30a:	46a8      	mov	r8, r5
 800b30c:	46a9      	mov	r9, r5
 800b30e:	462c      	mov	r4, r5
 800b310:	9905      	ldr	r1, [sp, #20]
 800b312:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b316:	da09      	bge.n	800b32c <copy_8+0x274>
 800b318:	f1b8 0f00 	cmp.w	r8, #0
 800b31c:	d006      	beq.n	800b32c <copy_8+0x274>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b31e:	ebc1 1701 	rsb	r7, r1, r1, lsl #4
 800b322:	9901      	ldr	r1, [sp, #4]
 800b324:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 800b328:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b32c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800b330:	da09      	bge.n	800b346 <copy_8+0x28e>
 800b332:	f1b9 0f00 	cmp.w	r9, #0
 800b336:	d006      	beq.n	800b346 <copy_8+0x28e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b338:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800b33c:	9901      	ldr	r1, [sp, #4]
 800b33e:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 800b342:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b346:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800b34a:	da07      	bge.n	800b35c <copy_8+0x2a4>
 800b34c:	b134      	cbz	r4, 800b35c <copy_8+0x2a4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b34e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800b352:	9901      	ldr	r1, [sp, #4]
 800b354:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 800b358:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b35c:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b35e:	9906      	ldr	r1, [sp, #24]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b360:	9c04      	ldr	r4, [sp, #16]
 800b362:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b366:	f501 6134 	add.w	r1, r1, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b36a:	bf2c      	ite	cs
 800b36c:	2200      	movcs	r2, #0
 800b36e:	2201      	movcc	r2, #1
 800b370:	b124      	cbz	r4, 800b37c <copy_8+0x2c4>
 800b372:	b11a      	cbz	r2, 800b37c <copy_8+0x2c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b374:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b376:	440c      	add	r4, r1
 800b378:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b37c:	9c03      	ldr	r4, [sp, #12]
 800b37e:	2c00      	cmp	r4, #0
 800b380:	d041      	beq.n	800b406 <copy_8+0x34e>
 800b382:	2a00      	cmp	r2, #0
 800b384:	d13b      	bne.n	800b3fe <copy_8+0x346>
 800b386:	9c02      	ldr	r4, [sp, #8]
 800b388:	b124      	cbz	r4, 800b394 <copy_8+0x2dc>
 800b38a:	b11a      	cbz	r2, 800b394 <copy_8+0x2dc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b38c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b38e:	440a      	add	r2, r1
 800b390:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 5, 7, color);
    fill_pixel(buffer, x, y, 5, 8, color);
    fill_pixel(buffer, x, y, 5, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800b394:	b00d      	add	sp, #52	@ 0x34
 800b396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int pixel_x = x_base + x + offset;
 800b39a:	3105      	adds	r1, #5
 800b39c:	4431      	add	r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b39e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b3a2:	9101      	str	r1, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b3a4:	f4ff af79 	bcc.w	800b29a <copy_8+0x1e2>
 800b3a8:	f04f 0900 	mov.w	r9, #0
 800b3ac:	46ca      	mov	sl, r9
 800b3ae:	464d      	mov	r5, r9
 800b3b0:	e759      	b.n	800b266 <copy_8+0x1ae>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b3b2:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800b3b6:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 800b3ba:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800b3be:	e6bb      	b.n	800b138 <copy_8+0x80>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b3c0:	2c00      	cmp	r4, #0
 800b3c2:	f43f af26 	beq.w	800b212 <copy_8+0x15a>
 800b3c6:	e6e2      	b.n	800b18e <copy_8+0xd6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b3c8:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800b3cc:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 800b3d0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b3d4:	e696      	b.n	800b104 <copy_8+0x4c>
 800b3d6:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800b3da:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 800b3de:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b3e2:	e69c      	b.n	800b11e <copy_8+0x66>
 800b3e4:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800b3e8:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 800b3ec:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b3f0:	e67b      	b.n	800b0ea <copy_8+0x32>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b3f2:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800b3f6:	f6bf af2a 	bge.w	800b24e <copy_8+0x196>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b3fa:	b299      	uxth	r1, r3
 800b3fc:	e6ea      	b.n	800b1d4 <copy_8+0x11c>
 800b3fe:	9c08      	ldr	r4, [sp, #32]
 800b400:	440c      	add	r4, r1
 800b402:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b406:	2a00      	cmp	r2, #0
 800b408:	d0bd      	beq.n	800b386 <copy_8+0x2ce>
 800b40a:	9c07      	ldr	r4, [sp, #28]
 800b40c:	2c00      	cmp	r4, #0
 800b40e:	d0ba      	beq.n	800b386 <copy_8+0x2ce>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b410:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b412:	440c      	add	r4, r1
 800b414:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800b418:	e7b5      	b.n	800b386 <copy_8+0x2ce>
    int pixel_y = y_base + y;
 800b41a:	f102 0c07 	add.w	ip, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b41e:	ea6f 080c 	mvn.w	r8, ip
 800b422:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800b426:	b114      	cbz	r4, 800b42e <copy_8+0x376>
 800b428:	f1b8 0f00 	cmp.w	r8, #0
 800b42c:	d159      	bne.n	800b4e2 <copy_8+0x42a>
 800b42e:	f112 0f08 	cmn.w	r2, #8
 800b432:	ea08 0705 	and.w	r7, r8, r5
 800b436:	bfb4      	ite	lt
 800b438:	f04f 0800 	movlt.w	r8, #0
 800b43c:	f04f 0801 	movge.w	r8, #1
 800b440:	b114      	cbz	r4, 800b448 <copy_8+0x390>
 800b442:	f1b8 0f00 	cmp.w	r8, #0
 800b446:	d156      	bne.n	800b4f6 <copy_8+0x43e>
 800b448:	f112 0f09 	cmn.w	r2, #9
 800b44c:	ea08 0805 	and.w	r8, r8, r5
 800b450:	bfb4      	ite	lt
 800b452:	f04f 0900 	movlt.w	r9, #0
 800b456:	f04f 0901 	movge.w	r9, #1
 800b45a:	b114      	cbz	r4, 800b462 <copy_8+0x3aa>
 800b45c:	f1b9 0f00 	cmp.w	r9, #0
 800b460:	d154      	bne.n	800b50c <copy_8+0x454>
 800b462:	f112 0f0a 	cmn.w	r2, #10
 800b466:	ea09 0905 	and.w	r9, r9, r5
 800b46a:	bfb4      	ite	lt
 800b46c:	f04f 0a00 	movlt.w	sl, #0
 800b470:	f04f 0a01 	movge.w	sl, #1
 800b474:	b11c      	cbz	r4, 800b47e <copy_8+0x3c6>
 800b476:	f1ba 0f00 	cmp.w	sl, #0
 800b47a:	f040 8091 	bne.w	800b5a0 <copy_8+0x4e8>
 800b47e:	ea0a 0405 	and.w	r4, sl, r5
 800b482:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b486:	d201      	bcs.n	800b48c <copy_8+0x3d4>
 800b488:	2d00      	cmp	r5, #0
 800b48a:	d163      	bne.n	800b554 <copy_8+0x49c>
 800b48c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800b490:	f6bf af3e 	bge.w	800b310 <copy_8+0x258>
 800b494:	2f00      	cmp	r7, #0
 800b496:	f43f af3b 	beq.w	800b310 <copy_8+0x258>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b49a:	fa1f fb83 	uxth.w	fp, r3
 800b49e:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800b4a2:	9901      	ldr	r1, [sp, #4]
 800b4a4:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 800b4a8:	f820 b01c 	strh.w	fp, [r0, ip, lsl #1]
 800b4ac:	e730      	b.n	800b310 <copy_8+0x258>
 800b4ae:	9e08      	ldr	r6, [sp, #32]
 800b4b0:	9f06      	ldr	r7, [sp, #24]
 800b4b2:	443e      	add	r6, r7
 800b4b4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b4b8:	2900      	cmp	r1, #0
 800b4ba:	f43f af07 	beq.w	800b2cc <copy_8+0x214>
 800b4be:	9e07      	ldr	r6, [sp, #28]
 800b4c0:	2e00      	cmp	r6, #0
 800b4c2:	f43f af03 	beq.w	800b2cc <copy_8+0x214>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b4c6:	9e06      	ldr	r6, [sp, #24]
 800b4c8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b4ca:	443e      	add	r6, r7
 800b4cc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b4d0:	e6fc      	b.n	800b2cc <copy_8+0x214>
 800b4d2:	ebc1 1401 	rsb	r4, r1, r1, lsl #4
    int pixel_y = y_base + y;
 800b4d6:	f102 0c07 	add.w	ip, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b4da:	eb0b 1444 	add.w	r4, fp, r4, lsl #5
 800b4de:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b4e2:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800b4e6:	da79      	bge.n	800b5dc <copy_8+0x524>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b4e8:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 800b4ec:	462f      	mov	r7, r5
 800b4ee:	eb0b 1444 	add.w	r4, fp, r4, lsl #5
 800b4f2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b4f6:	9c05      	ldr	r4, [sp, #20]
 800b4f8:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800b4fc:	da3c      	bge.n	800b578 <copy_8+0x4c0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b4fe:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800b502:	46a8      	mov	r8, r5
 800b504:	eb0b 1444 	add.w	r4, fp, r4, lsl #5
 800b508:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b50c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800b510:	da33      	bge.n	800b57a <copy_8+0x4c2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b512:	ebc6 1406 	rsb	r4, r6, r6, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b516:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b51a:	eb0b 1444 	add.w	r4, fp, r4, lsl #5
 800b51e:	fa1f fb83 	uxth.w	fp, r3
 800b522:	f820 b014 	strh.w	fp, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b526:	d028      	beq.n	800b57a <copy_8+0x4c2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b528:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b52c:	ea1a 0905 	ands.w	r9, sl, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b530:	f820 b014 	strh.w	fp, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b534:	d118      	bne.n	800b568 <copy_8+0x4b0>
 800b536:	bb6f      	cbnz	r7, 800b594 <copy_8+0x4dc>
 800b538:	46a9      	mov	r9, r5
 800b53a:	462c      	mov	r4, r5
 800b53c:	e6e8      	b.n	800b310 <copy_8+0x258>
 800b53e:	f04f 0901 	mov.w	r9, #1
 800b542:	9905      	ldr	r1, [sp, #20]
 800b544:	ea09 0905 	and.w	r9, r9, r5
 800b548:	46aa      	mov	sl, r5
 800b54a:	4029      	ands	r1, r5
 800b54c:	fa5f f989 	uxtb.w	r9, r9
 800b550:	9105      	str	r1, [sp, #20]
 800b552:	e67c      	b.n	800b24e <copy_8+0x196>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b554:	fa1f fb83 	uxth.w	fp, r3
 800b558:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800b55c:	9d01      	ldr	r5, [sp, #4]
 800b55e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 800b562:	f820 b011 	strh.w	fp, [r0, r1, lsl #1]
 800b566:	e791      	b.n	800b48c <copy_8+0x3d4>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b568:	464c      	mov	r4, r9
 800b56a:	e7f5      	b.n	800b558 <copy_8+0x4a0>
 800b56c:	2501      	movs	r5, #1
 800b56e:	9505      	str	r5, [sp, #20]
 800b570:	f04f 0901 	mov.w	r9, #1
 800b574:	46ca      	mov	sl, r9
 800b576:	e656      	b.n	800b226 <copy_8+0x16e>
 800b578:	46a8      	mov	r8, r5
 800b57a:	462c      	mov	r4, r5
 800b57c:	46a9      	mov	r9, r5
 800b57e:	e780      	b.n	800b482 <copy_8+0x3ca>
    int pixel_x = x_base + x + offset;
 800b580:	3105      	adds	r1, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b582:	f04f 0901 	mov.w	r9, #1
    int pixel_x = x_base + x + offset;
 800b586:	4431      	add	r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b588:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b58c:	9101      	str	r1, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b58e:	d204      	bcs.n	800b59a <copy_8+0x4e2>
 800b590:	46ca      	mov	sl, r9
 800b592:	e732      	b.n	800b3fa <copy_8+0x342>
 800b594:	462c      	mov	r4, r5
 800b596:	46a9      	mov	r9, r5
 800b598:	e781      	b.n	800b49e <copy_8+0x3e6>
 800b59a:	2100      	movs	r1, #0
 800b59c:	46ca      	mov	sl, r9
 800b59e:	e64e      	b.n	800b23e <copy_8+0x186>
 800b5a0:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5a4:	462c      	mov	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b5a6:	f6bf af6c 	bge.w	800b482 <copy_8+0x3ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5aa:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800b5ae:	fb01 b10e 	mla	r1, r1, lr, fp
 800b5b2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b5b6:	e6ab      	b.n	800b310 <copy_8+0x258>
 800b5b8:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800b5bc:	da21      	bge.n	800b602 <copy_8+0x54a>
    int pixel_x = x_base + x + offset;
 800b5be:	3105      	adds	r1, #5
 800b5c0:	198d      	adds	r5, r1, r6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5c2:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b5c6:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5ca:	fb01 b107 	mla	r1, r1, r7, fp
    int pixel_x = x_base + x + offset;
 800b5ce:	9501      	str	r5, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5d0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b5d4:	bf2c      	ite	cs
 800b5d6:	2500      	movcs	r5, #0
 800b5d8:	2501      	movcc	r5, #1
 800b5da:	e7b2      	b.n	800b542 <copy_8+0x48a>
 800b5dc:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b5e0:	bf2c      	ite	cs
 800b5e2:	2400      	movcs	r4, #0
 800b5e4:	f005 0401 	andcc.w	r4, r5, #1
 800b5e8:	2c00      	cmp	r4, #0
 800b5ea:	f43f ae8e 	beq.w	800b30a <copy_8+0x252>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5ee:	f44f 75f0 	mov.w	r5, #480	@ 0x1e0
 800b5f2:	9f01      	ldr	r7, [sp, #4]
 800b5f4:	46a0      	mov	r8, r4
 800b5f6:	46a1      	mov	r9, r4
 800b5f8:	fb05 7501 	mla	r5, r5, r1, r7
 800b5fc:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b600:	e686      	b.n	800b310 <copy_8+0x258>
 800b602:	46aa      	mov	sl, r5
 800b604:	e60f      	b.n	800b226 <copy_8+0x16e>
 800b606:	bf00      	nop

0800b608 <copy_9>:

void copy_9(uint16_t* buffer, int x, int y, uint32_t color)
{
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800b60c:	4ca7      	ldr	r4, [pc, #668]	@ (800b8ac <copy_9+0x2a4>)
 800b60e:	1c4d      	adds	r5, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b610:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800b614:	b08f      	sub	sp, #60	@ 0x3c
    int pixel_x = x_base + x + offset;
 800b616:	6824      	ldr	r4, [r4, #0]
 800b618:	eb05 0704 	add.w	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b61c:	bf2c      	ite	cs
 800b61e:	2500      	movcs	r5, #0
 800b620:	2501      	movcc	r5, #1
 800b622:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b626:	9707      	str	r7, [sp, #28]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b628:	bf2c      	ite	cs
 800b62a:	2600      	movcs	r6, #0
 800b62c:	2601      	movcc	r6, #1
 800b62e:	9602      	str	r6, [sp, #8]
 800b630:	b115      	cbz	r5, 800b638 <copy_9+0x30>
 800b632:	2e00      	cmp	r6, #0
 800b634:	f040 8112 	bne.w	800b85c <copy_9+0x254>
    int pixel_x = x_base + x + offset;
 800b638:	1c8e      	adds	r6, r1, #2
 800b63a:	1937      	adds	r7, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b63c:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b640:	9708      	str	r7, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b642:	bf2c      	ite	cs
 800b644:	2600      	movcs	r6, #0
 800b646:	2601      	movcc	r6, #1
 800b648:	9603      	str	r6, [sp, #12]
 800b64a:	b115      	cbz	r5, 800b652 <copy_9+0x4a>
 800b64c:	2e00      	cmp	r6, #0
 800b64e:	f040 80fe 	bne.w	800b84e <copy_9+0x246>
    int pixel_x = x_base + x + offset;
 800b652:	1cce      	adds	r6, r1, #3
 800b654:	eb06 0904 	add.w	r9, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b658:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 800b65c:	bf2c      	ite	cs
 800b65e:	2600      	movcs	r6, #0
 800b660:	2601      	movcc	r6, #1
 800b662:	9604      	str	r6, [sp, #16]
 800b664:	b115      	cbz	r5, 800b66c <copy_9+0x64>
 800b666:	2e00      	cmp	r6, #0
 800b668:	f040 80ea 	bne.w	800b840 <copy_9+0x238>
    int pixel_x = x_base + x + offset;
 800b66c:	1d0e      	adds	r6, r1, #4
 800b66e:	eb06 0b04 	add.w	fp, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b672:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 800b676:	bf2c      	ite	cs
 800b678:	f04f 0a00 	movcs.w	sl, #0
 800b67c:	f04f 0a01 	movcc.w	sl, #1
 800b680:	f1ba 0f00 	cmp.w	sl, #0
 800b684:	d002      	beq.n	800b68c <copy_9+0x84>
 800b686:	2d00      	cmp	r5, #0
 800b688:	f040 80d3 	bne.w	800b832 <copy_9+0x22a>
    int pixel_x = x_base + x + offset;
 800b68c:	eb01 0804 	add.w	r8, r1, r4
    int pixel_y = y_base + y;
 800b690:	f102 0e01 	add.w	lr, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b694:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800b698:	bf2c      	ite	cs
 800b69a:	f04f 0c00 	movcs.w	ip, #0
 800b69e:	f04f 0c01 	movcc.w	ip, #1
 800b6a2:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800b6a6:	bf2c      	ite	cs
 800b6a8:	2500      	movcs	r5, #0
 800b6aa:	2501      	movcc	r5, #1
 800b6ac:	9506      	str	r5, [sp, #24]
 800b6ae:	f1bc 0f00 	cmp.w	ip, #0
 800b6b2:	d002      	beq.n	800b6ba <copy_9+0xb2>
 800b6b4:	2d00      	cmp	r5, #0
 800b6b6:	f040 8131 	bne.w	800b91c <copy_9+0x314>
    int pixel_y = y_base + y;
 800b6ba:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b6bc:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800b6c0:	bf2c      	ite	cs
 800b6c2:	2500      	movcs	r5, #0
 800b6c4:	2501      	movcc	r5, #1
 800b6c6:	9509      	str	r5, [sp, #36]	@ 0x24
 800b6c8:	f1bc 0f00 	cmp.w	ip, #0
 800b6cc:	d002      	beq.n	800b6d4 <copy_9+0xcc>
 800b6ce:	2d00      	cmp	r5, #0
 800b6d0:	f040 812b 	bne.w	800b92a <copy_9+0x322>
    int pixel_y = y_base + y;
 800b6d4:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b6d6:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800b6da:	960c      	str	r6, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b6dc:	bf2c      	ite	cs
 800b6de:	2500      	movcs	r5, #0
 800b6e0:	2501      	movcc	r5, #1
 800b6e2:	950a      	str	r5, [sp, #40]	@ 0x28
 800b6e4:	f1bc 0f00 	cmp.w	ip, #0
 800b6e8:	d002      	beq.n	800b6f0 <copy_9+0xe8>
 800b6ea:	2d00      	cmp	r5, #0
 800b6ec:	f040 8124 	bne.w	800b938 <copy_9+0x330>
    int pixel_y = y_base + y;
 800b6f0:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b6f2:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800b6f6:	960b      	str	r6, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b6f8:	bf2c      	ite	cs
 800b6fa:	2500      	movcs	r5, #0
 800b6fc:	2501      	movcc	r5, #1
 800b6fe:	9505      	str	r5, [sp, #20]
 800b700:	b11d      	cbz	r5, 800b70a <copy_9+0x102>
 800b702:	f1bc 0f00 	cmp.w	ip, #0
 800b706:	f040 811e 	bne.w	800b946 <copy_9+0x33e>
    int pixel_y = y_base + y;
 800b70a:	f102 0c05 	add.w	ip, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b70e:	ebcc 180c 	rsb	r8, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b712:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b716:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800b71a:	ea4f 1548 	mov.w	r5, r8, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b71e:	bf2c      	ite	cs
 800b720:	f04f 0800 	movcs.w	r8, #0
 800b724:	f04f 0801 	movcc.w	r8, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b728:	960d      	str	r6, [sp, #52]	@ 0x34
 800b72a:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b72c:	f1b8 0f00 	cmp.w	r8, #0
 800b730:	d013      	beq.n	800b75a <copy_9+0x152>
 800b732:	9e02      	ldr	r6, [sp, #8]
 800b734:	2e00      	cmp	r6, #0
 800b736:	f040 810d 	bne.w	800b954 <copy_9+0x34c>
 800b73a:	f1b8 0f00 	cmp.w	r8, #0
 800b73e:	d00c      	beq.n	800b75a <copy_9+0x152>
 800b740:	9d03      	ldr	r5, [sp, #12]
 800b742:	2d00      	cmp	r5, #0
 800b744:	f040 8115 	bne.w	800b972 <copy_9+0x36a>
 800b748:	f1b8 0f00 	cmp.w	r8, #0
 800b74c:	d005      	beq.n	800b75a <copy_9+0x152>
 800b74e:	9d04      	ldr	r5, [sp, #16]
 800b750:	b11d      	cbz	r5, 800b75a <copy_9+0x152>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b752:	9d01      	ldr	r5, [sp, #4]
 800b754:	444d      	add	r5, r9
 800b756:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b75a:	f1ba 0f00 	cmp.w	sl, #0
 800b75e:	d003      	beq.n	800b768 <copy_9+0x160>
 800b760:	f1b8 0f00 	cmp.w	r8, #0
 800b764:	f040 80ff 	bne.w	800b966 <copy_9+0x35e>
    int pixel_x = x_base + x + offset;
 800b768:	3105      	adds	r1, #5
 800b76a:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b76c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800b770:	bf2c      	ite	cs
 800b772:	2400      	movcs	r4, #0
 800b774:	2401      	movcc	r4, #1
 800b776:	b194      	cbz	r4, 800b79e <copy_9+0x196>
 800b778:	9d06      	ldr	r5, [sp, #24]
 800b77a:	2d00      	cmp	r5, #0
 800b77c:	f040 80c4 	bne.w	800b908 <copy_9+0x300>
 800b780:	b16c      	cbz	r4, 800b79e <copy_9+0x196>
 800b782:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b784:	2d00      	cmp	r5, #0
 800b786:	f040 80b8 	bne.w	800b8fa <copy_9+0x2f2>
 800b78a:	b144      	cbz	r4, 800b79e <copy_9+0x196>
 800b78c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b78e:	b135      	cbz	r5, 800b79e <copy_9+0x196>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b790:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800b792:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 800b796:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 800b79a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b79e:	9d05      	ldr	r5, [sp, #20]
 800b7a0:	b115      	cbz	r5, 800b7a8 <copy_9+0x1a0>
 800b7a2:	2c00      	cmp	r4, #0
 800b7a4:	f040 80a1 	bne.w	800b8ea <copy_9+0x2e2>
 800b7a8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800b7ac:	d202      	bcs.n	800b7b4 <copy_9+0x1ac>
 800b7ae:	2c00      	cmp	r4, #0
 800b7b0:	f040 8093 	bne.w	800b8da <copy_9+0x2d2>
    int pixel_y = y_base + y;
 800b7b4:	1d95      	adds	r5, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7b6:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800b7ba:	d202      	bcs.n	800b7c2 <copy_9+0x1ba>
 800b7bc:	2c00      	cmp	r4, #0
 800b7be:	f040 8085 	bne.w	800b8cc <copy_9+0x2c4>
    int pixel_y = y_base + y;
 800b7c2:	1dd5      	adds	r5, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7c4:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800b7c8:	d201      	bcs.n	800b7ce <copy_9+0x1c6>
 800b7ca:	2c00      	cmp	r4, #0
 800b7cc:	d177      	bne.n	800b8be <copy_9+0x2b6>
    int pixel_y = y_base + y;
 800b7ce:	f102 0508 	add.w	r5, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7d2:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800b7d6:	d201      	bcs.n	800b7dc <copy_9+0x1d4>
 800b7d8:	2c00      	cmp	r4, #0
 800b7da:	d169      	bne.n	800b8b0 <copy_9+0x2a8>
    int pixel_y = y_base + y;
 800b7dc:	f102 0509 	add.w	r5, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7e0:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800b7e4:	d201      	bcs.n	800b7ea <copy_9+0x1e2>
 800b7e6:	2c00      	cmp	r4, #0
 800b7e8:	d159      	bne.n	800b89e <copy_9+0x296>
    int pixel_y = y_base + y;
 800b7ea:	f102 050a 	add.w	r5, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7ee:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800b7f2:	d201      	bcs.n	800b7f8 <copy_9+0x1f0>
 800b7f4:	2c00      	cmp	r4, #0
 800b7f6:	d14b      	bne.n	800b890 <copy_9+0x288>
 800b7f8:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b7fa:	9901      	ldr	r1, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7fc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b800:	f501 6434 	add.w	r4, r1, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b804:	bf2c      	ite	cs
 800b806:	2200      	movcs	r2, #0
 800b808:	2201      	movcc	r2, #1
 800b80a:	b15a      	cbz	r2, 800b824 <copy_9+0x21c>
 800b80c:	9902      	ldr	r1, [sp, #8]
 800b80e:	bbc1      	cbnz	r1, 800b882 <copy_9+0x27a>
 800b810:	b142      	cbz	r2, 800b824 <copy_9+0x21c>
 800b812:	9903      	ldr	r1, [sp, #12]
 800b814:	bb81      	cbnz	r1, 800b878 <copy_9+0x270>
 800b816:	b12a      	cbz	r2, 800b824 <copy_9+0x21c>
 800b818:	9904      	ldr	r1, [sp, #16]
 800b81a:	b119      	cbz	r1, 800b824 <copy_9+0x21c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b81c:	eb04 0109 	add.w	r1, r4, r9
 800b820:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b824:	f1ba 0f00 	cmp.w	sl, #0
 800b828:	d000      	beq.n	800b82c <copy_9+0x224>
 800b82a:	b9f2      	cbnz	r2, 800b86a <copy_9+0x262>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 5, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800b82c:	b00f      	add	sp, #60	@ 0x3c
 800b82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b832:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800b836:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 800b83a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b83e:	e725      	b.n	800b68c <copy_9+0x84>
 800b840:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800b844:	eb09 1646 	add.w	r6, r9, r6, lsl #5
 800b848:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b84c:	e70e      	b.n	800b66c <copy_9+0x64>
 800b84e:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800b852:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800b856:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b85a:	e6fa      	b.n	800b652 <copy_9+0x4a>
 800b85c:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800b860:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800b864:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b868:	e6e6      	b.n	800b638 <copy_9+0x30>
 800b86a:	eb0b 0204 	add.w	r2, fp, r4
 800b86e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800b872:	b00f      	add	sp, #60	@ 0x3c
 800b874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b878:	9908      	ldr	r1, [sp, #32]
 800b87a:	4421      	add	r1, r4
 800b87c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800b880:	e7c9      	b.n	800b816 <copy_9+0x20e>
 800b882:	9907      	ldr	r1, [sp, #28]
 800b884:	4421      	add	r1, r4
 800b886:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b88a:	2a00      	cmp	r2, #0
 800b88c:	d1c1      	bne.n	800b812 <copy_9+0x20a>
 800b88e:	e7c9      	b.n	800b824 <copy_9+0x21c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b890:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b894:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800b898:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800b89c:	e7ac      	b.n	800b7f8 <copy_9+0x1f0>
 800b89e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b8a2:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b8a6:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b8aa:	e79e      	b.n	800b7ea <copy_9+0x1e2>
 800b8ac:	240001b8 	.word	0x240001b8
 800b8b0:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b8b4:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b8b8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b8bc:	e78e      	b.n	800b7dc <copy_9+0x1d4>
 800b8be:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b8c2:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b8c6:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b8ca:	e780      	b.n	800b7ce <copy_9+0x1c6>
 800b8cc:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b8d0:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b8d4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b8d8:	e773      	b.n	800b7c2 <copy_9+0x1ba>
 800b8da:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b8dc:	eba5 050c 	sub.w	r5, r5, ip
 800b8e0:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b8e4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b8e8:	e764      	b.n	800b7b4 <copy_9+0x1ac>
 800b8ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b8ec:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b8f0:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b8f4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b8f8:	e756      	b.n	800b7a8 <copy_9+0x1a0>
 800b8fa:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800b8fe:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 800b902:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800b906:	e740      	b.n	800b78a <copy_9+0x182>
 800b908:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800b90c:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 800b910:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b914:	2c00      	cmp	r4, #0
 800b916:	f47f af34 	bne.w	800b782 <copy_9+0x17a>
 800b91a:	e740      	b.n	800b79e <copy_9+0x196>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b91c:	ebce 150e 	rsb	r5, lr, lr, lsl #4
 800b920:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 800b924:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b928:	e6c7      	b.n	800b6ba <copy_9+0xb2>
 800b92a:	ebc7 1507 	rsb	r5, r7, r7, lsl #4
 800b92e:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 800b932:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b936:	e6cd      	b.n	800b6d4 <copy_9+0xcc>
 800b938:	ebc6 1506 	rsb	r5, r6, r6, lsl #4
 800b93c:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 800b940:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b944:	e6d4      	b.n	800b6f0 <copy_9+0xe8>
 800b946:	ebc6 1c06 	rsb	ip, r6, r6, lsl #4
 800b94a:	eb08 184c 	add.w	r8, r8, ip, lsl #5
 800b94e:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800b952:	e6da      	b.n	800b70a <copy_9+0x102>
 800b954:	9e07      	ldr	r6, [sp, #28]
 800b956:	4435      	add	r5, r6
 800b958:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b95c:	f1b8 0f00 	cmp.w	r8, #0
 800b960:	f47f aeee 	bne.w	800b740 <copy_9+0x138>
 800b964:	e6f9      	b.n	800b75a <copy_9+0x152>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b966:	9d01      	ldr	r5, [sp, #4]
 800b968:	eb0b 0805 	add.w	r8, fp, r5
 800b96c:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800b970:	e6fa      	b.n	800b768 <copy_9+0x160>
 800b972:	9d01      	ldr	r5, [sp, #4]
 800b974:	9e08      	ldr	r6, [sp, #32]
 800b976:	4435      	add	r5, r6
 800b978:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b97c:	e6e4      	b.n	800b748 <copy_9+0x140>
 800b97e:	bf00      	nop

0800b980 <Error_Handler>:
 * @retval None
 */
void Error_Handler(void)
{
    /* Turn LED REDon */
    BSP_LED_On(LED_RED);
 800b980:	2001      	movs	r0, #1
{
 800b982:	b508      	push	{r3, lr}
    BSP_LED_On(LED_RED);
 800b984:	f000 f994 	bl	800bcb0 <BSP_LED_On>
    while (1)
 800b988:	e7fe      	b.n	800b988 <Error_Handler+0x8>
 800b98a:	bf00      	nop

0800b98c <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800b98c:	4a92      	ldr	r2, [pc, #584]	@ (800bbd8 <main+0x24c>)
 800b98e:	6953      	ldr	r3, [r2, #20]
 800b990:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b0a2      	sub	sp, #136	@ 0x88
 800b998:	d111      	bne.n	800b9be <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b99a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b99e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800b9a2:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800b9a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b9aa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800b9ae:	6953      	ldr	r3, [r2, #20]
 800b9b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800b9b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b9ba:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800b9be:	4886      	ldr	r0, [pc, #536]	@ (800bbd8 <main+0x24c>)
 800b9c0:	6943      	ldr	r3, [r0, #20]
 800b9c2:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800b9c6:	d126      	bne.n	800ba16 <main+0x8a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800b9c8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800b9cc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800b9d0:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800b9d4:	f643 75e0 	movw	r5, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800b9d8:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800b9dc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 800b9e0:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800b9e4:	ea0c 0105 	and.w	r1, ip, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800b9e8:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800b9ea:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800b9f2:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 800b9f6:	d1f8      	bne.n	800b9ea <main+0x5e>
    } while(sets-- != 0U);
 800b9f8:	f1ac 0c20 	sub.w	ip, ip, #32
 800b9fc:	f11c 0f20 	cmn.w	ip, #32
 800ba00:	d1f0      	bne.n	800b9e4 <main+0x58>
 800ba02:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800ba06:	6943      	ldr	r3, [r0, #20]
 800ba08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba0c:	6143      	str	r3, [r0, #20]
 800ba0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ba12:	f3bf 8f6f 	isb	sy
  hdma2d.Instance = DMA2D;
 800ba16:	4c71      	ldr	r4, [pc, #452]	@ (800bbdc <main+0x250>)
  HAL_Init();
 800ba18:	f002 f90e 	bl	800dc38 <HAL_Init>
  hdma2d.Init.Mode = DMA2D_M2M;
 800ba1c:	2300      	movs	r3, #0
  hdma2d.Instance = DMA2D;
 800ba1e:	4a70      	ldr	r2, [pc, #448]	@ (800bbe0 <main+0x254>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800ba20:	4620      	mov	r0, r4
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800ba22:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma2d.Init.Mode = DMA2D_M2M;
 800ba24:	e9c4 2300 	strd	r2, r3, [r4]
  hdma2d.Init.OutputOffset = 0;
 800ba28:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800ba2c:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800ba30:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800ba34:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800ba38:	f002 f9be 	bl	800ddb8 <HAL_DMA2D_Init>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	f040 80c9 	bne.w	800bbd4 <main+0x248>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800ba42:	2101      	movs	r1, #1
 800ba44:	4620      	mov	r0, r4
 800ba46:	f002 fafd 	bl	800e044 <HAL_DMA2D_ConfigLayer>
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	f040 80c1 	bne.w	800bbd4 <main+0x248>
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 800ba52:	4a61      	ldr	r2, [pc, #388]	@ (800bbd8 <main+0x24c>)
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ba54:	2002      	movs	r0, #2
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 800ba56:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ba5a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ba5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ba62:	f003 fd75 	bl	800f550 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ba66:	4b5f      	ldr	r3, [pc, #380]	@ (800bbe4 <main+0x258>)
 800ba68:	9504      	str	r5, [sp, #16]
 800ba6a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ba6c:	4a5e      	ldr	r2, [pc, #376]	@ (800bbe8 <main+0x25c>)
 800ba6e:	f021 0101 	bic.w	r1, r1, #1
 800ba72:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800ba74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba76:	f003 0301 	and.w	r3, r3, #1
 800ba7a:	9304      	str	r3, [sp, #16]
 800ba7c:	6993      	ldr	r3, [r2, #24]
 800ba7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba82:	6193      	str	r3, [r2, #24]
 800ba84:	6993      	ldr	r3, [r2, #24]
 800ba86:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ba8a:	9304      	str	r3, [sp, #16]
 800ba8c:	9b04      	ldr	r3, [sp, #16]
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800ba8e:	6993      	ldr	r3, [r2, #24]
 800ba90:	049e      	lsls	r6, r3, #18
 800ba92:	d5fc      	bpl.n	800ba8e <main+0x102>
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ba94:	2001      	movs	r0, #1
 800ba96:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800ba9a:	2300      	movs	r3, #0
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ba9c:	2602      	movs	r6, #2
    RCC_OscInitStruct.PLL.PLLN = 160;
 800ba9e:	22a0      	movs	r2, #160	@ 0xa0
    RCC_OscInitStruct.PLL.PLLQ = 4;
 800baa0:	2704      	movs	r7, #4
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800baa2:	2508      	movs	r5, #8
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800baa4:	9311      	str	r3, [sp, #68]	@ 0x44
    RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800baa6:	9315      	str	r3, [sp, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLP = 2;
 800baa8:	961b      	str	r6, [sp, #108]	@ 0x6c
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800baaa:	951e      	str	r5, [sp, #120]	@ 0x78
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800baac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 5;
 800bab0:	2105      	movs	r1, #5
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bab2:	a80e      	add	r0, sp, #56	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bab4:	e9cd 6617 	strd	r6, r6, [sp, #92]	@ 0x5c
    RCC_OscInitStruct.PLL.PLLN = 160;
 800bab8:	e9cd 1219 	strd	r1, r2, [sp, #100]	@ 0x64
    RCC_OscInitStruct.PLL.PLLQ = 4;
 800babc:	e9cd 761c 	strd	r7, r6, [sp, #112]	@ 0x70
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800bac0:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bac4:	f003 fdda 	bl	800f67c <HAL_RCC_OscConfig>
    if (ret != HAL_OK)
 800bac8:	2800      	cmp	r0, #0
 800baca:	f040 8083 	bne.w	800bbd4 <main+0x248>
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800bace:	2340      	movs	r3, #64	@ 0x40
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800bad0:	4639      	mov	r1, r7
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800bad2:	9008      	str	r0, [sp, #32]
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800bad4:	a806      	add	r0, sp, #24
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800bad6:	930b      	str	r3, [sp, #44]	@ 0x2c
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800bad8:	930d      	str	r3, [sp, #52]	@ 0x34
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800bada:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bade:	2303      	movs	r3, #3
 800bae0:	253f      	movs	r5, #63	@ 0x3f
 800bae2:	e9cd 5306 	strd	r5, r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800bae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800baea:	930c      	str	r3, [sp, #48]	@ 0x30
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800baec:	f004 f942 	bl	800fd74 <HAL_RCC_ClockConfig>
    if (ret != HAL_OK)
 800baf0:	4607      	mov	r7, r0
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d16e      	bne.n	800bbd4 <main+0x248>
    __HAL_RCC_CSI_ENABLE();
 800baf6:	4d3d      	ldr	r5, [pc, #244]	@ (800bbec <main+0x260>)
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bafe:	602b      	str	r3, [r5, #0]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bb00:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800bb04:	4333      	orrs	r3, r6
 800bb06:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 800bb0a:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800bb0e:	4033      	ands	r3, r6
 800bb10:	9305      	str	r3, [sp, #20]
 800bb12:	9b05      	ldr	r3, [sp, #20]
    HAL_EnableCompensationCell();
 800bb14:	f002 f8ea 	bl	800dcec <HAL_EnableCompensationCell>
  BSP_LCD_InitEx(0, LCD_ORIENTATION_LANDSCAPE, LCD_PIXEL_FORMAT_RGB565, 480, 272);
 800bb18:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bb1c:	4632      	mov	r2, r6
 800bb1e:	2101      	movs	r1, #1
 800bb20:	4638      	mov	r0, r7
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800bb28:	f000 fffa 	bl	800cb20 <BSP_LCD_InitEx>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 800bb2c:	4830      	ldr	r0, [pc, #192]	@ (800bbf0 <main+0x264>)
 800bb2e:	f000 f863 	bl	800bbf8 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_Clear (UTIL_LCD_COLOR_BLACK);
 800bb32:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800bb36:	f000 f88f 	bl	800bc58 <UTIL_LCD_Clear>
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800bb3a:	f8d5 30d4 	ldr.w	r3, [r5, #212]	@ 0xd4
  hdma2d.Init.Mode = DMA2D_R2M;
 800bb3e:	60a6      	str	r6, [r4, #8]
 800bb40:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800bb44:	f043 0310 	orr.w	r3, r3, #16
  hdma2d.Init.OutputOffset = 0;
 800bb48:	60e7      	str	r7, [r4, #12]
  hdma2d.Instance = DMA2D;
 800bb4a:	4925      	ldr	r1, [pc, #148]	@ (800bbe0 <main+0x254>)
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800bb4c:	f8c5 30d4 	str.w	r3, [r5, #212]	@ 0xd4
 800bb50:	f8d5 30d4 	ldr.w	r3, [r5, #212]	@ 0xd4
  if (HAL_DMA2D_Init (&hdma2d) != HAL_OK)
 800bb54:	4821      	ldr	r0, [pc, #132]	@ (800bbdc <main+0x250>)
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800bb56:	f003 0310 	and.w	r3, r3, #16
 800bb5a:	9303      	str	r3, [sp, #12]
 800bb5c:	9b03      	ldr	r3, [sp, #12]
  hdma2d.Init.Mode = DMA2D_R2M;
 800bb5e:	e9c4 1200 	strd	r1, r2, [r4]
  if (HAL_DMA2D_Init (&hdma2d) != HAL_OK)
 800bb62:	f002 f929 	bl	800ddb8 <HAL_DMA2D_Init>
 800bb66:	4604      	mov	r4, r0
 800bb68:	bba0      	cbnz	r0, 800bbd4 <main+0x248>
  LTDC->LIPCR = 271;
 800bb6a:	4b22      	ldr	r3, [pc, #136]	@ (800bbf4 <main+0x268>)
 800bb6c:	f240 100f 	movw	r0, #271	@ 0x10f
  HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800bb70:	4622      	mov	r2, r4
 800bb72:	4621      	mov	r1, r4
  LTDC->LIPCR = 271;
 800bb74:	6418      	str	r0, [r3, #64]	@ 0x40
  SET_BIT (LTDC->IER, LTDC_IER_LIE);
 800bb76:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800bb78:	f040 0001 	orr.w	r0, r0, #1
 800bb7c:	6358      	str	r0, [r3, #52]	@ 0x34
  HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800bb7e:	2058      	movs	r0, #88	@ 0x58
 800bb80:	f002 f8ce 	bl	800dd20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800bb84:	2058      	movs	r0, #88	@ 0x58
 800bb86:	f002 f907 	bl	800dd98 <HAL_NVIC_EnableIRQ>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800bb8a:	4813      	ldr	r0, [pc, #76]	@ (800bbd8 <main+0x24c>)
 800bb8c:	f8c0 4084 	str.w	r4, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800bb90:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800bb94:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800bb98:	f643 75e0 	movw	r5, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800bb9c:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800bba0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 800bba4:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800bba8:	ea0c 0105 	and.w	r1, ip, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800bbac:	4623      	mov	r3, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800bbae:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800bbb2:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800bbb4:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	d1f8      	bne.n	800bbae <main+0x222>
    } while(sets-- != 0U);
 800bbbc:	f1ac 0c20 	sub.w	ip, ip, #32
 800bbc0:	f11c 0f20 	cmn.w	ip, #32
 800bbc4:	d1f0      	bne.n	800bba8 <main+0x21c>
 800bbc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bbca:	f3bf 8f6f 	isb	sy
  AppMain ();
 800bbce:	f001 fe7f 	bl	800d8d0 <AppMain>
  while (1)
 800bbd2:	e7fe      	b.n	800bbd2 <main+0x246>
    Error_Handler();
 800bbd4:	f7ff fed4 	bl	800b980 <Error_Handler>
 800bbd8:	e000ed00 	.word	0xe000ed00
 800bbdc:	240001c0 	.word	0x240001c0
 800bbe0:	52001000 	.word	0x52001000
 800bbe4:	58000400 	.word	0x58000400
 800bbe8:	58024800 	.word	0x58024800
 800bbec:	58024400 	.word	0x58024400
 800bbf0:	08012ebc 	.word	0x08012ebc
 800bbf4:	50001000 	.word	0x50001000

0800bbf8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800bbf8:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800bbfa:	e9d0 2300 	ldrd	r2, r3, [r0]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800bbfe:	4c14      	ldr	r4, [pc, #80]	@ (800bc50 <UTIL_LCD_SetFuncDriver+0x58>)
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 800bc00:	6881      	ldr	r1, [r0, #8]
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 800bc02:	4e14      	ldr	r6, [pc, #80]	@ (800bc54 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800bc04:	e9c4 2300 	strd	r2, r3, [r4]
  FuncDriver.FillRect       = pDrv->FillRect;
 800bc08:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800bc0c:	e9c4 1302 	strd	r1, r3, [r4, #8]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800bc10:	e9d0 3505 	ldrd	r3, r5, [r0, #20]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 800bc14:	e9c4 2304 	strd	r2, r3, [r4, #16]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800bc18:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800bc1c:	e9c4 5306 	strd	r5, r3, [r4, #24]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800bc20:	6222      	str	r2, [r4, #32]
  DrawProp->LcdLayer = 0;
 800bc22:	2500      	movs	r5, #0
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800bc24:	e9d0 2109 	ldrd	r2, r1, [r0, #36]	@ 0x24
  DrawProp->LcdLayer = 0;
 800bc28:	e9c6 5503 	strd	r5, r5, [r6, #12]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800bc2c:	62a1      	str	r1, [r4, #40]	@ 0x28
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800bc34:	6262      	str	r2, [r4, #36]	@ 0x24
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800bc36:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800bc38:	6a23      	ldr	r3, [r4, #32]
 800bc3a:	f106 0118 	add.w	r1, r6, #24
 800bc3e:	4628      	mov	r0, r5
 800bc40:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800bc42:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bc44:	f106 011c 	add.w	r1, r6, #28
 800bc48:	4628      	mov	r0, r5
}
 800bc4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800bc4e:	4718      	bx	r3
 800bc50:	24000228 	.word	0x24000228
 800bc54:	24000258 	.word	0x24000258

0800bc58 <UTIL_LCD_Clear>:
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800bc58:	4a13      	ldr	r2, [pc, #76]	@ (800bca8 <UTIL_LCD_Clear+0x50>)
{
 800bc5a:	4601      	mov	r1, r0
 800bc5c:	b570      	push	{r4, r5, r6, lr}
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800bc5e:	69d6      	ldr	r6, [r2, #28]
{
 800bc60:	b082      	sub	sp, #8
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800bc62:	4c12      	ldr	r4, [pc, #72]	@ (800bcac <UTIL_LCD_Clear+0x54>)
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800bc64:	2e02      	cmp	r6, #2
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800bc66:	6953      	ldr	r3, [r2, #20]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800bc68:	6924      	ldr	r4, [r4, #16]
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800bc6a:	6995      	ldr	r5, [r2, #24]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800bc6c:	6910      	ldr	r0, [r2, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800bc6e:	d006      	beq.n	800bc7e <UTIL_LCD_Clear+0x26>
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800bc70:	2200      	movs	r2, #0
 800bc72:	9101      	str	r1, [sp, #4]
 800bc74:	9500      	str	r5, [sp, #0]
 800bc76:	4611      	mov	r1, r2
 800bc78:	47a0      	blx	r4
}
 800bc7a:	b002      	add	sp, #8
 800bc7c:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800bc7e:	9500      	str	r5, [sp, #0]
 800bc80:	ea4f 1c51 	mov.w	ip, r1, lsr #5
 800bc84:	0a0d      	lsrs	r5, r1, #8
 800bc86:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800bc8a:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 800bc94:	ea4c 0c05 	orr.w	ip, ip, r5
 800bc98:	ea4c 0101 	orr.w	r1, ip, r1
 800bc9c:	9101      	str	r1, [sp, #4]
 800bc9e:	4611      	mov	r1, r2
 800bca0:	47a0      	blx	r4
}
 800bca2:	b002      	add	sp, #8
 800bca4:	bd70      	pop	{r4, r5, r6, pc}
 800bca6:	bf00      	nop
 800bca8:	24000258 	.word	0x24000258
 800bcac:	24000228 	.word	0x24000228

0800bcb0 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800bcb0:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800bcb2:	4905      	ldr	r1, [pc, #20]	@ (800bcc8 <BSP_LED_On+0x18>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	4b05      	ldr	r3, [pc, #20]	@ (800bccc <BSP_LED_On+0x1c>)
 800bcb8:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 800bcbc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800bcc0:	f002 fd78 	bl	800e7b4 <HAL_GPIO_WritePin>
  return ret;
}
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	bd08      	pop	{r3, pc}
 800bcc8:	08012eac 	.word	0x08012eac
 800bccc:	08012eb4 	.word	0x08012eb4

0800bcd0 <BSP_PB_IRQHandler>:
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800bcd0:	4b02      	ldr	r3, [pc, #8]	@ (800bcdc <BSP_PB_IRQHandler+0xc>)
 800bcd2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800bcd6:	f002 ba1f 	b.w	800e118 <HAL_EXTI_IRQHandler>
 800bcda:	bf00      	nop
 800bcdc:	24000298 	.word	0x24000298

0800bce0 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800bce0:	4a10      	ldr	r2, [pc, #64]	@ (800bd24 <BSP_I2C4_DeInit+0x44>)
{
 800bce2:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 800bce4:	6813      	ldr	r3, [r2, #0]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800bcea:	b10b      	cbz	r3, 800bcf0 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800bcec:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800bcee:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800bcf0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bcf4:	480c      	ldr	r0, [pc, #48]	@ (800bd28 <BSP_I2C4_DeInit+0x48>)
 800bcf6:	f002 fc2d 	bl	800e554 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800bcfa:	480b      	ldr	r0, [pc, #44]	@ (800bd28 <BSP_I2C4_DeInit+0x48>)
 800bcfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800bd00:	f002 fc28 	bl	800e554 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800bd04:	4a09      	ldr	r2, [pc, #36]	@ (800bd2c <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800bd06:	480a      	ldr	r0, [pc, #40]	@ (800bd30 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800bd08:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 800bd0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800bd14:	f002 ff18 	bl	800eb48 <HAL_I2C_DeInit>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d0e7      	beq.n	800bcec <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800bd1c:	f06f 0007 	mvn.w	r0, #7
}
 800bd20:	bd08      	pop	{r3, pc}
 800bd22:	bf00      	nop
 800bd24:	24000cf8 	.word	0x24000cf8
 800bd28:	58020c00 	.word	0x58020c00
 800bd2c:	58024400 	.word	0x58024400
 800bd30:	240002a0 	.word	0x240002a0

0800bd34 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 800bd34:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800bd36:	2201      	movs	r2, #1
{
 800bd38:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
 800bd3a:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800bd3e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bd42:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800bd46:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
 800bd4a:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800bd4c:	f002 fea4 	bl	800ea98 <HAL_I2C_Init>
 800bd50:	b108      	cbz	r0, 800bd56 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 800bd52:	2001      	movs	r0, #1
}
 800bd54:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800bd56:	4601      	mov	r1, r0
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f003 f9c7 	bl	800f0ec <HAL_I2CEx_ConfigAnalogFilter>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d1f7      	bne.n	800bd52 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800bd62:	4601      	mov	r1, r0
 800bd64:	4620      	mov	r0, r4
 800bd66:	f003 f9eb 	bl	800f140 <HAL_I2CEx_ConfigDigitalFilter>
 800bd6a:	3800      	subs	r0, #0
 800bd6c:	bf18      	it	ne
 800bd6e:	2001      	movne	r0, #1
}
 800bd70:	bd10      	pop	{r4, pc}
 800bd72:	bf00      	nop

0800bd74 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 800bd74:	4b97      	ldr	r3, [pc, #604]	@ (800bfd4 <BSP_I2C4_Init+0x260>)
  hbus_i2c4.Instance = BUS_I2C4;
 800bd76:	4898      	ldr	r0, [pc, #608]	@ (800bfd8 <BSP_I2C4_Init+0x264>)
 800bd78:	4a98      	ldr	r2, [pc, #608]	@ (800bfdc <BSP_I2C4_Init+0x268>)
{
 800bd7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (I2c4InitCounter == 0U)
 800bd7e:	681c      	ldr	r4, [r3, #0]
{
 800bd80:	b09d      	sub	sp, #116	@ 0x74
  hbus_i2c4.Instance = BUS_I2C4;
 800bd82:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 800bd84:	b11c      	cbz	r4, 800bd8e <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800bd86:	2000      	movs	r0, #0
}
 800bd88:	b01d      	add	sp, #116	@ 0x74
 800bd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800bd8e:	2201      	movs	r2, #1
 800bd90:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800bd92:	f003 f9a5 	bl	800f0e0 <HAL_I2C_GetState>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d1f5      	bne.n	800bd86 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800bd9a:	4d91      	ldr	r5, [pc, #580]	@ (800bfe0 <BSP_I2C4_Init+0x26c>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800bd9c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bda0:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800bda2:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800bda4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800bda8:	f04f 0800 	mov.w	r8, #0
 800bdac:	f04f 0902 	mov.w	r9, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800bdb0:	f043 0308 	orr.w	r3, r3, #8
 800bdb4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800bdb8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800bdbc:	f003 0308 	and.w	r3, r3, #8
 800bdc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800bdc4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800bdc8:	f043 0308 	orr.w	r3, r3, #8
 800bdcc:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800bdd0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800bdd4:	961a      	str	r6, [sp, #104]	@ 0x68
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800bdd6:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800bdda:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800bdde:	9314      	str	r3, [sp, #80]	@ 0x50
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800bde0:	a916      	add	r1, sp, #88	@ 0x58
 800bde2:	4880      	ldr	r0, [pc, #512]	@ (800bfe4 <BSP_I2C4_Init+0x270>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800bde4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800bde6:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800bdea:	f002 f9ad 	bl	800e148 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800bdee:	2312      	movs	r3, #18
 800bdf0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800bdf4:	a916      	add	r1, sp, #88	@ 0x58
 800bdf6:	487b      	ldr	r0, [pc, #492]	@ (800bfe4 <BSP_I2C4_Init+0x270>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800bdf8:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800bdfa:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 800bdfe:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800be02:	f002 f9a1 	bl	800e148 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800be06:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800be0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be0e:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 800be12:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800be16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be1a:	9315      	str	r3, [sp, #84]	@ 0x54
 800be1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  BUS_I2C4_FORCE_RESET();
 800be1e:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800be22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be26:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 800be2a:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800be2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be32:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800be36:	f004 f90f 	bl	8010058 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800be3a:	2800      	cmp	r0, #0
 800be3c:	f000 8186 	beq.w	800c14c <BSP_I2C4_Init+0x3d8>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800be40:	4b69      	ldr	r3, [pc, #420]	@ (800bfe8 <BSP_I2C4_Init+0x274>)
  if (tsdadel_max <= 0)
 800be42:	4626      	mov	r6, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 800be44:	f04f 0a10 	mov.w	sl, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800be48:	f8df 91a4 	ldr.w	r9, [pc, #420]	@ 800bff0 <BSP_I2C4_Init+0x27c>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800be4c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800be50:	f04f 0c07 	mov.w	ip, #7
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800be54:	fbb3 f5f0 	udiv	r5, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800be58:	00ab      	lsls	r3, r5, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800be5a:	9501      	str	r5, [sp, #4]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800be5c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800be60:	f5c3 77c3 	rsb	r7, r3, #390	@ 0x186
 800be64:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800be68:	f1c2 0032 	rsb	r0, r2, #50	@ 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800be6c:	0069      	lsls	r1, r5, #1
 800be6e:	005a      	lsls	r2, r3, #1
 800be70:	4b5e      	ldr	r3, [pc, #376]	@ (800bfec <BSP_I2C4_Init+0x278>)
  if (tsdadel_min <= 0)
 800be72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  if (tsdadel_max <= 0)
 800be76:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800be7a:	681b      	ldr	r3, [r3, #0]
  if (tsdadel_max <= 0)
 800be7c:	4693      	mov	fp, r2
 800be7e:	9211      	str	r2, [sp, #68]	@ 0x44
 800be80:	e9cd 4102 	strd	r4, r1, [sp, #8]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800be84:	ebb7 0f45 	cmp.w	r7, r5, lsl #1
 800be88:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800be8c:	bf2c      	ite	cs
 800be8e:	2401      	movcs	r4, #1
 800be90:	2400      	movcc	r4, #0
 800be92:	ebb0 0f45 	cmp.w	r0, r5, lsl #1
 800be96:	f004 0401 	and.w	r4, r4, #1
 800be9a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800be9e:	bf88      	it	hi
 800bea0:	2400      	movhi	r4, #0
 800bea2:	4290      	cmp	r0, r2
 800bea4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 800bea8:	9405      	str	r4, [sp, #20]
 800beaa:	bf8c      	ite	hi
 800beac:	2400      	movhi	r4, #0
 800beae:	2401      	movls	r4, #1
 800beb0:	4297      	cmp	r7, r2
 800beb2:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800beb6:	ebc5 0ec5 	rsb	lr, r5, r5, lsl #3
 800beba:	bf38      	it	cc
 800bebc:	2400      	movcc	r4, #0
 800bebe:	ebb0 0f85 	cmp.w	r0, r5, lsl #2
 800bec2:	9404      	str	r4, [sp, #16]
 800bec4:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 800bec8:	9406      	str	r4, [sp, #24]
 800beca:	4644      	mov	r4, r8
 800becc:	bf94      	ite	ls
 800bece:	2401      	movls	r4, #1
 800bed0:	2400      	movhi	r4, #0
 800bed2:	ebb7 0f85 	cmp.w	r7, r5, lsl #2
 800bed6:	f004 0801 	and.w	r8, r4, #1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800beda:	f04f 0400 	mov.w	r4, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800bede:	bf38      	it	cc
 800bee0:	f04f 0800 	movcc.w	r8, #0
 800bee4:	4288      	cmp	r0, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800bee6:	9400      	str	r4, [sp, #0]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800bee8:	f8cd 801c 	str.w	r8, [sp, #28]
 800beec:	bf8c      	ite	hi
 800beee:	f04f 0800 	movhi.w	r8, #0
 800bef2:	f04f 0801 	movls.w	r8, #1
 800bef6:	428f      	cmp	r7, r1
 800bef8:	bf38      	it	cc
 800befa:	f04f 0800 	movcc.w	r8, #0
 800befe:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 800bf02:	bf98      	it	ls
 800bf04:	2401      	movls	r4, #1
 800bf06:	ebb7 0f42 	cmp.w	r7, r2, lsl #1
 800bf0a:	f8cd 8020 	str.w	r8, [sp, #32]
 800bf0e:	46a8      	mov	r8, r5
 800bf10:	f004 0401 	and.w	r4, r4, #1
 800bf14:	bf38      	it	cc
 800bf16:	2400      	movcc	r4, #0
 800bf18:	4570      	cmp	r0, lr
 800bf1a:	9409      	str	r4, [sp, #36]	@ 0x24
 800bf1c:	bf8c      	ite	hi
 800bf1e:	2400      	movhi	r4, #0
 800bf20:	2401      	movls	r4, #1
 800bf22:	4577      	cmp	r7, lr
 800bf24:	bf38      	it	cc
 800bf26:	2400      	movcc	r4, #0
 800bf28:	ebb0 0fc5 	cmp.w	r0, r5, lsl #3
 800bf2c:	bf94      	ite	ls
 800bf2e:	f04f 0e01 	movls.w	lr, #1
 800bf32:	f04f 0e00 	movhi.w	lr, #0
 800bf36:	ebb7 0fc5 	cmp.w	r7, r5, lsl #3
 800bf3a:	940a      	str	r4, [sp, #40]	@ 0x28
 800bf3c:	f00e 0e01 	and.w	lr, lr, #1
 800bf40:	bf38      	it	cc
 800bf42:	f04f 0e00 	movcc.w	lr, #0
 800bf46:	4674      	mov	r4, lr
 800bf48:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800bf4c:	eb05 0ec5 	add.w	lr, r5, r5, lsl #3
 800bf50:	4570      	cmp	r0, lr
 800bf52:	bf8c      	ite	hi
 800bf54:	2400      	movhi	r4, #0
 800bf56:	2401      	movls	r4, #1
 800bf58:	4577      	cmp	r7, lr
 800bf5a:	bf38      	it	cc
 800bf5c:	2400      	movcc	r4, #0
 800bf5e:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 800bf62:	940c      	str	r4, [sp, #48]	@ 0x30
 800bf64:	bf98      	it	ls
 800bf66:	f04f 0e01 	movls.w	lr, #1
 800bf6a:	9c06      	ldr	r4, [sp, #24]
 800bf6c:	bf88      	it	hi
 800bf6e:	f04f 0e00 	movhi.w	lr, #0
 800bf72:	ebb7 0f41 	cmp.w	r7, r1, lsl #1
 800bf76:	f00e 0101 	and.w	r1, lr, #1
 800bf7a:	bf38      	it	cc
 800bf7c:	2100      	movcc	r1, #0
 800bf7e:	42a0      	cmp	r0, r4
 800bf80:	910d      	str	r1, [sp, #52]	@ 0x34
 800bf82:	4621      	mov	r1, r4
 800bf84:	bf8c      	ite	hi
 800bf86:	2100      	movhi	r1, #0
 800bf88:	2101      	movls	r1, #1
 800bf8a:	42a7      	cmp	r7, r4
 800bf8c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800bf8e:	bf38      	it	cc
 800bf90:	2100      	movcc	r1, #0
 800bf92:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 800bf96:	910e      	str	r1, [sp, #56]	@ 0x38
 800bf98:	bf94      	ite	ls
 800bf9a:	2101      	movls	r1, #1
 800bf9c:	2100      	movhi	r1, #0
 800bf9e:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
 800bfa2:	4622      	mov	r2, r4
 800bfa4:	f001 0101 	and.w	r1, r1, #1
 800bfa8:	bf38      	it	cc
 800bfaa:	2100      	movcc	r1, #0
 800bfac:	42a0      	cmp	r0, r4
 800bfae:	910f      	str	r1, [sp, #60]	@ 0x3c
 800bfb0:	bf8c      	ite	hi
 800bfb2:	2200      	movhi	r2, #0
 800bfb4:	2201      	movls	r2, #1
 800bfb6:	42a7      	cmp	r7, r4
 800bfb8:	bf38      	it	cc
 800bfba:	2200      	movcc	r2, #0
 800bfbc:	9210      	str	r2, [sp, #64]	@ 0x40
 800bfbe:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
 800bfc2:	4290      	cmp	r0, r2
 800bfc4:	bf8c      	ite	hi
 800bfc6:	2100      	movhi	r1, #0
 800bfc8:	2101      	movls	r1, #1
 800bfca:	4297      	cmp	r7, r2
 800bfcc:	bf38      	it	cc
 800bfce:	2100      	movcc	r1, #0
 800bfd0:	9106      	str	r1, [sp, #24]
 800bfd2:	e014      	b.n	800bffe <BSP_I2C4_Init+0x28a>
 800bfd4:	24000cf8 	.word	0x24000cf8
 800bfd8:	240002a0 	.word	0x240002a0
 800bfdc:	58001c00 	.word	0x58001c00
 800bfe0:	58024400 	.word	0x58024400
 800bfe4:	58020c00 	.word	0x58020c00
 800bfe8:	3b9aca00 	.word	0x3b9aca00
 800bfec:	240002f4 	.word	0x240002f4
 800bff0:	240002f8 	.word	0x240002f8
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800bff4:	9a00      	ldr	r2, [sp, #0]
 800bff6:	44a8      	add	r8, r5
 800bff8:	2a10      	cmp	r2, #16
 800bffa:	f000 8239 	beq.w	800c470 <BSP_I2C4_Init+0x6fc>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800bffe:	9900      	ldr	r1, [sp, #0]
      if (tscldel >= (uint32_t)tscldel_min)
 800c000:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 800c004:	460a      	mov	r2, r1
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800c006:	f101 0101 	add.w	r1, r1, #1
 800c00a:	9100      	str	r1, [sp, #0]
      if (tscldel >= (uint32_t)tscldel_min)
 800c00c:	d3f2      	bcc.n	800bff4 <BSP_I2C4_Init+0x280>
            if(presc != prev_presc)
 800c00e:	2800      	cmp	r0, #0
 800c010:	f040 80a6 	bne.w	800c160 <BSP_I2C4_Init+0x3ec>
 800c014:	4556      	cmp	r6, sl
 800c016:	f000 80a3 	beq.w	800c160 <BSP_I2C4_Init+0x3ec>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c01a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c01e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c020:	f04f 0e00 	mov.w	lr, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c024:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c028:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c02a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c02e:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c032:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c034:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c036:	f200 80f1 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c03a:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c03c:	45b2      	cmp	sl, r6
 800c03e:	f000 80ac 	beq.w	800c19a <BSP_I2C4_Init+0x426>
 800c042:	9904      	ldr	r1, [sp, #16]
 800c044:	2900      	cmp	r1, #0
 800c046:	f000 81b0 	beq.w	800c3aa <BSP_I2C4_Init+0x636>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c04a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c04e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c050:	f04f 0e03 	mov.w	lr, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c054:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c058:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c05a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c05e:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c062:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c064:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c066:	f200 80d9 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c06a:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c06c:	4556      	cmp	r6, sl
 800c06e:	d026      	beq.n	800c0be <BSP_I2C4_Init+0x34a>
 800c070:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c072:	2900      	cmp	r1, #0
 800c074:	f000 81b1 	beq.w	800c3da <BSP_I2C4_Init+0x666>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c078:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c07c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c07e:	46ce      	mov	lr, r9
 800c080:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c084:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c086:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c08a:	e9c1 2c01 	strd	r2, ip, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c08e:	f200 80c5 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c092:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c094:	4556      	cmp	r6, sl
 800c096:	d012      	beq.n	800c0be <BSP_I2C4_Init+0x34a>
 800c098:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c09a:	2900      	cmp	r1, #0
 800c09c:	f000 81b3 	beq.w	800c406 <BSP_I2C4_Init+0x692>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c0a0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c0a4:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c0a6:	240b      	movs	r4, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c0a8:	46ce      	mov	lr, r9
 800c0aa:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c0ae:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c0b0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c0b4:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c0b6:	608c      	str	r4, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c0b8:	f200 80b0 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c0bc:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c0be:	4558      	cmp	r0, fp
 800c0c0:	bf8c      	ite	hi
 800c0c2:	2100      	movhi	r1, #0
 800c0c4:	2101      	movls	r1, #1
 800c0c6:	455f      	cmp	r7, fp
 800c0c8:	bf38      	it	cc
 800c0ca:	2100      	movcc	r1, #0
 800c0cc:	2900      	cmp	r1, #0
 800c0ce:	f000 81b0 	beq.w	800c432 <BSP_I2C4_Init+0x6be>
 800c0d2:	4556      	cmp	r6, sl
 800c0d4:	d08e      	beq.n	800bff4 <BSP_I2C4_Init+0x280>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c0d6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c0da:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c0dc:	46ce      	mov	lr, r9
 800c0de:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
 800c0e2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c0e6:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c0e8:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c0ea:	f04f 020e 	mov.w	r2, #14
 800c0ee:	608a      	str	r2, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c0f0:	f200 8094 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c0f4:	46b2      	mov	sl, r6
 800c0f6:	e77d      	b.n	800bff4 <BSP_I2C4_Init+0x280>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800c0f8:	9a05      	ldr	r2, [sp, #20]
 800c0fa:	4661      	mov	r1, ip
 800c0fc:	9807      	ldr	r0, [sp, #28]
 800c0fe:	f109 0914 	add.w	r9, r9, #20
 800c102:	3201      	adds	r2, #1
 800c104:	4282      	cmp	r2, r0
 800c106:	9205      	str	r2, [sp, #20]
 800c108:	e9dd c409 	ldrd	ip, r4, [sp, #36]	@ 0x24
 800c10c:	e9dd e30b 	ldrd	lr, r3, [sp, #44]	@ 0x2c
 800c110:	f040 80a5 	bne.w	800c25e <BSP_I2C4_Init+0x4ea>
        if (idx < I2C_VALID_TIMING_NBR)
 800c114:	9b00      	ldr	r3, [sp, #0]
 800c116:	9c08      	ldr	r4, [sp, #32]
 800c118:	2b7f      	cmp	r3, #127	@ 0x7f
 800c11a:	d817      	bhi.n	800c14c <BSP_I2C4_Init+0x3d8>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800c11c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c120:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 800c124:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800c128:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800c12a:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800c12c:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800c12e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800c132:	f400 0070 	and.w	r0, r0, #15728640	@ 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800c136:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800c13a:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800c13c:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800c13e:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800c140:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800c144:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800c146:	430b      	orrs	r3, r1
 800c148:	ea43 0402 	orr.w	r4, r3, r2
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800c14c:	4621      	mov	r1, r4
 800c14e:	48c5      	ldr	r0, [pc, #788]	@ (800c464 <BSP_I2C4_Init+0x6f0>)
 800c150:	f7ff fdf0 	bl	800bd34 <MX_I2C4_Init>
 800c154:	2800      	cmp	r0, #0
 800c156:	f43f ae16 	beq.w	800bd86 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 800c15a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800c15e:	e613      	b.n	800bd88 <BSP_I2C4_Init+0x14>
            if(presc != prev_presc)
 800c160:	42bd      	cmp	r5, r7
 800c162:	bf8c      	ite	hi
 800c164:	2100      	movhi	r1, #0
 800c166:	2101      	movls	r1, #1
 800c168:	4285      	cmp	r5, r0
 800c16a:	bf38      	it	cc
 800c16c:	2100      	movcc	r1, #0
 800c16e:	2900      	cmp	r1, #0
 800c170:	f000 80d5 	beq.w	800c31e <BSP_I2C4_Init+0x5aa>
 800c174:	4556      	cmp	r6, sl
 800c176:	f43f af61 	beq.w	800c03c <BSP_I2C4_Init+0x2c8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c17a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c17e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c180:	f04f 0e01 	mov.w	lr, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c184:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c188:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c18a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c18e:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c192:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c194:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c196:	d841      	bhi.n	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c198:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c19a:	4556      	cmp	r6, sl
 800c19c:	d08f      	beq.n	800c0be <BSP_I2C4_Init+0x34a>
 800c19e:	9908      	ldr	r1, [sp, #32]
 800c1a0:	2900      	cmp	r1, #0
 800c1a2:	f000 80d4 	beq.w	800c34e <BSP_I2C4_Init+0x5da>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c1a6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c1aa:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c1ac:	f04f 0e05 	mov.w	lr, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c1b0:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c1b4:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c1b6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c1ba:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c1be:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c1c0:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c1c2:	d82b      	bhi.n	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c1c4:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c1c6:	4556      	cmp	r6, sl
 800c1c8:	f43f af79 	beq.w	800c0be <BSP_I2C4_Init+0x34a>
 800c1cc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c1ce:	2900      	cmp	r1, #0
 800c1d0:	f000 80d5 	beq.w	800c37e <BSP_I2C4_Init+0x60a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c1d4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c1d8:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c1da:	2409      	movs	r4, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c1dc:	46ce      	mov	lr, r9
 800c1de:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c1e2:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c1e4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c1e8:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c1ea:	608c      	str	r4, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c1ec:	d816      	bhi.n	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c1ee:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c1f0:	4556      	cmp	r6, sl
 800c1f2:	f43f af64 	beq.w	800c0be <BSP_I2C4_Init+0x34a>
 800c1f6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c1f8:	2900      	cmp	r1, #0
 800c1fa:	f43f af60 	beq.w	800c0be <BSP_I2C4_Init+0x34a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c1fe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c202:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c204:	46ce      	mov	lr, r9
 800c206:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
 800c20a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c20e:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c210:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c212:	f04f 020d 	mov.w	r2, #13
 800c216:	608a      	str	r2, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c218:	f67f af6c 	bls.w	800c0f4 <BSP_I2C4_Init+0x380>
 800c21c:	4a92      	ldr	r2, [pc, #584]	@ (800c468 <BSP_I2C4_Init+0x6f4>)
 800c21e:	9c02      	ldr	r4, [sp, #8]
 800c220:	9903      	ldr	r1, [sp, #12]
 800c222:	9307      	str	r3, [sp, #28]
 800c224:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800c226:	f640 0234 	movw	r2, #2100	@ 0x834
 800c22a:	f101 0332 	add.w	r3, r1, #50	@ 0x32
 800c22e:	f240 2657 	movw	r6, #599	@ 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c232:	2000      	movs	r0, #0
 800c234:	1a52      	subs	r2, r2, r1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800c236:	469c      	mov	ip, r3
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c238:	9005      	str	r0, [sp, #20]
 800c23a:	f640 1bc4 	movw	fp, #2500	@ 0x9c4
 800c23e:	1ad5      	subs	r5, r2, r3
 800c240:	9a01      	ldr	r2, [sp, #4]
 800c242:	f04f 30ff 	mov.w	r0, #4294967295
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800c246:	460b      	mov	r3, r1
 800c248:	4296      	cmp	r6, r2
 800c24a:	9408      	str	r4, [sp, #32]
 800c24c:	f8df 921c 	ldr.w	r9, [pc, #540]	@ 800c46c <BSP_I2C4_Init+0x6f8>
 800c250:	f240 4a12 	movw	sl, #1042	@ 0x412
 800c254:	bf38      	it	cc
 800c256:	4616      	movcc	r6, r2
 800c258:	462c      	mov	r4, r5
 800c25a:	4611      	mov	r1, r2
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c25c:	9000      	str	r0, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800c25e:	f8d9 0000 	ldr.w	r0, [r9]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800c262:	2500      	movs	r5, #0
 800c264:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800c268:	fb00 1001 	mla	r0, r0, r1, r1
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800c26c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c26e:	18c2      	adds	r2, r0, r3
 800c270:	eb00 070c 	add.w	r7, r0, ip
 800c274:	eba4 0840 	sub.w	r8, r4, r0, lsl #1
 800c278:	468c      	mov	ip, r1
 800c27a:	f6a2 0234 	subw	r2, r2, #2100	@ 0x834
 800c27e:	e9cd 4e0a 	strd	r4, lr, [sp, #40]	@ 0x28
 800c282:	9206      	str	r2, [sp, #24]
 800c284:	e006      	b.n	800c294 <BSP_I2C4_Init+0x520>
 800c286:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800c28a:	4407      	add	r7, r0
 800c28c:	eba8 0800 	sub.w	r8, r8, r0
 800c290:	f43f af32 	beq.w	800c0f8 <BSP_I2C4_Init+0x384>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800c294:	f240 5314 	movw	r3, #1300	@ 0x514
 800c298:	4629      	mov	r1, r5
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c29a:	3501      	adds	r5, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800c29c:	429f      	cmp	r7, r3
 800c29e:	d9f2      	bls.n	800c286 <BSP_I2C4_Init+0x512>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c2a0:	f1a7 0332 	sub.w	r3, r7, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800c2a4:	ebbc 0f93 	cmp.w	ip, r3, lsr #2
 800c2a8:	d2ed      	bcs.n	800c286 <BSP_I2C4_Init+0x512>
 800c2aa:	f640 0e34 	movw	lr, #2100	@ 0x834
 800c2ae:	4644      	mov	r4, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800c2b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	ebae 0e03 	sub.w	lr, lr, r3
 800c2ba:	9b06      	ldr	r3, [sp, #24]
 800c2bc:	9704      	str	r7, [sp, #16]
 800c2be:	443b      	add	r3, r7
 800c2c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c2c4:	460f      	mov	r7, r1
 800c2c6:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800c2ca:	46b4      	mov	ip, r6
 800c2cc:	e005      	b.n	800c2da <BSP_I2C4_Init+0x566>
 800c2ce:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800c2d2:	4403      	add	r3, r0
 800c2d4:	eba4 0400 	sub.w	r4, r4, r0
 800c2d8:	d01a      	beq.n	800c310 <BSP_I2C4_Init+0x59c>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800c2da:	eb0e 0103 	add.w	r1, lr, r3
 800c2de:	4616      	mov	r6, r2
 800c2e0:	f203 15a1 	addw	r5, r3, #417	@ 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800c2e4:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800c2e6:	4561      	cmp	r1, ip
 800c2e8:	d9f1      	bls.n	800c2ce <BSP_I2C4_Init+0x55a>
 800c2ea:	4555      	cmp	r5, sl
 800c2ec:	d8ef      	bhi.n	800c2ce <BSP_I2C4_Init+0x55a>
            if (error < 0)
 800c2ee:	ea33 0123 	bics.w	r1, r3, r3, asr #32
 800c2f2:	bf28      	it	cs
 800c2f4:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
 800c2f6:	458b      	cmp	fp, r1
 800c2f8:	d9e9      	bls.n	800c2ce <BSP_I2C4_Init+0x55a>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800c2fa:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
              prev_error = (uint32_t)error;
 800c2fe:	468b      	mov	fp, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800c300:	4403      	add	r3, r0
 800c302:	eba4 0400 	sub.w	r4, r4, r0
              ret = count;
 800c306:	f8cd 8000 	str.w	r8, [sp]
              I2c_valid_timing[count].sclh = sclh;
 800c30a:	e9c9 6703 	strd	r6, r7, [r9, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800c30e:	d1e4      	bne.n	800c2da <BSP_I2C4_Init+0x566>
 800c310:	4666      	mov	r6, ip
 800c312:	9d01      	ldr	r5, [sp, #4]
 800c314:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c318:	e9dd 8703 	ldrd	r8, r7, [sp, #12]
 800c31c:	e7b3      	b.n	800c286 <BSP_I2C4_Init+0x512>
            if(presc != prev_presc)
 800c31e:	4556      	cmp	r6, sl
 800c320:	f43f ae8c 	beq.w	800c03c <BSP_I2C4_Init+0x2c8>
 800c324:	9905      	ldr	r1, [sp, #20]
 800c326:	2900      	cmp	r1, #0
 800c328:	f43f ae88 	beq.w	800c03c <BSP_I2C4_Init+0x2c8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c32c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c330:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c332:	f04f 0e02 	mov.w	lr, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c336:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c33a:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c33c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c340:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c344:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c346:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c348:	f63f af68 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c34c:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c34e:	4556      	cmp	r6, sl
 800c350:	f43f aeb5 	beq.w	800c0be <BSP_I2C4_Init+0x34a>
 800c354:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c356:	2900      	cmp	r1, #0
 800c358:	f43f ae88 	beq.w	800c06c <BSP_I2C4_Init+0x2f8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c35c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c360:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c362:	f04f 0e06 	mov.w	lr, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c366:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c36a:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c36c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c370:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c374:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c376:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c378:	f63f af50 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c37c:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c37e:	4556      	cmp	r6, sl
 800c380:	f43f ae9d 	beq.w	800c0be <BSP_I2C4_Init+0x34a>
 800c384:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c386:	2900      	cmp	r1, #0
 800c388:	f43f ae84 	beq.w	800c094 <BSP_I2C4_Init+0x320>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c38c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c390:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c392:	240a      	movs	r4, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c394:	46ce      	mov	lr, r9
 800c396:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c39a:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c39c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c3a0:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c3a2:	608c      	str	r4, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c3a4:	f67f ae8a 	bls.w	800c0bc <BSP_I2C4_Init+0x348>
 800c3a8:	e738      	b.n	800c21c <BSP_I2C4_Init+0x4a8>
            if(presc != prev_presc)
 800c3aa:	45b2      	cmp	sl, r6
 800c3ac:	f43f aef5 	beq.w	800c19a <BSP_I2C4_Init+0x426>
 800c3b0:	9907      	ldr	r1, [sp, #28]
 800c3b2:	2900      	cmp	r1, #0
 800c3b4:	f43f aef1 	beq.w	800c19a <BSP_I2C4_Init+0x426>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c3b8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c3bc:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c3be:	f04f 0e04 	mov.w	lr, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c3c2:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c3c6:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c3c8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c3cc:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c3d0:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c3d2:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c3d4:	f63f af22 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c3d8:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c3da:	4556      	cmp	r6, sl
 800c3dc:	f43f ae6f 	beq.w	800c0be <BSP_I2C4_Init+0x34a>
 800c3e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3e2:	2900      	cmp	r1, #0
 800c3e4:	f43f aeef 	beq.w	800c1c6 <BSP_I2C4_Init+0x452>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c3e8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c3ec:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c3ee:	2408      	movs	r4, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c3f0:	46ce      	mov	lr, r9
 800c3f2:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c3f6:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c3f8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c3fc:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c3fe:	608c      	str	r4, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c400:	f63f af0c 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c404:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c406:	4556      	cmp	r6, sl
 800c408:	f43f ae59 	beq.w	800c0be <BSP_I2C4_Init+0x34a>
 800c40c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c40e:	2900      	cmp	r1, #0
 800c410:	f43f aeee 	beq.w	800c1f0 <BSP_I2C4_Init+0x47c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c414:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c418:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c41a:	240c      	movs	r4, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c41c:	46ce      	mov	lr, r9
 800c41e:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c422:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c424:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c428:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c42a:	608c      	str	r4, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c42c:	f63f aef6 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c430:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c432:	4556      	cmp	r6, sl
 800c434:	f43f adde 	beq.w	800bff4 <BSP_I2C4_Init+0x280>
 800c438:	9906      	ldr	r1, [sp, #24]
 800c43a:	2900      	cmp	r1, #0
 800c43c:	f43f adda 	beq.w	800bff4 <BSP_I2C4_Init+0x280>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c440:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800c444:	f8df e024 	ldr.w	lr, [pc, #36]	@ 800c46c <BSP_I2C4_Init+0x6f8>
              I2c_valid_timing_nbr ++;
 800c448:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c44a:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
 800c44e:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c452:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c454:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c456:	f04f 020f 	mov.w	r2, #15
 800c45a:	608a      	str	r2, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c45c:	f63f aede 	bhi.w	800c21c <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c460:	46b2      	mov	sl, r6
 800c462:	e5c7      	b.n	800bff4 <BSP_I2C4_Init+0x280>
 800c464:	240002a0 	.word	0x240002a0
 800c468:	240002f4 	.word	0x240002f4
 800c46c:	240002f8 	.word	0x240002f8
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800c470:	9a01      	ldr	r2, [sp, #4]
 800c472:	3601      	adds	r6, #1
 800c474:	4415      	add	r5, r2
 800c476:	2e10      	cmp	r6, #16
 800c478:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c47a:	4493      	add	fp, r2
 800c47c:	f47f ad02 	bne.w	800be84 <BSP_I2C4_Init+0x110>
 800c480:	4a05      	ldr	r2, [pc, #20]	@ (800c498 <BSP_I2C4_Init+0x724>)
 800c482:	9c02      	ldr	r4, [sp, #8]
 800c484:	9903      	ldr	r1, [sp, #12]
 800c486:	9307      	str	r3, [sp, #28]
 800c488:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f43f ae5e 	beq.w	800c14c <BSP_I2C4_Init+0x3d8>
 800c490:	f8df e008 	ldr.w	lr, [pc, #8]	@ 800c49c <BSP_I2C4_Init+0x728>
 800c494:	e6c7      	b.n	800c226 <BSP_I2C4_Init+0x4b2>
 800c496:	bf00      	nop
 800c498:	240002f4 	.word	0x240002f4
 800c49c:	240002f8 	.word	0x240002f8

0800c4a0 <BSP_I2C4_WriteReg>:
{
 800c4a0:	b530      	push	{r4, r5, lr}
 800c4a2:	4614      	mov	r4, r2
 800c4a4:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800c4a6:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 800c4aa:	460a      	mov	r2, r1
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	4601      	mov	r1, r0
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	4809      	ldr	r0, [pc, #36]	@ (800c4d8 <BSP_I2C4_WriteReg+0x38>)
 800c4b4:	9502      	str	r5, [sp, #8]
 800c4b6:	9400      	str	r4, [sp, #0]
 800c4b8:	f002 fb60 	bl	800eb7c <HAL_I2C_Mem_Write>
 800c4bc:	b908      	cbnz	r0, 800c4c2 <BSP_I2C4_WriteReg+0x22>
}
 800c4be:	b005      	add	sp, #20
 800c4c0:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800c4c2:	4805      	ldr	r0, [pc, #20]	@ (800c4d8 <BSP_I2C4_WriteReg+0x38>)
 800c4c4:	f002 fe10 	bl	800f0e8 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800c4c8:	2804      	cmp	r0, #4
 800c4ca:	bf14      	ite	ne
 800c4cc:	f06f 0003 	mvnne.w	r0, #3
 800c4d0:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 800c4d4:	e7f3      	b.n	800c4be <BSP_I2C4_WriteReg+0x1e>
 800c4d6:	bf00      	nop
 800c4d8:	240002a0 	.word	0x240002a0

0800c4dc <BSP_I2C4_ReadReg>:
{
 800c4dc:	b530      	push	{r4, r5, lr}
 800c4de:	4614      	mov	r4, r2
 800c4e0:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800c4e2:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 800c4e6:	460a      	mov	r2, r1
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	4601      	mov	r1, r0
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	4809      	ldr	r0, [pc, #36]	@ (800c514 <BSP_I2C4_ReadReg+0x38>)
 800c4f0:	9502      	str	r5, [sp, #8]
 800c4f2:	9400      	str	r4, [sp, #0]
 800c4f4:	f002 fcb0 	bl	800ee58 <HAL_I2C_Mem_Read>
 800c4f8:	b908      	cbnz	r0, 800c4fe <BSP_I2C4_ReadReg+0x22>
}
 800c4fa:	b005      	add	sp, #20
 800c4fc:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800c4fe:	4805      	ldr	r0, [pc, #20]	@ (800c514 <BSP_I2C4_ReadReg+0x38>)
 800c500:	f002 fdf2 	bl	800f0e8 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800c504:	2804      	cmp	r0, #4
 800c506:	bf14      	ite	ne
 800c508:	f06f 0003 	mvnne.w	r0, #3
 800c50c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 800c510:	e7f3      	b.n	800c4fa <BSP_I2C4_ReadReg+0x1e>
 800c512:	bf00      	nop
 800c514:	240002a0 	.word	0x240002a0

0800c518 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800c518:	f001 bbca 	b.w	800dcb0 <HAL_GetTick>

0800c51c <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c51c:	b918      	cbnz	r0, 800c526 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800c51e:	4b03      	ldr	r3, [pc, #12]	@ (800c52c <BSP_LCD_GetPixelFormat+0x10>)
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	600b      	str	r3, [r1, #0]
 800c524:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c526:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c52a:	4770      	bx	lr
 800c52c:	24000cfc 	.word	0x24000cfc

0800c530 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c530:	b910      	cbnz	r0, 800c538 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800c532:	4b03      	ldr	r3, [pc, #12]	@ (800c540 <BSP_LCD_SetActiveLayer+0x10>)
 800c534:	6099      	str	r1, [r3, #8]
 800c536:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c538:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	24000cfc 	.word	0x24000cfc

0800c544 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c544:	b918      	cbnz	r0, 800c54e <BSP_LCD_GetXSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800c546:	4b03      	ldr	r3, [pc, #12]	@ (800c554 <BSP_LCD_GetXSize+0x10>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	600b      	str	r3, [r1, #0]
 800c54c:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c54e:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c552:	4770      	bx	lr
 800c554:	24000cfc 	.word	0x24000cfc

0800c558 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c558:	b918      	cbnz	r0, 800c562 <BSP_LCD_GetYSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800c55a:	4b03      	ldr	r3, [pc, #12]	@ (800c568 <BSP_LCD_GetYSize+0x10>)
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	600b      	str	r3, [r1, #0]
 800c560:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c562:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c566:	4770      	bx	lr
 800c568:	24000cfc 	.word	0x24000cfc

0800c56c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800c56c:	b410      	push	{r4}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c56e:	4c0f      	ldr	r4, [pc, #60]	@ (800c5ac <BSP_LCD_ReadPixel+0x40>)
 800c570:	eb04 1c40 	add.w	ip, r4, r0, lsl #5
 800c574:	0140      	lsls	r0, r0, #5
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c576:	5820      	ldr	r0, [r4, r0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c578:	f8dc 4008 	ldr.w	r4, [ip, #8]
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c57c:	fb00 1102 	mla	r1, r0, r2, r1
 800c580:	2234      	movs	r2, #52	@ 0x34
 800c582:	480b      	ldr	r0, [pc, #44]	@ (800c5b0 <BSP_LCD_ReadPixel+0x44>)
 800c584:	fb02 0004 	mla	r0, r2, r4, r0
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c588:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c58a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c58c:	b934      	cbnz	r4, 800c59c <BSP_LCD_ReadPixel+0x30>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c58e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
  }

  return BSP_ERROR_NONE;
}
 800c592:	2000      	movs	r0, #0
 800c594:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c598:	601a      	str	r2, [r3, #0]
 800c59a:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c59c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
}
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c5a6:	b292      	uxth	r2, r2
 800c5a8:	601a      	str	r2, [r3, #0]
}
 800c5aa:	4770      	bx	lr
 800c5ac:	24000cfc 	.word	0x24000cfc
 800c5b0:	24000d1c 	.word	0x24000d1c

0800c5b4 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800c5b4:	b410      	push	{r4}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c5b6:	4c0e      	ldr	r4, [pc, #56]	@ (800c5f0 <BSP_LCD_WritePixel+0x3c>)
 800c5b8:	eb04 1c40 	add.w	ip, r4, r0, lsl #5
 800c5bc:	0140      	lsls	r0, r0, #5
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c5be:	5820      	ldr	r0, [r4, r0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c5c0:	f8dc 4008 	ldr.w	r4, [ip, #8]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c5c4:	fb00 1102 	mla	r1, r0, r2, r1
 800c5c8:	2234      	movs	r2, #52	@ 0x34
 800c5ca:	480a      	ldr	r0, [pc, #40]	@ (800c5f4 <BSP_LCD_WritePixel+0x40>)
 800c5cc:	fb02 0004 	mla	r0, r2, r4, r0
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c5d0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c5d2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c5d4:	b92c      	cbnz	r4, 800c5e2 <BSP_LCD_WritePixel+0x2e>
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
  }

  return BSP_ERROR_NONE;
}
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c5dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800c5e0:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c5e2:	b29b      	uxth	r3, r3
}
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c5ea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
}
 800c5ee:	4770      	bx	lr
 800c5f0:	24000cfc 	.word	0x24000cfc
 800c5f4:	24000d1c 	.word	0x24000d1c

0800c5f8 <BSP_LCD_DrawBitmap>:
{
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c5fc:	4e3d      	ldr	r6, [pc, #244]	@ (800c6f4 <BSP_LCD_DrawBitmap+0xfc>)
 800c5fe:	0145      	lsls	r5, r0, #5
{
 800c600:	461f      	mov	r7, r3
 800c602:	4696      	mov	lr, r2
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c604:	eb06 1040 	add.w	r0, r6, r0, lsl #5
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c608:	f8d3 400a 	ldr.w	r4, [r3, #10]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c60c:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 800c610:	4b39      	ldr	r3, [pc, #228]	@ (800c6f8 <BSP_LCD_DrawBitmap+0x100>)
 800c612:	6882      	ldr	r2, [r0, #8]
{
 800c614:	b085      	sub	sp, #20
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800c616:	f8b7 901c 	ldrh.w	r9, [r7, #28]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c61a:	fb0c 3302 	mla	r3, ip, r2, r3
 800c61e:	5972      	ldr	r2, [r6, r5]
 800c620:	6900      	ldr	r0, [r0, #16]
 800c622:	fb02 110e 	mla	r1, r2, lr, r1
  if ((bit_pixel/8U) == 4U)
 800c626:	f1a9 0220 	sub.w	r2, r9, #32
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c62a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  if ((bit_pixel/8U) == 4U)
 800c62c:	2a07      	cmp	r2, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c62e:	f8d7 a016 	ldr.w	sl, [r7, #22]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c632:	fb00 3b01 	mla	fp, r0, r1, r3
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c636:	f8d7 3012 	ldr.w	r3, [r7, #18]
  if ((bit_pixel/8U) == 4U)
 800c63a:	d957      	bls.n	800c6ec <BSP_LCD_DrawBitmap+0xf4>
  else if ((bit_pixel/8U) == 2U)
 800c63c:	f1a9 0210 	sub.w	r2, r9, #16
    input_color_mode = DMA2D_INPUT_RGB565;
 800c640:	2a07      	cmp	r2, #7
 800c642:	bf8c      	ite	hi
 800c644:	f04f 0c01 	movhi.w	ip, #1
 800c648:	f04f 0c02 	movls.w	ip, #2
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800c64c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800c650:	f10a 32ff 	add.w	r2, sl, #4294967295
 800c654:	fb03 f909 	mul.w	r9, r3, r9
 800c658:	fb09 4402 	mla	r4, r9, r2, r4
 800c65c:	4427      	add	r7, r4
  for(index=0; index < height; index++)
 800c65e:	f1ba 0f00 	cmp.w	sl, #0
 800c662:	d03f      	beq.n	800c6e4 <BSP_LCD_DrawBitmap+0xec>
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 800c664:	442e      	add	r6, r5
    pbmp -= width*(bit_pixel/8U);
 800c666:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 800c66a:	f04f 0800 	mov.w	r8, #0
 800c66e:	4c23      	ldr	r4, [pc, #140]	@ (800c6fc <BSP_LCD_DrawBitmap+0x104>)
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;

  hlcd_dma2d.Instance = DMA2D;
 800c670:	4665      	mov	r5, ip
 800c672:	9303      	str	r3, [sp, #12]
 800c674:	e008      	b.n	800c688 <BSP_LCD_DrawBitmap+0x90>
  for(index=0; index < height; index++)
 800c676:	f108 0801 	add.w	r8, r8, #1
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800c67a:	6833      	ldr	r3, [r6, #0]
 800c67c:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800c67e:	444f      	add	r7, r9
  for(index=0; index < height; index++)
 800c680:	45c2      	cmp	sl, r8
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800c682:	fb02 bb03 	mla	fp, r2, r3, fp
  for(index=0; index < height; index++)
 800c686:	d02d      	beq.n	800c6e4 <BSP_LCD_DrawBitmap+0xec>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c688:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800c68a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  hlcd_dma2d.Init.OutputOffset = 0;
 800c68e:	2200      	movs	r2, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800c690:	21ff      	movs	r1, #255	@ 0xff
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c692:	f1a3 0302 	sub.w	r3, r3, #2
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800c696:	6060      	str	r0, [r4, #4]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c698:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = 0;
 800c69a:	60e2      	str	r2, [r4, #12]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c69c:	fab3 f383 	clz	r3, r3
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800c6a0:	64e2      	str	r2, [r4, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800c6a2:	6521      	str	r1, [r4, #80]	@ 0x50
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c6a4:	095b      	lsrs	r3, r3, #5
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800c6a6:	64a5      	str	r5, [r4, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800c6a8:	6462      	str	r2, [r4, #68]	@ 0x44
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c6aa:	005b      	lsls	r3, r3, #1
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800c6ac:	60a3      	str	r3, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800c6ae:	4b14      	ldr	r3, [pc, #80]	@ (800c700 <BSP_LCD_DrawBitmap+0x108>)
 800c6b0:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c6b2:	f001 fb81 	bl	800ddb8 <HAL_DMA2D_Init>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d1dd      	bne.n	800c676 <BSP_LCD_DrawBitmap+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800c6ba:	2101      	movs	r1, #1
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f001 fcc1 	bl	800e044 <HAL_DMA2D_ConfigLayer>
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	d1d7      	bne.n	800c676 <BSP_LCD_DrawBitmap+0x7e>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	465a      	mov	r2, fp
 800c6ca:	4639      	mov	r1, r7
 800c6cc:	480b      	ldr	r0, [pc, #44]	@ (800c6fc <BSP_LCD_DrawBitmap+0x104>)
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	9b03      	ldr	r3, [sp, #12]
 800c6d2:	f001 fbaf 	bl	800de34 <HAL_DMA2D_Start>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d1cd      	bne.n	800c676 <BSP_LCD_DrawBitmap+0x7e>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800c6da:	2132      	movs	r1, #50	@ 0x32
 800c6dc:	4807      	ldr	r0, [pc, #28]	@ (800c6fc <BSP_LCD_DrawBitmap+0x104>)
 800c6de:	f001 fc03 	bl	800dee8 <HAL_DMA2D_PollForTransfer>
 800c6e2:	e7c8      	b.n	800c676 <BSP_LCD_DrawBitmap+0x7e>
}
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	b005      	add	sp, #20
 800c6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800c6ec:	f04f 0c00 	mov.w	ip, #0
 800c6f0:	e7ac      	b.n	800c64c <BSP_LCD_DrawBitmap+0x54>
 800c6f2:	bf00      	nop
 800c6f4:	24000cfc 	.word	0x24000cfc
 800c6f8:	24000d1c 	.word	0x24000d1c
 800c6fc:	24000dc4 	.word	0x24000dc4
 800c700:	52001000 	.word	0x52001000

0800c704 <BSP_LCD_DrawVLine>:
{
 800c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c70a:	4932      	ldr	r1, [pc, #200]	@ (800c7d4 <BSP_LCD_DrawVLine+0xd0>)
{
 800c70c:	461e      	mov	r6, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c70e:	0144      	lsls	r4, r0, #5
 800c710:	eb01 1040 	add.w	r0, r1, r0, lsl #5
{
 800c714:	4692      	mov	sl, r2
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800c716:	eb02 0c06 	add.w	ip, r2, r6
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c71a:	4b2f      	ldr	r3, [pc, #188]	@ (800c7d8 <BSP_LCD_DrawVLine+0xd4>)
 800c71c:	6882      	ldr	r2, [r0, #8]
 800c71e:	f04f 0e34 	mov.w	lr, #52	@ 0x34
 800c722:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
 800c726:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c728:	fb0e 3302 	mla	r3, lr, r2, r3
 800c72c:	f851 b004 	ldr.w	fp, [r1, r4]
{
 800c730:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c732:	f8d3 805c 	ldr.w	r8, [r3, #92]	@ 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800c736:	6843      	ldr	r3, [r0, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c738:	1908      	adds	r0, r1, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800c73a:	f10b 31ff 	add.w	r1, fp, #4294967295
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800c73e:	459c      	cmp	ip, r3
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c740:	68c2      	ldr	r2, [r0, #12]
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800c742:	bf88      	it	hi
 800c744:	eba3 060a 	subhi.w	r6, r3, sl
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c748:	2a02      	cmp	r2, #2
 800c74a:	d010      	beq.n	800c76e <BSP_LCD_DrawVLine+0x6a>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800c74c:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800c74e:	4c23      	ldr	r4, [pc, #140]	@ (800c7dc <BSP_LCD_DrawVLine+0xd8>)
  hlcd_dma2d.Instance = DMA2D;
 800c750:	4b23      	ldr	r3, [pc, #140]	@ (800c7e0 <BSP_LCD_DrawVLine+0xdc>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c752:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800c754:	e9c4 2102 	strd	r2, r1, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800c758:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800c75c:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c760:	f001 fb2a 	bl	800ddb8 <HAL_DMA2D_Init>
 800c764:	b310      	cbz	r0, 800c7ac <BSP_LCD_DrawVLine+0xa8>
}
 800c766:	2000      	movs	r0, #0
 800c768:	b003      	add	sp, #12
 800c76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800c76e:	f3c5 1045 	ubfx	r0, r5, #5, #6
 800c772:	f3c5 24c4 	ubfx	r4, r5, #11, #5
 800c776:	f005 051f 	and.w	r5, r5, #31
 800c77a:	eb00 13c0 	add.w	r3, r0, r0, lsl #7
 800c77e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800c782:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c786:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 800c78a:	3321      	adds	r3, #33	@ 0x21
 800c78c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800c790:	3417      	adds	r4, #23
 800c792:	099b      	lsrs	r3, r3, #6
 800c794:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800c798:	09a4      	lsrs	r4, r4, #6
 800c79a:	021b      	lsls	r3, r3, #8
 800c79c:	3517      	adds	r5, #23
 800c79e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c7a2:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 800c7a6:	f043 457f 	orr.w	r5, r3, #4278190080	@ 0xff000000
    break;
 800c7aa:	e7d0      	b.n	800c74e <BSP_LCD_DrawVLine+0x4a>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c7ac:	fb0a 720b 	mla	r2, sl, fp, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	fb09 8202 	mla	r2, r9, r2, r8
 800c7ba:	9600      	str	r6, [sp, #0]
 800c7bc:	f001 fb3a 	bl	800de34 <HAL_DMA2D_Start>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d1d0      	bne.n	800c766 <BSP_LCD_DrawVLine+0x62>
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800c7c4:	2132      	movs	r1, #50	@ 0x32
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f001 fb8e 	bl	800dee8 <HAL_DMA2D_PollForTransfer>
}
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	b003      	add	sp, #12
 800c7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d4:	24000cfc 	.word	0x24000cfc
 800c7d8:	24000d1c 	.word	0x24000d1c
 800c7dc:	24000dc4 	.word	0x24000dc4
 800c7e0:	52001000 	.word	0x52001000

0800c7e4 <BSP_LCD_FillRGBRect>:
{
 800c7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e8:	b083      	sub	sp, #12
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	4696      	mov	lr, r2
 800c7ee:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
  for(i = 0; i < Height; i++)
 800c7f2:	b3c2      	cbz	r2, 800c866 <BSP_LCD_FillRGBRect+0x82>
 800c7f4:	b3b9      	cbz	r1, 800c866 <BSP_LCD_FillRGBRect+0x82>
 800c7f6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800c7fa:	eb02 0b0e 	add.w	fp, r2, lr
 800c7fe:	4a22      	ldr	r2, [pc, #136]	@ (800c888 <BSP_LCD_FillRGBRect+0xa4>)
 800c800:	4688      	mov	r8, r1
 800c802:	f10c 0010 	add.w	r0, ip, #16
 800c806:	4e21      	ldr	r6, [pc, #132]	@ (800c88c <BSP_LCD_FillRGBRect+0xa8>)
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c808:	4494      	add	ip, r2
 800c80a:	4402      	add	r2, r0
 800c80c:	9201      	str	r2, [sp, #4]
    for(j = 0; j < Width; j++)
 800c80e:	2200      	movs	r2, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c810:	2534      	movs	r5, #52	@ 0x34
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c812:	f8dc 0008 	ldr.w	r0, [ip, #8]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c816:	f8dc 7000 	ldr.w	r7, [ip]
 800c81a:	fb05 6000 	mla	r0, r5, r0, r6
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 800c81e:	6819      	ldr	r1, [r3, #0]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c820:	fb07 470e 	mla	r7, r7, lr, r4
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c824:	6c85      	ldr	r5, [r0, #72]	@ 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c826:	eb07 0a02 	add.w	sl, r7, r2
 800c82a:	f8d0 905c 	ldr.w	r9, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c82e:	b1f5      	cbz	r5, 800c86e <BSP_LCD_FillRGBRect+0x8a>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c830:	b289      	uxth	r1, r1
    for(j = 0; j < Width; j++)
 800c832:	3201      	adds	r2, #1
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c834:	f829 101a 	strh.w	r1, [r9, sl, lsl #1]
    for(j = 0; j < Width; j++)
 800c838:	4542      	cmp	r2, r8
      pdata += Lcd_Ctx[Instance].BppFactor;
 800c83a:	f8dc 1010 	ldr.w	r1, [ip, #16]
 800c83e:	440b      	add	r3, r1
    for(j = 0; j < Width; j++)
 800c840:	d00d      	beq.n	800c85e <BSP_LCD_FillRGBRect+0x7a>
 800c842:	9901      	ldr	r1, [sp, #4]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c844:	f8d0 a05c 	ldr.w	sl, [r0, #92]	@ 0x5c
 800c848:	f8d1 9000 	ldr.w	r9, [r1]
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 800c84c:	6819      	ldr	r1, [r3, #0]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c84e:	18b8      	adds	r0, r7, r2
    for(j = 0; j < Width; j++)
 800c850:	3201      	adds	r2, #1
      pdata += Lcd_Ctx[Instance].BppFactor;
 800c852:	444b      	add	r3, r9
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c854:	b289      	uxth	r1, r1
    for(j = 0; j < Width; j++)
 800c856:	4590      	cmp	r8, r2
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c858:	f82a 1010 	strh.w	r1, [sl, r0, lsl #1]
    for(j = 0; j < Width; j++)
 800c85c:	d8f6      	bhi.n	800c84c <BSP_LCD_FillRGBRect+0x68>
  for(i = 0; i < Height; i++)
 800c85e:	f10e 0e01 	add.w	lr, lr, #1
 800c862:	45de      	cmp	lr, fp
 800c864:	d1d3      	bne.n	800c80e <BSP_LCD_FillRGBRect+0x2a>
}
 800c866:	2000      	movs	r0, #0
 800c868:	b003      	add	sp, #12
 800c86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(j = 0; j < Width; j++)
 800c86e:	3201      	adds	r2, #1
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c870:	f849 102a 	str.w	r1, [r9, sl, lsl #2]
      pdata += Lcd_Ctx[Instance].BppFactor;
 800c874:	f8dc 1010 	ldr.w	r1, [ip, #16]
    for(j = 0; j < Width; j++)
 800c878:	4590      	cmp	r8, r2
      pdata += Lcd_Ctx[Instance].BppFactor;
 800c87a:	440b      	add	r3, r1
    for(j = 0; j < Width; j++)
 800c87c:	d1c8      	bne.n	800c810 <BSP_LCD_FillRGBRect+0x2c>
  for(i = 0; i < Height; i++)
 800c87e:	f10e 0e01 	add.w	lr, lr, #1
 800c882:	45de      	cmp	lr, fp
 800c884:	d1c3      	bne.n	800c80e <BSP_LCD_FillRGBRect+0x2a>
 800c886:	e7ee      	b.n	800c866 <BSP_LCD_FillRGBRect+0x82>
 800c888:	24000cfc 	.word	0x24000cfc
 800c88c:	24000d1c 	.word	0x24000d1c

0800c890 <BSP_LCD_FillRect>:
{
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	4690      	mov	r8, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c896:	4a2e      	ldr	r2, [pc, #184]	@ (800c950 <BSP_LCD_FillRect+0xc0>)
{
 800c898:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c89a:	0141      	lsls	r1, r0, #5
 800c89c:	eb02 1040 	add.w	r0, r2, r0, lsl #5
{
 800c8a0:	461e      	mov	r6, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c8a2:	f852 b001 	ldr.w	fp, [r2, r1]
 800c8a6:	2134      	movs	r1, #52	@ 0x34
 800c8a8:	6882      	ldr	r2, [r0, #8]
{
 800c8aa:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c8ac:	4b29      	ldr	r3, [pc, #164]	@ (800c954 <BSP_LCD_FillRect+0xc4>)
{
 800c8ae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c8b0:	fb01 3302 	mla	r3, r1, r2, r3
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800c8b4:	ebab 0106 	sub.w	r1, fp, r6
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c8b8:	e9d0 2a03 	ldrd	r2, sl, [r0, #12]
 800c8bc:	f8d3 905c 	ldr.w	r9, [r3, #92]	@ 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c8c0:	2a02      	cmp	r2, #2
 800c8c2:	d010      	beq.n	800c8e6 <BSP_LCD_FillRect+0x56>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800c8c4:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800c8c6:	4c24      	ldr	r4, [pc, #144]	@ (800c958 <BSP_LCD_FillRect+0xc8>)
  hlcd_dma2d.Instance = DMA2D;
 800c8c8:	4b24      	ldr	r3, [pc, #144]	@ (800c95c <BSP_LCD_FillRect+0xcc>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c8ca:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800c8cc:	e9c4 2102 	strd	r2, r1, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800c8d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800c8d4:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c8d8:	f001 fa6e 	bl	800ddb8 <HAL_DMA2D_Init>
 800c8dc:	b310      	cbz	r0, 800c924 <BSP_LCD_FillRect+0x94>
}
 800c8de:	2000      	movs	r0, #0
 800c8e0:	b003      	add	sp, #12
 800c8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800c8e6:	f3c5 1045 	ubfx	r0, r5, #5, #6
 800c8ea:	f3c5 24c4 	ubfx	r4, r5, #11, #5
 800c8ee:	f005 051f 	and.w	r5, r5, #31
 800c8f2:	eb00 13c0 	add.w	r3, r0, r0, lsl #7
 800c8f6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800c8fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c8fe:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 800c902:	3321      	adds	r3, #33	@ 0x21
 800c904:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800c908:	3417      	adds	r4, #23
 800c90a:	099b      	lsrs	r3, r3, #6
 800c90c:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800c910:	09a4      	lsrs	r4, r4, #6
 800c912:	021b      	lsls	r3, r3, #8
 800c914:	3517      	adds	r5, #23
 800c916:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c91a:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 800c91e:	f043 457f 	orr.w	r5, r3, #4278190080	@ 0xff000000
    break;
 800c922:	e7d0      	b.n	800c8c6 <BSP_LCD_FillRect+0x36>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c924:	fb08 720b 	mla	r2, r8, fp, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800c928:	4629      	mov	r1, r5
 800c92a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800c92c:	4633      	mov	r3, r6
 800c92e:	fb0a 9202 	mla	r2, sl, r2, r9
 800c932:	4620      	mov	r0, r4
 800c934:	9500      	str	r5, [sp, #0]
 800c936:	f001 fa7d 	bl	800de34 <HAL_DMA2D_Start>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d1cf      	bne.n	800c8de <BSP_LCD_FillRect+0x4e>
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800c93e:	2132      	movs	r1, #50	@ 0x32
 800c940:	4620      	mov	r0, r4
 800c942:	f001 fad1 	bl	800dee8 <HAL_DMA2D_PollForTransfer>
}
 800c946:	2000      	movs	r0, #0
 800c948:	b003      	add	sp, #12
 800c94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94e:	bf00      	nop
 800c950:	24000cfc 	.word	0x24000cfc
 800c954:	24000d1c 	.word	0x24000d1c
 800c958:	24000dc4 	.word	0x24000dc4
 800c95c:	52001000 	.word	0x52001000

0800c960 <BSP_LCD_DrawHLine>:
{
 800c960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c964:	4c32      	ldr	r4, [pc, #200]	@ (800ca30 <BSP_LCD_DrawHLine+0xd0>)
{
 800c966:	468a      	mov	sl, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c968:	0141      	lsls	r1, r0, #5
{
 800c96a:	461e      	mov	r6, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c96c:	eb04 1040 	add.w	r0, r4, r0, lsl #5
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800c970:	eb0a 0c03 	add.w	ip, sl, r3
{
 800c974:	4617      	mov	r7, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c976:	f04f 0e34 	mov.w	lr, #52	@ 0x34
 800c97a:	4a2e      	ldr	r2, [pc, #184]	@ (800ca34 <BSP_LCD_DrawHLine+0xd4>)
{
 800c97c:	b083      	sub	sp, #12
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c97e:	6883      	ldr	r3, [r0, #8]
 800c980:	f854 b001 	ldr.w	fp, [r4, r1]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c984:	440c      	add	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c986:	fb0e 2203 	mla	r2, lr, r3, r2
{
 800c98a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800c98c:	45e3      	cmp	fp, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c98e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800c992:	f8d2 805c 	ldr.w	r8, [r2, #92]	@ 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c996:	68e2      	ldr	r2, [r4, #12]
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800c998:	bf38      	it	cc
 800c99a:	ebab 060a 	subcc.w	r6, fp, sl
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c99e:	2a02      	cmp	r2, #2
 800c9a0:	d011      	beq.n	800c9c6 <BSP_LCD_DrawHLine+0x66>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800c9a2:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800c9a4:	4c24      	ldr	r4, [pc, #144]	@ (800ca38 <BSP_LCD_DrawHLine+0xd8>)
 800c9a6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800c9aa:	6063      	str	r3, [r4, #4]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800c9ac:	2300      	movs	r3, #0
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c9ae:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800c9b0:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800c9b2:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 800c9b4:	4b21      	ldr	r3, [pc, #132]	@ (800ca3c <BSP_LCD_DrawHLine+0xdc>)
 800c9b6:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c9b8:	f001 f9fe 	bl	800ddb8 <HAL_DMA2D_Init>
 800c9bc:	b310      	cbz	r0, 800ca04 <BSP_LCD_DrawHLine+0xa4>
}
 800c9be:	2000      	movs	r0, #0
 800c9c0:	b003      	add	sp, #12
 800c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800c9c6:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800c9ca:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 800c9ce:	f005 051f 	and.w	r5, r5, #31
 800c9d2:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
 800c9d6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800c9da:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c9de:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 800c9e2:	3321      	adds	r3, #33	@ 0x21
 800c9e4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800c9e8:	3117      	adds	r1, #23
 800c9ea:	099b      	lsrs	r3, r3, #6
 800c9ec:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800c9f0:	0989      	lsrs	r1, r1, #6
 800c9f2:	021b      	lsls	r3, r3, #8
 800c9f4:	3517      	adds	r5, #23
 800c9f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c9fa:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 800c9fe:	f043 457f 	orr.w	r5, r3, #4278190080	@ 0xff000000
    break;
 800ca02:	e7cf      	b.n	800c9a4 <BSP_LCD_DrawHLine+0x44>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800ca04:	fb07 a20b 	mla	r2, r7, fp, sl
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800ca08:	4629      	mov	r1, r5
 800ca0a:	2501      	movs	r5, #1
 800ca0c:	4633      	mov	r3, r6
 800ca0e:	fb09 8202 	mla	r2, r9, r2, r8
 800ca12:	4620      	mov	r0, r4
 800ca14:	9500      	str	r5, [sp, #0]
 800ca16:	f001 fa0d 	bl	800de34 <HAL_DMA2D_Start>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	d1cf      	bne.n	800c9be <BSP_LCD_DrawHLine+0x5e>
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800ca1e:	2132      	movs	r1, #50	@ 0x32
 800ca20:	4620      	mov	r0, r4
 800ca22:	f001 fa61 	bl	800dee8 <HAL_DMA2D_PollForTransfer>
}
 800ca26:	2000      	movs	r0, #0
 800ca28:	b003      	add	sp, #12
 800ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2e:	bf00      	nop
 800ca30:	24000cfc 	.word	0x24000cfc
 800ca34:	24000d1c 	.word	0x24000d1c
 800ca38:	24000dc4 	.word	0x24000dc4
 800ca3c:	52001000 	.word	0x52001000

0800ca40 <MX_LTDC_Init>:
{
 800ca40:	b430      	push	{r4, r5}
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800ca42:	2400      	movs	r4, #0
 800ca44:	4d0f      	ldr	r5, [pc, #60]	@ (800ca84 <MX_LTDC_Init+0x44>)
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800ca46:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800ca4a:	e9c0 5400 	strd	r5, r4, [r0]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800ca4e:	6104      	str	r4, [r0, #16]
  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 800ca50:	2428      	movs	r4, #40	@ 0x28
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800ca52:	2509      	movs	r5, #9
  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 800ca54:	6144      	str	r4, [r0, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 800ca56:	242a      	movs	r4, #42	@ 0x2a
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800ca58:	6185      	str	r5, [r0, #24]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 800ca5a:	61c4      	str	r4, [r0, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 800ca5c:	f101 0435 	add.w	r4, r1, #53	@ 0x35
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 800ca60:	314a      	adds	r1, #74	@ 0x4a
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 800ca62:	6244      	str	r4, [r0, #36]	@ 0x24
  hltdc->Init.Backcolor.Blue  = 0xFF;
 800ca64:	f64f 74ff 	movw	r4, #65535	@ 0xffff
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 800ca68:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hltdc->Init.Backcolor.Blue  = 0xFF;
 800ca6a:	8684      	strh	r4, [r0, #52]	@ 0x34
  hltdc->Init.Backcolor.Red   = 0xFF;
 800ca6c:	f880 4036 	strb.w	r4, [r0, #54]	@ 0x36
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 800ca70:	240b      	movs	r4, #11
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 800ca72:	1911      	adds	r1, r2, r4
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 800ca74:	320d      	adds	r2, #13
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 800ca76:	6204      	str	r4, [r0, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 800ca78:	6281      	str	r1, [r0, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 800ca7a:	6302      	str	r2, [r0, #48]	@ 0x30
}
 800ca7c:	bc30      	pop	{r4, r5}
  return HAL_LTDC_Init(hltdc);
 800ca7e:	f002 bb8d 	b.w	800f19c <HAL_LTDC_Init>
 800ca82:	bf00      	nop
 800ca84:	50001000 	.word	0x50001000

0800ca88 <MX_LTDC_ConfigLayer>:
{
 800ca88:	4613      	mov	r3, r2
 800ca8a:	460a      	mov	r2, r1
 800ca8c:	b510      	push	{r4, lr}
  pLayerCfg.WindowX1 = Config->X1;
 800ca8e:	e9d3 1400 	ldrd	r1, r4, [r3]
{
 800ca92:	b08e      	sub	sp, #56	@ 0x38
  pLayerCfg.WindowX0 = Config->X0;
 800ca94:	9101      	str	r1, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800ca96:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowX1 = Config->X1;
 800ca98:	9402      	str	r4, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800ca9a:	910b      	str	r1, [sp, #44]	@ 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 800ca9c:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
  pLayerCfg.WindowY0 = Config->Y0;
 800caa0:	9103      	str	r1, [sp, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800caa2:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 800caa4:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800caa6:	910c      	str	r1, [sp, #48]	@ 0x30
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800caa8:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 800caaa:	e9d3 4304 	ldrd	r4, r3, [r3, #16]
 800caae:	930a      	str	r3, [sp, #40]	@ 0x28
  pLayerCfg.Alpha = 255;
 800cab0:	2300      	movs	r3, #0
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800cab2:	9405      	str	r4, [sp, #20]
  pLayerCfg.Alpha = 255;
 800cab4:	24ff      	movs	r4, #255	@ 0xff
  pLayerCfg.Backcolor.Blue = 0;
 800cab6:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Red = 0;
 800caba:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
  pLayerCfg.Alpha = 255;
 800cabe:	e9cd 4306 	strd	r4, r3, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800cac2:	2307      	movs	r3, #7
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800cac4:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800cac8:	9309      	str	r3, [sp, #36]	@ 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800caca:	9408      	str	r4, [sp, #32]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800cacc:	f002 fbd4 	bl	800f278 <HAL_LTDC_ConfigLayer>
}
 800cad0:	b00e      	add	sp, #56	@ 0x38
 800cad2:	bd10      	pop	{r4, pc}
 800cad4:	0000      	movs	r0, r0
	...

0800cad8 <MX_LTDC_ClockConfig>:
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800cad8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800cb10 <MX_LTDC_ClockConfig+0x38>
{
 800cadc:	b500      	push	{lr}
 800cade:	b0b1      	sub	sp, #196	@ 0xc4
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 800cae0:	2205      	movs	r2, #5
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800cae2:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 800cae4:	21a0      	movs	r1, #160	@ 0xa0
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 800cae6:	920a      	str	r2, [sp, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 800cae8:	2253      	movs	r2, #83	@ 0x53
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800caea:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800caec:	930c      	str	r3, [sp, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 800caee:	910b      	str	r1, [sp, #44]	@ 0x2c
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800caf0:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 800caf4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800cb18 <MX_LTDC_ClockConfig+0x40>
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 800caf8:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 800cafc:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800cb00:	f003 fbfe 	bl	8010300 <HAL_RCCEx_PeriphCLKConfig>
}
 800cb04:	b031      	add	sp, #196	@ 0xc4
 800cb06:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb0a:	bf00      	nop
 800cb0c:	f3af 8000 	nop.w
 800cb10:	20000000 	.word	0x20000000
	...

0800cb20 <BSP_LCD_InitEx>:
{
 800cb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800cb24:	2901      	cmp	r1, #1
{
 800cb26:	b0a7      	sub	sp, #156	@ 0x9c
 800cb28:	4698      	mov	r8, r3
  uint32_t ft5336_id = 0;
 800cb2a:	f04f 0300 	mov.w	r3, #0
 800cb2e:	9301      	str	r3, [sp, #4]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800cb30:	f200 8147 	bhi.w	800cdc2 <BSP_LCD_InitEx+0x2a2>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 800cb34:	f022 0502 	bic.w	r5, r2, #2
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800cb38:	4305      	orrs	r5, r0
 800cb3a:	f040 8142 	bne.w	800cdc2 <BSP_LCD_InitEx+0x2a2>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800cb3e:	2a02      	cmp	r2, #2
 800cb40:	4fa3      	ldr	r7, [pc, #652]	@ (800cdd0 <BSP_LCD_InitEx+0x2b0>)
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800cb42:	4ca4      	ldr	r4, [pc, #656]	@ (800cdd4 <BSP_LCD_InitEx+0x2b4>)
    __HAL_RCC_GPIOD_CLK_ENABLE();

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800cb44:	f04f 0602 	mov.w	r6, #2
      Lcd_Ctx[Instance].BppFactor = 2U;
 800cb48:	bf0a      	itet	eq
 800cb4a:	4613      	moveq	r3, r2
 800cb4c:	2304      	movne	r3, #4
 800cb4e:	4615      	moveq	r5, r2
    Lcd_Ctx[Instance].XSize  = Width;
 800cb50:	f8c7 8000 	str.w	r8, [r7]
    hlcd_dma2d.Instance = DMA2D;
 800cb54:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 800ce04 <BSP_LCD_InitEx+0x2e4>
    gpio_init_structure.Pull      = GPIO_NOPULL;
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800cb58:	f04f 0a0e 	mov.w	sl, #14
    hlcd_dma2d.Instance = DMA2D;
 800cb5c:	f8df b2a8 	ldr.w	fp, [pc, #680]	@ 800ce08 <BSP_LCD_InitEx+0x2e8>
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800cb60:	a91c      	add	r1, sp, #112	@ 0x70
 800cb62:	489d      	ldr	r0, [pc, #628]	@ (800cdd8 <BSP_LCD_InitEx+0x2b8>)
    hlcd_dma2d.Instance = DMA2D;
 800cb64:	f8c9 b000 	str.w	fp, [r9]
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800cb68:	e9c7 2303 	strd	r2, r3, [r7, #12]
    Lcd_Ctx[Instance].YSize  = Height;
 800cb6c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
    hlcd_ltdc.Instance = LTDC;
 800cb6e:	4a9b      	ldr	r2, [pc, #620]	@ (800cddc <BSP_LCD_InitEx+0x2bc>)
    Lcd_Ctx[Instance].YSize  = Height;
 800cb70:	607b      	str	r3, [r7, #4]
    hlcd_ltdc.Instance = LTDC;
 800cb72:	4b9b      	ldr	r3, [pc, #620]	@ (800cde0 <BSP_LCD_InitEx+0x2c0>)
 800cb74:	601a      	str	r2, [r3, #0]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800cb76:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 800cb7a:	f042 0208 	orr.w	r2, r2, #8
 800cb7e:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
 800cb82:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 800cb86:	f002 0208 	and.w	r2, r2, #8
 800cb8a:	9203      	str	r2, [sp, #12]
 800cb8c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800cb8e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cb92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cb96:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800cb9a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cb9e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800cba2:	9204      	str	r2, [sp, #16]
 800cba4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800cba6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cbaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cbae:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800cbb2:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cbb6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800cbba:	9205      	str	r2, [sp, #20]
 800cbbc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800cbbe:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cbc2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cbc6:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800cbca:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cbce:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800cbd2:	9206      	str	r2, [sp, #24]
 800cbd4:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800cbd6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cbda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cbde:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800cbe2:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cbe6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800cbea:	9207      	str	r2, [sp, #28]
 800cbec:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cbee:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cbf2:	f042 0208 	orr.w	r2, r2, #8
 800cbf6:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800cbfa:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800cbfe:	961d      	str	r6, [sp, #116]	@ 0x74
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc00:	f002 0208 	and.w	r2, r2, #8
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800cc04:	961f      	str	r6, [sp, #124]	@ 0x7c
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800cc06:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc0a:	9208      	str	r2, [sp, #32]
 800cc0c:	9a08      	ldr	r2, [sp, #32]
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 800cc0e:	f24d 2203 	movw	r2, #53763	@ 0xd203
 800cc12:	921c      	str	r2, [sp, #112]	@ 0x70
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800cc14:	2200      	movs	r2, #0
 800cc16:	921e      	str	r2, [sp, #120]	@ 0x78
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800cc18:	f001 fa96 	bl	800e148 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
 800cc1c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800cc20:	4870      	ldr	r0, [pc, #448]	@ (800cde4 <BSP_LCD_InitEx+0x2c4>)
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800cc22:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
    gpio_init_structure.Pin       = GPIO_PIN_All;
 800cc26:	911c      	str	r1, [sp, #112]	@ 0x70
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800cc28:	a91c      	add	r1, sp, #112	@ 0x70
 800cc2a:	f001 fa8d 	bl	800e148 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800cc2e:	21ff      	movs	r1, #255	@ 0xff
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800cc30:	486d      	ldr	r0, [pc, #436]	@ (800cde8 <BSP_LCD_InitEx+0x2c8>)
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800cc32:	911c      	str	r1, [sp, #112]	@ 0x70
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800cc34:	a91c      	add	r1, sp, #112	@ 0x70
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800cc36:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800cc3a:	f001 fa85 	bl	800e148 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800cc3e:	2200      	movs	r2, #0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800cc40:	a91c      	add	r1, sp, #112	@ 0x70
 800cc42:	486a      	ldr	r0, [pc, #424]	@ (800cdec <BSP_LCD_InitEx+0x2cc>)
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800cc44:	921e      	str	r2, [sp, #120]	@ 0x78
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 800cc46:	f240 2202 	movw	r2, #514	@ 0x202
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800cc4a:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 800cc4e:	921c      	str	r2, [sp, #112]	@ 0x70
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800cc50:	961d      	str	r6, [sp, #116]	@ 0x74
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800cc52:	961f      	str	r6, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800cc54:	f001 fa78 	bl	800e148 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800cc58:	4865      	ldr	r0, [pc, #404]	@ (800cdf0 <BSP_LCD_InitEx+0x2d0>)
 800cc5a:	a91c      	add	r1, sp, #112	@ 0x70
    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 800cc5c:	ed9f 7b5a 	vldr	d7, [pc, #360]	@ 800cdc8 <BSP_LCD_InitEx+0x2a8>
 800cc60:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800cc64:	f001 fa70 	bl	800e148 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800cc68:	2201      	movs	r2, #1
 800cc6a:	2180      	movs	r1, #128	@ 0x80
 800cc6c:	4860      	ldr	r0, [pc, #384]	@ (800cdf0 <BSP_LCD_InitEx+0x2d0>)
 800cc6e:	f001 fda1 	bl	800e7b4 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 800cc72:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  if(hdma2d->Instance == DMA2D)
 800cc76:	f8d9 3000 	ldr.w	r3, [r9]
    __HAL_RCC_LTDC_FORCE_RESET();
 800cc7a:	f042 0208 	orr.w	r2, r2, #8
  if(hdma2d->Instance == DMA2D)
 800cc7e:	455b      	cmp	r3, fp
    __HAL_RCC_LTDC_FORCE_RESET();
 800cc80:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800cc84:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800cc88:	f022 0208 	bic.w	r2, r2, #8
 800cc8c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  if(hdma2d->Instance == DMA2D)
 800cc90:	d079      	beq.n	800cd86 <BSP_LCD_InitEx+0x266>
      io_comp_ctx.Init    = BSP_I2C4_Init;
 800cc92:	4b58      	ldr	r3, [pc, #352]	@ (800cdf4 <BSP_LCD_InitEx+0x2d4>)
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800cc94:	a910      	add	r1, sp, #64	@ 0x40
      io_comp_ctx.Init    = BSP_I2C4_Init;
 800cc96:	9310      	str	r3, [sp, #64]	@ 0x40
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 800cc98:	4b57      	ldr	r3, [pc, #348]	@ (800cdf8 <BSP_LCD_InitEx+0x2d8>)
 800cc9a:	9314      	str	r3, [sp, #80]	@ 0x50
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 800cc9c:	2370      	movs	r3, #112	@ 0x70
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800cc9e:	eb0d 0003 	add.w	r0, sp, r3
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 800cca2:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800cca6:	f7f3 fcc7 	bl	8000638 <FT5336_RegisterBusIO>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	f2c0 8086 	blt.w	800cdbc <BSP_LCD_InitEx+0x29c>
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 800ccb0:	a81c      	add	r0, sp, #112	@ 0x70
 800ccb2:	a901      	add	r1, sp, #4
 800ccb4:	f7f3 fbb6 	bl	8000424 <FT5336_ReadID>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	db7f      	blt.n	800cdbc <BSP_LCD_InitEx+0x29c>
      else if(ft5336_id != FT5336_ID)
 800ccbc:	9b01      	ldr	r3, [sp, #4]
 800ccbe:	2b51      	cmp	r3, #81	@ 0x51
 800ccc0:	d179      	bne.n	800cdb6 <BSP_LCD_InitEx+0x296>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800ccc2:	4847      	ldr	r0, [pc, #284]	@ (800cde0 <BSP_LCD_InitEx+0x2c0>)
 800ccc4:	f7ff ff08 	bl	800cad8 <MX_LTDC_ClockConfig>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d171      	bne.n	800cdb0 <BSP_LCD_InitEx+0x290>
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800cccc:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800ccce:	4641      	mov	r1, r8
 800ccd0:	4843      	ldr	r0, [pc, #268]	@ (800cde0 <BSP_LCD_InitEx+0x2c0>)
 800ccd2:	f7ff feb5 	bl	800ca40 <MX_LTDC_Init>
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d169      	bne.n	800cdb0 <BSP_LCD_InitEx+0x290>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800ccdc:	f000 f8c6 	bl	800ce6c <BSP_SDRAM_Init>
 800cce0:	4604      	mov	r4, r0
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d164      	bne.n	800cdb0 <BSP_LCD_InitEx+0x290>
      config.Y1          = Height;
 800cce6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800cce8:	4601      	mov	r1, r0
 800ccea:	aa16      	add	r2, sp, #88	@ 0x58
      config.Y0          = 0;
 800ccec:	9018      	str	r0, [sp, #96]	@ 0x60
      config.Y1          = Height;
 800ccee:	9319      	str	r3, [sp, #100]	@ 0x64
      config.Address     = LCD_LAYER_0_ADDRESS;
 800ccf0:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
      config.X0          = 0;
 800ccf4:	e9cd 0816 	strd	r0, r8, [sp, #88]	@ 0x58
      config.Address     = LCD_LAYER_0_ADDRESS;
 800ccf8:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800ccfc:	4838      	ldr	r0, [pc, #224]	@ (800cde0 <BSP_LCD_InitEx+0x2c0>)
  LCD_TIMx_CLK_ENABLE();

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800ccfe:	f04f 0801 	mov.w	r8, #1
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 800cd02:	4d3e      	ldr	r5, [pc, #248]	@ (800cdfc <BSP_LCD_InitEx+0x2dc>)
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800cd04:	f7ff fec0 	bl	800ca88 <MX_LTDC_ConfigLayer>
  htim->Instance = LCD_TIMx;
 800cd08:	4b3d      	ldr	r3, [pc, #244]	@ (800ce00 <BSP_LCD_InitEx+0x2e0>)
        ret = BSP_ERROR_PERIPH_FAILURE;
 800cd0a:	2800      	cmp	r0, #0
  (void)HAL_TIM_PWM_DeInit(htim);
 800cd0c:	4628      	mov	r0, r5
        ret = BSP_ERROR_PERIPH_FAILURE;
 800cd0e:	bf18      	it	ne
 800cd10:	f06f 0403 	mvnne.w	r4, #3
  htim->Instance = LCD_TIMx;
 800cd14:	602b      	str	r3, [r5, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 800cd16:	f004 fc37 	bl	8011588 <HAL_TIM_PWM_DeInit>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800cd1a:	4b2e      	ldr	r3, [pc, #184]	@ (800cdd4 <BSP_LCD_InitEx+0x2b4>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800cd1c:	2102      	movs	r1, #2
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 800cd1e:	4832      	ldr	r0, [pc, #200]	@ (800cde8 <BSP_LCD_InitEx+0x2c8>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800cd20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cd24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cd28:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800cd2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cd30:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800cd34:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  LCD_TIMx_CLK_ENABLE();
 800cd38:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800cd3c:	430a      	orrs	r2, r1
 800cd3e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800cd42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800cd46:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  LCD_TIMx_CLK_ENABLE();
 800cd4a:	400b      	ands	r3, r1
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 800cd4c:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
  LCD_TIMx_CLK_ENABLE();
 800cd50:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 800cd54:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800cd56:	e9cd 160c 	strd	r1, r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 800cd5a:	a90b      	add	r1, sp, #44	@ 0x2c
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 800cd5c:	930f      	str	r3, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 800cd5e:	f001 f9f3 	bl	800e148 <HAL_GPIO_Init>

  TIMx_PWM_MspInit(htim);

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 800cd62:	2304      	movs	r3, #4
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
  htim->Init.ClockDivision     = 0;
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
  htim->Init.RepetitionCounter = 0;
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  (void)HAL_TIM_PWM_Init(htim);
 800cd64:	4628      	mov	r0, r5
  htim->Init.ClockDivision     = 0;
 800cd66:	612e      	str	r6, [r5, #16]
  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 800cd68:	606b      	str	r3, [r5, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 800cd6a:	f24c 3350 	movw	r3, #50000	@ 0xc350
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 800cd6e:	60ae      	str	r6, [r5, #8]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 800cd70:	60eb      	str	r3, [r5, #12]
  htim->Init.RepetitionCounter = 0;
 800cd72:	e9c5 6605 	strd	r6, r6, [r5, #20]
  (void)HAL_TIM_PWM_Init(htim);
 800cd76:	f004 fb63 	bl	8011440 <HAL_TIM_PWM_Init>
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 800cd7a:	f8c7 8018 	str.w	r8, [r7, #24]
}
 800cd7e:	4620      	mov	r0, r4
 800cd80:	b027      	add	sp, #156	@ 0x9c
 800cd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800cd86:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800cd8a:	f043 0310 	orr.w	r3, r3, #16
 800cd8e:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 800cd92:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800cd96:	f003 0310 	and.w	r3, r3, #16
 800cd9a:	9302      	str	r3, [sp, #8]
 800cd9c:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800cd9e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800cda0:	f043 0310 	orr.w	r3, r3, #16
 800cda4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800cda6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800cda8:	f023 0310 	bic.w	r3, r3, #16
 800cdac:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800cdae:	e770      	b.n	800cc92 <BSP_LCD_InitEx+0x172>
        return BSP_ERROR_PERIPH_FAILURE;
 800cdb0:	f06f 0403 	mvn.w	r4, #3
 800cdb4:	e7e3      	b.n	800cd7e <BSP_LCD_InitEx+0x25e>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800cdb6:	f06f 0406 	mvn.w	r4, #6
 800cdba:	e7e0      	b.n	800cd7e <BSP_LCD_InitEx+0x25e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800cdbc:	f06f 0404 	mvn.w	r4, #4
 800cdc0:	e7dd      	b.n	800cd7e <BSP_LCD_InitEx+0x25e>
    ret = BSP_ERROR_WRONG_PARAM;
 800cdc2:	f06f 0401 	mvn.w	r4, #1
 800cdc6:	e7da      	b.n	800cd7e <BSP_LCD_InitEx+0x25e>
 800cdc8:	00000080 	.word	0x00000080
 800cdcc:	00000001 	.word	0x00000001
 800cdd0:	24000cfc 	.word	0x24000cfc
 800cdd4:	58024400 	.word	0x58024400
 800cdd8:	58022000 	.word	0x58022000
 800cddc:	50001000 	.word	0x50001000
 800cde0:	24000d1c 	.word	0x24000d1c
 800cde4:	58022400 	.word	0x58022400
 800cde8:	58022800 	.word	0x58022800
 800cdec:	58021c00 	.word	0x58021c00
 800cdf0:	58020c00 	.word	0x58020c00
 800cdf4:	0800bd75 	.word	0x0800bd75
 800cdf8:	0800c4dd 	.word	0x0800c4dd
 800cdfc:	24000e30 	.word	0x24000e30
 800ce00:	40010400 	.word	0x40010400
 800ce04:	24000dc4 	.word	0x24000dc4
 800ce08:	52001000 	.word	0x52001000

0800ce0c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800ce0c:	b530      	push	{r4, r5, lr}
 800ce0e:	b089      	sub	sp, #36	@ 0x24

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800ce10:	6102      	str	r2, [r0, #16]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800ce12:	2200      	movs	r2, #0
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800ce14:	4c13      	ldr	r4, [pc, #76]	@ (800ce64 <MX_SDRAM_BANK2_Init+0x58>)
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800ce16:	2540      	movs	r5, #64	@ 0x40
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800ce18:	60c1      	str	r1, [r0, #12]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800ce1a:	6082      	str	r2, [r0, #8]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
  sdram_timing.ExitSelfRefreshDelay = 7;
 800ce1c:	2307      	movs	r3, #7
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800ce1e:	61c2      	str	r2, [r0, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800ce20:	f44f 71c0 	mov.w	r1, #384	@ 0x180
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800ce24:	6282      	str	r2, [r0, #40]	@ 0x28
  sdram_timing.LoadToActiveDelay    = 2;
 800ce26:	2202      	movs	r2, #2
  sdram_timing.ExitSelfRefreshDelay = 7;
 800ce28:	9301      	str	r3, [sp, #4]
  sdram_timing.LoadToActiveDelay    = 2;
 800ce2a:	9200      	str	r2, [sp, #0]
  sdram_timing.SelfRefreshTime      = 4;
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 800ce2c:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800ce2e:	2201      	movs	r2, #1
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800ce30:	6181      	str	r1, [r0, #24]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800ce32:	4669      	mov	r1, sp
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800ce34:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800ce36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800ce3a:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800ce3c:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800ce40:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
 800ce44:	2204      	movs	r2, #4
 800ce46:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800ce52:	4b05      	ldr	r3, [pc, #20]	@ (800ce68 <MX_SDRAM_BANK2_Init+0x5c>)
 800ce54:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800ce56:	f004 f999 	bl	801118c <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 800ce5a:	3800      	subs	r0, #0
 800ce5c:	bf18      	it	ne
 800ce5e:	2001      	movne	r0, #1
 800ce60:	b009      	add	sp, #36	@ 0x24
 800ce62:	bd30      	pop	{r4, r5, pc}
 800ce64:	24000f0c 	.word	0x24000f0c
 800ce68:	52004140 	.word	0x52004140

0800ce6c <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	f040 80cd 	bne.w	800d00c <BSP_SDRAM_Init+0x1a0>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ce72:	4b69      	ldr	r3, [pc, #420]	@ (800d018 <BSP_SDRAM_Init+0x1ac>)
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800ce74:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 800ce76:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800ce7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
{
 800ce7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce80:	b08d      	sub	sp, #52	@ 0x34
  __HAL_RCC_FMC_CLK_ENABLE();
 800ce82:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800ce86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800ce8a:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ce8c:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce8e:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800ce90:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800ce94:	4c61      	ldr	r4, [pc, #388]	@ (800d01c <BSP_SDRAM_Init+0x1b0>)


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800ce96:	4e62      	ldr	r6, [pc, #392]	@ (800d020 <BSP_SDRAM_Init+0x1b4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800ce98:	9200      	str	r2, [sp, #0]
 800ce9a:	9a00      	ldr	r2, [sp, #0]
  SDRAM_MDMAx_CLK_ENABLE();
 800ce9c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800cea0:	430a      	orrs	r2, r1
 800cea2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800cea6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800ceaa:	400a      	ands	r2, r1
 800ceac:	9201      	str	r2, [sp, #4]
 800ceae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ceb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ceb4:	f042 0208 	orr.w	r2, r2, #8
 800ceb8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800cebc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cec0:	f002 0208 	and.w	r2, r2, #8
 800cec4:	9202      	str	r2, [sp, #8]
 800cec6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cec8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cecc:	f042 0210 	orr.w	r2, r2, #16
 800ced0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800ced4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ced8:	f002 0210 	and.w	r2, r2, #16
 800cedc:	9203      	str	r2, [sp, #12]
 800cede:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800cee0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cee4:	f042 0220 	orr.w	r2, r2, #32
 800cee8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800ceec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cef0:	f002 0220 	and.w	r2, r2, #32
 800cef4:	9204      	str	r2, [sp, #16]
 800cef6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cef8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cefc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf00:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800cf04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cf08:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800cf0c:	9205      	str	r2, [sp, #20]
 800cf0e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cf10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cf14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cf18:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800cf1c:	220c      	movs	r2, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cf1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800cf22:	9008      	str	r0, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cf24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800cf28:	483e      	ldr	r0, [pc, #248]	@ (800d024 <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800cf2a:	9109      	str	r1, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cf2c:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800cf2e:	f24c 7303 	movw	r3, #50947	@ 0xc703
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cf32:	9906      	ldr	r1, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800cf34:	a907      	add	r1, sp, #28
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800cf36:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800cf38:	e9cd 720a 	strd	r7, r2, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800cf3c:	f001 f904 	bl	800e148 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800cf40:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800cf44:	a907      	add	r1, sp, #28
 800cf46:	4838      	ldr	r0, [pc, #224]	@ (800d028 <BSP_SDRAM_Init+0x1bc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800cf48:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800cf4a:	f001 f8fd 	bl	800e148 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800cf4e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800cf52:	a907      	add	r1, sp, #28
 800cf54:	4835      	ldr	r0, [pc, #212]	@ (800d02c <BSP_SDRAM_Init+0x1c0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800cf56:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800cf58:	f001 f8f6 	bl	800e148 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800cf5c:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800cf60:	a907      	add	r1, sp, #28
 800cf62:	4833      	ldr	r0, [pc, #204]	@ (800d030 <BSP_SDRAM_Init+0x1c4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800cf64:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800cf66:	f001 f8ef 	bl	800e148 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800cf6a:	23e0      	movs	r3, #224	@ 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800cf6c:	a907      	add	r1, sp, #28
 800cf6e:	4831      	ldr	r0, [pc, #196]	@ (800d034 <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800cf70:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800cf72:	f001 f8e9 	bl	800e148 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800cf76:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800cf78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800cf7c:	f240 2102 	movw	r1, #514	@ 0x202

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800cf80:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800cf82:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
 800cf84:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800cf86:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800cf88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800cf8c:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800cf8e:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800cf90:	4a29      	ldr	r2, [pc, #164]	@ (800d038 <BSP_SDRAM_Init+0x1cc>)
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800cf92:	62e5      	str	r5, [r4, #44]	@ 0x2c
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800cf94:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800cf96:	6325      	str	r5, [r4, #48]	@ 0x30
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800cf98:	6334      	str	r4, [r6, #48]	@ 0x30
 800cf9a:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800cf9c:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800cfa0:	f640 0308 	movw	r3, #2056	@ 0x808
 800cfa4:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800cfa6:	2320      	movs	r3, #32
 800cfa8:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800cfaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800cfae:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800cfb2:	6263      	str	r3, [r4, #36]	@ 0x24
  HAL_MDMA_DeInit(&mdma_handle);
 800cfb4:	f002 faa8 	bl	800f508 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f002 fa2b 	bl	800f414 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800cfbe:	462a      	mov	r2, r5
 800cfc0:	210f      	movs	r1, #15
 800cfc2:	207a      	movs	r0, #122	@ 0x7a
 800cfc4:	f000 feac 	bl	800dd20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800cfc8:	207a      	movs	r0, #122	@ 0x7a
 800cfca:	f000 fee5 	bl	800dd98 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800cfce:	2210      	movs	r2, #16
 800cfd0:	2104      	movs	r1, #4
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f7ff ff1a 	bl	800ce0c <MX_SDRAM_BANK2_Init>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	b9d0      	cbnz	r0, 800d012 <BSP_SDRAM_Init+0x1a6>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800cfdc:	4917      	ldr	r1, [pc, #92]	@ (800d03c <BSP_SDRAM_Init+0x1d0>)
 800cfde:	2208      	movs	r2, #8
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800cfe0:	2430      	movs	r4, #48	@ 0x30
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800cfe2:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800cfe4:	600a      	str	r2, [r1, #0]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800cfe6:	f240 6203 	movw	r2, #1539	@ 0x603
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800cfea:	604f      	str	r7, [r1, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800cfec:	e9c1 2302 	strd	r2, r3, [r1, #8]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800cff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800cff4:	e9c1 3404 	strd	r3, r4, [r1, #16]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800cff8:	e9c1 3206 	strd	r3, r2, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800cffc:	f7f3 fbca 	bl	8000794 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800d000:	2800      	cmp	r0, #0
 800d002:	bf18      	it	ne
 800d004:	f06f 0004 	mvnne.w	r0, #4
}
 800d008:	b00d      	add	sp, #52	@ 0x34
 800d00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800d00c:	f06f 0001 	mvn.w	r0, #1
}
 800d010:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 800d012:	f04f 30ff 	mov.w	r0, #4294967295
 800d016:	e7f7      	b.n	800d008 <BSP_SDRAM_Init+0x19c>
 800d018:	58024400 	.word	0x58024400
 800d01c:	24000e80 	.word	0x24000e80
 800d020:	24000f0c 	.word	0x24000f0c
 800d024:	58020c00 	.word	0x58020c00
 800d028:	58021000 	.word	0x58021000
 800d02c:	58021400 	.word	0x58021400
 800d030:	58021800 	.word	0x58021800
 800d034:	58021c00 	.word	0x58021c00
 800d038:	52000040 	.word	0x52000040
 800d03c:	24000eec 	.word	0x24000eec

0800d040 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800d040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d044:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800d046:	2800      	cmp	r0, #0
 800d048:	d16b      	bne.n	800d122 <BSP_TS_Init+0xe2>
 800d04a:	680b      	ldr	r3, [r1, #0]
 800d04c:	460d      	mov	r5, r1
 800d04e:	1e5a      	subs	r2, r3, #1
 800d050:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 800d054:	d265      	bcs.n	800d122 <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800d056:	684a      	ldr	r2, [r1, #4]
 800d058:	1e51      	subs	r1, r2, #1
 800d05a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800d05e:	d260      	bcs.n	800d122 <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800d060:	4293      	cmp	r3, r2
 800d062:	bf28      	it	cs
 800d064:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800d066:	68ea      	ldr	r2, [r5, #12]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d85a      	bhi.n	800d122 <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800d06c:	2270      	movs	r2, #112	@ 0x70
  IOCtx.Init        = BSP_I2C4_Init;
 800d06e:	4b31      	ldr	r3, [pc, #196]	@ (800d134 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800d070:	4c31      	ldr	r4, [pc, #196]	@ (800d138 <BSP_TS_Init+0xf8>)
 800d072:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 800d074:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 800d078:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800d07a:	4a30      	ldr	r2, [pc, #192]	@ (800d13c <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800d07c:	4b30      	ldr	r3, [pc, #192]	@ (800d140 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800d07e:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800d080:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800d082:	4a30      	ldr	r2, [pc, #192]	@ (800d144 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
 800d084:	4b30      	ldr	r3, [pc, #192]	@ (800d148 <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
 800d086:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800d088:	4620      	mov	r0, r4
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800d08a:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 800d08c:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800d08e:	f7f3 fad3 	bl	8000638 <FT5336_RegisterBusIO>
 800d092:	2800      	cmp	r0, #0
 800d094:	d14b      	bne.n	800d12e <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800d096:	a901      	add	r1, sp, #4
 800d098:	4620      	mov	r0, r4
 800d09a:	f7f3 f9c3 	bl	8000424 <FT5336_ReadID>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d145      	bne.n	800d12e <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 800d0a2:	9b01      	ldr	r3, [sp, #4]
 800d0a4:	2b51      	cmp	r3, #81	@ 0x51
 800d0a6:	d142      	bne.n	800d12e <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800d0a8:	4b28      	ldr	r3, [pc, #160]	@ (800d14c <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800d0aa:	4620      	mov	r0, r4
    Ts_CompObj[Instance] = &FT5336Obj;
 800d0ac:	4f28      	ldr	r7, [pc, #160]	@ (800d150 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800d0ae:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 800d158 <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
 800d0b2:	603c      	str	r4, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800d0b4:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4798      	blx	r3
 800d0bc:	4606      	mov	r6, r0
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d135      	bne.n	800d12e <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d0c2:	682a      	ldr	r2, [r5, #0]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d0c4:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d0c6:	4c23      	ldr	r4, [pc, #140]	@ (800d154 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d0c8:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d0cc:	6022      	str	r2, [r4, #0]
 800d0ce:	686a      	ldr	r2, [r5, #4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d0d0:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d0d2:	6062      	str	r2, [r4, #4]
 800d0d4:	68aa      	ldr	r2, [r5, #8]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d0d6:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d0d8:	60a2      	str	r2, [r4, #8]
 800d0da:	68ea      	ldr	r2, [r5, #12]
 800d0dc:	60e2      	str	r2, [r4, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d0de:	4798      	blx	r3
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	db18      	blt.n	800d116 <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800d0e4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d0e8:	e9c4 3204 	strd	r3, r2, [r4, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d0ec:	68eb      	ldr	r3, [r5, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d0ee:	e9d5 2100 	ldrd	r2, r1, [r5]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d0f2:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d0f4:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d0f6:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d0f8:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d0fa:	e9c4 2206 	strd	r2, r2, [r4, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d0fe:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d102:	e9c4 2208 	strd	r2, r2, [r4, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d106:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d10a:	62a2      	str	r2, [r4, #40]	@ 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d10c:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 800d10e:	4630      	mov	r0, r6
 800d110:	b008      	add	sp, #32
 800d112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d116:	f06f 0604 	mvn.w	r6, #4
}
 800d11a:	4630      	mov	r0, r6
 800d11c:	b008      	add	sp, #32
 800d11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d122:	f06f 0601 	mvn.w	r6, #1
}
 800d126:	4630      	mov	r0, r6
 800d128:	b008      	add	sp, #32
 800d12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
 800d12e:	f04f 36ff 	mov.w	r6, #4294967295
 800d132:	e7ec      	b.n	800d10e <BSP_TS_Init+0xce>
 800d134:	0800bd75 	.word	0x0800bd75
 800d138:	24000f40 	.word	0x24000f40
 800d13c:	0800bce1 	.word	0x0800bce1
 800d140:	0800c4dd 	.word	0x0800c4dd
 800d144:	0800c4a1 	.word	0x0800c4a1
 800d148:	0800c519 	.word	0x0800c519
 800d14c:	24000000 	.word	0x24000000
 800d150:	24000fa8 	.word	0x24000fa8
 800d154:	24000f68 	.word	0x24000f68
 800d158:	24000fac 	.word	0x24000fac

0800d15c <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d154      	bne.n	800d20a <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800d160:	4b2b      	ldr	r3, [pc, #172]	@ (800d210 <BSP_TS_GetState+0xb4>)
 800d162:	4a2c      	ldr	r2, [pc, #176]	@ (800d214 <BSP_TS_GetState+0xb8>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	6810      	ldr	r0, [r2, #0]
 800d168:	691b      	ldr	r3, [r3, #16]
{
 800d16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800d172:	a901      	add	r1, sp, #4
 800d174:	4798      	blx	r3
 800d176:	2800      	cmp	r0, #0
 800d178:	db3f      	blt.n	800d1fa <BSP_TS_GetState+0x9e>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800d17a:	4b27      	ldr	r3, [pc, #156]	@ (800d218 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 800d17c:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800d17e:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800d180:	6add      	ldr	r5, [r3, #44]	@ 0x2c
    else if(state.TouchDetected != 0U)
 800d182:	b930      	cbnz	r0, 800d192 <BSP_TS_GetState+0x36>
      TS_State->TouchDetected = 0U;
 800d184:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800d186:	e9c4 6501 	strd	r6, r5, [r4, #4]
  int32_t ret = BSP_ERROR_NONE;
 800d18a:	2000      	movs	r0, #0
}
 800d18c:	b004      	add	sp, #16
 800d18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800d192:	689f      	ldr	r7, [r3, #8]
 800d194:	073a      	lsls	r2, r7, #28
      y_oriented = state.TouchY;
 800d196:	e9dd c802 	ldrd	ip, r8, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800d19a:	d433      	bmi.n	800d204 <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
 800d19c:	4641      	mov	r1, r8
      x_oriented = state.TouchX;
 800d19e:	4662      	mov	r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800d1a0:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800d1a4:	f8d3 e010 	ldr.w	lr, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800d1a8:	d003      	beq.n	800d1b2 <BSP_TS_GetState+0x56>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800d1aa:	f10e 32ff 	add.w	r2, lr, #4294967295
 800d1ae:	eba2 020c 	sub.w	r2, r2, ip
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800d1b2:	f8d3 c014 	ldr.w	ip, [r3, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800d1b6:	077f      	lsls	r7, r7, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800d1b8:	681f      	ldr	r7, [r3, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800d1ba:	bf48      	it	mi
 800d1bc:	ebac 0108 	submi.w	r1, ip, r8
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800d1c0:	fb07 f202 	mul.w	r2, r7, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800d1c4:	685f      	ldr	r7, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800d1c6:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800d1c8:	fb07 f101 	mul.w	r1, r7, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800d1cc:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800d1d0:	fbb1 f1fc 	udiv	r1, r1, ip
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800d1d4:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800d1d6:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800d1d8:	60a1      	str	r1, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800d1da:	bf8c      	ite	hi
 800d1dc:	1b90      	subhi	r0, r2, r6
 800d1de:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800d1e0:	42a9      	cmp	r1, r5
 800d1e2:	bf8c      	ite	hi
 800d1e4:	1b4f      	subhi	r7, r1, r5
 800d1e6:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800d1e8:	42b8      	cmp	r0, r7
 800d1ea:	bf38      	it	cc
 800d1ec:	4638      	movcc	r0, r7
 800d1ee:	68df      	ldr	r7, [r3, #12]
 800d1f0:	4287      	cmp	r7, r0
 800d1f2:	d2c8      	bcs.n	800d186 <BSP_TS_GetState+0x2a>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800d1f4:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800d1f6:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800d1f8:	e7c7      	b.n	800d18a <BSP_TS_GetState+0x2e>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800d1fa:	f06f 0004 	mvn.w	r0, #4
}
 800d1fe:	b004      	add	sp, #16
 800d200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        y_oriented = state.TouchX;
 800d204:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
 800d206:	4642      	mov	r2, r8
 800d208:	e7ca      	b.n	800d1a0 <BSP_TS_GetState+0x44>
    ret = BSP_ERROR_WRONG_PARAM;
 800d20a:	f06f 0001 	mvn.w	r0, #1
}
 800d20e:	4770      	bx	lr
 800d210:	24000fac 	.word	0x24000fac
 800d214:	24000fa8 	.word	0x24000fa8
 800d218:	24000f68 	.word	0x24000f68

0800d21c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d21c:	4b07      	ldr	r3, [pc, #28]	@ (800d23c <HAL_MspInit+0x20>)
{
 800d21e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d220:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800d224:	f042 0202 	orr.w	r2, r2, #2
 800d228:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800d22c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d230:	f003 0302 	and.w	r3, r3, #2
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d238:	b002      	add	sp, #8
 800d23a:	4770      	bx	lr
 800d23c:	58024400 	.word	0x58024400

0800d240 <LTDC_IRQHandler>:
/* Private functions ---------------------------------------------------------*/

void LTDC_IRQHandler(void)
{

  if (LTDC->ISR & LTDC_ISR_LIF)
 800d240:	4b04      	ldr	r3, [pc, #16]	@ (800d254 <LTDC_IRQHandler+0x14>)
 800d242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d244:	07d2      	lsls	r2, r2, #31
 800d246:	d504      	bpl.n	800d252 <LTDC_IRQHandler+0x12>
  {
      LTDC->ICR = LTDC_ICR_CLIF;
 800d248:	2001      	movs	r0, #1

      blockRendering = 0;
 800d24a:	4a03      	ldr	r2, [pc, #12]	@ (800d258 <LTDC_IRQHandler+0x18>)
 800d24c:	2100      	movs	r1, #0
      LTDC->ICR = LTDC_ICR_CLIF;
 800d24e:	63d8      	str	r0, [r3, #60]	@ 0x3c
      blockRendering = 0;
 800d250:	6011      	str	r1, [r2, #0]
  }
}
 800d252:	4770      	bx	lr
 800d254:	50001000 	.word	0x50001000
 800d258:	240001bc 	.word	0x240001bc

0800d25c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop

0800d260 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800d260:	e7fe      	b.n	800d260 <HardFault_Handler>
 800d262:	bf00      	nop

0800d264 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800d264:	e7fe      	b.n	800d264 <MemManage_Handler>
 800d266:	bf00      	nop

0800d268 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800d268:	e7fe      	b.n	800d268 <BusFault_Handler>
 800d26a:	bf00      	nop

0800d26c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800d26c:	e7fe      	b.n	800d26c <UsageFault_Handler>
 800d26e:	bf00      	nop

0800d270 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop

0800d274 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop

0800d278 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 800d278:	4770      	bx	lr
 800d27a:	bf00      	nop

0800d27c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800d27c:	f000 bd0c 	b.w	800dc98 <HAL_IncTick>

0800d280 <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
BSP_PB_IRQHandler(BUTTON_USER);
 800d280:	2000      	movs	r0, #0
 800d282:	f7fe bd25 	b.w	800bcd0 <BSP_PB_IRQHandler>
 800d286:	bf00      	nop

0800d288 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d288:	490d      	ldr	r1, [pc, #52]	@ (800d2c0 <_sbrk+0x38>)
{
 800d28a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d28c:	4a0d      	ldr	r2, [pc, #52]	@ (800d2c4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800d28e:	6808      	ldr	r0, [r1, #0]
{
 800d290:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d292:	4c0d      	ldr	r4, [pc, #52]	@ (800d2c8 <_sbrk+0x40>)
 800d294:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800d296:	b120      	cbz	r0, 800d2a2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d298:	4403      	add	r3, r0
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d807      	bhi.n	800d2ae <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800d29e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800d2a0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800d2a2:	4c0a      	ldr	r4, [pc, #40]	@ (800d2cc <_sbrk+0x44>)
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800d2a8:	4403      	add	r3, r0
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d9f7      	bls.n	800d29e <_sbrk+0x16>
    errno = ENOMEM;
 800d2ae:	f004 fb83 	bl	80119b8 <__errno>
 800d2b2:	220c      	movs	r2, #12
 800d2b4:	4603      	mov	r3, r0
    return (void *)-1;
 800d2b6:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800d2ba:	601a      	str	r2, [r3, #0]
}
 800d2bc:	bd10      	pop	{r4, pc}
 800d2be:	bf00      	nop
 800d2c0:	24000fb0 	.word	0x24000fb0
 800d2c4:	24080000 	.word	0x24080000
 800d2c8:	00000400 	.word	0x00000400
 800d2cc:	24041440 	.word	0x24041440

0800d2d0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d2d0:	4927      	ldr	r1, [pc, #156]	@ (800d370 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d2d2:	4a28      	ldr	r2, [pc, #160]	@ (800d374 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d2d4:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800d2d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 800d2dc:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d2de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d2e2:	6813      	ldr	r3, [r2, #0]
 800d2e4:	f003 030f 	and.w	r3, r3, #15
 800d2e8:	2b06      	cmp	r3, #6
 800d2ea:	d805      	bhi.n	800d2f8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d2ec:	6813      	ldr	r3, [r2, #0]
 800d2ee:	f023 030f 	bic.w	r3, r3, #15
 800d2f2:	f043 0307 	orr.w	r3, r3, #7
 800d2f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800d2f8:	4b1f      	ldr	r3, [pc, #124]	@ (800d378 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d2fa:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800d2fc:	4a1f      	ldr	r2, [pc, #124]	@ (800d37c <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800d2fe:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d300:	481c      	ldr	r0, [pc, #112]	@ (800d374 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800d302:	f041 0101 	orr.w	r1, r1, #1
 800d306:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800d308:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800d30a:	6819      	ldr	r1, [r3, #0]
 800d30c:	400a      	ands	r2, r1
 800d30e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d310:	6803      	ldr	r3, [r0, #0]
 800d312:	071b      	lsls	r3, r3, #28
 800d314:	d505      	bpl.n	800d322 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d316:	6803      	ldr	r3, [r0, #0]
 800d318:	f023 030f 	bic.w	r3, r3, #15
 800d31c:	f043 0307 	orr.w	r3, r3, #7
 800d320:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800d322:	4b15      	ldr	r3, [pc, #84]	@ (800d378 <SystemInit+0xa8>)
 800d324:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800d326:	4916      	ldr	r1, [pc, #88]	@ (800d380 <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 800d328:	4816      	ldr	r0, [pc, #88]	@ (800d384 <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 800d32a:	4c17      	ldr	r4, [pc, #92]	@ (800d388 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 800d32c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800d32e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800d330:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800d332:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800d334:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800d336:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800d338:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800d33a:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800d33c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800d33e:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800d340:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d342:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800d344:	4811      	ldr	r0, [pc, #68]	@ (800d38c <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 800d346:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800d34a:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800d34c:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800d34e:	6803      	ldr	r3, [r0, #0]
 800d350:	f36f 030f 	bfc	r3, #0, #16
 800d354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d358:	d203      	bcs.n	800d362 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800d35a:	4b0d      	ldr	r3, [pc, #52]	@ (800d390 <SystemInit+0xc0>)
 800d35c:	2201      	movs	r2, #1
 800d35e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800d362:	4b0c      	ldr	r3, [pc, #48]	@ (800d394 <SystemInit+0xc4>)
 800d364:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800d368:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800d36c:	601a      	str	r2, [r3, #0]
}
 800d36e:	4770      	bx	lr
 800d370:	e000ed00 	.word	0xe000ed00
 800d374:	52002000 	.word	0x52002000
 800d378:	58024400 	.word	0x58024400
 800d37c:	eaf6ed7f 	.word	0xeaf6ed7f
 800d380:	01010280 	.word	0x01010280
 800d384:	01ff0000 	.word	0x01ff0000
 800d388:	02020200 	.word	0x02020200
 800d38c:	5c001000 	.word	0x5c001000
 800d390:	51008000 	.word	0x51008000
 800d394:	52004000 	.word	0x52004000

0800d398 <draw_donut>:
	if (RGB_angle > 2 * PI) RGB_angle -= 2 * PI;
}

void draw_donut ()
{
	hdma2d.Init.Mode = DMA2D_M2M;
 800d398:	481f      	ldr	r0, [pc, #124]	@ (800d418 <draw_donut+0x80>)
 800d39a:	2300      	movs	r3, #0
{
 800d39c:	b510      	push	{r4, lr}
 800d39e:	b082      	sub	sp, #8
	hdma2d.Init.Mode = DMA2D_M2M;
 800d3a0:	6043      	str	r3, [r0, #4]
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) Error_Handler ();
 800d3a2:	f000 fd09 	bl	800ddb8 <HAL_DMA2D_Init>
 800d3a6:	bba0      	cbnz	r0, 800d412 <draw_donut+0x7a>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800d3a8:	481c      	ldr	r0, [pc, #112]	@ (800d41c <draw_donut+0x84>)
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d3b0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800d3b4:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d3b8:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d3bc:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d3c0:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 800d3c4:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d3c8:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d3cc:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d3ce:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 800d3d2:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d3d4:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
 800d3d8:	1c5a      	adds	r2, r3, #1
 800d3da:	d1f8      	bne.n	800d3ce <draw_donut+0x36>
    } while(sets-- != 0U);
 800d3dc:	f1ac 0c20 	sub.w	ip, ip, #32
 800d3e0:	f11c 0f20 	cmn.w	ip, #32
 800d3e4:	d1f0      	bne.n	800d3c8 <draw_donut+0x30>
 800d3e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d3ea:	f3bf 8f6f 	isb	sy
	SCB_CleanInvalidateDCache ();
	HAL_DMA2D_Start (&hdma2d, (uint32_t) b_1, 0xD0000000, SCREEN_WIDTH, SCREEN_HEIGHT);
 800d3ee:	f44f 7488 	mov.w	r4, #272	@ 0x110
 800d3f2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800d3f6:	f04f 4250 	mov.w	r2, #3489660928	@ 0xd0000000
 800d3fa:	4909      	ldr	r1, [pc, #36]	@ (800d420 <draw_donut+0x88>)
 800d3fc:	9400      	str	r4, [sp, #0]
 800d3fe:	4806      	ldr	r0, [pc, #24]	@ (800d418 <draw_donut+0x80>)
 800d400:	f000 fd18 	bl	800de34 <HAL_DMA2D_Start>
	HAL_DMA2D_PollForTransfer (&hdma2d, 100);
 800d404:	2164      	movs	r1, #100	@ 0x64
 800d406:	4804      	ldr	r0, [pc, #16]	@ (800d418 <draw_donut+0x80>)
}
 800d408:	b002      	add	sp, #8
 800d40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA2D_PollForTransfer (&hdma2d, 100);
 800d40e:	f000 bd6b 	b.w	800dee8 <HAL_DMA2D_PollForTransfer>
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) Error_Handler ();
 800d412:	f7fe fab5 	bl	800b980 <Error_Handler>
 800d416:	e7c7      	b.n	800d3a8 <draw_donut+0x10>
 800d418:	240001c0 	.word	0x240001c0
 800d41c:	e000ed00 	.word	0xe000ed00
 800d420:	240016a8 	.word	0x240016a8

0800d424 <draw_upgrades>:

void draw_upgrades ()
{
 800d424:	b570      	push	{r4, r5, r6, lr}
	int stack_offset = 0;
	int n = sizeof (upgrades) / sizeof (Upgrade);

	for (int i = 0; i < n; i++)
	{
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d426:	4c63      	ldr	r4, [pc, #396]	@ (800d5b4 <draw_upgrades+0x190>)
{
 800d428:	b084      	sub	sp, #16
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d42a:	4e63      	ldr	r6, [pc, #396]	@ (800d5b8 <draw_upgrades+0x194>)
 800d42c:	6922      	ldr	r2, [r4, #16]
 800d42e:	6833      	ldr	r3, [r6, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d34f      	bcc.n	800d4d4 <draw_upgrades+0xb0>
		else if (upgrades[i].cost > Donut.donuts_count) break; // cuz they ascending in price
 800d434:	d834      	bhi.n	800d4a0 <draw_upgrades+0x7c>
		else stack_offset += 30;
 800d436:	251e      	movs	r5, #30
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d438:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d332      	bcc.n	800d4a4 <draw_upgrades+0x80>
		else if (upgrades[i].cost > Donut.donuts_count) break; // cuz they ascending in price
 800d43e:	d82f      	bhi.n	800d4a0 <draw_upgrades+0x7c>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d440:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
		else stack_offset += 30;
 800d442:	351e      	adds	r5, #30
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d444:	6833      	ldr	r3, [r6, #0]
 800d446:	429a      	cmp	r2, r3
 800d448:	d242      	bcs.n	800d4d0 <draw_upgrades+0xac>
 800d44a:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d06d      	beq.n	800d52e <draw_upgrades+0x10a>
		else stack_offset += 30;
 800d452:	351e      	adds	r5, #30
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d454:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d456:	6833      	ldr	r3, [r6, #0]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d24d      	bcs.n	800d4f8 <draw_upgrades+0xd4>
 800d45c:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 800d460:	2b00      	cmp	r3, #0
 800d462:	d073      	beq.n	800d54c <draw_upgrades+0x128>
		else stack_offset += 30;
 800d464:	351e      	adds	r5, #30
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d466:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d46a:	6833      	ldr	r3, [r6, #0]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d245      	bcs.n	800d4fc <draw_upgrades+0xd8>
 800d470:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 800d474:	2b00      	cmp	r3, #0
 800d476:	d078      	beq.n	800d56a <draw_upgrades+0x146>
		else stack_offset += 30;
 800d478:	351e      	adds	r5, #30
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d47a:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800d47e:	6833      	ldr	r3, [r6, #0]
 800d480:	429a      	cmp	r2, r3
 800d482:	d23d      	bcs.n	800d500 <draw_upgrades+0xdc>
 800d484:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d07e      	beq.n	800d58a <draw_upgrades+0x166>
		else stack_offset += 30;
 800d48c:	351e      	adds	r5, #30
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d48e:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 800d492:	6833      	ldr	r3, [r6, #0]
 800d494:	429a      	cmp	r2, r3
 800d496:	d203      	bcs.n	800d4a0 <draw_upgrades+0x7c>
 800d498:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d031      	beq.n	800d504 <draw_upgrades+0xe0>
	}

}
 800d4a0:	b004      	add	sp, #16
 800d4a2:	bd70      	pop	{r4, r5, r6, pc}
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d4a4:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1c9      	bne.n	800d440 <draw_upgrades+0x1c>
 800d4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b0:	6a23      	ldr	r3, [r4, #32]
 800d4b2:	4842      	ldr	r0, [pc, #264]	@ (800d5bc <draw_upgrades+0x198>)
 800d4b4:	9202      	str	r2, [sp, #8]
 800d4b6:	1b5b      	subs	r3, r3, r5
 800d4b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d4ba:	9201      	str	r2, [sp, #4]
 800d4bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d4be:	9200      	str	r2, [sp, #0]
 800d4c0:	69e2      	ldr	r2, [r4, #28]
 800d4c2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d4c4:	f7f3 fe44 	bl	8001150 <FLP_Draw_Upgrade>
 800d4c8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800d4ca:	6833      	ldr	r3, [r6, #0]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d3bc      	bcc.n	800d44a <draw_upgrades+0x26>
		else if (upgrades[i].cost > Donut.donuts_count) break; // cuz they ascending in price
 800d4d0:	d9bf      	bls.n	800d452 <draw_upgrades+0x2e>
 800d4d2:	e7e5      	b.n	800d4a0 <draw_upgrades+0x7c>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d4d4:	7e25      	ldrb	r5, [r4, #24]
 800d4d6:	2d00      	cmp	r5, #0
 800d4d8:	d1ad      	bne.n	800d436 <draw_upgrades+0x12>
 800d4da:	68e3      	ldr	r3, [r4, #12]
 800d4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e0:	4836      	ldr	r0, [pc, #216]	@ (800d5bc <draw_upgrades+0x198>)
 800d4e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d4e6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800d4ea:	9200      	str	r2, [sp, #0]
 800d4ec:	6822      	ldr	r2, [r4, #0]
 800d4ee:	6961      	ldr	r1, [r4, #20]
 800d4f0:	f7f3 fe2e 	bl	8001150 <FLP_Draw_Upgrade>
 800d4f4:	6833      	ldr	r3, [r6, #0]
 800d4f6:	e79f      	b.n	800d438 <draw_upgrades+0x14>
		else if (upgrades[i].cost > Donut.donuts_count) break; // cuz they ascending in price
 800d4f8:	d9b4      	bls.n	800d464 <draw_upgrades+0x40>
 800d4fa:	e7d1      	b.n	800d4a0 <draw_upgrades+0x7c>
 800d4fc:	d9bc      	bls.n	800d478 <draw_upgrades+0x54>
 800d4fe:	e7cf      	b.n	800d4a0 <draw_upgrades+0x7c>
 800d500:	d9c4      	bls.n	800d48c <draw_upgrades+0x68>
 800d502:	e7cd      	b.n	800d4a0 <draw_upgrades+0x7c>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d504:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 800d508:	f04f 30ff 	mov.w	r0, #4294967295
 800d50c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800d510:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 800d514:	1b5b      	subs	r3, r3, r5
 800d516:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800d51a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800d51e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
 800d522:	9000      	str	r0, [sp, #0]
 800d524:	4825      	ldr	r0, [pc, #148]	@ (800d5bc <draw_upgrades+0x198>)
 800d526:	f7f3 fe13 	bl	8001150 <FLP_Draw_Upgrade>
}
 800d52a:	b004      	add	sp, #16
 800d52c:	bd70      	pop	{r4, r5, r6, pc}
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y - stack_offset, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d52e:	f04f 32ff 	mov.w	r2, #4294967295
 800d532:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d534:	4821      	ldr	r0, [pc, #132]	@ (800d5bc <draw_upgrades+0x198>)
 800d536:	9202      	str	r2, [sp, #8]
 800d538:	1b5b      	subs	r3, r3, r5
 800d53a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800d53c:	9201      	str	r2, [sp, #4]
 800d53e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d540:	9200      	str	r2, [sp, #0]
 800d542:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d544:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800d546:	f7f3 fe03 	bl	8001150 <FLP_Draw_Upgrade>
 800d54a:	e783      	b.n	800d454 <draw_upgrades+0x30>
 800d54c:	f04f 32ff 	mov.w	r2, #4294967295
 800d550:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d552:	481a      	ldr	r0, [pc, #104]	@ (800d5bc <draw_upgrades+0x198>)
 800d554:	9202      	str	r2, [sp, #8]
 800d556:	1b5b      	subs	r3, r3, r5
 800d558:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d55a:	9201      	str	r2, [sp, #4]
 800d55c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800d55e:	9200      	str	r2, [sp, #0]
 800d560:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d562:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d564:	f7f3 fdf4 	bl	8001150 <FLP_Draw_Upgrade>
 800d568:	e77d      	b.n	800d466 <draw_upgrades+0x42>
 800d56a:	f04f 32ff 	mov.w	r2, #4294967295
 800d56e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800d570:	4812      	ldr	r0, [pc, #72]	@ (800d5bc <draw_upgrades+0x198>)
 800d572:	9202      	str	r2, [sp, #8]
 800d574:	1b5b      	subs	r3, r3, r5
 800d576:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d578:	9201      	str	r2, [sp, #4]
 800d57a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800d57c:	9200      	str	r2, [sp, #0]
 800d57e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d580:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800d584:	f7f3 fde4 	bl	8001150 <FLP_Draw_Upgrade>
 800d588:	e777      	b.n	800d47a <draw_upgrades+0x56>
 800d58a:	f04f 32ff 	mov.w	r2, #4294967295
 800d58e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800d592:	480a      	ldr	r0, [pc, #40]	@ (800d5bc <draw_upgrades+0x198>)
 800d594:	9202      	str	r2, [sp, #8]
 800d596:	1b5b      	subs	r3, r3, r5
 800d598:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800d59c:	9201      	str	r2, [sp, #4]
 800d59e:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 800d5a2:	9200      	str	r2, [sp, #0]
 800d5a4:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800d5a8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800d5ac:	f7f3 fdd0 	bl	8001150 <FLP_Draw_Upgrade>
 800d5b0:	e76d      	b.n	800d48e <draw_upgrades+0x6a>
 800d5b2:	bf00      	nop
 800d5b4:	24000038 	.word	0x24000038
 800d5b8:	240000fc 	.word	0x240000fc
 800d5bc:	240016a8 	.word	0x240016a8

0800d5c0 <get_donut_cords>:
	HAL_DMA2D_Start (&hdma2d, 0x0000, (uint32_t) b_1, SCREEN_WIDTH, SCREEN_HEIGHT);
	HAL_DMA2D_PollForTransfer (&hdma2d, 10);
}

void get_donut_cords ()
{
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int s_i = 0, c_i = 1024;
 800d5c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
{
 800d5c8:	b089      	sub	sp, #36	@ 0x24
	int s_i = 0, c_i = 1024;
 800d5ca:	2600      	movs	r6, #0

	for (int i = 0; i < 90; i++)
	{
		int s_j = 0, c_j = 1024;
 800d5cc:	f04f 095a 	mov.w	r9, #90	@ 0x5a
	int s_i = 0, c_i = 1024;
 800d5d0:	9306      	str	r3, [sp, #24]
 800d5d2:	9604      	str	r6, [sp, #16]
	int x0 = R1 * c_j + R2,
 800d5d4:	9b06      	ldr	r3, [sp, #24]
		int s_j = 0, c_j = 1024;
 800d5d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800d5da:	2500      	movs	r5, #0
		if (Donut.ASCII) FLP_Draw_Symbol (b_1, screen_x_start, screen_y_start, pixel_color, intensity);
 800d5dc:	f8df b2ec 	ldr.w	fp, [pc, #748]	@ 800d8cc <get_donut_cords+0x30c>
	int x0 = R1 * c_j + R2,
 800d5e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5e4:	f8cd 901c 	str.w	r9, [sp, #28]
 800d5e8:	9305      	str	r3, [sp, #20]
 800d5ea:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 800d5ee:	9302      	str	r3, [sp, #8]
 800d5f0:	e019      	b.n	800d626 <get_donut_cords+0x66>

		for (int j = 0; j < 324; j++)
		{
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);

			R(5, 8, c_j, s_j);
 800d5f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800d5f6:	eba4 2323 	sub.w	r3, r4, r3, asr #8
 800d5fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d5fe:	eb05 2424 	add.w	r4, r5, r4, asr #8
 800d602:	fb03 f503 	mul.w	r5, r3, r3
 800d606:	f5c5 1540 	rsb	r5, r5, #3145728	@ 0x300000
 800d60a:	fb04 5514 	mls	r5, r4, r4, r5
 800d60e:	12ed      	asrs	r5, r5, #11
 800d610:	fb05 f303 	mul.w	r3, r5, r3
 800d614:	fb04 f505 	mul.w	r5, r4, r5
 800d618:	129c      	asrs	r4, r3, #10
		for (int j = 0; j < 324; j++)
 800d61a:	9b02      	ldr	r3, [sp, #8]
			R(5, 8, c_j, s_j);
 800d61c:	12ad      	asrs	r5, r5, #10
		for (int j = 0; j < 324; j++)
 800d61e:	3b01      	subs	r3, #1
 800d620:	9302      	str	r3, [sp, #8]
 800d622:	f000 8121 	beq.w	800d868 <get_donut_cords+0x2a8>
	x3 = s_i * x0 >> 10,
 800d626:	9b05      	ldr	r3, [sp, #20]
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d628:	4aa2      	ldr	r2, [pc, #648]	@ (800d8b4 <get_donut_cords+0x2f4>)
	x3 = s_i * x0 >> 10,
 800d62a:	fb05 f803 	mul.w	r8, r5, r3
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d62e:	f8d2 c000 	ldr.w	ip, [r2]
	x1 = c_i * x0 >> 10,
 800d632:	fb04 f003 	mul.w	r0, r4, r3
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d636:	4aa0      	ldr	r2, [pc, #640]	@ (800d8b8 <get_donut_cords+0x2f8>)
	x3 = s_i * x0 >> 10,
 800d638:	ea4f 29a8 	mov.w	r9, r8, asr #10
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d63c:	4b9f      	ldr	r3, [pc, #636]	@ (800d8bc <get_donut_cords+0x2fc>)
	x1 = c_i * x0 >> 10,
 800d63e:	1280      	asrs	r0, r0, #10
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d640:	6816      	ldr	r6, [r2, #0]
    x4 = R1 * x2 - (s_A * x3 >> 10),
 800d642:	fb09 fa0c 	mul.w	sl, r9, ip
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d646:	f8d3 e000 	ldr.w	lr, [r3]
	x2 = c_A * s_j >> 10,
 800d64a:	9b04      	ldr	r3, [sp, #16]
    x4 = R1 * x2 - (s_A * x3 >> 10),
 800d64c:	ea4f 2aaa 	mov.w	sl, sl, asr #10
	x2 = c_A * s_j >> 10,
 800d650:	fb03 f106 	mul.w	r1, r3, r6
    x5 = s_A * s_j >> 10,
 800d654:	fb03 f20c 	mul.w	r2, r3, ip
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d658:	4b99      	ldr	r3, [pc, #612]	@ (800d8c0 <get_donut_cords+0x300>)
    x4 = R1 * x2 - (s_A * x3 >> 10),
 800d65a:	ebca 2aa1 	rsb	sl, sl, r1, asr #10
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d65e:	681f      	ldr	r7, [r3, #0]
    x5 = s_A * s_j >> 10,
 800d660:	1292      	asrs	r2, r2, #10
    x = 40 + 30 * (c_B * x1 - s_B * x4) / x6,
 800d662:	fb00 f30e 	mul.w	r3, r0, lr
	x2 = c_A * s_j >> 10,
 800d666:	1289      	asrs	r1, r1, #10
    y = 12 + 15 * (c_B * x4 + s_B * x1) / x6,
 800d668:	fb07 f000 	mul.w	r0, r7, r0
    x = 40 + 30 * (c_B * x1 - s_B * x4) / x6,
 800d66c:	fb0a 3317 	mls	r3, sl, r7, r3
    y = 12 + 15 * (c_B * x4 + s_B * x1) / x6,
 800d670:	fb0a 000e 	mla	r0, sl, lr, r0
    x6 = K2 + R1 * 1024 * x5 + c_A * x3,
 800d674:	ea4f 2a82 	mov.w	sl, r2, lsl #10
    x = 40 + 30 * (c_B * x1 - s_B * x4) / x6,
 800d678:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	x2 = c_A * s_j >> 10,
 800d67c:	9103      	str	r1, [sp, #12]
    x6 = K2 + R1 * 1024 * x5 + c_A * x3,
 800d67e:	f50a 0aa0 	add.w	sl, sl, #5242880	@ 0x500000
    y = 12 + 15 * (c_B * x4 + s_B * x1) / x6,
 800d682:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    x = 40 + 30 * (c_B * x1 - s_B * x4) / x6,
 800d686:	005b      	lsls	r3, r3, #1
    x6 = K2 + R1 * 1024 * x5 + c_A * x3,
 800d688:	fb09 a906 	mla	r9, r9, r6, sl
    x = 40 + 30 * (c_B * x1 - s_B * x4) / x6,
 800d68c:	fb93 f3f9 	sdiv	r3, r3, r9
    y = 12 + 15 * (c_B * x4 + s_B * x1) / x6,
 800d690:	fb90 f0f9 	sdiv	r0, r0, r9
	if (y < 22 && y >= 0 && x >= 0 && x < 80 && zz < z[pixel_position])
 800d694:	3328      	adds	r3, #40	@ 0x28
    y = 12 + 15 * (c_B * x4 + s_B * x1) / x6,
 800d696:	300c      	adds	r0, #12
	if (y < 22 && y >= 0 && x >= 0 && x < 80 && zz < z[pixel_position])
 800d698:	2b4f      	cmp	r3, #79	@ 0x4f
 800d69a:	d8aa      	bhi.n	800d5f2 <get_donut_cords+0x32>
 800d69c:	2815      	cmp	r0, #21
 800d69e:	d8a8      	bhi.n	800d5f2 <get_donut_cords+0x32>
	int8_t zz = (x6 - K2) >> 15;
 800d6a0:	f5a9 09a0 	sub.w	r9, r9, #5242880	@ 0x500000
	if (y < 22 && y >= 0 && x >= 0 && x < 80 && zz < z[pixel_position])
 800d6a4:	4987      	ldr	r1, [pc, #540]	@ (800d8c4 <get_donut_cords+0x304>)
	int8_t zz = (x6 - K2) >> 15;
 800d6a6:	f349 3ac7 	sbfx	sl, r9, #15, #8
	int pixel_position = x + y * 80;
 800d6aa:	eb00 0980 	add.w	r9, r0, r0, lsl #2
 800d6ae:	eb03 1909 	add.w	r9, r3, r9, lsl #4
	if (y < 22 && y >= 0 && x >= 0 && x < 80 && zz < z[pixel_position])
 800d6b2:	f911 1009 	ldrsb.w	r1, [r1, r9]
 800d6b6:	4551      	cmp	r1, sl
 800d6b8:	dd9b      	ble.n	800d5f2 <get_donut_cords+0x32>
    x7 = c_j * s_i >> 10,
 800d6ba:	eba8 28c5 	sub.w	r8, r8, r5, lsl #11
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d6be:	9906      	ldr	r1, [sp, #24]
 800d6c0:	f1cc 0c00 	rsb	ip, ip, #0
 800d6c4:	4276      	negs	r6, r6
    x7 = c_j * s_i >> 10,
 800d6c6:	ea4f 28a8 	mov.w	r8, r8, asr #10
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d6ca:	fb01 f707 	mul.w	r7, r1, r7
 800d6ce:	9903      	ldr	r1, [sp, #12]
        int screen_x_start = x * char_block_width;
 800d6d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d6d4:	fb08 fc0c 	mul.w	ip, r8, ip
 800d6d8:	12bf      	asrs	r7, r7, #10
 800d6da:	fb08 f606 	mul.w	r6, r8, r6
 800d6de:	eb01 21ac 	add.w	r1, r1, ip, asr #10
 800d6e2:	fb0e 6611 	mls	r6, lr, r1, r6
        int screen_x_start = x * char_block_width;
 800d6e6:	0059      	lsls	r1, r3, #1
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d6e8:	fb04 6617 	mls	r6, r4, r7, r6
        int screen_y_start = y * char_block_height;
 800d6ec:	eb00 0740 	add.w	r7, r0, r0, lsl #1
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d6f0:	ebc2 22a6 	rsb	r2, r2, r6, asr #10
        int screen_y_start = y * char_block_height;
 800d6f4:	00bf      	lsls	r7, r7, #2
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d6f6:	11d3      	asrs	r3, r2, #7
		uint32_t pixel_color = pick_color (intensity, intensity, intensity, *Donut.Colorway);
 800d6f8:	4a73      	ldr	r2, [pc, #460]	@ (800d8c8 <get_donut_cords+0x308>)
		uint8_t intensity = N * 21;
 800d6fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d6fe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	r *= filter.red;
 800d702:	b2de      	uxtb	r6, r3
		uint32_t pixel_color = pick_color (intensity, intensity, intensity, *Donut.Colorway);
 800d704:	6953      	ldr	r3, [r2, #20]
	r *= filter.red;
 800d706:	ee07 6a90 	vmov	s15, r6
	g *= filter.green;
 800d70a:	edd3 6a01 	vldr	s13, [r3, #4]
	r *= filter.red;
 800d70e:	ed93 7a00 	vldr	s14, [r3]
 800d712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	b *= filter.blue;
 800d716:	ed93 6a02 	vldr	s12, [r3, #8]
		z[pixel_position] = zz;
 800d71a:	4b6a      	ldr	r3, [pc, #424]	@ (800d8c4 <get_donut_cords+0x304>)
	g *= filter.green;
 800d71c:	ee67 6aa6 	vmul.f32	s13, s15, s13
		z[pixel_position] = zz;
 800d720:	f803 a009 	strb.w	sl, [r3, r9]
	r *= filter.red;
 800d724:	ee27 7a87 	vmul.f32	s14, s15, s14
	b *= filter.blue;
 800d728:	ee67 7a86 	vmul.f32	s15, s15, s12
	g *= filter.green;
 800d72c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
	r *= filter.red;
 800d730:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	b *= filter.blue;
 800d734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	g *= filter.green;
 800d738:	ee16 2a90 	vmov	r2, s13
	r *= filter.red;
 800d73c:	ee17 3a10 	vmov	r3, s14
	uint16_t green_565 = (g >> 2) << 5;
 800d740:	f3c2 0285 	ubfx	r2, r2, #2, #6
	uint16_t red_565   = (r >> 3) << 11;
 800d744:	f3c3 03c4 	ubfx	r3, r3, #3, #5
	uint16_t green_565 = (g >> 2) << 5;
 800d748:	0152      	lsls	r2, r2, #5
	return red_565 | green_565 | blue_565;
 800d74a:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
	b *= filter.blue;
 800d74e:	ee17 3a90 	vmov	r3, s15
	uint16_t blue_565  = (b >> 3);
 800d752:	f3c3 03c4 	ubfx	r3, r3, #3, #5
	return red_565 | green_565 | blue_565;
 800d756:	4313      	orrs	r3, r2
		if (Donut.ASCII) FLP_Draw_Symbol (b_1, screen_x_start, screen_y_start, pixel_color, intensity);
 800d758:	4a5b      	ldr	r2, [pc, #364]	@ (800d8c8 <get_donut_cords+0x308>)
 800d75a:	7e52      	ldrb	r2, [r2, #25]
 800d75c:	2a00      	cmp	r2, #0
 800d75e:	d17d      	bne.n	800d85c <get_donut_cords+0x29c>
					b_1[(screen_x_start + c_x) + (screen_y_start + c_y) * SCREEN_WIDTH] = pixel_color;
 800d760:	f44f 5cb4 	mov.w	ip, #5760	@ 0x1680
 800d764:	f363 020f 	bfi	r2, r3, #0, #16
 800d768:	3701      	adds	r7, #1
 800d76a:	fb0c f000 	mul.w	r0, ip, r0
 800d76e:	f101 0c01 	add.w	ip, r1, #1
 800d772:	f363 421f 	bfi	r2, r3, #16, #16
 800d776:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800d77a:	4484      	add	ip, r0
 800d77c:	4408      	add	r0, r1
 800d77e:	017e      	lsls	r6, r7, #5
 800d780:	f82b 3010 	strh.w	r3, [fp, r0, lsl #1]
 800d784:	3005      	adds	r0, #5
 800d786:	f84b 201c 	str.w	r2, [fp, ip, lsl #1]
 800d78a:	eb0b 0c4c 	add.w	ip, fp, ip, lsl #1
 800d78e:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 800d792:	f8cc 2004 	str.w	r2, [ip, #4]
 800d796:	f82b 3010 	strh.w	r3, [fp, r0, lsl #1]
 800d79a:	f506 73f0 	add.w	r3, r6, #480	@ 0x1e0
 800d79e:	f84b 2017 	str.w	r2, [fp, r7, lsl #1]
 800d7a2:	eb0b 0747 	add.w	r7, fp, r7, lsl #1
 800d7a6:	440b      	add	r3, r1
 800d7a8:	f506 5087 	add.w	r0, r6, #4320	@ 0x10e0
 800d7ac:	e9c7 2201 	strd	r2, r2, [r7, #4]
 800d7b0:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d7b4:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d7b8:	4408      	add	r0, r1
 800d7ba:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d7be:	f506 7370 	add.w	r3, r6, #960	@ 0x3c0
 800d7c2:	440b      	add	r3, r1
 800d7c4:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d7c8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d7cc:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d7d0:	f506 63b4 	add.w	r3, r6, #1440	@ 0x5a0
 800d7d4:	440b      	add	r3, r1
 800d7d6:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d7da:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d7de:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d7e2:	f506 63f0 	add.w	r3, r6, #1920	@ 0x780
 800d7e6:	440b      	add	r3, r1
 800d7e8:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d7ec:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d7f0:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d7f4:	f506 6316 	add.w	r3, r6, #2400	@ 0x960
 800d7f8:	440b      	add	r3, r1
 800d7fa:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d7fe:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d802:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d806:	f506 6334 	add.w	r3, r6, #2880	@ 0xb40
 800d80a:	440b      	add	r3, r1
 800d80c:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d810:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d814:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d818:	f506 6352 	add.w	r3, r6, #3360	@ 0xd20
 800d81c:	440b      	add	r3, r1
 800d81e:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d822:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d826:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d82a:	f506 6370 	add.w	r3, r6, #3840	@ 0xf00
 800d82e:	440b      	add	r3, r1
 800d830:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d834:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d838:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d83c:	f506 5396 	add.w	r3, r6, #4800	@ 0x12c0
 800d840:	f84b 2010 	str.w	r2, [fp, r0, lsl #1]
 800d844:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 800d848:	440b      	add	r3, r1
 800d84a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800d84e:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d852:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d856:	e9c3 2201 	strd	r2, r2, [r3, #4]
			for (int c_y = 0; c_y < char_block_height; c_y++)
 800d85a:	e6ca      	b.n	800d5f2 <get_donut_cords+0x32>
		if (Donut.ASCII) FLP_Draw_Symbol (b_1, screen_x_start, screen_y_start, pixel_color, intensity);
 800d85c:	463a      	mov	r2, r7
 800d85e:	4658      	mov	r0, fp
 800d860:	9600      	str	r6, [sp, #0]
 800d862:	f7f3 f87f 	bl	8000964 <FLP_Draw_Symbol>
 800d866:	e6c4      	b.n	800d5f2 <get_donut_cords+0x32>
		}
		R(9, 7, c_i, s_i);
 800d868:	9b04      	ldr	r3, [sp, #16]
 800d86a:	9806      	ldr	r0, [sp, #24]
 800d86c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800d870:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800d874:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 800d878:	eba0 12e2 	sub.w	r2, r0, r2, asr #7
	for (int i = 0; i < 90; i++)
 800d87c:	f1b9 0901 	subs.w	r9, r9, #1
		R(9, 7, c_i, s_i);
 800d880:	eb03 11e1 	add.w	r1, r3, r1, asr #7
 800d884:	fb02 f302 	mul.w	r3, r2, r2
 800d888:	f5c3 1340 	rsb	r3, r3, #3145728	@ 0x300000
 800d88c:	fb01 3311 	mls	r3, r1, r1, r3
 800d890:	ea4f 23e3 	mov.w	r3, r3, asr #11
 800d894:	fb03 f202 	mul.w	r2, r3, r2
 800d898:	fb01 f303 	mul.w	r3, r1, r3
 800d89c:	ea4f 22a2 	mov.w	r2, r2, asr #10
 800d8a0:	ea4f 23a3 	mov.w	r3, r3, asr #10
 800d8a4:	9206      	str	r2, [sp, #24]
 800d8a6:	9304      	str	r3, [sp, #16]
	for (int i = 0; i < 90; i++)
 800d8a8:	f47f ae94 	bne.w	800d5d4 <get_donut_cords+0x14>
	}
}
 800d8ac:	b009      	add	sp, #36	@ 0x24
 800d8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b2:	bf00      	nop
 800d8b4:	24000128 	.word	0x24000128
 800d8b8:	24000fc4 	.word	0x24000fc4
 800d8bc:	24000fc0 	.word	0x24000fc0
 800d8c0:	24000124 	.word	0x24000124
 800d8c4:	24000fc8 	.word	0x24000fc8
 800d8c8:	240000fc 	.word	0x240000fc
 800d8cc:	240016a8 	.word	0x240016a8

0800d8d0 <AppMain>:


void AppMain()
{
 800d8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d4:	ed2d 8b0c 	vpush	{d8-d13}
 800d8d8:	b097      	sub	sp, #92	@ 0x5c
	TS_Init_t ts_init;
    ts_init.Width = SCREEN_WIDTH;
 800d8da:	f44f 74f0 	mov.w	r4, #480	@ 0x1e0
 800d8de:	f44f 7588 	mov.w	r5, #272	@ 0x110
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	2305      	movs	r3, #5
    ts_init.Height = SCREEN_HEIGHT;
    ts_init.Orientation = LCD_ORIENTATION_LANDSCAPE;
    ts_init.Accuracy = 5;

    if (BSP_TS_Init(0, &ts_init) != BSP_ERROR_NONE) Error_Handler();
 800d8e6:	a90a      	add	r1, sp, #40	@ 0x28
 800d8e8:	2000      	movs	r0, #0
    ts_init.Width = SCREEN_WIDTH;
 800d8ea:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 800d8ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (BSP_TS_Init(0, &ts_init) != BSP_ERROR_NONE) Error_Handler();
 800d8f2:	f7ff fba5 	bl	800d040 <BSP_TS_Init>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	f040 8147 	bne.w	800db8a <AppMain+0x2ba>
	HAL_DMA2D_Start (&hdma2d, 0x0000, (uint32_t) b_1, SCREEN_WIDTH, SCREEN_HEIGHT);
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	4fac      	ldr	r7, [pc, #688]	@ (800dbb0 <AppMain+0x2e0>)
 800d900:	4eac      	ldr	r6, [pc, #688]	@ (800dbb4 <AppMain+0x2e4>)
 800d902:	4dad      	ldr	r5, [pc, #692]	@ (800dbb8 <AppMain+0x2e8>)
 800d904:	f8df b2d4 	ldr.w	fp, [pc, #724]	@ 800dbdc <AppMain+0x30c>
 800d908:	f8df a2d4 	ldr.w	sl, [pc, #724]	@ 800dbe0 <AppMain+0x310>
 800d90c:	4cab      	ldr	r4, [pc, #684]	@ (800dbbc <AppMain+0x2ec>)
 800d90e:	9305      	str	r3, [sp, #20]
	rgb.green = (sin (RGB_angle + 2.0944) * 0.5) + 0.5;
 800d910:	ed9f cb9f 	vldr	d12, [pc, #636]	@ 800db90 <AppMain+0x2c0>
	rgb.blue = (sin (RGB_angle + 4.18888) * 0.5) + 0.5;
 800d914:	ed9f bba0 	vldr	d11, [pc, #640]	@ 800db98 <AppMain+0x2c8>
	if (RGB_angle > 2 * PI) RGB_angle -= 2 * PI;
 800d918:	ed9f 9ba1 	vldr	d9, [pc, #644]	@ 800dba0 <AppMain+0x2d0>
	RGB_angle += 0.05;
 800d91c:	ed9f aba2 	vldr	d10, [pc, #648]	@ 800dba8 <AppMain+0x2d8>
    uint8_t prev_touch_detected = 0;


    for (;;)
    {
    	BSP_TS_GetState(0, &TS_State);
 800d920:	a907      	add	r1, sp, #28
 800d922:	2000      	movs	r0, #0
 800d924:	f7ff fc1a 	bl	800d15c <BSP_TS_GetState>
	hdma2d.Init.Mode = DMA2D_R2M;
 800d928:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
	if(HAL_DMA2D_Init (&hdma2d) != HAL_OK) Error_Handler();
 800d92c:	4630      	mov	r0, r6
	hdma2d.Init.Mode = DMA2D_R2M;
 800d92e:	6073      	str	r3, [r6, #4]
	if(HAL_DMA2D_Init (&hdma2d) != HAL_OK) Error_Handler();
 800d930:	f000 fa42 	bl	800ddb8 <HAL_DMA2D_Init>
 800d934:	2800      	cmp	r0, #0
 800d936:	f040 80d2 	bne.w	800dade <AppMain+0x20e>
	HAL_DMA2D_Start (&hdma2d, 0x0000, (uint32_t) b_1, SCREEN_WIDTH, SCREEN_HEIGHT);
 800d93a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d93e:	463a      	mov	r2, r7
 800d940:	2100      	movs	r1, #0
 800d942:	4630      	mov	r0, r6
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800d94a:	f000 fa73 	bl	800de34 <HAL_DMA2D_Start>
	HAL_DMA2D_PollForTransfer (&hdma2d, 10);
 800d94e:	210a      	movs	r1, #10
 800d950:	4630      	mov	r0, r6
 800d952:	f000 fac9 	bl	800dee8 <HAL_DMA2D_PollForTransfer>

    	reset_frame ();

		if (Donut.RGB) change_RGB ();
 800d956:	7e2b      	ldrb	r3, [r5, #24]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f040 8091 	bne.w	800da80 <AppMain+0x1b0>
	rgb.red = (sin (RGB_angle) * 0.5) + 0.5;
 800d95e:	4b98      	ldr	r3, [pc, #608]	@ (800dbc0 <AppMain+0x2f0>)
 800d960:	ed93 8b00 	vldr	d8, [r3]
	if (RGB_angle > 2 * PI) RGB_angle -= 2 * PI;
 800d964:	eeb4 8bc9 	vcmpe.f64	d8, d9
	RGB_angle += 0.05;
 800d968:	4b95      	ldr	r3, [pc, #596]	@ (800dbc0 <AppMain+0x2f0>)
		update_angle ();

		memset (z, 127, 1760);
 800d96a:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 800d96e:	217f      	movs	r1, #127	@ 0x7f
 800d970:	4894      	ldr	r0, [pc, #592]	@ (800dbc4 <AppMain+0x2f4>)
	if (RGB_angle > 2 * PI) RGB_angle -= 2 * PI;
 800d972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	RGB_angle += 0.05;
 800d976:	bfd4      	ite	le
 800d978:	ee38 8b0a 	vaddle.f64	d8, d8, d10
	if (RGB_angle > 2 * PI) RGB_angle -= 2 * PI;
 800d97c:	ee38 8b49 	vsubgt.f64	d8, d8, d9
	RGB_angle += 0.05;
 800d980:	ed83 8b00 	vstr	d8, [r3]
		memset (z, 127, 1760);
 800d984:	f004 f810 	bl	80119a8 <memset>

		get_donut_cords ();
 800d988:	f7ff fe1a 	bl	800d5c0 <get_donut_cords>


		if (TS_State.TouchDetected && !prev_touch_detected)
 800d98c:	9a05      	ldr	r2, [sp, #20]
 800d98e:	9b07      	ldr	r3, [sp, #28]
 800d990:	b912      	cbnz	r2, 800d998 <AppMain+0xc8>
 800d992:	2b00      	cmp	r3, #0
 800d994:	f040 80a6 	bne.w	800dae4 <AppMain+0x214>


        while (blockRendering);
        blockRendering = 1;

		HAL_Delay (Donut.Spin_Rate);
 800d998:	68e8      	ldr	r0, [r5, #12]
		prev_touch_detected = TS_State.TouchDetected;
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	9305      	str	r3, [sp, #20]
        while (blockRendering);
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1fc      	bne.n	800d99e <AppMain+0xce>
        blockRendering = 1;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	6023      	str	r3, [r4, #0]
		HAL_Delay (Donut.Spin_Rate);
 800d9a8:	f000 f988 	bl	800dcbc <HAL_Delay>

		if (Donut.Spin_Rate > 0)
 800d9ac:	68eb      	ldr	r3, [r5, #12]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	dd3a      	ble.n	800da28 <AppMain+0x158>
		{
	        R(5, 7, c_A, s_A);
 800d9b2:	4b85      	ldr	r3, [pc, #532]	@ (800dbc8 <AppMain+0x2f8>)
 800d9b4:	f8db 1000 	ldr.w	r1, [fp]
 800d9b8:	681a      	ldr	r2, [r3, #0]
	        R(5, 8, c_B, s_B);
 800d9ba:	f8da c000 	ldr.w	ip, [sl]
	        R(5, 7, c_A, s_A);
 800d9be:	eb02 0082 	add.w	r0, r2, r2, lsl #2
	        R(5, 8, c_B, s_B);
 800d9c2:	4b82      	ldr	r3, [pc, #520]	@ (800dbcc <AppMain+0x2fc>)
	        R(5, 7, c_A, s_A);
 800d9c4:	eba1 10e0 	sub.w	r0, r1, r0, asr #7
	        R(5, 8, c_B, s_B);
 800d9c8:	681b      	ldr	r3, [r3, #0]
	        R(5, 7, c_A, s_A);
 800d9ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d9ce:	eb02 12e1 	add.w	r2, r2, r1, asr #7
	        R(5, 8, c_B, s_B);
 800d9d2:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800d9d6:	eba3 2121 	sub.w	r1, r3, r1, asr #8
 800d9da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d9de:	eb0c 2323 	add.w	r3, ip, r3, asr #8
	        R(5, 7, c_A, s_A);
 800d9e2:	fb00 fc00 	mul.w	ip, r0, r0
 800d9e6:	f5cc 1c40 	rsb	ip, ip, #3145728	@ 0x300000
 800d9ea:	fb02 cc12 	mls	ip, r2, r2, ip
 800d9ee:	ea4f 2cec 	mov.w	ip, ip, asr #11
 800d9f2:	fb0c f000 	mul.w	r0, ip, r0
 800d9f6:	fb0c f202 	mul.w	r2, ip, r2
 800d9fa:	1280      	asrs	r0, r0, #10
 800d9fc:	1292      	asrs	r2, r2, #10
 800d9fe:	f8cb 0000 	str.w	r0, [fp]
 800da02:	4871      	ldr	r0, [pc, #452]	@ (800dbc8 <AppMain+0x2f8>)
 800da04:	6002      	str	r2, [r0, #0]
	        R(5, 8, c_B, s_B);
 800da06:	fb01 f201 	mul.w	r2, r1, r1
 800da0a:	f5c2 1240 	rsb	r2, r2, #3145728	@ 0x300000
 800da0e:	fb03 2213 	mls	r2, r3, r3, r2
 800da12:	12d2      	asrs	r2, r2, #11
 800da14:	fb02 f101 	mul.w	r1, r2, r1
 800da18:	fb02 f303 	mul.w	r3, r2, r3
 800da1c:	4a6b      	ldr	r2, [pc, #428]	@ (800dbcc <AppMain+0x2fc>)
 800da1e:	1289      	asrs	r1, r1, #10
 800da20:	129b      	asrs	r3, r3, #10
 800da22:	6011      	str	r1, [r2, #0]
 800da24:	f8ca 3000 	str.w	r3, [sl]
		}

		Donut.donuts_count += Donut.donuts_passive;
 800da28:	682b      	ldr	r3, [r5, #0]
	FLP_Draw_Box (b_1, 20, 200, 4, 50, 50, UTIL_LCD_COLOR_WHITE);
 800da2a:	f04f 39ff 	mov.w	r9, #4294967295
		Donut.donuts_count += Donut.donuts_passive;
 800da2e:	68aa      	ldr	r2, [r5, #8]
	FLP_Draw_Box (b_1, 20, 200, 4, 50, 50, UTIL_LCD_COLOR_WHITE);
 800da30:	f04f 0832 	mov.w	r8, #50	@ 0x32
 800da34:	4638      	mov	r0, r7
 800da36:	2114      	movs	r1, #20
		Donut.donuts_count += Donut.donuts_passive;
 800da38:	4413      	add	r3, r2
	FLP_Draw_Box (b_1, 20, 200, 4, 50, 50, UTIL_LCD_COLOR_WHITE);
 800da3a:	22c8      	movs	r2, #200	@ 0xc8
		Donut.donuts_count += Donut.donuts_passive;
 800da3c:	602b      	str	r3, [r5, #0]
	FLP_Draw_Box (b_1, 20, 200, 4, 50, 50, UTIL_LCD_COLOR_WHITE);
 800da3e:	2304      	movs	r3, #4
 800da40:	f8cd 9008 	str.w	r9, [sp, #8]
 800da44:	e9cd 8800 	strd	r8, r8, [sp]
 800da48:	f7f2 fefe 	bl	8000848 <FLP_Draw_Box>
	FLP_Draw_String (b_1, "DONUT TOUCH ME", 5, 5, UTIL_LCD_COLOR_WHITE);
 800da4c:	2305      	movs	r3, #5
 800da4e:	4638      	mov	r0, r7
 800da50:	495f      	ldr	r1, [pc, #380]	@ (800dbd0 <AppMain+0x300>)
 800da52:	461a      	mov	r2, r3
 800da54:	f8cd 9000 	str.w	r9, [sp]
 800da58:	f7f3 f8dc 	bl	8000c14 <FLP_Draw_String>
    sprintf(counter, "%lu DONUTS TOUCHED", Donut.donuts_count);
 800da5c:	682a      	ldr	r2, [r5, #0]
 800da5e:	495d      	ldr	r1, [pc, #372]	@ (800dbd4 <AppMain+0x304>)
 800da60:	a80e      	add	r0, sp, #56	@ 0x38
 800da62:	f003 ff7f 	bl	8011964 <siprintf>
	FLP_Draw_String (b_1, counter, 5, 50, UTIL_LCD_COLOR_WHITE);
 800da66:	4643      	mov	r3, r8
 800da68:	2205      	movs	r2, #5
 800da6a:	a90e      	add	r1, sp, #56	@ 0x38
 800da6c:	4638      	mov	r0, r7
 800da6e:	f8cd 9000 	str.w	r9, [sp]
 800da72:	f7f3 f8cf 	bl	8000c14 <FLP_Draw_String>
	draw_upgrades ();
 800da76:	f7ff fcd5 	bl	800d424 <draw_upgrades>
	draw_donut ();
 800da7a:	f7ff fc8d 	bl	800d398 <draw_donut>
}
 800da7e:	e74f      	b.n	800d920 <AppMain+0x50>
	rgb.red = (sin (RGB_angle) * 0.5) + 0.5;
 800da80:	4b4f      	ldr	r3, [pc, #316]	@ (800dbc0 <AppMain+0x2f0>)
 800da82:	eeb6 db00 	vmov.f64	d13, #96	@ 0x3f000000  0.5
 800da86:	ed93 8b00 	vldr	d8, [r3]
 800da8a:	eeb0 0b48 	vmov.f64	d0, d8
 800da8e:	f004 fc0b 	bl	80122a8 <sin>
 800da92:	eeb0 7b4d 	vmov.f64	d7, d13
 800da96:	eeb0 6b40 	vmov.f64	d6, d0
 800da9a:	4b4f      	ldr	r3, [pc, #316]	@ (800dbd8 <AppMain+0x308>)
	rgb.green = (sin (RGB_angle + 2.0944) * 0.5) + 0.5;
 800da9c:	ee38 0b0c 	vadd.f64	d0, d8, d12
	rgb.red = (sin (RGB_angle) * 0.5) + 0.5;
 800daa0:	ee06 7b0d 	vmla.f64	d7, d6, d13
 800daa4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800daa8:	ed83 7a00 	vstr	s14, [r3]
	rgb.green = (sin (RGB_angle + 2.0944) * 0.5) + 0.5;
 800daac:	f004 fbfc 	bl	80122a8 <sin>
 800dab0:	eeb0 7b4d 	vmov.f64	d7, d13
 800dab4:	4b48      	ldr	r3, [pc, #288]	@ (800dbd8 <AppMain+0x308>)
 800dab6:	eeb0 6b40 	vmov.f64	d6, d0
	rgb.blue = (sin (RGB_angle + 4.18888) * 0.5) + 0.5;
 800daba:	ee38 0b0b 	vadd.f64	d0, d8, d11
	rgb.green = (sin (RGB_angle + 2.0944) * 0.5) + 0.5;
 800dabe:	ee06 7b0d 	vmla.f64	d7, d6, d13
 800dac2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800dac6:	ed83 7a01 	vstr	s14, [r3, #4]
	rgb.blue = (sin (RGB_angle + 4.18888) * 0.5) + 0.5;
 800daca:	f004 fbed 	bl	80122a8 <sin>
 800dace:	ee00 db0d 	vmla.f64	d13, d0, d13
 800dad2:	4b41      	ldr	r3, [pc, #260]	@ (800dbd8 <AppMain+0x308>)
 800dad4:	eeb7 dbcd 	vcvt.f32.f64	s26, d13
 800dad8:	ed83 da02 	vstr	s26, [r3, #8]
}
 800dadc:	e742      	b.n	800d964 <AppMain+0x94>
	if(HAL_DMA2D_Init (&hdma2d) != HAL_OK) Error_Handler();
 800dade:	f7fd ff4f 	bl	800b980 <Error_Handler>
 800dae2:	e72a      	b.n	800d93a <AppMain+0x6a>
			if (TS_State.TouchX > 100 && TS_State.TouchX < 380 && TS_State.TouchY > 50 && TS_State.TouchY < 220)
 800dae4:	9a08      	ldr	r2, [sp, #32]
				if (!Donut.Spin_Rate)
 800dae6:	68e8      	ldr	r0, [r5, #12]
			if (TS_State.TouchX > 100 && TS_State.TouchX < 380 && TS_State.TouchY > 50 && TS_State.TouchY < 220)
 800dae8:	3a65      	subs	r2, #101	@ 0x65
 800daea:	f5b2 7f8b 	cmp.w	r2, #278	@ 0x116
 800daee:	f63f af54 	bhi.w	800d99a <AppMain+0xca>
 800daf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800daf4:	3a33      	subs	r2, #51	@ 0x33
 800daf6:	2aa8      	cmp	r2, #168	@ 0xa8
 800daf8:	f63f af4f 	bhi.w	800d99a <AppMain+0xca>
				Donut.donuts_count += Donut.donuts_per_tap;
 800dafc:	e9d5 2100 	ldrd	r2, r1, [r5]
 800db00:	440a      	add	r2, r1
 800db02:	602a      	str	r2, [r5, #0]
				if (!Donut.Spin_Rate)
 800db04:	2800      	cmp	r0, #0
 800db06:	f47f af48 	bne.w	800d99a <AppMain+0xca>
                    R(5, 7, c_A, s_A);
 800db0a:	4a2f      	ldr	r2, [pc, #188]	@ (800dbc8 <AppMain+0x2f8>)
 800db0c:	f8db 1000 	ldr.w	r1, [fp]
 800db10:	f8d2 c000 	ldr.w	ip, [r2]
                    R(5, 8, c_B, s_B);
 800db14:	f8da 8000 	ldr.w	r8, [sl]
                    R(5, 7, c_A, s_A);
 800db18:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
                    R(5, 8, c_B, s_B);
 800db1c:	4a2b      	ldr	r2, [pc, #172]	@ (800dbcc <AppMain+0x2fc>)
                    R(5, 7, c_A, s_A);
 800db1e:	eba1 1eee 	sub.w	lr, r1, lr, asr #7
                    R(5, 8, c_B, s_B);
 800db22:	6812      	ldr	r2, [r2, #0]
                    R(5, 7, c_A, s_A);
 800db24:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800db28:	eb0c 11e1 	add.w	r1, ip, r1, asr #7
                    R(5, 8, c_B, s_B);
 800db2c:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 800db30:	eba2 2c2c 	sub.w	ip, r2, ip, asr #8
 800db34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800db38:	eb08 2922 	add.w	r9, r8, r2, asr #8
                    R(5, 7, c_A, s_A);
 800db3c:	fb0e f80e 	mul.w	r8, lr, lr
 800db40:	4a21      	ldr	r2, [pc, #132]	@ (800dbc8 <AppMain+0x2f8>)
 800db42:	f5c8 1840 	rsb	r8, r8, #3145728	@ 0x300000
 800db46:	fb01 8811 	mls	r8, r1, r1, r8
 800db4a:	ea4f 28e8 	mov.w	r8, r8, asr #11
 800db4e:	fb08 f101 	mul.w	r1, r8, r1
 800db52:	fb08 fe0e 	mul.w	lr, r8, lr
 800db56:	1289      	asrs	r1, r1, #10
 800db58:	ea4f 2eae 	mov.w	lr, lr, asr #10
 800db5c:	6011      	str	r1, [r2, #0]
                    R(5, 8, c_B, s_B);
 800db5e:	fb0c f10c 	mul.w	r1, ip, ip
 800db62:	4a1a      	ldr	r2, [pc, #104]	@ (800dbcc <AppMain+0x2fc>)
                    R(5, 7, c_A, s_A);
 800db64:	f8cb e000 	str.w	lr, [fp]
                    R(5, 8, c_B, s_B);
 800db68:	f5c1 1140 	rsb	r1, r1, #3145728	@ 0x300000
 800db6c:	fb09 1119 	mls	r1, r9, r9, r1
 800db70:	12c9      	asrs	r1, r1, #11
 800db72:	fb01 fc0c 	mul.w	ip, r1, ip
 800db76:	fb01 fe09 	mul.w	lr, r1, r9
 800db7a:	ea4f 21ac 	mov.w	r1, ip, asr #10
 800db7e:	6011      	str	r1, [r2, #0]
 800db80:	ea4f 22ae 	mov.w	r2, lr, asr #10
 800db84:	f8ca 2000 	str.w	r2, [sl]
 800db88:	e707      	b.n	800d99a <AppMain+0xca>
    if (BSP_TS_Init(0, &ts_init) != BSP_ERROR_NONE) Error_Handler();
 800db8a:	f7fd fef9 	bl	800b980 <Error_Handler>
 800db8e:	e6b5      	b.n	800d8fc <AppMain+0x2c>
 800db90:	c985f06f 	.word	0xc985f06f
 800db94:	4000c154 	.word	0x4000c154
 800db98:	c23b7953 	.word	0xc23b7953
 800db9c:	4010c169 	.word	0x4010c169
 800dba0:	2110fbb7 	.word	0x2110fbb7
 800dba4:	4018eec8 	.word	0x4018eec8
 800dba8:	9999999a 	.word	0x9999999a
 800dbac:	3fa99999 	.word	0x3fa99999
 800dbb0:	240016a8 	.word	0x240016a8
 800dbb4:	240001c0 	.word	0x240001c0
 800dbb8:	240000fc 	.word	0x240000fc
 800dbbc:	240001bc 	.word	0x240001bc
 800dbc0:	24000fb8 	.word	0x24000fb8
 800dbc4:	24000fc8 	.word	0x24000fc8
 800dbc8:	24000128 	.word	0x24000128
 800dbcc:	24000fc0 	.word	0x24000fc0
 800dbd0:	08012e50 	.word	0x08012e50
 800dbd4:	08012e60 	.word	0x08012e60
 800dbd8:	24000118 	.word	0x24000118
 800dbdc:	24000fc4 	.word	0x24000fc4
 800dbe0:	24000124 	.word	0x24000124

0800dbe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800dbe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800dc1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800dbe8:	f7ff fb72 	bl	800d2d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800dbec:	480c      	ldr	r0, [pc, #48]	@ (800dc20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800dbee:	490d      	ldr	r1, [pc, #52]	@ (800dc24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800dbf0:	4a0d      	ldr	r2, [pc, #52]	@ (800dc28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800dbf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dbf4:	e002      	b.n	800dbfc <LoopCopyDataInit>

0800dbf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dbf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dbf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dbfa:	3304      	adds	r3, #4

0800dbfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dbfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dbfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dc00:	d3f9      	bcc.n	800dbf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dc02:	4a0a      	ldr	r2, [pc, #40]	@ (800dc2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800dc04:	4c0a      	ldr	r4, [pc, #40]	@ (800dc30 <LoopFillZerobss+0x22>)
  movs r3, #0
 800dc06:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dc08:	e001      	b.n	800dc0e <LoopFillZerobss>

0800dc0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dc0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dc0c:	3204      	adds	r2, #4

0800dc0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dc0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dc10:	d3fb      	bcc.n	800dc0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800dc12:	f003 fed7 	bl	80119c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dc16:	f7fd feb9 	bl	800b98c <main>
  bx  lr
 800dc1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dc1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800dc20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800dc24:	24000184 	.word	0x24000184
  ldr r2, =_sidata
 800dc28:	08013138 	.word	0x08013138
  ldr r2, =_sbss
 800dc2c:	24000188 	.word	0x24000188
  ldr r4, =_ebss
 800dc30:	24041440 	.word	0x24041440

0800dc34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dc34:	e7fe      	b.n	800dc34 <ADC3_IRQHandler>
	...

0800dc38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dc38:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dc3a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dc3c:	4c12      	ldr	r4, [pc, #72]	@ (800dc88 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dc3e:	f000 f85d 	bl	800dcfc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dc42:	f002 f809 	bl	800fc58 <HAL_RCC_GetSysClockFreq>
 800dc46:	4b11      	ldr	r3, [pc, #68]	@ (800dc8c <HAL_Init+0x54>)
 800dc48:	4911      	ldr	r1, [pc, #68]	@ (800dc90 <HAL_Init+0x58>)
 800dc4a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dc4c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dc4e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dc52:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dc56:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dc58:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dc5a:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dc5e:	490d      	ldr	r1, [pc, #52]	@ (800dc94 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dc60:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dc64:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dc66:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800dc6a:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800dc6c:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dc6e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800dc70:	f003 fd84 	bl	801177c <HAL_InitTick>
 800dc74:	b110      	cbz	r0, 800dc7c <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800dc76:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800dc78:	4620      	mov	r0, r4
 800dc7a:	bd10      	pop	{r4, pc}
 800dc7c:	4604      	mov	r4, r0
  HAL_MspInit();
 800dc7e:	f7ff facd 	bl	800d21c <HAL_MspInit>
}
 800dc82:	4620      	mov	r0, r4
 800dc84:	bd10      	pop	{r4, pc}
 800dc86:	bf00      	nop
 800dc88:	24000030 	.word	0x24000030
 800dc8c:	58024400 	.word	0x58024400
 800dc90:	08012ee8 	.word	0x08012ee8
 800dc94:	24000034 	.word	0x24000034

0800dc98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800dc98:	4a03      	ldr	r2, [pc, #12]	@ (800dca8 <HAL_IncTick+0x10>)
 800dc9a:	4b04      	ldr	r3, [pc, #16]	@ (800dcac <HAL_IncTick+0x14>)
 800dc9c:	6811      	ldr	r1, [r2, #0]
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	440b      	add	r3, r1
 800dca2:	6013      	str	r3, [r2, #0]
}
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	240412a8 	.word	0x240412a8
 800dcac:	2400012c 	.word	0x2400012c

0800dcb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800dcb0:	4b01      	ldr	r3, [pc, #4]	@ (800dcb8 <HAL_GetTick+0x8>)
 800dcb2:	6818      	ldr	r0, [r3, #0]
}
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop
 800dcb8:	240412a8 	.word	0x240412a8

0800dcbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800dcc0:	f7ff fff6 	bl	800dcb0 <HAL_GetTick>
 800dcc4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800dcc6:	1c63      	adds	r3, r4, #1
 800dcc8:	d002      	beq.n	800dcd0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800dcca:	4b04      	ldr	r3, [pc, #16]	@ (800dcdc <HAL_Delay+0x20>)
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800dcd0:	f7ff ffee 	bl	800dcb0 <HAL_GetTick>
 800dcd4:	1b40      	subs	r0, r0, r5
 800dcd6:	42a0      	cmp	r0, r4
 800dcd8:	d3fa      	bcc.n	800dcd0 <HAL_Delay+0x14>
  {
  }
}
 800dcda:	bd38      	pop	{r3, r4, r5, pc}
 800dcdc:	2400012c 	.word	0x2400012c

0800dce0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800dce0:	4b01      	ldr	r3, [pc, #4]	@ (800dce8 <HAL_GetREVID+0x8>)
 800dce2:	6818      	ldr	r0, [r3, #0]
}
 800dce4:	0c00      	lsrs	r0, r0, #16
 800dce6:	4770      	bx	lr
 800dce8:	5c001000 	.word	0x5c001000

0800dcec <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800dcec:	4a02      	ldr	r2, [pc, #8]	@ (800dcf8 <HAL_EnableCompensationCell+0xc>)
 800dcee:	6a13      	ldr	r3, [r2, #32]
 800dcf0:	f043 0301 	orr.w	r3, r3, #1
 800dcf4:	6213      	str	r3, [r2, #32]
}
 800dcf6:	4770      	bx	lr
 800dcf8:	58000400 	.word	0x58000400

0800dcfc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dcfc:	4906      	ldr	r1, [pc, #24]	@ (800dd18 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dcfe:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dd02:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800dd04:	4b05      	ldr	r3, [pc, #20]	@ (800dd1c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dd06:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dd08:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dd0c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dd10:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800dd12:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800dd14:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800dd16:	4770      	bx	lr
 800dd18:	e000ed00 	.word	0xe000ed00
 800dd1c:	05fa0000 	.word	0x05fa0000

0800dd20 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dd20:	4b1a      	ldr	r3, [pc, #104]	@ (800dd8c <HAL_NVIC_SetPriority+0x6c>)
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dd28:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800dd2a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dd2e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800dd32:	f1be 0f04 	cmp.w	lr, #4
 800dd36:	bf28      	it	cs
 800dd38:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dd3c:	f1bc 0f06 	cmp.w	ip, #6
 800dd40:	d91a      	bls.n	800dd78 <HAL_NVIC_SetPriority+0x58>
 800dd42:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800dd46:	f04f 33ff 	mov.w	r3, #4294967295
 800dd4a:	fa03 f30c 	lsl.w	r3, r3, ip
 800dd4e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dd52:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800dd56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dd58:	fa03 f30e 	lsl.w	r3, r3, lr
 800dd5c:	ea21 0303 	bic.w	r3, r1, r3
 800dd60:	fa03 f30c 	lsl.w	r3, r3, ip
 800dd64:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd68:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dd6c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800dd6e:	db06      	blt.n	800dd7e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd70:	4a07      	ldr	r2, [pc, #28]	@ (800dd90 <HAL_NVIC_SetPriority+0x70>)
 800dd72:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800dd74:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd78:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dd7a:	4694      	mov	ip, r2
 800dd7c:	e7e9      	b.n	800dd52 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd7e:	f000 000f 	and.w	r0, r0, #15
 800dd82:	4a04      	ldr	r2, [pc, #16]	@ (800dd94 <HAL_NVIC_SetPriority+0x74>)
 800dd84:	5413      	strb	r3, [r2, r0]
 800dd86:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd8a:	bf00      	nop
 800dd8c:	e000ed00 	.word	0xe000ed00
 800dd90:	e000e400 	.word	0xe000e400
 800dd94:	e000ed14 	.word	0xe000ed14

0800dd98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	db07      	blt.n	800ddac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	f000 011f 	and.w	r1, r0, #31
 800dda2:	4a03      	ldr	r2, [pc, #12]	@ (800ddb0 <HAL_NVIC_EnableIRQ+0x18>)
 800dda4:	0940      	lsrs	r0, r0, #5
 800dda6:	408b      	lsls	r3, r1
 800dda8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	e000e100 	.word	0xe000e100

0800ddb4 <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop

0800ddb8 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d035      	beq.n	800de28 <HAL_DMA2D_Init+0x70>
{
 800ddbc:	b538      	push	{r3, r4, r5, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800ddbe:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ddc8:	b34b      	cbz	r3, 800de1e <HAL_DMA2D_Init+0x66>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800ddca:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ddcc:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800ddce:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ddd0:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800ddd4:	69e1      	ldr	r1, [r4, #28]
 800ddd6:	681d      	ldr	r5, [r3, #0]
 800ddd8:	4814      	ldr	r0, [pc, #80]	@ (800de2c <HAL_DMA2D_Init+0x74>)
 800ddda:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800dddc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800ddde:	4028      	ands	r0, r5
 800dde0:	4301      	orrs	r1, r0
 800dde2:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800dde4:	69a1      	ldr	r1, [r4, #24]
 800dde6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800dde8:	430a      	orrs	r2, r1
 800ddea:	4911      	ldr	r1, [pc, #68]	@ (800de30 <HAL_DMA2D_Init+0x78>)
 800ddec:	4001      	ands	r1, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ddee:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800ddf0:	430a      	orrs	r2, r1
 800ddf2:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ddf4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800ddf6:	f36f 010f 	bfc	r1, #0, #16
 800ddfa:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800ddfc:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800de00:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800de02:	0552      	lsls	r2, r2, #21
 800de04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800de06:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800de0a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800de0e:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800de10:	430a      	orrs	r2, r1
 800de12:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800de14:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800de16:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800de18:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 800de1c:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800de1e:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800de22:	f7ff ffc7 	bl	800ddb4 <HAL_DMA2D_MspInit>
 800de26:	e7d0      	b.n	800ddca <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 800de28:	2001      	movs	r0, #1
}
 800de2a:	4770      	bx	lr
 800de2c:	fff8ffbf 	.word	0xfff8ffbf
 800de30:	fffffef8 	.word	0xfffffef8

0800de34 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800de34:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800de36:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800de3a:	2c01      	cmp	r4, #1
 800de3c:	d039      	beq.n	800deb2 <HAL_DMA2D_Start+0x7e>
 800de3e:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800de40:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 800de42:	f880 4060 	strb.w	r4, [r0, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800de46:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800de48:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800de4c:	f880 4061 	strb.w	r4, [r0, #97]	@ 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800de50:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800de54:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800de56:	f5b6 3f40 	cmp.w	r6, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800de5a:	f005 4c40 	and.w	ip, r5, #3221225472	@ 0xc0000000
 800de5e:	ea43 030c 	orr.w	r3, r3, ip
 800de62:	6463      	str	r3, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800de64:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800de66:	d00a      	beq.n	800de7e <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800de68:	f5b6 2f80 	cmp.w	r6, #262144	@ 0x40000
 800de6c:	d024      	beq.n	800deb8 <HAL_DMA2D_Start+0x84>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800de6e:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800de70:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800de72:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800de74:	f043 0301 	orr.w	r3, r3, #1
 800de78:	6023      	str	r3, [r4, #0]
}
 800de7a:	bc70      	pop	{r4, r5, r6}
 800de7c:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800de7e:	6882      	ldr	r2, [r0, #8]
 800de80:	f001 467f 	and.w	r6, r1, #4278190080	@ 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800de84:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800de88:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800de8c:	b2c8      	uxtb	r0, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800de8e:	2a03      	cmp	r2, #3
 800de90:	d81f      	bhi.n	800ded2 <HAL_DMA2D_Start+0x9e>
 800de92:	e8df f002 	tbb	[pc, r2]
 800de96:	1b0c      	.short	0x1b0c
 800de98:	0213      	.short	0x0213
      tmp2 = (tmp2 >> 19U);
 800de9a:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800de9c:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800de9e:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800dea0:	0ff6      	lsrs	r6, r6, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800dea2:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800dea6:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800deaa:	ea43 31c6 	orr.w	r1, r3, r6, lsl #15
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800deae:	63a1      	str	r1, [r4, #56]	@ 0x38
 800deb0:	e7de      	b.n	800de70 <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 800deb2:	2002      	movs	r0, #2
}
 800deb4:	bc70      	pop	{r4, r5, r6}
 800deb6:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800deb8:	6161      	str	r1, [r4, #20]
 800deba:	e7d9      	b.n	800de70 <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 800debc:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 800debe:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800dec0:	02db      	lsls	r3, r3, #11
 800dec2:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800dec6:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 800deca:	e7f0      	b.n	800deae <HAL_DMA2D_Start+0x7a>
      tmp = (tmp3 | tmp2 | tmp4);
 800decc:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800ded0:	e7ed      	b.n	800deae <HAL_DMA2D_Start+0x7a>
      tmp2 = (tmp2 >> 20U);
 800ded2:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800ded4:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800ded6:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800ded8:	0f36      	lsrs	r6, r6, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800deda:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800dede:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800dee2:	ea43 3106 	orr.w	r1, r3, r6, lsl #12
 800dee6:	e7e2      	b.n	800deae <HAL_DMA2D_Start+0x7a>

0800dee8 <HAL_DMA2D_PollForTransfer>:
{
 800dee8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800deea:	2300      	movs	r3, #0
{
 800deec:	b082      	sub	sp, #8
 800deee:	4604      	mov	r4, r0
 800def0:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 800def2:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800def4:	6803      	ldr	r3, [r0, #0]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	07d2      	lsls	r2, r2, #31
 800defa:	d420      	bmi.n	800df3e <HAL_DMA2D_PollForTransfer+0x56>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800defc:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800defe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800df00:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800df02:	0696      	lsls	r6, r2, #26
 800df04:	d40a      	bmi.n	800df1c <HAL_DMA2D_PollForTransfer+0x34>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800df06:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800df08:	2201      	movs	r2, #1
  return HAL_OK;
 800df0a:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800df0c:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800df0e:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
 800df12:	2300      	movs	r3, #0
 800df14:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 800df18:	b002      	add	sp, #8
 800df1a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800df1c:	f7ff fec8 	bl	800dcb0 <HAL_GetTick>
 800df20:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800df22:	1c68      	adds	r0, r5, #1
 800df24:	d17a      	bne.n	800e01c <HAL_DMA2D_PollForTransfer+0x134>
 800df26:	6823      	ldr	r3, [r4, #0]
 800df28:	e005      	b.n	800df36 <HAL_DMA2D_PollForTransfer+0x4e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800df2a:	685a      	ldr	r2, [r3, #4]
 800df2c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800df2e:	9a01      	ldr	r2, [sp, #4]
 800df30:	f012 0f29 	tst.w	r2, #41	@ 0x29
 800df34:	d134      	bne.n	800dfa0 <HAL_DMA2D_PollForTransfer+0xb8>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800df36:	685a      	ldr	r2, [r3, #4]
 800df38:	06d1      	lsls	r1, r2, #27
 800df3a:	d4e4      	bmi.n	800df06 <HAL_DMA2D_PollForTransfer+0x1e>
 800df3c:	e7f5      	b.n	800df2a <HAL_DMA2D_PollForTransfer+0x42>
    tickstart = HAL_GetTick();
 800df3e:	f7ff feb7 	bl	800dcb0 <HAL_GetTick>
 800df42:	1c6b      	adds	r3, r5, #1
 800df44:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800df46:	d146      	bne.n	800dfd6 <HAL_DMA2D_PollForTransfer+0xee>
 800df48:	6823      	ldr	r3, [r4, #0]
 800df4a:	e005      	b.n	800df58 <HAL_DMA2D_PollForTransfer+0x70>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800df4c:	685a      	ldr	r2, [r3, #4]
 800df4e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800df50:	9a01      	ldr	r2, [sp, #4]
 800df52:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800df56:	d10a      	bne.n	800df6e <HAL_DMA2D_PollForTransfer+0x86>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	0795      	lsls	r5, r2, #30
 800df5c:	d5f6      	bpl.n	800df4c <HAL_DMA2D_PollForTransfer+0x64>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800df5e:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800df60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800df62:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800df64:	0691      	lsls	r1, r2, #26
 800df66:	d5ce      	bpl.n	800df06 <HAL_DMA2D_PollForTransfer+0x1e>
    tickstart = HAL_GetTick();
 800df68:	f7ff fea2 	bl	800dcb0 <HAL_GetTick>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800df6c:	e7db      	b.n	800df26 <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800df6e:	9a01      	ldr	r2, [sp, #4]
 800df70:	0690      	lsls	r0, r2, #26
 800df72:	d503      	bpl.n	800df7c <HAL_DMA2D_PollForTransfer+0x94>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800df74:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df76:	f042 0202 	orr.w	r2, r2, #2
 800df7a:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800df7c:	9a01      	ldr	r2, [sp, #4]
 800df7e:	07d1      	lsls	r1, r2, #31
 800df80:	d503      	bpl.n	800df8a <HAL_DMA2D_PollForTransfer+0xa2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800df82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df84:	f042 0201 	orr.w	r2, r2, #1
 800df88:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800df8a:	2121      	movs	r1, #33	@ 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800df8c:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800df8e:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800df90:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 800df94:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma2d);
 800df96:	2300      	movs	r3, #0
 800df98:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 800df9c:	b002      	add	sp, #8
 800df9e:	bd70      	pop	{r4, r5, r6, pc}
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800dfa0:	9a01      	ldr	r2, [sp, #4]
 800dfa2:	0712      	lsls	r2, r2, #28
 800dfa4:	d503      	bpl.n	800dfae <HAL_DMA2D_PollForTransfer+0xc6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800dfa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfa8:	f042 0204 	orr.w	r2, r2, #4
 800dfac:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800dfae:	9a01      	ldr	r2, [sp, #4]
 800dfb0:	0696      	lsls	r6, r2, #26
 800dfb2:	d503      	bpl.n	800dfbc <HAL_DMA2D_PollForTransfer+0xd4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800dfb4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfb6:	f042 0202 	orr.w	r2, r2, #2
 800dfba:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800dfbc:	9a01      	ldr	r2, [sp, #4]
 800dfbe:	07d5      	lsls	r5, r2, #31
 800dfc0:	d503      	bpl.n	800dfca <HAL_DMA2D_PollForTransfer+0xe2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800dfc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfc4:	f042 0201 	orr.w	r2, r2, #1
 800dfc8:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800dfca:	2129      	movs	r1, #41	@ 0x29
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800dfcc:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800dfce:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800dfd0:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 800dfd4:	e7de      	b.n	800df94 <HAL_DMA2D_PollForTransfer+0xac>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800dfd6:	6823      	ldr	r3, [r4, #0]
 800dfd8:	685a      	ldr	r2, [r3, #4]
 800dfda:	0792      	lsls	r2, r2, #30
 800dfdc:	d415      	bmi.n	800e00a <HAL_DMA2D_PollForTransfer+0x122>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800dfde:	685a      	ldr	r2, [r3, #4]
 800dfe0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800dfe2:	9a01      	ldr	r2, [sp, #4]
 800dfe4:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800dfe8:	d1c1      	bne.n	800df6e <HAL_DMA2D_PollForTransfer+0x86>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800dfea:	f7ff fe61 	bl	800dcb0 <HAL_GetTick>
 800dfee:	1b83      	subs	r3, r0, r6
 800dff0:	42ab      	cmp	r3, r5
 800dff2:	d801      	bhi.n	800dff8 <HAL_DMA2D_PollForTransfer+0x110>
 800dff4:	2d00      	cmp	r5, #0
 800dff6:	d1ee      	bne.n	800dfd6 <HAL_DMA2D_PollForTransfer+0xee>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800dff8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800dffa:	2203      	movs	r2, #3
          return HAL_TIMEOUT;
 800dffc:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800dffe:	f043 0320 	orr.w	r3, r3, #32
 800e002:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800e004:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
 800e008:	e783      	b.n	800df12 <HAL_DMA2D_PollForTransfer+0x2a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800e00a:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800e00c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e00e:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800e010:	0692      	lsls	r2, r2, #26
 800e012:	f57f af78 	bpl.w	800df06 <HAL_DMA2D_PollForTransfer+0x1e>
    tickstart = HAL_GetTick();
 800e016:	f7ff fe4b 	bl	800dcb0 <HAL_GetTick>
 800e01a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	685a      	ldr	r2, [r3, #4]
 800e020:	06d0      	lsls	r0, r2, #27
 800e022:	f53f af70 	bmi.w	800df06 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800e02a:	9a01      	ldr	r2, [sp, #4]
 800e02c:	f012 0f29 	tst.w	r2, #41	@ 0x29
 800e030:	d1b6      	bne.n	800dfa0 <HAL_DMA2D_PollForTransfer+0xb8>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e032:	f7ff fe3d 	bl	800dcb0 <HAL_GetTick>
 800e036:	1b83      	subs	r3, r0, r6
 800e038:	42ab      	cmp	r3, r5
 800e03a:	d8dd      	bhi.n	800dff8 <HAL_DMA2D_PollForTransfer+0x110>
 800e03c:	2d00      	cmp	r5, #0
 800e03e:	d1ed      	bne.n	800e01c <HAL_DMA2D_PollForTransfer+0x134>
 800e040:	e7da      	b.n	800dff8 <HAL_DMA2D_PollForTransfer+0x110>
 800e042:	bf00      	nop

0800e044 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800e044:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 800e048:	2a01      	cmp	r2, #1
 800e04a:	d05f      	beq.n	800e10c <HAL_DMA2D_ConfigLayer+0xc8>
 800e04c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e04e:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800e052:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e054:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800e058:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800e05c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 800e05e:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800e060:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 800e064:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800e068:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e06a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800e06c:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800e06e:	0512      	lsls	r2, r2, #20
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800e070:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e072:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800e076:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800e07a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e07c:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800e07e:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e082:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e086:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800e088:	d923      	bls.n	800e0d2 <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800e08a:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800e08e:	b971      	cbnz	r1, 800e0ae <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e090:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e092:	491f      	ldr	r1, [pc, #124]	@ (800e110 <HAL_DMA2D_ConfigLayer+0xcc>)
 800e094:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800e096:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e098:	4311      	orrs	r1, r2
 800e09a:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800e09c:	61a0      	str	r0, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 800e09e:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800e0a0:	2101      	movs	r1, #1
  return HAL_OK;
 800e0a2:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800e0a4:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 800e0a8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 800e0ac:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800e0ae:	2d0b      	cmp	r5, #11
 800e0b0:	d12a      	bne.n	800e108 <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800e0b2:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800e0b4:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800e0b8:	4816      	ldr	r0, [pc, #88]	@ (800e114 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e0ba:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e0be:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e0c0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e0c4:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e0c6:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e0ca:	430a      	orrs	r2, r1
 800e0cc:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e0ce:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800e0d0:	e7e5      	b.n	800e09e <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800e0d2:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 800e0d6:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800e0d8:	b959      	cbnz	r1, 800e0f2 <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e0da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e0dc:	490c      	ldr	r1, [pc, #48]	@ (800e110 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800e0de:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e0e0:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800e0e2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e0e4:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800e0e6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e0ea:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800e0ec:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800e0ee:	62a0      	str	r0, [r4, #40]	@ 0x28
 800e0f0:	e7d5      	b.n	800e09e <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e0f2:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800e0f4:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e0f8:	4905      	ldr	r1, [pc, #20]	@ (800e110 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e0fa:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e0fc:	4029      	ands	r1, r5
 800e0fe:	4311      	orrs	r1, r2
 800e100:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e102:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800e104:	6226      	str	r6, [r4, #32]
 800e106:	e7ca      	b.n	800e09e <HAL_DMA2D_ConfigLayer+0x5a>
 800e108:	4801      	ldr	r0, [pc, #4]	@ (800e110 <HAL_DMA2D_ConfigLayer+0xcc>)
 800e10a:	e7d6      	b.n	800e0ba <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 800e10c:	2002      	movs	r0, #2
}
 800e10e:	4770      	bx	lr
 800e110:	00ccfff0 	.word	0x00ccfff0
 800e114:	00c0fff0 	.word	0x00c0fff0

0800e118 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800e118:	6803      	ldr	r3, [r0, #0]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800e11a:	2201      	movs	r2, #1
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800e11c:	4909      	ldr	r1, [pc, #36]	@ (800e144 <HAL_EXTI_IRQHandler+0x2c>)
{
 800e11e:	b410      	push	{r4}
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800e120:	f003 041f 	and.w	r4, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800e124:	f3c3 4301 	ubfx	r3, r3, #16, #2
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800e128:	011b      	lsls	r3, r3, #4
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800e12a:	40a2      	lsls	r2, r4
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800e12c:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00U)
 800e12e:	4214      	tst	r4, r2
 800e130:	d005      	beq.n	800e13e <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800e132:	6840      	ldr	r0, [r0, #4]
    *regaddr = maskline;
 800e134:	505a      	str	r2, [r3, r1]
    if (hexti->PendingCallback != NULL)
 800e136:	b110      	cbz	r0, 800e13e <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 800e138:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 800e13c:	4700      	bx	r0
}
 800e13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	58000088 	.word	0x58000088

0800e148 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e148:	680b      	ldr	r3, [r1, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f000 81dc 	beq.w	800e508 <HAL_GPIO_Init+0x3c0>
 800e150:	4ab4      	ldr	r2, [pc, #720]	@ (800e424 <HAL_GPIO_Init+0x2dc>)
 800e152:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 800e154:	f04f 0200 	mov.w	r2, #0
{
 800e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e15c:	f04f 0b01 	mov.w	fp, #1
{
 800e160:	b085      	sub	sp, #20
 800e162:	f000 8105 	beq.w	800e370 <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e166:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e16a:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e16c:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 800e170:	9b00      	ldr	r3, [sp, #0]
 800e172:	ea1c 0a03 	ands.w	sl, ip, r3
 800e176:	f000 814b 	beq.w	800e410 <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e17a:	684d      	ldr	r5, [r1, #4]
 800e17c:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e17e:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e180:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e184:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e188:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e18c:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e18e:	f1b8 0f01 	cmp.w	r8, #1
 800e192:	f240 815d 	bls.w	800e450 <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e196:	2f03      	cmp	r7, #3
 800e198:	f040 81cf 	bne.w	800e53a <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e19c:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 800e1a0:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e1a2:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e1a6:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e1aa:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 800e1ae:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e1b0:	f000 812e 	beq.w	800e410 <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1b4:	4e9c      	ldr	r6, [pc, #624]	@ (800e428 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e1b6:	f002 0703 	and.w	r7, r2, #3
 800e1ba:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1bc:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e1c0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1c2:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e1c6:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e1ca:	4b98      	ldr	r3, [pc, #608]	@ (800e42c <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1cc:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 800e1d0:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 800e1d4:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e1d8:	4298      	cmp	r0, r3
 800e1da:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1de:	f004 0402 	and.w	r4, r4, #2
 800e1e2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800e1e6:	9403      	str	r4, [sp, #12]
 800e1e8:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800e1ea:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e1ec:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e1f0:	f000 8178 	beq.w	800e4e4 <HAL_GPIO_Init+0x39c>
 800e1f4:	4b8e      	ldr	r3, [pc, #568]	@ (800e430 <HAL_GPIO_Init+0x2e8>)
 800e1f6:	4298      	cmp	r0, r3
 800e1f8:	f000 80de 	beq.w	800e3b8 <HAL_GPIO_Init+0x270>
 800e1fc:	f8df c234 	ldr.w	ip, [pc, #564]	@ 800e434 <HAL_GPIO_Init+0x2ec>
 800e200:	4560      	cmp	r0, ip
 800e202:	f000 817b 	beq.w	800e4fc <HAL_GPIO_Init+0x3b4>
 800e206:	f8df c230 	ldr.w	ip, [pc, #560]	@ 800e438 <HAL_GPIO_Init+0x2f0>
 800e20a:	4560      	cmp	r0, ip
 800e20c:	f000 817d 	beq.w	800e50a <HAL_GPIO_Init+0x3c2>
 800e210:	f8df c228 	ldr.w	ip, [pc, #552]	@ 800e43c <HAL_GPIO_Init+0x2f4>
 800e214:	4560      	cmp	r0, ip
 800e216:	f000 816b 	beq.w	800e4f0 <HAL_GPIO_Init+0x3a8>
 800e21a:	f8df c224 	ldr.w	ip, [pc, #548]	@ 800e440 <HAL_GPIO_Init+0x2f8>
 800e21e:	4560      	cmp	r0, ip
 800e220:	f000 8179 	beq.w	800e516 <HAL_GPIO_Init+0x3ce>
 800e224:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 800e444 <HAL_GPIO_Init+0x2fc>
 800e228:	4560      	cmp	r0, ip
 800e22a:	f000 817a 	beq.w	800e522 <HAL_GPIO_Init+0x3da>
 800e22e:	f8df c218 	ldr.w	ip, [pc, #536]	@ 800e448 <HAL_GPIO_Init+0x300>
 800e232:	4560      	cmp	r0, ip
 800e234:	f000 817b 	beq.w	800e52e <HAL_GPIO_Init+0x3e6>
 800e238:	f8df c210 	ldr.w	ip, [pc, #528]	@ 800e44c <HAL_GPIO_Init+0x304>
 800e23c:	4560      	cmp	r0, ip
 800e23e:	bf0c      	ite	eq
 800e240:	f04f 0c09 	moveq.w	ip, #9
 800e244:	f04f 0c0a 	movne.w	ip, #10
 800e248:	fa0c f707 	lsl.w	r7, ip, r7
 800e24c:	433c      	orrs	r4, r7
 800e24e:	e0b8      	b.n	800e3c2 <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 800e250:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e254:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e256:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e258:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e25c:	fa06 f807 	lsl.w	r8, r6, r7
 800e260:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800e264:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e268:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800e26c:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e270:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e274:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e278:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 800e27c:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 800e280:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e284:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e286:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e28a:	fa06 fe07 	lsl.w	lr, r6, r7
 800e28e:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 800e292:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e296:	d117      	bne.n	800e2c8 <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e298:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e29c:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 800e29e:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e2a2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800e2a6:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e2aa:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 800e2ae:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e2b2:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e2b4:	260f      	movs	r6, #15
 800e2b6:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e2ba:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e2bc:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e2c0:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 800e2c4:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e2c8:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 800e2ca:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e2cc:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e2d0:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e2d4:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800e2d8:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e2da:	d045      	beq.n	800e368 <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e2dc:	4f52      	ldr	r7, [pc, #328]	@ (800e428 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e2de:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e2e0:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 800e2e4:	f044 0402 	orr.w	r4, r4, #2
 800e2e8:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 800e2ec:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 800e2f0:	f022 0703 	bic.w	r7, r2, #3
 800e2f4:	f004 0402 	and.w	r4, r4, #2
 800e2f8:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 800e2fc:	9403      	str	r4, [sp, #12]
 800e2fe:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800e302:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e304:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800e308:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e30c:	00a4      	lsls	r4, r4, #2
 800e30e:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e312:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e314:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e318:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 800e31a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 800e31e:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 800e322:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e324:	f100 80d2 	bmi.w	800e4cc <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 800e328:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800e32a:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 800e32e:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 800e330:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e332:	02ae      	lsls	r6, r5, #10
 800e334:	f100 80d3 	bmi.w	800e4de <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 800e338:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800e33a:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 800e33e:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e340:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e344:	03ae      	lsls	r6, r5, #14
 800e346:	f100 80c7 	bmi.w	800e4d8 <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 800e34a:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e34c:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e350:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800e352:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800e356:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e35a:	f100 80ba 	bmi.w	800e4d2 <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 800e35e:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e360:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800e364:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 800e368:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e36a:	fa33 f402 	lsrs.w	r4, r3, r2
 800e36e:	d055      	beq.n	800e41c <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e370:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 800e374:	ea13 0c0e 	ands.w	ip, r3, lr
 800e378:	d0f6      	beq.n	800e368 <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e37a:	684d      	ldr	r5, [r1, #4]
 800e37c:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e37e:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e380:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e384:	fa06 f807 	lsl.w	r8, r6, r7
 800e388:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e38c:	f104 38ff 	add.w	r8, r4, #4294967295
 800e390:	f1b8 0f01 	cmp.w	r8, #1
 800e394:	f67f af5c 	bls.w	800e250 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e398:	2c03      	cmp	r4, #3
 800e39a:	d095      	beq.n	800e2c8 <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 800e39c:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800e424 <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e3a0:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 800e3a2:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e3a6:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e3aa:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e3ae:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 800e3b2:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e3b6:	e787      	b.n	800e2c8 <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e3b8:	f04f 0c02 	mov.w	ip, #2
 800e3bc:	fa0c f707 	lsl.w	r7, ip, r7
 800e3c0:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e3c2:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e3c4:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 800e3c6:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800e3ca:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 800e3ce:	bf4c      	ite	mi
 800e3d0:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 800e3d4:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e3d6:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 800e3d8:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 800e3dc:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 800e3e0:	bf54      	ite	pl
 800e3e2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800e3e4:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e3e8:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 800e3ea:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800e3ee:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 800e3f2:	bf54      	ite	pl
 800e3f4:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800e3f6:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e3fa:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800e3fc:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800e400:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 800e404:	bf54      	ite	pl
 800e406:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800e408:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 800e40c:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 800e410:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e412:	9b00      	ldr	r3, [sp, #0]
 800e414:	fa33 f402 	lsrs.w	r4, r3, r2
 800e418:	f47f aea8 	bne.w	800e16c <HAL_GPIO_Init+0x24>
  }
}
 800e41c:	b005      	add	sp, #20
 800e41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e422:	bf00      	nop
 800e424:	58020000 	.word	0x58020000
 800e428:	58024400 	.word	0x58024400
 800e42c:	58020400 	.word	0x58020400
 800e430:	58020800 	.word	0x58020800
 800e434:	58020c00 	.word	0x58020c00
 800e438:	58021000 	.word	0x58021000
 800e43c:	58021400 	.word	0x58021400
 800e440:	58021800 	.word	0x58021800
 800e444:	58021c00 	.word	0x58021c00
 800e448:	58022000 	.word	0x58022000
 800e44c:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 800e450:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e454:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e456:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e458:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e45c:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e460:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e462:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800e466:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e46a:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800e46e:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e472:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e476:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e47a:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 800e47e:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e482:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 800e486:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e48a:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e48e:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800e492:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e496:	f47f ae81 	bne.w	800e19c <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e49a:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e49e:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 800e4a0:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e4a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800e4a8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e4ac:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 800e4b0:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e4b4:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e4b6:	230f      	movs	r3, #15
 800e4b8:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e4bc:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e4be:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e4c2:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 800e4c6:	f8c8 c020 	str.w	ip, [r8, #32]
 800e4ca:	e667      	b.n	800e19c <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 800e4cc:	ea44 040c 	orr.w	r4, r4, ip
 800e4d0:	e72b      	b.n	800e32a <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 800e4d2:	ea44 040c 	orr.w	r4, r4, ip
 800e4d6:	e743      	b.n	800e360 <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 800e4d8:	ea4c 0404 	orr.w	r4, ip, r4
 800e4dc:	e736      	b.n	800e34c <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 800e4de:	ea44 040c 	orr.w	r4, r4, ip
 800e4e2:	e72a      	b.n	800e33a <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e4e4:	f04f 0c01 	mov.w	ip, #1
 800e4e8:	fa0c f707 	lsl.w	r7, ip, r7
 800e4ec:	433c      	orrs	r4, r7
 800e4ee:	e768      	b.n	800e3c2 <HAL_GPIO_Init+0x27a>
 800e4f0:	f04f 0c05 	mov.w	ip, #5
 800e4f4:	fa0c f707 	lsl.w	r7, ip, r7
 800e4f8:	433c      	orrs	r4, r7
 800e4fa:	e762      	b.n	800e3c2 <HAL_GPIO_Init+0x27a>
 800e4fc:	f04f 0c03 	mov.w	ip, #3
 800e500:	fa0c f707 	lsl.w	r7, ip, r7
 800e504:	433c      	orrs	r4, r7
 800e506:	e75c      	b.n	800e3c2 <HAL_GPIO_Init+0x27a>
 800e508:	4770      	bx	lr
 800e50a:	f04f 0c04 	mov.w	ip, #4
 800e50e:	fa0c f707 	lsl.w	r7, ip, r7
 800e512:	433c      	orrs	r4, r7
 800e514:	e755      	b.n	800e3c2 <HAL_GPIO_Init+0x27a>
 800e516:	f04f 0c06 	mov.w	ip, #6
 800e51a:	fa0c f707 	lsl.w	r7, ip, r7
 800e51e:	433c      	orrs	r4, r7
 800e520:	e74f      	b.n	800e3c2 <HAL_GPIO_Init+0x27a>
 800e522:	f04f 0c07 	mov.w	ip, #7
 800e526:	fa0c f707 	lsl.w	r7, ip, r7
 800e52a:	433c      	orrs	r4, r7
 800e52c:	e749      	b.n	800e3c2 <HAL_GPIO_Init+0x27a>
 800e52e:	f04f 0c08 	mov.w	ip, #8
 800e532:	fa0c f707 	lsl.w	r7, ip, r7
 800e536:	433c      	orrs	r4, r7
 800e538:	e743      	b.n	800e3c2 <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 800e53a:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e53e:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e540:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e544:	fa03 fc04 	lsl.w	ip, r3, r4
 800e548:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800e54c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e550:	e624      	b.n	800e19c <HAL_GPIO_Init+0x54>
 800e552:	bf00      	nop

0800e554 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800e554:	2900      	cmp	r1, #0
 800e556:	f000 810c 	beq.w	800e772 <HAL_GPIO_DeInit+0x21e>
 800e55a:	4b8b      	ldr	r3, [pc, #556]	@ (800e788 <HAL_GPIO_DeInit+0x234>)
 800e55c:	4298      	cmp	r0, r3
{
 800e55e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e562:	f000 809a 	beq.w	800e69a <HAL_GPIO_DeInit+0x146>
  uint32_t position = 0x00U;
 800e566:	2300      	movs	r3, #0
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e568:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e56c:	f04f 0a03 	mov.w	sl, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800e570:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
    iocurrent = GPIO_Pin & (1UL << position) ;
 800e574:	2201      	movs	r2, #1
 800e576:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800e578:	ea12 0e01 	ands.w	lr, r2, r1
 800e57c:	d077      	beq.n	800e66e <HAL_GPIO_DeInit+0x11a>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800e57e:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e582:	f003 0403 	and.w	r4, r3, #3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e586:	4f81      	ldr	r7, [pc, #516]	@ (800e78c <HAL_GPIO_DeInit+0x238>)
 800e588:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e58c:	00a4      	lsls	r4, r4, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e58e:	42b8      	cmp	r0, r7
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e590:	fa09 f804 	lsl.w	r8, r9, r4
      tmp = SYSCFG->EXTICR[position >> 2U];
 800e594:	f8d5 c408 	ldr.w	ip, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e598:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800e59c:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e5a0:	d027      	beq.n	800e5f2 <HAL_GPIO_DeInit+0x9e>
 800e5a2:	4f7b      	ldr	r7, [pc, #492]	@ (800e790 <HAL_GPIO_DeInit+0x23c>)
 800e5a4:	42b8      	cmp	r0, r7
 800e5a6:	d06e      	beq.n	800e686 <HAL_GPIO_DeInit+0x132>
 800e5a8:	4f7a      	ldr	r7, [pc, #488]	@ (800e794 <HAL_GPIO_DeInit+0x240>)
 800e5aa:	42b8      	cmp	r0, r7
 800e5ac:	d070      	beq.n	800e690 <HAL_GPIO_DeInit+0x13c>
 800e5ae:	4f7a      	ldr	r7, [pc, #488]	@ (800e798 <HAL_GPIO_DeInit+0x244>)
 800e5b0:	42b8      	cmp	r0, r7
 800e5b2:	d063      	beq.n	800e67c <HAL_GPIO_DeInit+0x128>
 800e5b4:	f8df b1e8 	ldr.w	fp, [pc, #488]	@ 800e7a0 <HAL_GPIO_DeInit+0x24c>
 800e5b8:	4558      	cmp	r0, fp
 800e5ba:	f000 80d5 	beq.w	800e768 <HAL_GPIO_DeInit+0x214>
 800e5be:	f8df b1e4 	ldr.w	fp, [pc, #484]	@ 800e7a4 <HAL_GPIO_DeInit+0x250>
 800e5c2:	4558      	cmp	r0, fp
 800e5c4:	f000 80d6 	beq.w	800e774 <HAL_GPIO_DeInit+0x220>
 800e5c8:	f8df b1dc 	ldr.w	fp, [pc, #476]	@ 800e7a8 <HAL_GPIO_DeInit+0x254>
 800e5cc:	4558      	cmp	r0, fp
 800e5ce:	f000 80c6 	beq.w	800e75e <HAL_GPIO_DeInit+0x20a>
 800e5d2:	f8df b1d8 	ldr.w	fp, [pc, #472]	@ 800e7ac <HAL_GPIO_DeInit+0x258>
 800e5d6:	4558      	cmp	r0, fp
 800e5d8:	f000 80d1 	beq.w	800e77e <HAL_GPIO_DeInit+0x22a>
 800e5dc:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 800e7b0 <HAL_GPIO_DeInit+0x25c>
 800e5e0:	4558      	cmp	r0, fp
 800e5e2:	bf0c      	ite	eq
 800e5e4:	f04f 0b09 	moveq.w	fp, #9
 800e5e8:	f04f 0b0a 	movne.w	fp, #10
 800e5ec:	fa0b f404 	lsl.w	r4, fp, r4
 800e5f0:	e002      	b.n	800e5f8 <HAL_GPIO_DeInit+0xa4>
 800e5f2:	2701      	movs	r7, #1
 800e5f4:	fa07 f404 	lsl.w	r4, r7, r4
 800e5f8:	45a4      	cmp	ip, r4
 800e5fa:	d117      	bne.n	800e62c <HAL_GPIO_DeInit+0xd8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800e5fc:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
 800e600:	ea24 040e 	bic.w	r4, r4, lr
 800e604:	f8c6 4080 	str.w	r4, [r6, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800e608:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
 800e60c:	ea24 040e 	bic.w	r4, r4, lr
 800e610:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800e614:	6874      	ldr	r4, [r6, #4]
 800e616:	ea24 040e 	bic.w	r4, r4, lr
 800e61a:	6074      	str	r4, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800e61c:	6834      	ldr	r4, [r6, #0]
 800e61e:	ea24 040e 	bic.w	r4, r4, lr
 800e622:	6034      	str	r4, [r6, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800e624:	68ac      	ldr	r4, [r5, #8]
 800e626:	ea24 0408 	bic.w	r4, r4, r8
 800e62a:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e62c:	005d      	lsls	r5, r3, #1
 800e62e:	6804      	ldr	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e630:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e634:	fa0a f505 	lsl.w	r5, sl, r5
 800e638:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800e63c:	432c      	orrs	r4, r5
 800e63e:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e640:	f003 0407 	and.w	r4, r3, #7
 800e644:	f8dc e020 	ldr.w	lr, [ip, #32]
 800e648:	00a4      	lsls	r4, r4, #2
 800e64a:	fa09 f404 	lsl.w	r4, r9, r4
 800e64e:	ea2e 0404 	bic.w	r4, lr, r4
 800e652:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e656:	68c4      	ldr	r4, [r0, #12]
 800e658:	ea24 0405 	bic.w	r4, r4, r5
 800e65c:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800e65e:	6844      	ldr	r4, [r0, #4]
 800e660:	ea24 0202 	bic.w	r2, r4, r2
 800e664:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e666:	6882      	ldr	r2, [r0, #8]
 800e668:	ea22 0205 	bic.w	r2, r2, r5
 800e66c:	6082      	str	r2, [r0, #8]
    }

    position++;
 800e66e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800e670:	fa31 f203 	lsrs.w	r2, r1, r3
 800e674:	f47f af7e 	bne.w	800e574 <HAL_GPIO_DeInit+0x20>
  }
}
 800e678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e67c:	f04f 0b04 	mov.w	fp, #4
 800e680:	fa0b f404 	lsl.w	r4, fp, r4
 800e684:	e7b8      	b.n	800e5f8 <HAL_GPIO_DeInit+0xa4>
 800e686:	f04f 0b02 	mov.w	fp, #2
 800e68a:	fa0b f404 	lsl.w	r4, fp, r4
 800e68e:	e7b3      	b.n	800e5f8 <HAL_GPIO_DeInit+0xa4>
 800e690:	f04f 0b03 	mov.w	fp, #3
 800e694:	fa0b f404 	lsl.w	r4, fp, r4
 800e698:	e7ae      	b.n	800e5f8 <HAL_GPIO_DeInit+0xa4>
  uint32_t position = 0x00U;
 800e69a:	2200      	movs	r2, #0
    iocurrent = GPIO_Pin & (1UL << position) ;
 800e69c:	f04f 0c01 	mov.w	ip, #1
 800e6a0:	4f3e      	ldr	r7, [pc, #248]	@ (800e79c <HAL_GPIO_DeInit+0x248>)
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e6a2:	250f      	movs	r5, #15
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800e6a4:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e6a8:	f04f 0e03 	mov.w	lr, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e6ac:	f002 0303 	and.w	r3, r2, #3
    iocurrent = GPIO_Pin & (1UL << position) ;
 800e6b0:	fa0c f402 	lsl.w	r4, ip, r2
    if (iocurrent != 0x00U)
 800e6b4:	f022 0803 	bic.w	r8, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e6b8:	009b      	lsls	r3, r3, #2
    if (iocurrent != 0x00U)
 800e6ba:	ea11 0904 	ands.w	r9, r1, r4
 800e6be:	44b8      	add	r8, r7
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e6c0:	fa05 f303 	lsl.w	r3, r5, r3
    if (iocurrent != 0x00U)
 800e6c4:	d045      	beq.n	800e752 <HAL_GPIO_DeInit+0x1fe>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800e6c6:	f8d8 a008 	ldr.w	sl, [r8, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e6ca:	ea13 0f0a 	tst.w	r3, sl
 800e6ce:	d11d      	bne.n	800e70c <HAL_GPIO_DeInit+0x1b8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800e6d0:	f8d6 a080 	ldr.w	sl, [r6, #128]	@ 0x80
 800e6d4:	ea2a 0a09 	bic.w	sl, sl, r9
 800e6d8:	f8c6 a080 	str.w	sl, [r6, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800e6dc:	f8d6 a084 	ldr.w	sl, [r6, #132]	@ 0x84
 800e6e0:	ea2a 0a09 	bic.w	sl, sl, r9
 800e6e4:	f8c6 a084 	str.w	sl, [r6, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800e6e8:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800e6ec:	ea2a 0a09 	bic.w	sl, sl, r9
 800e6f0:	f8c6 a004 	str.w	sl, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800e6f4:	f8d6 a000 	ldr.w	sl, [r6]
 800e6f8:	ea2a 0909 	bic.w	r9, sl, r9
 800e6fc:	f8c6 9000 	str.w	r9, [r6]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800e700:	f8d8 9008 	ldr.w	r9, [r8, #8]
 800e704:	ea29 0303 	bic.w	r3, r9, r3
 800e708:	f8c8 3008 	str.w	r3, [r8, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e70c:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800e710:	6803      	ldr	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e712:	ea4f 09d2 	mov.w	r9, r2, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e716:	fa0e f808 	lsl.w	r8, lr, r8
 800e71a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800e71e:	ea43 0308 	orr.w	r3, r3, r8
 800e722:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e724:	f002 0307 	and.w	r3, r2, #7
 800e728:	f8d9 a020 	ldr.w	sl, [r9, #32]
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	fa05 f303 	lsl.w	r3, r5, r3
 800e732:	ea2a 0303 	bic.w	r3, sl, r3
 800e736:	f8c9 3020 	str.w	r3, [r9, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e73a:	68c3      	ldr	r3, [r0, #12]
 800e73c:	ea23 0308 	bic.w	r3, r3, r8
 800e740:	60c3      	str	r3, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800e742:	6843      	ldr	r3, [r0, #4]
 800e744:	ea23 0304 	bic.w	r3, r3, r4
 800e748:	6043      	str	r3, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e74a:	6883      	ldr	r3, [r0, #8]
 800e74c:	ea23 0308 	bic.w	r3, r3, r8
 800e750:	6083      	str	r3, [r0, #8]
    position++;
 800e752:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800e754:	fa31 f302 	lsrs.w	r3, r1, r2
 800e758:	d1a8      	bne.n	800e6ac <HAL_GPIO_DeInit+0x158>
}
 800e75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e75e:	f04f 0b07 	mov.w	fp, #7
 800e762:	fa0b f404 	lsl.w	r4, fp, r4
 800e766:	e747      	b.n	800e5f8 <HAL_GPIO_DeInit+0xa4>
 800e768:	f04f 0b05 	mov.w	fp, #5
 800e76c:	fa0b f404 	lsl.w	r4, fp, r4
 800e770:	e742      	b.n	800e5f8 <HAL_GPIO_DeInit+0xa4>
 800e772:	4770      	bx	lr
 800e774:	f04f 0b06 	mov.w	fp, #6
 800e778:	fa0b f404 	lsl.w	r4, fp, r4
 800e77c:	e73c      	b.n	800e5f8 <HAL_GPIO_DeInit+0xa4>
 800e77e:	f04f 0b08 	mov.w	fp, #8
 800e782:	fa0b f404 	lsl.w	r4, fp, r4
 800e786:	e737      	b.n	800e5f8 <HAL_GPIO_DeInit+0xa4>
 800e788:	58020000 	.word	0x58020000
 800e78c:	58020400 	.word	0x58020400
 800e790:	58020800 	.word	0x58020800
 800e794:	58020c00 	.word	0x58020c00
 800e798:	58021000 	.word	0x58021000
 800e79c:	58000400 	.word	0x58000400
 800e7a0:	58021400 	.word	0x58021400
 800e7a4:	58021800 	.word	0x58021800
 800e7a8:	58021c00 	.word	0x58021c00
 800e7ac:	58022000 	.word	0x58022000
 800e7b0:	58022400 	.word	0x58022400

0800e7b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e7b4:	b902      	cbnz	r2, 800e7b8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e7b6:	0409      	lsls	r1, r1, #16
 800e7b8:	6181      	str	r1, [r0, #24]
  }
}
 800e7ba:	4770      	bx	lr

0800e7bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e7c0:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e7c2:	2710      	movs	r7, #16
{
 800e7c4:	4605      	mov	r5, r0
 800e7c6:	460e      	mov	r6, r1
 800e7c8:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e7ca:	699a      	ldr	r2, [r3, #24]
 800e7cc:	f012 0202 	ands.w	r2, r2, #2
 800e7d0:	d168      	bne.n	800e8a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe8>
  uint32_t itflag   = hi2c->Instance->ISR;
 800e7d2:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e7d4:	f011 0c10 	ands.w	ip, r1, #16
 800e7d8:	d062      	beq.n	800e8a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e7da:	1c74      	adds	r4, r6, #1
 800e7dc:	61df      	str	r7, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e7de:	d166      	bne.n	800e8ae <I2C_WaitOnTXISFlagUntilTimeout+0xf2>
 800e7e0:	699c      	ldr	r4, [r3, #24]
 800e7e2:	f014 0420 	ands.w	r4, r4, #32
 800e7e6:	d160      	bne.n	800e8aa <I2C_WaitOnTXISFlagUntilTimeout+0xee>
 800e7e8:	699a      	ldr	r2, [r3, #24]
 800e7ea:	0691      	lsls	r1, r2, #26
 800e7ec:	d5fc      	bpl.n	800e7e8 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e7ee:	2220      	movs	r2, #32
 800e7f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e7f2:	f044 0c04 	orr.w	ip, r4, #4

    status = HAL_ERROR;
 800e7f6:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e7f8:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e7fa:	05d0      	lsls	r0, r2, #23
 800e7fc:	d532      	bpl.n	800e864 <I2C_WaitOnTXISFlagUntilTimeout+0xa8>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e7fe:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e802:	0554      	lsls	r4, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800e804:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e808:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e80a:	d504      	bpl.n	800e816 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e80c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800e810:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e814:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e816:	0596      	lsls	r6, r2, #22
 800e818:	d504      	bpl.n	800e824 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e81a:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800e81e:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e822:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e824:	699a      	ldr	r2, [r3, #24]
 800e826:	0790      	lsls	r0, r2, #30
 800e828:	d501      	bpl.n	800e82e <I2C_WaitOnTXISFlagUntilTimeout+0x72>
    hi2c->Instance->TXDR = 0x00U;
 800e82a:	2200      	movs	r2, #0
 800e82c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e82e:	699a      	ldr	r2, [r3, #24]
 800e830:	07d1      	lsls	r1, r2, #31
 800e832:	d403      	bmi.n	800e83c <I2C_WaitOnTXISFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e834:	699a      	ldr	r2, [r3, #24]
 800e836:	f042 0201 	orr.w	r2, r2, #1
 800e83a:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e83c:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
 800e83e:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 800e840:	4c38      	ldr	r4, [pc, #224]	@ (800e924 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e842:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800e844:	4022      	ands	r2, r4
 800e846:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800e848:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800e84a:	ea43 030c 	orr.w	r3, r3, ip
 800e84e:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e850:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e854:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800e858:	2300      	movs	r3, #0
      return HAL_ERROR;
 800e85a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800e85c:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
 800e860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e864:	0550      	lsls	r0, r2, #21
 800e866:	d4d1      	bmi.n	800e80c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e868:	0594      	lsls	r4, r2, #22
 800e86a:	d4d6      	bmi.n	800e81a <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
  if (status != HAL_OK)
 800e86c:	2900      	cmp	r1, #0
 800e86e:	d1d9      	bne.n	800e824 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    if (Timeout != HAL_MAX_DELAY)
 800e870:	1c72      	adds	r2, r6, #1
 800e872:	d0aa      	beq.n	800e7ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e874:	f7ff fa1c 	bl	800dcb0 <HAL_GetTick>
 800e878:	eba0 0308 	sub.w	r3, r0, r8
 800e87c:	42b3      	cmp	r3, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e87e:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e880:	d801      	bhi.n	800e886 <I2C_WaitOnTXISFlagUntilTimeout+0xca>
 800e882:	2e00      	cmp	r6, #0
 800e884:	d1a1      	bne.n	800e7ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e886:	699a      	ldr	r2, [r3, #24]
 800e888:	f012 0202 	ands.w	r2, r2, #2
 800e88c:	d19d      	bne.n	800e7ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e88e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e890:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e892:	430b      	orrs	r3, r1
 800e894:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e896:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e89a:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          return HAL_ERROR;
 800e89e:	e7db      	b.n	800e858 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
  HAL_StatusTypeDef status = HAL_OK;
 800e8a0:	4661      	mov	r1, ip
 800e8a2:	e7a9      	b.n	800e7f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
  return HAL_OK;
 800e8a4:	2000      	movs	r0, #0
}
 800e8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e8aa:	4614      	mov	r4, r2
 800e8ac:	e79f      	b.n	800e7ee <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8ae:	4614      	mov	r4, r2
 800e8b0:	46c1      	mov	r9, r8
 800e8b2:	4692      	mov	sl, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e8b4:	699a      	ldr	r2, [r3, #24]
 800e8b6:	0692      	lsls	r2, r2, #26
 800e8b8:	d40e      	bmi.n	800e8d8 <I2C_WaitOnTXISFlagUntilTimeout+0x11c>
 800e8ba:	f1ba 0f00 	cmp.w	sl, #0
 800e8be:	d198      	bne.n	800e7f2 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e8c0:	f7ff f9f6 	bl	800dcb0 <HAL_GetTick>
 800e8c4:	eba0 0309 	sub.w	r3, r0, r9
 800e8c8:	429e      	cmp	r6, r3
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e8ca:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e8cc:	d308      	bcc.n	800e8e0 <I2C_WaitOnTXISFlagUntilTimeout+0x124>
 800e8ce:	b13e      	cbz	r6, 800e8e0 <I2C_WaitOnTXISFlagUntilTimeout+0x124>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e8d0:	699a      	ldr	r2, [r3, #24]
 800e8d2:	0690      	lsls	r0, r2, #26
 800e8d4:	d5f4      	bpl.n	800e8c0 <I2C_WaitOnTXISFlagUntilTimeout+0x104>
 800e8d6:	e78a      	b.n	800e7ee <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    if (status == HAL_OK)
 800e8d8:	f1ba 0f00 	cmp.w	sl, #0
 800e8dc:	d189      	bne.n	800e7f2 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800e8de:	e786      	b.n	800e7ee <I2C_WaitOnTXISFlagUntilTimeout+0x32>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e8e0:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800e8e2:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e8e6:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800e8e8:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e8ea:	0409      	lsls	r1, r1, #16
 800e8ec:	d50b      	bpl.n	800e906 <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
              (tmp1 != I2C_CR2_STOP) && \
 800e8ee:	0441      	lsls	r1, r0, #17
 800e8f0:	d409      	bmi.n	800e906 <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
 800e8f2:	2a20      	cmp	r2, #32
 800e8f4:	d007      	beq.n	800e906 <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e8f6:	685a      	ldr	r2, [r3, #4]
 800e8f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e8fc:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800e8fe:	f7ff f9d7 	bl	800dcb0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e902:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800e904:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e906:	699a      	ldr	r2, [r3, #24]
 800e908:	0690      	lsls	r0, r2, #26
 800e90a:	d4d3      	bmi.n	800e8b4 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e90c:	f7ff f9d0 	bl	800dcb0 <HAL_GetTick>
 800e910:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e914:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e916:	2819      	cmp	r0, #25
 800e918:	d9f5      	bls.n	800e906 <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800e91a:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800e91c:	f04f 0a01 	mov.w	sl, #1
 800e920:	e7c8      	b.n	800e8b4 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
 800e922:	bf00      	nop
 800e924:	fe00e800 	.word	0xfe00e800

0800e928 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e928:	6803      	ldr	r3, [r0, #0]
{
 800e92a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e92e:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e930:	699a      	ldr	r2, [r3, #24]
 800e932:	0695      	lsls	r5, r2, #26
 800e934:	d461      	bmi.n	800e9fa <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
 800e936:	4605      	mov	r5, r0
 800e938:	460e      	mov	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e93a:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 800e93e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e940:	f012 0c10 	ands.w	ip, r2, #16
 800e944:	d05c      	beq.n	800ea00 <I2C_WaitOnSTOPFlagUntilTimeout+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e946:	1c74      	adds	r4, r6, #1
 800e948:	f8c3 801c 	str.w	r8, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e94c:	d165      	bne.n	800ea1a <I2C_WaitOnSTOPFlagUntilTimeout+0xf2>
 800e94e:	699c      	ldr	r4, [r3, #24]
 800e950:	f014 0420 	ands.w	r4, r4, #32
 800e954:	d15f      	bne.n	800ea16 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
 800e956:	699a      	ldr	r2, [r3, #24]
 800e958:	0691      	lsls	r1, r2, #26
 800e95a:	d5fc      	bpl.n	800e956 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e95c:	2220      	movs	r2, #32
 800e95e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800e960:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 800e964:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800e966:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e968:	05d0      	lsls	r0, r2, #23
 800e96a:	d532      	bpl.n	800e9d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e96c:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e970:	0554      	lsls	r4, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800e972:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e976:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e978:	d504      	bpl.n	800e984 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e97a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800e97e:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e982:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e984:	0596      	lsls	r6, r2, #22
 800e986:	d504      	bpl.n	800e992 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e988:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800e98c:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e990:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e992:	699a      	ldr	r2, [r3, #24]
 800e994:	0790      	lsls	r0, r2, #30
 800e996:	d501      	bpl.n	800e99c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    hi2c->Instance->TXDR = 0x00U;
 800e998:	2200      	movs	r2, #0
 800e99a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e99c:	699a      	ldr	r2, [r3, #24]
 800e99e:	07d1      	lsls	r1, r2, #31
 800e9a0:	d403      	bmi.n	800e9aa <I2C_WaitOnSTOPFlagUntilTimeout+0x82>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e9a2:	699a      	ldr	r2, [r3, #24]
 800e9a4:	f042 0201 	orr.w	r2, r2, #1
 800e9a8:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800e9aa:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e9ac:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 800e9ae:	4c38      	ldr	r4, [pc, #224]	@ (800ea90 <I2C_WaitOnSTOPFlagUntilTimeout+0x168>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e9b0:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800e9b2:	4022      	ands	r2, r4
 800e9b4:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800e9b6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800e9b8:	ea43 030c 	orr.w	r3, r3, ip
 800e9bc:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e9be:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e9c2:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800e9c6:	2300      	movs	r3, #0
      return HAL_ERROR;
 800e9c8:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 800e9ca:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
 800e9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e9d2:	0550      	lsls	r0, r2, #21
 800e9d4:	d4d1      	bmi.n	800e97a <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e9d6:	0594      	lsls	r4, r2, #22
 800e9d8:	d4d6      	bmi.n	800e988 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  if (status != HAL_OK)
 800e9da:	2900      	cmp	r1, #0
 800e9dc:	d1d9      	bne.n	800e992 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9de:	f7ff f967 	bl	800dcb0 <HAL_GetTick>
 800e9e2:	1bc0      	subs	r0, r0, r7
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e9e4:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9e6:	42b0      	cmp	r0, r6
 800e9e8:	d800      	bhi.n	800e9ec <I2C_WaitOnSTOPFlagUntilTimeout+0xc4>
 800e9ea:	b91e      	cbnz	r6, 800e9f4 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e9ec:	699a      	ldr	r2, [r3, #24]
 800e9ee:	f012 0220 	ands.w	r2, r2, #32
 800e9f2:	d007      	beq.n	800ea04 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e9f4:	699a      	ldr	r2, [r3, #24]
 800e9f6:	0692      	lsls	r2, r2, #26
 800e9f8:	d5a1      	bpl.n	800e93e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800e9fa:	2000      	movs	r0, #0
}
 800e9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800ea00:	4661      	mov	r1, ip
 800ea02:	e7b0      	b.n	800e966 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea04:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ea06:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea08:	430b      	orrs	r3, r1
 800ea0a:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ea0c:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea10:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 800ea14:	e7d7      	b.n	800e9c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ea16:	2400      	movs	r4, #0
 800ea18:	e7a0      	b.n	800e95c <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ea1a:	2400      	movs	r4, #0
 800ea1c:	46b9      	mov	r9, r7
 800ea1e:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ea20:	699a      	ldr	r2, [r3, #24]
 800ea22:	0692      	lsls	r2, r2, #26
 800ea24:	d42f      	bmi.n	800ea86 <I2C_WaitOnSTOPFlagUntilTimeout+0x15e>
 800ea26:	f1ba 0f00 	cmp.w	sl, #0
 800ea2a:	d199      	bne.n	800e960 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ea2c:	f7ff f940 	bl	800dcb0 <HAL_GetTick>
 800ea30:	eba0 0309 	sub.w	r3, r0, r9
 800ea34:	429e      	cmp	r6, r3
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ea36:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ea38:	d304      	bcc.n	800ea44 <I2C_WaitOnSTOPFlagUntilTimeout+0x11c>
 800ea3a:	b11e      	cbz	r6, 800ea44 <I2C_WaitOnSTOPFlagUntilTimeout+0x11c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ea3c:	699a      	ldr	r2, [r3, #24]
 800ea3e:	0690      	lsls	r0, r2, #26
 800ea40:	d5f4      	bpl.n	800ea2c <I2C_WaitOnSTOPFlagUntilTimeout+0x104>
 800ea42:	e78b      	b.n	800e95c <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ea44:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800ea46:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ea4a:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800ea4c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ea4e:	0409      	lsls	r1, r1, #16
 800ea50:	d50b      	bpl.n	800ea6a <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
              (tmp1 != I2C_CR2_STOP) && \
 800ea52:	0441      	lsls	r1, r0, #17
 800ea54:	d409      	bmi.n	800ea6a <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
 800ea56:	2a20      	cmp	r2, #32
 800ea58:	d007      	beq.n	800ea6a <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ea5a:	685a      	ldr	r2, [r3, #4]
 800ea5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea60:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800ea62:	f7ff f925 	bl	800dcb0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ea66:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800ea68:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ea6a:	699a      	ldr	r2, [r3, #24]
 800ea6c:	0690      	lsls	r0, r2, #26
 800ea6e:	d4d7      	bmi.n	800ea20 <I2C_WaitOnSTOPFlagUntilTimeout+0xf8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ea70:	f7ff f91e 	bl	800dcb0 <HAL_GetTick>
 800ea74:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ea78:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ea7a:	2819      	cmp	r0, #25
 800ea7c:	d9f5      	bls.n	800ea6a <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ea7e:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800ea80:	f04f 0a01 	mov.w	sl, #1
 800ea84:	e7cc      	b.n	800ea20 <I2C_WaitOnSTOPFlagUntilTimeout+0xf8>
    if (status == HAL_OK)
 800ea86:	f1ba 0f00 	cmp.w	sl, #0
 800ea8a:	f47f af69 	bne.w	800e960 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ea8e:	e765      	b.n	800e95c <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 800ea90:	fe00e800 	.word	0xfe00e800

0800ea94 <HAL_I2C_MspInit>:
}
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop

0800ea98 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d04e      	beq.n	800eb3a <HAL_I2C_Init+0xa2>
{
 800ea9c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ea9e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d041      	beq.n	800eb30 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 800eaac:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800eaae:	2124      	movs	r1, #36	@ 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800eab0:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800eab2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800eab6:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800eab8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800eabc:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800eabe:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800eac2:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800eac4:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800eac6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800eac8:	689a      	ldr	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800eaca:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800eacc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ead0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ead2:	d029      	beq.n	800eb28 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ead4:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ead8:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800eada:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800eadc:	d102      	bne.n	800eae4 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800eade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eae2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800eae4:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800eae6:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800eaea:	4915      	ldr	r1, [pc, #84]	@ (800eb40 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800eaec:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800eaee:	4301      	orrs	r1, r0
 800eaf0:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800eaf2:	68d9      	ldr	r1, [r3, #12]
 800eaf4:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 800eaf8:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800eafa:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800eafe:	4302      	orrs	r2, r0
 800eb00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800eb04:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800eb08:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb0a:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800eb0c:	4301      	orrs	r1, r0
  return HAL_OK;
 800eb0e:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800eb10:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800eb12:	6819      	ldr	r1, [r3, #0]
 800eb14:	f041 0101 	orr.w	r1, r1, #1
 800eb18:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb1a:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800eb1c:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800eb20:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb22:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 800eb26:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800eb28:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800eb2c:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800eb2e:	e7d9      	b.n	800eae4 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800eb30:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800eb34:	f7ff ffae 	bl	800ea94 <HAL_I2C_MspInit>
 800eb38:	e7b8      	b.n	800eaac <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800eb3a:	2001      	movs	r0, #1
}
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop
 800eb40:	02008000 	.word	0x02008000

0800eb44 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop

0800eb48 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800eb48:	b1b0      	cbz	r0, 800eb78 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 800eb4a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800eb4c:	2324      	movs	r3, #36	@ 0x24
{
 800eb4e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800eb50:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 800eb54:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 800eb56:	6813      	ldr	r3, [r2, #0]
 800eb58:	f023 0301 	bic.w	r3, r3, #1
 800eb5c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800eb5e:	f7ff fff1 	bl	800eb44 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb62:	2300      	movs	r3, #0
 800eb64:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 800eb66:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 800eb68:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hi2c);
 800eb6c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 800eb70:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb72:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 800eb76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800eb78:	2001      	movs	r0, #1
}
 800eb7a:	4770      	bx	lr

0800eb7c <HAL_I2C_Mem_Write>:
{
 800eb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb80:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb82:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800eb86:	f8bd 9024 	ldrh.w	r9, [sp, #36]	@ 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb8a:	2b20      	cmp	r3, #32
 800eb8c:	d130      	bne.n	800ebf0 <HAL_I2C_Mem_Write+0x74>
    if ((pData == NULL) || (Size == 0U))
 800eb8e:	9b08      	ldr	r3, [sp, #32]
 800eb90:	4604      	mov	r4, r0
 800eb92:	b33b      	cbz	r3, 800ebe4 <HAL_I2C_Mem_Write+0x68>
 800eb94:	f1b9 0f00 	cmp.w	r9, #0
 800eb98:	d024      	beq.n	800ebe4 <HAL_I2C_Mem_Write+0x68>
    __HAL_LOCK(hi2c);
 800eb9a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d026      	beq.n	800ebf0 <HAL_I2C_Mem_Write+0x74>
 800eba2:	2301      	movs	r3, #1
 800eba4:	460e      	mov	r6, r1
 800eba6:	4690      	mov	r8, r2
 800eba8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800ebac:	f7ff f880 	bl	800dcb0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ebb0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800ebb2:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ebb4:	699a      	ldr	r2, [r3, #24]
 800ebb6:	0411      	lsls	r1, r2, #16
 800ebb8:	d51d      	bpl.n	800ebf6 <HAL_I2C_Mem_Write+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebba:	f7ff f879 	bl	800dcb0 <HAL_GetTick>
 800ebbe:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ebc0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebc2:	2819      	cmp	r0, #25
 800ebc4:	d9f6      	bls.n	800ebb4 <HAL_I2C_Mem_Write+0x38>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ebc6:	699a      	ldr	r2, [r3, #24]
 800ebc8:	0412      	lsls	r2, r2, #16
 800ebca:	d5f3      	bpl.n	800ebb4 <HAL_I2C_Mem_Write+0x38>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ebcc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ebce:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebd0:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ebd2:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800ebd4:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ebd8:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ebda:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebde:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800ebe2:	e002      	b.n	800ebea <HAL_I2C_Mem_Write+0x6e>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ebe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ebe8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800ebea:	2001      	movs	r0, #1
}
 800ebec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 800ebf0:	2002      	movs	r0, #2
}
 800ebf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hi2c->pBuffPtr  = pData;
 800ebf6:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ebf8:	2121      	movs	r1, #33	@ 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ebfa:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebfe:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ec00:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ec04:	2140      	movs	r1, #64	@ 0x40
    hi2c->pBuffPtr  = pData;
 800ec06:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec08:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ec0a:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->XferISR   = NULL;
 800ec0e:	6362      	str	r2, [r4, #52]	@ 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec10:	6462      	str	r2, [r4, #68]	@ 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ec12:	498c      	ldr	r1, [pc, #560]	@ (800ee44 <HAL_I2C_Mem_Write+0x2c8>)
    hi2c->XferCount = Size;
 800ec14:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800ec18:	685a      	ldr	r2, [r3, #4]
 800ec1a:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ec1c:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800ec1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ec22:	4989      	ldr	r1, [pc, #548]	@ (800ee48 <HAL_I2C_Mem_Write+0x2cc>)
 800ec24:	4332      	orrs	r2, r6
 800ec26:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ec28:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800ec2a:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ec2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec2e:	f7ff fdc5 	bl	800e7bc <I2C_WaitOnTXISFlagUntilTimeout>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	d16d      	bne.n	800ed12 <HAL_I2C_Mem_Write+0x196>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ec36:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ec38:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ec3a:	f040 80cf 	bne.w	800eddc <HAL_I2C_Mem_Write+0x260>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ec3e:	fa5f f388 	uxtb.w	r3, r8
 800ec42:	6293      	str	r3, [r2, #40]	@ 0x28
 800ec44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec46:	3301      	adds	r3, #1
 800ec48:	d14b      	bne.n	800ece2 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ec4a:	6993      	ldr	r3, [r2, #24]
 800ec4c:	0618      	lsls	r0, r3, #24
 800ec4e:	d5fc      	bpl.n	800ec4a <HAL_I2C_Mem_Write+0xce>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec50:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	2bff      	cmp	r3, #255	@ 0xff
 800ec56:	f240 80b3 	bls.w	800edc0 <HAL_I2C_Mem_Write+0x244>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec5a:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800ec5c:	497b      	ldr	r1, [pc, #492]	@ (800ee4c <HAL_I2C_Mem_Write+0x2d0>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec5e:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ec60:	6853      	ldr	r3, [r2, #4]
 800ec62:	400b      	ands	r3, r1
 800ec64:	497a      	ldr	r1, [pc, #488]	@ (800ee50 <HAL_I2C_Mem_Write+0x2d4>)
 800ec66:	4333      	orrs	r3, r6
 800ec68:	4319      	orrs	r1, r3
 800ec6a:	6051      	str	r1, [r2, #4]
 800ec6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec6e:	3301      	adds	r3, #1
 800ec70:	d005      	beq.n	800ec7e <HAL_I2C_Mem_Write+0x102>
 800ec72:	e064      	b.n	800ed3e <HAL_I2C_Mem_Write+0x1c2>
    } while (hi2c->XferCount > 0U);
 800ec74:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f000 80be 	beq.w	800edfa <HAL_I2C_Mem_Write+0x27e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ec7e:	462a      	mov	r2, r5
 800ec80:	f04f 31ff 	mov.w	r1, #4294967295
 800ec84:	4620      	mov	r0, r4
 800ec86:	f7ff fd99 	bl	800e7bc <I2C_WaitOnTXISFlagUntilTimeout>
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d1ad      	bne.n	800ebea <HAL_I2C_Mem_Write+0x6e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ec8e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ec90:	6821      	ldr	r1, [r4, #0]
 800ec92:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800ec96:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ec98:	628a      	str	r2, [r1, #40]	@ 0x28
      hi2c->XferCount--;
 800ec9a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800ec9c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800ec9e:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800eca0:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800eca2:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800eca4:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800eca6:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800eca8:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ecaa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800ecac:	b292      	uxth	r2, r2
 800ecae:	2a00      	cmp	r2, #0
 800ecb0:	d0e0      	beq.n	800ec74 <HAL_I2C_Mem_Write+0xf8>
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d1de      	bne.n	800ec74 <HAL_I2C_Mem_Write+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ecb6:	698b      	ldr	r3, [r1, #24]
 800ecb8:	061a      	lsls	r2, r3, #24
 800ecba:	d5fc      	bpl.n	800ecb6 <HAL_I2C_Mem_Write+0x13a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ecbc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	2bff      	cmp	r3, #255	@ 0xff
 800ecc2:	d873      	bhi.n	800edac <HAL_I2C_Mem_Write+0x230>
          hi2c->XferSize = hi2c->XferCount;
 800ecc4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800ecc6:	4861      	ldr	r0, [pc, #388]	@ (800ee4c <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = hi2c->XferCount;
 800ecc8:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800ecca:	684a      	ldr	r2, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 800eccc:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ecce:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800ecd0:	4002      	ands	r2, r0
 800ecd2:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ecdc:	604b      	str	r3, [r1, #4]
 800ecde:	e7c9      	b.n	800ec74 <HAL_I2C_Mem_Write+0xf8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ece0:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ece2:	6993      	ldr	r3, [r2, #24]
 800ece4:	0619      	lsls	r1, r3, #24
 800ece6:	d4b3      	bmi.n	800ec50 <HAL_I2C_Mem_Write+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ece8:	f7fe ffe2 	bl	800dcb0 <HAL_GetTick>
 800ecec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ecee:	1b43      	subs	r3, r0, r5
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d301      	bcc.n	800ecf8 <HAL_I2C_Mem_Write+0x17c>
 800ecf4:	2a00      	cmp	r2, #0
 800ecf6:	d1f3      	bne.n	800ece0 <HAL_I2C_Mem_Write+0x164>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ecf8:	6822      	ldr	r2, [r4, #0]
 800ecfa:	6991      	ldr	r1, [r2, #24]
 800ecfc:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800ed00:	d1ef      	bne.n	800ece2 <HAL_I2C_Mem_Write+0x166>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ed02:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ed04:	2220      	movs	r2, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ed06:	4313      	orrs	r3, r2
 800ed08:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ed0a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed0e:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800ed12:	2300      	movs	r3, #0
 800ed14:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800ed18:	e767      	b.n	800ebea <HAL_I2C_Mem_Write+0x6e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed1a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	2bff      	cmp	r3, #255	@ 0xff
 800ed20:	f240 8081 	bls.w	800ee26 <HAL_I2C_Mem_Write+0x2aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed24:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800ed26:	4a49      	ldr	r2, [pc, #292]	@ (800ee4c <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed28:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ed2a:	684b      	ldr	r3, [r1, #4]
 800ed2c:	4013      	ands	r3, r2
 800ed2e:	4a48      	ldr	r2, [pc, #288]	@ (800ee50 <HAL_I2C_Mem_Write+0x2d4>)
 800ed30:	4333      	orrs	r3, r6
 800ed32:	431a      	orrs	r2, r3
 800ed34:	604a      	str	r2, [r1, #4]
    } while (hi2c->XferCount > 0U);
 800ed36:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d05d      	beq.n	800edfa <HAL_I2C_Mem_Write+0x27e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed3e:	462a      	mov	r2, r5
 800ed40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed42:	4620      	mov	r0, r4
 800ed44:	f7ff fd3a 	bl	800e7bc <I2C_WaitOnTXISFlagUntilTimeout>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	f47f af4e 	bne.w	800ebea <HAL_I2C_Mem_Write+0x6e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ed4e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ed50:	6821      	ldr	r1, [r4, #0]
 800ed52:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
 800ed56:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ed58:	6288      	str	r0, [r1, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800ed5a:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800ed5c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800ed5e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800ed60:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800ed62:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800ed64:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800ed66:	b292      	uxth	r2, r2
 800ed68:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ed6a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800ed6c:	b292      	uxth	r2, r2
 800ed6e:	2a00      	cmp	r2, #0
 800ed70:	d0e1      	beq.n	800ed36 <HAL_I2C_Mem_Write+0x1ba>
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1df      	bne.n	800ed36 <HAL_I2C_Mem_Write+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ed76:	698b      	ldr	r3, [r1, #24]
 800ed78:	061b      	lsls	r3, r3, #24
 800ed7a:	d4ce      	bmi.n	800ed1a <HAL_I2C_Mem_Write+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed7c:	f7fe ff98 	bl	800dcb0 <HAL_GetTick>
 800ed80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed82:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ed84:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d301      	bcc.n	800ed8e <HAL_I2C_Mem_Write+0x212>
 800ed8a:	2a00      	cmp	r2, #0
 800ed8c:	d1f3      	bne.n	800ed76 <HAL_I2C_Mem_Write+0x1fa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ed8e:	698b      	ldr	r3, [r1, #24]
 800ed90:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 800ed94:	d1ef      	bne.n	800ed76 <HAL_I2C_Mem_Write+0x1fa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ed96:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ed98:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 800ed9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ed9e:	430a      	orrs	r2, r1
 800eda0:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800eda2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800eda6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800edaa:	e71e      	b.n	800ebea <HAL_I2C_Mem_Write+0x6e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800edac:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800edae:	4a27      	ldr	r2, [pc, #156]	@ (800ee4c <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800edb0:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800edb2:	684b      	ldr	r3, [r1, #4]
 800edb4:	4013      	ands	r3, r2
 800edb6:	4a26      	ldr	r2, [pc, #152]	@ (800ee50 <HAL_I2C_Mem_Write+0x2d4>)
 800edb8:	4333      	orrs	r3, r6
 800edba:	431a      	orrs	r2, r3
 800edbc:	604a      	str	r2, [r1, #4]
 800edbe:	e759      	b.n	800ec74 <HAL_I2C_Mem_Write+0xf8>
      hi2c->XferSize = hi2c->XferCount;
 800edc0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800edc2:	4822      	ldr	r0, [pc, #136]	@ (800ee4c <HAL_I2C_Mem_Write+0x2d0>)
      hi2c->XferSize = hi2c->XferCount;
 800edc4:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800edc6:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 800edc8:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800edca:	6853      	ldr	r3, [r2, #4]
 800edcc:	4003      	ands	r3, r0
 800edce:	4333      	orrs	r3, r6
 800edd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800edd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800edd8:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800edda:	e747      	b.n	800ec6c <HAL_I2C_Mem_Write+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eddc:	ea4f 2318 	mov.w	r3, r8, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ede0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ede2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ede4:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ede6:	462a      	mov	r2, r5
 800ede8:	f7ff fce8 	bl	800e7bc <I2C_WaitOnTXISFlagUntilTimeout>
 800edec:	2800      	cmp	r0, #0
 800edee:	d190      	bne.n	800ed12 <HAL_I2C_Mem_Write+0x196>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800edf0:	6822      	ldr	r2, [r4, #0]
 800edf2:	fa5f f388 	uxtb.w	r3, r8
 800edf6:	6293      	str	r3, [r2, #40]	@ 0x28
 800edf8:	e724      	b.n	800ec44 <HAL_I2C_Mem_Write+0xc8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800edfa:	462a      	mov	r2, r5
 800edfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800edfe:	4620      	mov	r0, r4
 800ee00:	f7ff fd92 	bl	800e928 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ee04:	2800      	cmp	r0, #0
 800ee06:	f47f aef0 	bne.w	800ebea <HAL_I2C_Mem_Write+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ee0a:	6823      	ldr	r3, [r4, #0]
 800ee0c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800ee0e:	4d11      	ldr	r5, [pc, #68]	@ (800ee54 <HAL_I2C_Mem_Write+0x2d8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ee10:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800ee12:	685a      	ldr	r2, [r3, #4]
 800ee14:	402a      	ands	r2, r5
 800ee16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ee18:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800ee1c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ee20:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800ee24:	e6e2      	b.n	800ebec <HAL_I2C_Mem_Write+0x70>
          hi2c->XferSize = hi2c->XferCount;
 800ee26:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee28:	4808      	ldr	r0, [pc, #32]	@ (800ee4c <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = hi2c->XferCount;
 800ee2a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ee2c:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
 800ee2e:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee30:	684b      	ldr	r3, [r1, #4]
 800ee32:	4003      	ands	r3, r0
 800ee34:	4333      	orrs	r3, r6
 800ee36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ee3e:	604b      	str	r3, [r1, #4]
}
 800ee40:	e779      	b.n	800ed36 <HAL_I2C_Mem_Write+0x1ba>
 800ee42:	bf00      	nop
 800ee44:	fc009800 	.word	0xfc009800
 800ee48:	01002000 	.word	0x01002000
 800ee4c:	fc009c00 	.word	0xfc009c00
 800ee50:	01ff0000 	.word	0x01ff0000
 800ee54:	fe00e800 	.word	0xfe00e800

0800ee58 <HAL_I2C_Mem_Read>:
{
 800ee58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee5c:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee5e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800ee62:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee66:	2b20      	cmp	r3, #32
{
 800ee68:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee6c:	d130      	bne.n	800eed0 <HAL_I2C_Mem_Read+0x78>
    if ((pData == NULL) || (Size == 0U))
 800ee6e:	9b08      	ldr	r3, [sp, #32]
 800ee70:	4604      	mov	r4, r0
 800ee72:	b33b      	cbz	r3, 800eec4 <HAL_I2C_Mem_Read+0x6c>
 800ee74:	f1ba 0f00 	cmp.w	sl, #0
 800ee78:	d024      	beq.n	800eec4 <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 800ee7a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d026      	beq.n	800eed0 <HAL_I2C_Mem_Read+0x78>
 800ee82:	2301      	movs	r3, #1
 800ee84:	460e      	mov	r6, r1
 800ee86:	4691      	mov	r9, r2
 800ee88:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800ee8c:	f7fe ff10 	bl	800dcb0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ee90:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800ee92:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ee94:	699a      	ldr	r2, [r3, #24]
 800ee96:	0410      	lsls	r0, r2, #16
 800ee98:	d51d      	bpl.n	800eed6 <HAL_I2C_Mem_Read+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee9a:	f7fe ff09 	bl	800dcb0 <HAL_GetTick>
 800ee9e:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800eea0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eea2:	2819      	cmp	r0, #25
 800eea4:	d9f6      	bls.n	800ee94 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800eea6:	699a      	ldr	r2, [r3, #24]
 800eea8:	0411      	lsls	r1, r2, #16
 800eeaa:	d5f3      	bpl.n	800ee94 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eeac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800eeae:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800eeb0:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eeb2:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800eeb4:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eeb8:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800eeba:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800eebe:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800eec2:	e002      	b.n	800eeca <HAL_I2C_Mem_Read+0x72>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eec4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eec8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800eeca:	2001      	movs	r0, #1
}
 800eecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800eed0:	2002      	movs	r0, #2
}
 800eed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
 800eed6:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800eed8:	2122      	movs	r1, #34	@ 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eeda:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800eede:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800eee0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800eee4:	2140      	movs	r1, #64	@ 0x40
    hi2c->pBuffPtr  = pData;
 800eee6:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eee8:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800eeea:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->XferISR   = NULL;
 800eeee:	6362      	str	r2, [r4, #52]	@ 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eef0:	6462      	str	r2, [r4, #68]	@ 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
 800eef2:	4975      	ldr	r1, [pc, #468]	@ (800f0c8 <HAL_I2C_Mem_Read+0x270>)
    hi2c->XferCount = Size;
 800eef4:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800eef8:	685a      	ldr	r2, [r3, #4]
 800eefa:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eefc:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800eefe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef02:	4641      	mov	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 800ef04:	4332      	orrs	r2, r6
 800ef06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ef0a:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef0c:	462a      	mov	r2, r5
 800ef0e:	f7ff fc55 	bl	800e7bc <I2C_WaitOnTXISFlagUntilTimeout>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d152      	bne.n	800efbc <HAL_I2C_Mem_Read+0x164>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ef16:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ef18:	6821      	ldr	r1, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ef1a:	f040 80b0 	bne.w	800f07e <HAL_I2C_Mem_Read+0x226>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ef1e:	fa5f f389 	uxtb.w	r3, r9
 800ef22:	628b      	str	r3, [r1, #40]	@ 0x28
 800ef24:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ef28:	d130      	bne.n	800ef8c <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ef2a:	698b      	ldr	r3, [r1, #24]
 800ef2c:	065a      	lsls	r2, r3, #25
 800ef2e:	d5fc      	bpl.n	800ef2a <HAL_I2C_Mem_Read+0xd2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef30:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	2bff      	cmp	r3, #255	@ 0xff
 800ef36:	f240 8094 	bls.w	800f062 <HAL_I2C_Mem_Read+0x20a>
  MODIFY_REG(hi2c->Instance->CR2, \
 800ef3a:	684b      	ldr	r3, [r1, #4]
 800ef3c:	4a62      	ldr	r2, [pc, #392]	@ (800f0c8 <HAL_I2C_Mem_Read+0x270>)
 800ef3e:	4013      	ands	r3, r2
 800ef40:	4a62      	ldr	r2, [pc, #392]	@ (800f0cc <HAL_I2C_Mem_Read+0x274>)
 800ef42:	4333      	orrs	r3, r6
 800ef44:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef46:	23ff      	movs	r3, #255	@ 0xff
 800ef48:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ef4a:	604a      	str	r2, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ef4c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ef50:	d13f      	bne.n	800efd2 <HAL_I2C_Mem_Read+0x17a>
 800ef52:	698b      	ldr	r3, [r1, #24]
 800ef54:	075f      	lsls	r7, r3, #29
 800ef56:	d5fc      	bpl.n	800ef52 <HAL_I2C_Mem_Read+0xfa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ef58:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800ef5a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ef5c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800ef5e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800ef60:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800ef62:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800ef64:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800ef66:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800ef68:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800ef6a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800ef6c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800ef6e:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef70:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 800ef72:	6261      	str	r1, [r4, #36]	@ 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef74:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800ef76:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef78:	b10a      	cbz	r2, 800ef7e <HAL_I2C_Mem_Read+0x126>
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d04e      	beq.n	800f01c <HAL_I2C_Mem_Read+0x1c4>
    } while (hi2c->XferCount > 0U);
 800ef7e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f000 808a 	beq.w	800f09c <HAL_I2C_Mem_Read+0x244>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ef88:	6821      	ldr	r1, [r4, #0]
 800ef8a:	e7df      	b.n	800ef4c <HAL_I2C_Mem_Read+0xf4>
 800ef8c:	698b      	ldr	r3, [r1, #24]
 800ef8e:	065b      	lsls	r3, r3, #25
 800ef90:	d4ce      	bmi.n	800ef30 <HAL_I2C_Mem_Read+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef92:	f7fe fe8d 	bl	800dcb0 <HAL_GetTick>
 800ef96:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ef98:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef9a:	4598      	cmp	r8, r3
 800ef9c:	d302      	bcc.n	800efa4 <HAL_I2C_Mem_Read+0x14c>
 800ef9e:	f1b8 0f00 	cmp.w	r8, #0
 800efa2:	d1f3      	bne.n	800ef8c <HAL_I2C_Mem_Read+0x134>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800efa4:	698b      	ldr	r3, [r1, #24]
 800efa6:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800efaa:	d1ef      	bne.n	800ef8c <HAL_I2C_Mem_Read+0x134>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800efac:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800efae:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800efb0:	430a      	orrs	r2, r1
 800efb2:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800efb4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800efb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800efbc:	2300      	movs	r3, #0
 800efbe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800efc2:	e782      	b.n	800eeca <HAL_I2C_Mem_Read+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efc4:	f1b8 0f00 	cmp.w	r8, #0
 800efc8:	d103      	bne.n	800efd2 <HAL_I2C_Mem_Read+0x17a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800efca:	698b      	ldr	r3, [r1, #24]
 800efcc:	f013 0304 	ands.w	r3, r3, #4
 800efd0:	d019      	beq.n	800f006 <HAL_I2C_Mem_Read+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800efd2:	698b      	ldr	r3, [r1, #24]
 800efd4:	0758      	lsls	r0, r3, #29
 800efd6:	d4bf      	bmi.n	800ef58 <HAL_I2C_Mem_Read+0x100>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efd8:	f7fe fe6a 	bl	800dcb0 <HAL_GetTick>
 800efdc:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800efde:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efe0:	4598      	cmp	r8, r3
 800efe2:	d2ef      	bcs.n	800efc4 <HAL_I2C_Mem_Read+0x16c>
 800efe4:	e7f1      	b.n	800efca <HAL_I2C_Mem_Read+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800efe6:	6993      	ldr	r3, [r2, #24]
 800efe8:	061b      	lsls	r3, r3, #24
 800efea:	d41e      	bmi.n	800f02a <HAL_I2C_Mem_Read+0x1d2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efec:	f7fe fe60 	bl	800dcb0 <HAL_GetTick>
 800eff0:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800eff2:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eff4:	4598      	cmp	r8, r3
 800eff6:	d302      	bcc.n	800effe <HAL_I2C_Mem_Read+0x1a6>
 800eff8:	f1b8 0f00 	cmp.w	r8, #0
 800effc:	d1f3      	bne.n	800efe6 <HAL_I2C_Mem_Read+0x18e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800effe:	6993      	ldr	r3, [r2, #24]
 800f000:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 800f004:	d1ef      	bne.n	800efe6 <HAL_I2C_Mem_Read+0x18e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f006:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800f008:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 800f00a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f00e:	430a      	orrs	r2, r1
 800f010:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800f012:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f016:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800f01a:	e756      	b.n	800eeca <HAL_I2C_Mem_Read+0x72>
 800f01c:	f1b8 3fff 	cmp.w	r8, #4294967295
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f020:	6822      	ldr	r2, [r4, #0]
 800f022:	d1e0      	bne.n	800efe6 <HAL_I2C_Mem_Read+0x18e>
 800f024:	6993      	ldr	r3, [r2, #24]
 800f026:	0619      	lsls	r1, r3, #24
 800f028:	d5fc      	bpl.n	800f024 <HAL_I2C_Mem_Read+0x1cc>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f02a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	2bff      	cmp	r3, #255	@ 0xff
 800f030:	d909      	bls.n	800f046 <HAL_I2C_Mem_Read+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
 800f032:	6853      	ldr	r3, [r2, #4]
 800f034:	4926      	ldr	r1, [pc, #152]	@ (800f0d0 <HAL_I2C_Mem_Read+0x278>)
 800f036:	400b      	ands	r3, r1
 800f038:	4926      	ldr	r1, [pc, #152]	@ (800f0d4 <HAL_I2C_Mem_Read+0x27c>)
 800f03a:	4333      	orrs	r3, r6
 800f03c:	4319      	orrs	r1, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f03e:	23ff      	movs	r3, #255	@ 0xff
 800f040:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800f042:	6051      	str	r1, [r2, #4]
}
 800f044:	e79b      	b.n	800ef7e <HAL_I2C_Mem_Read+0x126>
          hi2c->XferSize = hi2c->XferCount;
 800f046:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800f048:	4821      	ldr	r0, [pc, #132]	@ (800f0d0 <HAL_I2C_Mem_Read+0x278>)
          hi2c->XferSize = hi2c->XferCount;
 800f04a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f04c:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 800f04e:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800f050:	6853      	ldr	r3, [r2, #4]
 800f052:	4003      	ands	r3, r0
 800f054:	4333      	orrs	r3, r6
 800f056:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f05a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800f05e:	6053      	str	r3, [r2, #4]
}
 800f060:	e78d      	b.n	800ef7e <HAL_I2C_Mem_Read+0x126>
      hi2c->XferSize = hi2c->XferCount;
 800f062:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800f064:	4818      	ldr	r0, [pc, #96]	@ (800f0c8 <HAL_I2C_Mem_Read+0x270>)
      hi2c->XferSize = hi2c->XferCount;
 800f066:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f068:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
 800f06a:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800f06c:	684b      	ldr	r3, [r1, #4]
 800f06e:	4003      	ands	r3, r0
 800f070:	4333      	orrs	r3, r6
 800f072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f076:	4a18      	ldr	r2, [pc, #96]	@ (800f0d8 <HAL_I2C_Mem_Read+0x280>)
 800f078:	431a      	orrs	r2, r3
 800f07a:	604a      	str	r2, [r1, #4]
}
 800f07c:	e766      	b.n	800ef4c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f07e:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f082:	462a      	mov	r2, r5
 800f084:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f086:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f088:	4641      	mov	r1, r8
 800f08a:	f7ff fb97 	bl	800e7bc <I2C_WaitOnTXISFlagUntilTimeout>
 800f08e:	2800      	cmp	r0, #0
 800f090:	d194      	bne.n	800efbc <HAL_I2C_Mem_Read+0x164>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f092:	fa5f f389 	uxtb.w	r3, r9
 800f096:	6821      	ldr	r1, [r4, #0]
 800f098:	628b      	str	r3, [r1, #40]	@ 0x28
 800f09a:	e743      	b.n	800ef24 <HAL_I2C_Mem_Read+0xcc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f09c:	462a      	mov	r2, r5
 800f09e:	4641      	mov	r1, r8
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f7ff fc41 	bl	800e928 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	f47f af0f 	bne.w	800eeca <HAL_I2C_Mem_Read+0x72>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800f0b0:	4d0a      	ldr	r5, [pc, #40]	@ (800f0dc <HAL_I2C_Mem_Read+0x284>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f0b2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800f0b4:	685a      	ldr	r2, [r3, #4]
 800f0b6:	402a      	ands	r2, r5
 800f0b8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800f0ba:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800f0be:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f0c2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800f0c6:	e701      	b.n	800eecc <HAL_I2C_Mem_Read+0x74>
 800f0c8:	fc009800 	.word	0xfc009800
 800f0cc:	01ff2400 	.word	0x01ff2400
 800f0d0:	fc009c00 	.word	0xfc009c00
 800f0d4:	01ff0000 	.word	0x01ff0000
 800f0d8:	02002400 	.word	0x02002400
 800f0dc:	fe00e800 	.word	0xfe00e800

0800f0e0 <HAL_I2C_GetState>:
  return hi2c->State;
 800f0e0:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop

0800f0e8 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800f0e8:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800f0ea:	4770      	bx	lr

0800f0ec <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f0ec:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800f0f0:	2a20      	cmp	r2, #32
 800f0f2:	d123      	bne.n	800f13c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800f0f4:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f0f8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2a01      	cmp	r2, #1
 800f100:	d01c      	beq.n	800f13c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f102:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800f104:	2024      	movs	r0, #36	@ 0x24
{
 800f106:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800f108:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f10c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 800f110:	6810      	ldr	r0, [r2, #0]
 800f112:	f020 0001 	bic.w	r0, r0, #1
 800f116:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f118:	6810      	ldr	r0, [r2, #0]
 800f11a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800f11e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800f120:	6810      	ldr	r0, [r2, #0]
 800f122:	4301      	orrs	r1, r0

    return HAL_OK;
 800f124:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 800f126:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800f128:	6811      	ldr	r1, [r2, #0]
 800f12a:	f041 0101 	orr.w	r1, r1, #1
 800f12e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800f130:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800f134:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800f138:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800f13c:	2002      	movs	r0, #2
}
 800f13e:	4770      	bx	lr

0800f140 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f140:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800f144:	2a20      	cmp	r2, #32
 800f146:	d122      	bne.n	800f18e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 800f148:	4603      	mov	r3, r0
{
 800f14a:	b500      	push	{lr}
 800f14c:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f150:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800f154:	2a01      	cmp	r2, #1
 800f156:	d01c      	beq.n	800f192 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f158:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800f15a:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f15c:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800f160:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800f164:	6810      	ldr	r0, [r2, #0]
 800f166:	f020 0001 	bic.w	r0, r0, #1
 800f16a:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800f16c:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800f16e:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 800f172:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 800f176:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 800f178:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800f17a:	6811      	ldr	r1, [r2, #0]
 800f17c:	f041 0101 	orr.w	r1, r1, #1
 800f180:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800f182:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800f186:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800f18a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800f18e:	2002      	movs	r0, #2
}
 800f190:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800f192:	2002      	movs	r0, #2
}
 800f194:	f85d fb04 	ldr.w	pc, [sp], #4

0800f198 <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop

0800f19c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800f19c:	2800      	cmp	r0, #0
 800f19e:	d067      	beq.n	800f270 <HAL_LTDC_Init+0xd4>
{
 800f1a0:	b538      	push	{r3, r4, r5, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800f1a2:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d05a      	beq.n	800f266 <HAL_LTDC_Init+0xca>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f1b0:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f1b2:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f1b4:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f1b8:	f884 10a1 	strb.w	r1, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f1bc:	4302      	orrs	r2, r0
 800f1be:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800f1c0:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f1c2:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800f1c4:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800f1c6:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800f1ca:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800f1cc:	4929      	ldr	r1, [pc, #164]	@ (800f274 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800f1ce:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f1d0:	6998      	ldr	r0, [r3, #24]
 800f1d2:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800f1d4:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f1d6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800f1d8:	689a      	ldr	r2, [r3, #8]
 800f1da:	400a      	ands	r2, r1
 800f1dc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800f1de:	689a      	ldr	r2, [r3, #8]
 800f1e0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f1e4:	69a0      	ldr	r0, [r4, #24]
 800f1e6:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800f1e8:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800f1ea:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800f1ec:	68da      	ldr	r2, [r3, #12]
 800f1ee:	400a      	ands	r2, r1
 800f1f0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800f1f2:	68da      	ldr	r2, [r3, #12]
 800f1f4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f1f8:	6a20      	ldr	r0, [r4, #32]
 800f1fa:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800f1fc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800f1fe:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800f200:	691a      	ldr	r2, [r3, #16]
 800f202:	400a      	ands	r2, r1
 800f204:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800f206:	691a      	ldr	r2, [r3, #16]
 800f208:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f20c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f20e:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.TotalWidth << 16U);
 800f210:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800f212:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800f214:	695a      	ldr	r2, [r3, #20]
 800f216:	400a      	ands	r2, r1
 800f218:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800f21a:	695a      	ldr	r2, [r3, #20]
 800f21c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f21e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f222:	430a      	orrs	r2, r1
 800f224:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800f226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800f228:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800f22c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800f230:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800f234:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800f236:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800f238:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800f23c:	432a      	orrs	r2, r5
 800f23e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800f242:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800f244:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800f248:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800f24a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f24c:	f042 0206 	orr.w	r2, r2, #6
 800f250:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800f252:	699a      	ldr	r2, [r3, #24]
 800f254:	f042 0201 	orr.w	r2, r2, #1
 800f258:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800f25a:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800f25c:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800f260:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800f264:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800f266:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800f26a:	f7ff ff95 	bl	800f198 <HAL_LTDC_MspInit>
 800f26e:	e79f      	b.n	800f1b0 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800f270:	2001      	movs	r0, #1
}
 800f272:	4770      	bx	lr
 800f274:	f000f800 	.word	0xf000f800

0800f278 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800f278:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	f000 80c3 	beq.w	800f408 <HAL_LTDC_ConfigLayer+0x190>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f282:	2302      	movs	r3, #2
{
 800f284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f288:	f04f 0e34 	mov.w	lr, #52	@ 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f28c:	f8d0 9000 	ldr.w	r9, [r0]
{
 800f290:	b083      	sub	sp, #12
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f292:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f296:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f29a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f29c:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f2a0:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f2a2:	f102 0684 	add.w	r6, r2, #132	@ 0x84
 800f2a6:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f2a8:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
 800f2ac:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f2ae:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f2b2:	f10e 0e38 	add.w	lr, lr, #56	@ 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f2b6:	f8df a158 	ldr.w	sl, [pc, #344]	@ 800f410 <HAL_LTDC_ConfigLayer+0x198>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f2ba:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f2be:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800f2c2:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f2c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f2cc:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f2ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2d8:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f2da:	44bb      	add	fp, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800f2dc:	682a      	ldr	r2, [r5, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f2de:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f2e2:	9b01      	ldr	r3, [sp, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f2e4:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f2e6:	68e8      	ldr	r0, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f2e8:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f2ec:	f8d9 300c 	ldr.w	r3, [r9, #12]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800f2f0:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f2f4:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800f2f8:	440b      	add	r3, r1
 800f2fa:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800f2fe:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f302:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f306:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f30a:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f30e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f312:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f314:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800f318:	68ab      	ldr	r3, [r5, #8]
 800f31a:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800f31e:	3301      	adds	r3, #1
 800f320:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800f324:	4403      	add	r3, r0
 800f326:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800f32a:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800f32c:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800f330:	2907      	cmp	r1, #7
 800f332:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800f336:	f023 0307 	bic.w	r3, r3, #7
 800f33a:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800f33e:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800f342:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800f346:	f04f 0300 	mov.w	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800f34a:	f895 0032 	ldrb.w	r0, [r5, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800f34e:	f895 4031 	ldrb.w	r4, [r5, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800f352:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800f356:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800f35a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 800f35e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800f362:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f366:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800f36a:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800f36e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f372:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800f376:	696b      	ldr	r3, [r5, #20]
 800f378:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f37c:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f380:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f382:	ea00 0a0a 	and.w	sl, r0, sl
 800f386:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f38a:	6a28      	ldr	r0, [r5, #32]
 800f38c:	ea43 0300 	orr.w	r3, r3, r0
 800f390:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800f394:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 800f398:	f04f 0300 	mov.w	r3, #0
 800f39c:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800f3a0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800f3a2:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800f3a6:	d82d      	bhi.n	800f404 <HAL_LTDC_ConfigLayer+0x18c>
 800f3a8:	4b18      	ldr	r3, [pc, #96]	@ (800f40c <HAL_LTDC_ConfigLayer+0x194>)
 800f3aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f3ae:	1abf      	subs	r7, r7, r2
 800f3b0:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800f3b2:	fb03 f707 	mul.w	r7, r3, r7
 800f3b6:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f3ba:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f3bc:	3707      	adds	r7, #7
 800f3be:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800f3c2:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 800f3c6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800f3ca:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f3ce:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800f3d2:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
 800f3d6:	f36f 030a 	bfc	r3, #0, #11
 800f3da:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f3de:	f8cc 2030 	str.w	r2, [ip, #48]	@ 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800f3e2:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800f3e4:	f859 3006 	ldr.w	r3, [r9, r6]
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 800f3ee:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800f3f0:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
  return HAL_OK;
 800f3f4:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 800f3f6:	f888 20a1 	strb.w	r2, [r8, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800f3fa:	f888 30a0 	strb.w	r3, [r8, #160]	@ 0xa0
}
 800f3fe:	b003      	add	sp, #12
 800f400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800f404:	2301      	movs	r3, #1
 800f406:	e7d2      	b.n	800f3ae <HAL_LTDC_ConfigLayer+0x136>
  __HAL_LOCK(hltdc);
 800f408:	2002      	movs	r0, #2
}
 800f40a:	4770      	bx	lr
 800f40c:	08012ef8 	.word	0x08012ef8
 800f410:	fffff8f8 	.word	0xfffff8f8

0800f414 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800f418:	f7fe fc4a 	bl	800dcb0 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f41c:	2c00      	cmp	r4, #0
 800f41e:	d058      	beq.n	800f4d2 <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800f420:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800f422:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 800f424:	2100      	movs	r1, #0
 800f426:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800f428:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800f42c:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800f430:	68da      	ldr	r2, [r3, #12]
 800f432:	f022 0201 	bic.w	r2, r2, #1
 800f436:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f438:	e005      	b.n	800f446 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800f43a:	f7fe fc39 	bl	800dcb0 <HAL_GetTick>
 800f43e:	1b43      	subs	r3, r0, r5
 800f440:	2b05      	cmp	r3, #5
 800f442:	d841      	bhi.n	800f4c8 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f444:	6823      	ldr	r3, [r4, #0]
 800f446:	68da      	ldr	r2, [r3, #12]
 800f448:	07d2      	lsls	r2, r2, #31
 800f44a:	d4f6      	bmi.n	800f43a <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f44c:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 800f450:	69e0      	ldr	r0, [r4, #28]
 800f452:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f454:	68e1      	ldr	r1, [r4, #12]
 800f456:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f458:	4302      	orrs	r2, r0
 800f45a:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f45c:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f45e:	4302      	orrs	r2, r0
 800f460:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f462:	4302      	orrs	r2, r0
 800f464:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f466:	4302      	orrs	r2, r0
 800f468:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800f46a:	4302      	orrs	r2, r0
 800f46c:	68a0      	ldr	r0, [r4, #8]
 800f46e:	4302      	orrs	r2, r0
 800f470:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f472:	3801      	subs	r0, #1
 800f474:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f478:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f47a:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f47c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f480:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f482:	d103      	bne.n	800f48c <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800f484:	691a      	ldr	r2, [r3, #16]
 800f486:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800f48a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800f48c:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f48e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f490:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 800f492:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f494:	db1f      	blt.n	800f4d6 <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800f496:	b292      	uxth	r2, r2
 800f498:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f49a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f49c:	2a00      	cmp	r2, #0
 800f49e:	db24      	blt.n	800f4ea <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f4a0:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f4a2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f4a6:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800f4aa:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f4ac:	d029      	beq.n	800f502 <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800f4ae:	b2c0      	uxtb	r0, r0
 800f4b0:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800f4b2:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800f4b4:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800f4b6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 800f4b8:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f4ba:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800f4bc:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800f4be:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f4c2:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 800f4c6:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800f4c8:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f4ca:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800f4cc:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f4ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800f4d2:	2001      	movs	r0, #1
}
 800f4d4:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f4d6:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800f4d8:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f4da:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f4de:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f4e0:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f4e2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f4e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f4e6:	2a00      	cmp	r2, #0
 800f4e8:	dada      	bge.n	800f4a0 <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f4ea:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800f4ec:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f4ee:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f4f2:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800f4f6:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f4f8:	6a19      	ldr	r1, [r3, #32]
 800f4fa:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800f4fe:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f500:	d1d5      	bne.n	800f4ae <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800f502:	2200      	movs	r2, #0
 800f504:	629a      	str	r2, [r3, #40]	@ 0x28
 800f506:	e7d4      	b.n	800f4b2 <HAL_MDMA_Init+0x9e>

0800f508 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800f508:	b1f8      	cbz	r0, 800f54a <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
 800f50a:	6802      	ldr	r2, [r0, #0]
 800f50c:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
 800f50e:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800f510:	68d0      	ldr	r0, [r2, #12]
{
 800f512:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
 800f514:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800f518:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
 800f51a:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
 800f51c:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
 800f51e:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800f520:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800f522:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800f524:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800f526:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800f528:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800f52a:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800f52c:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800f52e:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800f530:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800f532:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f534:	668b      	str	r3, [r1, #104]	@ 0x68
  __HAL_UNLOCK(hmdma);
 800f536:	f881 303c 	strb.w	r3, [r1, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 800f53a:	f881 303d 	strb.w	r3, [r1, #61]	@ 0x3d
}
 800f53e:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
 800f542:	664b      	str	r3, [r1, #100]	@ 0x64
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f544:	e9c1 3317 	strd	r3, r3, [r1, #92]	@ 0x5c
}
 800f548:	4770      	bx	lr
    return HAL_ERROR;
 800f54a:	2001      	movs	r0, #1
}
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop

0800f550 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800f550:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800f552:	4c10      	ldr	r4, [pc, #64]	@ (800f594 <HAL_PWREx_ConfigSupply+0x44>)
 800f554:	68e3      	ldr	r3, [r4, #12]
 800f556:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f55a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800f55c:	d105      	bne.n	800f56a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f55e:	f003 0307 	and.w	r3, r3, #7
 800f562:	1a18      	subs	r0, r3, r0
 800f564:	bf18      	it	ne
 800f566:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800f568:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800f56a:	f023 0307 	bic.w	r3, r3, #7
 800f56e:	4303      	orrs	r3, r0
 800f570:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800f572:	f7fe fb9d 	bl	800dcb0 <HAL_GetTick>
 800f576:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f578:	e005      	b.n	800f586 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f57a:	f7fe fb99 	bl	800dcb0 <HAL_GetTick>
 800f57e:	1b40      	subs	r0, r0, r5
 800f580:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800f584:	d804      	bhi.n	800f590 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f586:	6863      	ldr	r3, [r4, #4]
 800f588:	049b      	lsls	r3, r3, #18
 800f58a:	d5f6      	bpl.n	800f57a <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 800f58c:	2000      	movs	r0, #0
}
 800f58e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800f590:	2001      	movs	r0, #1
}
 800f592:	bd38      	pop	{r3, r4, r5, pc}
 800f594:	58024800 	.word	0x58024800

0800f598 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f598:	4b33      	ldr	r3, [pc, #204]	@ (800f668 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800f59a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f59c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f59e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f5a0:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800f5a2:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f5a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f5a8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800f5ac:	d036      	beq.n	800f61c <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f5ae:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f5b2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f5b6:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f5ba:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f5be:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 800f5c2:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f5c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f5c8:	ee06 2a90 	vmov	s13, r2
 800f5cc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800f5d0:	d002      	beq.n	800f5d8 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800f5d2:	2902      	cmp	r1, #2
 800f5d4:	d042      	beq.n	800f65c <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800f5d6:	b319      	cbz	r1, 800f620 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f5d8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800f66c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800f5dc:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800f5e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5e6:	ee07 3a90 	vmov	s15, r3
 800f5ea:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800f5ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5f2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800f5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5fa:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800f5fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f668 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 800f600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f602:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f606:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800f608:	ee07 3a10 	vmov	s14, r3
 800f60c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800f610:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f614:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f618:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800f61c:	bc30      	pop	{r4, r5}
 800f61e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	0692      	lsls	r2, r2, #26
 800f624:	d51d      	bpl.n	800f662 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f626:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f628:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f62c:	4a10      	ldr	r2, [pc, #64]	@ (800f670 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f630:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f634:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f638:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f63a:	ee06 3a10 	vmov	s12, r3
 800f63e:	ee05 2a90 	vmov	s11, r2
 800f642:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800f646:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800f64a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800f64e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800f652:	ee36 7a26 	vadd.f32	s14, s12, s13
 800f656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f65a:	e7d0      	b.n	800f5fe <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f65c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800f674 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 800f660:	e7bc      	b.n	800f5dc <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f662:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800f678 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 800f666:	e7b9      	b.n	800f5dc <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800f668:	58024400 	.word	0x58024400
 800f66c:	4a742400 	.word	0x4a742400
 800f670:	03d09000 	.word	0x03d09000
 800f674:	4bbebc20 	.word	0x4bbebc20
 800f678:	4c742400 	.word	0x4c742400

0800f67c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800f67c:	2800      	cmp	r0, #0
 800f67e:	f000 82e7 	beq.w	800fc50 <HAL_RCC_OscConfig+0x5d4>
{
 800f682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f684:	6803      	ldr	r3, [r0, #0]
 800f686:	4604      	mov	r4, r0
 800f688:	07d9      	lsls	r1, r3, #31
 800f68a:	d52e      	bpl.n	800f6ea <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f68c:	4997      	ldr	r1, [pc, #604]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
 800f68e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f690:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f692:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f696:	2a10      	cmp	r2, #16
 800f698:	f000 80ee 	beq.w	800f878 <HAL_RCC_OscConfig+0x1fc>
 800f69c:	2a18      	cmp	r2, #24
 800f69e:	f000 80e6 	beq.w	800f86e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f6a2:	6863      	ldr	r3, [r4, #4]
 800f6a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f6a8:	f000 8111 	beq.w	800f8ce <HAL_RCC_OscConfig+0x252>
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	f000 8167 	beq.w	800f980 <HAL_RCC_OscConfig+0x304>
 800f6b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f6b6:	4b8d      	ldr	r3, [pc, #564]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	f000 8288 	beq.w	800fbce <HAL_RCC_OscConfig+0x552>
 800f6be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f6c2:	601a      	str	r2, [r3, #0]
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800f6ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800f6cc:	f7fe faf0 	bl	800dcb0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f6d0:	4e86      	ldr	r6, [pc, #536]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800f6d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f6d4:	e005      	b.n	800f6e2 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f6d6:	f7fe faeb 	bl	800dcb0 <HAL_GetTick>
 800f6da:	1b40      	subs	r0, r0, r5
 800f6dc:	2864      	cmp	r0, #100	@ 0x64
 800f6de:	f200 814d 	bhi.w	800f97c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f6e2:	6833      	ldr	r3, [r6, #0]
 800f6e4:	039b      	lsls	r3, r3, #14
 800f6e6:	d5f6      	bpl.n	800f6d6 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	079d      	lsls	r5, r3, #30
 800f6ec:	d470      	bmi.n	800f7d0 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f6ee:	06d9      	lsls	r1, r3, #27
 800f6f0:	d533      	bpl.n	800f75a <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f6f2:	4a7e      	ldr	r2, [pc, #504]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
 800f6f4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f6f6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f6f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f6fc:	2b08      	cmp	r3, #8
 800f6fe:	f000 80cb 	beq.w	800f898 <HAL_RCC_OscConfig+0x21c>
 800f702:	2b18      	cmp	r3, #24
 800f704:	f000 80c3 	beq.w	800f88e <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f708:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800f70a:	4d78      	ldr	r5, [pc, #480]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f000 816f 	beq.w	800f9f0 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 800f712:	682b      	ldr	r3, [r5, #0]
 800f714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f718:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f71a:	f7fe fac9 	bl	800dcb0 <HAL_GetTick>
 800f71e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f720:	e005      	b.n	800f72e <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f722:	f7fe fac5 	bl	800dcb0 <HAL_GetTick>
 800f726:	1b80      	subs	r0, r0, r6
 800f728:	2802      	cmp	r0, #2
 800f72a:	f200 8127 	bhi.w	800f97c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f72e:	682b      	ldr	r3, [r5, #0]
 800f730:	05db      	lsls	r3, r3, #23
 800f732:	d5f6      	bpl.n	800f722 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f734:	f7fe fad4 	bl	800dce0 <HAL_GetREVID>
 800f738:	f241 0303 	movw	r3, #4099	@ 0x1003
 800f73c:	4298      	cmp	r0, r3
 800f73e:	f200 8267 	bhi.w	800fc10 <HAL_RCC_OscConfig+0x594>
 800f742:	6a22      	ldr	r2, [r4, #32]
 800f744:	686b      	ldr	r3, [r5, #4]
 800f746:	2a20      	cmp	r2, #32
 800f748:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f74c:	bf0c      	ite	eq
 800f74e:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800f752:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800f756:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f758:	6823      	ldr	r3, [r4, #0]
 800f75a:	071d      	lsls	r5, r3, #28
 800f75c:	d516      	bpl.n	800f78c <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f75e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800f760:	4d62      	ldr	r5, [pc, #392]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f762:	2b00      	cmp	r3, #0
 800f764:	f000 8122 	beq.w	800f9ac <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 800f768:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f76a:	f043 0301 	orr.w	r3, r3, #1
 800f76e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800f770:	f7fe fa9e 	bl	800dcb0 <HAL_GetTick>
 800f774:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f776:	e005      	b.n	800f784 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f778:	f7fe fa9a 	bl	800dcb0 <HAL_GetTick>
 800f77c:	1b80      	subs	r0, r0, r6
 800f77e:	2802      	cmp	r0, #2
 800f780:	f200 80fc 	bhi.w	800f97c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f784:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f786:	0798      	lsls	r0, r3, #30
 800f788:	d5f6      	bpl.n	800f778 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f78a:	6823      	ldr	r3, [r4, #0]
 800f78c:	069a      	lsls	r2, r3, #26
 800f78e:	d516      	bpl.n	800f7be <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800f790:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800f792:	4d56      	ldr	r5, [pc, #344]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800f794:	2b00      	cmp	r3, #0
 800f796:	f000 811a 	beq.w	800f9ce <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 800f79a:	682b      	ldr	r3, [r5, #0]
 800f79c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f7a0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800f7a2:	f7fe fa85 	bl	800dcb0 <HAL_GetTick>
 800f7a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f7a8:	e005      	b.n	800f7b6 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f7aa:	f7fe fa81 	bl	800dcb0 <HAL_GetTick>
 800f7ae:	1b80      	subs	r0, r0, r6
 800f7b0:	2802      	cmp	r0, #2
 800f7b2:	f200 80e3 	bhi.w	800f97c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f7b6:	682b      	ldr	r3, [r5, #0]
 800f7b8:	049f      	lsls	r7, r3, #18
 800f7ba:	d5f6      	bpl.n	800f7aa <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f7bc:	6823      	ldr	r3, [r4, #0]
 800f7be:	0759      	lsls	r1, r3, #29
 800f7c0:	f100 808b 	bmi.w	800f8da <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f7c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	f040 80bf 	bne.w	800f94a <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 800f7cc:	2000      	movs	r0, #0
}
 800f7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f7d0:	4a46      	ldr	r2, [pc, #280]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
 800f7d2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f7d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f7d6:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800f7da:	d12d      	bne.n	800f838 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f7dc:	4b43      	ldr	r3, [pc, #268]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f7de:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	0759      	lsls	r1, r3, #29
 800f7e4:	d501      	bpl.n	800f7ea <HAL_RCC_OscConfig+0x16e>
 800f7e6:	2a00      	cmp	r2, #0
 800f7e8:	d04f      	beq.n	800f88a <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f7ea:	4d40      	ldr	r5, [pc, #256]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
 800f7ec:	682b      	ldr	r3, [r5, #0]
 800f7ee:	f023 0319 	bic.w	r3, r3, #25
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f7f6:	f7fe fa5b 	bl	800dcb0 <HAL_GetTick>
 800f7fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f7fc:	e005      	b.n	800f80a <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f7fe:	f7fe fa57 	bl	800dcb0 <HAL_GetTick>
 800f802:	1b80      	subs	r0, r0, r6
 800f804:	2802      	cmp	r0, #2
 800f806:	f200 80b9 	bhi.w	800f97c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f80a:	682b      	ldr	r3, [r5, #0]
 800f80c:	075b      	lsls	r3, r3, #29
 800f80e:	d5f6      	bpl.n	800f7fe <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f810:	f7fe fa66 	bl	800dce0 <HAL_GetREVID>
 800f814:	f241 0303 	movw	r3, #4099	@ 0x1003
 800f818:	4298      	cmp	r0, r3
 800f81a:	f200 8110 	bhi.w	800fa3e <HAL_RCC_OscConfig+0x3c2>
 800f81e:	6922      	ldr	r2, [r4, #16]
 800f820:	686b      	ldr	r3, [r5, #4]
 800f822:	2a40      	cmp	r2, #64	@ 0x40
 800f824:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800f828:	bf0c      	ite	eq
 800f82a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800f82e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800f832:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f834:	6823      	ldr	r3, [r4, #0]
 800f836:	e75a      	b.n	800f6ee <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f838:	2b18      	cmp	r3, #24
 800f83a:	f000 80fc 	beq.w	800fa36 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f83e:	4d2b      	ldr	r5, [pc, #172]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f840:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f842:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f844:	2a00      	cmp	r2, #0
 800f846:	f000 80e5 	beq.w	800fa14 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f84a:	f023 0319 	bic.w	r3, r3, #25
 800f84e:	4313      	orrs	r3, r2
 800f850:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f852:	f7fe fa2d 	bl	800dcb0 <HAL_GetTick>
 800f856:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f858:	e005      	b.n	800f866 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f85a:	f7fe fa29 	bl	800dcb0 <HAL_GetTick>
 800f85e:	1b80      	subs	r0, r0, r6
 800f860:	2802      	cmp	r0, #2
 800f862:	f200 808b 	bhi.w	800f97c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f866:	682b      	ldr	r3, [r5, #0]
 800f868:	075f      	lsls	r7, r3, #29
 800f86a:	d5f6      	bpl.n	800f85a <HAL_RCC_OscConfig+0x1de>
 800f86c:	e7d0      	b.n	800f810 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f86e:	f001 0103 	and.w	r1, r1, #3
 800f872:	2902      	cmp	r1, #2
 800f874:	f47f af15 	bne.w	800f6a2 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f878:	4a1c      	ldr	r2, [pc, #112]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
 800f87a:	6812      	ldr	r2, [r2, #0]
 800f87c:	0392      	lsls	r2, r2, #14
 800f87e:	f57f af34 	bpl.w	800f6ea <HAL_RCC_OscConfig+0x6e>
 800f882:	6862      	ldr	r2, [r4, #4]
 800f884:	2a00      	cmp	r2, #0
 800f886:	f47f af30 	bne.w	800f6ea <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 800f88a:	2001      	movs	r0, #1
}
 800f88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f88e:	f002 0203 	and.w	r2, r2, #3
 800f892:	2a01      	cmp	r2, #1
 800f894:	f47f af38 	bne.w	800f708 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f898:	4b14      	ldr	r3, [pc, #80]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	05da      	lsls	r2, r3, #23
 800f89e:	d502      	bpl.n	800f8a6 <HAL_RCC_OscConfig+0x22a>
 800f8a0:	69e3      	ldr	r3, [r4, #28]
 800f8a2:	2b80      	cmp	r3, #128	@ 0x80
 800f8a4:	d1f1      	bne.n	800f88a <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f8a6:	f7fe fa1b 	bl	800dce0 <HAL_GetREVID>
 800f8aa:	f241 0303 	movw	r3, #4099	@ 0x1003
 800f8ae:	4298      	cmp	r0, r3
 800f8b0:	f200 80ce 	bhi.w	800fa50 <HAL_RCC_OscConfig+0x3d4>
 800f8b4:	6a22      	ldr	r2, [r4, #32]
 800f8b6:	2a20      	cmp	r2, #32
 800f8b8:	f000 81b9 	beq.w	800fc2e <HAL_RCC_OscConfig+0x5b2>
 800f8bc:	490b      	ldr	r1, [pc, #44]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
 800f8be:	684b      	ldr	r3, [r1, #4]
 800f8c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f8c4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800f8c8:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f8ca:	6823      	ldr	r3, [r4, #0]
 800f8cc:	e745      	b.n	800f75a <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f8ce:	4a07      	ldr	r2, [pc, #28]	@ (800f8ec <HAL_RCC_OscConfig+0x270>)
 800f8d0:	6813      	ldr	r3, [r2, #0]
 800f8d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f8d6:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f8d8:	e6f8      	b.n	800f6cc <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800f8da:	4d05      	ldr	r5, [pc, #20]	@ (800f8f0 <HAL_RCC_OscConfig+0x274>)
 800f8dc:	682b      	ldr	r3, [r5, #0]
 800f8de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f8e2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800f8e4:	f7fe f9e4 	bl	800dcb0 <HAL_GetTick>
 800f8e8:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f8ea:	e008      	b.n	800f8fe <HAL_RCC_OscConfig+0x282>
 800f8ec:	58024400 	.word	0x58024400
 800f8f0:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f8f4:	f7fe f9dc 	bl	800dcb0 <HAL_GetTick>
 800f8f8:	1b80      	subs	r0, r0, r6
 800f8fa:	2864      	cmp	r0, #100	@ 0x64
 800f8fc:	d83e      	bhi.n	800f97c <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f8fe:	682b      	ldr	r3, [r5, #0]
 800f900:	05da      	lsls	r2, r3, #23
 800f902:	d5f7      	bpl.n	800f8f4 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f904:	68a3      	ldr	r3, [r4, #8]
 800f906:	2b01      	cmp	r3, #1
 800f908:	f000 818b 	beq.w	800fc22 <HAL_RCC_OscConfig+0x5a6>
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 8166 	beq.w	800fbde <HAL_RCC_OscConfig+0x562>
 800f912:	2b05      	cmp	r3, #5
 800f914:	4b85      	ldr	r3, [pc, #532]	@ (800fb2c <HAL_RCC_OscConfig+0x4b0>)
 800f916:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f918:	f000 8192 	beq.w	800fc40 <HAL_RCC_OscConfig+0x5c4>
 800f91c:	f022 0201 	bic.w	r2, r2, #1
 800f920:	671a      	str	r2, [r3, #112]	@ 0x70
 800f922:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f924:	f022 0204 	bic.w	r2, r2, #4
 800f928:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800f92a:	f7fe f9c1 	bl	800dcb0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f92e:	4e7f      	ldr	r6, [pc, #508]	@ (800fb2c <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f930:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800f934:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f936:	e004      	b.n	800f942 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f938:	f7fe f9ba 	bl	800dcb0 <HAL_GetTick>
 800f93c:	1b40      	subs	r0, r0, r5
 800f93e:	42b8      	cmp	r0, r7
 800f940:	d81c      	bhi.n	800f97c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f942:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800f944:	079b      	lsls	r3, r3, #30
 800f946:	d5f7      	bpl.n	800f938 <HAL_RCC_OscConfig+0x2bc>
 800f948:	e73c      	b.n	800f7c4 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f94a:	4d78      	ldr	r5, [pc, #480]	@ (800fb2c <HAL_RCC_OscConfig+0x4b0>)
 800f94c:	692a      	ldr	r2, [r5, #16]
 800f94e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800f952:	2a18      	cmp	r2, #24
 800f954:	f000 80ee 	beq.w	800fb34 <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f958:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800f95a:	682b      	ldr	r3, [r5, #0]
 800f95c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f960:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f962:	d07f      	beq.n	800fa64 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 800f964:	f7fe f9a4 	bl	800dcb0 <HAL_GetTick>
 800f968:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f96a:	682b      	ldr	r3, [r5, #0]
 800f96c:	019b      	lsls	r3, r3, #6
 800f96e:	f57f af2d 	bpl.w	800f7cc <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f972:	f7fe f99d 	bl	800dcb0 <HAL_GetTick>
 800f976:	1b00      	subs	r0, r0, r4
 800f978:	2802      	cmp	r0, #2
 800f97a:	d9f6      	bls.n	800f96a <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 800f97c:	2003      	movs	r0, #3
}
 800f97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f980:	4d6a      	ldr	r5, [pc, #424]	@ (800fb2c <HAL_RCC_OscConfig+0x4b0>)
 800f982:	682b      	ldr	r3, [r5, #0]
 800f984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f988:	602b      	str	r3, [r5, #0]
 800f98a:	682b      	ldr	r3, [r5, #0]
 800f98c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f990:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f992:	f7fe f98d 	bl	800dcb0 <HAL_GetTick>
 800f996:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f998:	e004      	b.n	800f9a4 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f99a:	f7fe f989 	bl	800dcb0 <HAL_GetTick>
 800f99e:	1b80      	subs	r0, r0, r6
 800f9a0:	2864      	cmp	r0, #100	@ 0x64
 800f9a2:	d8eb      	bhi.n	800f97c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f9a4:	682b      	ldr	r3, [r5, #0]
 800f9a6:	039f      	lsls	r7, r3, #14
 800f9a8:	d4f7      	bmi.n	800f99a <HAL_RCC_OscConfig+0x31e>
 800f9aa:	e69d      	b.n	800f6e8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800f9ac:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f9ae:	f023 0301 	bic.w	r3, r3, #1
 800f9b2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800f9b4:	f7fe f97c 	bl	800dcb0 <HAL_GetTick>
 800f9b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f9ba:	e004      	b.n	800f9c6 <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f9bc:	f7fe f978 	bl	800dcb0 <HAL_GetTick>
 800f9c0:	1b80      	subs	r0, r0, r6
 800f9c2:	2802      	cmp	r0, #2
 800f9c4:	d8da      	bhi.n	800f97c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f9c6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f9c8:	0799      	lsls	r1, r3, #30
 800f9ca:	d4f7      	bmi.n	800f9bc <HAL_RCC_OscConfig+0x340>
 800f9cc:	e6dd      	b.n	800f78a <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 800f9ce:	682b      	ldr	r3, [r5, #0]
 800f9d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f9d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800f9d6:	f7fe f96b 	bl	800dcb0 <HAL_GetTick>
 800f9da:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f9dc:	e004      	b.n	800f9e8 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f9de:	f7fe f967 	bl	800dcb0 <HAL_GetTick>
 800f9e2:	1b80      	subs	r0, r0, r6
 800f9e4:	2802      	cmp	r0, #2
 800f9e6:	d8c9      	bhi.n	800f97c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	0498      	lsls	r0, r3, #18
 800f9ec:	d4f7      	bmi.n	800f9de <HAL_RCC_OscConfig+0x362>
 800f9ee:	e6e5      	b.n	800f7bc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f9f8:	f7fe f95a 	bl	800dcb0 <HAL_GetTick>
 800f9fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f9fe:	e004      	b.n	800fa0a <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800fa00:	f7fe f956 	bl	800dcb0 <HAL_GetTick>
 800fa04:	1b80      	subs	r0, r0, r6
 800fa06:	2802      	cmp	r0, #2
 800fa08:	d8b8      	bhi.n	800f97c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800fa0a:	682b      	ldr	r3, [r5, #0]
 800fa0c:	05df      	lsls	r7, r3, #23
 800fa0e:	d4f7      	bmi.n	800fa00 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fa10:	6823      	ldr	r3, [r4, #0]
 800fa12:	e6a2      	b.n	800f75a <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 800fa14:	f023 0301 	bic.w	r3, r3, #1
 800fa18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fa1a:	f7fe f949 	bl	800dcb0 <HAL_GetTick>
 800fa1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fa20:	e004      	b.n	800fa2c <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fa22:	f7fe f945 	bl	800dcb0 <HAL_GetTick>
 800fa26:	1b80      	subs	r0, r0, r6
 800fa28:	2802      	cmp	r0, #2
 800fa2a:	d8a7      	bhi.n	800f97c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fa2c:	682b      	ldr	r3, [r5, #0]
 800fa2e:	0758      	lsls	r0, r3, #29
 800fa30:	d4f7      	bmi.n	800fa22 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fa32:	6823      	ldr	r3, [r4, #0]
 800fa34:	e65b      	b.n	800f6ee <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800fa36:	0790      	lsls	r0, r2, #30
 800fa38:	f47f af01 	bne.w	800f83e <HAL_RCC_OscConfig+0x1c2>
 800fa3c:	e6ce      	b.n	800f7dc <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa3e:	686b      	ldr	r3, [r5, #4]
 800fa40:	6922      	ldr	r2, [r4, #16]
 800fa42:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800fa46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fa4a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fa4c:	6823      	ldr	r3, [r4, #0]
 800fa4e:	e64e      	b.n	800f6ee <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fa50:	4a36      	ldr	r2, [pc, #216]	@ (800fb2c <HAL_RCC_OscConfig+0x4b0>)
 800fa52:	6a21      	ldr	r1, [r4, #32]
 800fa54:	68d3      	ldr	r3, [r2, #12]
 800fa56:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800fa5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800fa5e:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fa60:	6823      	ldr	r3, [r4, #0]
 800fa62:	e67a      	b.n	800f75a <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 800fa64:	f7fe f924 	bl	800dcb0 <HAL_GetTick>
 800fa68:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fa6a:	e004      	b.n	800fa76 <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fa6c:	f7fe f920 	bl	800dcb0 <HAL_GetTick>
 800fa70:	1b80      	subs	r0, r0, r6
 800fa72:	2802      	cmp	r0, #2
 800fa74:	d882      	bhi.n	800f97c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fa76:	682b      	ldr	r3, [r5, #0]
 800fa78:	0199      	lsls	r1, r3, #6
 800fa7a:	d4f7      	bmi.n	800fa6c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fa7c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800fa7e:	4b2c      	ldr	r3, [pc, #176]	@ (800fb30 <HAL_RCC_OscConfig+0x4b4>)
 800fa80:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800fa82:	400b      	ands	r3, r1
 800fa84:	4313      	orrs	r3, r2
 800fa86:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fa88:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800fa8c:	62ab      	str	r3, [r5, #40]	@ 0x28
 800fa8e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fa90:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 800fa94:	3901      	subs	r1, #1
 800fa96:	3b01      	subs	r3, #1
 800fa98:	3a01      	subs	r2, #1
 800fa9a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800fa9e:	025b      	lsls	r3, r3, #9
 800faa0:	0412      	lsls	r2, r2, #16
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800faa8:	4313      	orrs	r3, r2
 800faaa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800faac:	3a01      	subs	r2, #1
 800faae:	430b      	orrs	r3, r1
 800fab0:	0612      	lsls	r2, r2, #24
 800fab2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800fab6:	4313      	orrs	r3, r2
 800fab8:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800faba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fabc:	f023 0301 	bic.w	r3, r3, #1
 800fac0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fac2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800fac4:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800fac6:	f36f 03cf 	bfc	r3, #3, #13
 800faca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800face:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800fad0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fad2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800fad4:	f023 030c 	bic.w	r3, r3, #12
 800fad8:	4313      	orrs	r3, r2
 800fada:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800fadc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fade:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800fae0:	f023 0302 	bic.w	r3, r3, #2
 800fae4:	4313      	orrs	r3, r2
 800fae6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800fae8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800faea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800faee:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800faf0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800faf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800faf6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800faf8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fafa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800fafe:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800fb00:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fb02:	f043 0301 	orr.w	r3, r3, #1
 800fb06:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800fb08:	682b      	ldr	r3, [r5, #0]
 800fb0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fb0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fb10:	f7fe f8ce 	bl	800dcb0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fb14:	4d05      	ldr	r5, [pc, #20]	@ (800fb2c <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 800fb16:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fb18:	682b      	ldr	r3, [r5, #0]
 800fb1a:	019a      	lsls	r2, r3, #6
 800fb1c:	f53f ae56 	bmi.w	800f7cc <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb20:	f7fe f8c6 	bl	800dcb0 <HAL_GetTick>
 800fb24:	1b00      	subs	r0, r0, r4
 800fb26:	2802      	cmp	r0, #2
 800fb28:	d9f6      	bls.n	800fb18 <HAL_RCC_OscConfig+0x49c>
 800fb2a:	e727      	b.n	800f97c <HAL_RCC_OscConfig+0x300>
 800fb2c:	58024400 	.word	0x58024400
 800fb30:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fb34:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800fb36:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800fb38:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fb3a:	f43f aea6 	beq.w	800f88a <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fb3e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fb42:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800fb44:	428b      	cmp	r3, r1
 800fb46:	f47f aea0 	bne.w	800f88a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fb4a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fb4e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fb50:	429a      	cmp	r2, r3
 800fb52:	f47f ae9a 	bne.w	800f88a <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fb56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb58:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800fb5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	f47f ae93 	bne.w	800f88a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fb64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb66:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800fb6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	f47f ae8c 	bne.w	800f88a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fb72:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800fb74:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800fb78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	f47f ae85 	bne.w	800f88a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800fb80:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fb82:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800fb86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fb88:	4298      	cmp	r0, r3
 800fb8a:	f47f ae7e 	bne.w	800f88a <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800fb8e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800fb90:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800fb92:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800fb96:	429a      	cmp	r2, r3
 800fb98:	f43f ae18 	beq.w	800f7cc <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 800fb9c:	4a2d      	ldr	r2, [pc, #180]	@ (800fc54 <HAL_RCC_OscConfig+0x5d8>)
 800fb9e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800fba0:	f023 0301 	bic.w	r3, r3, #1
 800fba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800fba6:	f7fe f883 	bl	800dcb0 <HAL_GetTick>
 800fbaa:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800fbac:	f7fe f880 	bl	800dcb0 <HAL_GetTick>
 800fbb0:	42a8      	cmp	r0, r5
 800fbb2:	d0fb      	beq.n	800fbac <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fbb4:	4a27      	ldr	r2, [pc, #156]	@ (800fc54 <HAL_RCC_OscConfig+0x5d8>)
 800fbb6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fbb8:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800fbba:	f36f 03cf 	bfc	r3, #3, #13
 800fbbe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800fbc2:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800fbc4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800fbc6:	f043 0301 	orr.w	r3, r3, #1
 800fbca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fbcc:	e5fe      	b.n	800f7cc <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fbce:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800fbd2:	601a      	str	r2, [r3, #0]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800fbda:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fbdc:	e576      	b.n	800f6cc <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fbde:	4d1d      	ldr	r5, [pc, #116]	@ (800fc54 <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbe0:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fbe4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fbe6:	f023 0301 	bic.w	r3, r3, #1
 800fbea:	672b      	str	r3, [r5, #112]	@ 0x70
 800fbec:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fbee:	f023 0304 	bic.w	r3, r3, #4
 800fbf2:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800fbf4:	f7fe f85c 	bl	800dcb0 <HAL_GetTick>
 800fbf8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fbfa:	e005      	b.n	800fc08 <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbfc:	f7fe f858 	bl	800dcb0 <HAL_GetTick>
 800fc00:	1b80      	subs	r0, r0, r6
 800fc02:	42b8      	cmp	r0, r7
 800fc04:	f63f aeba 	bhi.w	800f97c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fc08:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fc0a:	0798      	lsls	r0, r3, #30
 800fc0c:	d4f6      	bmi.n	800fbfc <HAL_RCC_OscConfig+0x580>
 800fc0e:	e5d9      	b.n	800f7c4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fc10:	68eb      	ldr	r3, [r5, #12]
 800fc12:	6a22      	ldr	r2, [r4, #32]
 800fc14:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800fc18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fc1c:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc1e:	6823      	ldr	r3, [r4, #0]
 800fc20:	e59b      	b.n	800f75a <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fc22:	4a0c      	ldr	r2, [pc, #48]	@ (800fc54 <HAL_RCC_OscConfig+0x5d8>)
 800fc24:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800fc26:	f043 0301 	orr.w	r3, r3, #1
 800fc2a:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fc2c:	e67d      	b.n	800f92a <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fc2e:	4a09      	ldr	r2, [pc, #36]	@ (800fc54 <HAL_RCC_OscConfig+0x5d8>)
 800fc30:	6853      	ldr	r3, [r2, #4]
 800fc32:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800fc36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fc3a:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	e58c      	b.n	800f75a <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fc40:	f042 0204 	orr.w	r2, r2, #4
 800fc44:	671a      	str	r2, [r3, #112]	@ 0x70
 800fc46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fc48:	f042 0201 	orr.w	r2, r2, #1
 800fc4c:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fc4e:	e66c      	b.n	800f92a <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 800fc50:	2001      	movs	r0, #1
}
 800fc52:	4770      	bx	lr
 800fc54:	58024400 	.word	0x58024400

0800fc58 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fc58:	4a3f      	ldr	r2, [pc, #252]	@ (800fd58 <HAL_RCC_GetSysClockFreq+0x100>)
 800fc5a:	6913      	ldr	r3, [r2, #16]
 800fc5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fc60:	2b10      	cmp	r3, #16
 800fc62:	d04f      	beq.n	800fd04 <HAL_RCC_GetSysClockFreq+0xac>
 800fc64:	2b18      	cmp	r3, #24
 800fc66:	d00a      	beq.n	800fc7e <HAL_RCC_GetSysClockFreq+0x26>
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d14d      	bne.n	800fd08 <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc6c:	6813      	ldr	r3, [r2, #0]
 800fc6e:	0699      	lsls	r1, r3, #26
 800fc70:	d54c      	bpl.n	800fd0c <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fc72:	6813      	ldr	r3, [r2, #0]
 800fc74:	4839      	ldr	r0, [pc, #228]	@ (800fd5c <HAL_RCC_GetSysClockFreq+0x104>)
 800fc76:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fc7a:	40d8      	lsrs	r0, r3
 800fc7c:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fc7e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 800fc80:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800fc82:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fc84:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 800fc86:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fc8a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800fc8c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800fc90:	d036      	beq.n	800fd00 <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fc92:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fc96:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fc9a:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc9e:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fca2:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 800fca6:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcac:	ee06 3a90 	vmov	s13, r3
 800fcb0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800fcb4:	d002      	beq.n	800fcbc <HAL_RCC_GetSysClockFreq+0x64>
 800fcb6:	2902      	cmp	r1, #2
 800fcb8:	d048      	beq.n	800fd4c <HAL_RCC_GetSysClockFreq+0xf4>
 800fcba:	b349      	cbz	r1, 800fd10 <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fcbc:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800fd60 <HAL_RCC_GetSysClockFreq+0x108>
 800fcc0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800fcc4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800fcc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcca:	ee07 3a10 	vmov	s14, r3
 800fcce:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800fcd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fcd6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fcda:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fcde:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800fce2:	4b1d      	ldr	r3, [pc, #116]	@ (800fd58 <HAL_RCC_GetSysClockFreq+0x100>)
 800fce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fce6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800fcea:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800fcec:	ee07 3a90 	vmov	s15, r3
 800fcf0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fcf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fcf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcfc:	ee17 0a90 	vmov	r0, s15
}
 800fd00:	bc30      	pop	{r4, r5}
 800fd02:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fd04:	4817      	ldr	r0, [pc, #92]	@ (800fd64 <HAL_RCC_GetSysClockFreq+0x10c>)
 800fd06:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 800fd08:	4817      	ldr	r0, [pc, #92]	@ (800fd68 <HAL_RCC_GetSysClockFreq+0x110>)
 800fd0a:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fd0c:	4813      	ldr	r0, [pc, #76]	@ (800fd5c <HAL_RCC_GetSysClockFreq+0x104>)
}
 800fd0e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd10:	6813      	ldr	r3, [r2, #0]
 800fd12:	069b      	lsls	r3, r3, #26
 800fd14:	d51d      	bpl.n	800fd52 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd16:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fd1c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd1e:	490f      	ldr	r1, [pc, #60]	@ (800fd5c <HAL_RCC_GetSysClockFreq+0x104>)
 800fd20:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd28:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd2a:	ee06 3a10 	vmov	s12, r3
 800fd2e:	ee05 1a90 	vmov	s11, r1
 800fd32:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fd36:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800fd3a:	ee36 6a07 	vadd.f32	s12, s12, s14
 800fd3e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800fd42:	ee76 7a26 	vadd.f32	s15, s12, s13
 800fd46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd4a:	e7ca      	b.n	800fce2 <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd4c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800fd6c <HAL_RCC_GetSysClockFreq+0x114>
 800fd50:	e7b6      	b.n	800fcc0 <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd52:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800fd70 <HAL_RCC_GetSysClockFreq+0x118>
 800fd56:	e7b3      	b.n	800fcc0 <HAL_RCC_GetSysClockFreq+0x68>
 800fd58:	58024400 	.word	0x58024400
 800fd5c:	03d09000 	.word	0x03d09000
 800fd60:	4a742400 	.word	0x4a742400
 800fd64:	017d7840 	.word	0x017d7840
 800fd68:	003d0900 	.word	0x003d0900
 800fd6c:	4bbebc20 	.word	0x4bbebc20
 800fd70:	4c742400 	.word	0x4c742400

0800fd74 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800fd74:	2800      	cmp	r0, #0
 800fd76:	f000 810e 	beq.w	800ff96 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fd7a:	4a8d      	ldr	r2, [pc, #564]	@ (800ffb0 <HAL_RCC_ClockConfig+0x23c>)
 800fd7c:	6813      	ldr	r3, [r2, #0]
 800fd7e:	f003 030f 	and.w	r3, r3, #15
 800fd82:	428b      	cmp	r3, r1
{
 800fd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd88:	4604      	mov	r4, r0
 800fd8a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fd8c:	d20c      	bcs.n	800fda8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fd8e:	6813      	ldr	r3, [r2, #0]
 800fd90:	f023 030f 	bic.w	r3, r3, #15
 800fd94:	430b      	orrs	r3, r1
 800fd96:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fd98:	6813      	ldr	r3, [r2, #0]
 800fd9a:	f003 030f 	and.w	r3, r3, #15
 800fd9e:	428b      	cmp	r3, r1
 800fda0:	d002      	beq.n	800fda8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800fda2:	2001      	movs	r0, #1
}
 800fda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fda8:	6823      	ldr	r3, [r4, #0]
 800fdaa:	0758      	lsls	r0, r3, #29
 800fdac:	d50b      	bpl.n	800fdc6 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fdae:	4981      	ldr	r1, [pc, #516]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800fdb0:	6920      	ldr	r0, [r4, #16]
 800fdb2:	698a      	ldr	r2, [r1, #24]
 800fdb4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800fdb8:	4290      	cmp	r0, r2
 800fdba:	d904      	bls.n	800fdc6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fdbc:	698a      	ldr	r2, [r1, #24]
 800fdbe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800fdc2:	4302      	orrs	r2, r0
 800fdc4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fdc6:	0719      	lsls	r1, r3, #28
 800fdc8:	d50b      	bpl.n	800fde2 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fdca:	497a      	ldr	r1, [pc, #488]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800fdcc:	6960      	ldr	r0, [r4, #20]
 800fdce:	69ca      	ldr	r2, [r1, #28]
 800fdd0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800fdd4:	4290      	cmp	r0, r2
 800fdd6:	d904      	bls.n	800fde2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fdd8:	69ca      	ldr	r2, [r1, #28]
 800fdda:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800fdde:	4302      	orrs	r2, r0
 800fde0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fde2:	06da      	lsls	r2, r3, #27
 800fde4:	d50b      	bpl.n	800fdfe <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fde6:	4973      	ldr	r1, [pc, #460]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800fde8:	69a0      	ldr	r0, [r4, #24]
 800fdea:	69ca      	ldr	r2, [r1, #28]
 800fdec:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800fdf0:	4290      	cmp	r0, r2
 800fdf2:	d904      	bls.n	800fdfe <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fdf4:	69ca      	ldr	r2, [r1, #28]
 800fdf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800fdfa:	4302      	orrs	r2, r0
 800fdfc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fdfe:	069f      	lsls	r7, r3, #26
 800fe00:	d50b      	bpl.n	800fe1a <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fe02:	496c      	ldr	r1, [pc, #432]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800fe04:	69e0      	ldr	r0, [r4, #28]
 800fe06:	6a0a      	ldr	r2, [r1, #32]
 800fe08:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800fe0c:	4290      	cmp	r0, r2
 800fe0e:	d904      	bls.n	800fe1a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800fe10:	6a0a      	ldr	r2, [r1, #32]
 800fe12:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800fe16:	4302      	orrs	r2, r0
 800fe18:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fe1a:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fe1c:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fe20:	f140 80ab 	bpl.w	800ff7a <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fe24:	4e63      	ldr	r6, [pc, #396]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800fe26:	68e0      	ldr	r0, [r4, #12]
 800fe28:	69b1      	ldr	r1, [r6, #24]
 800fe2a:	f001 010f 	and.w	r1, r1, #15
 800fe2e:	4288      	cmp	r0, r1
 800fe30:	d904      	bls.n	800fe3c <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fe32:	69b1      	ldr	r1, [r6, #24]
 800fe34:	f021 010f 	bic.w	r1, r1, #15
 800fe38:	4301      	orrs	r1, r0
 800fe3a:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fe3c:	2a00      	cmp	r2, #0
 800fe3e:	d030      	beq.n	800fea2 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800fe40:	4a5c      	ldr	r2, [pc, #368]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800fe42:	68a1      	ldr	r1, [r4, #8]
 800fe44:	6993      	ldr	r3, [r2, #24]
 800fe46:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800fe4a:	430b      	orrs	r3, r1
 800fe4c:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fe4e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fe50:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fe52:	2902      	cmp	r1, #2
 800fe54:	f000 80a1 	beq.w	800ff9a <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fe58:	2903      	cmp	r1, #3
 800fe5a:	f000 8098 	beq.w	800ff8e <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800fe5e:	2901      	cmp	r1, #1
 800fe60:	f000 80a1 	beq.w	800ffa6 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fe64:	075f      	lsls	r7, r3, #29
 800fe66:	d59c      	bpl.n	800fda2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fe68:	4e52      	ldr	r6, [pc, #328]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fe6a:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fe6e:	6933      	ldr	r3, [r6, #16]
 800fe70:	f023 0307 	bic.w	r3, r3, #7
 800fe74:	430b      	orrs	r3, r1
 800fe76:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800fe78:	f7fd ff1a 	bl	800dcb0 <HAL_GetTick>
 800fe7c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fe7e:	e005      	b.n	800fe8c <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fe80:	f7fd ff16 	bl	800dcb0 <HAL_GetTick>
 800fe84:	1bc0      	subs	r0, r0, r7
 800fe86:	4540      	cmp	r0, r8
 800fe88:	f200 808b 	bhi.w	800ffa2 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fe8c:	6933      	ldr	r3, [r6, #16]
 800fe8e:	6862      	ldr	r2, [r4, #4]
 800fe90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe94:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800fe98:	d1f2      	bne.n	800fe80 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	079e      	lsls	r6, r3, #30
 800fe9e:	d506      	bpl.n	800feae <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fea0:	68e0      	ldr	r0, [r4, #12]
 800fea2:	4944      	ldr	r1, [pc, #272]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800fea4:	698a      	ldr	r2, [r1, #24]
 800fea6:	f002 020f 	and.w	r2, r2, #15
 800feaa:	4290      	cmp	r0, r2
 800feac:	d369      	bcc.n	800ff82 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800feae:	4940      	ldr	r1, [pc, #256]	@ (800ffb0 <HAL_RCC_ClockConfig+0x23c>)
 800feb0:	680a      	ldr	r2, [r1, #0]
 800feb2:	f002 020f 	and.w	r2, r2, #15
 800feb6:	42aa      	cmp	r2, r5
 800feb8:	d90a      	bls.n	800fed0 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800feba:	680a      	ldr	r2, [r1, #0]
 800febc:	f022 020f 	bic.w	r2, r2, #15
 800fec0:	432a      	orrs	r2, r5
 800fec2:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fec4:	680a      	ldr	r2, [r1, #0]
 800fec6:	f002 020f 	and.w	r2, r2, #15
 800feca:	42aa      	cmp	r2, r5
 800fecc:	f47f af69 	bne.w	800fda2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fed0:	0758      	lsls	r0, r3, #29
 800fed2:	d50b      	bpl.n	800feec <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fed4:	4937      	ldr	r1, [pc, #220]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800fed6:	6920      	ldr	r0, [r4, #16]
 800fed8:	698a      	ldr	r2, [r1, #24]
 800feda:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800fede:	4290      	cmp	r0, r2
 800fee0:	d204      	bcs.n	800feec <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fee2:	698a      	ldr	r2, [r1, #24]
 800fee4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800fee8:	4302      	orrs	r2, r0
 800feea:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800feec:	0719      	lsls	r1, r3, #28
 800feee:	d50b      	bpl.n	800ff08 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fef0:	4930      	ldr	r1, [pc, #192]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800fef2:	6960      	ldr	r0, [r4, #20]
 800fef4:	69ca      	ldr	r2, [r1, #28]
 800fef6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800fefa:	4290      	cmp	r0, r2
 800fefc:	d204      	bcs.n	800ff08 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fefe:	69ca      	ldr	r2, [r1, #28]
 800ff00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ff04:	4302      	orrs	r2, r0
 800ff06:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ff08:	06da      	lsls	r2, r3, #27
 800ff0a:	d50b      	bpl.n	800ff24 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ff0c:	4929      	ldr	r1, [pc, #164]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800ff0e:	69a0      	ldr	r0, [r4, #24]
 800ff10:	69ca      	ldr	r2, [r1, #28]
 800ff12:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800ff16:	4290      	cmp	r0, r2
 800ff18:	d204      	bcs.n	800ff24 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ff1a:	69ca      	ldr	r2, [r1, #28]
 800ff1c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ff20:	4302      	orrs	r2, r0
 800ff22:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ff24:	069b      	lsls	r3, r3, #26
 800ff26:	d50b      	bpl.n	800ff40 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ff28:	4a22      	ldr	r2, [pc, #136]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800ff2a:	69e1      	ldr	r1, [r4, #28]
 800ff2c:	6a13      	ldr	r3, [r2, #32]
 800ff2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ff32:	4299      	cmp	r1, r3
 800ff34:	d204      	bcs.n	800ff40 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ff36:	6a13      	ldr	r3, [r2, #32]
 800ff38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff3c:	430b      	orrs	r3, r1
 800ff3e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ff40:	f7ff fe8a 	bl	800fc58 <HAL_RCC_GetSysClockFreq>
 800ff44:	4a1b      	ldr	r2, [pc, #108]	@ (800ffb4 <HAL_RCC_ClockConfig+0x240>)
 800ff46:	4603      	mov	r3, r0
 800ff48:	481b      	ldr	r0, [pc, #108]	@ (800ffb8 <HAL_RCC_ClockConfig+0x244>)
 800ff4a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ff4c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ff4e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800ff52:	4d1a      	ldr	r5, [pc, #104]	@ (800ffbc <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ff54:	f002 020f 	and.w	r2, r2, #15
 800ff58:	4c19      	ldr	r4, [pc, #100]	@ (800ffc0 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ff5a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ff5c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ff5e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800ff62:	4818      	ldr	r0, [pc, #96]	@ (800ffc4 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ff64:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ff68:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800ff6a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800ff6c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ff6e:	40d3      	lsrs	r3, r2
 800ff70:	6023      	str	r3, [r4, #0]
}
 800ff72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800ff76:	f001 bc01 	b.w	801177c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ff7a:	2a00      	cmp	r2, #0
 800ff7c:	f47f af60 	bne.w	800fe40 <HAL_RCC_ClockConfig+0xcc>
 800ff80:	e795      	b.n	800feae <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ff82:	698a      	ldr	r2, [r1, #24]
 800ff84:	f022 020f 	bic.w	r2, r2, #15
 800ff88:	4302      	orrs	r2, r0
 800ff8a:	618a      	str	r2, [r1, #24]
 800ff8c:	e78f      	b.n	800feae <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ff8e:	019a      	lsls	r2, r3, #6
 800ff90:	f53f af6a 	bmi.w	800fe68 <HAL_RCC_ClockConfig+0xf4>
 800ff94:	e705      	b.n	800fda2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800ff96:	2001      	movs	r0, #1
}
 800ff98:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ff9a:	0398      	lsls	r0, r3, #14
 800ff9c:	f53f af64 	bmi.w	800fe68 <HAL_RCC_ClockConfig+0xf4>
 800ffa0:	e6ff      	b.n	800fda2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800ffa2:	2003      	movs	r0, #3
 800ffa4:	e6fe      	b.n	800fda4 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ffa6:	05db      	lsls	r3, r3, #23
 800ffa8:	f53f af5e 	bmi.w	800fe68 <HAL_RCC_ClockConfig+0xf4>
 800ffac:	e6f9      	b.n	800fda2 <HAL_RCC_ClockConfig+0x2e>
 800ffae:	bf00      	nop
 800ffb0:	52002000 	.word	0x52002000
 800ffb4:	58024400 	.word	0x58024400
 800ffb8:	08012ee8 	.word	0x08012ee8
 800ffbc:	24000034 	.word	0x24000034
 800ffc0:	24000030 	.word	0x24000030
 800ffc4:	24000130 	.word	0x24000130

0800ffc8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ffc8:	4a1c      	ldr	r2, [pc, #112]	@ (801003c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ffca:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ffcc:	6913      	ldr	r3, [r2, #16]
 800ffce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ffd2:	2b10      	cmp	r3, #16
 800ffd4:	d02b      	beq.n	801002e <HAL_RCC_GetPCLK1Freq+0x66>
 800ffd6:	2b18      	cmp	r3, #24
 800ffd8:	d009      	beq.n	800ffee <HAL_RCC_GetPCLK1Freq+0x26>
 800ffda:	bb53      	cbnz	r3, 8010032 <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ffdc:	6813      	ldr	r3, [r2, #0]
 800ffde:	069b      	lsls	r3, r3, #26
 800ffe0:	d529      	bpl.n	8010036 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ffe2:	6812      	ldr	r2, [r2, #0]
 800ffe4:	4b16      	ldr	r3, [pc, #88]	@ (8010040 <HAL_RCC_GetPCLK1Freq+0x78>)
 800ffe6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800ffea:	40d3      	lsrs	r3, r2
 800ffec:	e002      	b.n	800fff4 <HAL_RCC_GetPCLK1Freq+0x2c>
 800ffee:	f7ff fad3 	bl	800f598 <HAL_RCC_GetSysClockFreq.part.0>
 800fff2:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fff4:	4a11      	ldr	r2, [pc, #68]	@ (801003c <HAL_RCC_GetPCLK1Freq+0x74>)
 800fff6:	4913      	ldr	r1, [pc, #76]	@ (8010044 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800fff8:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 800fffa:	4d13      	ldr	r5, [pc, #76]	@ (8010048 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fffc:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010000:	4c12      	ldr	r4, [pc, #72]	@ (801004c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010002:	5c08      	ldrb	r0, [r1, r0]
 8010004:	f000 001f 	and.w	r0, r0, #31
 8010008:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801000a:	6990      	ldr	r0, [r2, #24]
 801000c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8010010:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010012:	5c08      	ldrb	r0, [r1, r0]
 8010014:	f000 001f 	and.w	r0, r0, #31
 8010018:	40c3      	lsrs	r3, r0
 801001a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801001c:	69d2      	ldr	r2, [r2, #28]
 801001e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8010022:	5c88      	ldrb	r0, [r1, r2]
 8010024:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8010028:	fa23 f000 	lsr.w	r0, r3, r0
 801002c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801002e:	4b08      	ldr	r3, [pc, #32]	@ (8010050 <HAL_RCC_GetPCLK1Freq+0x88>)
 8010030:	e7e0      	b.n	800fff4 <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 8010032:	4b08      	ldr	r3, [pc, #32]	@ (8010054 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8010034:	e7de      	b.n	800fff4 <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010036:	4b02      	ldr	r3, [pc, #8]	@ (8010040 <HAL_RCC_GetPCLK1Freq+0x78>)
 8010038:	e7dc      	b.n	800fff4 <HAL_RCC_GetPCLK1Freq+0x2c>
 801003a:	bf00      	nop
 801003c:	58024400 	.word	0x58024400
 8010040:	03d09000 	.word	0x03d09000
 8010044:	08012ee8 	.word	0x08012ee8
 8010048:	24000034 	.word	0x24000034
 801004c:	24000030 	.word	0x24000030
 8010050:	017d7840 	.word	0x017d7840
 8010054:	003d0900 	.word	0x003d0900

08010058 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010058:	4a1c      	ldr	r2, [pc, #112]	@ (80100cc <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801005a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801005c:	6913      	ldr	r3, [r2, #16]
 801005e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010062:	2b10      	cmp	r3, #16
 8010064:	d02b      	beq.n	80100be <HAL_RCC_GetPCLK2Freq+0x66>
 8010066:	2b18      	cmp	r3, #24
 8010068:	d009      	beq.n	801007e <HAL_RCC_GetPCLK2Freq+0x26>
 801006a:	bb53      	cbnz	r3, 80100c2 <HAL_RCC_GetPCLK2Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801006c:	6813      	ldr	r3, [r2, #0]
 801006e:	069b      	lsls	r3, r3, #26
 8010070:	d529      	bpl.n	80100c6 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010072:	6812      	ldr	r2, [r2, #0]
 8010074:	4b16      	ldr	r3, [pc, #88]	@ (80100d0 <HAL_RCC_GetPCLK2Freq+0x78>)
 8010076:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 801007a:	40d3      	lsrs	r3, r2
 801007c:	e002      	b.n	8010084 <HAL_RCC_GetPCLK2Freq+0x2c>
 801007e:	f7ff fa8b 	bl	800f598 <HAL_RCC_GetSysClockFreq.part.0>
 8010082:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010084:	4a11      	ldr	r2, [pc, #68]	@ (80100cc <HAL_RCC_GetPCLK2Freq+0x74>)
 8010086:	4913      	ldr	r1, [pc, #76]	@ (80100d4 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8010088:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 801008a:	4d13      	ldr	r5, [pc, #76]	@ (80100d8 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801008c:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010090:	4c12      	ldr	r4, [pc, #72]	@ (80100dc <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010092:	5c08      	ldrb	r0, [r1, r0]
 8010094:	f000 001f 	and.w	r0, r0, #31
 8010098:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801009a:	6990      	ldr	r0, [r2, #24]
 801009c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80100a0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80100a2:	5c08      	ldrb	r0, [r1, r0]
 80100a4:	f000 001f 	and.w	r0, r0, #31
 80100a8:	40c3      	lsrs	r3, r0
 80100aa:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80100ac:	69d2      	ldr	r2, [r2, #28]
 80100ae:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80100b2:	5c88      	ldrb	r0, [r1, r2]
 80100b4:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80100b8:	fa23 f000 	lsr.w	r0, r3, r0
 80100bc:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80100be:	4b08      	ldr	r3, [pc, #32]	@ (80100e0 <HAL_RCC_GetPCLK2Freq+0x88>)
 80100c0:	e7e0      	b.n	8010084 <HAL_RCC_GetPCLK2Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 80100c2:	4b08      	ldr	r3, [pc, #32]	@ (80100e4 <HAL_RCC_GetPCLK2Freq+0x8c>)
 80100c4:	e7de      	b.n	8010084 <HAL_RCC_GetPCLK2Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80100c6:	4b02      	ldr	r3, [pc, #8]	@ (80100d0 <HAL_RCC_GetPCLK2Freq+0x78>)
 80100c8:	e7dc      	b.n	8010084 <HAL_RCC_GetPCLK2Freq+0x2c>
 80100ca:	bf00      	nop
 80100cc:	58024400 	.word	0x58024400
 80100d0:	03d09000 	.word	0x03d09000
 80100d4:	08012ee8 	.word	0x08012ee8
 80100d8:	24000034 	.word	0x24000034
 80100dc:	24000030 	.word	0x24000030
 80100e0:	017d7840 	.word	0x017d7840
 80100e4:	003d0900 	.word	0x003d0900

080100e8 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80100e8:	4b13      	ldr	r3, [pc, #76]	@ (8010138 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80100ea:	223f      	movs	r2, #63	@ 0x3f
{
 80100ec:	b410      	push	{r4}
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80100ee:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80100f0:	691a      	ldr	r2, [r3, #16]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80100f2:	4c12      	ldr	r4, [pc, #72]	@ (801013c <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80100f4:	f002 0207 	and.w	r2, r2, #7
 80100f8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80100fa:	699a      	ldr	r2, [r3, #24]
 80100fc:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8010100:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8010102:	699a      	ldr	r2, [r3, #24]
 8010104:	f002 020f 	and.w	r2, r2, #15
 8010108:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801010a:	699a      	ldr	r2, [r3, #24]
 801010c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8010110:	6102      	str	r2, [r0, #16]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8010112:	69da      	ldr	r2, [r3, #28]
 8010114:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8010118:	6142      	str	r2, [r0, #20]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801011a:	69da      	ldr	r2, [r3, #28]
 801011c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8010120:	6182      	str	r2, [r0, #24]
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8010122:	6a1b      	ldr	r3, [r3, #32]
 8010124:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010128:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801012a:	6823      	ldr	r3, [r4, #0]
}
 801012c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010130:	f003 030f 	and.w	r3, r3, #15
 8010134:	600b      	str	r3, [r1, #0]
}
 8010136:	4770      	bx	lr
 8010138:	58024400 	.word	0x58024400
 801013c:	52002000 	.word	0x52002000

08010140 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8010140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010142:	4c36      	ldr	r4, [pc, #216]	@ (801021c <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8010144:	4606      	mov	r6, r0
 8010146:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8010148:	6823      	ldr	r3, [r4, #0]
 801014a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801014e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010150:	f7fd fdae 	bl	800dcb0 <HAL_GetTick>
 8010154:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010156:	e004      	b.n	8010162 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010158:	f7fd fdaa 	bl	800dcb0 <HAL_GetTick>
 801015c:	1b40      	subs	r0, r0, r5
 801015e:	2802      	cmp	r0, #2
 8010160:	d856      	bhi.n	8010210 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010162:	6823      	ldr	r3, [r4, #0]
 8010164:	011a      	lsls	r2, r3, #4
 8010166:	d4f7      	bmi.n	8010158 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010168:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801016a:	6832      	ldr	r2, [r6, #0]
 801016c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8010170:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8010174:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010176:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 801017a:	3b01      	subs	r3, #1
 801017c:	3a01      	subs	r2, #1
 801017e:	025b      	lsls	r3, r3, #9
 8010180:	0412      	lsls	r2, r2, #16
 8010182:	b29b      	uxth	r3, r3
 8010184:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8010188:	4313      	orrs	r3, r2
 801018a:	6872      	ldr	r2, [r6, #4]
 801018c:	3a01      	subs	r2, #1
 801018e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010192:	4313      	orrs	r3, r2
 8010194:	6932      	ldr	r2, [r6, #16]
 8010196:	3a01      	subs	r2, #1
 8010198:	0612      	lsls	r2, r2, #24
 801019a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 801019e:	4313      	orrs	r3, r2
 80101a0:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80101a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80101a4:	6972      	ldr	r2, [r6, #20]
 80101a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80101aa:	4313      	orrs	r3, r2
 80101ac:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80101ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80101b0:	69b2      	ldr	r2, [r6, #24]
 80101b2:	f023 0320 	bic.w	r3, r3, #32
 80101b6:	4313      	orrs	r3, r2
 80101b8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80101ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80101bc:	f023 0310 	bic.w	r3, r3, #16
 80101c0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80101c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80101c4:	69f2      	ldr	r2, [r6, #28]
 80101c6:	f36f 03cf 	bfc	r3, #3, #13
 80101ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80101ce:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80101d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80101d2:	f043 0310 	orr.w	r3, r3, #16
 80101d6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80101d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80101da:	b1df      	cbz	r7, 8010214 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80101dc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80101de:	bf0c      	ite	eq
 80101e0:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80101e4:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80101e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80101ea:	4c0c      	ldr	r4, [pc, #48]	@ (801021c <RCCEx_PLL2_Config.part.0+0xdc>)
 80101ec:	6823      	ldr	r3, [r4, #0]
 80101ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80101f2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80101f4:	f7fd fd5c 	bl	800dcb0 <HAL_GetTick>
 80101f8:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80101fa:	e004      	b.n	8010206 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80101fc:	f7fd fd58 	bl	800dcb0 <HAL_GetTick>
 8010200:	1b40      	subs	r0, r0, r5
 8010202:	2802      	cmp	r0, #2
 8010204:	d804      	bhi.n	8010210 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010206:	6823      	ldr	r3, [r4, #0]
 8010208:	011b      	lsls	r3, r3, #4
 801020a:	d5f7      	bpl.n	80101fc <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 801020c:	2000      	movs	r0, #0
}
 801020e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8010210:	2003      	movs	r0, #3
}
 8010212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010214:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010218:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801021a:	e7e6      	b.n	80101ea <RCCEx_PLL2_Config.part.0+0xaa>
 801021c:	58024400 	.word	0x58024400

08010220 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8010220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010222:	4c36      	ldr	r4, [pc, #216]	@ (80102fc <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8010224:	4606      	mov	r6, r0
 8010226:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8010228:	6823      	ldr	r3, [r4, #0]
 801022a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801022e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010230:	f7fd fd3e 	bl	800dcb0 <HAL_GetTick>
 8010234:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010236:	e004      	b.n	8010242 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010238:	f7fd fd3a 	bl	800dcb0 <HAL_GetTick>
 801023c:	1b40      	subs	r0, r0, r5
 801023e:	2802      	cmp	r0, #2
 8010240:	d856      	bhi.n	80102f0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010242:	6823      	ldr	r3, [r4, #0]
 8010244:	009a      	lsls	r2, r3, #2
 8010246:	d4f7      	bmi.n	8010238 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010248:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801024a:	6832      	ldr	r2, [r6, #0]
 801024c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8010250:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8010254:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010256:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 801025a:	3b01      	subs	r3, #1
 801025c:	3a01      	subs	r2, #1
 801025e:	025b      	lsls	r3, r3, #9
 8010260:	0412      	lsls	r2, r2, #16
 8010262:	b29b      	uxth	r3, r3
 8010264:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8010268:	4313      	orrs	r3, r2
 801026a:	6872      	ldr	r2, [r6, #4]
 801026c:	3a01      	subs	r2, #1
 801026e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010272:	4313      	orrs	r3, r2
 8010274:	6932      	ldr	r2, [r6, #16]
 8010276:	3a01      	subs	r2, #1
 8010278:	0612      	lsls	r2, r2, #24
 801027a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 801027e:	4313      	orrs	r3, r2
 8010280:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010282:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010284:	6972      	ldr	r2, [r6, #20]
 8010286:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 801028a:	4313      	orrs	r3, r2
 801028c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801028e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010290:	69b2      	ldr	r2, [r6, #24]
 8010292:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010296:	4313      	orrs	r3, r2
 8010298:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801029a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801029c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80102a0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80102a2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80102a4:	69f2      	ldr	r2, [r6, #28]
 80102a6:	f36f 03cf 	bfc	r3, #3, #13
 80102aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80102ae:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80102b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80102b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80102b6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80102b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80102ba:	b1df      	cbz	r7, 80102f4 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80102bc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80102be:	bf0c      	ite	eq
 80102c0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80102c4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80102c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80102ca:	4c0c      	ldr	r4, [pc, #48]	@ (80102fc <RCCEx_PLL3_Config.part.0+0xdc>)
 80102cc:	6823      	ldr	r3, [r4, #0]
 80102ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80102d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80102d4:	f7fd fcec 	bl	800dcb0 <HAL_GetTick>
 80102d8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80102da:	e004      	b.n	80102e6 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80102dc:	f7fd fce8 	bl	800dcb0 <HAL_GetTick>
 80102e0:	1b40      	subs	r0, r0, r5
 80102e2:	2802      	cmp	r0, #2
 80102e4:	d804      	bhi.n	80102f0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80102e6:	6823      	ldr	r3, [r4, #0]
 80102e8:	009b      	lsls	r3, r3, #2
 80102ea:	d5f7      	bpl.n	80102dc <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 80102ec:	2000      	movs	r0, #0
}
 80102ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80102f0:	2003      	movs	r0, #3
}
 80102f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80102f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80102f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80102fa:	e7e6      	b.n	80102ca <RCCEx_PLL3_Config.part.0+0xaa>
 80102fc:	58024400 	.word	0x58024400

08010300 <HAL_RCCEx_PeriphCLKConfig>:
{
 8010300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010304:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8010308:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801030a:	011d      	lsls	r5, r3, #4
 801030c:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8010310:	d524      	bpl.n	801035c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8010312:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8010314:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8010318:	f000 85df 	beq.w	8010eda <HAL_RCCEx_PeriphCLKConfig+0xbda>
 801031c:	f200 86a8 	bhi.w	8011070 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8010320:	2900      	cmp	r1, #0
 8010322:	f000 85f6 	beq.w	8010f12 <HAL_RCCEx_PeriphCLKConfig+0xc12>
 8010326:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801032a:	f040 86a5 	bne.w	8011078 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801032e:	49a9      	ldr	r1, [pc, #676]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010330:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010332:	f001 0103 	and.w	r1, r1, #3
 8010336:	2903      	cmp	r1, #3
 8010338:	f000 869e 	beq.w	8011078 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 801033c:	2102      	movs	r1, #2
 801033e:	3008      	adds	r0, #8
 8010340:	f7ff fefe 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 8010344:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010346:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801034a:	b93e      	cbnz	r6, 801035c <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801034c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 801034e:	4da1      	ldr	r5, [pc, #644]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010350:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010352:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8010354:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8010358:	4301      	orrs	r1, r0
 801035a:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801035c:	05d8      	lsls	r0, r3, #23
 801035e:	d50a      	bpl.n	8010376 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 8010360:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8010362:	2904      	cmp	r1, #4
 8010364:	d806      	bhi.n	8010374 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8010366:	e8df f011 	tbh	[pc, r1, lsl #1]
 801036a:	03ff      	.short	0x03ff
 801036c:	0582056d 	.word	0x0582056d
 8010370:	04040404 	.word	0x04040404
      status = ret;
 8010374:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010376:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010378:	0599      	lsls	r1, r3, #22
 801037a:	d524      	bpl.n	80103c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 801037c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 801037e:	2980      	cmp	r1, #128	@ 0x80
 8010380:	f000 854b 	beq.w	8010e1a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8010384:	f200 8687 	bhi.w	8011096 <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8010388:	2900      	cmp	r1, #0
 801038a:	f000 85bb 	beq.w	8010f04 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 801038e:	2940      	cmp	r1, #64	@ 0x40
 8010390:	f040 8688 	bne.w	80110a4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010394:	498f      	ldr	r1, [pc, #572]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010396:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010398:	f001 0103 	and.w	r1, r1, #3
 801039c:	2903      	cmp	r1, #3
 801039e:	f000 8681 	beq.w	80110a4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 80103a2:	2100      	movs	r1, #0
 80103a4:	f104 0008 	add.w	r0, r4, #8
 80103a8:	f7ff feca 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 80103ac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80103ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80103b2:	2d00      	cmp	r5, #0
 80103b4:	f040 8543 	bne.w	8010e3e <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80103b8:	4f86      	ldr	r7, [pc, #536]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80103ba:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80103bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80103be:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 80103c2:	4301      	orrs	r1, r0
 80103c4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80103c6:	055f      	lsls	r7, r3, #21
 80103c8:	d528      	bpl.n	801041c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 80103ca:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80103ce:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80103d2:	f000 855c 	beq.w	8010e8e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80103d6:	f200 8652 	bhi.w	801107e <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 80103da:	2900      	cmp	r1, #0
 80103dc:	f000 858b 	beq.w	8010ef6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80103e0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103e4:	f040 8653 	bne.w	801108e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80103e8:	497a      	ldr	r1, [pc, #488]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80103ea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80103ec:	f001 0103 	and.w	r1, r1, #3
 80103f0:	2903      	cmp	r1, #3
 80103f2:	f000 864c 	beq.w	801108e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80103f6:	2100      	movs	r1, #0
 80103f8:	f104 0008 	add.w	r0, r4, #8
 80103fc:	f7ff fea0 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 8010400:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8010402:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010406:	2d00      	cmp	r5, #0
 8010408:	f040 8553 	bne.w	8010eb2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801040c:	4f71      	ldr	r7, [pc, #452]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801040e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8010412:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010414:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8010418:	4301      	orrs	r1, r0
 801041a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801041c:	0518      	lsls	r0, r3, #20
 801041e:	d528      	bpl.n	8010472 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 8010420:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8010424:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8010428:	f000 8546 	beq.w	8010eb8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 801042c:	f200 8614 	bhi.w	8011058 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8010430:	2900      	cmp	r1, #0
 8010432:	f000 84d6 	beq.w	8010de2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8010436:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 801043a:	f040 8615 	bne.w	8011068 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801043e:	4965      	ldr	r1, [pc, #404]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010440:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010442:	f001 0103 	and.w	r1, r1, #3
 8010446:	2903      	cmp	r1, #3
 8010448:	f000 860e 	beq.w	8011068 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 801044c:	2100      	movs	r1, #0
 801044e:	f104 0008 	add.w	r0, r4, #8
 8010452:	f7ff fe75 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 8010456:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010458:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801045c:	2d00      	cmp	r5, #0
 801045e:	f040 84c8 	bne.w	8010df2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8010462:	4f5c      	ldr	r7, [pc, #368]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010464:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8010468:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801046a:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 801046e:	4301      	orrs	r1, r0
 8010470:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010472:	0199      	lsls	r1, r3, #6
 8010474:	d518      	bpl.n	80104a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 8010476:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8010478:	2920      	cmp	r1, #32
 801047a:	f000 8434 	beq.w	8010ce6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 801047e:	f200 8615 	bhi.w	80110ac <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8010482:	b139      	cbz	r1, 8010494 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8010484:	2910      	cmp	r1, #16
 8010486:	f040 8614 	bne.w	80110b2 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801048a:	4852      	ldr	r0, [pc, #328]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801048c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801048e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010492:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010494:	2d00      	cmp	r5, #0
 8010496:	f040 83bf 	bne.w	8010c18 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801049a:	4f4e      	ldr	r7, [pc, #312]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801049c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801049e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80104a0:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 80104a4:	4301      	orrs	r1, r0
 80104a6:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80104a8:	04df      	lsls	r7, r3, #19
 80104aa:	d526      	bpl.n	80104fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 80104ac:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80104ae:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80104b2:	f000 84a1 	beq.w	8010df8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 80104b6:	f200 85c3 	bhi.w	8011040 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 80104ba:	2900      	cmp	r1, #0
 80104bc:	f000 8486 	beq.w	8010dcc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80104c0:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80104c4:	f040 85c4 	bne.w	8011050 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80104c8:	4942      	ldr	r1, [pc, #264]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80104ca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80104cc:	f001 0103 	and.w	r1, r1, #3
 80104d0:	2903      	cmp	r1, #3
 80104d2:	f000 85bd 	beq.w	8011050 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 80104d6:	2100      	movs	r1, #0
 80104d8:	f104 0008 	add.w	r0, r4, #8
 80104dc:	f7ff fe30 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 80104e0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80104e2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80104e6:	2d00      	cmp	r5, #0
 80104e8:	f040 8478 	bne.w	8010ddc <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80104ec:	4f39      	ldr	r7, [pc, #228]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80104ee:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80104f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80104f2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80104f6:	4301      	orrs	r1, r0
 80104f8:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80104fa:	0498      	lsls	r0, r3, #18
 80104fc:	d524      	bpl.n	8010548 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 80104fe:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8010500:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8010504:	f000 8415 	beq.w	8010d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8010508:	f200 8556 	bhi.w	8010fb8 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 801050c:	b191      	cbz	r1, 8010534 <HAL_RCCEx_PeriphCLKConfig+0x234>
 801050e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8010512:	f040 855b 	bne.w	8010fcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010516:	492f      	ldr	r1, [pc, #188]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010518:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801051a:	f001 0103 	and.w	r1, r1, #3
 801051e:	2903      	cmp	r1, #3
 8010520:	f000 8554 	beq.w	8010fcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8010524:	2101      	movs	r1, #1
 8010526:	f104 0008 	add.w	r0, r4, #8
 801052a:	f7ff fe09 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 801052e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010530:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010534:	2d00      	cmp	r5, #0
 8010536:	f040 838f 	bne.w	8010c58 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801053a:	4f26      	ldr	r7, [pc, #152]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801053c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801053e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010540:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8010544:	4301      	orrs	r1, r0
 8010546:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010548:	0459      	lsls	r1, r3, #17
 801054a:	d526      	bpl.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 801054c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8010550:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8010554:	f000 8426 	beq.w	8010da4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8010558:	f200 854a 	bhi.w	8010ff0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 801055c:	b191      	cbz	r1, 8010584 <HAL_RCCEx_PeriphCLKConfig+0x284>
 801055e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8010562:	f040 854f 	bne.w	8011004 <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010566:	491b      	ldr	r1, [pc, #108]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010568:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801056a:	f001 0103 	and.w	r1, r1, #3
 801056e:	2903      	cmp	r1, #3
 8010570:	f000 8548 	beq.w	8011004 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8010574:	2101      	movs	r1, #1
 8010576:	f104 0008 	add.w	r0, r4, #8
 801057a:	f7ff fde1 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 801057e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010580:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010584:	2d00      	cmp	r5, #0
 8010586:	f040 835b 	bne.w	8010c40 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801058a:	4f12      	ldr	r7, [pc, #72]	@ (80105d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801058c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8010590:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010592:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8010596:	4301      	orrs	r1, r0
 8010598:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801059a:	041f      	lsls	r7, r3, #16
 801059c:	d50d      	bpl.n	80105ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 801059e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80105a0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80105a4:	f000 8260 	beq.w	8010a68 <HAL_RCCEx_PeriphCLKConfig+0x768>
 80105a8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80105ac:	f000 8591 	beq.w	80110d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80105b0:	2900      	cmp	r1, #0
 80105b2:	f000 825e 	beq.w	8010a72 <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 80105b6:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80105b8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80105ba:	01d8      	lsls	r0, r3, #7
 80105bc:	d515      	bpl.n	80105ea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 80105be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80105c0:	2903      	cmp	r1, #3
 80105c2:	f200 85b4 	bhi.w	801112e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80105c6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80105ca:	000c      	.short	0x000c
 80105cc:	03a10007 	.word	0x03a10007
 80105d0:	000c      	.short	0x000c
 80105d2:	bf00      	nop
 80105d4:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105d8:	4836      	ldr	r0, [pc, #216]	@ (80106b4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80105da:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80105dc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80105e0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80105e2:	2d00      	cmp	r5, #0
 80105e4:	f000 831a 	beq.w	8010c1c <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 80105e8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80105ea:	0259      	lsls	r1, r3, #9
 80105ec:	f100 827a 	bmi.w	8010ae4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80105f0:	07df      	lsls	r7, r3, #31
 80105f2:	d52f      	bpl.n	8010654 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 80105f4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80105f6:	2928      	cmp	r1, #40	@ 0x28
 80105f8:	d82a      	bhi.n	8010650 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80105fa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80105fe:	0257      	.short	0x0257
 8010600:	00290029 	.word	0x00290029
 8010604:	00290029 	.word	0x00290029
 8010608:	00290029 	.word	0x00290029
 801060c:	02480029 	.word	0x02480029
 8010610:	00290029 	.word	0x00290029
 8010614:	00290029 	.word	0x00290029
 8010618:	00290029 	.word	0x00290029
 801061c:	04b90029 	.word	0x04b90029
 8010620:	00290029 	.word	0x00290029
 8010624:	00290029 	.word	0x00290029
 8010628:	00290029 	.word	0x00290029
 801062c:	02570029 	.word	0x02570029
 8010630:	00290029 	.word	0x00290029
 8010634:	00290029 	.word	0x00290029
 8010638:	00290029 	.word	0x00290029
 801063c:	02570029 	.word	0x02570029
 8010640:	00290029 	.word	0x00290029
 8010644:	00290029 	.word	0x00290029
 8010648:	00290029 	.word	0x00290029
 801064c:	02570029 	.word	0x02570029
      status = ret;
 8010650:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010652:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010654:	0798      	lsls	r0, r3, #30
 8010656:	d51e      	bpl.n	8010696 <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010658:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801065a:	2905      	cmp	r1, #5
 801065c:	f200 8550 	bhi.w	8011100 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8010660:	e8df f011 	tbh	[pc, r1, lsl #1]
 8010664:	00060015 	.word	0x00060015
 8010668:	00150471 	.word	0x00150471
 801066c:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010670:	4910      	ldr	r1, [pc, #64]	@ (80106b4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8010672:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010674:	f001 0103 	and.w	r1, r1, #3
 8010678:	2903      	cmp	r1, #3
 801067a:	f000 8541 	beq.w	8011100 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 801067e:	2101      	movs	r1, #1
 8010680:	f104 0008 	add.w	r0, r4, #8
 8010684:	f7ff fd5c 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 8010688:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801068a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801068e:	2d00      	cmp	r5, #0
 8010690:	f000 82cc 	beq.w	8010c2c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 8010694:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010696:	0759      	lsls	r1, r3, #29
 8010698:	d521      	bpl.n	80106de <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801069a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 801069e:	2905      	cmp	r1, #5
 80106a0:	f200 852a 	bhi.w	80110f8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80106a4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80106a8:	00080017 	.word	0x00080017
 80106ac:	0017043c 	.word	0x0017043c
 80106b0:	00170017 	.word	0x00170017
 80106b4:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80106b8:	49ae      	ldr	r1, [pc, #696]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80106ba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80106bc:	f001 0103 	and.w	r1, r1, #3
 80106c0:	2903      	cmp	r1, #3
 80106c2:	f000 8519 	beq.w	80110f8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80106c6:	2101      	movs	r1, #1
 80106c8:	f104 0008 	add.w	r0, r4, #8
 80106cc:	f7ff fd38 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 80106d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80106d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80106d6:	2d00      	cmp	r5, #0
 80106d8:	f000 82c2 	beq.w	8010c60 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 80106dc:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80106de:	069f      	lsls	r7, r3, #26
 80106e0:	d526      	bpl.n	8010730 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80106e2:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80106e6:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80106ea:	f000 82c6 	beq.w	8010c7a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80106ee:	f200 8455 	bhi.w	8010f9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80106f2:	b191      	cbz	r1, 801071a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80106f4:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80106f8:	f040 845a 	bne.w	8010fb0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80106fc:	499d      	ldr	r1, [pc, #628]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80106fe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010700:	f001 0103 	and.w	r1, r1, #3
 8010704:	2903      	cmp	r1, #3
 8010706:	f000 8453 	beq.w	8010fb0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 801070a:	2100      	movs	r1, #0
 801070c:	f104 0008 	add.w	r0, r4, #8
 8010710:	f7ff fd16 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 8010714:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010716:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801071a:	2d00      	cmp	r5, #0
 801071c:	f040 828e 	bne.w	8010c3c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010720:	4f94      	ldr	r7, [pc, #592]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010722:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8010726:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010728:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 801072c:	4301      	orrs	r1, r0
 801072e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010730:	0658      	lsls	r0, r3, #25
 8010732:	d526      	bpl.n	8010782 <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8010734:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8010738:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 801073c:	f000 82af 	beq.w	8010c9e <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8010740:	f200 8464 	bhi.w	801100c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8010744:	b191      	cbz	r1, 801076c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8010746:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801074a:	f040 8469 	bne.w	8011020 <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801074e:	4989      	ldr	r1, [pc, #548]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010750:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010752:	f001 0103 	and.w	r1, r1, #3
 8010756:	2903      	cmp	r1, #3
 8010758:	f000 8462 	beq.w	8011020 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801075c:	2100      	movs	r1, #0
 801075e:	f104 0008 	add.w	r0, r4, #8
 8010762:	f7ff fced 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 8010766:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010768:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801076c:	2d00      	cmp	r5, #0
 801076e:	f040 8269 	bne.w	8010c44 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010772:	4f80      	ldr	r7, [pc, #512]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010774:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8010778:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801077a:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 801077e:	4301      	orrs	r1, r0
 8010780:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010782:	0619      	lsls	r1, r3, #24
 8010784:	d526      	bpl.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010786:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 801078a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 801078e:	f000 8298 	beq.w	8010cc2 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8010792:	f200 841f 	bhi.w	8010fd4 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8010796:	b191      	cbz	r1, 80107be <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8010798:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 801079c:	f040 8424 	bne.w	8010fe8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80107a0:	4974      	ldr	r1, [pc, #464]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80107a2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80107a4:	f001 0103 	and.w	r1, r1, #3
 80107a8:	2903      	cmp	r1, #3
 80107aa:	f000 841d 	beq.w	8010fe8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80107ae:	2100      	movs	r1, #0
 80107b0:	f104 0008 	add.w	r0, r4, #8
 80107b4:	f7ff fcc4 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 80107b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80107ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80107be:	2d00      	cmp	r5, #0
 80107c0:	f040 8244 	bne.w	8010c4c <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80107c4:	4f6b      	ldr	r7, [pc, #428]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80107c6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 80107ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80107cc:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80107d0:	4301      	orrs	r1, r0
 80107d2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80107d4:	071f      	lsls	r7, r3, #28
 80107d6:	d50b      	bpl.n	80107f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80107d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80107dc:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80107e0:	f000 81d4 	beq.w	8010b8c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80107e4:	4f63      	ldr	r7, [pc, #396]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80107e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80107e8:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80107ec:	4301      	orrs	r1, r0
 80107ee:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80107f0:	06d8      	lsls	r0, r3, #27
 80107f2:	d50b      	bpl.n	801080c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80107f4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80107f8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80107fc:	f000 81db 	beq.w	8010bb6 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010800:	4f5c      	ldr	r7, [pc, #368]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010802:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010804:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8010808:	4301      	orrs	r1, r0
 801080a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801080c:	0319      	lsls	r1, r3, #12
 801080e:	d524      	bpl.n	801085a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8010810:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8010814:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8010818:	f000 82b1 	beq.w	8010d7e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 801081c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8010820:	d010      	beq.n	8010844 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8010822:	2900      	cmp	r1, #0
 8010824:	f040 8130 	bne.w	8010a88 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010828:	4852      	ldr	r0, [pc, #328]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 801082a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801082c:	f000 0003 	and.w	r0, r0, #3
 8010830:	2803      	cmp	r0, #3
 8010832:	f000 8129 	beq.w	8010a88 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8010836:	f104 0008 	add.w	r0, r4, #8
 801083a:	f7ff fc81 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 801083e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010840:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010844:	2d00      	cmp	r5, #0
 8010846:	f040 81ff 	bne.w	8010c48 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801084a:	4f4a      	ldr	r7, [pc, #296]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 801084c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8010850:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010852:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8010856:	4301      	orrs	r1, r0
 8010858:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801085a:	035f      	lsls	r7, r3, #13
 801085c:	d50f      	bpl.n	801087e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 801085e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8010862:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8010866:	f000 8277 	beq.w	8010d58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 801086a:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 801086e:	f000 812d 	beq.w	8010acc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8010872:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8010876:	f000 8124 	beq.w	8010ac2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 801087a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801087c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801087e:	03d8      	lsls	r0, r3, #15
 8010880:	d520      	bpl.n	80108c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8010882:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8010884:	2900      	cmp	r1, #0
 8010886:	f000 81aa 	beq.w	8010bde <HAL_RCCEx_PeriphCLKConfig+0x8de>
 801088a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 801088e:	f040 80e8 	bne.w	8010a62 <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010892:	4938      	ldr	r1, [pc, #224]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010894:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010896:	f001 0103 	and.w	r1, r1, #3
 801089a:	2903      	cmp	r1, #3
 801089c:	f000 80e1 	beq.w	8010a62 <HAL_RCCEx_PeriphCLKConfig+0x762>
 80108a0:	2102      	movs	r1, #2
 80108a2:	f104 0008 	add.w	r0, r4, #8
 80108a6:	f7ff fc4b 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 80108aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80108ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80108b0:	2d00      	cmp	r5, #0
 80108b2:	f040 819c 	bne.w	8010bee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80108b6:	4f2f      	ldr	r7, [pc, #188]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80108b8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80108ba:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80108bc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80108c0:	4301      	orrs	r1, r0
 80108c2:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80108c4:	0099      	lsls	r1, r3, #2
 80108c6:	d50e      	bpl.n	80108e6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80108c8:	492a      	ldr	r1, [pc, #168]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80108ca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80108cc:	f001 0103 	and.w	r1, r1, #3
 80108d0:	2903      	cmp	r1, #3
 80108d2:	d007      	beq.n	80108e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 80108d4:	2102      	movs	r1, #2
 80108d6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80108da:	f7ff fca1 	bl	8010220 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80108de:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80108e2:	b100      	cbz	r0, 80108e6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 80108e4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80108e6:	039f      	lsls	r7, r3, #14
 80108e8:	f100 80ab 	bmi.w	8010a42 <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 80108ec:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80108ee:	02d8      	lsls	r0, r3, #11
 80108f0:	d506      	bpl.n	8010900 <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80108f2:	4820      	ldr	r0, [pc, #128]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80108f4:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 80108f6:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80108f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80108fc:	4331      	orrs	r1, r6
 80108fe:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010900:	00d9      	lsls	r1, r3, #3
 8010902:	d507      	bpl.n	8010914 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8010904:	481b      	ldr	r0, [pc, #108]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010906:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 801090a:	6901      	ldr	r1, [r0, #16]
 801090c:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8010910:	4331      	orrs	r1, r6
 8010912:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010914:	029f      	lsls	r7, r3, #10
 8010916:	d506      	bpl.n	8010926 <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010918:	4816      	ldr	r0, [pc, #88]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 801091a:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 801091c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 801091e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8010922:	4331      	orrs	r1, r6
 8010924:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010926:	005e      	lsls	r6, r3, #1
 8010928:	d509      	bpl.n	801093e <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801092a:	4912      	ldr	r1, [pc, #72]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 801092c:	6908      	ldr	r0, [r1, #16]
 801092e:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8010932:	6108      	str	r0, [r1, #16]
 8010934:	6908      	ldr	r0, [r1, #16]
 8010936:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 801093a:	4330      	orrs	r0, r6
 801093c:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801093e:	2b00      	cmp	r3, #0
 8010940:	da06      	bge.n	8010950 <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010942:	480c      	ldr	r0, [pc, #48]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010944:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8010946:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8010948:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 801094c:	4331      	orrs	r1, r6
 801094e:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010950:	0218      	lsls	r0, r3, #8
 8010952:	d507      	bpl.n	8010964 <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010954:	4907      	ldr	r1, [pc, #28]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010956:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801095a:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 801095c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8010960:	4303      	orrs	r3, r0
 8010962:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8010964:	07d1      	lsls	r1, r2, #31
 8010966:	d511      	bpl.n	801098c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010968:	4b02      	ldr	r3, [pc, #8]	@ (8010974 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 801096a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801096c:	f003 0303 	and.w	r3, r3, #3
 8010970:	2b03      	cmp	r3, #3
 8010972:	e001      	b.n	8010978 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8010974:	58024400 	.word	0x58024400
 8010978:	f000 835c 	beq.w	8011034 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 801097c:	2100      	movs	r1, #0
 801097e:	f104 0008 	add.w	r0, r4, #8
 8010982:	f7ff fbdd 	bl	8010140 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8010986:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8010988:	b100      	cbz	r0, 801098c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801098a:	4605      	mov	r5, r0
 801098c:	0793      	lsls	r3, r2, #30
 801098e:	d50e      	bpl.n	80109ae <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010990:	4baf      	ldr	r3, [pc, #700]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010994:	f003 0303 	and.w	r3, r3, #3
 8010998:	2b03      	cmp	r3, #3
 801099a:	f000 834d 	beq.w	8011038 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 801099e:	2101      	movs	r1, #1
 80109a0:	f104 0008 	add.w	r0, r4, #8
 80109a4:	f7ff fbcc 	bl	8010140 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80109a8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80109aa:	b100      	cbz	r0, 80109ae <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80109ac:	4605      	mov	r5, r0
 80109ae:	0757      	lsls	r7, r2, #29
 80109b0:	d50e      	bpl.n	80109d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80109b2:	4ba7      	ldr	r3, [pc, #668]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80109b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109b6:	f003 0303 	and.w	r3, r3, #3
 80109ba:	2b03      	cmp	r3, #3
 80109bc:	f000 833e 	beq.w	801103c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80109c0:	2102      	movs	r1, #2
 80109c2:	f104 0008 	add.w	r0, r4, #8
 80109c6:	f7ff fbbb 	bl	8010140 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80109ca:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80109cc:	b100      	cbz	r0, 80109d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80109ce:	4605      	mov	r5, r0
 80109d0:	0716      	lsls	r6, r2, #28
 80109d2:	d50e      	bpl.n	80109f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80109d4:	4b9e      	ldr	r3, [pc, #632]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80109d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109d8:	f003 0303 	and.w	r3, r3, #3
 80109dc:	2b03      	cmp	r3, #3
 80109de:	f000 8323 	beq.w	8011028 <HAL_RCCEx_PeriphCLKConfig+0xd28>
 80109e2:	2100      	movs	r1, #0
 80109e4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80109e8:	f7ff fc1a 	bl	8010220 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80109ec:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80109ee:	b100      	cbz	r0, 80109f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80109f0:	4605      	mov	r5, r0
 80109f2:	06d0      	lsls	r0, r2, #27
 80109f4:	d50f      	bpl.n	8010a16 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80109f6:	4b96      	ldr	r3, [pc, #600]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80109f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109fa:	f003 0303 	and.w	r3, r3, #3
 80109fe:	2b03      	cmp	r3, #3
 8010a00:	f000 8314 	beq.w	801102c <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 8010a04:	2101      	movs	r1, #1
 8010a06:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010a0a:	f7ff fc09 	bl	8010220 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	f040 8359 	bne.w	80110c6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8010a14:	6862      	ldr	r2, [r4, #4]
 8010a16:	0693      	lsls	r3, r2, #26
 8010a18:	d50e      	bpl.n	8010a38 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a1e:	f003 0303 	and.w	r3, r3, #3
 8010a22:	2b03      	cmp	r3, #3
 8010a24:	f000 82b7 	beq.w	8010f96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8010a28:	2102      	movs	r1, #2
 8010a2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010a2e:	f7ff fbf7 	bl	8010220 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8010a32:	2800      	cmp	r0, #0
 8010a34:	f040 82af 	bne.w	8010f96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 8010a38:	1e28      	subs	r0, r5, #0
 8010a3a:	bf18      	it	ne
 8010a3c:	2001      	movne	r0, #1
}
 8010a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 8010a42:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8010a46:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8010a4a:	f000 80d2 	beq.w	8010bf2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8010a4e:	f240 8110 	bls.w	8010c72 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8010a52:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8010a56:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010a5a:	f000 80cf 	beq.w	8010bfc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8010a5e:	2501      	movs	r5, #1
 8010a60:	e745      	b.n	80108ee <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 8010a62:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010a64:	4635      	mov	r5, r6
 8010a66:	e72d      	b.n	80108c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010a68:	4879      	ldr	r0, [pc, #484]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010a6a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010a6c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010a70:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010a72:	2d00      	cmp	r5, #0
 8010a74:	f040 80ce 	bne.w	8010c14 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010a78:	4f75      	ldr	r7, [pc, #468]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010a7a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8010a7c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010a7e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8010a82:	4301      	orrs	r1, r0
 8010a84:	6539      	str	r1, [r7, #80]	@ 0x50
 8010a86:	e598      	b.n	80105ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8010a88:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010a8a:	4635      	mov	r5, r6
 8010a8c:	e6e5      	b.n	801085a <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010a8e:	4970      	ldr	r1, [pc, #448]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010a90:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010a92:	f001 0103 	and.w	r1, r1, #3
 8010a96:	2903      	cmp	r1, #3
 8010a98:	f43f adda 	beq.w	8010650 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8010a9c:	2101      	movs	r1, #1
 8010a9e:	f104 0008 	add.w	r0, r4, #8
 8010aa2:	f7ff fb4d 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 8010aa6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010aa8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010aac:	2d00      	cmp	r5, #0
 8010aae:	f040 80d5 	bne.w	8010c5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010ab2:	4f67      	ldr	r7, [pc, #412]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010ab4:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8010ab6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010ab8:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8010abc:	4301      	orrs	r1, r0
 8010abe:	6579      	str	r1, [r7, #84]	@ 0x54
 8010ac0:	e5c8      	b.n	8010654 <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010ac2:	4863      	ldr	r0, [pc, #396]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010ac4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010ac6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010aca:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010acc:	2d00      	cmp	r5, #0
 8010ace:	f040 809f 	bne.w	8010c10 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010ad2:	4f5f      	ldr	r7, [pc, #380]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010ad4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8010ad8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010ada:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8010ade:	4301      	orrs	r1, r0
 8010ae0:	6579      	str	r1, [r7, #84]	@ 0x54
 8010ae2:	e6cc      	b.n	801087e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010ae4:	4f5b      	ldr	r7, [pc, #364]	@ (8010c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010aec:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8010aee:	f7fd f8df 	bl	800dcb0 <HAL_GetTick>
 8010af2:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010af4:	e006      	b.n	8010b04 <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010af6:	f7fd f8db 	bl	800dcb0 <HAL_GetTick>
 8010afa:	eba0 0008 	sub.w	r0, r0, r8
 8010afe:	2864      	cmp	r0, #100	@ 0x64
 8010b00:	f200 82db 	bhi.w	80110ba <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	05da      	lsls	r2, r3, #23
 8010b08:	d5f5      	bpl.n	8010af6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 8010b0a:	2d00      	cmp	r5, #0
 8010b0c:	f040 82d6 	bne.w	80110bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010b10:	4a4f      	ldr	r2, [pc, #316]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010b12:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8010b16:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8010b18:	4059      	eors	r1, r3
 8010b1a:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8010b1e:	d00b      	beq.n	8010b38 <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010b20:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8010b22:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010b24:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8010b28:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8010b2c:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010b2e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8010b30:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8010b34:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8010b36:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b3c:	f000 82fb 	beq.w	8011136 <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010b40:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8010b44:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8010b48:	f000 8309 	beq.w	801115e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 8010b4c:	4940      	ldr	r1, [pc, #256]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010b4e:	690a      	ldr	r2, [r1, #16]
 8010b50:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8010b54:	610a      	str	r2, [r1, #16]
 8010b56:	483e      	ldr	r0, [pc, #248]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010b58:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8010b5c:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8010b5e:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010b60:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010b64:	6701      	str	r1, [r0, #112]	@ 0x70
 8010b66:	e543      	b.n	80105f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010b68:	4839      	ldr	r0, [pc, #228]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010b6a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010b6c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010b70:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010b72:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8010b74:	2d00      	cmp	r5, #0
 8010b76:	f040 8177 	bne.w	8010e68 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010b7a:	4f35      	ldr	r7, [pc, #212]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010b80:	f021 0107 	bic.w	r1, r1, #7
 8010b84:	4301      	orrs	r1, r0
 8010b86:	6539      	str	r1, [r7, #80]	@ 0x50
 8010b88:	f7ff bbf6 	b.w	8010378 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010b8c:	4930      	ldr	r1, [pc, #192]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010b8e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010b90:	f001 0103 	and.w	r1, r1, #3
 8010b94:	2903      	cmp	r1, #3
 8010b96:	f000 82ba 	beq.w	801110e <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8010b9a:	2102      	movs	r1, #2
 8010b9c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010ba0:	f7ff fb3e 	bl	8010220 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f000 82b5 	beq.w	8011114 <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010baa:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 8010bae:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010bb0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8010bb4:	e616      	b.n	80107e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010bb6:	4926      	ldr	r1, [pc, #152]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010bb8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010bba:	f001 0103 	and.w	r1, r1, #3
 8010bbe:	2903      	cmp	r1, #3
 8010bc0:	f000 82a2 	beq.w	8011108 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8010bc4:	2102      	movs	r1, #2
 8010bc6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010bca:	f7ff fb29 	bl	8010220 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	f040 82a6 	bne.w	8011120 <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010bd4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010bd8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8010bdc:	e610      	b.n	8010800 <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010bde:	481c      	ldr	r0, [pc, #112]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010be0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010be2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010be6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010be8:	2d00      	cmp	r5, #0
 8010bea:	f43f ae64 	beq.w	80108b6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 8010bee:	462e      	mov	r6, r5
 8010bf0:	e668      	b.n	80108c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010bf2:	4f17      	ldr	r7, [pc, #92]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010bf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010bf6:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8010bfa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010bfc:	2d00      	cmp	r5, #0
 8010bfe:	f47f ae76 	bne.w	80108ee <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010c02:	4d13      	ldr	r5, [pc, #76]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010c04:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8010c06:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8010c0a:	4301      	orrs	r1, r0
 8010c0c:	6569      	str	r1, [r5, #84]	@ 0x54
 8010c0e:	e66d      	b.n	80108ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 8010c10:	462e      	mov	r6, r5
 8010c12:	e634      	b.n	801087e <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8010c14:	462e      	mov	r6, r5
 8010c16:	e4d0      	b.n	80105ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8010c18:	462e      	mov	r6, r5
 8010c1a:	e445      	b.n	80104a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8010c1c:	4f0c      	ldr	r7, [pc, #48]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010c1e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8010c20:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010c22:	f021 0103 	bic.w	r1, r1, #3
 8010c26:	4301      	orrs	r1, r0
 8010c28:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8010c2a:	e4de      	b.n	80105ea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010c2c:	4f08      	ldr	r7, [pc, #32]	@ (8010c50 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010c2e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8010c30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c32:	f021 0107 	bic.w	r1, r1, #7
 8010c36:	4301      	orrs	r1, r0
 8010c38:	6579      	str	r1, [r7, #84]	@ 0x54
 8010c3a:	e52c      	b.n	8010696 <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 8010c3c:	462e      	mov	r6, r5
 8010c3e:	e577      	b.n	8010730 <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 8010c40:	462e      	mov	r6, r5
 8010c42:	e4aa      	b.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 8010c44:	462e      	mov	r6, r5
 8010c46:	e59c      	b.n	8010782 <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 8010c48:	462e      	mov	r6, r5
 8010c4a:	e606      	b.n	801085a <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 8010c4c:	462e      	mov	r6, r5
 8010c4e:	e5c1      	b.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8010c50:	58024400 	.word	0x58024400
 8010c54:	58024800 	.word	0x58024800
      status = ret;
 8010c58:	462e      	mov	r6, r5
 8010c5a:	e475      	b.n	8010548 <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 8010c5c:	462e      	mov	r6, r5
 8010c5e:	e4f9      	b.n	8010654 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010c60:	4fc2      	ldr	r7, [pc, #776]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010c62:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8010c66:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010c68:	f021 0107 	bic.w	r1, r1, #7
 8010c6c:	4301      	orrs	r1, r0
 8010c6e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010c70:	e535      	b.n	80106de <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 8010c72:	2900      	cmp	r1, #0
 8010c74:	f47f aef3 	bne.w	8010a5e <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8010c78:	e7c0      	b.n	8010bfc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010c7a:	49bc      	ldr	r1, [pc, #752]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010c7c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010c7e:	f001 0103 	and.w	r1, r1, #3
 8010c82:	2903      	cmp	r1, #3
 8010c84:	f000 8194 	beq.w	8010fb0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8010c88:	2102      	movs	r1, #2
 8010c8a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010c8e:	f7ff fac7 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010c92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010c94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010c98:	2d00      	cmp	r5, #0
 8010c9a:	d1cf      	bne.n	8010c3c <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8010c9c:	e540      	b.n	8010720 <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010c9e:	49b3      	ldr	r1, [pc, #716]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010ca0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010ca2:	f001 0103 	and.w	r1, r1, #3
 8010ca6:	2903      	cmp	r1, #3
 8010ca8:	f000 81ba 	beq.w	8011020 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8010cac:	2102      	movs	r1, #2
 8010cae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010cb2:	f7ff fab5 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010cb6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010cb8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010cbc:	2d00      	cmp	r5, #0
 8010cbe:	d1c1      	bne.n	8010c44 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8010cc0:	e557      	b.n	8010772 <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010cc2:	49aa      	ldr	r1, [pc, #680]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010cc4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010cc6:	f001 0103 	and.w	r1, r1, #3
 8010cca:	2903      	cmp	r1, #3
 8010ccc:	f000 818c 	beq.w	8010fe8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8010cd0:	2102      	movs	r1, #2
 8010cd2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010cd6:	f7ff faa3 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010cda:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010cdc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010ce0:	2d00      	cmp	r5, #0
 8010ce2:	d1b3      	bne.n	8010c4c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8010ce4:	e56e      	b.n	80107c4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010ce6:	49a1      	ldr	r1, [pc, #644]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010ce8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010cea:	f001 0103 	and.w	r1, r1, #3
 8010cee:	2903      	cmp	r1, #3
 8010cf0:	f000 81df 	beq.w	80110b2 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 8010cf4:	2102      	movs	r1, #2
 8010cf6:	f104 0008 	add.w	r0, r4, #8
 8010cfa:	f7ff fa21 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 8010cfe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010d00:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010d04:	2d00      	cmp	r5, #0
 8010d06:	d187      	bne.n	8010c18 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8010d08:	f7ff bbc7 	b.w	801049a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010d0c:	4997      	ldr	r1, [pc, #604]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010d0e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010d10:	f001 0103 	and.w	r1, r1, #3
 8010d14:	2903      	cmp	r1, #3
 8010d16:	f000 820a 	beq.w	801112e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8010d1a:	2102      	movs	r1, #2
 8010d1c:	f104 0008 	add.w	r0, r4, #8
 8010d20:	f7ff fa0e 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 8010d24:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010d26:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010d2a:	2d00      	cmp	r5, #0
 8010d2c:	f47f ac5c 	bne.w	80105e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8010d30:	e774      	b.n	8010c1c <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010d32:	498e      	ldr	r1, [pc, #568]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010d34:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010d36:	f001 0103 	and.w	r1, r1, #3
 8010d3a:	2903      	cmp	r1, #3
 8010d3c:	f000 8146 	beq.w	8010fcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8010d40:	2101      	movs	r1, #1
 8010d42:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010d46:	f7ff fa6b 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010d4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010d4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010d50:	2d00      	cmp	r5, #0
 8010d52:	d181      	bne.n	8010c58 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8010d54:	f7ff bbf1 	b.w	801053a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010d58:	4984      	ldr	r1, [pc, #528]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010d5a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010d5c:	f001 0103 	and.w	r1, r1, #3
 8010d60:	2903      	cmp	r1, #3
 8010d62:	f43f ad8a 	beq.w	801087a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8010d66:	2101      	movs	r1, #1
 8010d68:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010d6c:	f7ff fa58 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010d70:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010d72:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010d76:	2d00      	cmp	r5, #0
 8010d78:	f47f af4a 	bne.w	8010c10 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8010d7c:	e6a9      	b.n	8010ad2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010d7e:	497b      	ldr	r1, [pc, #492]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010d80:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010d82:	f001 0103 	and.w	r1, r1, #3
 8010d86:	2903      	cmp	r1, #3
 8010d88:	f43f ae7e 	beq.w	8010a88 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8010d8c:	2102      	movs	r1, #2
 8010d8e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010d92:	f7ff fa45 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010d96:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010d98:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010d9c:	2d00      	cmp	r5, #0
 8010d9e:	f47f af53 	bne.w	8010c48 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8010da2:	e552      	b.n	801084a <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010da4:	4971      	ldr	r1, [pc, #452]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010da6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010da8:	f001 0103 	and.w	r1, r1, #3
 8010dac:	2903      	cmp	r1, #3
 8010dae:	f000 8129 	beq.w	8011004 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8010db2:	2101      	movs	r1, #1
 8010db4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010db8:	f7ff fa32 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010dbc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010dbe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010dc2:	2d00      	cmp	r5, #0
 8010dc4:	f47f af3c 	bne.w	8010c40 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8010dc8:	f7ff bbdf 	b.w	801058a <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010dcc:	4867      	ldr	r0, [pc, #412]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010dce:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010dd0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010dd4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010dd6:	2d00      	cmp	r5, #0
 8010dd8:	f43f ab88 	beq.w	80104ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8010ddc:	462e      	mov	r6, r5
 8010dde:	f7ff bb8c 	b.w	80104fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010de2:	4862      	ldr	r0, [pc, #392]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010de4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010de6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010dea:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010dec:	2d00      	cmp	r5, #0
 8010dee:	f43f ab38 	beq.w	8010462 <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 8010df2:	462e      	mov	r6, r5
 8010df4:	f7ff bb3d 	b.w	8010472 <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010df8:	495c      	ldr	r1, [pc, #368]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010dfa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010dfc:	f001 0103 	and.w	r1, r1, #3
 8010e00:	2903      	cmp	r1, #3
 8010e02:	f000 8125 	beq.w	8011050 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8010e06:	2100      	movs	r1, #0
 8010e08:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010e0c:	f7ff fa08 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010e10:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010e12:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8010e16:	f7ff bb66 	b.w	80104e6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010e1a:	4954      	ldr	r1, [pc, #336]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010e1c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010e1e:	f001 0103 	and.w	r1, r1, #3
 8010e22:	2903      	cmp	r1, #3
 8010e24:	f000 813e 	beq.w	80110a4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8010e28:	2100      	movs	r1, #0
 8010e2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010e2e:	f7ff f9f7 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010e32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8010e34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010e38:	2d00      	cmp	r5, #0
 8010e3a:	f43f aabd 	beq.w	80103b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 8010e3e:	462e      	mov	r6, r5
 8010e40:	f7ff bac1 	b.w	80103c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010e44:	4949      	ldr	r1, [pc, #292]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010e46:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010e48:	f001 0103 	and.w	r1, r1, #3
 8010e4c:	2903      	cmp	r1, #3
 8010e4e:	f43f aa91 	beq.w	8010374 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8010e52:	2100      	movs	r1, #0
 8010e54:	f104 0008 	add.w	r0, r4, #8
 8010e58:	f7ff f972 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 8010e5c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010e5e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010e62:	2d00      	cmp	r5, #0
 8010e64:	f43f ae89 	beq.w	8010b7a <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 8010e68:	462e      	mov	r6, r5
 8010e6a:	f7ff ba85 	b.w	8010378 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010e6e:	493f      	ldr	r1, [pc, #252]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010e70:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010e72:	f001 0103 	and.w	r1, r1, #3
 8010e76:	2903      	cmp	r1, #3
 8010e78:	f43f aa7c 	beq.w	8010374 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8010e7c:	2100      	movs	r1, #0
 8010e7e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010e82:	f7ff f9cd 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010e86:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010e88:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8010e8c:	e672      	b.n	8010b74 <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010e8e:	4937      	ldr	r1, [pc, #220]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010e90:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010e92:	f001 0103 	and.w	r1, r1, #3
 8010e96:	2903      	cmp	r1, #3
 8010e98:	f000 80f9 	beq.w	801108e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8010e9c:	2100      	movs	r1, #0
 8010e9e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010ea2:	f7ff f9bd 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010ea6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8010ea8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010eac:	2d00      	cmp	r5, #0
 8010eae:	f43f aaad 	beq.w	801040c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 8010eb2:	462e      	mov	r6, r5
 8010eb4:	f7ff bab2 	b.w	801041c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010eb8:	492c      	ldr	r1, [pc, #176]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010eba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010ebc:	f001 0103 	and.w	r1, r1, #3
 8010ec0:	2903      	cmp	r1, #3
 8010ec2:	f000 80d1 	beq.w	8011068 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010ecc:	f7ff f9a8 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010ed0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010ed2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8010ed6:	f7ff bac1 	b.w	801045c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010eda:	4924      	ldr	r1, [pc, #144]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010edc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010ede:	f001 0103 	and.w	r1, r1, #3
 8010ee2:	2903      	cmp	r1, #3
 8010ee4:	f000 80c8 	beq.w	8011078 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8010ee8:	2102      	movs	r1, #2
 8010eea:	3028      	adds	r0, #40	@ 0x28
 8010eec:	f7ff f998 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010ef0:	4606      	mov	r6, r0
        break;
 8010ef2:	f7ff ba28 	b.w	8010346 <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010ef6:	481d      	ldr	r0, [pc, #116]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010ef8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010efa:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010efe:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8010f00:	f7ff ba81 	b.w	8010406 <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010f04:	4819      	ldr	r0, [pc, #100]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010f06:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010f08:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010f0c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8010f0e:	f7ff ba50 	b.w	80103b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010f12:	4d16      	ldr	r5, [pc, #88]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010f14:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8010f16:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8010f1a:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010f1c:	f7ff ba17 	b.w	801034e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f20:	4912      	ldr	r1, [pc, #72]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010f22:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010f24:	f001 0103 	and.w	r1, r1, #3
 8010f28:	2903      	cmp	r1, #3
 8010f2a:	f000 80e5 	beq.w	80110f8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8010f2e:	2101      	movs	r1, #1
 8010f30:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010f34:	f7ff f974 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010f38:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010f3a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010f3e:	2d00      	cmp	r5, #0
 8010f40:	f47f abcc 	bne.w	80106dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8010f44:	e68c      	b.n	8010c60 <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f46:	4909      	ldr	r1, [pc, #36]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010f48:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010f4a:	f001 0103 	and.w	r1, r1, #3
 8010f4e:	2903      	cmp	r1, #3
 8010f50:	f000 80d6 	beq.w	8011100 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8010f54:	2101      	movs	r1, #1
 8010f56:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010f5a:	f7ff f961 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010f5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010f60:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010f64:	2d00      	cmp	r5, #0
 8010f66:	f47f ab95 	bne.w	8010694 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8010f6a:	e65f      	b.n	8010c2c <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8010f6c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f70:	4983      	ldr	r1, [pc, #524]	@ (8011180 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8010f72:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010f74:	f001 0103 	and.w	r1, r1, #3
 8010f78:	2903      	cmp	r1, #3
 8010f7a:	f43f ab69 	beq.w	8010650 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8010f7e:	2101      	movs	r1, #1
 8010f80:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010f84:	f7ff f94c 	bl	8010220 <RCCEx_PLL3_Config.part.0>
 8010f88:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010f8a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010f8e:	2d00      	cmp	r5, #0
 8010f90:	f47f ae64 	bne.w	8010c5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8010f94:	e58d      	b.n	8010ab2 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 8010f96:	2001      	movs	r0, #1
}
 8010f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8010f9c:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8010fa0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8010fa4:	f43f abb9 	beq.w	801071a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8010fa8:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8010fac:	f43f abb5 	beq.w	801071a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 8010fb0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010fb2:	4635      	mov	r5, r6
 8010fb4:	f7ff bbbc 	b.w	8010730 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 8010fb8:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8010fbc:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8010fc0:	f43f aab8 	beq.w	8010534 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8010fc4:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8010fc8:	f43f aab4 	beq.w	8010534 <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 8010fcc:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010fce:	4635      	mov	r5, r6
 8010fd0:	f7ff baba 	b.w	8010548 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010fd4:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8010fd8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8010fdc:	f43f abef 	beq.w	80107be <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8010fe0:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8010fe4:	f43f abeb 	beq.w	80107be <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 8010fe8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010fea:	4635      	mov	r5, r6
 8010fec:	f7ff bbf2 	b.w	80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8010ff0:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8010ff4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8010ff8:	f43f aac4 	beq.w	8010584 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8010ffc:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8011000:	f43f aac0 	beq.w	8010584 <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 8011004:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8011006:	4635      	mov	r5, r6
 8011008:	f7ff bac7 	b.w	801059a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 801100c:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8011010:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8011014:	f43f abaa 	beq.w	801076c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8011018:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 801101c:	f43f aba6 	beq.w	801076c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 8011020:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8011022:	4635      	mov	r5, r6
 8011024:	f7ff bbad 	b.w	8010782 <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 8011028:	2501      	movs	r5, #1
 801102a:	e4e2      	b.n	80109f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801102c:	0691      	lsls	r1, r2, #26
 801102e:	d5b2      	bpl.n	8010f96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 8011030:	2501      	movs	r5, #1
 8011032:	e4f2      	b.n	8010a1a <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 8011034:	2501      	movs	r5, #1
 8011036:	e4a9      	b.n	801098c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8011038:	2501      	movs	r5, #1
 801103a:	e4b8      	b.n	80109ae <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 801103c:	2501      	movs	r5, #1
 801103e:	e4c7      	b.n	80109d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8011040:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8011044:	f43f aa4f 	beq.w	80104e6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8011048:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 801104c:	f43f aa4b 	beq.w	80104e6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 8011050:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8011052:	4635      	mov	r5, r6
 8011054:	f7ff ba51 	b.w	80104fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8011058:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 801105c:	f43f a9fe 	beq.w	801045c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8011060:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8011064:	f43f a9fa 	beq.w	801045c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8011068:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801106a:	4635      	mov	r5, r6
 801106c:	f7ff ba01 	b.w	8010472 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8011070:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8011074:	f43f a96b 	beq.w	801034e <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 8011078:	2601      	movs	r6, #1
 801107a:	f7ff b96f 	b.w	801035c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 801107e:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8011082:	f43f a9c0 	beq.w	8010406 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8011086:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 801108a:	f43f a9bc 	beq.w	8010406 <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 801108e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8011090:	4635      	mov	r5, r6
 8011092:	f7ff b9c3 	b.w	801041c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 8011096:	29c0      	cmp	r1, #192	@ 0xc0
 8011098:	f43f a98b 	beq.w	80103b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 801109c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80110a0:	f43f a987 	beq.w	80103b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 80110a4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80110a6:	4635      	mov	r5, r6
 80110a8:	f7ff b98d 	b.w	80103c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 80110ac:	2930      	cmp	r1, #48	@ 0x30
 80110ae:	f43f a9f1 	beq.w	8010494 <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 80110b2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80110b4:	4635      	mov	r5, r6
 80110b6:	f7ff b9f7 	b.w	80104a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 80110ba:	2503      	movs	r5, #3
      status = ret;
 80110bc:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80110be:	e9d4 3200 	ldrd	r3, r2, [r4]
 80110c2:	f7ff ba95 	b.w	80105f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80110c6:	6863      	ldr	r3, [r4, #4]
 80110c8:	069a      	lsls	r2, r3, #26
 80110ca:	f57f af64 	bpl.w	8010f96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80110ce:	4605      	mov	r5, r0
 80110d0:	e4a3      	b.n	8010a1a <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80110d2:	492b      	ldr	r1, [pc, #172]	@ (8011180 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 80110d4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80110d6:	f001 0103 	and.w	r1, r1, #3
 80110da:	2903      	cmp	r1, #3
 80110dc:	f43f aa6b 	beq.w	80105b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80110e0:	2101      	movs	r1, #1
 80110e2:	f104 0008 	add.w	r0, r4, #8
 80110e6:	f7ff f82b 	bl	8010140 <RCCEx_PLL2_Config.part.0>
 80110ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80110ec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80110f0:	2d00      	cmp	r5, #0
 80110f2:	f47f ad8f 	bne.w	8010c14 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80110f6:	e4bf      	b.n	8010a78 <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 80110f8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80110fa:	4635      	mov	r5, r6
 80110fc:	f7ff baef 	b.w	80106de <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 8011100:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8011102:	4635      	mov	r5, r6
 8011104:	f7ff bac7 	b.w	8010696 <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 8011108:	2601      	movs	r6, #1
 801110a:	f7ff bb79 	b.w	8010800 <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 801110e:	2601      	movs	r6, #1
 8011110:	f7ff bb68 	b.w	80107e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8011114:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011118:	e9d4 3200 	ldrd	r3, r2, [r4]
 801111c:	f7ff bb62 	b.w	80107e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011120:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8011124:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011126:	e9d4 3200 	ldrd	r3, r2, [r4]
 801112a:	f7ff bb69 	b.w	8010800 <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 801112e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8011130:	4635      	mov	r5, r6
 8011132:	f7ff ba5a 	b.w	80105ea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 8011136:	f7fc fdbb 	bl	800dcb0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801113a:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8011180 <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 801113e:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011140:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011144:	e004      	b.n	8011150 <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011146:	f7fc fdb3 	bl	800dcb0 <HAL_GetTick>
 801114a:	1bc0      	subs	r0, r0, r7
 801114c:	4548      	cmp	r0, r9
 801114e:	d810      	bhi.n	8011172 <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011150:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011154:	079b      	lsls	r3, r3, #30
 8011156:	d5f6      	bpl.n	8011146 <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011158:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801115c:	e4f0      	b.n	8010b40 <HAL_RCCEx_PeriphCLKConfig+0x840>
 801115e:	4808      	ldr	r0, [pc, #32]	@ (8011180 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8011160:	4a08      	ldr	r2, [pc, #32]	@ (8011184 <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 8011162:	6901      	ldr	r1, [r0, #16]
 8011164:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8011168:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 801116c:	430a      	orrs	r2, r1
 801116e:	6102      	str	r2, [r0, #16]
 8011170:	e4f1      	b.n	8010b56 <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 8011172:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011174:	e9d4 3200 	ldrd	r3, r2, [r4]
 8011178:	4635      	mov	r5, r6
 801117a:	f7ff ba39 	b.w	80105f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 801117e:	bf00      	nop
 8011180:	58024400 	.word	0x58024400
 8011184:	00ffffcf 	.word	0x00ffffcf

08011188 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop

0801118c <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 801118c:	b318      	cbz	r0, 80111d6 <HAL_SDRAM_Init+0x4a>
{
 801118e:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011190:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8011194:	4604      	mov	r4, r0
 8011196:	460d      	mov	r5, r1
 8011198:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801119c:	b1b3      	cbz	r3, 80111cc <HAL_SDRAM_Init+0x40>
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801119e:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80111a0:	2302      	movs	r3, #2
 80111a2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80111a6:	f851 0b04 	ldr.w	r0, [r1], #4
 80111aa:	f000 fb43 	bl	8011834 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80111ae:	6862      	ldr	r2, [r4, #4]
 80111b0:	4629      	mov	r1, r5
 80111b2:	6820      	ldr	r0, [r4, #0]
 80111b4:	f000 fb74 	bl	80118a0 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 80111b8:	4a08      	ldr	r2, [pc, #32]	@ (80111dc <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 80111ba:	2101      	movs	r1, #1
  return HAL_OK;
 80111bc:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80111be:	6813      	ldr	r3, [r2, #0]
 80111c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80111c4:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80111c6:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
}
 80111ca:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80111cc:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80111d0:	f7ff ffda 	bl	8011188 <HAL_SDRAM_MspInit>
 80111d4:	e7e3      	b.n	801119e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 80111d6:	2001      	movs	r0, #1
}
 80111d8:	4770      	bx	lr
 80111da:	bf00      	nop
 80111dc:	52004000 	.word	0x52004000

080111e0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80111e0:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80111e2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80111e6:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80111e8:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80111ea:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80111ec:	d004      	beq.n	80111f8 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80111ee:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 80111f2:	2c01      	cmp	r4, #1
 80111f4:	d001      	beq.n	80111fa <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 80111f6:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80111f8:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80111fa:	2302      	movs	r3, #2
 80111fc:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80111fe:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011200:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8011204:	f000 fb8a 	bl	801191c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011208:	6833      	ldr	r3, [r6, #0]
 801120a:	2b02      	cmp	r3, #2
 801120c:	d003      	beq.n	8011216 <HAL_SDRAM_SendCommand+0x36>
      hsdram->State = HAL_SDRAM_STATE_READY;
 801120e:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
  return HAL_OK;
 8011212:	2000      	movs	r0, #0
}
 8011214:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8011216:	2305      	movs	r3, #5
 8011218:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 801121c:	e7f9      	b.n	8011212 <HAL_SDRAM_SendCommand+0x32>
 801121e:	bf00      	nop

08011220 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8011220:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011222:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8011226:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011228:	2b02      	cmp	r3, #2
 801122a:	b2d8      	uxtb	r0, r3
 801122c:	d005      	beq.n	801123a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 801122e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011232:	2b01      	cmp	r3, #1
 8011234:	b2dd      	uxtb	r5, r3
 8011236:	d001      	beq.n	801123c <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8011238:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 801123a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801123c:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 801123e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011240:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8011244:	f000 fb84 	bl	8011950 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8011248:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 801124a:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 801124e:	bd38      	pop	{r3, r4, r5, pc}

08011250 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop

08011254 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8011254:	2800      	cmp	r0, #0
 8011256:	f000 8091 	beq.w	801137c <HAL_TIM_Base_Init+0x128>
{
 801125a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 801125c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8011260:	4604      	mov	r4, r0
 8011262:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8011266:	2b00      	cmp	r3, #0
 8011268:	f000 8083 	beq.w	8011372 <HAL_TIM_Base_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801126c:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801126e:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011270:	4943      	ldr	r1, [pc, #268]	@ (8011380 <HAL_TIM_Base_Init+0x12c>)
 8011272:	4844      	ldr	r0, [pc, #272]	@ (8011384 <HAL_TIM_Base_Init+0x130>)
 8011274:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8011278:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 801127c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011280:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 8011284:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011286:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801128a:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801128c:	fabe fe8e 	clz	lr, lr

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011290:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011292:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011296:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011298:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801129c:	d020      	beq.n	80112e0 <HAL_TIM_Base_Init+0x8c>
 801129e:	b9f9      	cbnz	r1, 80112e0 <HAL_TIM_Base_Init+0x8c>
 80112a0:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8011394 <HAL_TIM_Base_Init+0x140>
 80112a4:	4562      	cmp	r2, ip
 80112a6:	d04b      	beq.n	8011340 <HAL_TIM_Base_Init+0xec>
 80112a8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80112ac:	4562      	cmp	r2, ip
 80112ae:	d047      	beq.n	8011340 <HAL_TIM_Base_Init+0xec>
 80112b0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80112b4:	4562      	cmp	r2, ip
 80112b6:	d013      	beq.n	80112e0 <HAL_TIM_Base_Init+0x8c>
 80112b8:	f1be 0f00 	cmp.w	lr, #0
 80112bc:	d110      	bne.n	80112e0 <HAL_TIM_Base_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80112be:	4832      	ldr	r0, [pc, #200]	@ (8011388 <HAL_TIM_Base_Init+0x134>)
 80112c0:	4932      	ldr	r1, [pc, #200]	@ (801138c <HAL_TIM_Base_Init+0x138>)
 80112c2:	428a      	cmp	r2, r1
 80112c4:	bf18      	it	ne
 80112c6:	4282      	cmpne	r2, r0
 80112c8:	d03e      	beq.n	8011348 <HAL_TIM_Base_Init+0xf4>
 80112ca:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80112ce:	428a      	cmp	r2, r1
 80112d0:	d03a      	beq.n	8011348 <HAL_TIM_Base_Init+0xf4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80112d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80112d6:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80112d8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80112da:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80112dc:	6295      	str	r5, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80112de:	e013      	b.n	8011308 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 80112e0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80112e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80112e6:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80112e8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80112ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80112ee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80112f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80112f4:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80112f6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80112f8:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80112fa:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80112fc:	b911      	cbnz	r1, 8011304 <HAL_TIM_Base_Init+0xb0>
 80112fe:	f1be 0f00 	cmp.w	lr, #0
 8011302:	d02b      	beq.n	801135c <HAL_TIM_Base_Init+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011304:	6963      	ldr	r3, [r4, #20]
 8011306:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011308:	2301      	movs	r3, #1
  return HAL_OK;
 801130a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 801130c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801130e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011312:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8011316:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 801131a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801131e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8011322:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801132a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801132e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8011332:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8011336:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 801133a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 801133e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8011344:	68a1      	ldr	r1, [r4, #8]
 8011346:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011348:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 801134a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801134e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011354:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8011356:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011358:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 801135a:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801135c:	490c      	ldr	r1, [pc, #48]	@ (8011390 <HAL_TIM_Base_Init+0x13c>)
 801135e:	4b0a      	ldr	r3, [pc, #40]	@ (8011388 <HAL_TIM_Base_Init+0x134>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011360:	429a      	cmp	r2, r3
 8011362:	bf18      	it	ne
 8011364:	428a      	cmpne	r2, r1
 8011366:	d0cd      	beq.n	8011304 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011368:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801136c:	429a      	cmp	r2, r3
 801136e:	d0c9      	beq.n	8011304 <HAL_TIM_Base_Init+0xb0>
 8011370:	e7ca      	b.n	8011308 <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 8011372:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8011376:	f7ff ff6b 	bl	8011250 <HAL_TIM_Base_MspInit>
 801137a:	e777      	b.n	801126c <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 801137c:	2001      	movs	r0, #1
}
 801137e:	4770      	bx	lr
 8011380:	40010000 	.word	0x40010000
 8011384:	40010400 	.word	0x40010400
 8011388:	40014000 	.word	0x40014000
 801138c:	40014400 	.word	0x40014400
 8011390:	40014800 	.word	0x40014800
 8011394:	40000400 	.word	0x40000400

08011398 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8011398:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801139c:	2b01      	cmp	r3, #1
 801139e:	d13d      	bne.n	801141c <HAL_TIM_Base_Start_IT+0x84>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80113a0:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80113a2:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113a4:	4b1e      	ldr	r3, [pc, #120]	@ (8011420 <HAL_TIM_Base_Start_IT+0x88>)
 80113a6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80113aa:	bf18      	it	ne
 80113ac:	429a      	cmpne	r2, r3
{
 80113ae:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113b0:	bf0c      	ite	eq
 80113b2:	2301      	moveq	r3, #1
 80113b4:	2300      	movne	r3, #0
 80113b6:	4d1b      	ldr	r5, [pc, #108]	@ (8011424 <HAL_TIM_Base_Start_IT+0x8c>)
 80113b8:	4c1b      	ldr	r4, [pc, #108]	@ (8011428 <HAL_TIM_Base_Start_IT+0x90>)
 80113ba:	42aa      	cmp	r2, r5
 80113bc:	bf08      	it	eq
 80113be:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80113c2:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80113c6:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113c8:	42a2      	cmp	r2, r4
 80113ca:	bf08      	it	eq
 80113cc:	f043 0301 	orreq.w	r3, r3, #1
 80113d0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80113d4:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113d8:	4814      	ldr	r0, [pc, #80]	@ (801142c <HAL_TIM_Base_Start_IT+0x94>)
 80113da:	42a2      	cmp	r2, r4
 80113dc:	bf08      	it	eq
 80113de:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80113e2:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113e4:	4282      	cmp	r2, r0
 80113e6:	bf08      	it	eq
 80113e8:	f043 0301 	orreq.w	r3, r3, #1
 80113ec:	4910      	ldr	r1, [pc, #64]	@ (8011430 <HAL_TIM_Base_Start_IT+0x98>)
 80113ee:	428a      	cmp	r2, r1
 80113f0:	bf08      	it	eq
 80113f2:	f043 0301 	orreq.w	r3, r3, #1
 80113f6:	b913      	cbnz	r3, 80113fe <HAL_TIM_Base_Start_IT+0x66>
 80113f8:	4b0e      	ldr	r3, [pc, #56]	@ (8011434 <HAL_TIM_Base_Start_IT+0x9c>)
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d107      	bne.n	801140e <HAL_TIM_Base_Start_IT+0x76>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80113fe:	6891      	ldr	r1, [r2, #8]
 8011400:	4b0d      	ldr	r3, [pc, #52]	@ (8011438 <HAL_TIM_Base_Start_IT+0xa0>)
 8011402:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011404:	2b06      	cmp	r3, #6
 8011406:	d006      	beq.n	8011416 <HAL_TIM_Base_Start_IT+0x7e>
 8011408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801140c:	d003      	beq.n	8011416 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 801140e:	6813      	ldr	r3, [r2, #0]
 8011410:	f043 0301 	orr.w	r3, r3, #1
 8011414:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8011416:	2000      	movs	r0, #0
}
 8011418:	bc30      	pop	{r4, r5}
 801141a:	4770      	bx	lr
    return HAL_ERROR;
 801141c:	2001      	movs	r0, #1
}
 801141e:	4770      	bx	lr
 8011420:	40010000 	.word	0x40010000
 8011424:	40000400 	.word	0x40000400
 8011428:	40000800 	.word	0x40000800
 801142c:	40010400 	.word	0x40010400
 8011430:	40001800 	.word	0x40001800
 8011434:	40014000 	.word	0x40014000
 8011438:	00010007 	.word	0x00010007

0801143c <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 801143c:	4770      	bx	lr
 801143e:	bf00      	nop

08011440 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8011440:	2800      	cmp	r0, #0
 8011442:	f000 8091 	beq.w	8011568 <HAL_TIM_PWM_Init+0x128>
{
 8011446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8011448:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801144c:	4604      	mov	r4, r0
 801144e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8011452:	2b00      	cmp	r3, #0
 8011454:	f000 8083 	beq.w	801155e <HAL_TIM_PWM_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011458:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801145a:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801145c:	4943      	ldr	r1, [pc, #268]	@ (801156c <HAL_TIM_PWM_Init+0x12c>)
 801145e:	4844      	ldr	r0, [pc, #272]	@ (8011570 <HAL_TIM_PWM_Init+0x130>)
 8011460:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8011464:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8011468:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801146c:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 8011470:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011472:	fab1 f181 	clz	r1, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011476:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011478:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 801147c:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801147e:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->PSC = Structure->Prescaler;
 8011482:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011484:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8011488:	d020      	beq.n	80114cc <HAL_TIM_PWM_Init+0x8c>
 801148a:	b9f9      	cbnz	r1, 80114cc <HAL_TIM_PWM_Init+0x8c>
 801148c:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8011580 <HAL_TIM_PWM_Init+0x140>
 8011490:	4562      	cmp	r2, ip
 8011492:	d04b      	beq.n	801152c <HAL_TIM_PWM_Init+0xec>
 8011494:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8011498:	4562      	cmp	r2, ip
 801149a:	d047      	beq.n	801152c <HAL_TIM_PWM_Init+0xec>
 801149c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80114a0:	4562      	cmp	r2, ip
 80114a2:	d013      	beq.n	80114cc <HAL_TIM_PWM_Init+0x8c>
 80114a4:	f1be 0f00 	cmp.w	lr, #0
 80114a8:	d110      	bne.n	80114cc <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80114aa:	4832      	ldr	r0, [pc, #200]	@ (8011574 <HAL_TIM_PWM_Init+0x134>)
 80114ac:	4932      	ldr	r1, [pc, #200]	@ (8011578 <HAL_TIM_PWM_Init+0x138>)
 80114ae:	428a      	cmp	r2, r1
 80114b0:	bf18      	it	ne
 80114b2:	4282      	cmpne	r2, r0
 80114b4:	d03e      	beq.n	8011534 <HAL_TIM_PWM_Init+0xf4>
 80114b6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80114ba:	428a      	cmp	r2, r1
 80114bc:	d03a      	beq.n	8011534 <HAL_TIM_PWM_Init+0xf4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80114c2:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80114c4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114c6:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80114c8:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80114ca:	e013      	b.n	80114f4 <HAL_TIM_PWM_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 80114cc:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80114ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80114d2:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80114d4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80114d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80114da:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80114e0:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80114e2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114e4:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80114e6:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80114e8:	b911      	cbnz	r1, 80114f0 <HAL_TIM_PWM_Init+0xb0>
 80114ea:	f1be 0f00 	cmp.w	lr, #0
 80114ee:	d02b      	beq.n	8011548 <HAL_TIM_PWM_Init+0x108>
    TIMx->RCR = Structure->RepetitionCounter;
 80114f0:	6963      	ldr	r3, [r4, #20]
 80114f2:	6313      	str	r3, [r2, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80114f4:	2301      	movs	r3, #1
  return HAL_OK;
 80114f6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80114f8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80114fa:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80114fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8011502:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8011506:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801150a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 801150e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011516:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801151a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801151e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8011522:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011526:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 801152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801152c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8011530:	68a1      	ldr	r1, [r4, #8]
 8011532:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011534:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8011536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801153a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801153c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011540:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8011542:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011544:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011546:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011548:	490c      	ldr	r1, [pc, #48]	@ (801157c <HAL_TIM_PWM_Init+0x13c>)
 801154a:	4b0a      	ldr	r3, [pc, #40]	@ (8011574 <HAL_TIM_PWM_Init+0x134>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801154c:	429a      	cmp	r2, r3
 801154e:	bf18      	it	ne
 8011550:	428a      	cmpne	r2, r1
 8011552:	d0cd      	beq.n	80114f0 <HAL_TIM_PWM_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011554:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011558:	429a      	cmp	r2, r3
 801155a:	d0c9      	beq.n	80114f0 <HAL_TIM_PWM_Init+0xb0>
 801155c:	e7ca      	b.n	80114f4 <HAL_TIM_PWM_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 801155e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8011562:	f7ff ff6b 	bl	801143c <HAL_TIM_PWM_MspInit>
 8011566:	e777      	b.n	8011458 <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 8011568:	2001      	movs	r0, #1
}
 801156a:	4770      	bx	lr
 801156c:	40010000 	.word	0x40010000
 8011570:	40010400 	.word	0x40010400
 8011574:	40014000 	.word	0x40014000
 8011578:	40014400 	.word	0x40014400
 801157c:	40014800 	.word	0x40014800
 8011580:	40000400 	.word	0x40000400

08011584 <HAL_TIM_PWM_MspDeInit>:
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
 8011584:	4770      	bx	lr
 8011586:	bf00      	nop

08011588 <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8011588:	2102      	movs	r1, #2
  __HAL_TIM_DISABLE(htim);
 801158a:	6803      	ldr	r3, [r0, #0]
 801158c:	f241 1211 	movw	r2, #4369	@ 0x1111
{
 8011590:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8011592:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
{
 8011596:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8011598:	6a19      	ldr	r1, [r3, #32]
 801159a:	4211      	tst	r1, r2
 801159c:	d108      	bne.n	80115b0 <HAL_TIM_PWM_DeInit+0x28>
 801159e:	6a19      	ldr	r1, [r3, #32]
 80115a0:	f240 4244 	movw	r2, #1092	@ 0x444
 80115a4:	4211      	tst	r1, r2
 80115a6:	d103      	bne.n	80115b0 <HAL_TIM_PWM_DeInit+0x28>
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	f022 0201 	bic.w	r2, r2, #1
 80115ae:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 80115b0:	4620      	mov	r0, r4
 80115b2:	f7ff ffe7 	bl	8011584 <HAL_TIM_PWM_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80115b6:	2000      	movs	r0, #0
 80115b8:	f884 0048 	strb.w	r0, [r4, #72]	@ 0x48
  __HAL_UNLOCK(htim);
 80115bc:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80115c0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
 80115c4:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
 80115c8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 80115cc:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
 80115d0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
 80115d4:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80115d8:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 80115dc:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
 80115e0:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
 80115e4:	f884 0047 	strb.w	r0, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_RESET;
 80115e8:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
}
 80115ec:	bd10      	pop	{r4, pc}
 80115ee:	bf00      	nop

080115f0 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80115f0:	4770      	bx	lr
 80115f2:	bf00      	nop

080115f4 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop

080115f8 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80115f8:	4770      	bx	lr
 80115fa:	bf00      	nop

080115fc <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80115fc:	4770      	bx	lr
 80115fe:	bf00      	nop

08011600 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011600:	6803      	ldr	r3, [r0, #0]
 8011602:	691a      	ldr	r2, [r3, #16]
 8011604:	0791      	lsls	r1, r2, #30
{
 8011606:	b510      	push	{r4, lr}
 8011608:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801160a:	d502      	bpl.n	8011612 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801160c:	68da      	ldr	r2, [r3, #12]
 801160e:	0792      	lsls	r2, r2, #30
 8011610:	d468      	bmi.n	80116e4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011612:	691a      	ldr	r2, [r3, #16]
 8011614:	0752      	lsls	r2, r2, #29
 8011616:	d502      	bpl.n	801161e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011618:	68da      	ldr	r2, [r3, #12]
 801161a:	0750      	lsls	r0, r2, #29
 801161c:	d44f      	bmi.n	80116be <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801161e:	691a      	ldr	r2, [r3, #16]
 8011620:	0711      	lsls	r1, r2, #28
 8011622:	d502      	bpl.n	801162a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011624:	68da      	ldr	r2, [r3, #12]
 8011626:	0712      	lsls	r2, r2, #28
 8011628:	d437      	bmi.n	801169a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801162a:	691a      	ldr	r2, [r3, #16]
 801162c:	06d0      	lsls	r0, r2, #27
 801162e:	d502      	bpl.n	8011636 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011630:	68da      	ldr	r2, [r3, #12]
 8011632:	06d1      	lsls	r1, r2, #27
 8011634:	d41e      	bmi.n	8011674 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011636:	691a      	ldr	r2, [r3, #16]
 8011638:	07d2      	lsls	r2, r2, #31
 801163a:	d502      	bpl.n	8011642 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801163c:	68da      	ldr	r2, [r3, #12]
 801163e:	07d0      	lsls	r0, r2, #31
 8011640:	d469      	bmi.n	8011716 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011642:	691a      	ldr	r2, [r3, #16]
 8011644:	0611      	lsls	r1, r2, #24
 8011646:	d502      	bpl.n	801164e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011648:	68da      	ldr	r2, [r3, #12]
 801164a:	0612      	lsls	r2, r2, #24
 801164c:	d46b      	bmi.n	8011726 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801164e:	691a      	ldr	r2, [r3, #16]
 8011650:	05d0      	lsls	r0, r2, #23
 8011652:	d502      	bpl.n	801165a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011654:	68da      	ldr	r2, [r3, #12]
 8011656:	0611      	lsls	r1, r2, #24
 8011658:	d46d      	bmi.n	8011736 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801165a:	691a      	ldr	r2, [r3, #16]
 801165c:	0652      	lsls	r2, r2, #25
 801165e:	d502      	bpl.n	8011666 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011660:	68da      	ldr	r2, [r3, #12]
 8011662:	0650      	lsls	r0, r2, #25
 8011664:	d46f      	bmi.n	8011746 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011666:	691a      	ldr	r2, [r3, #16]
 8011668:	0691      	lsls	r1, r2, #26
 801166a:	d502      	bpl.n	8011672 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801166c:	68da      	ldr	r2, [r3, #12]
 801166e:	0692      	lsls	r2, r2, #26
 8011670:	d449      	bmi.n	8011706 <HAL_TIM_IRQHandler+0x106>
}
 8011672:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011674:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011678:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 801167a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801167c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801167e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011680:	69db      	ldr	r3, [r3, #28]
 8011682:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8011686:	d16f      	bne.n	8011768 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011688:	f7ff ffb2 	bl	80115f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801168c:	4620      	mov	r0, r4
 801168e:	f7ff ffb3 	bl	80115f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011692:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011694:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011696:	7722      	strb	r2, [r4, #28]
 8011698:	e7cd      	b.n	8011636 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801169a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801169e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80116a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80116a2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80116a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80116a6:	69db      	ldr	r3, [r3, #28]
 80116a8:	079b      	lsls	r3, r3, #30
 80116aa:	d15a      	bne.n	8011762 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80116ac:	f7ff ffa0 	bl	80115f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80116b0:	4620      	mov	r0, r4
 80116b2:	f7ff ffa1 	bl	80115f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116b6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80116b8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116ba:	7722      	strb	r2, [r4, #28]
 80116bc:	e7b5      	b.n	801162a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80116be:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80116c2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80116c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80116c6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80116c8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80116ca:	699b      	ldr	r3, [r3, #24]
 80116cc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80116d0:	d144      	bne.n	801175c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80116d2:	f7ff ff8d 	bl	80115f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80116d6:	4620      	mov	r0, r4
 80116d8:	f7ff ff8e 	bl	80115f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116dc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80116de:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116e0:	7722      	strb	r2, [r4, #28]
 80116e2:	e79c      	b.n	801161e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80116e4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80116e8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80116ea:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80116ec:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80116ee:	699b      	ldr	r3, [r3, #24]
 80116f0:	0799      	lsls	r1, r3, #30
 80116f2:	d130      	bne.n	8011756 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80116f4:	f7ff ff7c 	bl	80115f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80116f8:	4620      	mov	r0, r4
 80116fa:	f7ff ff7d 	bl	80115f8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116fe:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011700:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011702:	7722      	strb	r2, [r4, #28]
 8011704:	e785      	b.n	8011612 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011706:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801170a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801170c:	611a      	str	r2, [r3, #16]
}
 801170e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8011712:	f000 b82d 	b.w	8011770 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011716:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 801171a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801171c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801171e:	f000 f881 	bl	8011824 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011722:	6823      	ldr	r3, [r4, #0]
 8011724:	e78d      	b.n	8011642 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011726:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 801172a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801172c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801172e:	f000 f821 	bl	8011774 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011732:	6823      	ldr	r3, [r4, #0]
 8011734:	e78b      	b.n	801164e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011736:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 801173a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801173c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 801173e:	f000 f81b 	bl	8011778 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011742:	6823      	ldr	r3, [r4, #0]
 8011744:	e789      	b.n	801165a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011746:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 801174a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801174c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801174e:	f7ff ff55 	bl	80115fc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011752:	6823      	ldr	r3, [r4, #0]
 8011754:	e787      	b.n	8011666 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8011756:	f7ff ff4d 	bl	80115f4 <HAL_TIM_IC_CaptureCallback>
 801175a:	e7d0      	b.n	80116fe <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 801175c:	f7ff ff4a 	bl	80115f4 <HAL_TIM_IC_CaptureCallback>
 8011760:	e7bc      	b.n	80116dc <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8011762:	f7ff ff47 	bl	80115f4 <HAL_TIM_IC_CaptureCallback>
 8011766:	e7a6      	b.n	80116b6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8011768:	f7ff ff44 	bl	80115f4 <HAL_TIM_IC_CaptureCallback>
 801176c:	e791      	b.n	8011692 <HAL_TIM_IRQHandler+0x92>
 801176e:	bf00      	nop

08011770 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop

08011774 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8011774:	4770      	bx	lr
 8011776:	bf00      	nop

08011778 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop

0801177c <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 801177c:	4b24      	ldr	r3, [pc, #144]	@ (8011810 <HAL_InitTick+0x94>)
 801177e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8011782:	f042 0210 	orr.w	r2, r2, #16
{
 8011786:	b570      	push	{r4, r5, r6, lr}
 8011788:	b08a      	sub	sp, #40	@ 0x28
  __HAL_RCC_TIM6_CLK_ENABLE();
 801178a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 801178e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
{
 8011792:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011794:	4669      	mov	r1, sp
 8011796:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 8011798:	f003 0310 	and.w	r3, r3, #16
 801179c:	9301      	str	r3, [sp, #4]
 801179e:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80117a0:	f7fe fca2 	bl	80100e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80117a4:	9b07      	ldr	r3, [sp, #28]
 80117a6:	b9cb      	cbnz	r3, 80117dc <HAL_InitTick+0x60>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80117a8:	f7fe fc0e 	bl	800ffc8 <HAL_RCC_GetPCLK1Freq>
 80117ac:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80117ae:	4a19      	ldr	r2, [pc, #100]	@ (8011814 <HAL_InitTick+0x98>)

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80117b0:	4c19      	ldr	r4, [pc, #100]	@ (8011818 <HAL_InitTick+0x9c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80117b2:	fba2 2303 	umull	r2, r3, r2, r3
  TimHandle.Instance = TIM6;
 80117b6:	4919      	ldr	r1, [pc, #100]	@ (801181c <HAL_InitTick+0xa0>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0U;
 80117b8:	2200      	movs	r2, #0
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  status = HAL_TIM_Base_Init(&TimHandle);
 80117ba:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80117bc:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 80117be:	6021      	str	r1, [r4, #0]
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80117c0:	f240 31e7 	movw	r1, #999	@ 0x3e7
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80117c4:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80117c6:	3b01      	subs	r3, #1
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80117c8:	e9c4 1203 	strd	r1, r2, [r4, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80117cc:	6063      	str	r3, [r4, #4]
  status = HAL_TIM_Base_Init(&TimHandle);
 80117ce:	f7ff fd41 	bl	8011254 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80117d2:	4606      	mov	r6, r0
 80117d4:	b130      	cbz	r0, 80117e4 <HAL_InitTick+0x68>
   }
}

  /* Return function status */
  return status;
}
 80117d6:	4630      	mov	r0, r6
 80117d8:	b00a      	add	sp, #40	@ 0x28
 80117da:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80117dc:	f7fe fbf4 	bl	800ffc8 <HAL_RCC_GetPCLK1Freq>
 80117e0:	0043      	lsls	r3, r0, #1
 80117e2:	e7e4      	b.n	80117ae <HAL_InitTick+0x32>
    status = HAL_TIM_Base_Start_IT(&TimHandle);
 80117e4:	4620      	mov	r0, r4
 80117e6:	f7ff fdd7 	bl	8011398 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80117ea:	4606      	mov	r6, r0
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d1f2      	bne.n	80117d6 <HAL_InitTick+0x5a>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80117f0:	2036      	movs	r0, #54	@ 0x36
 80117f2:	f7fc fad1 	bl	800dd98 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80117f6:	2d0f      	cmp	r5, #15
 80117f8:	d901      	bls.n	80117fe <HAL_InitTick+0x82>
        status = HAL_ERROR;
 80117fa:	2601      	movs	r6, #1
 80117fc:	e7eb      	b.n	80117d6 <HAL_InitTick+0x5a>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 80117fe:	4632      	mov	r2, r6
 8011800:	4629      	mov	r1, r5
 8011802:	2036      	movs	r0, #54	@ 0x36
 8011804:	f7fc fa8c 	bl	800dd20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011808:	4b05      	ldr	r3, [pc, #20]	@ (8011820 <HAL_InitTick+0xa4>)
 801180a:	601d      	str	r5, [r3, #0]
 801180c:	e7e3      	b.n	80117d6 <HAL_InitTick+0x5a>
 801180e:	bf00      	nop
 8011810:	58024400 	.word	0x58024400
 8011814:	431bde83 	.word	0x431bde83
 8011818:	240412ac 	.word	0x240412ac
 801181c:	40001000 	.word	0x40001000
 8011820:	24000130 	.word	0x24000130

08011824 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8011824:	f7fc ba38 	b.w	800dc98 <HAL_IncTick>

08011828 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8011828:	4801      	ldr	r0, [pc, #4]	@ (8011830 <TIM6_DAC_IRQHandler+0x8>)
 801182a:	f7ff bee9 	b.w	8011600 <HAL_TIM_IRQHandler>
 801182e:	bf00      	nop
 8011830:	240412ac 	.word	0x240412ac

08011834 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011838:	e9d1 3e07 	ldrd	r3, lr, [r1, #28]
 801183c:	e9d1 8200 	ldrd	r8, r2, [r1]
 8011840:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
 8011842:	ea43 030e 	orr.w	r3, r3, lr
 8011846:	e9d1 c602 	ldrd	ip, r6, [r1, #8]
 801184a:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 801184e:	6989      	ldr	r1, [r1, #24]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8011850:	f1b8 0f00 	cmp.w	r8, #0
 8011854:	d10f      	bne.n	8011876 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011856:	433b      	orrs	r3, r7
 8011858:	4313      	orrs	r3, r2
 801185a:	6802      	ldr	r2, [r0, #0]
 801185c:	ea43 030c 	orr.w	r3, r3, ip
 8011860:	f36f 020e 	bfc	r2, #0, #15
 8011864:	4333      	orrs	r3, r6
 8011866:	432b      	orrs	r3, r5
 8011868:	4323      	orrs	r3, r4
 801186a:	430b      	orrs	r3, r1
 801186c:	4313      	orrs	r3, r2
 801186e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8011870:	2000      	movs	r0, #0
 8011872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011876:	ea42 020c 	orr.w	r2, r2, ip
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801187a:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801187c:	4332      	orrs	r2, r6
 801187e:	432a      	orrs	r2, r5
 8011880:	4322      	orrs	r2, r4
 8011882:	430a      	orrs	r2, r1
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011884:	6801      	ldr	r1, [r0, #0]
 8011886:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 801188a:	430b      	orrs	r3, r1
 801188c:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801188e:	6843      	ldr	r3, [r0, #4]
 8011890:	f36f 030e 	bfc	r3, #0, #15
 8011894:	4313      	orrs	r3, r2
 8011896:	6043      	str	r3, [r0, #4]
}
 8011898:	2000      	movs	r0, #0
 801189a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801189e:	bf00      	nop

080118a0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80118a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80118a2:	68cc      	ldr	r4, [r1, #12]
 80118a4:	694b      	ldr	r3, [r1, #20]
 80118a6:	3c01      	subs	r4, #1
 80118a8:	688d      	ldr	r5, [r1, #8]
 80118aa:	698f      	ldr	r7, [r1, #24]
 80118ac:	3b01      	subs	r3, #1
 80118ae:	ea4f 3e04 	mov.w	lr, r4, lsl #12
 80118b2:	684c      	ldr	r4, [r1, #4]
 80118b4:	680e      	ldr	r6, [r1, #0]
 80118b6:	3d01      	subs	r5, #1
 80118b8:	3c01      	subs	r4, #1
 80118ba:	051b      	lsls	r3, r3, #20
 80118bc:	022d      	lsls	r5, r5, #8
 80118be:	3e01      	subs	r6, #1
 80118c0:	ea4f 1c04 	mov.w	ip, r4, lsl #4
 80118c4:	690c      	ldr	r4, [r1, #16]
 80118c6:	1e79      	subs	r1, r7, #1
 80118c8:	3c01      	subs	r4, #1
 80118ca:	0609      	lsls	r1, r1, #24
 80118cc:	0424      	lsls	r4, r4, #16
  if (Bank == FMC_SDRAM_BANK1)
 80118ce:	b972      	cbnz	r2, 80118ee <FMC_SDRAM_Timing_Init+0x4e>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80118d0:	ea4e 0303 	orr.w	r3, lr, r3
 80118d4:	6882      	ldr	r2, [r0, #8]
 80118d6:	4333      	orrs	r3, r6
 80118d8:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80118dc:	ea43 030c 	orr.w	r3, r3, ip
 80118e0:	432b      	orrs	r3, r5
 80118e2:	4323      	orrs	r3, r4
 80118e4:	430b      	orrs	r3, r1
 80118e6:	4313      	orrs	r3, r2
 80118e8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80118ea:	2000      	movs	r0, #0
 80118ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80118ee:	ea4e 0e03 	orr.w	lr, lr, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80118f2:	ea4c 0305 	orr.w	r3, ip, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80118f6:	4a08      	ldr	r2, [pc, #32]	@ (8011918 <FMC_SDRAM_Timing_Init+0x78>)
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80118f8:	4333      	orrs	r3, r6
 80118fa:	4323      	orrs	r3, r4
 80118fc:	430b      	orrs	r3, r1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80118fe:	6881      	ldr	r1, [r0, #8]
 8011900:	400a      	ands	r2, r1
 8011902:	ea4e 0202 	orr.w	r2, lr, r2
 8011906:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011908:	68c2      	ldr	r2, [r0, #12]
 801190a:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 801190e:	4313      	orrs	r3, r2
 8011910:	60c3      	str	r3, [r0, #12]
}
 8011912:	2000      	movs	r0, #0
 8011914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011916:	bf00      	nop
 8011918:	ff0f0fff 	.word	0xff0f0fff

0801191c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801191c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 801191e:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 8011922:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011924:	f8df c024 	ldr.w	ip, [pc, #36]	@ 801194c <FMC_SDRAM_SendCommand+0x30>
 8011928:	6900      	ldr	r0, [r0, #16]
 801192a:	4323      	orrs	r3, r4
 801192c:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 8011930:	ea00 0c0c 	and.w	ip, r0, ip
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8011934:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011936:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 801193a:	3901      	subs	r1, #1
}
 801193c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011940:	ea43 030c 	orr.w	r3, r3, ip
 8011944:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8011948:	6113      	str	r3, [r2, #16]
}
 801194a:	4770      	bx	lr
 801194c:	ffc00000 	.word	0xffc00000

08011950 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011950:	4602      	mov	r2, r0

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));

  return HAL_OK;
}
 8011952:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8011954:	6953      	ldr	r3, [r2, #20]
 8011956:	f36f 034d 	bfc	r3, #1, #13
 801195a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 801195e:	6153      	str	r3, [r2, #20]
}
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop

08011964 <siprintf>:
 8011964:	b40e      	push	{r1, r2, r3}
 8011966:	b510      	push	{r4, lr}
 8011968:	b09d      	sub	sp, #116	@ 0x74
 801196a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801196c:	9002      	str	r0, [sp, #8]
 801196e:	9006      	str	r0, [sp, #24]
 8011970:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011974:	480a      	ldr	r0, [pc, #40]	@ (80119a0 <siprintf+0x3c>)
 8011976:	9107      	str	r1, [sp, #28]
 8011978:	9104      	str	r1, [sp, #16]
 801197a:	490a      	ldr	r1, [pc, #40]	@ (80119a4 <siprintf+0x40>)
 801197c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011980:	9105      	str	r1, [sp, #20]
 8011982:	2400      	movs	r4, #0
 8011984:	a902      	add	r1, sp, #8
 8011986:	6800      	ldr	r0, [r0, #0]
 8011988:	9301      	str	r3, [sp, #4]
 801198a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801198c:	f000 f9a2 	bl	8011cd4 <_svfiprintf_r>
 8011990:	9b02      	ldr	r3, [sp, #8]
 8011992:	701c      	strb	r4, [r3, #0]
 8011994:	b01d      	add	sp, #116	@ 0x74
 8011996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801199a:	b003      	add	sp, #12
 801199c:	4770      	bx	lr
 801199e:	bf00      	nop
 80119a0:	24000134 	.word	0x24000134
 80119a4:	ffff0208 	.word	0xffff0208

080119a8 <memset>:
 80119a8:	4402      	add	r2, r0
 80119aa:	4603      	mov	r3, r0
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d100      	bne.n	80119b2 <memset+0xa>
 80119b0:	4770      	bx	lr
 80119b2:	f803 1b01 	strb.w	r1, [r3], #1
 80119b6:	e7f9      	b.n	80119ac <memset+0x4>

080119b8 <__errno>:
 80119b8:	4b01      	ldr	r3, [pc, #4]	@ (80119c0 <__errno+0x8>)
 80119ba:	6818      	ldr	r0, [r3, #0]
 80119bc:	4770      	bx	lr
 80119be:	bf00      	nop
 80119c0:	24000134 	.word	0x24000134

080119c4 <__libc_init_array>:
 80119c4:	b570      	push	{r4, r5, r6, lr}
 80119c6:	4d0d      	ldr	r5, [pc, #52]	@ (80119fc <__libc_init_array+0x38>)
 80119c8:	4c0d      	ldr	r4, [pc, #52]	@ (8011a00 <__libc_init_array+0x3c>)
 80119ca:	1b64      	subs	r4, r4, r5
 80119cc:	10a4      	asrs	r4, r4, #2
 80119ce:	2600      	movs	r6, #0
 80119d0:	42a6      	cmp	r6, r4
 80119d2:	d109      	bne.n	80119e8 <__libc_init_array+0x24>
 80119d4:	4d0b      	ldr	r5, [pc, #44]	@ (8011a04 <__libc_init_array+0x40>)
 80119d6:	4c0c      	ldr	r4, [pc, #48]	@ (8011a08 <__libc_init_array+0x44>)
 80119d8:	f001 fa26 	bl	8012e28 <_init>
 80119dc:	1b64      	subs	r4, r4, r5
 80119de:	10a4      	asrs	r4, r4, #2
 80119e0:	2600      	movs	r6, #0
 80119e2:	42a6      	cmp	r6, r4
 80119e4:	d105      	bne.n	80119f2 <__libc_init_array+0x2e>
 80119e6:	bd70      	pop	{r4, r5, r6, pc}
 80119e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80119ec:	4798      	blx	r3
 80119ee:	3601      	adds	r6, #1
 80119f0:	e7ee      	b.n	80119d0 <__libc_init_array+0xc>
 80119f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80119f6:	4798      	blx	r3
 80119f8:	3601      	adds	r6, #1
 80119fa:	e7f2      	b.n	80119e2 <__libc_init_array+0x1e>
 80119fc:	08013130 	.word	0x08013130
 8011a00:	08013130 	.word	0x08013130
 8011a04:	08013130 	.word	0x08013130
 8011a08:	08013134 	.word	0x08013134

08011a0c <__retarget_lock_acquire_recursive>:
 8011a0c:	4770      	bx	lr

08011a0e <__retarget_lock_release_recursive>:
 8011a0e:	4770      	bx	lr

08011a10 <memcpy>:
 8011a10:	440a      	add	r2, r1
 8011a12:	4291      	cmp	r1, r2
 8011a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8011a18:	d100      	bne.n	8011a1c <memcpy+0xc>
 8011a1a:	4770      	bx	lr
 8011a1c:	b510      	push	{r4, lr}
 8011a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a26:	4291      	cmp	r1, r2
 8011a28:	d1f9      	bne.n	8011a1e <memcpy+0xe>
 8011a2a:	bd10      	pop	{r4, pc}

08011a2c <_free_r>:
 8011a2c:	b538      	push	{r3, r4, r5, lr}
 8011a2e:	4605      	mov	r5, r0
 8011a30:	2900      	cmp	r1, #0
 8011a32:	d041      	beq.n	8011ab8 <_free_r+0x8c>
 8011a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a38:	1f0c      	subs	r4, r1, #4
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	bfb8      	it	lt
 8011a3e:	18e4      	addlt	r4, r4, r3
 8011a40:	f000 f8e0 	bl	8011c04 <__malloc_lock>
 8011a44:	4a1d      	ldr	r2, [pc, #116]	@ (8011abc <_free_r+0x90>)
 8011a46:	6813      	ldr	r3, [r2, #0]
 8011a48:	b933      	cbnz	r3, 8011a58 <_free_r+0x2c>
 8011a4a:	6063      	str	r3, [r4, #4]
 8011a4c:	6014      	str	r4, [r2, #0]
 8011a4e:	4628      	mov	r0, r5
 8011a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a54:	f000 b8dc 	b.w	8011c10 <__malloc_unlock>
 8011a58:	42a3      	cmp	r3, r4
 8011a5a:	d908      	bls.n	8011a6e <_free_r+0x42>
 8011a5c:	6820      	ldr	r0, [r4, #0]
 8011a5e:	1821      	adds	r1, r4, r0
 8011a60:	428b      	cmp	r3, r1
 8011a62:	bf01      	itttt	eq
 8011a64:	6819      	ldreq	r1, [r3, #0]
 8011a66:	685b      	ldreq	r3, [r3, #4]
 8011a68:	1809      	addeq	r1, r1, r0
 8011a6a:	6021      	streq	r1, [r4, #0]
 8011a6c:	e7ed      	b.n	8011a4a <_free_r+0x1e>
 8011a6e:	461a      	mov	r2, r3
 8011a70:	685b      	ldr	r3, [r3, #4]
 8011a72:	b10b      	cbz	r3, 8011a78 <_free_r+0x4c>
 8011a74:	42a3      	cmp	r3, r4
 8011a76:	d9fa      	bls.n	8011a6e <_free_r+0x42>
 8011a78:	6811      	ldr	r1, [r2, #0]
 8011a7a:	1850      	adds	r0, r2, r1
 8011a7c:	42a0      	cmp	r0, r4
 8011a7e:	d10b      	bne.n	8011a98 <_free_r+0x6c>
 8011a80:	6820      	ldr	r0, [r4, #0]
 8011a82:	4401      	add	r1, r0
 8011a84:	1850      	adds	r0, r2, r1
 8011a86:	4283      	cmp	r3, r0
 8011a88:	6011      	str	r1, [r2, #0]
 8011a8a:	d1e0      	bne.n	8011a4e <_free_r+0x22>
 8011a8c:	6818      	ldr	r0, [r3, #0]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	6053      	str	r3, [r2, #4]
 8011a92:	4408      	add	r0, r1
 8011a94:	6010      	str	r0, [r2, #0]
 8011a96:	e7da      	b.n	8011a4e <_free_r+0x22>
 8011a98:	d902      	bls.n	8011aa0 <_free_r+0x74>
 8011a9a:	230c      	movs	r3, #12
 8011a9c:	602b      	str	r3, [r5, #0]
 8011a9e:	e7d6      	b.n	8011a4e <_free_r+0x22>
 8011aa0:	6820      	ldr	r0, [r4, #0]
 8011aa2:	1821      	adds	r1, r4, r0
 8011aa4:	428b      	cmp	r3, r1
 8011aa6:	bf04      	itt	eq
 8011aa8:	6819      	ldreq	r1, [r3, #0]
 8011aaa:	685b      	ldreq	r3, [r3, #4]
 8011aac:	6063      	str	r3, [r4, #4]
 8011aae:	bf04      	itt	eq
 8011ab0:	1809      	addeq	r1, r1, r0
 8011ab2:	6021      	streq	r1, [r4, #0]
 8011ab4:	6054      	str	r4, [r2, #4]
 8011ab6:	e7ca      	b.n	8011a4e <_free_r+0x22>
 8011ab8:	bd38      	pop	{r3, r4, r5, pc}
 8011aba:	bf00      	nop
 8011abc:	2404143c 	.word	0x2404143c

08011ac0 <sbrk_aligned>:
 8011ac0:	b570      	push	{r4, r5, r6, lr}
 8011ac2:	4e0f      	ldr	r6, [pc, #60]	@ (8011b00 <sbrk_aligned+0x40>)
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	6831      	ldr	r1, [r6, #0]
 8011ac8:	4605      	mov	r5, r0
 8011aca:	b911      	cbnz	r1, 8011ad2 <sbrk_aligned+0x12>
 8011acc:	f000 fba4 	bl	8012218 <_sbrk_r>
 8011ad0:	6030      	str	r0, [r6, #0]
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	4628      	mov	r0, r5
 8011ad6:	f000 fb9f 	bl	8012218 <_sbrk_r>
 8011ada:	1c43      	adds	r3, r0, #1
 8011adc:	d103      	bne.n	8011ae6 <sbrk_aligned+0x26>
 8011ade:	f04f 34ff 	mov.w	r4, #4294967295
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	bd70      	pop	{r4, r5, r6, pc}
 8011ae6:	1cc4      	adds	r4, r0, #3
 8011ae8:	f024 0403 	bic.w	r4, r4, #3
 8011aec:	42a0      	cmp	r0, r4
 8011aee:	d0f8      	beq.n	8011ae2 <sbrk_aligned+0x22>
 8011af0:	1a21      	subs	r1, r4, r0
 8011af2:	4628      	mov	r0, r5
 8011af4:	f000 fb90 	bl	8012218 <_sbrk_r>
 8011af8:	3001      	adds	r0, #1
 8011afa:	d1f2      	bne.n	8011ae2 <sbrk_aligned+0x22>
 8011afc:	e7ef      	b.n	8011ade <sbrk_aligned+0x1e>
 8011afe:	bf00      	nop
 8011b00:	24041438 	.word	0x24041438

08011b04 <_malloc_r>:
 8011b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b08:	1ccd      	adds	r5, r1, #3
 8011b0a:	f025 0503 	bic.w	r5, r5, #3
 8011b0e:	3508      	adds	r5, #8
 8011b10:	2d0c      	cmp	r5, #12
 8011b12:	bf38      	it	cc
 8011b14:	250c      	movcc	r5, #12
 8011b16:	2d00      	cmp	r5, #0
 8011b18:	4606      	mov	r6, r0
 8011b1a:	db01      	blt.n	8011b20 <_malloc_r+0x1c>
 8011b1c:	42a9      	cmp	r1, r5
 8011b1e:	d904      	bls.n	8011b2a <_malloc_r+0x26>
 8011b20:	230c      	movs	r3, #12
 8011b22:	6033      	str	r3, [r6, #0]
 8011b24:	2000      	movs	r0, #0
 8011b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011c00 <_malloc_r+0xfc>
 8011b2e:	f000 f869 	bl	8011c04 <__malloc_lock>
 8011b32:	f8d8 3000 	ldr.w	r3, [r8]
 8011b36:	461c      	mov	r4, r3
 8011b38:	bb44      	cbnz	r4, 8011b8c <_malloc_r+0x88>
 8011b3a:	4629      	mov	r1, r5
 8011b3c:	4630      	mov	r0, r6
 8011b3e:	f7ff ffbf 	bl	8011ac0 <sbrk_aligned>
 8011b42:	1c43      	adds	r3, r0, #1
 8011b44:	4604      	mov	r4, r0
 8011b46:	d158      	bne.n	8011bfa <_malloc_r+0xf6>
 8011b48:	f8d8 4000 	ldr.w	r4, [r8]
 8011b4c:	4627      	mov	r7, r4
 8011b4e:	2f00      	cmp	r7, #0
 8011b50:	d143      	bne.n	8011bda <_malloc_r+0xd6>
 8011b52:	2c00      	cmp	r4, #0
 8011b54:	d04b      	beq.n	8011bee <_malloc_r+0xea>
 8011b56:	6823      	ldr	r3, [r4, #0]
 8011b58:	4639      	mov	r1, r7
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	eb04 0903 	add.w	r9, r4, r3
 8011b60:	f000 fb5a 	bl	8012218 <_sbrk_r>
 8011b64:	4581      	cmp	r9, r0
 8011b66:	d142      	bne.n	8011bee <_malloc_r+0xea>
 8011b68:	6821      	ldr	r1, [r4, #0]
 8011b6a:	1a6d      	subs	r5, r5, r1
 8011b6c:	4629      	mov	r1, r5
 8011b6e:	4630      	mov	r0, r6
 8011b70:	f7ff ffa6 	bl	8011ac0 <sbrk_aligned>
 8011b74:	3001      	adds	r0, #1
 8011b76:	d03a      	beq.n	8011bee <_malloc_r+0xea>
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	442b      	add	r3, r5
 8011b7c:	6023      	str	r3, [r4, #0]
 8011b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8011b82:	685a      	ldr	r2, [r3, #4]
 8011b84:	bb62      	cbnz	r2, 8011be0 <_malloc_r+0xdc>
 8011b86:	f8c8 7000 	str.w	r7, [r8]
 8011b8a:	e00f      	b.n	8011bac <_malloc_r+0xa8>
 8011b8c:	6822      	ldr	r2, [r4, #0]
 8011b8e:	1b52      	subs	r2, r2, r5
 8011b90:	d420      	bmi.n	8011bd4 <_malloc_r+0xd0>
 8011b92:	2a0b      	cmp	r2, #11
 8011b94:	d917      	bls.n	8011bc6 <_malloc_r+0xc2>
 8011b96:	1961      	adds	r1, r4, r5
 8011b98:	42a3      	cmp	r3, r4
 8011b9a:	6025      	str	r5, [r4, #0]
 8011b9c:	bf18      	it	ne
 8011b9e:	6059      	strne	r1, [r3, #4]
 8011ba0:	6863      	ldr	r3, [r4, #4]
 8011ba2:	bf08      	it	eq
 8011ba4:	f8c8 1000 	streq.w	r1, [r8]
 8011ba8:	5162      	str	r2, [r4, r5]
 8011baa:	604b      	str	r3, [r1, #4]
 8011bac:	4630      	mov	r0, r6
 8011bae:	f000 f82f 	bl	8011c10 <__malloc_unlock>
 8011bb2:	f104 000b 	add.w	r0, r4, #11
 8011bb6:	1d23      	adds	r3, r4, #4
 8011bb8:	f020 0007 	bic.w	r0, r0, #7
 8011bbc:	1ac2      	subs	r2, r0, r3
 8011bbe:	bf1c      	itt	ne
 8011bc0:	1a1b      	subne	r3, r3, r0
 8011bc2:	50a3      	strne	r3, [r4, r2]
 8011bc4:	e7af      	b.n	8011b26 <_malloc_r+0x22>
 8011bc6:	6862      	ldr	r2, [r4, #4]
 8011bc8:	42a3      	cmp	r3, r4
 8011bca:	bf0c      	ite	eq
 8011bcc:	f8c8 2000 	streq.w	r2, [r8]
 8011bd0:	605a      	strne	r2, [r3, #4]
 8011bd2:	e7eb      	b.n	8011bac <_malloc_r+0xa8>
 8011bd4:	4623      	mov	r3, r4
 8011bd6:	6864      	ldr	r4, [r4, #4]
 8011bd8:	e7ae      	b.n	8011b38 <_malloc_r+0x34>
 8011bda:	463c      	mov	r4, r7
 8011bdc:	687f      	ldr	r7, [r7, #4]
 8011bde:	e7b6      	b.n	8011b4e <_malloc_r+0x4a>
 8011be0:	461a      	mov	r2, r3
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	42a3      	cmp	r3, r4
 8011be6:	d1fb      	bne.n	8011be0 <_malloc_r+0xdc>
 8011be8:	2300      	movs	r3, #0
 8011bea:	6053      	str	r3, [r2, #4]
 8011bec:	e7de      	b.n	8011bac <_malloc_r+0xa8>
 8011bee:	230c      	movs	r3, #12
 8011bf0:	6033      	str	r3, [r6, #0]
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f000 f80c 	bl	8011c10 <__malloc_unlock>
 8011bf8:	e794      	b.n	8011b24 <_malloc_r+0x20>
 8011bfa:	6005      	str	r5, [r0, #0]
 8011bfc:	e7d6      	b.n	8011bac <_malloc_r+0xa8>
 8011bfe:	bf00      	nop
 8011c00:	2404143c 	.word	0x2404143c

08011c04 <__malloc_lock>:
 8011c04:	4801      	ldr	r0, [pc, #4]	@ (8011c0c <__malloc_lock+0x8>)
 8011c06:	f7ff bf01 	b.w	8011a0c <__retarget_lock_acquire_recursive>
 8011c0a:	bf00      	nop
 8011c0c:	24041434 	.word	0x24041434

08011c10 <__malloc_unlock>:
 8011c10:	4801      	ldr	r0, [pc, #4]	@ (8011c18 <__malloc_unlock+0x8>)
 8011c12:	f7ff befc 	b.w	8011a0e <__retarget_lock_release_recursive>
 8011c16:	bf00      	nop
 8011c18:	24041434 	.word	0x24041434

08011c1c <__ssputs_r>:
 8011c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c20:	688e      	ldr	r6, [r1, #8]
 8011c22:	461f      	mov	r7, r3
 8011c24:	42be      	cmp	r6, r7
 8011c26:	680b      	ldr	r3, [r1, #0]
 8011c28:	4682      	mov	sl, r0
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	4690      	mov	r8, r2
 8011c2e:	d82d      	bhi.n	8011c8c <__ssputs_r+0x70>
 8011c30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011c38:	d026      	beq.n	8011c88 <__ssputs_r+0x6c>
 8011c3a:	6965      	ldr	r5, [r4, #20]
 8011c3c:	6909      	ldr	r1, [r1, #16]
 8011c3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c42:	eba3 0901 	sub.w	r9, r3, r1
 8011c46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c4a:	1c7b      	adds	r3, r7, #1
 8011c4c:	444b      	add	r3, r9
 8011c4e:	106d      	asrs	r5, r5, #1
 8011c50:	429d      	cmp	r5, r3
 8011c52:	bf38      	it	cc
 8011c54:	461d      	movcc	r5, r3
 8011c56:	0553      	lsls	r3, r2, #21
 8011c58:	d527      	bpl.n	8011caa <__ssputs_r+0x8e>
 8011c5a:	4629      	mov	r1, r5
 8011c5c:	f7ff ff52 	bl	8011b04 <_malloc_r>
 8011c60:	4606      	mov	r6, r0
 8011c62:	b360      	cbz	r0, 8011cbe <__ssputs_r+0xa2>
 8011c64:	6921      	ldr	r1, [r4, #16]
 8011c66:	464a      	mov	r2, r9
 8011c68:	f7ff fed2 	bl	8011a10 <memcpy>
 8011c6c:	89a3      	ldrh	r3, [r4, #12]
 8011c6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c76:	81a3      	strh	r3, [r4, #12]
 8011c78:	6126      	str	r6, [r4, #16]
 8011c7a:	6165      	str	r5, [r4, #20]
 8011c7c:	444e      	add	r6, r9
 8011c7e:	eba5 0509 	sub.w	r5, r5, r9
 8011c82:	6026      	str	r6, [r4, #0]
 8011c84:	60a5      	str	r5, [r4, #8]
 8011c86:	463e      	mov	r6, r7
 8011c88:	42be      	cmp	r6, r7
 8011c8a:	d900      	bls.n	8011c8e <__ssputs_r+0x72>
 8011c8c:	463e      	mov	r6, r7
 8011c8e:	6820      	ldr	r0, [r4, #0]
 8011c90:	4632      	mov	r2, r6
 8011c92:	4641      	mov	r1, r8
 8011c94:	f000 faa6 	bl	80121e4 <memmove>
 8011c98:	68a3      	ldr	r3, [r4, #8]
 8011c9a:	1b9b      	subs	r3, r3, r6
 8011c9c:	60a3      	str	r3, [r4, #8]
 8011c9e:	6823      	ldr	r3, [r4, #0]
 8011ca0:	4433      	add	r3, r6
 8011ca2:	6023      	str	r3, [r4, #0]
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011caa:	462a      	mov	r2, r5
 8011cac:	f000 fac4 	bl	8012238 <_realloc_r>
 8011cb0:	4606      	mov	r6, r0
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	d1e0      	bne.n	8011c78 <__ssputs_r+0x5c>
 8011cb6:	6921      	ldr	r1, [r4, #16]
 8011cb8:	4650      	mov	r0, sl
 8011cba:	f7ff feb7 	bl	8011a2c <_free_r>
 8011cbe:	230c      	movs	r3, #12
 8011cc0:	f8ca 3000 	str.w	r3, [sl]
 8011cc4:	89a3      	ldrh	r3, [r4, #12]
 8011cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cca:	81a3      	strh	r3, [r4, #12]
 8011ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd0:	e7e9      	b.n	8011ca6 <__ssputs_r+0x8a>
	...

08011cd4 <_svfiprintf_r>:
 8011cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd8:	4698      	mov	r8, r3
 8011cda:	898b      	ldrh	r3, [r1, #12]
 8011cdc:	061b      	lsls	r3, r3, #24
 8011cde:	b09d      	sub	sp, #116	@ 0x74
 8011ce0:	4607      	mov	r7, r0
 8011ce2:	460d      	mov	r5, r1
 8011ce4:	4614      	mov	r4, r2
 8011ce6:	d510      	bpl.n	8011d0a <_svfiprintf_r+0x36>
 8011ce8:	690b      	ldr	r3, [r1, #16]
 8011cea:	b973      	cbnz	r3, 8011d0a <_svfiprintf_r+0x36>
 8011cec:	2140      	movs	r1, #64	@ 0x40
 8011cee:	f7ff ff09 	bl	8011b04 <_malloc_r>
 8011cf2:	6028      	str	r0, [r5, #0]
 8011cf4:	6128      	str	r0, [r5, #16]
 8011cf6:	b930      	cbnz	r0, 8011d06 <_svfiprintf_r+0x32>
 8011cf8:	230c      	movs	r3, #12
 8011cfa:	603b      	str	r3, [r7, #0]
 8011cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8011d00:	b01d      	add	sp, #116	@ 0x74
 8011d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d06:	2340      	movs	r3, #64	@ 0x40
 8011d08:	616b      	str	r3, [r5, #20]
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d0e:	2320      	movs	r3, #32
 8011d10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d14:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d18:	2330      	movs	r3, #48	@ 0x30
 8011d1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011eb8 <_svfiprintf_r+0x1e4>
 8011d1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d22:	f04f 0901 	mov.w	r9, #1
 8011d26:	4623      	mov	r3, r4
 8011d28:	469a      	mov	sl, r3
 8011d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d2e:	b10a      	cbz	r2, 8011d34 <_svfiprintf_r+0x60>
 8011d30:	2a25      	cmp	r2, #37	@ 0x25
 8011d32:	d1f9      	bne.n	8011d28 <_svfiprintf_r+0x54>
 8011d34:	ebba 0b04 	subs.w	fp, sl, r4
 8011d38:	d00b      	beq.n	8011d52 <_svfiprintf_r+0x7e>
 8011d3a:	465b      	mov	r3, fp
 8011d3c:	4622      	mov	r2, r4
 8011d3e:	4629      	mov	r1, r5
 8011d40:	4638      	mov	r0, r7
 8011d42:	f7ff ff6b 	bl	8011c1c <__ssputs_r>
 8011d46:	3001      	adds	r0, #1
 8011d48:	f000 80a7 	beq.w	8011e9a <_svfiprintf_r+0x1c6>
 8011d4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d4e:	445a      	add	r2, fp
 8011d50:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d52:	f89a 3000 	ldrb.w	r3, [sl]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	f000 809f 	beq.w	8011e9a <_svfiprintf_r+0x1c6>
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8011d62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d66:	f10a 0a01 	add.w	sl, sl, #1
 8011d6a:	9304      	str	r3, [sp, #16]
 8011d6c:	9307      	str	r3, [sp, #28]
 8011d6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d72:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d74:	4654      	mov	r4, sl
 8011d76:	2205      	movs	r2, #5
 8011d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d7c:	484e      	ldr	r0, [pc, #312]	@ (8011eb8 <_svfiprintf_r+0x1e4>)
 8011d7e:	f7ee faaf 	bl	80002e0 <memchr>
 8011d82:	9a04      	ldr	r2, [sp, #16]
 8011d84:	b9d8      	cbnz	r0, 8011dbe <_svfiprintf_r+0xea>
 8011d86:	06d0      	lsls	r0, r2, #27
 8011d88:	bf44      	itt	mi
 8011d8a:	2320      	movmi	r3, #32
 8011d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d90:	0711      	lsls	r1, r2, #28
 8011d92:	bf44      	itt	mi
 8011d94:	232b      	movmi	r3, #43	@ 0x2b
 8011d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8011d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011da0:	d015      	beq.n	8011dce <_svfiprintf_r+0xfa>
 8011da2:	9a07      	ldr	r2, [sp, #28]
 8011da4:	4654      	mov	r4, sl
 8011da6:	2000      	movs	r0, #0
 8011da8:	f04f 0c0a 	mov.w	ip, #10
 8011dac:	4621      	mov	r1, r4
 8011dae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011db2:	3b30      	subs	r3, #48	@ 0x30
 8011db4:	2b09      	cmp	r3, #9
 8011db6:	d94b      	bls.n	8011e50 <_svfiprintf_r+0x17c>
 8011db8:	b1b0      	cbz	r0, 8011de8 <_svfiprintf_r+0x114>
 8011dba:	9207      	str	r2, [sp, #28]
 8011dbc:	e014      	b.n	8011de8 <_svfiprintf_r+0x114>
 8011dbe:	eba0 0308 	sub.w	r3, r0, r8
 8011dc2:	fa09 f303 	lsl.w	r3, r9, r3
 8011dc6:	4313      	orrs	r3, r2
 8011dc8:	9304      	str	r3, [sp, #16]
 8011dca:	46a2      	mov	sl, r4
 8011dcc:	e7d2      	b.n	8011d74 <_svfiprintf_r+0xa0>
 8011dce:	9b03      	ldr	r3, [sp, #12]
 8011dd0:	1d19      	adds	r1, r3, #4
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	9103      	str	r1, [sp, #12]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	bfbb      	ittet	lt
 8011dda:	425b      	neglt	r3, r3
 8011ddc:	f042 0202 	orrlt.w	r2, r2, #2
 8011de0:	9307      	strge	r3, [sp, #28]
 8011de2:	9307      	strlt	r3, [sp, #28]
 8011de4:	bfb8      	it	lt
 8011de6:	9204      	strlt	r2, [sp, #16]
 8011de8:	7823      	ldrb	r3, [r4, #0]
 8011dea:	2b2e      	cmp	r3, #46	@ 0x2e
 8011dec:	d10a      	bne.n	8011e04 <_svfiprintf_r+0x130>
 8011dee:	7863      	ldrb	r3, [r4, #1]
 8011df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011df2:	d132      	bne.n	8011e5a <_svfiprintf_r+0x186>
 8011df4:	9b03      	ldr	r3, [sp, #12]
 8011df6:	1d1a      	adds	r2, r3, #4
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	9203      	str	r2, [sp, #12]
 8011dfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e00:	3402      	adds	r4, #2
 8011e02:	9305      	str	r3, [sp, #20]
 8011e04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011ec8 <_svfiprintf_r+0x1f4>
 8011e08:	7821      	ldrb	r1, [r4, #0]
 8011e0a:	2203      	movs	r2, #3
 8011e0c:	4650      	mov	r0, sl
 8011e0e:	f7ee fa67 	bl	80002e0 <memchr>
 8011e12:	b138      	cbz	r0, 8011e24 <_svfiprintf_r+0x150>
 8011e14:	9b04      	ldr	r3, [sp, #16]
 8011e16:	eba0 000a 	sub.w	r0, r0, sl
 8011e1a:	2240      	movs	r2, #64	@ 0x40
 8011e1c:	4082      	lsls	r2, r0
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	3401      	adds	r4, #1
 8011e22:	9304      	str	r3, [sp, #16]
 8011e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e28:	4824      	ldr	r0, [pc, #144]	@ (8011ebc <_svfiprintf_r+0x1e8>)
 8011e2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e2e:	2206      	movs	r2, #6
 8011e30:	f7ee fa56 	bl	80002e0 <memchr>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	d036      	beq.n	8011ea6 <_svfiprintf_r+0x1d2>
 8011e38:	4b21      	ldr	r3, [pc, #132]	@ (8011ec0 <_svfiprintf_r+0x1ec>)
 8011e3a:	bb1b      	cbnz	r3, 8011e84 <_svfiprintf_r+0x1b0>
 8011e3c:	9b03      	ldr	r3, [sp, #12]
 8011e3e:	3307      	adds	r3, #7
 8011e40:	f023 0307 	bic.w	r3, r3, #7
 8011e44:	3308      	adds	r3, #8
 8011e46:	9303      	str	r3, [sp, #12]
 8011e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e4a:	4433      	add	r3, r6
 8011e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e4e:	e76a      	b.n	8011d26 <_svfiprintf_r+0x52>
 8011e50:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e54:	460c      	mov	r4, r1
 8011e56:	2001      	movs	r0, #1
 8011e58:	e7a8      	b.n	8011dac <_svfiprintf_r+0xd8>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	3401      	adds	r4, #1
 8011e5e:	9305      	str	r3, [sp, #20]
 8011e60:	4619      	mov	r1, r3
 8011e62:	f04f 0c0a 	mov.w	ip, #10
 8011e66:	4620      	mov	r0, r4
 8011e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e6c:	3a30      	subs	r2, #48	@ 0x30
 8011e6e:	2a09      	cmp	r2, #9
 8011e70:	d903      	bls.n	8011e7a <_svfiprintf_r+0x1a6>
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d0c6      	beq.n	8011e04 <_svfiprintf_r+0x130>
 8011e76:	9105      	str	r1, [sp, #20]
 8011e78:	e7c4      	b.n	8011e04 <_svfiprintf_r+0x130>
 8011e7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e7e:	4604      	mov	r4, r0
 8011e80:	2301      	movs	r3, #1
 8011e82:	e7f0      	b.n	8011e66 <_svfiprintf_r+0x192>
 8011e84:	ab03      	add	r3, sp, #12
 8011e86:	9300      	str	r3, [sp, #0]
 8011e88:	462a      	mov	r2, r5
 8011e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8011ec4 <_svfiprintf_r+0x1f0>)
 8011e8c:	a904      	add	r1, sp, #16
 8011e8e:	4638      	mov	r0, r7
 8011e90:	f3af 8000 	nop.w
 8011e94:	1c42      	adds	r2, r0, #1
 8011e96:	4606      	mov	r6, r0
 8011e98:	d1d6      	bne.n	8011e48 <_svfiprintf_r+0x174>
 8011e9a:	89ab      	ldrh	r3, [r5, #12]
 8011e9c:	065b      	lsls	r3, r3, #25
 8011e9e:	f53f af2d 	bmi.w	8011cfc <_svfiprintf_r+0x28>
 8011ea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ea4:	e72c      	b.n	8011d00 <_svfiprintf_r+0x2c>
 8011ea6:	ab03      	add	r3, sp, #12
 8011ea8:	9300      	str	r3, [sp, #0]
 8011eaa:	462a      	mov	r2, r5
 8011eac:	4b05      	ldr	r3, [pc, #20]	@ (8011ec4 <_svfiprintf_r+0x1f0>)
 8011eae:	a904      	add	r1, sp, #16
 8011eb0:	4638      	mov	r0, r7
 8011eb2:	f000 f879 	bl	8011fa8 <_printf_i>
 8011eb6:	e7ed      	b.n	8011e94 <_svfiprintf_r+0x1c0>
 8011eb8:	08012f18 	.word	0x08012f18
 8011ebc:	08012f22 	.word	0x08012f22
 8011ec0:	00000000 	.word	0x00000000
 8011ec4:	08011c1d 	.word	0x08011c1d
 8011ec8:	08012f1e 	.word	0x08012f1e

08011ecc <_printf_common>:
 8011ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ed0:	4616      	mov	r6, r2
 8011ed2:	4698      	mov	r8, r3
 8011ed4:	688a      	ldr	r2, [r1, #8]
 8011ed6:	690b      	ldr	r3, [r1, #16]
 8011ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011edc:	4293      	cmp	r3, r2
 8011ede:	bfb8      	it	lt
 8011ee0:	4613      	movlt	r3, r2
 8011ee2:	6033      	str	r3, [r6, #0]
 8011ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011ee8:	4607      	mov	r7, r0
 8011eea:	460c      	mov	r4, r1
 8011eec:	b10a      	cbz	r2, 8011ef2 <_printf_common+0x26>
 8011eee:	3301      	adds	r3, #1
 8011ef0:	6033      	str	r3, [r6, #0]
 8011ef2:	6823      	ldr	r3, [r4, #0]
 8011ef4:	0699      	lsls	r1, r3, #26
 8011ef6:	bf42      	ittt	mi
 8011ef8:	6833      	ldrmi	r3, [r6, #0]
 8011efa:	3302      	addmi	r3, #2
 8011efc:	6033      	strmi	r3, [r6, #0]
 8011efe:	6825      	ldr	r5, [r4, #0]
 8011f00:	f015 0506 	ands.w	r5, r5, #6
 8011f04:	d106      	bne.n	8011f14 <_printf_common+0x48>
 8011f06:	f104 0a19 	add.w	sl, r4, #25
 8011f0a:	68e3      	ldr	r3, [r4, #12]
 8011f0c:	6832      	ldr	r2, [r6, #0]
 8011f0e:	1a9b      	subs	r3, r3, r2
 8011f10:	42ab      	cmp	r3, r5
 8011f12:	dc26      	bgt.n	8011f62 <_printf_common+0x96>
 8011f14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011f18:	6822      	ldr	r2, [r4, #0]
 8011f1a:	3b00      	subs	r3, #0
 8011f1c:	bf18      	it	ne
 8011f1e:	2301      	movne	r3, #1
 8011f20:	0692      	lsls	r2, r2, #26
 8011f22:	d42b      	bmi.n	8011f7c <_printf_common+0xb0>
 8011f24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011f28:	4641      	mov	r1, r8
 8011f2a:	4638      	mov	r0, r7
 8011f2c:	47c8      	blx	r9
 8011f2e:	3001      	adds	r0, #1
 8011f30:	d01e      	beq.n	8011f70 <_printf_common+0xa4>
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	6922      	ldr	r2, [r4, #16]
 8011f36:	f003 0306 	and.w	r3, r3, #6
 8011f3a:	2b04      	cmp	r3, #4
 8011f3c:	bf02      	ittt	eq
 8011f3e:	68e5      	ldreq	r5, [r4, #12]
 8011f40:	6833      	ldreq	r3, [r6, #0]
 8011f42:	1aed      	subeq	r5, r5, r3
 8011f44:	68a3      	ldr	r3, [r4, #8]
 8011f46:	bf0c      	ite	eq
 8011f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f4c:	2500      	movne	r5, #0
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	bfc4      	itt	gt
 8011f52:	1a9b      	subgt	r3, r3, r2
 8011f54:	18ed      	addgt	r5, r5, r3
 8011f56:	2600      	movs	r6, #0
 8011f58:	341a      	adds	r4, #26
 8011f5a:	42b5      	cmp	r5, r6
 8011f5c:	d11a      	bne.n	8011f94 <_printf_common+0xc8>
 8011f5e:	2000      	movs	r0, #0
 8011f60:	e008      	b.n	8011f74 <_printf_common+0xa8>
 8011f62:	2301      	movs	r3, #1
 8011f64:	4652      	mov	r2, sl
 8011f66:	4641      	mov	r1, r8
 8011f68:	4638      	mov	r0, r7
 8011f6a:	47c8      	blx	r9
 8011f6c:	3001      	adds	r0, #1
 8011f6e:	d103      	bne.n	8011f78 <_printf_common+0xac>
 8011f70:	f04f 30ff 	mov.w	r0, #4294967295
 8011f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f78:	3501      	adds	r5, #1
 8011f7a:	e7c6      	b.n	8011f0a <_printf_common+0x3e>
 8011f7c:	18e1      	adds	r1, r4, r3
 8011f7e:	1c5a      	adds	r2, r3, #1
 8011f80:	2030      	movs	r0, #48	@ 0x30
 8011f82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011f86:	4422      	add	r2, r4
 8011f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011f8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011f90:	3302      	adds	r3, #2
 8011f92:	e7c7      	b.n	8011f24 <_printf_common+0x58>
 8011f94:	2301      	movs	r3, #1
 8011f96:	4622      	mov	r2, r4
 8011f98:	4641      	mov	r1, r8
 8011f9a:	4638      	mov	r0, r7
 8011f9c:	47c8      	blx	r9
 8011f9e:	3001      	adds	r0, #1
 8011fa0:	d0e6      	beq.n	8011f70 <_printf_common+0xa4>
 8011fa2:	3601      	adds	r6, #1
 8011fa4:	e7d9      	b.n	8011f5a <_printf_common+0x8e>
	...

08011fa8 <_printf_i>:
 8011fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011fac:	7e0f      	ldrb	r7, [r1, #24]
 8011fae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011fb0:	2f78      	cmp	r7, #120	@ 0x78
 8011fb2:	4691      	mov	r9, r2
 8011fb4:	4680      	mov	r8, r0
 8011fb6:	460c      	mov	r4, r1
 8011fb8:	469a      	mov	sl, r3
 8011fba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011fbe:	d807      	bhi.n	8011fd0 <_printf_i+0x28>
 8011fc0:	2f62      	cmp	r7, #98	@ 0x62
 8011fc2:	d80a      	bhi.n	8011fda <_printf_i+0x32>
 8011fc4:	2f00      	cmp	r7, #0
 8011fc6:	f000 80d1 	beq.w	801216c <_printf_i+0x1c4>
 8011fca:	2f58      	cmp	r7, #88	@ 0x58
 8011fcc:	f000 80b8 	beq.w	8012140 <_printf_i+0x198>
 8011fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011fd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011fd8:	e03a      	b.n	8012050 <_printf_i+0xa8>
 8011fda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011fde:	2b15      	cmp	r3, #21
 8011fe0:	d8f6      	bhi.n	8011fd0 <_printf_i+0x28>
 8011fe2:	a101      	add	r1, pc, #4	@ (adr r1, 8011fe8 <_printf_i+0x40>)
 8011fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011fe8:	08012041 	.word	0x08012041
 8011fec:	08012055 	.word	0x08012055
 8011ff0:	08011fd1 	.word	0x08011fd1
 8011ff4:	08011fd1 	.word	0x08011fd1
 8011ff8:	08011fd1 	.word	0x08011fd1
 8011ffc:	08011fd1 	.word	0x08011fd1
 8012000:	08012055 	.word	0x08012055
 8012004:	08011fd1 	.word	0x08011fd1
 8012008:	08011fd1 	.word	0x08011fd1
 801200c:	08011fd1 	.word	0x08011fd1
 8012010:	08011fd1 	.word	0x08011fd1
 8012014:	08012153 	.word	0x08012153
 8012018:	0801207f 	.word	0x0801207f
 801201c:	0801210d 	.word	0x0801210d
 8012020:	08011fd1 	.word	0x08011fd1
 8012024:	08011fd1 	.word	0x08011fd1
 8012028:	08012175 	.word	0x08012175
 801202c:	08011fd1 	.word	0x08011fd1
 8012030:	0801207f 	.word	0x0801207f
 8012034:	08011fd1 	.word	0x08011fd1
 8012038:	08011fd1 	.word	0x08011fd1
 801203c:	08012115 	.word	0x08012115
 8012040:	6833      	ldr	r3, [r6, #0]
 8012042:	1d1a      	adds	r2, r3, #4
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	6032      	str	r2, [r6, #0]
 8012048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801204c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012050:	2301      	movs	r3, #1
 8012052:	e09c      	b.n	801218e <_printf_i+0x1e6>
 8012054:	6833      	ldr	r3, [r6, #0]
 8012056:	6820      	ldr	r0, [r4, #0]
 8012058:	1d19      	adds	r1, r3, #4
 801205a:	6031      	str	r1, [r6, #0]
 801205c:	0606      	lsls	r6, r0, #24
 801205e:	d501      	bpl.n	8012064 <_printf_i+0xbc>
 8012060:	681d      	ldr	r5, [r3, #0]
 8012062:	e003      	b.n	801206c <_printf_i+0xc4>
 8012064:	0645      	lsls	r5, r0, #25
 8012066:	d5fb      	bpl.n	8012060 <_printf_i+0xb8>
 8012068:	f9b3 5000 	ldrsh.w	r5, [r3]
 801206c:	2d00      	cmp	r5, #0
 801206e:	da03      	bge.n	8012078 <_printf_i+0xd0>
 8012070:	232d      	movs	r3, #45	@ 0x2d
 8012072:	426d      	negs	r5, r5
 8012074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012078:	4858      	ldr	r0, [pc, #352]	@ (80121dc <_printf_i+0x234>)
 801207a:	230a      	movs	r3, #10
 801207c:	e011      	b.n	80120a2 <_printf_i+0xfa>
 801207e:	6821      	ldr	r1, [r4, #0]
 8012080:	6833      	ldr	r3, [r6, #0]
 8012082:	0608      	lsls	r0, r1, #24
 8012084:	f853 5b04 	ldr.w	r5, [r3], #4
 8012088:	d402      	bmi.n	8012090 <_printf_i+0xe8>
 801208a:	0649      	lsls	r1, r1, #25
 801208c:	bf48      	it	mi
 801208e:	b2ad      	uxthmi	r5, r5
 8012090:	2f6f      	cmp	r7, #111	@ 0x6f
 8012092:	4852      	ldr	r0, [pc, #328]	@ (80121dc <_printf_i+0x234>)
 8012094:	6033      	str	r3, [r6, #0]
 8012096:	bf14      	ite	ne
 8012098:	230a      	movne	r3, #10
 801209a:	2308      	moveq	r3, #8
 801209c:	2100      	movs	r1, #0
 801209e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80120a2:	6866      	ldr	r6, [r4, #4]
 80120a4:	60a6      	str	r6, [r4, #8]
 80120a6:	2e00      	cmp	r6, #0
 80120a8:	db05      	blt.n	80120b6 <_printf_i+0x10e>
 80120aa:	6821      	ldr	r1, [r4, #0]
 80120ac:	432e      	orrs	r6, r5
 80120ae:	f021 0104 	bic.w	r1, r1, #4
 80120b2:	6021      	str	r1, [r4, #0]
 80120b4:	d04b      	beq.n	801214e <_printf_i+0x1a6>
 80120b6:	4616      	mov	r6, r2
 80120b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80120bc:	fb03 5711 	mls	r7, r3, r1, r5
 80120c0:	5dc7      	ldrb	r7, [r0, r7]
 80120c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80120c6:	462f      	mov	r7, r5
 80120c8:	42bb      	cmp	r3, r7
 80120ca:	460d      	mov	r5, r1
 80120cc:	d9f4      	bls.n	80120b8 <_printf_i+0x110>
 80120ce:	2b08      	cmp	r3, #8
 80120d0:	d10b      	bne.n	80120ea <_printf_i+0x142>
 80120d2:	6823      	ldr	r3, [r4, #0]
 80120d4:	07df      	lsls	r7, r3, #31
 80120d6:	d508      	bpl.n	80120ea <_printf_i+0x142>
 80120d8:	6923      	ldr	r3, [r4, #16]
 80120da:	6861      	ldr	r1, [r4, #4]
 80120dc:	4299      	cmp	r1, r3
 80120de:	bfde      	ittt	le
 80120e0:	2330      	movle	r3, #48	@ 0x30
 80120e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80120e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80120ea:	1b92      	subs	r2, r2, r6
 80120ec:	6122      	str	r2, [r4, #16]
 80120ee:	f8cd a000 	str.w	sl, [sp]
 80120f2:	464b      	mov	r3, r9
 80120f4:	aa03      	add	r2, sp, #12
 80120f6:	4621      	mov	r1, r4
 80120f8:	4640      	mov	r0, r8
 80120fa:	f7ff fee7 	bl	8011ecc <_printf_common>
 80120fe:	3001      	adds	r0, #1
 8012100:	d14a      	bne.n	8012198 <_printf_i+0x1f0>
 8012102:	f04f 30ff 	mov.w	r0, #4294967295
 8012106:	b004      	add	sp, #16
 8012108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801210c:	6823      	ldr	r3, [r4, #0]
 801210e:	f043 0320 	orr.w	r3, r3, #32
 8012112:	6023      	str	r3, [r4, #0]
 8012114:	4832      	ldr	r0, [pc, #200]	@ (80121e0 <_printf_i+0x238>)
 8012116:	2778      	movs	r7, #120	@ 0x78
 8012118:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801211c:	6823      	ldr	r3, [r4, #0]
 801211e:	6831      	ldr	r1, [r6, #0]
 8012120:	061f      	lsls	r7, r3, #24
 8012122:	f851 5b04 	ldr.w	r5, [r1], #4
 8012126:	d402      	bmi.n	801212e <_printf_i+0x186>
 8012128:	065f      	lsls	r7, r3, #25
 801212a:	bf48      	it	mi
 801212c:	b2ad      	uxthmi	r5, r5
 801212e:	6031      	str	r1, [r6, #0]
 8012130:	07d9      	lsls	r1, r3, #31
 8012132:	bf44      	itt	mi
 8012134:	f043 0320 	orrmi.w	r3, r3, #32
 8012138:	6023      	strmi	r3, [r4, #0]
 801213a:	b11d      	cbz	r5, 8012144 <_printf_i+0x19c>
 801213c:	2310      	movs	r3, #16
 801213e:	e7ad      	b.n	801209c <_printf_i+0xf4>
 8012140:	4826      	ldr	r0, [pc, #152]	@ (80121dc <_printf_i+0x234>)
 8012142:	e7e9      	b.n	8012118 <_printf_i+0x170>
 8012144:	6823      	ldr	r3, [r4, #0]
 8012146:	f023 0320 	bic.w	r3, r3, #32
 801214a:	6023      	str	r3, [r4, #0]
 801214c:	e7f6      	b.n	801213c <_printf_i+0x194>
 801214e:	4616      	mov	r6, r2
 8012150:	e7bd      	b.n	80120ce <_printf_i+0x126>
 8012152:	6833      	ldr	r3, [r6, #0]
 8012154:	6825      	ldr	r5, [r4, #0]
 8012156:	6961      	ldr	r1, [r4, #20]
 8012158:	1d18      	adds	r0, r3, #4
 801215a:	6030      	str	r0, [r6, #0]
 801215c:	062e      	lsls	r6, r5, #24
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	d501      	bpl.n	8012166 <_printf_i+0x1be>
 8012162:	6019      	str	r1, [r3, #0]
 8012164:	e002      	b.n	801216c <_printf_i+0x1c4>
 8012166:	0668      	lsls	r0, r5, #25
 8012168:	d5fb      	bpl.n	8012162 <_printf_i+0x1ba>
 801216a:	8019      	strh	r1, [r3, #0]
 801216c:	2300      	movs	r3, #0
 801216e:	6123      	str	r3, [r4, #16]
 8012170:	4616      	mov	r6, r2
 8012172:	e7bc      	b.n	80120ee <_printf_i+0x146>
 8012174:	6833      	ldr	r3, [r6, #0]
 8012176:	1d1a      	adds	r2, r3, #4
 8012178:	6032      	str	r2, [r6, #0]
 801217a:	681e      	ldr	r6, [r3, #0]
 801217c:	6862      	ldr	r2, [r4, #4]
 801217e:	2100      	movs	r1, #0
 8012180:	4630      	mov	r0, r6
 8012182:	f7ee f8ad 	bl	80002e0 <memchr>
 8012186:	b108      	cbz	r0, 801218c <_printf_i+0x1e4>
 8012188:	1b80      	subs	r0, r0, r6
 801218a:	6060      	str	r0, [r4, #4]
 801218c:	6863      	ldr	r3, [r4, #4]
 801218e:	6123      	str	r3, [r4, #16]
 8012190:	2300      	movs	r3, #0
 8012192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012196:	e7aa      	b.n	80120ee <_printf_i+0x146>
 8012198:	6923      	ldr	r3, [r4, #16]
 801219a:	4632      	mov	r2, r6
 801219c:	4649      	mov	r1, r9
 801219e:	4640      	mov	r0, r8
 80121a0:	47d0      	blx	sl
 80121a2:	3001      	adds	r0, #1
 80121a4:	d0ad      	beq.n	8012102 <_printf_i+0x15a>
 80121a6:	6823      	ldr	r3, [r4, #0]
 80121a8:	079b      	lsls	r3, r3, #30
 80121aa:	d413      	bmi.n	80121d4 <_printf_i+0x22c>
 80121ac:	68e0      	ldr	r0, [r4, #12]
 80121ae:	9b03      	ldr	r3, [sp, #12]
 80121b0:	4298      	cmp	r0, r3
 80121b2:	bfb8      	it	lt
 80121b4:	4618      	movlt	r0, r3
 80121b6:	e7a6      	b.n	8012106 <_printf_i+0x15e>
 80121b8:	2301      	movs	r3, #1
 80121ba:	4632      	mov	r2, r6
 80121bc:	4649      	mov	r1, r9
 80121be:	4640      	mov	r0, r8
 80121c0:	47d0      	blx	sl
 80121c2:	3001      	adds	r0, #1
 80121c4:	d09d      	beq.n	8012102 <_printf_i+0x15a>
 80121c6:	3501      	adds	r5, #1
 80121c8:	68e3      	ldr	r3, [r4, #12]
 80121ca:	9903      	ldr	r1, [sp, #12]
 80121cc:	1a5b      	subs	r3, r3, r1
 80121ce:	42ab      	cmp	r3, r5
 80121d0:	dcf2      	bgt.n	80121b8 <_printf_i+0x210>
 80121d2:	e7eb      	b.n	80121ac <_printf_i+0x204>
 80121d4:	2500      	movs	r5, #0
 80121d6:	f104 0619 	add.w	r6, r4, #25
 80121da:	e7f5      	b.n	80121c8 <_printf_i+0x220>
 80121dc:	08012f29 	.word	0x08012f29
 80121e0:	08012f3a 	.word	0x08012f3a

080121e4 <memmove>:
 80121e4:	4288      	cmp	r0, r1
 80121e6:	b510      	push	{r4, lr}
 80121e8:	eb01 0402 	add.w	r4, r1, r2
 80121ec:	d902      	bls.n	80121f4 <memmove+0x10>
 80121ee:	4284      	cmp	r4, r0
 80121f0:	4623      	mov	r3, r4
 80121f2:	d807      	bhi.n	8012204 <memmove+0x20>
 80121f4:	1e43      	subs	r3, r0, #1
 80121f6:	42a1      	cmp	r1, r4
 80121f8:	d008      	beq.n	801220c <memmove+0x28>
 80121fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012202:	e7f8      	b.n	80121f6 <memmove+0x12>
 8012204:	4402      	add	r2, r0
 8012206:	4601      	mov	r1, r0
 8012208:	428a      	cmp	r2, r1
 801220a:	d100      	bne.n	801220e <memmove+0x2a>
 801220c:	bd10      	pop	{r4, pc}
 801220e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012216:	e7f7      	b.n	8012208 <memmove+0x24>

08012218 <_sbrk_r>:
 8012218:	b538      	push	{r3, r4, r5, lr}
 801221a:	4d06      	ldr	r5, [pc, #24]	@ (8012234 <_sbrk_r+0x1c>)
 801221c:	2300      	movs	r3, #0
 801221e:	4604      	mov	r4, r0
 8012220:	4608      	mov	r0, r1
 8012222:	602b      	str	r3, [r5, #0]
 8012224:	f7fb f830 	bl	800d288 <_sbrk>
 8012228:	1c43      	adds	r3, r0, #1
 801222a:	d102      	bne.n	8012232 <_sbrk_r+0x1a>
 801222c:	682b      	ldr	r3, [r5, #0]
 801222e:	b103      	cbz	r3, 8012232 <_sbrk_r+0x1a>
 8012230:	6023      	str	r3, [r4, #0]
 8012232:	bd38      	pop	{r3, r4, r5, pc}
 8012234:	24041430 	.word	0x24041430

08012238 <_realloc_r>:
 8012238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801223c:	4607      	mov	r7, r0
 801223e:	4614      	mov	r4, r2
 8012240:	460d      	mov	r5, r1
 8012242:	b921      	cbnz	r1, 801224e <_realloc_r+0x16>
 8012244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012248:	4611      	mov	r1, r2
 801224a:	f7ff bc5b 	b.w	8011b04 <_malloc_r>
 801224e:	b92a      	cbnz	r2, 801225c <_realloc_r+0x24>
 8012250:	f7ff fbec 	bl	8011a2c <_free_r>
 8012254:	4625      	mov	r5, r4
 8012256:	4628      	mov	r0, r5
 8012258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801225c:	f000 f81a 	bl	8012294 <_malloc_usable_size_r>
 8012260:	4284      	cmp	r4, r0
 8012262:	4606      	mov	r6, r0
 8012264:	d802      	bhi.n	801226c <_realloc_r+0x34>
 8012266:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801226a:	d8f4      	bhi.n	8012256 <_realloc_r+0x1e>
 801226c:	4621      	mov	r1, r4
 801226e:	4638      	mov	r0, r7
 8012270:	f7ff fc48 	bl	8011b04 <_malloc_r>
 8012274:	4680      	mov	r8, r0
 8012276:	b908      	cbnz	r0, 801227c <_realloc_r+0x44>
 8012278:	4645      	mov	r5, r8
 801227a:	e7ec      	b.n	8012256 <_realloc_r+0x1e>
 801227c:	42b4      	cmp	r4, r6
 801227e:	4622      	mov	r2, r4
 8012280:	4629      	mov	r1, r5
 8012282:	bf28      	it	cs
 8012284:	4632      	movcs	r2, r6
 8012286:	f7ff fbc3 	bl	8011a10 <memcpy>
 801228a:	4629      	mov	r1, r5
 801228c:	4638      	mov	r0, r7
 801228e:	f7ff fbcd 	bl	8011a2c <_free_r>
 8012292:	e7f1      	b.n	8012278 <_realloc_r+0x40>

08012294 <_malloc_usable_size_r>:
 8012294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012298:	1f18      	subs	r0, r3, #4
 801229a:	2b00      	cmp	r3, #0
 801229c:	bfbc      	itt	lt
 801229e:	580b      	ldrlt	r3, [r1, r0]
 80122a0:	18c0      	addlt	r0, r0, r3
 80122a2:	4770      	bx	lr
 80122a4:	0000      	movs	r0, r0
	...

080122a8 <sin>:
 80122a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122aa:	eeb0 7b40 	vmov.f64	d7, d0
 80122ae:	ee17 3a90 	vmov	r3, s15
 80122b2:	4a21      	ldr	r2, [pc, #132]	@ (8012338 <sin+0x90>)
 80122b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80122b8:	4293      	cmp	r3, r2
 80122ba:	d807      	bhi.n	80122cc <sin+0x24>
 80122bc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8012330 <sin+0x88>
 80122c0:	2000      	movs	r0, #0
 80122c2:	b005      	add	sp, #20
 80122c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80122c8:	f000 b8a2 	b.w	8012410 <__kernel_sin>
 80122cc:	4a1b      	ldr	r2, [pc, #108]	@ (801233c <sin+0x94>)
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d904      	bls.n	80122dc <sin+0x34>
 80122d2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80122d6:	b005      	add	sp, #20
 80122d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80122dc:	4668      	mov	r0, sp
 80122de:	f000 f8ef 	bl	80124c0 <__ieee754_rem_pio2>
 80122e2:	f000 0003 	and.w	r0, r0, #3
 80122e6:	2801      	cmp	r0, #1
 80122e8:	d00a      	beq.n	8012300 <sin+0x58>
 80122ea:	2802      	cmp	r0, #2
 80122ec:	d00f      	beq.n	801230e <sin+0x66>
 80122ee:	b9c0      	cbnz	r0, 8012322 <sin+0x7a>
 80122f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80122f4:	ed9d 0b00 	vldr	d0, [sp]
 80122f8:	2001      	movs	r0, #1
 80122fa:	f000 f889 	bl	8012410 <__kernel_sin>
 80122fe:	e7ea      	b.n	80122d6 <sin+0x2e>
 8012300:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012304:	ed9d 0b00 	vldr	d0, [sp]
 8012308:	f000 f81a 	bl	8012340 <__kernel_cos>
 801230c:	e7e3      	b.n	80122d6 <sin+0x2e>
 801230e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012312:	ed9d 0b00 	vldr	d0, [sp]
 8012316:	2001      	movs	r0, #1
 8012318:	f000 f87a 	bl	8012410 <__kernel_sin>
 801231c:	eeb1 0b40 	vneg.f64	d0, d0
 8012320:	e7d9      	b.n	80122d6 <sin+0x2e>
 8012322:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012326:	ed9d 0b00 	vldr	d0, [sp]
 801232a:	f000 f809 	bl	8012340 <__kernel_cos>
 801232e:	e7f5      	b.n	801231c <sin+0x74>
	...
 8012338:	3fe921fb 	.word	0x3fe921fb
 801233c:	7fefffff 	.word	0x7fefffff

08012340 <__kernel_cos>:
 8012340:	eeb0 5b40 	vmov.f64	d5, d0
 8012344:	ee15 1a90 	vmov	r1, s11
 8012348:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801234c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8012350:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8012354:	d204      	bcs.n	8012360 <__kernel_cos+0x20>
 8012356:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801235a:	ee17 3a90 	vmov	r3, s15
 801235e:	b343      	cbz	r3, 80123b2 <__kernel_cos+0x72>
 8012360:	ee25 6b05 	vmul.f64	d6, d5, d5
 8012364:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8012368:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 80123d8 <__kernel_cos+0x98>
 801236c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80123e0 <__kernel_cos+0xa0>
 8012370:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012374:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80123e8 <__kernel_cos+0xa8>
 8012378:	eea4 7b06 	vfma.f64	d7, d4, d6
 801237c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80123f0 <__kernel_cos+0xb0>
 8012380:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012384:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80123f8 <__kernel_cos+0xb8>
 8012388:	4b1f      	ldr	r3, [pc, #124]	@ (8012408 <__kernel_cos+0xc8>)
 801238a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801238e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012400 <__kernel_cos+0xc0>
 8012392:	4299      	cmp	r1, r3
 8012394:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012398:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801239c:	ee24 4b06 	vmul.f64	d4, d4, d6
 80123a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80123a4:	eea6 1b04 	vfma.f64	d1, d6, d4
 80123a8:	d804      	bhi.n	80123b4 <__kernel_cos+0x74>
 80123aa:	ee37 7b41 	vsub.f64	d7, d7, d1
 80123ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 80123b2:	4770      	bx	lr
 80123b4:	4b15      	ldr	r3, [pc, #84]	@ (801240c <__kernel_cos+0xcc>)
 80123b6:	4299      	cmp	r1, r3
 80123b8:	d809      	bhi.n	80123ce <__kernel_cos+0x8e>
 80123ba:	2200      	movs	r2, #0
 80123bc:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 80123c0:	ec43 2b16 	vmov	d6, r2, r3
 80123c4:	ee30 0b46 	vsub.f64	d0, d0, d6
 80123c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80123cc:	e7ed      	b.n	80123aa <__kernel_cos+0x6a>
 80123ce:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 80123d2:	e7f7      	b.n	80123c4 <__kernel_cos+0x84>
 80123d4:	f3af 8000 	nop.w
 80123d8:	be8838d4 	.word	0xbe8838d4
 80123dc:	bda8fae9 	.word	0xbda8fae9
 80123e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80123e4:	3e21ee9e 	.word	0x3e21ee9e
 80123e8:	809c52ad 	.word	0x809c52ad
 80123ec:	be927e4f 	.word	0xbe927e4f
 80123f0:	19cb1590 	.word	0x19cb1590
 80123f4:	3efa01a0 	.word	0x3efa01a0
 80123f8:	16c15177 	.word	0x16c15177
 80123fc:	bf56c16c 	.word	0xbf56c16c
 8012400:	5555554c 	.word	0x5555554c
 8012404:	3fa55555 	.word	0x3fa55555
 8012408:	3fd33332 	.word	0x3fd33332
 801240c:	3fe90000 	.word	0x3fe90000

08012410 <__kernel_sin>:
 8012410:	ee10 3a90 	vmov	r3, s1
 8012414:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012418:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801241c:	d204      	bcs.n	8012428 <__kernel_sin+0x18>
 801241e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8012422:	ee17 3a90 	vmov	r3, s15
 8012426:	b35b      	cbz	r3, 8012480 <__kernel_sin+0x70>
 8012428:	ee20 6b00 	vmul.f64	d6, d0, d0
 801242c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012430:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8012488 <__kernel_sin+0x78>
 8012434:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8012490 <__kernel_sin+0x80>
 8012438:	eea6 4b07 	vfma.f64	d4, d6, d7
 801243c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012498 <__kernel_sin+0x88>
 8012440:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012444:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80124a0 <__kernel_sin+0x90>
 8012448:	eea7 4b06 	vfma.f64	d4, d7, d6
 801244c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80124a8 <__kernel_sin+0x98>
 8012450:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012454:	b930      	cbnz	r0, 8012464 <__kernel_sin+0x54>
 8012456:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80124b0 <__kernel_sin+0xa0>
 801245a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801245e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8012462:	4770      	bx	lr
 8012464:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012468:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801246c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012470:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8012474:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80124b8 <__kernel_sin+0xa8>
 8012478:	eea5 1b07 	vfma.f64	d1, d5, d7
 801247c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	f3af 8000 	nop.w
 8012488:	5acfd57c 	.word	0x5acfd57c
 801248c:	3de5d93a 	.word	0x3de5d93a
 8012490:	8a2b9ceb 	.word	0x8a2b9ceb
 8012494:	be5ae5e6 	.word	0xbe5ae5e6
 8012498:	57b1fe7d 	.word	0x57b1fe7d
 801249c:	3ec71de3 	.word	0x3ec71de3
 80124a0:	19c161d5 	.word	0x19c161d5
 80124a4:	bf2a01a0 	.word	0xbf2a01a0
 80124a8:	1110f8a6 	.word	0x1110f8a6
 80124ac:	3f811111 	.word	0x3f811111
 80124b0:	55555549 	.word	0x55555549
 80124b4:	bfc55555 	.word	0xbfc55555
 80124b8:	55555549 	.word	0x55555549
 80124bc:	3fc55555 	.word	0x3fc55555

080124c0 <__ieee754_rem_pio2>:
 80124c0:	b570      	push	{r4, r5, r6, lr}
 80124c2:	eeb0 7b40 	vmov.f64	d7, d0
 80124c6:	ee17 5a90 	vmov	r5, s15
 80124ca:	4b99      	ldr	r3, [pc, #612]	@ (8012730 <__ieee754_rem_pio2+0x270>)
 80124cc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80124d0:	429e      	cmp	r6, r3
 80124d2:	b088      	sub	sp, #32
 80124d4:	4604      	mov	r4, r0
 80124d6:	d807      	bhi.n	80124e8 <__ieee754_rem_pio2+0x28>
 80124d8:	2200      	movs	r2, #0
 80124da:	2300      	movs	r3, #0
 80124dc:	ed84 0b00 	vstr	d0, [r4]
 80124e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80124e4:	2000      	movs	r0, #0
 80124e6:	e01b      	b.n	8012520 <__ieee754_rem_pio2+0x60>
 80124e8:	4b92      	ldr	r3, [pc, #584]	@ (8012734 <__ieee754_rem_pio2+0x274>)
 80124ea:	429e      	cmp	r6, r3
 80124ec:	d83b      	bhi.n	8012566 <__ieee754_rem_pio2+0xa6>
 80124ee:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 80124f2:	2d00      	cmp	r5, #0
 80124f4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 80126f0 <__ieee754_rem_pio2+0x230>
 80124f8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 80124fc:	dd19      	ble.n	8012532 <__ieee754_rem_pio2+0x72>
 80124fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012502:	429e      	cmp	r6, r3
 8012504:	d00e      	beq.n	8012524 <__ieee754_rem_pio2+0x64>
 8012506:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 80126f8 <__ieee754_rem_pio2+0x238>
 801250a:	ee37 6b45 	vsub.f64	d6, d7, d5
 801250e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012512:	ed84 6b00 	vstr	d6, [r4]
 8012516:	ee37 7b45 	vsub.f64	d7, d7, d5
 801251a:	ed84 7b02 	vstr	d7, [r4, #8]
 801251e:	2001      	movs	r0, #1
 8012520:	b008      	add	sp, #32
 8012522:	bd70      	pop	{r4, r5, r6, pc}
 8012524:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8012700 <__ieee754_rem_pio2+0x240>
 8012528:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8012708 <__ieee754_rem_pio2+0x248>
 801252c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012530:	e7eb      	b.n	801250a <__ieee754_rem_pio2+0x4a>
 8012532:	429e      	cmp	r6, r3
 8012534:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012538:	d00e      	beq.n	8012558 <__ieee754_rem_pio2+0x98>
 801253a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 80126f8 <__ieee754_rem_pio2+0x238>
 801253e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012542:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012546:	ed84 6b00 	vstr	d6, [r4]
 801254a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801254e:	f04f 30ff 	mov.w	r0, #4294967295
 8012552:	ed84 7b02 	vstr	d7, [r4, #8]
 8012556:	e7e3      	b.n	8012520 <__ieee754_rem_pio2+0x60>
 8012558:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8012700 <__ieee754_rem_pio2+0x240>
 801255c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8012708 <__ieee754_rem_pio2+0x248>
 8012560:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012564:	e7eb      	b.n	801253e <__ieee754_rem_pio2+0x7e>
 8012566:	4b74      	ldr	r3, [pc, #464]	@ (8012738 <__ieee754_rem_pio2+0x278>)
 8012568:	429e      	cmp	r6, r3
 801256a:	d870      	bhi.n	801264e <__ieee754_rem_pio2+0x18e>
 801256c:	f000 f8ec 	bl	8012748 <fabs>
 8012570:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8012574:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012710 <__ieee754_rem_pio2+0x250>
 8012578:	eea0 7b06 	vfma.f64	d7, d0, d6
 801257c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012580:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012584:	ee17 0a90 	vmov	r0, s15
 8012588:	eeb1 4b45 	vneg.f64	d4, d5
 801258c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80126f0 <__ieee754_rem_pio2+0x230>
 8012590:	eea5 0b47 	vfms.f64	d0, d5, d7
 8012594:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80126f8 <__ieee754_rem_pio2+0x238>
 8012598:	281f      	cmp	r0, #31
 801259a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801259e:	ee30 6b47 	vsub.f64	d6, d0, d7
 80125a2:	dc05      	bgt.n	80125b0 <__ieee754_rem_pio2+0xf0>
 80125a4:	4b65      	ldr	r3, [pc, #404]	@ (801273c <__ieee754_rem_pio2+0x27c>)
 80125a6:	1e42      	subs	r2, r0, #1
 80125a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125ac:	42b3      	cmp	r3, r6
 80125ae:	d109      	bne.n	80125c4 <__ieee754_rem_pio2+0x104>
 80125b0:	ee16 3a90 	vmov	r3, s13
 80125b4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80125b8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80125bc:	2b10      	cmp	r3, #16
 80125be:	ea4f 5226 	mov.w	r2, r6, asr #20
 80125c2:	dc02      	bgt.n	80125ca <__ieee754_rem_pio2+0x10a>
 80125c4:	ed84 6b00 	vstr	d6, [r4]
 80125c8:	e01a      	b.n	8012600 <__ieee754_rem_pio2+0x140>
 80125ca:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8012700 <__ieee754_rem_pio2+0x240>
 80125ce:	eeb0 6b40 	vmov.f64	d6, d0
 80125d2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80125d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80125da:	eea4 7b03 	vfma.f64	d7, d4, d3
 80125de:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8012708 <__ieee754_rem_pio2+0x248>
 80125e2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80125e6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80125ea:	ee13 3a90 	vmov	r3, s7
 80125ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80125f2:	1ad3      	subs	r3, r2, r3
 80125f4:	2b31      	cmp	r3, #49	@ 0x31
 80125f6:	dc17      	bgt.n	8012628 <__ieee754_rem_pio2+0x168>
 80125f8:	eeb0 0b46 	vmov.f64	d0, d6
 80125fc:	ed84 3b00 	vstr	d3, [r4]
 8012600:	ed94 6b00 	vldr	d6, [r4]
 8012604:	2d00      	cmp	r5, #0
 8012606:	ee30 0b46 	vsub.f64	d0, d0, d6
 801260a:	ee30 0b47 	vsub.f64	d0, d0, d7
 801260e:	ed84 0b02 	vstr	d0, [r4, #8]
 8012612:	da85      	bge.n	8012520 <__ieee754_rem_pio2+0x60>
 8012614:	eeb1 6b46 	vneg.f64	d6, d6
 8012618:	eeb1 0b40 	vneg.f64	d0, d0
 801261c:	ed84 6b00 	vstr	d6, [r4]
 8012620:	ed84 0b02 	vstr	d0, [r4, #8]
 8012624:	4240      	negs	r0, r0
 8012626:	e77b      	b.n	8012520 <__ieee754_rem_pio2+0x60>
 8012628:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8012718 <__ieee754_rem_pio2+0x258>
 801262c:	eeb0 0b46 	vmov.f64	d0, d6
 8012630:	eea4 0b07 	vfma.f64	d0, d4, d7
 8012634:	ee36 6b40 	vsub.f64	d6, d6, d0
 8012638:	eea4 6b07 	vfma.f64	d6, d4, d7
 801263c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8012720 <__ieee754_rem_pio2+0x260>
 8012640:	eeb0 7b46 	vmov.f64	d7, d6
 8012644:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8012648:	ee30 6b47 	vsub.f64	d6, d0, d7
 801264c:	e7ba      	b.n	80125c4 <__ieee754_rem_pio2+0x104>
 801264e:	4b3c      	ldr	r3, [pc, #240]	@ (8012740 <__ieee754_rem_pio2+0x280>)
 8012650:	429e      	cmp	r6, r3
 8012652:	d906      	bls.n	8012662 <__ieee754_rem_pio2+0x1a2>
 8012654:	ee30 7b40 	vsub.f64	d7, d0, d0
 8012658:	ed80 7b02 	vstr	d7, [r0, #8]
 801265c:	ed80 7b00 	vstr	d7, [r0]
 8012660:	e740      	b.n	80124e4 <__ieee754_rem_pio2+0x24>
 8012662:	ee10 3a10 	vmov	r3, s0
 8012666:	1532      	asrs	r2, r6, #20
 8012668:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801266c:	4618      	mov	r0, r3
 801266e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8012672:	ec41 0b17 	vmov	d7, r0, r1
 8012676:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801267a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8012728 <__ieee754_rem_pio2+0x268>
 801267e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012682:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012686:	ed8d 6b02 	vstr	d6, [sp, #8]
 801268a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801268e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012692:	a808      	add	r0, sp, #32
 8012694:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012698:	ee37 7b46 	vsub.f64	d7, d7, d6
 801269c:	ed8d 6b04 	vstr	d6, [sp, #16]
 80126a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80126a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80126a8:	2103      	movs	r1, #3
 80126aa:	ed30 7b02 	vldmdb	r0!, {d7}
 80126ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80126b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b6:	460b      	mov	r3, r1
 80126b8:	f101 31ff 	add.w	r1, r1, #4294967295
 80126bc:	d0f5      	beq.n	80126aa <__ieee754_rem_pio2+0x1ea>
 80126be:	4921      	ldr	r1, [pc, #132]	@ (8012744 <__ieee754_rem_pio2+0x284>)
 80126c0:	9101      	str	r1, [sp, #4]
 80126c2:	2102      	movs	r1, #2
 80126c4:	9100      	str	r1, [sp, #0]
 80126c6:	a802      	add	r0, sp, #8
 80126c8:	4621      	mov	r1, r4
 80126ca:	f000 f845 	bl	8012758 <__kernel_rem_pio2>
 80126ce:	2d00      	cmp	r5, #0
 80126d0:	f6bf af26 	bge.w	8012520 <__ieee754_rem_pio2+0x60>
 80126d4:	ed94 7b00 	vldr	d7, [r4]
 80126d8:	eeb1 7b47 	vneg.f64	d7, d7
 80126dc:	ed84 7b00 	vstr	d7, [r4]
 80126e0:	ed94 7b02 	vldr	d7, [r4, #8]
 80126e4:	eeb1 7b47 	vneg.f64	d7, d7
 80126e8:	ed84 7b02 	vstr	d7, [r4, #8]
 80126ec:	e79a      	b.n	8012624 <__ieee754_rem_pio2+0x164>
 80126ee:	bf00      	nop
 80126f0:	54400000 	.word	0x54400000
 80126f4:	3ff921fb 	.word	0x3ff921fb
 80126f8:	1a626331 	.word	0x1a626331
 80126fc:	3dd0b461 	.word	0x3dd0b461
 8012700:	1a600000 	.word	0x1a600000
 8012704:	3dd0b461 	.word	0x3dd0b461
 8012708:	2e037073 	.word	0x2e037073
 801270c:	3ba3198a 	.word	0x3ba3198a
 8012710:	6dc9c883 	.word	0x6dc9c883
 8012714:	3fe45f30 	.word	0x3fe45f30
 8012718:	2e000000 	.word	0x2e000000
 801271c:	3ba3198a 	.word	0x3ba3198a
 8012720:	252049c1 	.word	0x252049c1
 8012724:	397b839a 	.word	0x397b839a
 8012728:	00000000 	.word	0x00000000
 801272c:	41700000 	.word	0x41700000
 8012730:	3fe921fb 	.word	0x3fe921fb
 8012734:	4002d97b 	.word	0x4002d97b
 8012738:	413921fb 	.word	0x413921fb
 801273c:	08012f4c 	.word	0x08012f4c
 8012740:	7fefffff 	.word	0x7fefffff
 8012744:	08012fcc 	.word	0x08012fcc

08012748 <fabs>:
 8012748:	ec51 0b10 	vmov	r0, r1, d0
 801274c:	4602      	mov	r2, r0
 801274e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012752:	ec43 2b10 	vmov	d0, r2, r3
 8012756:	4770      	bx	lr

08012758 <__kernel_rem_pio2>:
 8012758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801275c:	ed2d 8b06 	vpush	{d8-d10}
 8012760:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8012764:	469b      	mov	fp, r3
 8012766:	460f      	mov	r7, r1
 8012768:	4bb9      	ldr	r3, [pc, #740]	@ (8012a50 <__kernel_rem_pio2+0x2f8>)
 801276a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 801276c:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
 801276e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8012772:	9001      	str	r0, [sp, #4]
 8012774:	f112 0f14 	cmn.w	r2, #20
 8012778:	bfa8      	it	ge
 801277a:	1ed3      	subge	r3, r2, #3
 801277c:	f10b 3aff 	add.w	sl, fp, #4294967295
 8012780:	bfb8      	it	lt
 8012782:	2300      	movlt	r3, #0
 8012784:	f06f 0517 	mvn.w	r5, #23
 8012788:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 8012a38 <__kernel_rem_pio2+0x2e0>
 801278c:	bfa4      	itt	ge
 801278e:	2018      	movge	r0, #24
 8012790:	fb93 f3f0 	sdivge	r3, r3, r0
 8012794:	fb03 5505 	mla	r5, r3, r5, r5
 8012798:	eba3 040a 	sub.w	r4, r3, sl
 801279c:	4415      	add	r5, r2
 801279e:	eb09 0c0a 	add.w	ip, r9, sl
 80127a2:	a81a      	add	r0, sp, #104	@ 0x68
 80127a4:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 80127a8:	2200      	movs	r2, #0
 80127aa:	4562      	cmp	r2, ip
 80127ac:	dd0e      	ble.n	80127cc <__kernel_rem_pio2+0x74>
 80127ae:	aa1a      	add	r2, sp, #104	@ 0x68
 80127b0:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80127b4:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
 80127b8:	2400      	movs	r4, #0
 80127ba:	454c      	cmp	r4, r9
 80127bc:	dc23      	bgt.n	8012806 <__kernel_rem_pio2+0xae>
 80127be:	ed9f 7b9e 	vldr	d7, [pc, #632]	@ 8012a38 <__kernel_rem_pio2+0x2e0>
 80127c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80127c6:	4694      	mov	ip, r2
 80127c8:	2000      	movs	r0, #0
 80127ca:	e015      	b.n	80127f8 <__kernel_rem_pio2+0xa0>
 80127cc:	42d4      	cmn	r4, r2
 80127ce:	d409      	bmi.n	80127e4 <__kernel_rem_pio2+0x8c>
 80127d0:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 80127d4:	ee07 1a90 	vmov	s15, r1
 80127d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80127dc:	eca0 7b02 	vstmia	r0!, {d7}
 80127e0:	3201      	adds	r2, #1
 80127e2:	e7e2      	b.n	80127aa <__kernel_rem_pio2+0x52>
 80127e4:	eeb0 7b46 	vmov.f64	d7, d6
 80127e8:	e7f8      	b.n	80127dc <__kernel_rem_pio2+0x84>
 80127ea:	ecbe 5b02 	vldmia	lr!, {d5}
 80127ee:	ed3c 6b02 	vldmdb	ip!, {d6}
 80127f2:	3001      	adds	r0, #1
 80127f4:	eea5 7b06 	vfma.f64	d7, d5, d6
 80127f8:	4550      	cmp	r0, sl
 80127fa:	ddf6      	ble.n	80127ea <__kernel_rem_pio2+0x92>
 80127fc:	eca8 7b02 	vstmia	r8!, {d7}
 8012800:	3401      	adds	r4, #1
 8012802:	3208      	adds	r2, #8
 8012804:	e7d9      	b.n	80127ba <__kernel_rem_pio2+0x62>
 8012806:	aa06      	add	r2, sp, #24
 8012808:	ed9f 9b8d 	vldr	d9, [pc, #564]	@ 8012a40 <__kernel_rem_pio2+0x2e8>
 801280c:	ed9f ab8e 	vldr	d10, [pc, #568]	@ 8012a48 <__kernel_rem_pio2+0x2f0>
 8012810:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8012814:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012818:	9203      	str	r2, [sp, #12]
 801281a:	9302      	str	r3, [sp, #8]
 801281c:	464c      	mov	r4, r9
 801281e:	00e3      	lsls	r3, r4, #3
 8012820:	9304      	str	r3, [sp, #16]
 8012822:	ab92      	add	r3, sp, #584	@ 0x248
 8012824:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012828:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801282c:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801282e:	ab06      	add	r3, sp, #24
 8012830:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012834:	461e      	mov	r6, r3
 8012836:	4620      	mov	r0, r4
 8012838:	2800      	cmp	r0, #0
 801283a:	dc4a      	bgt.n	80128d2 <__kernel_rem_pio2+0x17a>
 801283c:	4628      	mov	r0, r5
 801283e:	9305      	str	r3, [sp, #20]
 8012840:	f000 f9fe 	bl	8012c40 <scalbn>
 8012844:	eeb0 8b40 	vmov.f64	d8, d0
 8012848:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801284c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8012850:	f000 fa72 	bl	8012d38 <floor>
 8012854:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8012858:	eea0 8b47 	vfms.f64	d8, d0, d7
 801285c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8012860:	2d00      	cmp	r5, #0
 8012862:	ee17 8a90 	vmov	r8, s15
 8012866:	9b05      	ldr	r3, [sp, #20]
 8012868:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801286c:	ee38 8b47 	vsub.f64	d8, d8, d7
 8012870:	dd41      	ble.n	80128f6 <__kernel_rem_pio2+0x19e>
 8012872:	1e60      	subs	r0, r4, #1
 8012874:	aa06      	add	r2, sp, #24
 8012876:	f1c5 0c18 	rsb	ip, r5, #24
 801287a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801287e:	fa46 f20c 	asr.w	r2, r6, ip
 8012882:	4490      	add	r8, r2
 8012884:	fa02 f20c 	lsl.w	r2, r2, ip
 8012888:	1ab6      	subs	r6, r6, r2
 801288a:	aa06      	add	r2, sp, #24
 801288c:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8012890:	f1c5 0217 	rsb	r2, r5, #23
 8012894:	4116      	asrs	r6, r2
 8012896:	2e00      	cmp	r6, #0
 8012898:	dd3c      	ble.n	8012914 <__kernel_rem_pio2+0x1bc>
 801289a:	f04f 0c00 	mov.w	ip, #0
 801289e:	f108 0801 	add.w	r8, r8, #1
 80128a2:	4660      	mov	r0, ip
 80128a4:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 80128a8:	4564      	cmp	r4, ip
 80128aa:	dc66      	bgt.n	801297a <__kernel_rem_pio2+0x222>
 80128ac:	2d00      	cmp	r5, #0
 80128ae:	dd03      	ble.n	80128b8 <__kernel_rem_pio2+0x160>
 80128b0:	2d01      	cmp	r5, #1
 80128b2:	d072      	beq.n	801299a <__kernel_rem_pio2+0x242>
 80128b4:	2d02      	cmp	r5, #2
 80128b6:	d07a      	beq.n	80129ae <__kernel_rem_pio2+0x256>
 80128b8:	2e02      	cmp	r6, #2
 80128ba:	d12b      	bne.n	8012914 <__kernel_rem_pio2+0x1bc>
 80128bc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80128c0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80128c4:	b330      	cbz	r0, 8012914 <__kernel_rem_pio2+0x1bc>
 80128c6:	4628      	mov	r0, r5
 80128c8:	f000 f9ba 	bl	8012c40 <scalbn>
 80128cc:	ee38 8b40 	vsub.f64	d8, d8, d0
 80128d0:	e020      	b.n	8012914 <__kernel_rem_pio2+0x1bc>
 80128d2:	ee20 7b09 	vmul.f64	d7, d0, d9
 80128d6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80128da:	3801      	subs	r0, #1
 80128dc:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80128e0:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80128e4:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80128e8:	eca6 0a01 	vstmia	r6!, {s0}
 80128ec:	ed32 0b02 	vldmdb	r2!, {d0}
 80128f0:	ee37 0b00 	vadd.f64	d0, d7, d0
 80128f4:	e7a0      	b.n	8012838 <__kernel_rem_pio2+0xe0>
 80128f6:	d105      	bne.n	8012904 <__kernel_rem_pio2+0x1ac>
 80128f8:	1e62      	subs	r2, r4, #1
 80128fa:	a906      	add	r1, sp, #24
 80128fc:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8012900:	15f6      	asrs	r6, r6, #23
 8012902:	e7c8      	b.n	8012896 <__kernel_rem_pio2+0x13e>
 8012904:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8012908:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801290c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012910:	da31      	bge.n	8012976 <__kernel_rem_pio2+0x21e>
 8012912:	2600      	movs	r6, #0
 8012914:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291c:	f040 809c 	bne.w	8012a58 <__kernel_rem_pio2+0x300>
 8012920:	1e62      	subs	r2, r4, #1
 8012922:	2000      	movs	r0, #0
 8012924:	454a      	cmp	r2, r9
 8012926:	da49      	bge.n	80129bc <__kernel_rem_pio2+0x264>
 8012928:	2800      	cmp	r0, #0
 801292a:	d062      	beq.n	80129f2 <__kernel_rem_pio2+0x29a>
 801292c:	3c01      	subs	r4, #1
 801292e:	ab06      	add	r3, sp, #24
 8012930:	3d18      	subs	r5, #24
 8012932:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d0f8      	beq.n	801292c <__kernel_rem_pio2+0x1d4>
 801293a:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801293e:	4628      	mov	r0, r5
 8012940:	f000 f97e 	bl	8012c40 <scalbn>
 8012944:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8012a40 <__kernel_rem_pio2+0x2e8>
 8012948:	1c62      	adds	r2, r4, #1
 801294a:	a96a      	add	r1, sp, #424	@ 0x1a8
 801294c:	00d3      	lsls	r3, r2, #3
 801294e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012952:	4622      	mov	r2, r4
 8012954:	2a00      	cmp	r2, #0
 8012956:	f280 80a9 	bge.w	8012aac <__kernel_rem_pio2+0x354>
 801295a:	4622      	mov	r2, r4
 801295c:	2a00      	cmp	r2, #0
 801295e:	f2c0 80c7 	blt.w	8012af0 <__kernel_rem_pio2+0x398>
 8012962:	a96a      	add	r1, sp, #424	@ 0x1a8
 8012964:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8012968:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8012a38 <__kernel_rem_pio2+0x2e0>
 801296c:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8012a54 <__kernel_rem_pio2+0x2fc>
 8012970:	2000      	movs	r0, #0
 8012972:	1aa1      	subs	r1, r4, r2
 8012974:	e0b1      	b.n	8012ada <__kernel_rem_pio2+0x382>
 8012976:	2602      	movs	r6, #2
 8012978:	e78f      	b.n	801289a <__kernel_rem_pio2+0x142>
 801297a:	f853 2b04 	ldr.w	r2, [r3], #4
 801297e:	b948      	cbnz	r0, 8012994 <__kernel_rem_pio2+0x23c>
 8012980:	b122      	cbz	r2, 801298c <__kernel_rem_pio2+0x234>
 8012982:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8012986:	f843 2c04 	str.w	r2, [r3, #-4]
 801298a:	2201      	movs	r2, #1
 801298c:	f10c 0c01 	add.w	ip, ip, #1
 8012990:	4610      	mov	r0, r2
 8012992:	e789      	b.n	80128a8 <__kernel_rem_pio2+0x150>
 8012994:	ebae 0202 	sub.w	r2, lr, r2
 8012998:	e7f5      	b.n	8012986 <__kernel_rem_pio2+0x22e>
 801299a:	1e62      	subs	r2, r4, #1
 801299c:	ab06      	add	r3, sp, #24
 801299e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80129a6:	a906      	add	r1, sp, #24
 80129a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80129ac:	e784      	b.n	80128b8 <__kernel_rem_pio2+0x160>
 80129ae:	1e62      	subs	r2, r4, #1
 80129b0:	ab06      	add	r3, sp, #24
 80129b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129b6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80129ba:	e7f4      	b.n	80129a6 <__kernel_rem_pio2+0x24e>
 80129bc:	ab06      	add	r3, sp, #24
 80129be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129c2:	3a01      	subs	r2, #1
 80129c4:	4318      	orrs	r0, r3
 80129c6:	e7ad      	b.n	8012924 <__kernel_rem_pio2+0x1cc>
 80129c8:	3301      	adds	r3, #1
 80129ca:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80129ce:	2800      	cmp	r0, #0
 80129d0:	d0fa      	beq.n	80129c8 <__kernel_rem_pio2+0x270>
 80129d2:	9a04      	ldr	r2, [sp, #16]
 80129d4:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80129d8:	446a      	add	r2, sp
 80129da:	eb04 000b 	add.w	r0, r4, fp
 80129de:	a91a      	add	r1, sp, #104	@ 0x68
 80129e0:	1c66      	adds	r6, r4, #1
 80129e2:	3a98      	subs	r2, #152	@ 0x98
 80129e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80129e8:	4423      	add	r3, r4
 80129ea:	42b3      	cmp	r3, r6
 80129ec:	da04      	bge.n	80129f8 <__kernel_rem_pio2+0x2a0>
 80129ee:	461c      	mov	r4, r3
 80129f0:	e715      	b.n	801281e <__kernel_rem_pio2+0xc6>
 80129f2:	9a03      	ldr	r2, [sp, #12]
 80129f4:	2301      	movs	r3, #1
 80129f6:	e7e8      	b.n	80129ca <__kernel_rem_pio2+0x272>
 80129f8:	9902      	ldr	r1, [sp, #8]
 80129fa:	f8dd c004 	ldr.w	ip, [sp, #4]
 80129fe:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8012a02:	9104      	str	r1, [sp, #16]
 8012a04:	ee07 1a90 	vmov	s15, r1
 8012a08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012a0c:	2400      	movs	r4, #0
 8012a0e:	eca0 7b02 	vstmia	r0!, {d7}
 8012a12:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8012a38 <__kernel_rem_pio2+0x2e0>
 8012a16:	4686      	mov	lr, r0
 8012a18:	4554      	cmp	r4, sl
 8012a1a:	dd03      	ble.n	8012a24 <__kernel_rem_pio2+0x2cc>
 8012a1c:	eca2 7b02 	vstmia	r2!, {d7}
 8012a20:	3601      	adds	r6, #1
 8012a22:	e7e2      	b.n	80129ea <__kernel_rem_pio2+0x292>
 8012a24:	ecbc 5b02 	vldmia	ip!, {d5}
 8012a28:	ed3e 6b02 	vldmdb	lr!, {d6}
 8012a2c:	3401      	adds	r4, #1
 8012a2e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012a32:	e7f1      	b.n	8012a18 <__kernel_rem_pio2+0x2c0>
 8012a34:	f3af 8000 	nop.w
	...
 8012a44:	3e700000 	.word	0x3e700000
 8012a48:	00000000 	.word	0x00000000
 8012a4c:	41700000 	.word	0x41700000
 8012a50:	08013118 	.word	0x08013118
 8012a54:	080130d8 	.word	0x080130d8
 8012a58:	4268      	negs	r0, r5
 8012a5a:	eeb0 0b48 	vmov.f64	d0, d8
 8012a5e:	f000 f8ef 	bl	8012c40 <scalbn>
 8012a62:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 8012c28 <__kernel_rem_pio2+0x4d0>
 8012a66:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8012a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6e:	db17      	blt.n	8012aa0 <__kernel_rem_pio2+0x348>
 8012a70:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 8012c30 <__kernel_rem_pio2+0x4d8>
 8012a74:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012a78:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012a7c:	aa06      	add	r2, sp, #24
 8012a7e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8012a82:	eea5 0b46 	vfms.f64	d0, d5, d6
 8012a86:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012a8a:	3518      	adds	r5, #24
 8012a8c:	ee10 3a10 	vmov	r3, s0
 8012a90:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012a94:	ee17 3a10 	vmov	r3, s14
 8012a98:	3401      	adds	r4, #1
 8012a9a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012a9e:	e74c      	b.n	801293a <__kernel_rem_pio2+0x1e2>
 8012aa0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012aa4:	aa06      	add	r2, sp, #24
 8012aa6:	ee10 3a10 	vmov	r3, s0
 8012aaa:	e7f6      	b.n	8012a9a <__kernel_rem_pio2+0x342>
 8012aac:	a806      	add	r0, sp, #24
 8012aae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8012ab2:	9001      	str	r0, [sp, #4]
 8012ab4:	ee07 0a90 	vmov	s15, r0
 8012ab8:	3a01      	subs	r2, #1
 8012aba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012abe:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012ac2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012ac6:	ed21 7b02 	vstmdb	r1!, {d7}
 8012aca:	e743      	b.n	8012954 <__kernel_rem_pio2+0x1fc>
 8012acc:	ecbc 5b02 	vldmia	ip!, {d5}
 8012ad0:	ecb5 6b02 	vldmia	r5!, {d6}
 8012ad4:	3001      	adds	r0, #1
 8012ad6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012ada:	4548      	cmp	r0, r9
 8012adc:	dc01      	bgt.n	8012ae2 <__kernel_rem_pio2+0x38a>
 8012ade:	4288      	cmp	r0, r1
 8012ae0:	ddf4      	ble.n	8012acc <__kernel_rem_pio2+0x374>
 8012ae2:	a842      	add	r0, sp, #264	@ 0x108
 8012ae4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012ae8:	ed81 7b00 	vstr	d7, [r1]
 8012aec:	3a01      	subs	r2, #1
 8012aee:	e735      	b.n	801295c <__kernel_rem_pio2+0x204>
 8012af0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8012af2:	2a02      	cmp	r2, #2
 8012af4:	dc0a      	bgt.n	8012b0c <__kernel_rem_pio2+0x3b4>
 8012af6:	2a00      	cmp	r2, #0
 8012af8:	dc29      	bgt.n	8012b4e <__kernel_rem_pio2+0x3f6>
 8012afa:	d042      	beq.n	8012b82 <__kernel_rem_pio2+0x42a>
 8012afc:	f008 0007 	and.w	r0, r8, #7
 8012b00:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8012b04:	ecbd 8b06 	vpop	{d8-d10}
 8012b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b0c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8012b0e:	2a03      	cmp	r2, #3
 8012b10:	d1f4      	bne.n	8012afc <__kernel_rem_pio2+0x3a4>
 8012b12:	a942      	add	r1, sp, #264	@ 0x108
 8012b14:	f1a3 0208 	sub.w	r2, r3, #8
 8012b18:	440a      	add	r2, r1
 8012b1a:	4611      	mov	r1, r2
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	2800      	cmp	r0, #0
 8012b20:	dc50      	bgt.n	8012bc4 <__kernel_rem_pio2+0x46c>
 8012b22:	4621      	mov	r1, r4
 8012b24:	2901      	cmp	r1, #1
 8012b26:	dc5d      	bgt.n	8012be4 <__kernel_rem_pio2+0x48c>
 8012b28:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8012c38 <__kernel_rem_pio2+0x4e0>
 8012b2c:	aa42      	add	r2, sp, #264	@ 0x108
 8012b2e:	4413      	add	r3, r2
 8012b30:	2c01      	cmp	r4, #1
 8012b32:	dc67      	bgt.n	8012c04 <__kernel_rem_pio2+0x4ac>
 8012b34:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8012b38:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8012b3c:	2e00      	cmp	r6, #0
 8012b3e:	d167      	bne.n	8012c10 <__kernel_rem_pio2+0x4b8>
 8012b40:	ed87 5b00 	vstr	d5, [r7]
 8012b44:	ed87 6b02 	vstr	d6, [r7, #8]
 8012b48:	ed87 7b04 	vstr	d7, [r7, #16]
 8012b4c:	e7d6      	b.n	8012afc <__kernel_rem_pio2+0x3a4>
 8012b4e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8012c38 <__kernel_rem_pio2+0x4e0>
 8012b52:	aa42      	add	r2, sp, #264	@ 0x108
 8012b54:	4413      	add	r3, r2
 8012b56:	4622      	mov	r2, r4
 8012b58:	2a00      	cmp	r2, #0
 8012b5a:	da24      	bge.n	8012ba6 <__kernel_rem_pio2+0x44e>
 8012b5c:	b34e      	cbz	r6, 8012bb2 <__kernel_rem_pio2+0x45a>
 8012b5e:	eeb1 7b46 	vneg.f64	d7, d6
 8012b62:	ed87 7b00 	vstr	d7, [r7]
 8012b66:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8012b6a:	aa44      	add	r2, sp, #272	@ 0x110
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b72:	429c      	cmp	r4, r3
 8012b74:	da20      	bge.n	8012bb8 <__kernel_rem_pio2+0x460>
 8012b76:	b10e      	cbz	r6, 8012b7c <__kernel_rem_pio2+0x424>
 8012b78:	eeb1 7b47 	vneg.f64	d7, d7
 8012b7c:	ed87 7b02 	vstr	d7, [r7, #8]
 8012b80:	e7bc      	b.n	8012afc <__kernel_rem_pio2+0x3a4>
 8012b82:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8012c38 <__kernel_rem_pio2+0x4e0>
 8012b86:	aa42      	add	r2, sp, #264	@ 0x108
 8012b88:	4413      	add	r3, r2
 8012b8a:	2c00      	cmp	r4, #0
 8012b8c:	da05      	bge.n	8012b9a <__kernel_rem_pio2+0x442>
 8012b8e:	b10e      	cbz	r6, 8012b94 <__kernel_rem_pio2+0x43c>
 8012b90:	eeb1 7b47 	vneg.f64	d7, d7
 8012b94:	ed87 7b00 	vstr	d7, [r7]
 8012b98:	e7b0      	b.n	8012afc <__kernel_rem_pio2+0x3a4>
 8012b9a:	ed33 6b02 	vldmdb	r3!, {d6}
 8012b9e:	3c01      	subs	r4, #1
 8012ba0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012ba4:	e7f1      	b.n	8012b8a <__kernel_rem_pio2+0x432>
 8012ba6:	ed33 7b02 	vldmdb	r3!, {d7}
 8012baa:	3a01      	subs	r2, #1
 8012bac:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012bb0:	e7d2      	b.n	8012b58 <__kernel_rem_pio2+0x400>
 8012bb2:	eeb0 7b46 	vmov.f64	d7, d6
 8012bb6:	e7d4      	b.n	8012b62 <__kernel_rem_pio2+0x40a>
 8012bb8:	ecb2 6b02 	vldmia	r2!, {d6}
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012bc2:	e7d6      	b.n	8012b72 <__kernel_rem_pio2+0x41a>
 8012bc4:	ed31 7b02 	vldmdb	r1!, {d7}
 8012bc8:	ed91 5b02 	vldr	d5, [r1, #8]
 8012bcc:	3801      	subs	r0, #1
 8012bce:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012bd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012bd6:	ed81 6b00 	vstr	d6, [r1]
 8012bda:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012bde:	ed81 7b02 	vstr	d7, [r1, #8]
 8012be2:	e79c      	b.n	8012b1e <__kernel_rem_pio2+0x3c6>
 8012be4:	ed32 7b02 	vldmdb	r2!, {d7}
 8012be8:	ed92 5b02 	vldr	d5, [r2, #8]
 8012bec:	3901      	subs	r1, #1
 8012bee:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012bf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012bf6:	ed82 6b00 	vstr	d6, [r2]
 8012bfa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012bfe:	ed82 7b02 	vstr	d7, [r2, #8]
 8012c02:	e78f      	b.n	8012b24 <__kernel_rem_pio2+0x3cc>
 8012c04:	ed33 6b02 	vldmdb	r3!, {d6}
 8012c08:	3c01      	subs	r4, #1
 8012c0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012c0e:	e78f      	b.n	8012b30 <__kernel_rem_pio2+0x3d8>
 8012c10:	eeb1 5b45 	vneg.f64	d5, d5
 8012c14:	eeb1 6b46 	vneg.f64	d6, d6
 8012c18:	ed87 5b00 	vstr	d5, [r7]
 8012c1c:	eeb1 7b47 	vneg.f64	d7, d7
 8012c20:	ed87 6b02 	vstr	d6, [r7, #8]
 8012c24:	e790      	b.n	8012b48 <__kernel_rem_pio2+0x3f0>
 8012c26:	bf00      	nop
 8012c28:	00000000 	.word	0x00000000
 8012c2c:	41700000 	.word	0x41700000
 8012c30:	00000000 	.word	0x00000000
 8012c34:	3e700000 	.word	0x3e700000
	...

08012c40 <scalbn>:
 8012c40:	ee10 1a90 	vmov	r1, s1
 8012c44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012c48:	b98b      	cbnz	r3, 8012c6e <scalbn+0x2e>
 8012c4a:	ee10 3a10 	vmov	r3, s0
 8012c4e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8012c52:	4319      	orrs	r1, r3
 8012c54:	d00a      	beq.n	8012c6c <scalbn+0x2c>
 8012c56:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012d00 <scalbn+0xc0>
 8012c5a:	4b35      	ldr	r3, [pc, #212]	@ (8012d30 <scalbn+0xf0>)
 8012c5c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012c60:	4298      	cmp	r0, r3
 8012c62:	da0b      	bge.n	8012c7c <scalbn+0x3c>
 8012c64:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8012d08 <scalbn+0xc8>
 8012c68:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012c6c:	4770      	bx	lr
 8012c6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d107      	bne.n	8012c86 <scalbn+0x46>
 8012c76:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012c7a:	4770      	bx	lr
 8012c7c:	ee10 1a90 	vmov	r1, s1
 8012c80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012c84:	3b36      	subs	r3, #54	@ 0x36
 8012c86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012c8a:	4290      	cmp	r0, r2
 8012c8c:	dd0d      	ble.n	8012caa <scalbn+0x6a>
 8012c8e:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8012d10 <scalbn+0xd0>
 8012c92:	ee10 3a90 	vmov	r3, s1
 8012c96:	eeb0 6b47 	vmov.f64	d6, d7
 8012c9a:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8012d18 <scalbn+0xd8>
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012ca4:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012ca8:	4770      	bx	lr
 8012caa:	4418      	add	r0, r3
 8012cac:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8012cb0:	4298      	cmp	r0, r3
 8012cb2:	dcec      	bgt.n	8012c8e <scalbn+0x4e>
 8012cb4:	2800      	cmp	r0, #0
 8012cb6:	dd08      	ble.n	8012cca <scalbn+0x8a>
 8012cb8:	ec53 2b10 	vmov	r2, r3, d0
 8012cbc:	f36f 511e 	bfc	r1, #20, #11
 8012cc0:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8012cc4:	ec43 2b10 	vmov	d0, r2, r3
 8012cc8:	4770      	bx	lr
 8012cca:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8012cce:	da09      	bge.n	8012ce4 <scalbn+0xa4>
 8012cd0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012d08 <scalbn+0xc8>
 8012cd4:	ee10 3a90 	vmov	r3, s1
 8012cd8:	eeb0 6b47 	vmov.f64	d6, d7
 8012cdc:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8012d20 <scalbn+0xe0>
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	e7dd      	b.n	8012ca0 <scalbn+0x60>
 8012ce4:	ec53 2b10 	vmov	r2, r3, d0
 8012ce8:	3036      	adds	r0, #54	@ 0x36
 8012cea:	f36f 511e 	bfc	r1, #20, #11
 8012cee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8012cf2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012d28 <scalbn+0xe8>
 8012cf6:	ec43 2b10 	vmov	d0, r2, r3
 8012cfa:	e7b5      	b.n	8012c68 <scalbn+0x28>
 8012cfc:	f3af 8000 	nop.w
 8012d00:	00000000 	.word	0x00000000
 8012d04:	43500000 	.word	0x43500000
 8012d08:	c2f8f359 	.word	0xc2f8f359
 8012d0c:	01a56e1f 	.word	0x01a56e1f
 8012d10:	8800759c 	.word	0x8800759c
 8012d14:	7e37e43c 	.word	0x7e37e43c
 8012d18:	8800759c 	.word	0x8800759c
 8012d1c:	fe37e43c 	.word	0xfe37e43c
 8012d20:	c2f8f359 	.word	0xc2f8f359
 8012d24:	81a56e1f 	.word	0x81a56e1f
 8012d28:	00000000 	.word	0x00000000
 8012d2c:	3c900000 	.word	0x3c900000
 8012d30:	ffff3cb0 	.word	0xffff3cb0
 8012d34:	00000000 	.word	0x00000000

08012d38 <floor>:
 8012d38:	ee10 3a90 	vmov	r3, s1
 8012d3c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8012d40:	ee10 2a10 	vmov	r2, s0
 8012d44:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8012d48:	2913      	cmp	r1, #19
 8012d4a:	b530      	push	{r4, r5, lr}
 8012d4c:	4615      	mov	r5, r2
 8012d4e:	dc33      	bgt.n	8012db8 <floor+0x80>
 8012d50:	2900      	cmp	r1, #0
 8012d52:	da18      	bge.n	8012d86 <floor+0x4e>
 8012d54:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8012e18 <floor+0xe0>
 8012d58:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012d5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d64:	dd0a      	ble.n	8012d7c <floor+0x44>
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	da50      	bge.n	8012e0c <floor+0xd4>
 8012d6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	2200      	movs	r2, #0
 8012d72:	4293      	cmp	r3, r2
 8012d74:	4b2a      	ldr	r3, [pc, #168]	@ (8012e20 <floor+0xe8>)
 8012d76:	bf08      	it	eq
 8012d78:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	4610      	mov	r0, r2
 8012d80:	ec41 0b10 	vmov	d0, r0, r1
 8012d84:	e01f      	b.n	8012dc6 <floor+0x8e>
 8012d86:	4827      	ldr	r0, [pc, #156]	@ (8012e24 <floor+0xec>)
 8012d88:	4108      	asrs	r0, r1
 8012d8a:	ea03 0400 	and.w	r4, r3, r0
 8012d8e:	4314      	orrs	r4, r2
 8012d90:	d019      	beq.n	8012dc6 <floor+0x8e>
 8012d92:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012e18 <floor+0xe0>
 8012d96:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012d9a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da2:	ddeb      	ble.n	8012d7c <floor+0x44>
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	bfbe      	ittt	lt
 8012da8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8012dac:	410a      	asrlt	r2, r1
 8012dae:	189b      	addlt	r3, r3, r2
 8012db0:	ea23 0300 	bic.w	r3, r3, r0
 8012db4:	2200      	movs	r2, #0
 8012db6:	e7e1      	b.n	8012d7c <floor+0x44>
 8012db8:	2933      	cmp	r1, #51	@ 0x33
 8012dba:	dd05      	ble.n	8012dc8 <floor+0x90>
 8012dbc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8012dc0:	d101      	bne.n	8012dc6 <floor+0x8e>
 8012dc2:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012dc6:	bd30      	pop	{r4, r5, pc}
 8012dc8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8012dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8012dd0:	40e0      	lsrs	r0, r4
 8012dd2:	4210      	tst	r0, r2
 8012dd4:	d0f7      	beq.n	8012dc6 <floor+0x8e>
 8012dd6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8012e18 <floor+0xe0>
 8012dda:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012dde:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de6:	ddc9      	ble.n	8012d7c <floor+0x44>
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	da02      	bge.n	8012df2 <floor+0xba>
 8012dec:	2914      	cmp	r1, #20
 8012dee:	d103      	bne.n	8012df8 <floor+0xc0>
 8012df0:	3301      	adds	r3, #1
 8012df2:	ea22 0200 	bic.w	r2, r2, r0
 8012df6:	e7c1      	b.n	8012d7c <floor+0x44>
 8012df8:	2401      	movs	r4, #1
 8012dfa:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8012dfe:	fa04 f101 	lsl.w	r1, r4, r1
 8012e02:	440a      	add	r2, r1
 8012e04:	42aa      	cmp	r2, r5
 8012e06:	bf38      	it	cc
 8012e08:	191b      	addcc	r3, r3, r4
 8012e0a:	e7f2      	b.n	8012df2 <floor+0xba>
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	4613      	mov	r3, r2
 8012e10:	e7b4      	b.n	8012d7c <floor+0x44>
 8012e12:	bf00      	nop
 8012e14:	f3af 8000 	nop.w
 8012e18:	8800759c 	.word	0x8800759c
 8012e1c:	7e37e43c 	.word	0x7e37e43c
 8012e20:	bff00000 	.word	0xbff00000
 8012e24:	000fffff 	.word	0x000fffff

08012e28 <_init>:
 8012e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e2a:	bf00      	nop
 8012e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e2e:	bc08      	pop	{r3}
 8012e30:	469e      	mov	lr, r3
 8012e32:	4770      	bx	lr

08012e34 <_fini>:
 8012e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e36:	bf00      	nop
 8012e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e3a:	bc08      	pop	{r3}
 8012e3c:	469e      	mov	lr, r3
 8012e3e:	4770      	bx	lr
