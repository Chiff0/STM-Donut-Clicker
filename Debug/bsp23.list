
bsp23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d98  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08013038  08013038  00014038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013328  08013328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013330  08013330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013334  08013334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000184  24000000  08013338  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000412b8  24000188  080134bc  00015188  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24041440  080134bc  00015440  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015184  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041f84  00000000  00000000  000151b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006469  00000000  00000000  00057136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0005a663  00000000  00000000  0005d59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d08  00000000  00000000  000b7c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00007820  00000000  00000000  000b9910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000a26b  00000000  00000000  000c1130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000539ee  00000000  00000000  000cb39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0019237b  00000000  00000000  0011ed89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002b1104  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000066f4  00000000  00000000  002b1148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000004c  00000000  00000000  002b783c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000188 	.word	0x24000188
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013020 	.word	0x08013020

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400018c 	.word	0x2400018c
 80002dc:	08013020 	.word	0x08013020

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80003a0:	f240 1c01 	movw	ip, #257	@ 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80003a4:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 80003a6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80003aa:	f44f 7388 	mov.w	r3, #272	@ 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80003ae:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
 80003b0:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80003b2:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80003b6:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80003ba:	4770      	bx	lr

080003bc <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 80003bc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d102      	bne.n	80003ca <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  }

  return ret;
}
 80003ca:	2000      	movs	r0, #0
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 80003d0:	2000      	movs	r0, #0
 80003d2:	4770      	bx	lr

080003d4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80003d4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80003d6:	6904      	ldr	r4, [r0, #16]
 80003d8:	8900      	ldrh	r0, [r0, #8]
 80003da:	46a4      	mov	ip, r4
}
 80003dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80003e0:	4760      	bx	ip
 80003e2:	bf00      	nop

080003e4 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80003e4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80003e6:	68c4      	ldr	r4, [r0, #12]
 80003e8:	8900      	ldrh	r0, [r0, #8]
 80003ea:	46a4      	mov	ip, r4
}
 80003ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80003f0:	4760      	bx	ip
 80003f2:	bf00      	nop

080003f4 <FT5336_GestureConfig>:
{
 80003f4:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80003f6:	f100 0518 	add.w	r5, r0, #24
{
 80003fa:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80003fc:	7809      	ldrb	r1, [r1, #0]
 80003fe:	4628      	mov	r0, r5
 8000400:	f000 f96c 	bl	80006dc <ft5336_radian_value>
 8000404:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8000406:	7931      	ldrb	r1, [r6, #4]
 8000408:	4628      	mov	r0, r5
 800040a:	f000 f975 	bl	80006f8 <ft5336_offset_left_right>
 800040e:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8000410:	7a31      	ldrb	r1, [r6, #8]
 8000412:	4628      	mov	r0, r5
 8000414:	f000 f97e 	bl	8000714 <ft5336_offset_up_down>
 8000418:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800041a:	7b31      	ldrb	r1, [r6, #12]
 800041c:	4628      	mov	r0, r5
 800041e:	f000 f987 	bl	8000730 <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000422:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8000424:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000426:	4628      	mov	r0, r5
 8000428:	f000 f990 	bl	800074c <ft5336_distance_up_down>
 800042c:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800042e:	7d31      	ldrb	r1, [r6, #20]
 8000430:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000432:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8000434:	f000 f998 	bl	8000768 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8000438:	42c4      	cmn	r4, r0
}
 800043a:	bf14      	ite	ne
 800043c:	f04f 30ff 	movne.w	r0, #4294967295
 8000440:	2000      	moveq	r0, #0
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8000444:	3018      	adds	r0, #24
 8000446:	f000 b9ab 	b.w	80007a0 <ft5336_chip_id>
 800044a:	bf00      	nop

0800044c <FT5336_GetState>:
{
 800044c:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800044e:	f100 0518 	add.w	r5, r0, #24
{
 8000452:	b083      	sub	sp, #12
 8000454:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8000456:	4628      	mov	r0, r5
 8000458:	a901      	add	r1, sp, #4
 800045a:	f000 f931 	bl	80006c0 <ft5336_td_status>
 800045e:	bb10      	cbnz	r0, 80004a6 <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8000460:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8000464:	2b05      	cmp	r3, #5
 8000466:	bf94      	ite	ls
 8000468:	4619      	movls	r1, r3
 800046a:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800046c:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800046e:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8000470:	4628      	mov	r0, r5
 8000472:	2103      	movs	r1, #3
 8000474:	eb0d 0203 	add.w	r2, sp, r3
 8000478:	f000 f910 	bl	800069c <ft5336_read_reg>
 800047c:	b9b0      	cbnz	r0, 80004ac <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800047e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8000482:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8000486:	0212      	lsls	r2, r2, #8
 8000488:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800048c:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800048e:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8000492:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8000496:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8000498:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800049c:	430b      	orrs	r3, r1
 800049e:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
 80004a2:	b003      	add	sp, #12
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f04f 31ff 	mov.w	r1, #4294967295
 80004aa:	e7df      	b.n	800046c <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
 80004ac:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80004b0:	e7f7      	b.n	80004a2 <FT5336_GetState+0x56>
 80004b2:	bf00      	nop

080004b4 <FT5336_GetMultiTouchState>:
{
 80004b4:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80004b6:	f100 0518 	add.w	r5, r0, #24
{
 80004ba:	b088      	sub	sp, #32
 80004bc:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80004be:	4628      	mov	r0, r5
 80004c0:	4669      	mov	r1, sp
 80004c2:	f000 f8fd 	bl	80006c0 <ft5336_td_status>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	f040 809a 	bne.w	8000600 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80004cc:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80004d0:	2b05      	cmp	r3, #5
 80004d2:	bf94      	ite	ls
 80004d4:	4619      	movls	r1, r3
 80004d6:	2100      	movhi	r1, #0
 80004d8:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80004da:	231e      	movs	r3, #30
 80004dc:	466a      	mov	r2, sp
 80004de:	4628      	mov	r0, r5
 80004e0:	2103      	movs	r1, #3
 80004e2:	f000 f8db 	bl	800069c <ft5336_read_reg>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	f040 808d 	bne.w	8000606 <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80004ec:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80004f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80004f4:	020a      	lsls	r2, r1, #8
 80004f6:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80004fa:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80004fc:	f89d c007 	ldrb.w	ip, [sp, #7]
 8000500:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8000504:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000506:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800050a:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800050e:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000510:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8000514:	6421      	str	r1, [r4, #64]	@ 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8000516:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000518:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800051a:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800051c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000520:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8000522:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000526:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800052a:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800052c:	62e2      	str	r2, [r4, #44]	@ 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800052e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000532:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8000534:	6563      	str	r3, [r4, #84]	@ 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8000536:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000538:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800053c:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800053e:	6461      	str	r1, [r4, #68]	@ 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000540:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8000544:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8000548:	65a2      	str	r2, [r4, #88]	@ 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800054a:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800054c:	6321      	str	r1, [r4, #48]	@ 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800054e:	ea45 050c 	orr.w	r5, r5, ip
 8000552:	f402 6170 	and.w	r1, r2, #3840	@ 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000556:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800055a:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800055c:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800055e:	0212      	lsls	r2, r2, #8
 8000560:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8000564:	64a3      	str	r3, [r4, #72]	@ 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000566:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800056a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800056e:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8000570:	6363      	str	r3, [r4, #52]	@ 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000572:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000576:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000578:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800057c:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800057e:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000580:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000584:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000586:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800058a:	4313      	orrs	r3, r2
 800058c:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800058e:	65e6      	str	r6, [r4, #92]	@ 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000590:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000594:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000598:	020a      	lsls	r2, r1, #8
 800059a:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800059e:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80005a0:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80005a4:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80005a6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80005aa:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80005ac:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80005b0:	64e1      	str	r1, [r4, #76]	@ 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80005b2:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80005b4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80005b8:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80005ba:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80005bc:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80005be:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80005c2:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80005c4:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80005c8:	63a2      	str	r2, [r4, #56]	@ 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80005ca:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80005ce:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80005d2:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80005d4:	6521      	str	r1, [r4, #80]	@ 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80005d6:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80005d8:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80005dc:	6625      	str	r5, [r4, #96]	@ 0x60
 80005de:	6663      	str	r3, [r4, #100]	@ 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80005e0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80005e4:	63e1      	str	r1, [r4, #60]	@ 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80005e6:	021b      	lsls	r3, r3, #8
 80005e8:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80005ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80005f0:	430b      	orrs	r3, r1
 80005f2:	62a3      	str	r3, [r4, #40]	@ 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80005f4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	6163      	str	r3, [r4, #20]
}
 80005fc:	b008      	add	sp, #32
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f04f 31ff 	mov.w	r1, #4294967295
 8000604:	e768      	b.n	80004d8 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
 8000606:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800060a:	e7f7      	b.n	80005fc <FT5336_GetMultiTouchState+0x148>

0800060c <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800060c:	3018      	adds	r0, #24
 800060e:	f000 b84d 	b.w	80006ac <ft5336_gest_id>
 8000612:	bf00      	nop

08000614 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8000614:	2101      	movs	r1, #1
 8000616:	3018      	adds	r0, #24
 8000618:	f000 b8b4 	b.w	8000784 <ft5336_g_mode>

0800061c <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800061c:	2100      	movs	r1, #0
 800061e:	3018      	adds	r0, #24
 8000620:	f000 b8b0 	b.w	8000784 <ft5336_g_mode>

08000624 <FT5336_Init>:
{
 8000624:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
 8000626:	f890 5024 	ldrb.w	r5, [r0, #36]	@ 0x24
 800062a:	b98d      	cbnz	r5, 8000650 <FT5336_Init+0x2c>
    pObj->IO.Init();
 800062c:	4606      	mov	r6, r0
 800062e:	4604      	mov	r4, r0
 8000630:	f856 3b18 	ldr.w	r3, [r6], #24
 8000634:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8000636:	4629      	mov	r1, r5
 8000638:	4630      	mov	r0, r6
 800063a:	f000 f8a3 	bl	8000784 <ft5336_g_mode>
  if(ret != FT5336_OK)
 800063e:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8000640:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8000644:	bf18      	it	ne
 8000646:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8000648:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT5336_OK)
 800064c:	4240      	negs	r0, r0
}
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	2000      	movs	r0, #0
 8000652:	bd70      	pop	{r4, r5, r6, pc}

08000654 <FT5336_ClearIT>:
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
 8000654:	2000      	movs	r0, #0
 8000656:	4770      	bx	lr

08000658 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8000658:	b1c0      	cbz	r0, 800068c <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
 800065a:	890a      	ldrh	r2, [r1, #8]
{
 800065c:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
 800065e:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8000662:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8000664:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000668:	694a      	ldr	r2, [r1, #20]
 800066a:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800066e:	4909      	ldr	r1, [pc, #36]	@ (8000694 <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000670:	60c5      	str	r5, [r0, #12]
 8000672:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8000676:	4a08      	ldr	r2, [pc, #32]	@ (8000698 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
 8000678:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800067c:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 800067e:	b10b      	cbz	r3, 8000684 <FT5336_RegisterBusIO+0x2c>
}
 8000680:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
 8000682:	4718      	bx	r3
}
 8000684:	f04f 30ff 	mov.w	r0, #4294967295
 8000688:	bc30      	pop	{r4, r5}
 800068a:	4770      	bx	lr
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	080003d5 	.word	0x080003d5
 8000698:	080003e5 	.word	0x080003e5

0800069c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800069c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800069e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80006a2:	46a4      	mov	ip, r4
}
 80006a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80006a8:	4760      	bx	ip
 80006aa:	bf00      	nop

080006ac <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80006ac:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80006ae:	2301      	movs	r3, #1
{
 80006b0:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80006b2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80006b6:	4619      	mov	r1, r3
 80006b8:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
 80006ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80006be:	4760      	bx	ip

080006c0 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80006c0:	b538      	push	{r3, r4, r5, lr}
 80006c2:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80006c4:	2301      	movs	r3, #1
 80006c6:	2102      	movs	r1, #2
 80006c8:	4622      	mov	r2, r4
 80006ca:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80006ce:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
 80006d0:	b918      	cbnz	r0, 80006da <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80006d2:	7823      	ldrb	r3, [r4, #0]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80006da:	bd38      	pop	{r3, r4, r5, pc}

080006dc <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 80006dc:	b510      	push	{r4, lr}
 80006de:	460c      	mov	r4, r1
 80006e0:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80006e2:	2301      	movs	r3, #1
 80006e4:	2191      	movs	r1, #145	@ 0x91
{
 80006e6:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80006ea:	f10d 0207 	add.w	r2, sp, #7
 80006ee:	6804      	ldr	r4, [r0, #0]
 80006f0:	6880      	ldr	r0, [r0, #8]
 80006f2:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
 80006f4:	b002      	add	sp, #8
 80006f6:	bd10      	pop	{r4, pc}

080006f8 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 80006f8:	b510      	push	{r4, lr}
 80006fa:	460c      	mov	r4, r1
 80006fc:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80006fe:	2301      	movs	r3, #1
 8000700:	2192      	movs	r1, #146	@ 0x92
{
 8000702:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000706:	f10d 0207 	add.w	r2, sp, #7
 800070a:	6804      	ldr	r4, [r0, #0]
 800070c:	6880      	ldr	r0, [r0, #8]
 800070e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
 8000710:	b002      	add	sp, #8
 8000712:	bd10      	pop	{r4, pc}

08000714 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8000714:	b510      	push	{r4, lr}
 8000716:	460c      	mov	r4, r1
 8000718:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800071a:	2301      	movs	r3, #1
 800071c:	2193      	movs	r1, #147	@ 0x93
{
 800071e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000722:	f10d 0207 	add.w	r2, sp, #7
 8000726:	6804      	ldr	r4, [r0, #0]
 8000728:	6880      	ldr	r0, [r0, #8]
 800072a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
 800072c:	b002      	add	sp, #8
 800072e:	bd10      	pop	{r4, pc}

08000730 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8000730:	b510      	push	{r4, lr}
 8000732:	460c      	mov	r4, r1
 8000734:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000736:	2301      	movs	r3, #1
 8000738:	2194      	movs	r1, #148	@ 0x94
{
 800073a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800073e:	f10d 0207 	add.w	r2, sp, #7
 8000742:	6804      	ldr	r4, [r0, #0]
 8000744:	6880      	ldr	r0, [r0, #8]
 8000746:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
 8000748:	b002      	add	sp, #8
 800074a:	bd10      	pop	{r4, pc}

0800074c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800074c:	b510      	push	{r4, lr}
 800074e:	460c      	mov	r4, r1
 8000750:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000752:	2301      	movs	r3, #1
 8000754:	2195      	movs	r1, #149	@ 0x95
{
 8000756:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800075a:	f10d 0207 	add.w	r2, sp, #7
 800075e:	6804      	ldr	r4, [r0, #0]
 8000760:	6880      	ldr	r0, [r0, #8]
 8000762:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
 8000764:	b002      	add	sp, #8
 8000766:	bd10      	pop	{r4, pc}

08000768 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8000768:	b510      	push	{r4, lr}
 800076a:	460c      	mov	r4, r1
 800076c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800076e:	2301      	movs	r3, #1
 8000770:	2196      	movs	r1, #150	@ 0x96
{
 8000772:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000776:	f10d 0207 	add.w	r2, sp, #7
 800077a:	6804      	ldr	r4, [r0, #0]
 800077c:	6880      	ldr	r0, [r0, #8]
 800077e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
 8000780:	b002      	add	sp, #8
 8000782:	bd10      	pop	{r4, pc}

08000784 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8000784:	b510      	push	{r4, lr}
 8000786:	460c      	mov	r4, r1
 8000788:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800078a:	2301      	movs	r3, #1
 800078c:	21a4      	movs	r1, #164	@ 0xa4
{
 800078e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000792:	f10d 0207 	add.w	r2, sp, #7
 8000796:	6804      	ldr	r4, [r0, #0]
 8000798:	6880      	ldr	r0, [r0, #8]
 800079a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
 800079c:	b002      	add	sp, #8
 800079e:	bd10      	pop	{r4, pc}

080007a0 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80007a0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80007a2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 80007a6:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80007a8:	2301      	movs	r3, #1
 80007aa:	46a4      	mov	ip, r4
 80007ac:	21a8      	movs	r1, #168	@ 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 80007ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80007b2:	4760      	bx	ip

080007b4 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 80007b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b6:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 80007b8:	4c2a      	ldr	r4, [pc, #168]	@ (8000864 <MT48LC4M32B2_Init+0xb0>)
 80007ba:	2301      	movs	r3, #1
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80007bc:	2100      	movs	r1, #0
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80007be:	682a      	ldr	r2, [r5, #0]
{
 80007c0:	4607      	mov	r7, r0
  Command.ModeRegisterDefinition = 0;
 80007c2:	60e1      	str	r1, [r4, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007c4:	4621      	mov	r1, r4
  Command.AutoRefreshNumber      = 1;
 80007c6:	60a3      	str	r3, [r4, #8]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 80007c8:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d0:	f010 fe04 	bl	80113dc <HAL_SDRAM_SendCommand>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d142      	bne.n	800085e <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80007d8:	f00d fb68 	bl	800deac <HAL_GetTick>
 80007dc:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80007de:	f00d fb65 	bl	800deac <HAL_GetTick>
 80007e2:	4286      	cmp	r6, r0
 80007e4:	d0fb      	beq.n	80007de <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80007e6:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80007e8:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
 80007ea:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007ec:	491d      	ldr	r1, [pc, #116]	@ (8000864 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80007ee:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
 80007f0:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 80007f2:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007f4:	4638      	mov	r0, r7
 80007f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.AutoRefreshNumber      = 1;
 80007fa:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80007fc:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80007fe:	f010 fded 	bl	80113dc <HAL_SDRAM_SendCommand>
 8000802:	bb60      	cbnz	r0, 800085e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000804:	4917      	ldr	r1, [pc, #92]	@ (8000864 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
 8000806:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
 800080a:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800080c:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
 800080e:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
 8000812:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000814:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.AutoRefreshNumber      = 8;
 8000818:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800081a:	f010 fddf 	bl	80113dc <HAL_SDRAM_SendCommand>
 800081e:	b9f0      	cbnz	r0, 800085e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000820:	4910      	ldr	r1, [pc, #64]	@ (8000864 <MT48LC4M32B2_Init+0xb0>)
 8000822:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000824:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8000828:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 800082a:	696a      	ldr	r2, [r5, #20]
 800082c:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 800082e:	69aa      	ldr	r2, [r5, #24]
 8000830:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000832:	69ea      	ldr	r2, [r5, #28]
 8000834:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
 8000836:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8000838:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800083a:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
 800083c:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8000844:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000846:	f010 fdc9 	bl	80113dc <HAL_SDRAM_SendCommand>
 800084a:	b940      	cbnz	r0, 800085e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800084c:	68a9      	ldr	r1, [r5, #8]
 800084e:	4638      	mov	r0, r7
 8000850:	f010 fde4 	bl	801141c <HAL_SDRAM_ProgramRefreshRate>
 8000854:	3800      	subs	r0, #0
 8000856:	bf18      	it	ne
 8000858:	2001      	movne	r0, #1
 800085a:	4240      	negs	r0, r0
}
 800085c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
 800085e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000864:	240001a8 	.word	0x240001a8

08000868 <FLP_Draw_Rectangle>:

//=============================== FLP DRAW FUNCTIONS (used in touchscreen.c) ============================


void FLP_Draw_Rectangle (uint16_t* buffer, int x, int y, int width, int height, uint32_t color)
{
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9c08      	ldr	r4, [sp, #32]
	for (int row = y; row < y + height; row++)
 800086e:	2c00      	cmp	r4, #0
 8000870:	eb02 0604 	add.w	r6, r2, r4
 8000874:	dd43      	ble.n	80008fe <FLP_Draw_Rectangle+0x96>
 8000876:	2b00      	cmp	r3, #0
 8000878:	4605      	mov	r5, r0
	{
		for (int col = x; col < x + width; col++)
 800087a:	eb01 0003 	add.w	r0, r1, r3
 800087e:	dd3e      	ble.n	80008fe <FLP_Draw_Rectangle+0x96>
 8000880:	4288      	cmp	r0, r1
 8000882:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 8000886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000888:	bfcd      	iteet	gt
 800088a:	461f      	movgt	r7, r3
 800088c:	2701      	movle	r7, #1
 800088e:	f04f 0901 	movle.w	r9, #1
 8000892:	f04f 0900 	movgt.w	r9, #0
 8000896:	f027 0401 	bic.w	r4, r7, #1
 800089a:	ea4f 0857 	mov.w	r8, r7, lsr #1
 800089e:	2b01      	cmp	r3, #1
 80008a0:	bf08      	it	eq
 80008a2:	f049 0901 	orreq.w	r9, r9, #1
 80008a6:	fa1f fe80 	uxth.w	lr, r0
 80008aa:	440c      	add	r4, r1
 80008ac:	f007 0701 	and.w	r7, r7, #1
 80008b0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80008b4:	f1b9 0f00 	cmp.w	r9, #0
 80008b8:	bf18      	it	ne
 80008ba:	460c      	movne	r4, r1
 80008bc:	eb01 114c 	add.w	r1, r1, ip, lsl #5
 80008c0:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80008c4:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 80008c8:	f1b9 0f00 	cmp.w	r9, #0
 80008cc:	d10c      	bne.n	80008e8 <FLP_Draw_Rectangle+0x80>
 80008ce:	2000      	movs	r0, #0
 80008d0:	eb01 0a08 	add.w	sl, r1, r8
{
 80008d4:	460b      	mov	r3, r1
 80008d6:	f36e 000f 	bfi	r0, lr, #0, #16
 80008da:	f36e 401f 	bfi	r0, lr, #16, #16
		{
			buffer[col + row * SCREEN_WIDTH] = color;
 80008de:	f843 0b04 	str.w	r0, [r3], #4
		for (int col = x; col < x + width; col++)
 80008e2:	459a      	cmp	sl, r3
 80008e4:	d1fb      	bne.n	80008de <FLP_Draw_Rectangle+0x76>
 80008e6:	b167      	cbz	r7, 8000902 <FLP_Draw_Rectangle+0x9a>
	for (int row = y; row < y + height; row++)
 80008e8:	3201      	adds	r2, #1
			buffer[col + row * SCREEN_WIDTH] = color;
 80008ea:	eb0c 0304 	add.w	r3, ip, r4
	for (int row = y; row < y + height; row++)
 80008ee:	f501 7170 	add.w	r1, r1, #960	@ 0x3c0
			buffer[col + row * SCREEN_WIDTH] = color;
 80008f2:	f50c 7cf0 	add.w	ip, ip, #480	@ 0x1e0
	for (int row = y; row < y + height; row++)
 80008f6:	42b2      	cmp	r2, r6
			buffer[col + row * SCREEN_WIDTH] = color;
 80008f8:	f825 e013 	strh.w	lr, [r5, r3, lsl #1]
	for (int row = y; row < y + height; row++)
 80008fc:	dbe4      	blt.n	80008c8 <FLP_Draw_Rectangle+0x60>
		}
	}
}
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int row = y; row < y + height; row++)
 8000902:	3201      	adds	r2, #1
 8000904:	f50c 7cf0 	add.w	ip, ip, #480	@ 0x1e0
 8000908:	f501 7170 	add.w	r1, r1, #960	@ 0x3c0
 800090c:	42b2      	cmp	r2, r6
 800090e:	dbde      	blt.n	80008ce <FLP_Draw_Rectangle+0x66>
}
 8000910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000914 <FLP_Draw_Box>:

void FLP_Draw_Box (uint16_t* buffer, int x, int y, int border, int height, int width, uint32_t color)
{
 8000914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000918:	b083      	sub	sp, #12
 800091a:	469a      	mov	sl, r3
 800091c:	4693      	mov	fp, r2
 800091e:	460e      	mov	r6, r1
	for (int row = y; row < y + height; row++)
 8000920:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000922:	2b00      	cmp	r3, #0
 8000924:	eb02 0503 	add.w	r5, r2, r3
 8000928:	dd4c      	ble.n	80009c4 <FLP_Draw_Box+0xb0>
		for (int col = x; col < x + width; col++)
 800092a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800092c:	2b00      	cmp	r3, #0
 800092e:	eb01 0803 	add.w	r8, r1, r3
 8000932:	dd47      	ble.n	80009c4 <FLP_Draw_Box+0xb0>
 8000934:	461f      	mov	r7, r3
 8000936:	4541      	cmp	r1, r8
 8000938:	bfa8      	it	ge
 800093a:	2701      	movge	r7, #1
 800093c:	2b01      	cmp	r3, #1
 800093e:	bf18      	it	ne
 8000940:	4541      	cmpne	r1, r8
 8000942:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 8000946:	f027 0401 	bic.w	r4, r7, #1
 800094a:	ea4f 0957 	mov.w	r9, r7, lsr #1
 800094e:	f007 0701 	and.w	r7, r7, #1
 8000952:	eb01 1e43 	add.w	lr, r1, r3, lsl #5
 8000956:	bfac      	ite	ge
 8000958:	f04f 0801 	movge.w	r8, #1
 800095c:	f04f 0800 	movlt.w	r8, #0
 8000960:	440c      	add	r4, r1
 8000962:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000966:	46bc      	mov	ip, r7
 8000968:	bfa8      	it	ge
 800096a:	460c      	movge	r4, r1
 800096c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800096e:	015b      	lsls	r3, r3, #5
 8000970:	f8cd 8004 	str.w	r8, [sp, #4]
 8000974:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8000978:	46c8      	mov	r8, r9
 800097a:	b289      	uxth	r1, r1
 800097c:	4637      	mov	r7, r6
 800097e:	46e1      	mov	r9, ip
 8000980:	9e01      	ldr	r6, [sp, #4]
 8000982:	b99e      	cbnz	r6, 80009ac <FLP_Draw_Box+0x98>
 8000984:	4646      	mov	r6, r8
 8000986:	9400      	str	r4, [sp, #0]
 8000988:	f04f 0c00 	mov.w	ip, #0
 800098c:	eb0e 0806 	add.w	r8, lr, r6
{
 8000990:	4674      	mov	r4, lr
 8000992:	f361 0c0f 	bfi	ip, r1, #0, #16
 8000996:	f361 4c1f 	bfi	ip, r1, #16, #16
			buffer[col + row * SCREEN_WIDTH] = color;
 800099a:	f844 cb04 	str.w	ip, [r4], #4
		for (int col = x; col < x + width; col++)
 800099e:	45a0      	cmp	r8, r4
 80009a0:	d1fb      	bne.n	800099a <FLP_Draw_Box+0x86>
 80009a2:	f1b9 0f00 	cmp.w	r9, #0
 80009a6:	d03b      	beq.n	8000a20 <FLP_Draw_Box+0x10c>
 80009a8:	9c00      	ldr	r4, [sp, #0]
 80009aa:	46b0      	mov	r8, r6
	for (int row = y; row < y + height; row++)
 80009ac:	3201      	adds	r2, #1
			buffer[col + row * SCREEN_WIDTH] = color;
 80009ae:	eb03 0c04 	add.w	ip, r3, r4
	for (int row = y; row < y + height; row++)
 80009b2:	f50e 7e70 	add.w	lr, lr, #960	@ 0x3c0
 80009b6:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80009ba:	42aa      	cmp	r2, r5
			buffer[col + row * SCREEN_WIDTH] = color;
 80009bc:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
	for (int row = y; row < y + height; row++)
 80009c0:	dbde      	blt.n	8000980 <FLP_Draw_Box+0x6c>
 80009c2:	463e      	mov	r6, r7
	FLP_Draw_Rectangle (buffer, x, y, height, width, color);
	FLP_Draw_Rectangle (buffer, x + border / 2, y + border / 2, height - border, width - border, 0x0000);
 80009c4:	f1ba 0f00 	cmp.w	sl, #0
 80009c8:	4653      	mov	r3, sl
 80009ca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80009cc:	bfb8      	it	lt
 80009ce:	f10a 0301 	addlt.w	r3, sl, #1
 80009d2:	eba2 050a 	sub.w	r5, r2, sl
 80009d6:	eb0b 0b63 	add.w	fp, fp, r3, asr #1
 80009da:	eb06 0663 	add.w	r6, r6, r3, asr #1
 80009de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80009e0:	eba3 030a 	sub.w	r3, r3, sl
	for (int row = y; row < y + height; row++)
 80009e4:	445b      	add	r3, fp
 80009e6:	459b      	cmp	fp, r3
 80009e8:	da17      	bge.n	8000a1a <FLP_Draw_Box+0x106>
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	dd15      	ble.n	8000a1a <FLP_Draw_Box+0x106>
 80009ee:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 80009f2:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
			buffer[col + row * SCREEN_WIDTH] = color;
 80009f6:	006d      	lsls	r5, r5, #1
 80009f8:	eb06 134b 	add.w	r3, r6, fp, lsl #5
 80009fc:	eb06 1642 	add.w	r6, r6, r2, lsl #5
 8000a00:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a04:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	462a      	mov	r2, r5
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f011 f8c9 	bl	8011ba4 <memset>
	for (int row = y; row < y + height; row++)
 8000a12:	f500 7370 	add.w	r3, r0, #960	@ 0x3c0
 8000a16:	429e      	cmp	r6, r3
 8000a18:	d1f6      	bne.n	8000a08 <FLP_Draw_Box+0xf4>
}
 8000a1a:	b003      	add	sp, #12
 8000a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int row = y; row < y + height; row++)
 8000a20:	3201      	adds	r2, #1
 8000a22:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8000a26:	f50e 7e70 	add.w	lr, lr, #960	@ 0x3c0
 8000a2a:	42aa      	cmp	r2, r5
 8000a2c:	dbac      	blt.n	8000988 <FLP_Draw_Box+0x74>
 8000a2e:	e7c8      	b.n	80009c2 <FLP_Draw_Box+0xae>

08000a30 <FLP_Draw_Symbol>:

void FLP_Draw_Symbol (uint16_t* buffer, int x, int y, uint32_t color, int intensity)
{
 8000a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	4690      	mov	r8, r2
 8000a38:	4699      	mov	r9, r3
    offset = 0;
 8000a3a:	2200      	movs	r2, #0
{
 8000a3c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
    if (index >= sizeof(ascii_map) - 1) index = sizeof(ascii_map) - 2;
 8000a3e:	f640 4af2 	movw	sl, #3314	@ 0xcf2
    offset = 0;
 8000a42:	4ba4      	ldr	r3, [pc, #656]	@ (8000cd4 <FLP_Draw_Symbol+0x2a4>)
{
 8000a44:	4606      	mov	r6, r0
    int index = (intensity * (sizeof(ascii_map) - 2)) / 255;
 8000a46:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
    const char ascii_map[] = " .,-~:;=/*#$@";
 8000a4a:	4ca3      	ldr	r4, [pc, #652]	@ (8000cd8 <FLP_Draw_Symbol+0x2a8>)
{
 8000a4c:	460f      	mov	r7, r1
    const char ascii_map[] = " .,-~:;=/*#$@";
 8000a4e:	46ec      	mov	ip, sp
    offset = 0;
 8000a50:	601a      	str	r2, [r3, #0]
    if (index >= sizeof(ascii_map) - 1) index = sizeof(ascii_map) - 2;
 8000a52:	ebba 0f8e 	cmp.w	sl, lr, lsl #2
    const char ascii_map[] = " .,-~:;=/*#$@";
 8000a56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a5a:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000a5e:	f8ac 3000 	strh.w	r3, [ip]
    if (index >= sizeof(ascii_map) - 1) index = sizeof(ascii_map) - 2;
 8000a62:	d208      	bcs.n	8000a76 <FLP_Draw_Symbol+0x46>
        case '=': copy_equals (buffer, x, y, color); break;
        case '/': copy_slash (buffer, x, y, color); break;
        case '*': copy_star (buffer, x, y, color); break;
        case '#': copy_hashtag (buffer, x, y, color); break;
        case '$': copy_dollar (buffer, x, y, color); break;
        case '@': copy_at (buffer, x, y, color); break;
 8000a64:	464b      	mov	r3, r9
 8000a66:	4642      	mov	r2, r8
 8000a68:	4639      	mov	r1, r7
 8000a6a:	4630      	mov	r0, r6
        default: break;
    }
}
 8000a6c:	b004      	add	sp, #16
 8000a6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '@': copy_at (buffer, x, y, color); break;
 8000a72:	f001 b9bb 	b.w	8001dec <copy_at>
    int index = (intensity * (sizeof(ascii_map) - 2)) / 255;
 8000a76:	4b99      	ldr	r3, [pc, #612]	@ (8000cdc <FLP_Draw_Symbol+0x2ac>)
 8000a78:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8000a7c:	fba3 3505 	umull	r3, r5, r3, r5
    return ascii_map[index];
 8000a80:	ab04      	add	r3, sp, #16
 8000a82:	eb03 15d5 	add.w	r5, r3, r5, lsr #7
 8000a86:	f815 3c10 	ldrb.w	r3, [r5, #-16]
    switch(c)
 8000a8a:	3b23      	subs	r3, #35	@ 0x23
 8000a8c:	2b5b      	cmp	r3, #91	@ 0x5b
 8000a8e:	f200 80bb 	bhi.w	8000c08 <FLP_Draw_Symbol+0x1d8>
 8000a92:	a201      	add	r2, pc, #4	@ (adr r2, 8000a98 <FLP_Draw_Symbol+0x68>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000c0f 	.word	0x08000c0f
 8000a9c:	08000c21 	.word	0x08000c21
 8000aa0:	08000c09 	.word	0x08000c09
 8000aa4:	08000c09 	.word	0x08000c09
 8000aa8:	08000c09 	.word	0x08000c09
 8000aac:	08000c09 	.word	0x08000c09
 8000ab0:	08000c09 	.word	0x08000c09
 8000ab4:	08000c33 	.word	0x08000c33
 8000ab8:	08000c09 	.word	0x08000c09
 8000abc:	08000c45 	.word	0x08000c45
 8000ac0:	08000c57 	.word	0x08000c57
 8000ac4:	08000c69 	.word	0x08000c69
 8000ac8:	08000c7b 	.word	0x08000c7b
 8000acc:	08000c09 	.word	0x08000c09
 8000ad0:	08000c09 	.word	0x08000c09
 8000ad4:	08000c09 	.word	0x08000c09
 8000ad8:	08000c09 	.word	0x08000c09
 8000adc:	08000c09 	.word	0x08000c09
 8000ae0:	08000c09 	.word	0x08000c09
 8000ae4:	08000c09 	.word	0x08000c09
 8000ae8:	08000c09 	.word	0x08000c09
 8000aec:	08000c09 	.word	0x08000c09
 8000af0:	08000c09 	.word	0x08000c09
 8000af4:	08000c8d 	.word	0x08000c8d
 8000af8:	08000c9f 	.word	0x08000c9f
 8000afc:	08000c09 	.word	0x08000c09
 8000b00:	08000cb1 	.word	0x08000cb1
 8000b04:	08000c09 	.word	0x08000c09
 8000b08:	08000c09 	.word	0x08000c09
 8000b0c:	08000a65 	.word	0x08000a65
 8000b10:	08000c09 	.word	0x08000c09
 8000b14:	08000c09 	.word	0x08000c09
 8000b18:	08000c09 	.word	0x08000c09
 8000b1c:	08000c09 	.word	0x08000c09
 8000b20:	08000c09 	.word	0x08000c09
 8000b24:	08000c09 	.word	0x08000c09
 8000b28:	08000c09 	.word	0x08000c09
 8000b2c:	08000c09 	.word	0x08000c09
 8000b30:	08000c09 	.word	0x08000c09
 8000b34:	08000c09 	.word	0x08000c09
 8000b38:	08000c09 	.word	0x08000c09
 8000b3c:	08000c09 	.word	0x08000c09
 8000b40:	08000c09 	.word	0x08000c09
 8000b44:	08000c09 	.word	0x08000c09
 8000b48:	08000c09 	.word	0x08000c09
 8000b4c:	08000c09 	.word	0x08000c09
 8000b50:	08000c09 	.word	0x08000c09
 8000b54:	08000c09 	.word	0x08000c09
 8000b58:	08000c09 	.word	0x08000c09
 8000b5c:	08000c09 	.word	0x08000c09
 8000b60:	08000c09 	.word	0x08000c09
 8000b64:	08000c09 	.word	0x08000c09
 8000b68:	08000c09 	.word	0x08000c09
 8000b6c:	08000c09 	.word	0x08000c09
 8000b70:	08000c09 	.word	0x08000c09
 8000b74:	08000c09 	.word	0x08000c09
 8000b78:	08000c09 	.word	0x08000c09
 8000b7c:	08000c09 	.word	0x08000c09
 8000b80:	08000c09 	.word	0x08000c09
 8000b84:	08000c09 	.word	0x08000c09
 8000b88:	08000c09 	.word	0x08000c09
 8000b8c:	08000c09 	.word	0x08000c09
 8000b90:	08000c09 	.word	0x08000c09
 8000b94:	08000c09 	.word	0x08000c09
 8000b98:	08000c09 	.word	0x08000c09
 8000b9c:	08000c09 	.word	0x08000c09
 8000ba0:	08000c09 	.word	0x08000c09
 8000ba4:	08000c09 	.word	0x08000c09
 8000ba8:	08000c09 	.word	0x08000c09
 8000bac:	08000c09 	.word	0x08000c09
 8000bb0:	08000c09 	.word	0x08000c09
 8000bb4:	08000c09 	.word	0x08000c09
 8000bb8:	08000c09 	.word	0x08000c09
 8000bbc:	08000c09 	.word	0x08000c09
 8000bc0:	08000c09 	.word	0x08000c09
 8000bc4:	08000c09 	.word	0x08000c09
 8000bc8:	08000c09 	.word	0x08000c09
 8000bcc:	08000c09 	.word	0x08000c09
 8000bd0:	08000c09 	.word	0x08000c09
 8000bd4:	08000c09 	.word	0x08000c09
 8000bd8:	08000c09 	.word	0x08000c09
 8000bdc:	08000c09 	.word	0x08000c09
 8000be0:	08000c09 	.word	0x08000c09
 8000be4:	08000c09 	.word	0x08000c09
 8000be8:	08000c09 	.word	0x08000c09
 8000bec:	08000c09 	.word	0x08000c09
 8000bf0:	08000c09 	.word	0x08000c09
 8000bf4:	08000c09 	.word	0x08000c09
 8000bf8:	08000c09 	.word	0x08000c09
 8000bfc:	08000c09 	.word	0x08000c09
 8000c00:	08000c09 	.word	0x08000c09
 8000c04:	08000cc3 	.word	0x08000cc3
}
 8000c08:	b004      	add	sp, #16
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        case '#': copy_hashtag (buffer, x, y, color); break;
 8000c0e:	464b      	mov	r3, r9
 8000c10:	4642      	mov	r2, r8
 8000c12:	4639      	mov	r1, r7
 8000c14:	4630      	mov	r0, r6
}
 8000c16:	b004      	add	sp, #16
 8000c18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '#': copy_hashtag (buffer, x, y, color); break;
 8000c1c:	f001 b86c 	b.w	8001cf8 <copy_hashtag>
        case '$': copy_dollar (buffer, x, y, color); break;
 8000c20:	464b      	mov	r3, r9
 8000c22:	4642      	mov	r2, r8
 8000c24:	4639      	mov	r1, r7
 8000c26:	4630      	mov	r0, r6
}
 8000c28:	b004      	add	sp, #16
 8000c2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '$': copy_dollar (buffer, x, y, color); break;
 8000c2e:	f001 be4d 	b.w	80028cc <copy_dollar>
        case '*': copy_star (buffer, x, y, color); break;
 8000c32:	464b      	mov	r3, r9
 8000c34:	4642      	mov	r2, r8
 8000c36:	4639      	mov	r1, r7
 8000c38:	4630      	mov	r0, r6
}
 8000c3a:	b004      	add	sp, #16
 8000c3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '*': copy_star (buffer, x, y, color); break;
 8000c40:	f002 b998 	b.w	8002f74 <copy_star>
        case ',': copy_comma (buffer, x, y, color); break;
 8000c44:	464b      	mov	r3, r9
 8000c46:	4642      	mov	r2, r8
 8000c48:	4639      	mov	r1, r7
 8000c4a:	4630      	mov	r0, r6
}
 8000c4c:	b004      	add	sp, #16
 8000c4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case ',': copy_comma (buffer, x, y, color); break;
 8000c52:	f000 bc8b 	b.w	800156c <copy_comma>
        case '-': copy_dash (buffer, x, y, color); break;
 8000c56:	464b      	mov	r3, r9
 8000c58:	4642      	mov	r2, r8
 8000c5a:	4639      	mov	r1, r7
 8000c5c:	4630      	mov	r0, r6
}
 8000c5e:	b004      	add	sp, #16
 8000c60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '-': copy_dash (buffer, x, y, color); break;
 8000c64:	f000 bf06 	b.w	8001a74 <copy_dash>
        case '.': copy_dot (buffer, x, y, color); break;
 8000c68:	464b      	mov	r3, r9
 8000c6a:	4642      	mov	r2, r8
 8000c6c:	4639      	mov	r1, r7
 8000c6e:	4630      	mov	r0, r6
}
 8000c70:	b004      	add	sp, #16
 8000c72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '.': copy_dot (buffer, x, y, color); break;
 8000c76:	f000 bb6b 	b.w	8001350 <copy_dot>
        case '/': copy_slash (buffer, x, y, color); break;
 8000c7a:	464b      	mov	r3, r9
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	4639      	mov	r1, r7
 8000c80:	4630      	mov	r0, r6
}
 8000c82:	b004      	add	sp, #16
 8000c84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '/': copy_slash (buffer, x, y, color); break;
 8000c88:	f002 b8ac 	b.w	8002de4 <copy_slash>
        case ':': copy_colon (buffer, x, y, color); break;
 8000c8c:	464b      	mov	r3, r9
 8000c8e:	4642      	mov	r2, r8
 8000c90:	4639      	mov	r1, r7
 8000c92:	4630      	mov	r0, r6
}
 8000c94:	b004      	add	sp, #16
 8000c96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case ':': copy_colon (buffer, x, y, color); break;
 8000c9a:	f002 bc8b 	b.w	80035b4 <copy_colon>
        case ';': copy_semicolon (buffer, x, y, color); break;
 8000c9e:	464b      	mov	r3, r9
 8000ca0:	4642      	mov	r2, r8
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	4630      	mov	r0, r6
}
 8000ca6:	b004      	add	sp, #16
 8000ca8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case ';': copy_semicolon (buffer, x, y, color); break;
 8000cac:	f002 bb0a 	b.w	80032c4 <copy_semicolon>
        case '=': copy_equals (buffer, x, y, color); break;
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	4630      	mov	r0, r6
}
 8000cb8:	b004      	add	sp, #16
 8000cba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '=': copy_equals (buffer, x, y, color); break;
 8000cbe:	f001 bfcb 	b.w	8002c58 <copy_equals>
        case '~': copy_tilde (buffer, x, y, color); break;
 8000cc2:	464b      	mov	r3, r9
 8000cc4:	4642      	mov	r2, r8
 8000cc6:	4639      	mov	r1, r7
 8000cc8:	4630      	mov	r0, r6
}
 8000cca:	b004      	add	sp, #16
 8000ccc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case '~': copy_tilde (buffer, x, y, color); break;
 8000cd0:	f002 ba50 	b.w	8003174 <copy_tilde>
 8000cd4:	240001b8 	.word	0x240001b8
 8000cd8:	08013038 	.word	0x08013038
 8000cdc:	80808081 	.word	0x80808081

08000ce0 <FLP_Draw_String>:


void FLP_Draw_String (uint16_t* buffer, char* string, int x, int y, uint32_t color)
{
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	4699      	mov	r9, r3
    offset = 0;
 8000ce6:	4eae      	ldr	r6, [pc, #696]	@ (8000fa0 <FLP_Draw_String+0x2c0>)
 8000ce8:	2300      	movs	r3, #0
{
 8000cea:	f8dd a020 	ldr.w	sl, [sp, #32]
    offset = 0;
 8000cee:	6033      	str	r3, [r6, #0]
    char c;
    int i = 0;
    
    while ((c = string[i]) != '\0')
 8000cf0:	780c      	ldrb	r4, [r1, #0]
 8000cf2:	2c00      	cmp	r4, #0
 8000cf4:	d063      	beq.n	8000dbe <FLP_Draw_String+0xde>
 8000cf6:	460d      	mov	r5, r1
 8000cf8:	4607      	mov	r7, r0
 8000cfa:	4690      	mov	r8, r2
    {
        switch (c)
 8000cfc:	3c2c      	subs	r4, #44	@ 0x2c
 8000cfe:	2c4e      	cmp	r4, #78	@ 0x4e
 8000d00:	d857      	bhi.n	8000db2 <FLP_Draw_String+0xd2>
 8000d02:	e8df f014 	tbh	[pc, r4, lsl #1]
 8000d06:	01e5      	.short	0x01e5
 8000d08:	01f40056 	.word	0x01f40056
 8000d0c:	02030056 	.word	0x02030056
 8000d10:	02210212 	.word	0x02210212
 8000d14:	023f0230 	.word	0x023f0230
 8000d18:	025d024e 	.word	0x025d024e
 8000d1c:	027b026c 	.word	0x027b026c
 8000d20:	005601d6 	.word	0x005601d6
 8000d24:	00560056 	.word	0x00560056
 8000d28:	00560056 	.word	0x00560056
 8000d2c:	00560056 	.word	0x00560056
 8000d30:	01c7004f 	.word	0x01c7004f
 8000d34:	01a901b8 	.word	0x01a901b8
 8000d38:	018b019a 	.word	0x018b019a
 8000d3c:	016d017c 	.word	0x016d017c
 8000d40:	014f015e 	.word	0x014f015e
 8000d44:	012e013d 	.word	0x012e013d
 8000d48:	0110011f 	.word	0x0110011f
 8000d4c:	00f20101 	.word	0x00f20101
 8000d50:	00d400e3 	.word	0x00d400e3
 8000d54:	00b600c5 	.word	0x00b600c5
 8000d58:	009800a7 	.word	0x009800a7
 8000d5c:	007a0089 	.word	0x007a0089
 8000d60:	005e006c 	.word	0x005e006c
 8000d64:	00560056 	.word	0x00560056
 8000d68:	00560056 	.word	0x00560056
 8000d6c:	00560056 	.word	0x00560056
 8000d70:	01c7004f 	.word	0x01c7004f
 8000d74:	01a901b8 	.word	0x01a901b8
 8000d78:	018b019a 	.word	0x018b019a
 8000d7c:	016d017c 	.word	0x016d017c
 8000d80:	014f015e 	.word	0x014f015e
 8000d84:	012e013d 	.word	0x012e013d
 8000d88:	0110011f 	.word	0x0110011f
 8000d8c:	00f20101 	.word	0x00f20101
 8000d90:	00d400e3 	.word	0x00d400e3
 8000d94:	00b600c5 	.word	0x00b600c5
 8000d98:	009800a7 	.word	0x009800a7
 8000d9c:	007a0089 	.word	0x007a0089
 8000da0:	005e006c 	.word	0x005e006c
        {
            case 'A': copy_A (buffer, x, y, color); break;
 8000da4:	4653      	mov	r3, sl
 8000da6:	464a      	mov	r2, r9
 8000da8:	4641      	mov	r1, r8
 8000daa:	4638      	mov	r0, r7
 8000dac:	f002 fcc0 	bl	8003730 <copy_A>
            case '.': copy_dot (buffer, x, y, color); break;
            case ',': copy_comma (buffer, x, y, color); break;
            default: break;
        }
        
        offset += 7;  // Move to next character position
 8000db0:	6833      	ldr	r3, [r6, #0]
 8000db2:	3307      	adds	r3, #7
 8000db4:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000db6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	d19e      	bne.n	8000cfc <FLP_Draw_String+0x1c>
        i++;          // Move to next character in string
    }
}
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            case 'Z': copy_Z (buffer, x, y, color); break;
 8000dc2:	4653      	mov	r3, sl
 8000dc4:	464a      	mov	r2, r9
 8000dc6:	4641      	mov	r1, r8
 8000dc8:	4638      	mov	r0, r7
 8000dca:	f008 fb97 	bl	80094fc <copy_Z>
        offset += 7;  // Move to next character position
 8000dce:	6833      	ldr	r3, [r6, #0]
 8000dd0:	3307      	adds	r3, #7
 8000dd2:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000dd4:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d18f      	bne.n	8000cfc <FLP_Draw_String+0x1c>
 8000ddc:	e7ef      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'Y': copy_Y (buffer, x, y, color); break;
 8000dde:	4653      	mov	r3, sl
 8000de0:	464a      	mov	r2, r9
 8000de2:	4641      	mov	r1, r8
 8000de4:	4638      	mov	r0, r7
 8000de6:	f008 f935 	bl	8009054 <copy_Y>
        offset += 7;  // Move to next character position
 8000dea:	6833      	ldr	r3, [r6, #0]
 8000dec:	3307      	adds	r3, #7
 8000dee:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000df0:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000df4:	2c00      	cmp	r4, #0
 8000df6:	d181      	bne.n	8000cfc <FLP_Draw_String+0x1c>
 8000df8:	e7e1      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'X': copy_X (buffer, x, y, color); break;
 8000dfa:	4653      	mov	r3, sl
 8000dfc:	464a      	mov	r2, r9
 8000dfe:	4641      	mov	r1, r8
 8000e00:	4638      	mov	r0, r7
 8000e02:	f007 fd37 	bl	8008874 <copy_X>
        offset += 7;  // Move to next character position
 8000e06:	6833      	ldr	r3, [r6, #0]
 8000e08:	3307      	adds	r3, #7
 8000e0a:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000e0c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	f47f af73 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000e16:	e7d2      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'W': copy_W (buffer, x, y, color); break;
 8000e18:	4653      	mov	r3, sl
 8000e1a:	464a      	mov	r2, r9
 8000e1c:	4641      	mov	r1, r8
 8000e1e:	4638      	mov	r0, r7
 8000e20:	f007 fae0 	bl	80083e4 <copy_W>
        offset += 7;  // Move to next character position
 8000e24:	6833      	ldr	r3, [r6, #0]
 8000e26:	3307      	adds	r3, #7
 8000e28:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000e2a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000e2e:	2c00      	cmp	r4, #0
 8000e30:	f47f af64 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000e34:	e7c3      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'V': copy_V (buffer, x, y, color); break;
 8000e36:	4653      	mov	r3, sl
 8000e38:	464a      	mov	r2, r9
 8000e3a:	4641      	mov	r1, r8
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	f007 f8c5 	bl	8007fcc <copy_V>
        offset += 7;  // Move to next character position
 8000e42:	6833      	ldr	r3, [r6, #0]
 8000e44:	3307      	adds	r3, #7
 8000e46:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000e48:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	f47f af55 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000e52:	e7b4      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'U': copy_U (buffer, x, y, color); break;
 8000e54:	4653      	mov	r3, sl
 8000e56:	464a      	mov	r2, r9
 8000e58:	4641      	mov	r1, r8
 8000e5a:	4638      	mov	r0, r7
 8000e5c:	f006 ff0a 	bl	8007c74 <copy_U>
        offset += 7;  // Move to next character position
 8000e60:	6833      	ldr	r3, [r6, #0]
 8000e62:	3307      	adds	r3, #7
 8000e64:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000e66:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000e6a:	2c00      	cmp	r4, #0
 8000e6c:	f47f af46 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000e70:	e7a5      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'T': copy_T (buffer, x, y, color); break;
 8000e72:	4653      	mov	r3, sl
 8000e74:	464a      	mov	r2, r9
 8000e76:	4641      	mov	r1, r8
 8000e78:	4638      	mov	r0, r7
 8000e7a:	f006 fd3f 	bl	80078fc <copy_T>
        offset += 7;  // Move to next character position
 8000e7e:	6833      	ldr	r3, [r6, #0]
 8000e80:	3307      	adds	r3, #7
 8000e82:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000e84:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000e88:	2c00      	cmp	r4, #0
 8000e8a:	f47f af37 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000e8e:	e796      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'S': copy_S (buffer, x, y, color); break;
 8000e90:	4653      	mov	r3, sl
 8000e92:	464a      	mov	r2, r9
 8000e94:	4641      	mov	r1, r8
 8000e96:	4638      	mov	r0, r7
 8000e98:	f006 fbbe 	bl	8007618 <copy_S>
        offset += 7;  // Move to next character position
 8000e9c:	6833      	ldr	r3, [r6, #0]
 8000e9e:	3307      	adds	r3, #7
 8000ea0:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000ea2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000ea6:	2c00      	cmp	r4, #0
 8000ea8:	f47f af28 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000eac:	e787      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'R': copy_R (buffer, x, y, color); break;
 8000eae:	4653      	mov	r3, sl
 8000eb0:	464a      	mov	r2, r9
 8000eb2:	4641      	mov	r1, r8
 8000eb4:	4638      	mov	r0, r7
 8000eb6:	f006 f9b9 	bl	800722c <copy_R>
        offset += 7;  // Move to next character position
 8000eba:	6833      	ldr	r3, [r6, #0]
 8000ebc:	3307      	adds	r3, #7
 8000ebe:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000ec0:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000ec4:	2c00      	cmp	r4, #0
 8000ec6:	f47f af19 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000eca:	e778      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'Q': copy_Q (buffer, x, y, color); break;
 8000ecc:	4653      	mov	r3, sl
 8000ece:	464a      	mov	r2, r9
 8000ed0:	4641      	mov	r1, r8
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	f005 ff9a 	bl	8006e0c <copy_Q>
        offset += 7;  // Move to next character position
 8000ed8:	6833      	ldr	r3, [r6, #0]
 8000eda:	3307      	adds	r3, #7
 8000edc:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000ede:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	f47f af0a 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000ee8:	e769      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'P': copy_P (buffer, x, y, color); break;
 8000eea:	4653      	mov	r3, sl
 8000eec:	464a      	mov	r2, r9
 8000eee:	4641      	mov	r1, r8
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	f005 fde3 	bl	8006abc <copy_P>
        offset += 7;  // Move to next character position
 8000ef6:	6833      	ldr	r3, [r6, #0]
 8000ef8:	3307      	adds	r3, #7
 8000efa:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000efc:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f00:	2c00      	cmp	r4, #0
 8000f02:	f47f aefb 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000f06:	e75a      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'O': copy_O (buffer, x, y, color); break;
 8000f08:	4653      	mov	r3, sl
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	4641      	mov	r1, r8
 8000f0e:	4638      	mov	r0, r7
 8000f10:	f005 fbf4 	bl	80066fc <copy_O>
        offset += 7;  // Move to next character position
 8000f14:	6833      	ldr	r3, [r6, #0]
 8000f16:	3307      	adds	r3, #7
 8000f18:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f1a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f1e:	2c00      	cmp	r4, #0
 8000f20:	f47f aeec 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000f24:	e74b      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'N': copy_N (buffer, x, y, color); break;
 8000f26:	4653      	mov	r3, sl
 8000f28:	464a      	mov	r2, r9
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	f005 f9b7 	bl	80062a0 <copy_N>
        offset += 7;  // Move to next character position
 8000f32:	6833      	ldr	r3, [r6, #0]
 8000f34:	3307      	adds	r3, #7
 8000f36:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f38:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f3c:	2c00      	cmp	r4, #0
 8000f3e:	f47f aedd 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000f42:	e73c      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'M': copy_M (buffer, x, y, color); break;
 8000f44:	4653      	mov	r3, sl
 8000f46:	464a      	mov	r2, r9
 8000f48:	4641      	mov	r1, r8
 8000f4a:	4638      	mov	r0, r7
 8000f4c:	f004 ff68 	bl	8005e20 <copy_M>
        offset += 7;  // Move to next character position
 8000f50:	6833      	ldr	r3, [r6, #0]
 8000f52:	3307      	adds	r3, #7
 8000f54:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f56:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	f47f aece 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000f60:	e72d      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'L': copy_L (buffer, x, y, color); break;
 8000f62:	4653      	mov	r3, sl
 8000f64:	464a      	mov	r2, r9
 8000f66:	4641      	mov	r1, r8
 8000f68:	4638      	mov	r0, r7
 8000f6a:	f004 fe5d 	bl	8005c28 <copy_L>
        offset += 7;  // Move to next character position
 8000f6e:	6833      	ldr	r3, [r6, #0]
 8000f70:	3307      	adds	r3, #7
 8000f72:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f74:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f78:	2c00      	cmp	r4, #0
 8000f7a:	f47f aebf 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000f7e:	e71e      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'K': copy_K (buffer, x, y, color); break;
 8000f80:	4653      	mov	r3, sl
 8000f82:	464a      	mov	r2, r9
 8000f84:	4641      	mov	r1, r8
 8000f86:	4638      	mov	r0, r7
 8000f88:	f004 fcc4 	bl	8005914 <copy_K>
        offset += 7;  // Move to next character position
 8000f8c:	6833      	ldr	r3, [r6, #0]
 8000f8e:	3307      	adds	r3, #7
 8000f90:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000f92:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000f96:	2c00      	cmp	r4, #0
 8000f98:	f47f aeb0 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000f9c:	e70f      	b.n	8000dbe <FLP_Draw_String+0xde>
 8000f9e:	bf00      	nop
 8000fa0:	240001b8 	.word	0x240001b8
            case 'J': copy_J (buffer, x, y, color); break;
 8000fa4:	4653      	mov	r3, sl
 8000fa6:	464a      	mov	r2, r9
 8000fa8:	4641      	mov	r1, r8
 8000faa:	4638      	mov	r0, r7
 8000fac:	f004 fb56 	bl	800565c <copy_J>
        offset += 7;  // Move to next character position
 8000fb0:	6833      	ldr	r3, [r6, #0]
 8000fb2:	3307      	adds	r3, #7
 8000fb4:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000fb6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000fba:	2c00      	cmp	r4, #0
 8000fbc:	f47f ae9e 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000fc0:	e6fd      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'I': copy_I (buffer, x, y, color); break;
 8000fc2:	4653      	mov	r3, sl
 8000fc4:	464a      	mov	r2, r9
 8000fc6:	4641      	mov	r1, r8
 8000fc8:	4638      	mov	r0, r7
 8000fca:	f004 f93f 	bl	800524c <copy_I>
        offset += 7;  // Move to next character position
 8000fce:	6833      	ldr	r3, [r6, #0]
 8000fd0:	3307      	adds	r3, #7
 8000fd2:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000fd4:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000fd8:	2c00      	cmp	r4, #0
 8000fda:	f47f ae8f 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000fde:	e6ee      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'H': copy_H (buffer, x, y, color); break;
 8000fe0:	4653      	mov	r3, sl
 8000fe2:	464a      	mov	r2, r9
 8000fe4:	4641      	mov	r1, r8
 8000fe6:	4638      	mov	r0, r7
 8000fe8:	f003 ff5a 	bl	8004ea0 <copy_H>
        offset += 7;  // Move to next character position
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	3307      	adds	r3, #7
 8000ff0:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8000ff2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	f47f ae80 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8000ffc:	e6df      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'G': copy_G (buffer, x, y, color); break;
 8000ffe:	4653      	mov	r3, sl
 8001000:	464a      	mov	r2, r9
 8001002:	4641      	mov	r1, r8
 8001004:	4638      	mov	r0, r7
 8001006:	f003 fd8d 	bl	8004b24 <copy_G>
        offset += 7;  // Move to next character position
 800100a:	6833      	ldr	r3, [r6, #0]
 800100c:	3307      	adds	r3, #7
 800100e:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001010:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001014:	2c00      	cmp	r4, #0
 8001016:	f47f ae71 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 800101a:	e6d0      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'F': copy_F (buffer, x, y, color); break;
 800101c:	4653      	mov	r3, sl
 800101e:	464a      	mov	r2, r9
 8001020:	4641      	mov	r1, r8
 8001022:	4638      	mov	r0, r7
 8001024:	f003 fc40 	bl	80048a8 <copy_F>
        offset += 7;  // Move to next character position
 8001028:	6833      	ldr	r3, [r6, #0]
 800102a:	3307      	adds	r3, #7
 800102c:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 800102e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001032:	2c00      	cmp	r4, #0
 8001034:	f47f ae62 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8001038:	e6c1      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'E': copy_E (buffer, x, y, color); break;
 800103a:	4653      	mov	r3, sl
 800103c:	464a      	mov	r2, r9
 800103e:	4641      	mov	r1, r8
 8001040:	4638      	mov	r0, r7
 8001042:	f003 fa9b 	bl	800457c <copy_E>
        offset += 7;  // Move to next character position
 8001046:	6833      	ldr	r3, [r6, #0]
 8001048:	3307      	adds	r3, #7
 800104a:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 800104c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001050:	2c00      	cmp	r4, #0
 8001052:	f47f ae53 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8001056:	e6b2      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'D': copy_D (buffer, x, y, color); break;
 8001058:	4653      	mov	r3, sl
 800105a:	464a      	mov	r2, r9
 800105c:	4641      	mov	r1, r8
 800105e:	4638      	mov	r0, r7
 8001060:	f003 f880 	bl	8004164 <copy_D>
        offset += 7;  // Move to next character position
 8001064:	6833      	ldr	r3, [r6, #0]
 8001066:	3307      	adds	r3, #7
 8001068:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 800106a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800106e:	2c00      	cmp	r4, #0
 8001070:	f47f ae44 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8001074:	e6a3      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'C': copy_C (buffer, x, y, color); break;
 8001076:	4653      	mov	r3, sl
 8001078:	464a      	mov	r2, r9
 800107a:	4641      	mov	r1, r8
 800107c:	4638      	mov	r0, r7
 800107e:	f002 ff4b 	bl	8003f18 <copy_C>
        offset += 7;  // Move to next character position
 8001082:	6833      	ldr	r3, [r6, #0]
 8001084:	3307      	adds	r3, #7
 8001086:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001088:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800108c:	2c00      	cmp	r4, #0
 800108e:	f47f ae35 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8001092:	e694      	b.n	8000dbe <FLP_Draw_String+0xde>
            case 'B': copy_B (buffer, x, y, color); break;
 8001094:	4653      	mov	r3, sl
 8001096:	464a      	mov	r2, r9
 8001098:	4641      	mov	r1, r8
 800109a:	4638      	mov	r0, r7
 800109c:	f002 fd2c 	bl	8003af8 <copy_B>
        offset += 7;  // Move to next character position
 80010a0:	6833      	ldr	r3, [r6, #0]
 80010a2:	3307      	adds	r3, #7
 80010a4:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 80010a6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80010aa:	2c00      	cmp	r4, #0
 80010ac:	f47f ae26 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 80010b0:	e685      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '9': copy_9 (buffer, x, y, color); break;
 80010b2:	4653      	mov	r3, sl
 80010b4:	464a      	mov	r2, r9
 80010b6:	4641      	mov	r1, r8
 80010b8:	4638      	mov	r0, r7
 80010ba:	f00a fb0b 	bl	800b6d4 <copy_9>
        offset += 7;  // Move to next character position
 80010be:	6833      	ldr	r3, [r6, #0]
 80010c0:	3307      	adds	r3, #7
 80010c2:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 80010c4:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80010c8:	2c00      	cmp	r4, #0
 80010ca:	f47f ae17 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 80010ce:	e676      	b.n	8000dbe <FLP_Draw_String+0xde>
            case ',': copy_comma (buffer, x, y, color); break;
 80010d0:	4653      	mov	r3, sl
 80010d2:	464a      	mov	r2, r9
 80010d4:	4641      	mov	r1, r8
 80010d6:	4638      	mov	r0, r7
 80010d8:	f000 fa48 	bl	800156c <copy_comma>
        offset += 7;  // Move to next character position
 80010dc:	6833      	ldr	r3, [r6, #0]
 80010de:	3307      	adds	r3, #7
 80010e0:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 80010e2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80010e6:	2c00      	cmp	r4, #0
 80010e8:	f47f ae08 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 80010ec:	e667      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '.': copy_dot (buffer, x, y, color); break;
 80010ee:	4653      	mov	r3, sl
 80010f0:	464a      	mov	r2, r9
 80010f2:	4641      	mov	r1, r8
 80010f4:	4638      	mov	r0, r7
 80010f6:	f000 f92b 	bl	8001350 <copy_dot>
        offset += 7;  // Move to next character position
 80010fa:	6833      	ldr	r3, [r6, #0]
 80010fc:	3307      	adds	r3, #7
 80010fe:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001100:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001104:	2c00      	cmp	r4, #0
 8001106:	f47f adf9 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 800110a:	e658      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '0': copy_0 (buffer, x, y, color); break;
 800110c:	4653      	mov	r3, sl
 800110e:	464a      	mov	r2, r9
 8001110:	4641      	mov	r1, r8
 8001112:	4638      	mov	r0, r7
 8001114:	f008 fb66 	bl	80097e4 <copy_0>
        offset += 7;  // Move to next character position
 8001118:	6833      	ldr	r3, [r6, #0]
 800111a:	3307      	adds	r3, #7
 800111c:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 800111e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001122:	2c00      	cmp	r4, #0
 8001124:	f47f adea 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8001128:	e649      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '1': copy_1 (buffer, x, y, color); break;
 800112a:	4653      	mov	r3, sl
 800112c:	464a      	mov	r2, r9
 800112e:	4641      	mov	r1, r8
 8001130:	4638      	mov	r0, r7
 8001132:	f008 fd6f 	bl	8009c14 <copy_1>
        offset += 7;  // Move to next character position
 8001136:	6833      	ldr	r3, [r6, #0]
 8001138:	3307      	adds	r3, #7
 800113a:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 800113c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001140:	2c00      	cmp	r4, #0
 8001142:	f47f addb 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8001146:	e63a      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '2': copy_2 (buffer, x, y, color); break;
 8001148:	4653      	mov	r3, sl
 800114a:	464a      	mov	r2, r9
 800114c:	4641      	mov	r1, r8
 800114e:	4638      	mov	r0, r7
 8001150:	f008 fea4 	bl	8009e9c <copy_2>
        offset += 7;  // Move to next character position
 8001154:	6833      	ldr	r3, [r6, #0]
 8001156:	3307      	adds	r3, #7
 8001158:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 800115a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800115e:	2c00      	cmp	r4, #0
 8001160:	f47f adcc 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8001164:	e62b      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '3': copy_3 (buffer, x, y, color); break;
 8001166:	4653      	mov	r3, sl
 8001168:	464a      	mov	r2, r9
 800116a:	4641      	mov	r1, r8
 800116c:	4638      	mov	r0, r7
 800116e:	f009 f827 	bl	800a1c0 <copy_3>
        offset += 7;  // Move to next character position
 8001172:	6833      	ldr	r3, [r6, #0]
 8001174:	3307      	adds	r3, #7
 8001176:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001178:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800117c:	2c00      	cmp	r4, #0
 800117e:	f47f adbd 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8001182:	e61c      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '4': copy_4 (buffer, x, y, color); break;
 8001184:	4653      	mov	r3, sl
 8001186:	464a      	mov	r2, r9
 8001188:	4641      	mov	r1, r8
 800118a:	4638      	mov	r0, r7
 800118c:	f009 f9b4 	bl	800a4f8 <copy_4>
        offset += 7;  // Move to next character position
 8001190:	6833      	ldr	r3, [r6, #0]
 8001192:	3307      	adds	r3, #7
 8001194:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 8001196:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800119a:	2c00      	cmp	r4, #0
 800119c:	f47f adae 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 80011a0:	e60d      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '5': copy_5 (buffer, x, y, color); break;
 80011a2:	4653      	mov	r3, sl
 80011a4:	464a      	mov	r2, r9
 80011a6:	4641      	mov	r1, r8
 80011a8:	4638      	mov	r0, r7
 80011aa:	f009 fb3d 	bl	800a828 <copy_5>
        offset += 7;  // Move to next character position
 80011ae:	6833      	ldr	r3, [r6, #0]
 80011b0:	3307      	adds	r3, #7
 80011b2:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 80011b4:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	f47f ad9f 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 80011be:	e5fe      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '6': copy_6 (buffer, x, y, color); break;
 80011c0:	4653      	mov	r3, sl
 80011c2:	464a      	mov	r2, r9
 80011c4:	4641      	mov	r1, r8
 80011c6:	4638      	mov	r0, r7
 80011c8:	f009 fcd0 	bl	800ab6c <copy_6>
        offset += 7;  // Move to next character position
 80011cc:	6833      	ldr	r3, [r6, #0]
 80011ce:	3307      	adds	r3, #7
 80011d0:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 80011d2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80011d6:	2c00      	cmp	r4, #0
 80011d8:	f47f ad90 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 80011dc:	e5ef      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '7': copy_7 (buffer, x, y, color); break;
 80011de:	4653      	mov	r3, sl
 80011e0:	464a      	mov	r2, r9
 80011e2:	4641      	mov	r1, r8
 80011e4:	4638      	mov	r0, r7
 80011e6:	f009 fe83 	bl	800aef0 <copy_7>
        offset += 7;  // Move to next character position
 80011ea:	6833      	ldr	r3, [r6, #0]
 80011ec:	3307      	adds	r3, #7
 80011ee:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 80011f0:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80011f4:	2c00      	cmp	r4, #0
 80011f6:	f47f ad81 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 80011fa:	e5e0      	b.n	8000dbe <FLP_Draw_String+0xde>
            case '8': copy_8 (buffer, x, y, color); break;
 80011fc:	4653      	mov	r3, sl
 80011fe:	464a      	mov	r2, r9
 8001200:	4641      	mov	r1, r8
 8001202:	4638      	mov	r0, r7
 8001204:	f009 ffbe 	bl	800b184 <copy_8>
        offset += 7;  // Move to next character position
 8001208:	6833      	ldr	r3, [r6, #0]
 800120a:	3307      	adds	r3, #7
 800120c:	6033      	str	r3, [r6, #0]
    while ((c = string[i]) != '\0')
 800120e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001212:	2c00      	cmp	r4, #0
 8001214:	f47f ad72 	bne.w	8000cfc <FLP_Draw_String+0x1c>
 8001218:	e5d1      	b.n	8000dbe <FLP_Draw_String+0xde>
 800121a:	bf00      	nop

0800121c <FLP_Draw_Upgrade>:


void FLP_Draw_Upgrade (uint16_t* buffer, char* text, int x, int y, int height, int width, uint32_t color)
{
 800121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001220:	b087      	sub	sp, #28
 8001222:	469a      	mov	sl, r3
 8001224:	4616      	mov	r6, r2
 8001226:	4604      	mov	r4, r0
 8001228:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800122a:	9103      	str	r1, [sp, #12]
 800122c:	9204      	str	r2, [sp, #16]
 800122e:	e9dd b310 	ldrd	fp, r3, [sp, #64]	@ 0x40
	for (int row = y; row < y + height; row++)
 8001232:	2b00      	cmp	r3, #0
 8001234:	eb0a 0503 	add.w	r5, sl, r3
{
 8001238:	9305      	str	r3, [sp, #20]
	for (int row = y; row < y + height; row++)
 800123a:	dd73      	ble.n	8001324 <FLP_Draw_Upgrade+0x108>
 800123c:	f1bb 0f00 	cmp.w	fp, #0
		for (int col = x; col < x + width; col++)
 8001240:	eb06 080b 	add.w	r8, r6, fp
 8001244:	dd48      	ble.n	80012d8 <FLP_Draw_Upgrade+0xbc>
 8001246:	4546      	cmp	r6, r8
 8001248:	bfb4      	ite	lt
 800124a:	465f      	movlt	r7, fp
 800124c:	2701      	movge	r7, #1
 800124e:	ebca 130a 	rsb	r3, sl, sl, lsl #4
 8001252:	f1bb 0f01 	cmp.w	fp, #1
 8001256:	bf18      	it	ne
 8001258:	4546      	cmpne	r6, r8
	for (int row = y; row < y + height; row++)
 800125a:	4651      	mov	r1, sl
 800125c:	f027 0001 	bic.w	r0, r7, #1
 8001260:	ea4f 0957 	mov.w	r9, r7, lsr #1
 8001264:	f007 0701 	and.w	r7, r7, #1
 8001268:	bfac      	ite	ge
 800126a:	f04f 0801 	movge.w	r8, #1
 800126e:	f04f 0800 	movlt.w	r8, #0
 8001272:	eb06 1e43 	add.w	lr, r6, r3, lsl #5
 8001276:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800127a:	46bc      	mov	ip, r7
 800127c:	4430      	add	r0, r6
 800127e:	f8cd 8008 	str.w	r8, [sp, #8]
 8001282:	bfa8      	it	ge
 8001284:	4630      	movge	r0, r6
 8001286:	46c8      	mov	r8, r9
 8001288:	015b      	lsls	r3, r3, #5
 800128a:	4637      	mov	r7, r6
 800128c:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 8001290:	46e1      	mov	r9, ip
 8001292:	b292      	uxth	r2, r2
		for (int col = x; col < x + width; col++)
 8001294:	9e02      	ldr	r6, [sp, #8]
 8001296:	b99e      	cbnz	r6, 80012c0 <FLP_Draw_Upgrade+0xa4>
 8001298:	4646      	mov	r6, r8
 800129a:	9001      	str	r0, [sp, #4]
 800129c:	f04f 0c00 	mov.w	ip, #0
 80012a0:	eb06 080e 	add.w	r8, r6, lr
{
 80012a4:	4670      	mov	r0, lr
 80012a6:	f362 0c0f 	bfi	ip, r2, #0, #16
 80012aa:	f362 4c1f 	bfi	ip, r2, #16, #16
			buffer[col + row * SCREEN_WIDTH] = color;
 80012ae:	f840 cb04 	str.w	ip, [r0], #4
		for (int col = x; col < x + width; col++)
 80012b2:	4580      	cmp	r8, r0
 80012b4:	d1fb      	bne.n	80012ae <FLP_Draw_Upgrade+0x92>
 80012b6:	f1b9 0f00 	cmp.w	r9, #0
 80012ba:	d040      	beq.n	800133e <FLP_Draw_Upgrade+0x122>
 80012bc:	46b0      	mov	r8, r6
 80012be:	9801      	ldr	r0, [sp, #4]
	for (int row = y; row < y + height; row++)
 80012c0:	3101      	adds	r1, #1
			buffer[col + row * SCREEN_WIDTH] = color;
 80012c2:	eb00 0c03 	add.w	ip, r0, r3
	for (int row = y; row < y + height; row++)
 80012c6:	f50e 7e70 	add.w	lr, lr, #960	@ 0x3c0
 80012ca:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80012ce:	42a9      	cmp	r1, r5
			buffer[col + row * SCREEN_WIDTH] = color;
 80012d0:	f824 201c 	strh.w	r2, [r4, ip, lsl #1]
	for (int row = y; row < y + height; row++)
 80012d4:	dbde      	blt.n	8001294 <FLP_Draw_Upgrade+0x78>
 80012d6:	463e      	mov	r6, r7
	FLP_Draw_Rectangle (buffer, x + border / 2, y + border / 2, height - border, width - border, 0x0000);
 80012d8:	9b05      	ldr	r3, [sp, #20]
 80012da:	f1ab 0204 	sub.w	r2, fp, #4
 80012de:	1cb0      	adds	r0, r6, #2
 80012e0:	1f19      	subs	r1, r3, #4
 80012e2:	f10a 0302 	add.w	r3, sl, #2
	for (int row = y; row < y + height; row++)
 80012e6:	4419      	add	r1, r3
 80012e8:	4299      	cmp	r1, r3
 80012ea:	dd1b      	ble.n	8001324 <FLP_Draw_Upgrade+0x108>
		for (int col = x; col < x + width; col++)
 80012ec:	4402      	add	r2, r0
 80012ee:	4290      	cmp	r0, r2
 80012f0:	da18      	bge.n	8001324 <FLP_Draw_Upgrade+0x108>
			buffer[col + row * SCREEN_WIDTH] = color;
 80012f2:	1b95      	subs	r5, r2, r6
 80012f4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80012f8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80012fc:	1d27      	adds	r7, r4, #4
 80012fe:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8001302:	3d02      	subs	r5, #2
 8001304:	eb06 1241 	add.w	r2, r6, r1, lsl #5
 8001308:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800130c:	006d      	lsls	r5, r5, #1
 800130e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8001312:	4618      	mov	r0, r3
 8001314:	462a      	mov	r2, r5
 8001316:	2100      	movs	r1, #0
 8001318:	f010 fc44 	bl	8011ba4 <memset>
	for (int row = y; row < y + height; row++)
 800131c:	f500 7370 	add.w	r3, r0, #960	@ 0x3c0
 8001320:	429f      	cmp	r7, r3
 8001322:	d1f6      	bne.n	8001312 <FLP_Draw_Upgrade+0xf6>
    FLP_Draw_Box (buffer, x, y, 4, height, width, color);
    FLP_Draw_String (buffer, text, x + 9, y + 9, color);
 8001324:	4620      	mov	r0, r4
 8001326:	f10a 0309 	add.w	r3, sl, #9
 800132a:	9c04      	ldr	r4, [sp, #16]
 800132c:	f106 0209 	add.w	r2, r6, #9
 8001330:	9903      	ldr	r1, [sp, #12]
 8001332:	9410      	str	r4, [sp, #64]	@ 0x40
}
 8001334:	b007      	add	sp, #28
 8001336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FLP_Draw_String (buffer, text, x + 9, y + 9, color);
 800133a:	f7ff bcd1 	b.w	8000ce0 <FLP_Draw_String>
	for (int row = y; row < y + height; row++)
 800133e:	3101      	adds	r1, #1
 8001340:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001344:	f50e 7e70 	add.w	lr, lr, #960	@ 0x3c0
 8001348:	428d      	cmp	r5, r1
 800134a:	dca7      	bgt.n	800129c <FLP_Draw_Upgrade+0x80>
 800134c:	e7c3      	b.n	80012d6 <FLP_Draw_Upgrade+0xba>
 800134e:	bf00      	nop

08001350 <copy_dot>:
}

//================================ SYMBOL -> BUFFER =====================================================

void copy_dot(uint16_t* buffer, int x, int y, uint32_t color)
{
 8001350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8001354:	4c84      	ldr	r4, [pc, #528]	@ (8001568 <copy_dot+0x218>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001356:	f240 18df 	movw	r8, #479	@ 0x1df
{
 800135a:	b085      	sub	sp, #20
    int pixel_y = y_base + y;
 800135c:	f102 0709 	add.w	r7, r2, #9
    int pixel_x = x_base + x + offset;
 8001360:	6824      	ldr	r4, [r4, #0]
{
 8001362:	9300      	str	r3, [sp, #0]
    int pixel_x = x_base + x + offset;
 8001364:	190d      	adds	r5, r1, r4
 8001366:	f104 0e01 	add.w	lr, r4, #1
 800136a:	f104 0c02 	add.w	ip, r4, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800136e:	4545      	cmp	r5, r8
    int pixel_x = x_base + x + offset;
 8001370:	448e      	add	lr, r1
 8001372:	448c      	add	ip, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001374:	bf8c      	ite	hi
 8001376:	2600      	movhi	r6, #0
 8001378:	2601      	movls	r6, #1
 800137a:	45c6      	cmp	lr, r8
 800137c:	bf8c      	ite	hi
 800137e:	2300      	movhi	r3, #0
 8001380:	2301      	movls	r3, #1
 8001382:	45c4      	cmp	ip, r8
 8001384:	ea6f 0807 	mvn.w	r8, r7
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	bf8c      	ite	hi
 800138c:	2300      	movhi	r3, #0
 800138e:	2301      	movls	r3, #1
 8001390:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8001394:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8001398:	b3ce      	cbz	r6, 800140e <copy_dot+0xbe>
 800139a:	f1b8 0f00 	cmp.w	r8, #0
 800139e:	d036      	beq.n	800140e <copy_dot+0xbe>
 80013a0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80013a4:	f280 808b 	bge.w	80014be <copy_dot+0x16e>
    int pixel_x = x_base + x + offset;
 80013a8:	f101 0901 	add.w	r9, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80013ac:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 80013b0:	f8bd b000 	ldrh.w	fp, [sp]
    int pixel_x = x_base + x + offset;
 80013b4:	44a1      	add	r9, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80013b6:	eb05 1a48 	add.w	sl, r5, r8, lsl #5
 80013ba:	ea4f 1848 	mov.w	r8, r8, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80013be:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80013c2:	f820 b01a 	strh.w	fp, [r0, sl, lsl #1]
 80013c6:	ea4f 1a07 	mov.w	sl, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80013ca:	f0c0 80a9 	bcc.w	8001520 <copy_dot+0x1d0>
 80013ce:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80013d2:	d328      	bcc.n	8001426 <copy_dot+0xd6>
    int pixel_y = y_base + y;
 80013d4:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80013d8:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80013dc:	da6f      	bge.n	80014be <copy_dot+0x16e>
    int pixel_x = x_base + x + offset;
 80013de:	f101 0901 	add.w	r9, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80013e2:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 80013e6:	f8bd b000 	ldrh.w	fp, [sp]
 80013ea:	013b      	lsls	r3, r7, #4
    int pixel_x = x_base + x + offset;
 80013ec:	44a1      	add	r9, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80013ee:	eb05 1a48 	add.w	sl, r5, r8, lsl #5
 80013f2:	ea4f 1848 	mov.w	r8, r8, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80013f6:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80013fa:	f820 b01a 	strh.w	fp, [r0, sl, lsl #1]
 80013fe:	46da      	mov	sl, fp
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001400:	f0c0 80a4 	bcc.w	800154c <copy_dot+0x1fc>
 8001404:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8001408:	d32c      	bcc.n	8001464 <copy_dot+0x114>
    int pixel_y = y_base + y;
 800140a:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800140c:	e037      	b.n	800147e <copy_dot+0x12e>
 800140e:	9b01      	ldr	r3, [sp, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d157      	bne.n	80014c4 <copy_dot+0x174>
 8001414:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001418:	d20d      	bcs.n	8001436 <copy_dot+0xe6>
 800141a:	9b02      	ldr	r3, [sp, #8]
 800141c:	b15b      	cbz	r3, 8001436 <copy_dot+0xe6>
 800141e:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8001422:	f8bd b000 	ldrh.w	fp, [sp]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001426:	ebaa 0807 	sub.w	r8, sl, r7
 800142a:	4667      	mov	r7, ip
 800142c:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001430:	4447      	add	r7, r8
 8001432:	f820 b017 	strh.w	fp, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 8001436:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800143a:	ea6f 0807 	mvn.w	r8, r7
 800143e:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8001442:	b116      	cbz	r6, 800144a <copy_dot+0xfa>
 8001444:	f1b8 0f00 	cmp.w	r8, #0
 8001448:	d1c6      	bne.n	80013d8 <copy_dot+0x88>
 800144a:	9b01      	ldr	r3, [sp, #4]
 800144c:	b113      	cbz	r3, 8001454 <copy_dot+0x104>
 800144e:	f1b8 0f00 	cmp.w	r8, #0
 8001452:	d171      	bne.n	8001538 <copy_dot+0x1e8>
 8001454:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001458:	d20c      	bcs.n	8001474 <copy_dot+0x124>
 800145a:	9b02      	ldr	r3, [sp, #8]
 800145c:	b153      	cbz	r3, 8001474 <copy_dot+0x124>
 800145e:	f8bd b000 	ldrh.w	fp, [sp]
 8001462:	013b      	lsls	r3, r7, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001464:	eba3 0807 	sub.w	r8, r3, r7
 8001468:	46da      	mov	sl, fp
 800146a:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800146e:	44c4      	add	ip, r8
 8001470:	f820 a01c 	strh.w	sl, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 8001474:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001476:	43d7      	mvns	r7, r2
 8001478:	0fff      	lsrs	r7, r7, #31
 800147a:	b37e      	cbz	r6, 80014dc <copy_dot+0x18c>
 800147c:	b377      	cbz	r7, 80014dc <copy_dot+0x18c>
 800147e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8001482:	da1c      	bge.n	80014be <copy_dot+0x16e>
    int pixel_x = x_base + x + offset;
 8001484:	f101 0e01 	add.w	lr, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001488:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 800148c:	f8bd 6000 	ldrh.w	r6, [sp]
    int pixel_x = x_base + x + offset;
 8001490:	44a6      	add	lr, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001492:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 8001496:	017f      	lsls	r7, r7, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001498:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800149c:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80014a0:	d329      	bcc.n	80014f6 <copy_dot+0x1a6>
 80014a2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80014a6:	d20a      	bcs.n	80014be <copy_dot+0x16e>
 80014a8:	9b02      	ldr	r3, [sp, #8]
 80014aa:	b143      	cbz	r3, 80014be <copy_dot+0x16e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80014ac:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80014b0:	9b03      	ldr	r3, [sp, #12]
 80014b2:	f8bd 6000 	ldrh.w	r6, [sp]
 80014b6:	0157      	lsls	r7, r2, #5
 80014b8:	443b      	add	r3, r7
 80014ba:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
    for (int i = 9; i < 12; i++)
    {
        for (int j = 0; j < 3; j++) 
            fill_pixel(buffer, x, y, j, i, color);    
    }
}
 80014be:	b005      	add	sp, #20
 80014c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80014c4:	f1b8 0f00 	cmp.w	r8, #0
 80014c8:	d0a4      	beq.n	8001414 <copy_dot+0xc4>
 80014ca:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80014ce:	db20      	blt.n	8001512 <copy_dot+0x1c2>
    int pixel_y = y_base + y;
 80014d0:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80014d2:	43d7      	mvns	r7, r2
 80014d4:	0fff      	lsrs	r7, r7, #31
 80014d6:	b10e      	cbz	r6, 80014dc <copy_dot+0x18c>
 80014d8:	2f00      	cmp	r7, #0
 80014da:	d1f0      	bne.n	80014be <copy_dot+0x16e>
 80014dc:	9b01      	ldr	r3, [sp, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0df      	beq.n	80014a2 <copy_dot+0x152>
 80014e2:	2f00      	cmp	r7, #0
 80014e4:	d0dd      	beq.n	80014a2 <copy_dot+0x152>
 80014e6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80014ea:	dae8      	bge.n	80014be <copy_dot+0x16e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80014ec:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 80014f0:	f8bd 6000 	ldrh.w	r6, [sp]
 80014f4:	017f      	lsls	r7, r7, #5
    int pixel_x = x_base + x + offset;
 80014f6:	3102      	adds	r1, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80014f8:	44be      	add	lr, r7
    int pixel_x = x_base + x + offset;
 80014fa:	190b      	adds	r3, r1, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80014fc:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001500:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8001504:	9303      	str	r3, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001506:	d2da      	bcs.n	80014be <copy_dot+0x16e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001508:	9b03      	ldr	r3, [sp, #12]
 800150a:	443b      	add	r3, r7
 800150c:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
    for (int i = 9; i < 12; i++)
 8001510:	e7d5      	b.n	80014be <copy_dot+0x16e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001512:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8001516:	f8bd b000 	ldrh.w	fp, [sp]
 800151a:	46f1      	mov	r9, lr
 800151c:	ea4f 1848 	mov.w	r8, r8, lsl #5
    int pixel_x = x_base + x + offset;
 8001520:	1c8f      	adds	r7, r1, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001522:	44c1      	add	r9, r8
    int pixel_x = x_base + x + offset;
 8001524:	4427      	add	r7, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001526:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800152a:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800152e:	d282      	bcs.n	8001436 <copy_dot+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001530:	4447      	add	r7, r8
 8001532:	f820 b017 	strh.w	fp, [r0, r7, lsl #1]
 8001536:	e77e      	b.n	8001436 <copy_dot+0xe6>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001538:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800153c:	dac8      	bge.n	80014d0 <copy_dot+0x180>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800153e:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8001542:	f8bd a000 	ldrh.w	sl, [sp]
 8001546:	46f1      	mov	r9, lr
 8001548:	ea4f 1848 	mov.w	r8, r8, lsl #5
    int pixel_x = x_base + x + offset;
 800154c:	f101 0c02 	add.w	ip, r1, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001550:	44c1      	add	r9, r8
    int pixel_x = x_base + x + offset;
 8001552:	44a4      	add	ip, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001554:	f820 a019 	strh.w	sl, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001558:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800155c:	d28a      	bcs.n	8001474 <copy_dot+0x124>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800155e:	44c4      	add	ip, r8
 8001560:	f820 a01c 	strh.w	sl, [r0, ip, lsl #1]
 8001564:	e786      	b.n	8001474 <copy_dot+0x124>
 8001566:	bf00      	nop
 8001568:	240001b8 	.word	0x240001b8

0800156c <copy_comma>:

void copy_comma(uint16_t* buffer, int x, int y, uint32_t color)
{
 800156c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pixel_x = x_base + x + offset;
 8001570:	4cc8      	ldr	r4, [pc, #800]	@ (8001894 <copy_comma+0x328>)
 8001572:	6824      	ldr	r4, [r4, #0]
 8001574:	eb01 0e04 	add.w	lr, r1, r4
 8001578:	f104 0c02 	add.w	ip, r4, #2
 800157c:	3401      	adds	r4, #1
 800157e:	448c      	add	ip, r1
 8001580:	440c      	add	r4, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001582:	f240 11df 	movw	r1, #479	@ 0x1df
 8001586:	458e      	cmp	lr, r1
 8001588:	bf8c      	ite	hi
 800158a:	2500      	movhi	r5, #0
 800158c:	2501      	movls	r5, #1
 800158e:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8001592:	d33e      	bcc.n	8001612 <copy_comma+0xa6>
 8001594:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8001598:	d35d      	bcc.n	8001656 <copy_comma+0xea>
 800159a:	1dd1      	adds	r1, r2, #7
 800159c:	f100 8148 	bmi.w	8001830 <copy_comma+0x2c4>
 80015a0:	2d00      	cmp	r5, #0
 80015a2:	f000 8145 	beq.w	8001830 <copy_comma+0x2c4>
 80015a6:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80015aa:	da30      	bge.n	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80015ac:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80015b0:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80015b4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 80015b8:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80015bc:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80015c0:	da25      	bge.n	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80015c2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80015c6:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80015ca:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 80015ce:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80015d2:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80015d6:	da1a      	bge.n	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80015d8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80015dc:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80015e0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 80015e4:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80015e8:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80015ec:	da0f      	bge.n	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80015ee:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    int pixel_y = y_base + y;
 80015f2:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80015f4:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80015f8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80015fc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8001600:	da05      	bge.n	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001602:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001606:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 800160a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    for (int i = 7; i < 12; i++)
    {
        for (int j = 0; j < 3; j++) 
            fill_pixel(buffer, x, y, j, i, color);
    }
}
 800160e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int pixel_y = y_base + y;
 8001612:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001614:	428c      	cmp	r4, r1
 8001616:	ea6f 0607 	mvn.w	r6, r7
 800161a:	bf8c      	ite	hi
 800161c:	2100      	movhi	r1, #0
 800161e:	2101      	movls	r1, #1
 8001620:	0ff6      	lsrs	r6, r6, #31
 8001622:	2d00      	cmp	r5, #0
 8001624:	d058      	beq.n	80016d8 <copy_comma+0x16c>
 8001626:	2e00      	cmp	r6, #0
 8001628:	d056      	beq.n	80016d8 <copy_comma+0x16c>
 800162a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800162e:	daee      	bge.n	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001630:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001634:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001638:	b29e      	uxth	r6, r3
 800163a:	eb0e 1a48 	add.w	sl, lr, r8, lsl #5
 800163e:	ea4f 1907 	mov.w	r9, r7, lsl #4
 8001642:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001646:	f820 601a 	strh.w	r6, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800164a:	d354      	bcc.n	80016f6 <copy_comma+0x18a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800164c:	eba9 0807 	sub.w	r8, r9, r7
 8001650:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001654:	e053      	b.n	80016fe <copy_comma+0x192>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001656:	1dd1      	adds	r1, r2, #7
 8001658:	f100 8103 	bmi.w	8001862 <copy_comma+0x2f6>
 800165c:	2d00      	cmp	r5, #0
 800165e:	f000 8100 	beq.w	8001862 <copy_comma+0x2f6>
 8001662:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8001666:	dad2      	bge.n	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001668:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800166c:	b29e      	uxth	r6, r3
 800166e:	eb0e 1741 	add.w	r7, lr, r1, lsl #5
 8001672:	0149      	lsls	r1, r1, #5
 8001674:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
 8001678:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800167a:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800167e:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 8001682:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001686:	f0c0 81e6 	bcc.w	8001a56 <copy_comma+0x4ea>
 800168a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800168e:	f000 80ef 	beq.w	8001870 <copy_comma+0x304>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001692:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001696:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 800169a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800169e:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80016a2:	43ce      	mvns	r6, r1
 80016a4:	0ff6      	lsrs	r6, r6, #31
 80016a6:	2d00      	cmp	r5, #0
 80016a8:	f000 81cc 	beq.w	8001a44 <copy_comma+0x4d8>
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	f040 8178 	bne.w	80019a2 <copy_comma+0x436>
    int pixel_y = y_base + y;
 80016b2:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80016b6:	43ce      	mvns	r6, r1
 80016b8:	0ff6      	lsrs	r6, r6, #31
 80016ba:	2d00      	cmp	r5, #0
 80016bc:	f000 81a6 	beq.w	8001a0c <copy_comma+0x4a0>
 80016c0:	2e00      	cmp	r6, #0
 80016c2:	f040 817f 	bne.w	80019c4 <copy_comma+0x458>
    int pixel_y = y_base + y;
 80016c6:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80016c8:	43d1      	mvns	r1, r2
 80016ca:	0fc9      	lsrs	r1, r1, #31
 80016cc:	2d00      	cmp	r5, #0
 80016ce:	f000 81ad 	beq.w	8001a2c <copy_comma+0x4c0>
 80016d2:	2900      	cmp	r1, #0
 80016d4:	d09b      	beq.n	800160e <copy_comma+0xa2>
 80016d6:	e185      	b.n	80019e4 <copy_comma+0x478>
 80016d8:	2900      	cmp	r1, #0
 80016da:	f000 80a1 	beq.w	8001820 <copy_comma+0x2b4>
 80016de:	2e00      	cmp	r6, #0
 80016e0:	f000 809e 	beq.w	8001820 <copy_comma+0x2b4>
 80016e4:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80016e8:	f280 8104 	bge.w	80018f4 <copy_comma+0x388>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80016ec:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 80016f0:	b29e      	uxth	r6, r3
 80016f2:	ea4f 1848 	mov.w	r8, r8, lsl #5
 80016f6:	eb04 0708 	add.w	r7, r4, r8
 80016fa:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
 80016fe:	44e0      	add	r8, ip
 8001700:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
    int pixel_y = y_base + y;
 8001704:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001708:	ea6f 0608 	mvn.w	r6, r8
 800170c:	0ff6      	lsrs	r6, r6, #31
 800170e:	2d00      	cmp	r5, #0
 8001710:	f000 8107 	beq.w	8001922 <copy_comma+0x3b6>
 8001714:	2e00      	cmp	r6, #0
 8001716:	f000 8104 	beq.w	8001922 <copy_comma+0x3b6>
 800171a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800171e:	f6bf af76 	bge.w	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001722:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001726:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800172a:	b29e      	uxth	r6, r3
 800172c:	eb0e 1a47 	add.w	sl, lr, r7, lsl #5
 8001730:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8001734:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8001738:	f820 601a 	strh.w	r6, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800173c:	f0c0 80fa 	bcc.w	8001934 <copy_comma+0x3c8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001740:	eba9 0708 	sub.w	r7, r9, r8
 8001744:	017f      	lsls	r7, r7, #5
 8001746:	4467      	add	r7, ip
 8001748:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 800174c:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001750:	43fe      	mvns	r6, r7
 8001752:	0ff6      	lsrs	r6, r6, #31
 8001754:	2d00      	cmp	r5, #0
 8001756:	f000 80d5 	beq.w	8001904 <copy_comma+0x398>
 800175a:	2e00      	cmp	r6, #0
 800175c:	f000 80d2 	beq.w	8001904 <copy_comma+0x398>
 8001760:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001764:	f6bf af53 	bge.w	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001768:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800176c:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001770:	b29e      	uxth	r6, r3
 8001772:	eb0e 1a48 	add.w	sl, lr, r8, lsl #5
 8001776:	ea4f 1907 	mov.w	r9, r7, lsl #4
 800177a:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800177e:	f820 601a 	strh.w	r6, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001782:	f0c0 80c9 	bcc.w	8001918 <copy_comma+0x3ac>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001786:	eba9 0807 	sub.w	r8, r9, r7
 800178a:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800178e:	44e0      	add	r8, ip
 8001790:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
    int pixel_y = y_base + y;
 8001794:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001798:	43fe      	mvns	r6, r7
 800179a:	0ff6      	lsrs	r6, r6, #31
 800179c:	2d00      	cmp	r5, #0
 800179e:	f000 809a 	beq.w	80018d6 <copy_comma+0x36a>
 80017a2:	2e00      	cmp	r6, #0
 80017a4:	f000 8097 	beq.w	80018d6 <copy_comma+0x36a>
 80017a8:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80017ac:	f6bf af2f 	bge.w	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80017b0:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80017b4:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80017b8:	b29e      	uxth	r6, r3
 80017ba:	eb0e 1a48 	add.w	sl, lr, r8, lsl #5
 80017be:	ea4f 1907 	mov.w	r9, r7, lsl #4
 80017c2:	ea4f 1848 	mov.w	r8, r8, lsl #5
 80017c6:	f820 601a 	strh.w	r6, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80017ca:	f0c0 808e 	bcc.w	80018ea <copy_comma+0x37e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80017ce:	eba9 0807 	sub.w	r8, r9, r7
 80017d2:	ea4f 1848 	mov.w	r8, r8, lsl #5
 80017d6:	44e0      	add	r8, ip
 80017d8:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
    int pixel_y = y_base + y;
 80017dc:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80017de:	43d6      	mvns	r6, r2
 80017e0:	0ff6      	lsrs	r6, r6, #31
 80017e2:	2d00      	cmp	r5, #0
 80017e4:	d05f      	beq.n	80018a6 <copy_comma+0x33a>
 80017e6:	2e00      	cmp	r6, #0
 80017e8:	d05d      	beq.n	80018a6 <copy_comma+0x33a>
 80017ea:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80017ee:	f6bf af0e 	bge.w	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80017f2:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80017f6:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80017fa:	b29e      	uxth	r6, r3
 80017fc:	eb0e 1341 	add.w	r3, lr, r1, lsl #5
 8001800:	ea4f 1502 	mov.w	r5, r2, lsl #4
 8001804:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8001808:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800180c:	4633      	mov	r3, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800180e:	d356      	bcc.n	80018be <copy_comma+0x352>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001810:	1aad      	subs	r5, r5, r2
 8001812:	4633      	mov	r3, r6
 8001814:	0169      	lsls	r1, r5, #5
 8001816:	448c      	add	ip, r1
 8001818:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
}
 800181c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001820:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001824:	f4bf af6e 	bcs.w	8001704 <copy_comma+0x198>
 8001828:	b29e      	uxth	r6, r3
 800182a:	ea4f 1907 	mov.w	r9, r7, lsl #4
 800182e:	e70d      	b.n	800164c <copy_comma+0xe0>
 8001830:	f112 0108 	adds.w	r1, r2, #8
 8001834:	d402      	bmi.n	800183c <copy_comma+0x2d0>
 8001836:	2d00      	cmp	r5, #0
 8001838:	f47f aec0 	bne.w	80015bc <copy_comma+0x50>
 800183c:	f112 0109 	adds.w	r1, r2, #9
 8001840:	d402      	bmi.n	8001848 <copy_comma+0x2dc>
 8001842:	2d00      	cmp	r5, #0
 8001844:	f47f aec5 	bne.w	80015d2 <copy_comma+0x66>
 8001848:	f112 010a 	adds.w	r1, r2, #10
 800184c:	d402      	bmi.n	8001854 <copy_comma+0x2e8>
 800184e:	2d00      	cmp	r5, #0
 8001850:	f47f aeca 	bne.w	80015e8 <copy_comma+0x7c>
 8001854:	320b      	adds	r2, #11
 8001856:	f53f aeda 	bmi.w	800160e <copy_comma+0xa2>
 800185a:	2d00      	cmp	r5, #0
 800185c:	f43f aed7 	beq.w	800160e <copy_comma+0xa2>
 8001860:	e6cc      	b.n	80015fc <copy_comma+0x90>
 8001862:	2900      	cmp	r1, #0
 8001864:	f2c0 808a 	blt.w	800197c <copy_comma+0x410>
 8001868:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800186c:	f2c0 80ee 	blt.w	8001a4c <copy_comma+0x4e0>
 8001870:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8001874:	f4ff aecb 	bcc.w	800160e <copy_comma+0xa2>
    int pixel_y = y_base + y;
 8001878:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800187c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8001880:	f280 80ed 	bge.w	8001a5e <copy_comma+0x4f2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001884:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001888:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 800188c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001890:	e70f      	b.n	80016b2 <copy_comma+0x146>
 8001892:	bf00      	nop
 8001894:	240001b8 	.word	0x240001b8
    int pixel_y = y_base + y;
 8001898:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800189a:	43d6      	mvns	r6, r2
 800189c:	0ff6      	lsrs	r6, r6, #31
 800189e:	b115      	cbz	r5, 80018a6 <copy_comma+0x33a>
 80018a0:	2e00      	cmp	r6, #0
 80018a2:	f47f aeb4 	bne.w	800160e <copy_comma+0xa2>
 80018a6:	2900      	cmp	r1, #0
 80018a8:	d049      	beq.n	800193e <copy_comma+0x3d2>
 80018aa:	2e00      	cmp	r6, #0
 80018ac:	d047      	beq.n	800193e <copy_comma+0x3d2>
 80018ae:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80018b2:	f6bf aeac 	bge.w	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80018b6:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	0149      	lsls	r1, r1, #5
 80018be:	440c      	add	r4, r1
 80018c0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80018c4:	e7a7      	b.n	8001816 <copy_comma+0x2aa>
    int pixel_y = y_base + y;
 80018c6:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80018ca:	43fe      	mvns	r6, r7
 80018cc:	0ff6      	lsrs	r6, r6, #31
 80018ce:	b115      	cbz	r5, 80018d6 <copy_comma+0x36a>
 80018d0:	2e00      	cmp	r6, #0
 80018d2:	f47f ae9c 	bne.w	800160e <copy_comma+0xa2>
 80018d6:	b3c9      	cbz	r1, 800194c <copy_comma+0x3e0>
 80018d8:	b3c6      	cbz	r6, 800194c <copy_comma+0x3e0>
 80018da:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80018de:	dadb      	bge.n	8001898 <copy_comma+0x32c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80018e0:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 80018e4:	b29e      	uxth	r6, r3
 80018e6:	ea4f 1848 	mov.w	r8, r8, lsl #5
 80018ea:	eb04 0708 	add.w	r7, r4, r8
 80018ee:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80018f2:	e770      	b.n	80017d6 <copy_comma+0x26a>
    int pixel_y = y_base + y;
 80018f4:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80018f8:	43fe      	mvns	r6, r7
 80018fa:	0ff6      	lsrs	r6, r6, #31
 80018fc:	b115      	cbz	r5, 8001904 <copy_comma+0x398>
 80018fe:	2e00      	cmp	r6, #0
 8001900:	f47f ae85 	bne.w	800160e <copy_comma+0xa2>
 8001904:	b391      	cbz	r1, 800196c <copy_comma+0x400>
 8001906:	b38e      	cbz	r6, 800196c <copy_comma+0x400>
 8001908:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800190c:	dadb      	bge.n	80018c6 <copy_comma+0x35a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800190e:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8001912:	b29e      	uxth	r6, r3
 8001914:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001918:	eb04 0708 	add.w	r7, r4, r8
 800191c:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001920:	e735      	b.n	800178e <copy_comma+0x222>
 8001922:	b1d9      	cbz	r1, 800195c <copy_comma+0x3f0>
 8001924:	b1d6      	cbz	r6, 800195c <copy_comma+0x3f0>
 8001926:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800192a:	dae3      	bge.n	80018f4 <copy_comma+0x388>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800192c:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 8001930:	b29e      	uxth	r6, r3
 8001932:	017f      	lsls	r7, r7, #5
 8001934:	eb04 0807 	add.w	r8, r4, r7
 8001938:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800193c:	e703      	b.n	8001746 <copy_comma+0x1da>
 800193e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8001942:	f4bf ae64 	bcs.w	800160e <copy_comma+0xa2>
 8001946:	b29e      	uxth	r6, r3
 8001948:	0115      	lsls	r5, r2, #4
 800194a:	e761      	b.n	8001810 <copy_comma+0x2a4>
 800194c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001950:	f4bf af44 	bcs.w	80017dc <copy_comma+0x270>
 8001954:	b29e      	uxth	r6, r3
 8001956:	ea4f 1907 	mov.w	r9, r7, lsl #4
 800195a:	e738      	b.n	80017ce <copy_comma+0x262>
 800195c:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8001960:	f4bf aef4 	bcs.w	800174c <copy_comma+0x1e0>
 8001964:	b29e      	uxth	r6, r3
 8001966:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800196a:	e6e9      	b.n	8001740 <copy_comma+0x1d4>
 800196c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001970:	f4bf af10 	bcs.w	8001794 <copy_comma+0x228>
 8001974:	b29e      	uxth	r6, r3
 8001976:	ea4f 1907 	mov.w	r9, r7, lsl #4
 800197a:	e704      	b.n	8001786 <copy_comma+0x21a>
 800197c:	f112 0108 	adds.w	r1, r2, #8
 8001980:	d440      	bmi.n	8001a04 <copy_comma+0x498>
 8001982:	2d00      	cmp	r5, #0
 8001984:	d03e      	beq.n	8001a04 <copy_comma+0x498>
    int pixel_y = y_base + y;
 8001986:	2100      	movs	r1, #0
 8001988:	b29e      	uxth	r6, r3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800198a:	ebc1 1501 	rsb	r5, r1, r1, lsl #4
    int pixel_y = y_base + y;
 800198e:	f102 0109 	add.w	r1, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001992:	eb0e 1745 	add.w	r7, lr, r5, lsl #5
 8001996:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800199a:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
 800199e:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80019a2:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80019a6:	f6bf ae32 	bge.w	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80019aa:	ebc1 1501 	rsb	r5, r1, r1, lsl #4
    int pixel_y = y_base + y;
 80019ae:	f102 010a 	add.w	r1, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80019b2:	b29e      	uxth	r6, r3
 80019b4:	eb0e 1745 	add.w	r7, lr, r5, lsl #5
 80019b8:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80019bc:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
 80019c0:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80019c4:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80019c8:	f6bf ae21 	bge.w	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80019cc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    int pixel_y = y_base + y;
 80019d0:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80019d2:	b29d      	uxth	r5, r3
 80019d4:	eb0e 1641 	add.w	r6, lr, r1, lsl #5
 80019d8:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 80019dc:	f820 5016 	strh.w	r5, [r0, r6, lsl #1]
 80019e0:	f820 5011 	strh.w	r5, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80019e4:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80019e8:	f6bf ae11 	bge.w	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80019ec:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	eb0e 1e42 	add.w	lr, lr, r2, lsl #5
 80019f6:	0152      	lsls	r2, r2, #5
 80019f8:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80019fc:	4422      	add	r2, r4
 80019fe:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a02:	e604      	b.n	800160e <copy_comma+0xa2>
 8001a04:	2900      	cmp	r1, #0
 8001a06:	f6bf ae44 	bge.w	8001692 <copy_comma+0x126>
 8001a0a:	e648      	b.n	800169e <copy_comma+0x132>
 8001a0c:	2e00      	cmp	r6, #0
 8001a0e:	f43f ae5a 	beq.w	80016c6 <copy_comma+0x15a>
 8001a12:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8001a16:	da06      	bge.n	8001a26 <copy_comma+0x4ba>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001a18:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001a1c:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 8001a20:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a24:	e64f      	b.n	80016c6 <copy_comma+0x15a>
    int pixel_y = y_base + y;
 8001a26:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a28:	43d1      	mvns	r1, r2
 8001a2a:	0fc9      	lsrs	r1, r1, #31
 8001a2c:	2900      	cmp	r1, #0
 8001a2e:	f43f adee 	beq.w	800160e <copy_comma+0xa2>
 8001a32:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8001a36:	f6bf adea 	bge.w	800160e <copy_comma+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001a3a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	0152      	lsls	r2, r2, #5
 8001a42:	e7db      	b.n	80019fc <copy_comma+0x490>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a44:	2e00      	cmp	r6, #0
 8001a46:	f47f af19 	bne.w	800187c <copy_comma+0x310>
 8001a4a:	e632      	b.n	80016b2 <copy_comma+0x146>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001a4c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001a50:	b29e      	uxth	r6, r3
 8001a52:	0149      	lsls	r1, r1, #5
 8001a54:	e610      	b.n	8001678 <copy_comma+0x10c>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a56:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8001a5a:	d196      	bne.n	800198a <copy_comma+0x41e>
 8001a5c:	e5d7      	b.n	800160e <copy_comma+0xa2>
    int pixel_y = y_base + y;
 8001a5e:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a62:	43ce      	mvns	r6, r1
 8001a64:	0ff6      	lsrs	r6, r6, #31
 8001a66:	2d00      	cmp	r5, #0
 8001a68:	d0d0      	beq.n	8001a0c <copy_comma+0x4a0>
 8001a6a:	2e00      	cmp	r6, #0
 8001a6c:	f47f adcf 	bne.w	800160e <copy_comma+0xa2>
 8001a70:	e629      	b.n	80016c6 <copy_comma+0x15a>
 8001a72:	bf00      	nop

08001a74 <copy_dash>:

void copy_dash(uint16_t* buffer, int x, int y, uint32_t color)
{
 8001a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8001a78:	4c9e      	ldr	r4, [pc, #632]	@ (8001cf4 <copy_dash+0x280>)
{
 8001a7a:	b087      	sub	sp, #28
    int pixel_x = x_base + x + offset;
 8001a7c:	f101 0804 	add.w	r8, r1, #4
 8001a80:	6824      	ldr	r4, [r4, #0]
 8001a82:	1c65      	adds	r5, r4, #1
 8001a84:	190e      	adds	r6, r1, r4
 8001a86:	44a0      	add	r8, r4
 8001a88:	186f      	adds	r7, r5, r1
 8001a8a:	1ce5      	adds	r5, r4, #3
 8001a8c:	440d      	add	r5, r1
 8001a8e:	9703      	str	r7, [sp, #12]
 8001a90:	9500      	str	r5, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001a92:	f240 15df 	movw	r5, #479	@ 0x1df
 8001a96:	42af      	cmp	r7, r5
 8001a98:	bf8c      	ite	hi
 8001a9a:	2700      	movhi	r7, #0
 8001a9c:	2701      	movls	r7, #1
 8001a9e:	9701      	str	r7, [sp, #4]
 8001aa0:	9f00      	ldr	r7, [sp, #0]
 8001aa2:	42af      	cmp	r7, r5
 8001aa4:	bf8c      	ite	hi
 8001aa6:	2700      	movhi	r7, #0
 8001aa8:	2701      	movls	r7, #1
 8001aaa:	42ae      	cmp	r6, r5
 8001aac:	9704      	str	r7, [sp, #16]
 8001aae:	bf8c      	ite	hi
 8001ab0:	2700      	movhi	r7, #0
 8001ab2:	2701      	movls	r7, #1
 8001ab4:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8001ab8:	d36d      	bcc.n	8001b96 <copy_dash+0x122>
    int pixel_x = x_base + x + offset;
 8001aba:	f104 0a05 	add.w	sl, r4, #5
 8001abe:	f102 0c05 	add.w	ip, r2, #5
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	9102      	str	r1, [sp, #8]
 8001ac6:	448a      	add	sl, r1
 8001ac8:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001acc:	45aa      	cmp	sl, r5
 8001ace:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8001ad2:	bf8c      	ite	hi
 8001ad4:	2500      	movhi	r5, #0
 8001ad6:	2501      	movls	r5, #1
 8001ad8:	9505      	str	r5, [sp, #20]
 8001ada:	1c8d      	adds	r5, r1, #2
    int pixel_x = x_base + x + offset;
 8001adc:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001ade:	ea6f 080c 	mvn.w	r8, ip
 8001ae2:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8001ae6:	b30f      	cbz	r7, 8001b2c <copy_dash+0xb8>
 8001ae8:	f1b8 0f00 	cmp.w	r8, #0
 8001aec:	d01e      	beq.n	8001b2c <copy_dash+0xb8>
 8001aee:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001af2:	da47      	bge.n	8001b84 <copy_dash+0x110>
    int pixel_x = x_base + x + offset;
 8001af4:	9902      	ldr	r1, [sp, #8]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001af6:	eb00 0946 	add.w	r9, r0, r6, lsl #1
 8001afa:	fa1f fb83 	uxth.w	fp, r3
    int pixel_x = x_base + x + offset;
 8001afe:	f101 0801 	add.w	r8, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b02:	f829 b01e 	strh.w	fp, [r9, lr, lsl #1]
 8001b06:	ea4f 0946 	mov.w	r9, r6, lsl #1
    int pixel_x = x_base + x + offset;
 8001b0a:	44a0      	add	r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b0c:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8001b10:	d31b      	bcc.n	8001b4a <copy_dash+0xd6>
 8001b12:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8001b16:	d320      	bcc.n	8001b5a <copy_dash+0xe6>
 8001b18:	9900      	ldr	r1, [sp, #0]
 8001b1a:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8001b1e:	d228      	bcs.n	8001b72 <copy_dash+0xfe>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b20:	f8dd 8000 	ldr.w	r8, [sp]
 8001b24:	44f0      	add	r8, lr
 8001b26:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b2a:	e022      	b.n	8001b72 <copy_dash+0xfe>
 8001b2c:	9901      	ldr	r1, [sp, #4]
 8001b2e:	2900      	cmp	r1, #0
 8001b30:	f000 809c 	beq.w	8001c6c <copy_dash+0x1f8>
 8001b34:	f1b8 0f00 	cmp.w	r8, #0
 8001b38:	f000 8098 	beq.w	8001c6c <copy_dash+0x1f8>
 8001b3c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001b40:	da20      	bge.n	8001b84 <copy_dash+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b42:	fa1f fb83 	uxth.w	fp, r3
 8001b46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001b4a:	44f0      	add	r8, lr
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b4c:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b50:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b54:	d206      	bcs.n	8001b64 <copy_dash+0xf0>
 8001b56:	ea4f 0946 	mov.w	r9, r6, lsl #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b5a:	f109 0904 	add.w	r9, r9, #4
 8001b5e:	4481      	add	r9, r0
 8001b60:	f829 b01e 	strh.w	fp, [r9, lr, lsl #1]
    int pixel_x = x_base + x + offset;
 8001b64:	9902      	ldr	r1, [sp, #8]
 8001b66:	f101 0803 	add.w	r8, r1, #3
 8001b6a:	44a0      	add	r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b6c:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8001b70:	d3d8      	bcc.n	8001b24 <copy_dash+0xb0>
 8001b72:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001b76:	d205      	bcs.n	8001b84 <copy_dash+0x110>
 8001b78:	9905      	ldr	r1, [sp, #20]
 8001b7a:	b119      	cbz	r1, 8001b84 <copy_dash+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001b7c:	eb0e 080a 	add.w	r8, lr, sl
 8001b80:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    for (int i = 5; i < 8; i++)
 8001b84:	f10c 0c01 	add.w	ip, ip, #1
 8001b88:	f50e 7ef0 	add.w	lr, lr, #480	@ 0x1e0
 8001b8c:	4562      	cmp	r2, ip
 8001b8e:	d1a6      	bne.n	8001ade <copy_dash+0x6a>
    {
        for (int j = 0; j < 6; j++) 
            fill_pixel(buffer, x, y, j, i, color);
    }
}
 8001b90:	b007      	add	sp, #28
 8001b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b96:	f102 0c05 	add.w	ip, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001b9a:	1c8d      	adds	r5, r1, #2
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
 8001ba4:	ea6f 090c 	mvn.w	r9, ip
    int pixel_x = x_base + x + offset;
 8001ba8:	4425      	add	r5, r4
 8001baa:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001bae:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8001bb2:	b3c7      	cbz	r7, 8001c26 <copy_dash+0x1b2>
 8001bb4:	f1b9 0f00 	cmp.w	r9, #0
 8001bb8:	d065      	beq.n	8001c86 <copy_dash+0x212>
 8001bba:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001bbe:	da26      	bge.n	8001c0e <copy_dash+0x19a>
    int pixel_x = x_base + x + offset;
 8001bc0:	f101 0a01 	add.w	sl, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001bc4:	eb00 0b46 	add.w	fp, r0, r6, lsl #1
 8001bc8:	f8bd 9008 	ldrh.w	r9, [sp, #8]
    int pixel_x = x_base + x + offset;
 8001bcc:	44a2      	add	sl, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001bce:	f82b 901e 	strh.w	r9, [fp, lr, lsl #1]
 8001bd2:	ea4f 0b46 	mov.w	fp, r6, lsl #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001bd6:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8001bda:	d330      	bcc.n	8001c3e <copy_dash+0x1ca>
 8001bdc:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8001be0:	d335      	bcc.n	8001c4e <copy_dash+0x1da>
 8001be2:	9b00      	ldr	r3, [sp, #0]
 8001be4:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001be8:	d204      	bcs.n	8001bf4 <copy_dash+0x180>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001bea:	f8dd a000 	ldr.w	sl, [sp]
 8001bee:	44f2      	add	sl, lr
 8001bf0:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    int pixel_x = x_base + x + offset;
 8001bf4:	f101 0a05 	add.w	sl, r1, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001bf8:	eb00 0b48 	add.w	fp, r0, r8, lsl #1
    int pixel_x = x_base + x + offset;
 8001bfc:	44a2      	add	sl, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001bfe:	f82b 901e 	strh.w	r9, [fp, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001c02:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8001c06:	d202      	bcs.n	8001c0e <copy_dash+0x19a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001c08:	44f2      	add	sl, lr
 8001c0a:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    for (int i = 5; i < 8; i++)
 8001c0e:	f10c 0c01 	add.w	ip, ip, #1
 8001c12:	f50e 7ef0 	add.w	lr, lr, #480	@ 0x1e0
 8001c16:	4562      	cmp	r2, ip
 8001c18:	d0ba      	beq.n	8001b90 <copy_dash+0x11c>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001c1a:	ea6f 090c 	mvn.w	r9, ip
 8001c1e:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8001c22:	2f00      	cmp	r7, #0
 8001c24:	d1c6      	bne.n	8001bb4 <copy_dash+0x140>
 8001c26:	f1b9 0f00 	cmp.w	r9, #0
 8001c2a:	d02c      	beq.n	8001c86 <copy_dash+0x212>
 8001c2c:	9b01      	ldr	r3, [sp, #4]
 8001c2e:	b353      	cbz	r3, 8001c86 <copy_dash+0x212>
 8001c30:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001c34:	daeb      	bge.n	8001c0e <copy_dash+0x19a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001c36:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8001c3a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8001c3e:	44f2      	add	sl, lr
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001c40:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001c44:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001c48:	d229      	bcs.n	8001c9e <copy_dash+0x22a>
 8001c4a:	ea4f 0b46 	mov.w	fp, r6, lsl #1
    int pixel_x = x_base + x + offset;
 8001c4e:	f101 0a03 	add.w	sl, r1, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001c52:	f10b 0b04 	add.w	fp, fp, #4
    int pixel_x = x_base + x + offset;
 8001c56:	44a2      	add	sl, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001c58:	4483      	add	fp, r0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001c5a:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001c5e:	f82b 901e 	strh.w	r9, [fp, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001c62:	d2c7      	bcs.n	8001bf4 <copy_dash+0x180>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001c64:	44f2      	add	sl, lr
 8001c66:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001c6a:	e7c3      	b.n	8001bf4 <copy_dash+0x180>
 8001c6c:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8001c70:	d225      	bcs.n	8001cbe <copy_dash+0x24a>
 8001c72:	f1b8 0f00 	cmp.w	r8, #0
 8001c76:	f43f af7c 	beq.w	8001b72 <copy_dash+0xfe>
 8001c7a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001c7e:	da81      	bge.n	8001b84 <copy_dash+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001c80:	fa1f fb83 	uxth.w	fp, r3
 8001c84:	e767      	b.n	8001b56 <copy_dash+0xe2>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001c86:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8001c8a:	d227      	bcs.n	8001cdc <copy_dash+0x268>
 8001c8c:	f1b9 0f00 	cmp.w	r9, #0
 8001c90:	d00c      	beq.n	8001cac <copy_dash+0x238>
 8001c92:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001c96:	daba      	bge.n	8001c0e <copy_dash+0x19a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001c98:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8001c9c:	e7d5      	b.n	8001c4a <copy_dash+0x1d6>
    int pixel_x = x_base + x + offset;
 8001c9e:	f101 0a03 	add.w	sl, r1, #3
 8001ca2:	44a2      	add	sl, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001ca4:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8001ca8:	d3a1      	bcc.n	8001bee <copy_dash+0x17a>
 8001caa:	e7a3      	b.n	8001bf4 <copy_dash+0x180>
 8001cac:	f1bc 0f00 	cmp.w	ip, #0
 8001cb0:	dbad      	blt.n	8001c0e <copy_dash+0x19a>
 8001cb2:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001cb6:	daaa      	bge.n	8001c0e <copy_dash+0x19a>
 8001cb8:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8001cbc:	e79a      	b.n	8001bf4 <copy_dash+0x180>
 8001cbe:	f1b8 0f00 	cmp.w	r8, #0
 8001cc2:	f43f af56 	beq.w	8001b72 <copy_dash+0xfe>
 8001cc6:	9904      	ldr	r1, [sp, #16]
 8001cc8:	2900      	cmp	r1, #0
 8001cca:	f43f af52 	beq.w	8001b72 <copy_dash+0xfe>
 8001cce:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001cd2:	f6bf af57 	bge.w	8001b84 <copy_dash+0x110>
 8001cd6:	fa1f fb83 	uxth.w	fp, r3
 8001cda:	e721      	b.n	8001b20 <copy_dash+0xac>
 8001cdc:	f1b9 0f00 	cmp.w	r9, #0
 8001ce0:	d0e4      	beq.n	8001cac <copy_dash+0x238>
 8001ce2:	9b04      	ldr	r3, [sp, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0e1      	beq.n	8001cac <copy_dash+0x238>
 8001ce8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001cec:	da8f      	bge.n	8001c0e <copy_dash+0x19a>
 8001cee:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8001cf2:	e77a      	b.n	8001bea <copy_dash+0x176>
 8001cf4:	240001b8 	.word	0x240001b8

08001cf8 <copy_hashtag>:
            fill_pixel(buffer, x, y, j, i, color);
    }
}

void copy_hashtag(uint16_t* buffer, int x, int y, uint32_t color)
{
 8001cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pixel_x = x_base + x + offset;
 8001cfc:	4c3a      	ldr	r4, [pc, #232]	@ (8001de8 <copy_hashtag+0xf0>)
{
 8001cfe:	4616      	mov	r6, r2
    for (int i = 2; i < 10; i++)
 8001d00:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
{
 8001d04:	460f      	mov	r7, r1
 8001d06:	6824      	ldr	r4, [r4, #0]
 8001d08:	f106 0e02 	add.w	lr, r6, #2
 8001d0c:	f106 080a 	add.w	r8, r6, #10
    int pixel_x = x_base + x + offset;
 8001d10:	1c65      	adds	r5, r4, #1
 8001d12:	1d22      	adds	r2, r4, #4
 8001d14:	440d      	add	r5, r1
 8001d16:	440a      	add	r2, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001d18:	f240 11df 	movw	r1, #479	@ 0x1df
 8001d1c:	eb05 1c49 	add.w	ip, r5, r9, lsl #5
 8001d20:	428d      	cmp	r5, r1
 8001d22:	ea4f 1949 	mov.w	r9, r9, lsl #5
 8001d26:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 8001d2a:	bf8c      	ite	hi
 8001d2c:	2500      	movhi	r5, #0
 8001d2e:	2501      	movls	r5, #1
 8001d30:	428a      	cmp	r2, r1
 8001d32:	bf8c      	ite	hi
 8001d34:	f04f 0a00 	movhi.w	sl, #0
 8001d38:	f04f 0a01 	movls.w	sl, #1
 8001d3c:	e009      	b.n	8001d52 <copy_hashtag+0x5a>
 8001d3e:	b111      	cbz	r1, 8001d46 <copy_hashtag+0x4e>
 8001d40:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001d44:	db13      	blt.n	8001d6e <copy_hashtag+0x76>
    for (int i = 2; i < 10; i++)
 8001d46:	f10e 0e01 	add.w	lr, lr, #1
 8001d4a:	f50c 7c70 	add.w	ip, ip, #960	@ 0x3c0
 8001d4e:	45f0      	cmp	r8, lr
 8001d50:	d01a      	beq.n	8001d88 <copy_hashtag+0x90>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001d52:	ea6f 010e 	mvn.w	r1, lr
 8001d56:	0fc9      	lsrs	r1, r1, #31
 8001d58:	2d00      	cmp	r5, #0
 8001d5a:	d1f0      	bne.n	8001d3e <copy_hashtag+0x46>
 8001d5c:	2900      	cmp	r1, #0
 8001d5e:	d0f2      	beq.n	8001d46 <copy_hashtag+0x4e>
 8001d60:	f1ba 0f00 	cmp.w	sl, #0
 8001d64:	d0ef      	beq.n	8001d46 <copy_hashtag+0x4e>
 8001d66:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001d6a:	db05      	blt.n	8001d78 <copy_hashtag+0x80>
 8001d6c:	e7eb      	b.n	8001d46 <copy_hashtag+0x4e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001d6e:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8001d72:	f8ac 3780 	strh.w	r3, [ip, #1920]	@ 0x780
    {
        for (int j = 1; j < 2; j++) 
 8001d76:	d2e6      	bcs.n	8001d46 <copy_hashtag+0x4e>
    for (int i = 2; i < 10; i++)
 8001d78:	f10e 0e01 	add.w	lr, lr, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001d7c:	f8ac 3786 	strh.w	r3, [ip, #1926]	@ 0x786
    for (int i = 2; i < 10; i++)
 8001d80:	f50c 7c70 	add.w	ip, ip, #960	@ 0x3c0
 8001d84:	45f0      	cmp	r8, lr
 8001d86:	d1e4      	bne.n	8001d52 <copy_hashtag+0x5a>
 8001d88:	f504 62f0 	add.w	r2, r4, #1920	@ 0x780
    int pixel_y = y_base + y;
 8001d8c:	f106 0e07 	add.w	lr, r6, #7
 8001d90:	1da1      	adds	r1, r4, #6
 8001d92:	3604      	adds	r6, #4
 8001d94:	443a      	add	r2, r7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001d96:	f240 15df 	movw	r5, #479	@ 0x1df
 8001d9a:	ea6f 0c06 	mvn.w	ip, r6
 8001d9e:	444a      	add	r2, r9
 8001da0:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8001da4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8001da8:	19e2      	adds	r2, r4, r7
 8001daa:	19cc      	adds	r4, r1, r7
 8001dac:	ea6f 070e 	mvn.w	r7, lr
 8001db0:	0fff      	lsrs	r7, r7, #31
 8001db2:	42aa      	cmp	r2, r5
 8001db4:	bf8c      	ite	hi
 8001db6:	2100      	movhi	r1, #0
 8001db8:	2101      	movls	r1, #1
 8001dba:	b161      	cbz	r1, 8001dd6 <copy_hashtag+0xde>
 8001dbc:	f1bc 0f00 	cmp.w	ip, #0
 8001dc0:	d002      	beq.n	8001dc8 <copy_hashtag+0xd0>
 8001dc2:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8001dc6:	db0c      	blt.n	8001de2 <copy_hashtag+0xea>
 8001dc8:	b129      	cbz	r1, 8001dd6 <copy_hashtag+0xde>
 8001dca:	b127      	cbz	r7, 8001dd6 <copy_hashtag+0xde>
 8001dcc:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001dd0:	da01      	bge.n	8001dd6 <copy_hashtag+0xde>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001dd2:	f8a0 3b40 	strh.w	r3, [r0, #2880]	@ 0xb40
            fill_pixel(buffer, x, y, j, i, color);
        for (int j = 4; j < 5; j++) 
            fill_pixel(buffer, x, y, j, i, color);
    }
    
    for (int i = 0; i < 6; i++)
 8001dd6:	3201      	adds	r2, #1
 8001dd8:	3002      	adds	r0, #2
 8001dda:	42a2      	cmp	r2, r4
 8001ddc:	d1e9      	bne.n	8001db2 <copy_hashtag+0xba>
        for (int j = 4; j < 5; j++) 
            fill_pixel(buffer, x, y, i, j, color);
        for (int j = 7; j < 8; j++) 
            fill_pixel(buffer, x, y, i, j, color);
    }
}
 8001dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001de2:	8003      	strh	r3, [r0, #0]
        for (int j = 4; j < 5; j++) 
 8001de4:	e7f0      	b.n	8001dc8 <copy_hashtag+0xd0>
 8001de6:	bf00      	nop
 8001de8:	240001b8 	.word	0x240001b8

08001dec <copy_at>:

void copy_at(uint16_t* buffer, int x, int y, uint32_t color)
{
 8001dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df0:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8001df4:	4cc6      	ldr	r4, [pc, #792]	@ (8002110 <copy_at+0x324>)
{
 8001df6:	b083      	sub	sp, #12
    int pixel_x = x_base + x + offset;
 8001df8:	6824      	ldr	r4, [r4, #0]
 8001dfa:	db44      	blt.n	8001e86 <copy_at+0x9a>
 8001dfc:	1d0d      	adds	r5, r1, #4
 8001dfe:	f101 0b02 	add.w	fp, r1, #2
 8001e02:	9500      	str	r5, [sp, #0]
 8001e04:	1d67      	adds	r7, r4, #5
 8001e06:	eb01 0804 	add.w	r8, r1, r4
 8001e0a:	440f      	add	r7, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e0c:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8001e10:	bf2c      	ite	cs
 8001e12:	f04f 0900 	movcs.w	r9, #0
 8001e16:	f04f 0901 	movcc.w	r9, #1
 8001e1a:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8001e1e:	f0c0 80b8 	bcc.w	8001f92 <copy_at+0x1a6>
 8001e22:	1c57      	adds	r7, r2, #1
 8001e24:	f100 83a9 	bmi.w	800257a <copy_at+0x78e>
 8001e28:	f1b9 0f00 	cmp.w	r9, #0
 8001e2c:	f000 83a5 	beq.w	800257a <copy_at+0x78e>
 8001e30:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8001e34:	f2c0 84d1 	blt.w	80027da <copy_at+0x9ee>
 8001e38:	f102 0e03 	add.w	lr, r2, #3
 8001e3c:	f102 0c06 	add.w	ip, r2, #6
    int pixel_x = x_base + x + offset;
 8001e40:	eb0b 0704 	add.w	r7, fp, r4
 8001e44:	1ce5      	adds	r5, r4, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e46:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8001e4a:	440d      	add	r5, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e4c:	bf2c      	ite	cs
 8001e4e:	f04f 0800 	movcs.w	r8, #0
 8001e52:	f04f 0801 	movcc.w	r8, #1
 8001e56:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8001e5a:	f0c0 815b 	bcc.w	8002114 <copy_at+0x328>
 8001e5e:	f1be 0f00 	cmp.w	lr, #0
 8001e62:	f2c0 8249 	blt.w	80022f8 <copy_at+0x50c>
 8001e66:	f1b8 0f00 	cmp.w	r8, #0
 8001e6a:	f000 8245 	beq.w	80022f8 <copy_at+0x50c>
 8001e6e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001e72:	f280 84a5 	bge.w	80027c0 <copy_at+0x9d4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001e76:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    int pixel_y = y_base + y;
 8001e7a:	1d15      	adds	r5, r2, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001e7c:	eb07 114e 	add.w	r1, r7, lr, lsl #5
 8001e80:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e84:	e24c      	b.n	8002320 <copy_at+0x534>
    int pixel_x = x_base + x + offset;
 8001e86:	1c4e      	adds	r6, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e88:	43d7      	mvns	r7, r2
    int pixel_x = x_base + x + offset;
 8001e8a:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001e8c:	0fff      	lsrs	r7, r7, #31
 8001e8e:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8001e92:	bf2c      	ite	cs
 8001e94:	f04f 0c00 	movcs.w	ip, #0
 8001e98:	f04f 0c01 	movcc.w	ip, #1
 8001e9c:	2f00      	cmp	r7, #0
 8001e9e:	f000 812d 	beq.w	80020fc <copy_at+0x310>
 8001ea2:	f1bc 0f00 	cmp.w	ip, #0
 8001ea6:	f000 8129 	beq.w	80020fc <copy_at+0x310>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001eaa:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8001eae:	eb06 1545 	add.w	r5, r6, r5, lsl #5
 8001eb2:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 8001eb6:	f102 050b 	add.w	r5, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001eba:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8001ebe:	da05      	bge.n	8001ecc <copy_at+0xe0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001ec0:	ebc5 1c05 	rsb	ip, r5, r5, lsl #4
 8001ec4:	eb06 164c 	add.w	r6, r6, ip, lsl #5
 8001ec8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    int pixel_x = x_base + x + offset;
 8001ecc:	f101 0b02 	add.w	fp, r1, #2
 8001ed0:	eb0b 0604 	add.w	r6, fp, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001ed4:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8001ed8:	bf2c      	ite	cs
 8001eda:	f04f 0c00 	movcs.w	ip, #0
 8001ede:	f04f 0c01 	movcc.w	ip, #1
 8001ee2:	2f00      	cmp	r7, #0
 8001ee4:	f000 818b 	beq.w	80021fe <copy_at+0x412>
 8001ee8:	f1bc 0f00 	cmp.w	ip, #0
 8001eec:	f000 8187 	beq.w	80021fe <copy_at+0x412>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001ef0:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 8001ef4:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8001ef8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001efc:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8001f00:	da05      	bge.n	8001f0e <copy_at+0x122>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f02:	ebc5 1c05 	rsb	ip, r5, r5, lsl #4
 8001f06:	eb06 164c 	add.w	r6, r6, ip, lsl #5
 8001f0a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    int pixel_x = x_base + x + offset;
 8001f0e:	1cce      	adds	r6, r1, #3
 8001f10:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001f12:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8001f16:	bf2c      	ite	cs
 8001f18:	f04f 0c00 	movcs.w	ip, #0
 8001f1c:	f04f 0c01 	movcc.w	ip, #1
 8001f20:	2f00      	cmp	r7, #0
 8001f22:	f000 8174 	beq.w	800220e <copy_at+0x422>
 8001f26:	f1bc 0f00 	cmp.w	ip, #0
 8001f2a:	f000 8170 	beq.w	800220e <copy_at+0x422>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f2e:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 8001f32:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8001f36:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001f3a:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8001f3e:	da05      	bge.n	8001f4c <copy_at+0x160>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f40:	ebc5 1c05 	rsb	ip, r5, r5, lsl #4
 8001f44:	eb06 164c 	add.w	r6, r6, ip, lsl #5
 8001f48:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    int pixel_x = x_base + x + offset;
 8001f4c:	1d0e      	adds	r6, r1, #4
 8001f4e:	eb06 0c04 	add.w	ip, r6, r4
 8001f52:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001f54:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8001f58:	bf2c      	ite	cs
 8001f5a:	f04f 0e00 	movcs.w	lr, #0
 8001f5e:	f04f 0e01 	movcc.w	lr, #1
 8001f62:	f1be 0f00 	cmp.w	lr, #0
 8001f66:	f000 815a 	beq.w	800221e <copy_at+0x432>
 8001f6a:	2f00      	cmp	r7, #0
 8001f6c:	f000 8157 	beq.w	800221e <copy_at+0x432>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f70:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8001f74:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8001f78:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001f7c:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8001f80:	f6bf af40 	bge.w	8001e04 <copy_at+0x18>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001f84:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8001f88:	eb0c 1c45 	add.w	ip, ip, r5, lsl #5
 8001f8c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    for (int i = 1; i < 5; i++)
 8001f90:	e738      	b.n	8001e04 <copy_at+0x18>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001f92:	f112 0c01 	adds.w	ip, r2, #1
 8001f96:	9701      	str	r7, [sp, #4]
 8001f98:	f100 823b 	bmi.w	8002412 <copy_at+0x626>
 8001f9c:	f1b9 0f00 	cmp.w	r9, #0
 8001fa0:	f000 8237 	beq.w	8002412 <copy_at+0x626>
 8001fa4:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8001fa8:	f6bf af46 	bge.w	8001e38 <copy_at+0x4c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001fac:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
    int pixel_y = y_base + y;
 8001fb0:	f102 0e02 	add.w	lr, r2, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001fb4:	b29d      	uxth	r5, r3
 8001fb6:	eb08 194c 	add.w	r9, r8, ip, lsl #5
 8001fba:	eb07 1c4c 	add.w	ip, r7, ip, lsl #5
 8001fbe:	f820 5019 	strh.w	r5, [r0, r9, lsl #1]
 8001fc2:	f820 501c 	strh.w	r5, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001fc6:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001fca:	f6bf af35 	bge.w	8001e38 <copy_at+0x4c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001fce:	ebce 150e 	rsb	r5, lr, lr, lsl #4
    int pixel_y = y_base + y;
 8001fd2:	f102 0e03 	add.w	lr, r2, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001fd6:	fa1f fc83 	uxth.w	ip, r3
 8001fda:	eb08 1945 	add.w	r9, r8, r5, lsl #5
 8001fde:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 8001fe2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8001fe6:	f820 c015 	strh.w	ip, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8001fea:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8001fee:	f280 8469 	bge.w	80028c4 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001ff2:	ebce 150e 	rsb	r5, lr, lr, lsl #4
    int pixel_y = y_base + y;
 8001ff6:	f102 0c04 	add.w	ip, r2, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8001ffa:	fa1f f983 	uxth.w	r9, r3
 8001ffe:	eb08 1a45 	add.w	sl, r8, r5, lsl #5
 8002002:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 8002006:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
 800200a:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800200e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8002012:	f280 8457 	bge.w	80028c4 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002016:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
    int pixel_y = y_base + y;
 800201a:	f102 0a05 	add.w	sl, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800201e:	b29d      	uxth	r5, r3
 8002020:	eb08 194c 	add.w	r9, r8, ip, lsl #5
 8002024:	eb07 1c4c 	add.w	ip, r7, ip, lsl #5
 8002028:	f820 5019 	strh.w	r5, [r0, r9, lsl #1]
 800202c:	f820 501c 	strh.w	r5, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002030:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8002034:	f280 8446 	bge.w	80028c4 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002038:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
    int pixel_y = y_base + y;
 800203c:	f102 0c06 	add.w	ip, r2, #6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002040:	b29d      	uxth	r5, r3
 8002042:	eb08 194a 	add.w	r9, r8, sl, lsl #5
 8002046:	eb07 1a4a 	add.w	sl, r7, sl, lsl #5
 800204a:	f820 5019 	strh.w	r5, [r0, r9, lsl #1]
 800204e:	f820 501a 	strh.w	r5, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002052:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8002056:	f6bf aef3 	bge.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800205a:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
    int pixel_y = y_base + y;
 800205e:	f102 0a07 	add.w	sl, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002062:	fa1f f983 	uxth.w	r9, r3
 8002066:	eb08 1645 	add.w	r6, r8, r5, lsl #5
 800206a:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 800206e:	f820 9016 	strh.w	r9, [r0, r6, lsl #1]
 8002072:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002076:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800207a:	f6bf aee1 	bge.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800207e:	ebca 150a 	rsb	r5, sl, sl, lsl #4
    int pixel_y = y_base + y;
 8002082:	f102 0a08 	add.w	sl, r2, #8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002086:	fa1f f983 	uxth.w	r9, r3
 800208a:	eb08 1645 	add.w	r6, r8, r5, lsl #5
 800208e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 8002092:	f820 9016 	strh.w	r9, [r0, r6, lsl #1]
 8002096:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800209a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800209e:	f6bf aecf 	bge.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80020a2:	ebca 150a 	rsb	r5, sl, sl, lsl #4
    int pixel_y = y_base + y;
 80020a6:	f102 0a09 	add.w	sl, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80020aa:	fa1f f983 	uxth.w	r9, r3
 80020ae:	eb08 1645 	add.w	r6, r8, r5, lsl #5
 80020b2:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 80020b6:	f820 9016 	strh.w	r9, [r0, r6, lsl #1]
 80020ba:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80020be:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80020c2:	f6bf aebd 	bge.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80020c6:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80020ca:	b29d      	uxth	r5, r3
 80020cc:	eb07 174a 	add.w	r7, r7, sl, lsl #5
 80020d0:	eb08 1a4a 	add.w	sl, r8, sl, lsl #5
 80020d4:	f820 501a 	strh.w	r5, [r0, sl, lsl #1]
 80020d8:	f820 5017 	strh.w	r5, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 80020dc:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80020e0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80020e4:	f6bf aeac 	bge.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80020e8:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80020ec:	fa1f f983 	uxth.w	r9, r3
 80020f0:	eb08 1847 	add.w	r8, r8, r7, lsl #5
 80020f4:	017f      	lsls	r7, r7, #5
 80020f6:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80020fa:	e239      	b.n	8002570 <copy_at+0x784>
 80020fc:	f112 050b 	adds.w	r5, r2, #11
 8002100:	f53f aee4 	bmi.w	8001ecc <copy_at+0xe0>
 8002104:	f1bc 0f00 	cmp.w	ip, #0
 8002108:	f43f aee0 	beq.w	8001ecc <copy_at+0xe0>
 800210c:	e6d5      	b.n	8001eba <copy_at+0xce>
 800210e:	bf00      	nop
 8002110:	240001b8 	.word	0x240001b8
 8002114:	f1be 0f00 	cmp.w	lr, #0
 8002118:	46a9      	mov	r9, r5
 800211a:	f2c0 8088 	blt.w	800222e <copy_at+0x442>
 800211e:	f1b8 0f00 	cmp.w	r8, #0
 8002122:	f000 8084 	beq.w	800222e <copy_at+0x442>
 8002126:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800212a:	da57      	bge.n	80021dc <copy_at+0x3f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800212c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    int pixel_y = y_base + y;
 8002130:	f102 0a04 	add.w	sl, r2, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002134:	fa1f fb83 	uxth.w	fp, r3
 8002138:	eb07 114e 	add.w	r1, r7, lr, lsl #5
 800213c:	f820 b011 	strh.w	fp, [r0, r1, lsl #1]
 8002140:	eb05 114e 	add.w	r1, r5, lr, lsl #5
 8002144:	f820 b011 	strh.w	fp, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002148:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800214c:	da46      	bge.n	80021dc <copy_at+0x3f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800214e:	ebca 110a 	rsb	r1, sl, sl, lsl #4
    int pixel_y = y_base + y;
 8002152:	f102 0a05 	add.w	sl, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002156:	fa1f fe83 	uxth.w	lr, r3
 800215a:	eb07 1b41 	add.w	fp, r7, r1, lsl #5
 800215e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 8002162:	f820 e01b 	strh.w	lr, [r0, fp, lsl #1]
 8002166:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800216a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800216e:	da35      	bge.n	80021dc <copy_at+0x3f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002170:	ebca 110a 	rsb	r1, sl, sl, lsl #4
 8002174:	fa1f fe83 	uxth.w	lr, r3
 8002178:	eb07 1b41 	add.w	fp, r7, r1, lsl #5
 800217c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 8002180:	f820 e01b 	strh.w	lr, [r0, fp, lsl #1]
 8002184:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002188:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800218c:	da1a      	bge.n	80021c4 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800218e:	ebcc 110c 	rsb	r1, ip, ip, lsl #4
    int pixel_y = y_base + y;
 8002192:	3207      	adds	r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002194:	fa1f fe83 	uxth.w	lr, r3
 8002198:	eb05 1541 	add.w	r5, r5, r1, lsl #5
 800219c:	eb07 1141 	add.w	r1, r7, r1, lsl #5
 80021a0:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 80021a4:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80021a8:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80021ac:	da0a      	bge.n	80021c4 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80021ae:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80021b2:	b299      	uxth	r1, r3
 80021b4:	eb07 1542 	add.w	r5, r7, r2, lsl #5
 80021b8:	0152      	lsls	r2, r2, #5
 80021ba:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
 80021be:	4491      	add	r9, r2
 80021c0:	f820 1019 	strh.w	r1, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80021c4:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80021c8:	d208      	bcs.n	80021dc <copy_at+0x3f0>
 80021ca:	f1b8 0f00 	cmp.w	r8, #0
 80021ce:	d005      	beq.n	80021dc <copy_at+0x3f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80021d0:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80021d4:	eb07 124a 	add.w	r2, r7, sl, lsl #5
 80021d8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    int pixel_x = x_base + x + offset;
 80021dc:	9e00      	ldr	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80021de:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80021e2:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80021e4:	d208      	bcs.n	80021f8 <copy_at+0x40c>
 80021e6:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80021ea:	d205      	bcs.n	80021f8 <copy_at+0x40c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80021ec:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80021f0:	eb06 164c 	add.w	r6, r6, ip, lsl #5
 80021f4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
        fill_pixel(buffer, x, y, 2, i, color);
        fill_pixel(buffer, x, y, 3, i, color);
    }
    fill_pixel(buffer, x, y, 2, 5, color);
    fill_pixel(buffer, x, y, 4, 6, color);
}
 80021f8:	b003      	add	sp, #12
 80021fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80021fe:	2d00      	cmp	r5, #0
 8002200:	f6ff ae85 	blt.w	8001f0e <copy_at+0x122>
 8002204:	f1bc 0f00 	cmp.w	ip, #0
 8002208:	f43f ae81 	beq.w	8001f0e <copy_at+0x122>
 800220c:	e676      	b.n	8001efc <copy_at+0x110>
 800220e:	2d00      	cmp	r5, #0
 8002210:	f6ff ae9c 	blt.w	8001f4c <copy_at+0x160>
 8002214:	f1bc 0f00 	cmp.w	ip, #0
 8002218:	f43f ae98 	beq.w	8001f4c <copy_at+0x160>
 800221c:	e68d      	b.n	8001f3a <copy_at+0x14e>
 800221e:	2d00      	cmp	r5, #0
 8002220:	f6ff adf0 	blt.w	8001e04 <copy_at+0x18>
 8002224:	f1be 0f00 	cmp.w	lr, #0
 8002228:	f43f adec 	beq.w	8001e04 <copy_at+0x18>
 800222c:	e6a6      	b.n	8001f7c <copy_at+0x190>
    int pixel_x = x_base + x + offset;
 800222e:	3103      	adds	r1, #3
 8002230:	eb01 0a04 	add.w	sl, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002234:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8002238:	d208      	bcs.n	800224c <copy_at+0x460>
 800223a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800223e:	d205      	bcs.n	800224c <copy_at+0x460>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002240:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002244:	eb0a 1a4e 	add.w	sl, sl, lr, lsl #5
 8002248:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800224c:	f112 0a04 	adds.w	sl, r2, #4
 8002250:	d403      	bmi.n	800225a <copy_at+0x46e>
 8002252:	f1b8 0f00 	cmp.w	r8, #0
 8002256:	f47f af77 	bne.w	8002148 <copy_at+0x35c>
    int pixel_x = x_base + x + offset;
 800225a:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800225e:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8002262:	d208      	bcs.n	8002276 <copy_at+0x48a>
 8002264:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8002268:	d205      	bcs.n	8002276 <copy_at+0x48a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800226a:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 800226e:	eb0e 1e4a 	add.w	lr, lr, sl, lsl #5
 8002272:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002276:	f112 0a05 	adds.w	sl, r2, #5
 800227a:	d403      	bmi.n	8002284 <copy_at+0x498>
 800227c:	f1b8 0f00 	cmp.w	r8, #0
 8002280:	f47f af73 	bne.w	800216a <copy_at+0x37e>
    int pixel_x = x_base + x + offset;
 8002284:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002288:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800228c:	d208      	bcs.n	80022a0 <copy_at+0x4b4>
 800228e:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8002292:	d205      	bcs.n	80022a0 <copy_at+0x4b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002294:	ebca 1b0a 	rsb	fp, sl, sl, lsl #4
 8002298:	eb0e 1e4b 	add.w	lr, lr, fp, lsl #5
 800229c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80022a0:	f1bc 0f00 	cmp.w	ip, #0
 80022a4:	db03      	blt.n	80022ae <copy_at+0x4c2>
 80022a6:	f1b8 0f00 	cmp.w	r8, #0
 80022aa:	f47f af6d 	bne.w	8002188 <copy_at+0x39c>
    int pixel_x = x_base + x + offset;
 80022ae:	190d      	adds	r5, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80022b0:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80022b4:	d208      	bcs.n	80022c8 <copy_at+0x4dc>
 80022b6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80022ba:	d205      	bcs.n	80022c8 <copy_at+0x4dc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80022bc:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
 80022c0:	eb05 154e 	add.w	r5, r5, lr, lsl #5
 80022c4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80022c8:	3207      	adds	r2, #7
 80022ca:	d403      	bmi.n	80022d4 <copy_at+0x4e8>
 80022cc:	f1b8 0f00 	cmp.w	r8, #0
 80022d0:	f47f af6a 	bne.w	80021a8 <copy_at+0x3bc>
    int pixel_x = x_base + x + offset;
 80022d4:	eb01 0904 	add.w	r9, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80022d8:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 80022dc:	f4bf af72 	bcs.w	80021c4 <copy_at+0x3d8>
 80022e0:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80022e4:	f4bf af6e 	bcs.w	80021c4 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80022e8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80022ec:	b299      	uxth	r1, r3
 80022ee:	0152      	lsls	r2, r2, #5
 80022f0:	4491      	add	r9, r2
 80022f2:	f820 1019 	strh.w	r1, [r0, r9, lsl #1]
    for (int i = 3; i < 8; i++)
 80022f6:	e765      	b.n	80021c4 <copy_at+0x3d8>
    int pixel_x = x_base + x + offset;
 80022f8:	3103      	adds	r1, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80022fa:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80022fe:	eb01 0504 	add.w	r5, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002302:	d208      	bcs.n	8002316 <copy_at+0x52a>
 8002304:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8002308:	d205      	bcs.n	8002316 <copy_at+0x52a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800230a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800230e:	eb05 154e 	add.w	r5, r5, lr, lsl #5
 8002312:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002316:	1d15      	adds	r5, r2, #4
 8002318:	d40f      	bmi.n	800233a <copy_at+0x54e>
 800231a:	f1b8 0f00 	cmp.w	r8, #0
 800231e:	d00c      	beq.n	800233a <copy_at+0x54e>
 8002320:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8002324:	f280 824c 	bge.w	80027c0 <copy_at+0x9d4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002328:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    int pixel_y = y_base + y;
 800232c:	f102 0a05 	add.w	sl, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002330:	eb07 1145 	add.w	r1, r7, r5, lsl #5
 8002334:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002338:	e013      	b.n	8002362 <copy_at+0x576>
 800233a:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 800233e:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002342:	d208      	bcs.n	8002356 <copy_at+0x56a>
 8002344:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8002348:	d205      	bcs.n	8002356 <copy_at+0x56a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800234a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800234e:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 8002352:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002356:	f112 0a05 	adds.w	sl, r2, #5
 800235a:	d40d      	bmi.n	8002378 <copy_at+0x58c>
 800235c:	f1b8 0f00 	cmp.w	r8, #0
 8002360:	d00a      	beq.n	8002378 <copy_at+0x58c>
 8002362:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8002366:	f6bf af2d 	bge.w	80021c4 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800236a:	ebca 110a 	rsb	r1, sl, sl, lsl #4
 800236e:	eb07 1141 	add.w	r1, r7, r1, lsl #5
 8002372:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002376:	e013      	b.n	80023a0 <copy_at+0x5b4>
 8002378:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 800237c:	eb01 0504 	add.w	r5, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002380:	d208      	bcs.n	8002394 <copy_at+0x5a8>
 8002382:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8002386:	d205      	bcs.n	8002394 <copy_at+0x5a8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002388:	ebca 1e0a 	rsb	lr, sl, sl, lsl #4
 800238c:	eb05 154e 	add.w	r5, r5, lr, lsl #5
 8002390:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002394:	f1bc 0f00 	cmp.w	ip, #0
 8002398:	db0e      	blt.n	80023b8 <copy_at+0x5cc>
 800239a:	f1b8 0f00 	cmp.w	r8, #0
 800239e:	d00b      	beq.n	80023b8 <copy_at+0x5cc>
 80023a0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80023a4:	f6bf af0e 	bge.w	80021c4 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80023a8:	ebcc 110c 	rsb	r1, ip, ip, lsl #4
    int pixel_y = y_base + y;
 80023ac:	3207      	adds	r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80023ae:	eb07 1141 	add.w	r1, r7, r1, lsl #5
 80023b2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80023b6:	e011      	b.n	80023dc <copy_at+0x5f0>
    int pixel_x = x_base + x + offset;
 80023b8:	190d      	adds	r5, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80023ba:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80023be:	d208      	bcs.n	80023d2 <copy_at+0x5e6>
 80023c0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80023c4:	d205      	bcs.n	80023d2 <copy_at+0x5e6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80023c6:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
 80023ca:	eb05 154e 	add.w	r5, r5, lr, lsl #5
 80023ce:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80023d2:	3207      	adds	r2, #7
 80023d4:	d40d      	bmi.n	80023f2 <copy_at+0x606>
 80023d6:	f1b8 0f00 	cmp.w	r8, #0
 80023da:	d00a      	beq.n	80023f2 <copy_at+0x606>
 80023dc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80023e0:	f6bf aef0 	bge.w	80021c4 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80023e4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80023e8:	eb07 1242 	add.w	r2, r7, r2, lsl #5
 80023ec:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80023f0:	e6e8      	b.n	80021c4 <copy_at+0x3d8>
    int pixel_x = x_base + x + offset;
 80023f2:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80023f4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80023f8:	f4bf aee4 	bcs.w	80021c4 <copy_at+0x3d8>
 80023fc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002400:	f4bf aee0 	bcs.w	80021c4 <copy_at+0x3d8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002404:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002408:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 800240c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8002410:	e6d8      	b.n	80021c4 <copy_at+0x3d8>
    int pixel_x = x_base + x + offset;
 8002412:	1d4d      	adds	r5, r1, #5
 8002414:	eb05 0e04 	add.w	lr, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002418:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800241c:	d208      	bcs.n	8002430 <copy_at+0x644>
 800241e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8002422:	d205      	bcs.n	8002430 <copy_at+0x644>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002424:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8002428:	eb0e 1e4c 	add.w	lr, lr, ip, lsl #5
 800242c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002430:	f112 0e02 	adds.w	lr, r2, #2
 8002434:	f140 81fc 	bpl.w	8002830 <copy_at+0xa44>
    int pixel_x = x_base + x + offset;
 8002438:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800243c:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002440:	d208      	bcs.n	8002454 <copy_at+0x668>
 8002442:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002446:	d205      	bcs.n	8002454 <copy_at+0x668>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002448:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800244c:	eb0c 1c4e 	add.w	ip, ip, lr, lsl #5
 8002450:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002454:	f112 0e03 	adds.w	lr, r2, #3
 8002458:	f140 81df 	bpl.w	800281a <copy_at+0xa2e>
    int pixel_x = x_base + x + offset;
 800245c:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002460:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002464:	d208      	bcs.n	8002478 <copy_at+0x68c>
 8002466:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800246a:	d205      	bcs.n	8002478 <copy_at+0x68c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800246c:	ebce 1a0e 	rsb	sl, lr, lr, lsl #4
 8002470:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
 8002474:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002478:	f112 0c04 	adds.w	ip, r2, #4
 800247c:	f140 81ee 	bpl.w	800285c <copy_at+0xa70>
    int pixel_x = x_base + x + offset;
 8002480:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002484:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8002488:	d208      	bcs.n	800249c <copy_at+0x6b0>
 800248a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800248e:	d205      	bcs.n	800249c <copy_at+0x6b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002490:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8002494:	eb0a 1a4c 	add.w	sl, sl, ip, lsl #5
 8002498:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800249c:	f112 0a05 	adds.w	sl, r2, #5
 80024a0:	f140 81d1 	bpl.w	8002846 <copy_at+0xa5a>
    int pixel_x = x_base + x + offset;
 80024a4:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80024a8:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80024ac:	d208      	bcs.n	80024c0 <copy_at+0x6d4>
 80024ae:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80024b2:	d205      	bcs.n	80024c0 <copy_at+0x6d4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80024b4:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80024b8:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
 80024bc:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80024c0:	f112 0c06 	adds.w	ip, r2, #6
 80024c4:	f140 81df 	bpl.w	8002886 <copy_at+0xa9a>
    int pixel_x = x_base + x + offset;
 80024c8:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80024cc:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 80024d0:	d208      	bcs.n	80024e4 <copy_at+0x6f8>
 80024d2:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80024d6:	d205      	bcs.n	80024e4 <copy_at+0x6f8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80024d8:	ebcc 160c 	rsb	r6, ip, ip, lsl #4
 80024dc:	eb0a 1a46 	add.w	sl, sl, r6, lsl #5
 80024e0:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80024e4:	f112 0a07 	adds.w	sl, r2, #7
 80024e8:	f140 81c3 	bpl.w	8002872 <copy_at+0xa86>
    int pixel_x = x_base + x + offset;
 80024ec:	192e      	adds	r6, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80024ee:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80024f2:	d208      	bcs.n	8002506 <copy_at+0x71a>
 80024f4:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80024f8:	d205      	bcs.n	8002506 <copy_at+0x71a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80024fa:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80024fe:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 8002502:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002506:	f112 0a08 	adds.w	sl, r2, #8
 800250a:	f140 81d1 	bpl.w	80028b0 <copy_at+0xac4>
    int pixel_x = x_base + x + offset;
 800250e:	192e      	adds	r6, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002510:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8002514:	d208      	bcs.n	8002528 <copy_at+0x73c>
 8002516:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800251a:	d205      	bcs.n	8002528 <copy_at+0x73c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800251c:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8002520:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 8002524:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002528:	f112 0a09 	adds.w	sl, r2, #9
 800252c:	f140 81b6 	bpl.w	800289c <copy_at+0xab0>
    int pixel_x = x_base + x + offset;
 8002530:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002532:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8002536:	d208      	bcs.n	800254a <copy_at+0x75e>
 8002538:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800253c:	d205      	bcs.n	800254a <copy_at+0x75e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800253e:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8002542:	eb07 174a 	add.w	r7, r7, sl, lsl #5
 8002546:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800254a:	f112 070a 	adds.w	r7, r2, #10
 800254e:	f140 8158 	bpl.w	8002802 <copy_at+0xa16>
    int pixel_x = x_base + x + offset;
 8002552:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002554:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8002558:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800255a:	f4bf ac71 	bcs.w	8001e40 <copy_at+0x54>
 800255e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8002562:	f4bf ac6d 	bcs.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002566:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800256a:	fa1f f983 	uxth.w	r9, r3
 800256e:	017f      	lsls	r7, r7, #5
 8002570:	9d01      	ldr	r5, [sp, #4]
 8002572:	443d      	add	r5, r7
 8002574:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    for (int i = 1; i < 11; i++)
 8002578:	e462      	b.n	8001e40 <copy_at+0x54>
    int pixel_x = x_base + x + offset;
 800257a:	1d4d      	adds	r5, r1, #5
 800257c:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002580:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002584:	d208      	bcs.n	8002598 <copy_at+0x7ac>
 8002586:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800258a:	d205      	bcs.n	8002598 <copy_at+0x7ac>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800258c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002590:	eb0c 1c47 	add.w	ip, ip, r7, lsl #5
 8002594:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002598:	1c97      	adds	r7, r2, #2
 800259a:	f140 8114 	bpl.w	80027c6 <copy_at+0x9da>
    int pixel_x = x_base + x + offset;
 800259e:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80025a2:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80025a6:	d208      	bcs.n	80025ba <copy_at+0x7ce>
 80025a8:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80025ac:	d205      	bcs.n	80025ba <copy_at+0x7ce>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80025ae:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80025b2:	eb0c 1c47 	add.w	ip, ip, r7, lsl #5
 80025b6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80025ba:	f112 0e03 	adds.w	lr, r2, #3
 80025be:	d40e      	bmi.n	80025de <copy_at+0x7f2>
 80025c0:	f1b9 0f00 	cmp.w	r9, #0
 80025c4:	d00b      	beq.n	80025de <copy_at+0x7f2>
 80025c6:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80025ca:	f280 817b 	bge.w	80028c4 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80025ce:	ebce 150e 	rsb	r5, lr, lr, lsl #4
    int pixel_y = y_base + y;
 80025d2:	1d17      	adds	r7, r2, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80025d4:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 80025d8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80025dc:	e011      	b.n	8002602 <copy_at+0x816>
    int pixel_x = x_base + x + offset;
 80025de:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80025e0:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80025e4:	d208      	bcs.n	80025f8 <copy_at+0x80c>
 80025e6:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80025ea:	d205      	bcs.n	80025f8 <copy_at+0x80c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80025ec:	ebce 1c0e 	rsb	ip, lr, lr, lsl #4
 80025f0:	eb07 174c 	add.w	r7, r7, ip, lsl #5
 80025f4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80025f8:	1d17      	adds	r7, r2, #4
 80025fa:	d40f      	bmi.n	800261c <copy_at+0x830>
 80025fc:	f1b9 0f00 	cmp.w	r9, #0
 8002600:	d00c      	beq.n	800261c <copy_at+0x830>
 8002602:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8002606:	f280 815d 	bge.w	80028c4 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800260a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    int pixel_y = y_base + y;
 800260e:	f102 0a05 	add.w	sl, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002612:	eb08 1547 	add.w	r5, r8, r7, lsl #5
 8002616:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800261a:	e013      	b.n	8002644 <copy_at+0x858>
    int pixel_x = x_base + x + offset;
 800261c:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002620:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002624:	d208      	bcs.n	8002638 <copy_at+0x84c>
 8002626:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800262a:	d205      	bcs.n	8002638 <copy_at+0x84c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800262c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002630:	eb0c 1c47 	add.w	ip, ip, r7, lsl #5
 8002634:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002638:	f112 0a05 	adds.w	sl, r2, #5
 800263c:	d40f      	bmi.n	800265e <copy_at+0x872>
 800263e:	f1b9 0f00 	cmp.w	r9, #0
 8002642:	d00c      	beq.n	800265e <copy_at+0x872>
 8002644:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8002648:	f280 813c 	bge.w	80028c4 <copy_at+0xad8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800264c:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
    int pixel_y = y_base + y;
 8002650:	f102 0c06 	add.w	ip, r2, #6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002654:	eb08 154a 	add.w	r5, r8, sl, lsl #5
 8002658:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800265c:	e012      	b.n	8002684 <copy_at+0x898>
    int pixel_x = x_base + x + offset;
 800265e:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002660:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8002664:	d208      	bcs.n	8002678 <copy_at+0x88c>
 8002666:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800266a:	d205      	bcs.n	8002678 <copy_at+0x88c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800266c:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8002670:	eb07 174a 	add.w	r7, r7, sl, lsl #5
 8002674:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002678:	f112 0c06 	adds.w	ip, r2, #6
 800267c:	d40e      	bmi.n	800269c <copy_at+0x8b0>
 800267e:	f1b9 0f00 	cmp.w	r9, #0
 8002682:	d00b      	beq.n	800269c <copy_at+0x8b0>
 8002684:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8002688:	f6bf abda 	bge.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800268c:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
    int pixel_y = y_base + y;
 8002690:	1dd7      	adds	r7, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002692:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 8002696:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800269a:	e011      	b.n	80026c0 <copy_at+0x8d4>
    int pixel_x = x_base + x + offset;
 800269c:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800269e:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80026a2:	d208      	bcs.n	80026b6 <copy_at+0x8ca>
 80026a4:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80026a8:	d205      	bcs.n	80026b6 <copy_at+0x8ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80026aa:	ebcc 1a0c 	rsb	sl, ip, ip, lsl #4
 80026ae:	eb07 174a 	add.w	r7, r7, sl, lsl #5
 80026b2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80026b6:	1dd7      	adds	r7, r2, #7
 80026b8:	d40f      	bmi.n	80026da <copy_at+0x8ee>
 80026ba:	f1b9 0f00 	cmp.w	r9, #0
 80026be:	d00c      	beq.n	80026da <copy_at+0x8ee>
 80026c0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80026c4:	f6bf abbc 	bge.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80026c8:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80026cc:	eb08 1547 	add.w	r5, r8, r7, lsl #5
    int pixel_y = y_base + y;
 80026d0:	f102 0708 	add.w	r7, r2, #8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80026d4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80026d8:	e013      	b.n	8002702 <copy_at+0x916>
    int pixel_x = x_base + x + offset;
 80026da:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80026de:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 80026e2:	d208      	bcs.n	80026f6 <copy_at+0x90a>
 80026e4:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80026e8:	d205      	bcs.n	80026f6 <copy_at+0x90a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80026ea:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80026ee:	eb0a 1a47 	add.w	sl, sl, r7, lsl #5
 80026f2:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80026f6:	f112 0708 	adds.w	r7, r2, #8
 80026fa:	d40f      	bmi.n	800271c <copy_at+0x930>
 80026fc:	f1b9 0f00 	cmp.w	r9, #0
 8002700:	d00c      	beq.n	800271c <copy_at+0x930>
 8002702:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8002706:	f6bf ab9b 	bge.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800270a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800270e:	eb08 1547 	add.w	r5, r8, r7, lsl #5
    int pixel_y = y_base + y;
 8002712:	f102 0709 	add.w	r7, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002716:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800271a:	e013      	b.n	8002744 <copy_at+0x958>
    int pixel_x = x_base + x + offset;
 800271c:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002720:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8002724:	d208      	bcs.n	8002738 <copy_at+0x94c>
 8002726:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800272a:	d205      	bcs.n	8002738 <copy_at+0x94c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800272c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002730:	eb0a 1a47 	add.w	sl, sl, r7, lsl #5
 8002734:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002738:	f112 0709 	adds.w	r7, r2, #9
 800273c:	d40f      	bmi.n	800275e <copy_at+0x972>
 800273e:	f1b9 0f00 	cmp.w	r9, #0
 8002742:	d00c      	beq.n	800275e <copy_at+0x972>
 8002744:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8002748:	f6bf ab7a 	bge.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800274c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002750:	eb08 1547 	add.w	r5, r8, r7, lsl #5
    int pixel_y = y_base + y;
 8002754:	f102 070a 	add.w	r7, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002758:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800275c:	e013      	b.n	8002786 <copy_at+0x99a>
    int pixel_x = x_base + x + offset;
 800275e:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002762:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8002766:	d208      	bcs.n	800277a <copy_at+0x98e>
 8002768:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800276c:	d205      	bcs.n	800277a <copy_at+0x98e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800276e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002772:	eb0a 1a47 	add.w	sl, sl, r7, lsl #5
 8002776:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800277a:	f112 070a 	adds.w	r7, r2, #10
 800277e:	d40e      	bmi.n	800279e <copy_at+0x9b2>
 8002780:	f1b9 0f00 	cmp.w	r9, #0
 8002784:	d00b      	beq.n	800279e <copy_at+0x9b2>
 8002786:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800278a:	f6bf ab59 	bge.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800278e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8002792:	eb08 1547 	add.w	r5, r8, r7, lsl #5
 8002796:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800279a:	f7ff bb51 	b.w	8001e40 <copy_at+0x54>
 800279e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80027a2:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80027a4:	f4bf ab4c 	bcs.w	8001e40 <copy_at+0x54>
 80027a8:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80027ac:	f4bf ab48 	bcs.w	8001e40 <copy_at+0x54>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80027b0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80027b4:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 80027b8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80027bc:	f7ff bb40 	b.w	8001e40 <copy_at+0x54>
 80027c0:	f102 0a05 	add.w	sl, r2, #5
 80027c4:	e4fe      	b.n	80021c4 <copy_at+0x3d8>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80027c6:	f1b9 0f00 	cmp.w	r9, #0
 80027ca:	d10d      	bne.n	80027e8 <copy_at+0x9fc>
    int pixel_x = x_base + x + offset;
 80027cc:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80027d0:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80027d4:	f4ff aee8 	bcc.w	80025a8 <copy_at+0x7bc>
 80027d8:	e6ef      	b.n	80025ba <copy_at+0x7ce>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80027da:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80027de:	eb08 1547 	add.w	r5, r8, r7, lsl #5
    int pixel_y = y_base + y;
 80027e2:	1c97      	adds	r7, r2, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80027e4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80027e8:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80027ec:	f6bf ab24 	bge.w	8001e38 <copy_at+0x4c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80027f0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    int pixel_y = y_base + y;
 80027f4:	f102 0e03 	add.w	lr, r2, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80027f8:	eb08 1547 	add.w	r5, r8, r7, lsl #5
 80027fc:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002800:	e6e1      	b.n	80025c6 <copy_at+0x7da>
 8002802:	f1b9 0f00 	cmp.w	r9, #0
 8002806:	f47f ac6b 	bne.w	80020e0 <copy_at+0x2f4>
    int pixel_x = x_base + x + offset;
 800280a:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800280c:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8002810:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002812:	f4ff aea4 	bcc.w	800255e <copy_at+0x772>
 8002816:	f7ff bb13 	b.w	8001e40 <copy_at+0x54>
 800281a:	f1b9 0f00 	cmp.w	r9, #0
 800281e:	f47f abe4 	bne.w	8001fea <copy_at+0x1fe>
    int pixel_x = x_base + x + offset;
 8002822:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002826:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800282a:	f4ff ae1c 	bcc.w	8002466 <copy_at+0x67a>
 800282e:	e623      	b.n	8002478 <copy_at+0x68c>
 8002830:	f1b9 0f00 	cmp.w	r9, #0
 8002834:	f47f abc7 	bne.w	8001fc6 <copy_at+0x1da>
    int pixel_x = x_base + x + offset;
 8002838:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800283c:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002840:	f4ff adff 	bcc.w	8002442 <copy_at+0x656>
 8002844:	e606      	b.n	8002454 <copy_at+0x668>
 8002846:	f1b9 0f00 	cmp.w	r9, #0
 800284a:	f47f abf1 	bne.w	8002030 <copy_at+0x244>
    int pixel_x = x_base + x + offset;
 800284e:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002852:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002856:	f4ff ae2a 	bcc.w	80024ae <copy_at+0x6c2>
 800285a:	e631      	b.n	80024c0 <copy_at+0x6d4>
 800285c:	f1b9 0f00 	cmp.w	r9, #0
 8002860:	f47f abd5 	bne.w	800200e <copy_at+0x222>
    int pixel_x = x_base + x + offset;
 8002864:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002868:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 800286c:	f4ff ae0d 	bcc.w	800248a <copy_at+0x69e>
 8002870:	e614      	b.n	800249c <copy_at+0x6b0>
 8002872:	f1b9 0f00 	cmp.w	r9, #0
 8002876:	f47f abfe 	bne.w	8002076 <copy_at+0x28a>
    int pixel_x = x_base + x + offset;
 800287a:	192e      	adds	r6, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800287c:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8002880:	f4ff ae38 	bcc.w	80024f4 <copy_at+0x708>
 8002884:	e63f      	b.n	8002506 <copy_at+0x71a>
 8002886:	f1b9 0f00 	cmp.w	r9, #0
 800288a:	f47f abe2 	bne.w	8002052 <copy_at+0x266>
    int pixel_x = x_base + x + offset;
 800288e:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002892:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8002896:	f4ff ae1c 	bcc.w	80024d2 <copy_at+0x6e6>
 800289a:	e623      	b.n	80024e4 <copy_at+0x6f8>
 800289c:	f1b9 0f00 	cmp.w	r9, #0
 80028a0:	f47f ac0d 	bne.w	80020be <copy_at+0x2d2>
    int pixel_x = x_base + x + offset;
 80028a4:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80028a6:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80028aa:	f4ff ae45 	bcc.w	8002538 <copy_at+0x74c>
 80028ae:	e64c      	b.n	800254a <copy_at+0x75e>
 80028b0:	f1b9 0f00 	cmp.w	r9, #0
 80028b4:	f47f abf1 	bne.w	800209a <copy_at+0x2ae>
    int pixel_x = x_base + x + offset;
 80028b8:	192e      	adds	r6, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80028ba:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80028be:	f4ff ae2a 	bcc.w	8002516 <copy_at+0x72a>
 80028c2:	e631      	b.n	8002528 <copy_at+0x73c>
 80028c4:	f102 0c06 	add.w	ip, r2, #6
 80028c8:	f7ff baba 	b.w	8001e40 <copy_at+0x54>

080028cc <copy_dollar>:

void copy_dollar(uint16_t* buffer, int x, int y, uint32_t color)
{
 80028cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80028d0:	4cb9      	ldr	r4, [pc, #740]	@ (8002bb8 <copy_dollar+0x2ec>)
 80028d2:	f101 0c02 	add.w	ip, r1, #2
{
 80028d6:	b083      	sub	sp, #12
    int pixel_x = x_base + x + offset;
 80028d8:	6825      	ldr	r5, [r4, #0]
 80028da:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80028dc:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80028e0:	bf2c      	ite	cs
 80028e2:	2400      	movcs	r4, #0
 80028e4:	2401      	movcc	r4, #1
 80028e6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80028ea:	d202      	bcs.n	80028f2 <copy_dollar+0x26>
 80028ec:	2c00      	cmp	r4, #0
 80028ee:	f040 80b0 	bne.w	8002a52 <copy_dollar+0x186>
    int pixel_y = y_base + y;
 80028f2:	1c56      	adds	r6, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80028f4:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 80028f8:	d202      	bcs.n	8002900 <copy_dollar+0x34>
 80028fa:	2c00      	cmp	r4, #0
 80028fc:	f040 80a2 	bne.w	8002a44 <copy_dollar+0x178>
    int pixel_y = y_base + y;
 8002900:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002902:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8002906:	9601      	str	r6, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002908:	d202      	bcs.n	8002910 <copy_dollar+0x44>
 800290a:	2c00      	cmp	r4, #0
 800290c:	f040 8093 	bne.w	8002a36 <copy_dollar+0x16a>
    int pixel_y = y_base + y;
 8002910:	f102 0903 	add.w	r9, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002914:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8002918:	d202      	bcs.n	8002920 <copy_dollar+0x54>
 800291a:	2c00      	cmp	r4, #0
 800291c:	f040 8084 	bne.w	8002a28 <copy_dollar+0x15c>
    int pixel_y = y_base + y;
 8002920:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002922:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8002926:	d201      	bcs.n	800292c <copy_dollar+0x60>
 8002928:	2c00      	cmp	r4, #0
 800292a:	d176      	bne.n	8002a1a <copy_dollar+0x14e>
    int pixel_y = y_base + y;
 800292c:	f102 0e05 	add.w	lr, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002930:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002934:	d201      	bcs.n	800293a <copy_dollar+0x6e>
 8002936:	2c00      	cmp	r4, #0
 8002938:	d168      	bne.n	8002a0c <copy_dollar+0x140>
    int pixel_y = y_base + y;
 800293a:	1d96      	adds	r6, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800293c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8002940:	d201      	bcs.n	8002946 <copy_dollar+0x7a>
 8002942:	2c00      	cmp	r4, #0
 8002944:	d15b      	bne.n	80029fe <copy_dollar+0x132>
    int pixel_y = y_base + y;
 8002946:	f102 0807 	add.w	r8, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800294a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800294e:	d201      	bcs.n	8002954 <copy_dollar+0x88>
 8002950:	2c00      	cmp	r4, #0
 8002952:	d14d      	bne.n	80029f0 <copy_dollar+0x124>
    int pixel_y = y_base + y;
 8002954:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002958:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800295c:	d201      	bcs.n	8002962 <copy_dollar+0x96>
 800295e:	2c00      	cmp	r4, #0
 8002960:	d13f      	bne.n	80029e2 <copy_dollar+0x116>
    int pixel_y = y_base + y;
 8002962:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002966:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800296a:	d200      	bcs.n	800296e <copy_dollar+0xa2>
 800296c:	bb94      	cbnz	r4, 80029d4 <copy_dollar+0x108>
    int pixel_y = y_base + y;
 800296e:	f102 0a0a 	add.w	sl, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002972:	f240 1b0f 	movw	fp, #271	@ 0x10f
 8002976:	45da      	cmp	sl, fp
 8002978:	bf8c      	ite	hi
 800297a:	2700      	movhi	r7, #0
 800297c:	f004 0701 	andls.w	r7, r4, #1
 8002980:	9700      	str	r7, [sp, #0]
 8002982:	2f00      	cmp	r7, #0
 8002984:	d16c      	bne.n	8002a60 <copy_dollar+0x194>
    int pixel_y = y_base + y;
 8002986:	f102 0a0b 	add.w	sl, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800298a:	45da      	cmp	sl, fp
 800298c:	d801      	bhi.n	8002992 <copy_dollar+0xc6>
 800298e:	2c00      	cmp	r4, #0
 8002990:	d171      	bne.n	8002a76 <copy_dollar+0x1aa>
    for (int i = 0; i < 12; i++)
 8002992:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8002996:	f2c0 8152 	blt.w	8002c3e <copy_dollar+0x372>
 800299a:	9c01      	ldr	r4, [sp, #4]
 800299c:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 80029a0:	f280 80ed 	bge.w	8002b7e <copy_dollar+0x2b2>
    int pixel_x = x_base + x + offset;
 80029a4:	1c4a      	adds	r2, r1, #1
 80029a6:	442a      	add	r2, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80029a8:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 80029ac:	f0c0 8112 	bcc.w	8002bd4 <copy_dollar+0x308>
 80029b0:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80029b4:	f080 812d 	bcs.w	8002c12 <copy_dollar+0x346>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80029b8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80029bc:	9c01      	ldr	r4, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80029be:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80029c2:	fb02 c204 	mla	r2, r2, r4, ip
 80029c6:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80029ca:	f280 8122 	bge.w	8002c12 <copy_dollar+0x346>
 80029ce:	ea4f 120e 	mov.w	r2, lr, lsl #4
 80029d2:	e118      	b.n	8002c06 <copy_dollar+0x33a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80029d4:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 80029d8:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 80029dc:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80029e0:	e7c5      	b.n	800296e <copy_dollar+0xa2>
 80029e2:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80029e6:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 80029ea:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80029ee:	e7b8      	b.n	8002962 <copy_dollar+0x96>
 80029f0:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 80029f4:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 80029f8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80029fc:	e7aa      	b.n	8002954 <copy_dollar+0x88>
 80029fe:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8002a02:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002a06:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002a0a:	e79c      	b.n	8002946 <copy_dollar+0x7a>
 8002a0c:	ebce 160e 	rsb	r6, lr, lr, lsl #4
 8002a10:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002a14:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002a18:	e78f      	b.n	800293a <copy_dollar+0x6e>
 8002a1a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8002a1e:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002a22:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002a26:	e781      	b.n	800292c <copy_dollar+0x60>
 8002a28:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 8002a2c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002a30:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002a34:	e774      	b.n	8002920 <copy_dollar+0x54>
 8002a36:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8002a3a:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002a3e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002a42:	e765      	b.n	8002910 <copy_dollar+0x44>
 8002a44:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8002a48:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002a4c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002a50:	e756      	b.n	8002900 <copy_dollar+0x34>
 8002a52:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002a56:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8002a5a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8002a5e:	e748      	b.n	80028f2 <copy_dollar+0x26>
 8002a60:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8002a64:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 8002a68:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    int pixel_y = y_base + y;
 8002a6c:	f102 0a0b 	add.w	sl, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a70:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8002a74:	d209      	bcs.n	8002a8a <copy_dollar+0x1be>
 8002a76:	9f01      	ldr	r7, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002a78:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a7c:	43ff      	mvns	r7, r7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002a7e:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a82:	0fff      	lsrs	r7, r7, #31
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002a84:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a88:	9700      	str	r7, [sp, #0]
    int pixel_x = x_base + x + offset;
 8002a8a:	f101 0a01 	add.w	sl, r1, #1
 8002a8e:	eb0a 0b05 	add.w	fp, sl, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002a92:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8002a96:	bf2c      	ite	cs
 8002a98:	f04f 0a00 	movcs.w	sl, #0
 8002a9c:	f04f 0a01 	movcc.w	sl, #1
 8002aa0:	f1ba 0f00 	cmp.w	sl, #0
 8002aa4:	d06e      	beq.n	8002b84 <copy_dollar+0x2b8>
 8002aa6:	9f00      	ldr	r7, [sp, #0]
 8002aa8:	2f00      	cmp	r7, #0
 8002aaa:	d06b      	beq.n	8002b84 <copy_dollar+0x2b8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002aac:	9f01      	ldr	r7, [sp, #4]
 8002aae:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 8002ab2:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8002ab6:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8002aba:	ebce 1a0e 	rsb	sl, lr, lr, lsl #4
 8002abe:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8002ac2:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8002ac6:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 8002aca:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8002ace:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002ad2:	2c00      	cmp	r4, #0
 8002ad4:	d064      	beq.n	8002ba0 <copy_dollar+0x2d4>
 8002ad6:	9f00      	ldr	r7, [sp, #0]
 8002ad8:	2f00      	cmp	r7, #0
 8002ada:	d061      	beq.n	8002ba0 <copy_dollar+0x2d4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002adc:	9c01      	ldr	r4, [sp, #4]
 8002ade:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002ae2:	eb0c 1444 	add.w	r4, ip, r4, lsl #5
 8002ae6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8002aea:	ebce 140e 	rsb	r4, lr, lr, lsl #4
 8002aee:	eb0c 1444 	add.w	r4, ip, r4, lsl #5
 8002af2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8002af6:	ebc6 1406 	rsb	r4, r6, r6, lsl #4
 8002afa:	eb0c 1444 	add.w	r4, ip, r4, lsl #5
 8002afe:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_x = x_base + x + offset;
 8002b02:	1ccc      	adds	r4, r1, #3
 8002b04:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b06:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8002b0a:	bf2c      	ite	cs
 8002b0c:	f04f 0c00 	movcs.w	ip, #0
 8002b10:	f04f 0c01 	movcc.w	ip, #1
 8002b14:	f1bc 0f00 	cmp.w	ip, #0
 8002b18:	d050      	beq.n	8002bbc <copy_dollar+0x2f0>
 8002b1a:	9f00      	ldr	r7, [sp, #0]
 8002b1c:	2f00      	cmp	r7, #0
 8002b1e:	d04d      	beq.n	8002bbc <copy_dollar+0x2f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b20:	9a01      	ldr	r2, [sp, #4]
 8002b22:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8002b26:	eb04 1247 	add.w	r2, r4, r7, lsl #5
 8002b2a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8002b2e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002b32:	eb04 124e 	add.w	r2, r4, lr, lsl #5
 8002b36:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8002b3a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8002b3e:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 8002b42:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b46:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8002b4a:	eb01 0205 	add.w	r2, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b4e:	d208      	bcs.n	8002b62 <copy_dollar+0x296>
 8002b50:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8002b54:	d205      	bcs.n	8002b62 <copy_dollar+0x296>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b56:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8002b5a:	eb02 1249 	add.w	r2, r2, r9, lsl #5
 8002b5e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    int pixel_x = x_base + x + offset;
 8002b62:	3104      	adds	r1, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b64:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8002b68:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b6a:	d208      	bcs.n	8002b7e <copy_dollar+0x2b2>
 8002b6c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8002b70:	d205      	bcs.n	8002b7e <copy_dollar+0x2b2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002b72:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8002b76:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8002b7a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
        fill_pixel(buffer, x, y, j, 5, color);
        fill_pixel(buffer, x, y, j, 9, color);
    }
    fill_pixel(buffer, x, y, 0, 3, color);
    fill_pixel(buffer, x, y, 4, 7, color);
}
 8002b7e:	b003      	add	sp, #12
 8002b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002b84:	f1be 0f00 	cmp.w	lr, #0
 8002b88:	db02      	blt.n	8002b90 <copy_dollar+0x2c4>
 8002b8a:	f1ba 0f00 	cmp.w	sl, #0
 8002b8e:	d194      	bne.n	8002aba <copy_dollar+0x1ee>
 8002b90:	f112 0f09 	cmn.w	r2, #9
 8002b94:	db9d      	blt.n	8002ad2 <copy_dollar+0x206>
 8002b96:	f1ba 0f00 	cmp.w	sl, #0
 8002b9a:	d194      	bne.n	8002ac6 <copy_dollar+0x1fa>
 8002b9c:	2c00      	cmp	r4, #0
 8002b9e:	d19a      	bne.n	8002ad6 <copy_dollar+0x20a>
 8002ba0:	f1be 0f00 	cmp.w	lr, #0
 8002ba4:	db01      	blt.n	8002baa <copy_dollar+0x2de>
 8002ba6:	2c00      	cmp	r4, #0
 8002ba8:	d19f      	bne.n	8002aea <copy_dollar+0x21e>
 8002baa:	f112 0f09 	cmn.w	r2, #9
 8002bae:	dba8      	blt.n	8002b02 <copy_dollar+0x236>
 8002bb0:	2c00      	cmp	r4, #0
 8002bb2:	d0a6      	beq.n	8002b02 <copy_dollar+0x236>
 8002bb4:	e79f      	b.n	8002af6 <copy_dollar+0x22a>
 8002bb6:	bf00      	nop
 8002bb8:	240001b8 	.word	0x240001b8
 8002bbc:	f1be 0f00 	cmp.w	lr, #0
 8002bc0:	db02      	blt.n	8002bc8 <copy_dollar+0x2fc>
 8002bc2:	f1bc 0f00 	cmp.w	ip, #0
 8002bc6:	d1b2      	bne.n	8002b2e <copy_dollar+0x262>
 8002bc8:	3209      	adds	r2, #9
 8002bca:	dbbc      	blt.n	8002b46 <copy_dollar+0x27a>
 8002bcc:	f1bc 0f00 	cmp.w	ip, #0
 8002bd0:	d0b9      	beq.n	8002b46 <copy_dollar+0x27a>
 8002bd2:	e7b2      	b.n	8002b3a <copy_dollar+0x26e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002bd4:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002bd8:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002bdc:	eb02 1644 	add.w	r6, r2, r4, lsl #5
 8002be0:	ea4f 1444 	mov.w	r4, r4, lsl #5
 8002be4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002be8:	da2e      	bge.n	8002c48 <copy_dollar+0x37c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002bea:	ebce 160e 	rsb	r6, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002bee:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002bf2:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8002bf6:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8002bfa:	ea4f 120e 	mov.w	r2, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002bfe:	d208      	bcs.n	8002c12 <copy_dollar+0x346>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c00:	4464      	add	r4, ip
 8002c02:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8002c06:	eba2 020e 	sub.w	r2, r2, lr
 8002c0a:	eb0c 1242 	add.w	r2, ip, r2, lsl #5
 8002c0e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    int pixel_x = x_base + x + offset;
 8002c12:	1cca      	adds	r2, r1, #3
 8002c14:	442a      	add	r2, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c16:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8002c1a:	d294      	bcs.n	8002b46 <copy_dollar+0x27a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c1c:	9c01      	ldr	r4, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c1e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c22:	ebc4 1704 	rsb	r7, r4, r4, lsl #4
 8002c26:	eb02 1447 	add.w	r4, r2, r7, lsl #5
 8002c2a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c2e:	da8a      	bge.n	8002b46 <copy_dollar+0x27a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c30:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002c34:	eb02 124e 	add.w	r2, r2, lr, lsl #5
 8002c38:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c3c:	e783      	b.n	8002b46 <copy_dollar+0x27a>
 8002c3e:	9f01      	ldr	r7, [sp, #4]
 8002c40:	43ff      	mvns	r7, r7
 8002c42:	0fff      	lsrs	r7, r7, #31
 8002c44:	9700      	str	r7, [sp, #0]
 8002c46:	e720      	b.n	8002a8a <copy_dollar+0x1be>
 8002c48:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002c4c:	d2e1      	bcs.n	8002c12 <copy_dollar+0x346>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c4e:	4464      	add	r4, ip
 8002c50:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c54:	e7dd      	b.n	8002c12 <copy_dollar+0x346>
 8002c56:	bf00      	nop

08002c58 <copy_equals>:
    int pixel_y = y_base + y;
 8002c58:	f102 0c04 	add.w	ip, r2, #4

void copy_equals(uint16_t* buffer, int x, int y, uint32_t color)
{
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8002c62:	4c5f      	ldr	r4, [pc, #380]	@ (8002de0 <copy_equals+0x188>)
 8002c64:	6825      	ldr	r5, [r4, #0]
 8002c66:	f280 809b 	bge.w	8002da0 <copy_equals+0x148>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c6a:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c6e:	ea6f 040c 	mvn.w	r4, ip
    int pixel_x = x_base + x + offset;
 8002c72:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c76:	0fe4      	lsrs	r4, r4, #31
 8002c78:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c7c:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c80:	bf2c      	ite	cs
 8002c82:	2600      	movcs	r6, #0
 8002c84:	2601      	movcc	r6, #1
 8002c86:	2c00      	cmp	r4, #0
 8002c88:	f000 808b 	beq.w	8002da2 <copy_equals+0x14a>
 8002c8c:	2e00      	cmp	r6, #0
 8002c8e:	f000 8088 	beq.w	8002da2 <copy_equals+0x14a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c92:	eb0e 060c 	add.w	r6, lr, ip
    int pixel_y = y_base + y;
 8002c96:	3207      	adds	r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002c98:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002c9c:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002ca0:	da05      	bge.n	8002cae <copy_equals+0x56>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002ca2:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002ca6:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8002caa:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8002cae:	f101 0c01 	add.w	ip, r1, #1
 8002cb2:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002cb4:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002cb8:	bf2c      	ite	cs
 8002cba:	2600      	movcs	r6, #0
 8002cbc:	2601      	movcc	r6, #1
 8002cbe:	2c00      	cmp	r4, #0
 8002cc0:	d074      	beq.n	8002dac <copy_equals+0x154>
 8002cc2:	2e00      	cmp	r6, #0
 8002cc4:	d072      	beq.n	8002dac <copy_equals+0x154>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002cc6:	eb0e 060c 	add.w	r6, lr, ip
 8002cca:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002cce:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002cd2:	da05      	bge.n	8002ce0 <copy_equals+0x88>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002cd4:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002cd8:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8002cdc:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8002ce0:	f101 0c02 	add.w	ip, r1, #2
 8002ce4:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002ce6:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002cea:	bf2c      	ite	cs
 8002cec:	2600      	movcs	r6, #0
 8002cee:	2601      	movcc	r6, #1
 8002cf0:	2c00      	cmp	r4, #0
 8002cf2:	d060      	beq.n	8002db6 <copy_equals+0x15e>
 8002cf4:	2e00      	cmp	r6, #0
 8002cf6:	d05e      	beq.n	8002db6 <copy_equals+0x15e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002cf8:	eb0e 060c 	add.w	r6, lr, ip
 8002cfc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d00:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002d04:	da05      	bge.n	8002d12 <copy_equals+0xba>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002d06:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002d0a:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8002d0e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8002d12:	f101 0c03 	add.w	ip, r1, #3
 8002d16:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d18:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002d1c:	bf2c      	ite	cs
 8002d1e:	2600      	movcs	r6, #0
 8002d20:	2601      	movcc	r6, #1
 8002d22:	2c00      	cmp	r4, #0
 8002d24:	d04c      	beq.n	8002dc0 <copy_equals+0x168>
 8002d26:	2e00      	cmp	r6, #0
 8002d28:	d04a      	beq.n	8002dc0 <copy_equals+0x168>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002d2a:	eb0e 060c 	add.w	r6, lr, ip
 8002d2e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d32:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002d36:	da05      	bge.n	8002d44 <copy_equals+0xec>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002d38:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002d3c:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8002d40:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8002d44:	f101 0c04 	add.w	ip, r1, #4
 8002d48:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d4a:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002d4e:	bf2c      	ite	cs
 8002d50:	2600      	movcs	r6, #0
 8002d52:	2601      	movcc	r6, #1
 8002d54:	2c00      	cmp	r4, #0
 8002d56:	d038      	beq.n	8002dca <copy_equals+0x172>
 8002d58:	2e00      	cmp	r6, #0
 8002d5a:	d036      	beq.n	8002dca <copy_equals+0x172>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002d5c:	eb0e 060c 	add.w	r6, lr, ip
 8002d60:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d64:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002d68:	da05      	bge.n	8002d76 <copy_equals+0x11e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002d6a:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8002d6e:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8002d72:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8002d76:	3105      	adds	r1, #5
 8002d78:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d7a:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8002d7e:	bf2c      	ite	cs
 8002d80:	2500      	movcs	r5, #0
 8002d82:	2501      	movcc	r5, #1
 8002d84:	b335      	cbz	r5, 8002dd4 <copy_equals+0x17c>
 8002d86:	b32c      	cbz	r4, 8002dd4 <copy_equals+0x17c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002d88:	448e      	add	lr, r1
 8002d8a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002d8e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002d92:	da05      	bge.n	8002da0 <copy_equals+0x148>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002d94:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002d98:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8002d9c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for (int j = 0; j < 6; j++)
    {
        fill_pixel(buffer, x, y, j, 4, color);
        fill_pixel(buffer, x, y, j, 7, color);
    }
}
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002da2:	3207      	adds	r2, #7
 8002da4:	d483      	bmi.n	8002cae <copy_equals+0x56>
 8002da6:	2e00      	cmp	r6, #0
 8002da8:	d081      	beq.n	8002cae <copy_equals+0x56>
 8002daa:	e777      	b.n	8002c9c <copy_equals+0x44>
 8002dac:	2a00      	cmp	r2, #0
 8002dae:	db97      	blt.n	8002ce0 <copy_equals+0x88>
 8002db0:	2e00      	cmp	r6, #0
 8002db2:	d095      	beq.n	8002ce0 <copy_equals+0x88>
 8002db4:	e78b      	b.n	8002cce <copy_equals+0x76>
 8002db6:	2a00      	cmp	r2, #0
 8002db8:	dbab      	blt.n	8002d12 <copy_equals+0xba>
 8002dba:	2e00      	cmp	r6, #0
 8002dbc:	d0a9      	beq.n	8002d12 <copy_equals+0xba>
 8002dbe:	e79f      	b.n	8002d00 <copy_equals+0xa8>
 8002dc0:	2a00      	cmp	r2, #0
 8002dc2:	dbbf      	blt.n	8002d44 <copy_equals+0xec>
 8002dc4:	2e00      	cmp	r6, #0
 8002dc6:	d0bd      	beq.n	8002d44 <copy_equals+0xec>
 8002dc8:	e7b3      	b.n	8002d32 <copy_equals+0xda>
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	dbd3      	blt.n	8002d76 <copy_equals+0x11e>
 8002dce:	2e00      	cmp	r6, #0
 8002dd0:	d0d1      	beq.n	8002d76 <copy_equals+0x11e>
 8002dd2:	e7c7      	b.n	8002d64 <copy_equals+0x10c>
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	dbe3      	blt.n	8002da0 <copy_equals+0x148>
 8002dd8:	2d00      	cmp	r5, #0
 8002dda:	d1d8      	bne.n	8002d8e <copy_equals+0x136>
}
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}
 8002dde:	bf00      	nop
 8002de0:	240001b8 	.word	0x240001b8

08002de4 <copy_slash>:

void copy_slash(uint16_t* buffer, int x, int y, uint32_t color)
{
 8002de4:	b530      	push	{r4, r5, lr}
    int pixel_x = x_base + x + offset;
 8002de6:	4c62      	ldr	r4, [pc, #392]	@ (8002f70 <copy_slash+0x18c>)
 8002de8:	f101 0c05 	add.w	ip, r1, #5
 8002dec:	6824      	ldr	r4, [r4, #0]
 8002dee:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002df0:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002df4:	bf2c      	ite	cs
 8002df6:	2500      	movcs	r5, #0
 8002df8:	2501      	movcc	r5, #1
 8002dfa:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002dfe:	d202      	bcs.n	8002e06 <copy_slash+0x22>
 8002e00:	2d00      	cmp	r5, #0
 8002e02:	f040 80ae 	bne.w	8002f62 <copy_slash+0x17e>
    int pixel_y = y_base + y;
 8002e06:	f102 0e01 	add.w	lr, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002e0a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002e0e:	d202      	bcs.n	8002e16 <copy_slash+0x32>
 8002e10:	2d00      	cmp	r5, #0
 8002e12:	f040 809f 	bne.w	8002f54 <copy_slash+0x170>
    int pixel_y = y_base + y;
 8002e16:	f102 0e02 	add.w	lr, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002e1a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002e1e:	d202      	bcs.n	8002e26 <copy_slash+0x42>
 8002e20:	2d00      	cmp	r5, #0
 8002e22:	f040 8090 	bne.w	8002f46 <copy_slash+0x162>
    int pixel_x = x_base + x + offset;
 8002e26:	f101 0c04 	add.w	ip, r1, #4
    int pixel_y = y_base + y;
 8002e2a:	f102 0e03 	add.w	lr, r2, #3
    int pixel_x = x_base + x + offset;
 8002e2e:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002e30:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002e34:	bf2c      	ite	cs
 8002e36:	2500      	movcs	r5, #0
 8002e38:	2501      	movcc	r5, #1
 8002e3a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002e3e:	d201      	bcs.n	8002e44 <copy_slash+0x60>
 8002e40:	2d00      	cmp	r5, #0
 8002e42:	d179      	bne.n	8002f38 <copy_slash+0x154>
    int pixel_y = y_base + y;
 8002e44:	f102 0e04 	add.w	lr, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002e48:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002e4c:	d201      	bcs.n	8002e52 <copy_slash+0x6e>
 8002e4e:	2d00      	cmp	r5, #0
 8002e50:	d16b      	bne.n	8002f2a <copy_slash+0x146>
    int pixel_y = y_base + y;
 8002e52:	f102 0e05 	add.w	lr, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002e56:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002e5a:	d201      	bcs.n	8002e60 <copy_slash+0x7c>
 8002e5c:	2d00      	cmp	r5, #0
 8002e5e:	d15d      	bne.n	8002f1c <copy_slash+0x138>
    int pixel_x = x_base + x + offset;
 8002e60:	f101 0c03 	add.w	ip, r1, #3
    int pixel_y = y_base + y;
 8002e64:	f102 0e06 	add.w	lr, r2, #6
    int pixel_x = x_base + x + offset;
 8002e68:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002e6a:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8002e6e:	bf2c      	ite	cs
 8002e70:	2500      	movcs	r5, #0
 8002e72:	2501      	movcc	r5, #1
 8002e74:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002e78:	d201      	bcs.n	8002e7e <copy_slash+0x9a>
 8002e7a:	2d00      	cmp	r5, #0
 8002e7c:	d147      	bne.n	8002f0e <copy_slash+0x12a>
    int pixel_y = y_base + y;
 8002e7e:	f102 0e07 	add.w	lr, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002e82:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002e86:	d200      	bcs.n	8002e8a <copy_slash+0xa6>
 8002e88:	bbd5      	cbnz	r5, 8002f00 <copy_slash+0x11c>
    int pixel_y = y_base + y;
 8002e8a:	f102 0e08 	add.w	lr, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002e8e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8002e92:	d200      	bcs.n	8002e96 <copy_slash+0xb2>
 8002e94:	bb6d      	cbnz	r5, 8002ef2 <copy_slash+0x10e>
    int pixel_x = x_base + x + offset;
 8002e96:	3102      	adds	r1, #2
 8002e98:	4421      	add	r1, r4
    int pixel_y = y_base + y;
 8002e9a:	f102 0409 	add.w	r4, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002e9e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8002ea2:	bf2c      	ite	cs
 8002ea4:	2500      	movcs	r5, #0
 8002ea6:	2501      	movcc	r5, #1
 8002ea8:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8002eac:	d200      	bcs.n	8002eb0 <copy_slash+0xcc>
 8002eae:	b9cd      	cbnz	r5, 8002ee4 <copy_slash+0x100>
    int pixel_y = y_base + y;
 8002eb0:	f102 040a 	add.w	r4, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002eb4:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8002eb8:	d200      	bcs.n	8002ebc <copy_slash+0xd8>
 8002eba:	b965      	cbnz	r5, 8002ed6 <copy_slash+0xf2>
    int pixel_y = y_base + y;
 8002ebc:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002ebe:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002ec2:	d200      	bcs.n	8002ec6 <copy_slash+0xe2>
 8002ec4:	b905      	cbnz	r5, 8002ec8 <copy_slash+0xe4>
    {
        int x_pos = 5 - (i / 3);
        if (x_pos >= 0 && x_pos < 6)
            fill_pixel(buffer, x, y, x_pos, i, color);
    }
}
 8002ec6:	bd30      	pop	{r4, r5, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002ec8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002ecc:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8002ed0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8002ed4:	bd30      	pop	{r4, r5, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002ed6:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002eda:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8002ede:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8002ee2:	e7eb      	b.n	8002ebc <copy_slash+0xd8>
 8002ee4:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8002ee8:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8002eec:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8002ef0:	e7de      	b.n	8002eb0 <copy_slash+0xcc>
 8002ef2:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002ef6:	eb0c 1c4e 	add.w	ip, ip, lr, lsl #5
 8002efa:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8002efe:	e7ca      	b.n	8002e96 <copy_slash+0xb2>
 8002f00:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002f04:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002f08:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002f0c:	e7bd      	b.n	8002e8a <copy_slash+0xa6>
 8002f0e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002f12:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002f16:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002f1a:	e7b0      	b.n	8002e7e <copy_slash+0x9a>
 8002f1c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002f20:	eb0c 1c4e 	add.w	ip, ip, lr, lsl #5
 8002f24:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8002f28:	e79a      	b.n	8002e60 <copy_slash+0x7c>
 8002f2a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002f2e:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002f32:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002f36:	e78c      	b.n	8002e52 <copy_slash+0x6e>
 8002f38:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002f3c:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002f40:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002f44:	e77e      	b.n	8002e44 <copy_slash+0x60>
 8002f46:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002f4a:	eb0c 1c4e 	add.w	ip, ip, lr, lsl #5
 8002f4e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8002f52:	e768      	b.n	8002e26 <copy_slash+0x42>
 8002f54:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8002f58:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002f5c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002f60:	e759      	b.n	8002e16 <copy_slash+0x32>
 8002f62:	ebc2 1e02 	rsb	lr, r2, r2, lsl #4
 8002f66:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8002f6a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8002f6e:	e74a      	b.n	8002e06 <copy_slash+0x22>
 8002f70:	240001b8 	.word	0x240001b8

08002f74 <copy_star>:

void copy_star(uint16_t* buffer, int x, int y, uint32_t color)
{
 8002f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8002f78:	4c7d      	ldr	r4, [pc, #500]	@ (8003170 <copy_star+0x1fc>)
 8002f7a:	f101 0e02 	add.w	lr, r1, #2
    int pixel_y = y_base + y;
 8002f7e:	f102 0c04 	add.w	ip, r2, #4
 8002f82:	1d95      	adds	r5, r2, #6
    int pixel_x = x_base + x + offset;
 8002f84:	f8d4 a000 	ldr.w	sl, [r4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002f88:	f240 14df 	movw	r4, #479	@ 0x1df
{
 8002f8c:	b083      	sub	sp, #12
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002f8e:	ea6f 060c 	mvn.w	r6, ip
    int pixel_x = x_base + x + offset;
 8002f92:	44d6      	add	lr, sl
    int pixel_y = y_base + y;
 8002f94:	f102 0805 	add.w	r8, r2, #5
 8002f98:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002f9a:	0ff6      	lsrs	r6, r6, #31
 8002f9c:	45a6      	cmp	lr, r4
 8002f9e:	bf8c      	ite	hi
 8002fa0:	2500      	movhi	r5, #0
 8002fa2:	2501      	movls	r5, #1
 8002fa4:	ea15 0906 	ands.w	r9, r5, r6
 8002fa8:	d05a      	beq.n	8003060 <copy_star+0xec>
 8002faa:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8002fae:	f280 80c1 	bge.w	8003134 <copy_star+0x1c0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002fb2:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
 8002fb6:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8002fba:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002fbe:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8002fc2:	f280 80c2 	bge.w	800314a <copy_star+0x1d6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002fc6:	ebc8 1208 	rsb	r2, r8, r8, lsl #4
 8002fca:	2401      	movs	r4, #1
 8002fcc:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8002fd0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002fd4:	9a01      	ldr	r2, [sp, #4]
 8002fd6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8002fda:	da05      	bge.n	8002fe8 <copy_star+0x74>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8002fdc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002fe0:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8002fe4:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8002fe8:	f04f 0901 	mov.w	r9, #1
    fill_pixel(buffer, x, y, 2, 4, color);
    fill_pixel(buffer, x, y, 2, 5, color);
    fill_pixel(buffer, x, y, 2, 6, color);
    for (int j = 1; j < 4; j++)
 8002fec:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8002ff0:	bfac      	ite	ge
 8002ff2:	2200      	movge	r2, #0
 8002ff4:	f004 0201 	andlt.w	r2, r4, #1
    int pixel_x = x_base + x + offset;
 8002ff8:	1c4c      	adds	r4, r1, #1
 8002ffa:	eb04 0b0a 	add.w	fp, r4, sl
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8002ffe:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8003002:	bf2c      	ite	cs
 8003004:	2400      	movcs	r4, #0
 8003006:	2401      	movcc	r4, #1
 8003008:	ea14 0702 	ands.w	r7, r4, r2
 800300c:	d16e      	bne.n	80030ec <copy_star+0x178>
 800300e:	4015      	ands	r5, r2
 8003010:	d15c      	bne.n	80030cc <copy_star+0x158>
    int pixel_x = x_base + x + offset;
 8003012:	3103      	adds	r1, #3
 8003014:	4451      	add	r1, sl
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003016:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800301a:	bf2c      	ite	cs
 800301c:	2500      	movcs	r5, #0
 800301e:	2501      	movcc	r5, #1
 8003020:	402a      	ands	r2, r5
 8003022:	d15b      	bne.n	80030dc <copy_star+0x168>
 8003024:	2e00      	cmp	r6, #0
 8003026:	d02e      	beq.n	8003086 <copy_star+0x112>
 8003028:	b36c      	cbz	r4, 8003086 <copy_star+0x112>
 800302a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800302e:	db68      	blt.n	8003102 <copy_star+0x18e>
 8003030:	2c00      	cmp	r4, #0
 8003032:	d038      	beq.n	80030a6 <copy_star+0x132>
 8003034:	f1b9 0f00 	cmp.w	r9, #0
 8003038:	d035      	beq.n	80030a6 <copy_star+0x132>
 800303a:	9a01      	ldr	r2, [sp, #4]
 800303c:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8003040:	da0b      	bge.n	800305a <copy_star+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003042:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8003046:	b29b      	uxth	r3, r3
 8003048:	eb0b 1247 	add.w	r2, fp, r7, lsl #5
 800304c:	017f      	lsls	r7, r7, #5
 800304e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003052:	b115      	cbz	r5, 800305a <copy_star+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003054:	4439      	add	r1, r7
 8003056:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
        fill_pixel(buffer, x, y, j, 5, color);
    fill_pixel(buffer, x, y, 1, 4, color);
    fill_pixel(buffer, x, y, 3, 4, color);
    fill_pixel(buffer, x, y, 1, 6, color);
    fill_pixel(buffer, x, y, 3, 6, color);
}
 800305a:	b003      	add	sp, #12
 800305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003060:	1d57      	adds	r7, r2, #5
 8003062:	bfb4      	ite	lt
 8003064:	2400      	movlt	r4, #0
 8003066:	2401      	movge	r4, #1
 8003068:	b10c      	cbz	r4, 800306e <copy_star+0xfa>
 800306a:	2d00      	cmp	r5, #0
 800306c:	d1a7      	bne.n	8002fbe <copy_star+0x4a>
 800306e:	3206      	adds	r2, #6
 8003070:	bfb4      	ite	lt
 8003072:	f04f 0900 	movlt.w	r9, #0
 8003076:	f04f 0901 	movge.w	r9, #1
 800307a:	f1b9 0f00 	cmp.w	r9, #0
 800307e:	d0b5      	beq.n	8002fec <copy_star+0x78>
 8003080:	2d00      	cmp	r5, #0
 8003082:	d0b3      	beq.n	8002fec <copy_star+0x78>
 8003084:	e7a6      	b.n	8002fd4 <copy_star+0x60>
 8003086:	402e      	ands	r6, r5
 8003088:	d0d2      	beq.n	8003030 <copy_star+0xbc>
 800308a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800308e:	da5a      	bge.n	8003146 <copy_star+0x1d2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003090:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8003094:	b29a      	uxth	r2, r3
 8003096:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 800309a:	448c      	add	ip, r1
 800309c:	2501      	movs	r5, #1
 800309e:	f820 201c 	strh.w	r2, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80030a2:	2c00      	cmp	r4, #0
 80030a4:	d1c6      	bne.n	8003034 <copy_star+0xc0>
 80030a6:	9c01      	ldr	r4, [sp, #4]
 80030a8:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 80030ac:	bfac      	ite	ge
 80030ae:	2200      	movge	r2, #0
 80030b0:	f009 0201 	andlt.w	r2, r9, #1
 80030b4:	2a00      	cmp	r2, #0
 80030b6:	d0d0      	beq.n	800305a <copy_star+0xe6>
 80030b8:	2d00      	cmp	r5, #0
 80030ba:	d0ce      	beq.n	800305a <copy_star+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80030bc:	ebc4 1704 	rsb	r7, r4, r4, lsl #4
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	017f      	lsls	r7, r7, #5
 80030c4:	4439      	add	r1, r7
 80030c6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80030ca:	e7c6      	b.n	800305a <copy_star+0xe6>
 80030cc:	462a      	mov	r2, r5
 80030ce:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
 80030d2:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 80030d6:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80030da:	e79a      	b.n	8003012 <copy_star+0x9e>
 80030dc:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80030e0:	4615      	mov	r5, r2
 80030e2:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 80030e6:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80030ea:	e79b      	b.n	8003024 <copy_star+0xb0>
 80030ec:	463a      	mov	r2, r7
 80030ee:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80030f2:	4015      	ands	r5, r2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80030f4:	eb0b 1444 	add.w	r4, fp, r4, lsl #5
 80030f8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80030fc:	463c      	mov	r4, r7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80030fe:	d088      	beq.n	8003012 <copy_star+0x9e>
 8003100:	e7e4      	b.n	80030cc <copy_star+0x158>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003102:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8003106:	b29a      	uxth	r2, r3
 8003108:	eb0b 164c 	add.w	r6, fp, ip, lsl #5
 800310c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8003110:	f820 2016 	strh.w	r2, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003114:	2d00      	cmp	r5, #0
 8003116:	d1c0      	bne.n	800309a <copy_star+0x126>
 8003118:	f1b9 0f00 	cmp.w	r9, #0
 800311c:	d09d      	beq.n	800305a <copy_star+0xe6>
 800311e:	9b01      	ldr	r3, [sp, #4]
 8003120:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003124:	da99      	bge.n	800305a <copy_star+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003126:	ebc3 1703 	rsb	r7, r3, r3, lsl #4
 800312a:	eb0b 1347 	add.w	r3, fp, r7, lsl #5
 800312e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003132:	e792      	b.n	800305a <copy_star+0xe6>
    int pixel_x = x_base + x + offset;
 8003134:	1c4a      	adds	r2, r1, #1
 8003136:	eb02 0b0a 	add.w	fp, r2, sl
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800313a:	2200      	movs	r2, #0
 800313c:	45a3      	cmp	fp, r4
 800313e:	bf8c      	ite	hi
 8003140:	2400      	movhi	r4, #0
 8003142:	2401      	movls	r4, #1
 8003144:	e765      	b.n	8003012 <copy_star+0x9e>
 8003146:	4635      	mov	r5, r6
 8003148:	e7ad      	b.n	80030a6 <copy_star+0x132>
    int pixel_x = x_base + x + offset;
 800314a:	1c4a      	adds	r2, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800314c:	f240 15df 	movw	r5, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 8003150:	3103      	adds	r1, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003152:	f04f 0901 	mov.w	r9, #1
    int pixel_x = x_base + x + offset;
 8003156:	eb02 0b0a 	add.w	fp, r2, sl
 800315a:	4451      	add	r1, sl
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800315c:	45ab      	cmp	fp, r5
 800315e:	bf8c      	ite	hi
 8003160:	2400      	movhi	r4, #0
 8003162:	2401      	movls	r4, #1
 8003164:	42a9      	cmp	r1, r5
 8003166:	bf8c      	ite	hi
 8003168:	2500      	movhi	r5, #0
 800316a:	2501      	movls	r5, #1
 800316c:	e75a      	b.n	8003024 <copy_star+0xb0>
 800316e:	bf00      	nop
 8003170:	240001b8 	.word	0x240001b8

08003174 <copy_tilde>:

void copy_tilde(uint16_t* buffer, int x, int y, uint32_t color)
{
 8003174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pixel_y = y_base + y;
 8003178:	f102 0e04 	add.w	lr, r2, #4
    int pixel_x = x_base + x + offset;
 800317c:	4c50      	ldr	r4, [pc, #320]	@ (80032c0 <copy_tilde+0x14c>)
    int pixel_y = y_base + y;
 800317e:	3205      	adds	r2, #5
    int pixel_x = x_base + x + offset;
 8003180:	1c4d      	adds	r5, r1, #1
 8003182:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003184:	ea6f 060e 	mvn.w	r6, lr
 8003188:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800318c:	f240 18df 	movw	r8, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 8003190:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003192:	ea4f 76d6 	mov.w	r6, r6, lsr #31
    int pixel_x = x_base + x + offset;
 8003196:	eb01 0904 	add.w	r9, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800319a:	bf2c      	ite	cs
 800319c:	f04f 0c00 	movcs.w	ip, #0
 80031a0:	f04f 0c01 	movcc.w	ip, #1
 80031a4:	43d7      	mvns	r7, r2
 80031a6:	4545      	cmp	r5, r8
 80031a8:	bf8c      	ite	hi
 80031aa:	f04f 0a00 	movhi.w	sl, #0
 80031ae:	f006 0a01 	andls.w	sl, r6, #1
 80031b2:	45c1      	cmp	r9, r8
 80031b4:	ea4f 77d7 	mov.w	r7, r7, lsr #31
 80031b8:	d802      	bhi.n	80031c0 <copy_tilde+0x4c>
 80031ba:	f1bc 0f00 	cmp.w	ip, #0
 80031be:	d12f      	bne.n	8003220 <copy_tilde+0xac>
 80031c0:	f1ba 0f00 	cmp.w	sl, #0
 80031c4:	d037      	beq.n	8003236 <copy_tilde+0xc2>
 80031c6:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80031ca:	db5e      	blt.n	800328a <copy_tilde+0x116>
    int pixel_x = x_base + x + offset;
 80031cc:	1ccd      	adds	r5, r1, #3
 80031ce:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80031d0:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80031d4:	d245      	bcs.n	8003262 <copy_tilde+0xee>
 80031d6:	2f00      	cmp	r7, #0
 80031d8:	d043      	beq.n	8003262 <copy_tilde+0xee>
 80031da:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80031de:	da48      	bge.n	8003272 <copy_tilde+0xfe>
    int pixel_x = x_base + x + offset;
 80031e0:	1d0f      	adds	r7, r1, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80031e2:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 80031e6:	fa1f f883 	uxth.w	r8, r3
    int pixel_x = x_base + x + offset;
 80031ea:	4427      	add	r7, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80031ec:	eb05 154c 	add.w	r5, r5, ip, lsl #5
 80031f0:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80031f4:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80031f8:	f820 8015 	strh.w	r8, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80031fc:	d239      	bcs.n	8003272 <copy_tilde+0xfe>
    int pixel_x = x_base + x + offset;
 80031fe:	1d4a      	adds	r2, r1, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003200:	4467      	add	r7, ip
    int pixel_x = x_base + x + offset;
 8003202:	1911      	adds	r1, r2, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003204:	f820 8017 	strh.w	r8, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003208:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800320c:	d206      	bcs.n	800321c <copy_tilde+0xa8>
 800320e:	b12e      	cbz	r6, 800321c <copy_tilde+0xa8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003210:	ebce 130e 	rsb	r3, lr, lr, lsl #4
 8003214:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 8003218:	f820 8011 	strh.w	r8, [r0, r1, lsl #1]
    fill_pixel(buffer, x, y, 1, 4, color);
    fill_pixel(buffer, x, y, 2, 4, color);
    fill_pixel(buffer, x, y, 3, 5, color);
    fill_pixel(buffer, x, y, 4, 5, color);
    fill_pixel(buffer, x, y, 5, 4, color);
}
 800321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003220:	ebc2 1802 	rsb	r8, r2, r2, lsl #4
 8003224:	eb09 1948 	add.w	r9, r9, r8, lsl #5
 8003228:	fa1f f883 	uxth.w	r8, r3
 800322c:	f820 8019 	strh.w	r8, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003230:	f1ba 0f00 	cmp.w	sl, #0
 8003234:	d12b      	bne.n	800328e <copy_tilde+0x11a>
    int pixel_x = x_base + x + offset;
 8003236:	1c8d      	adds	r5, r1, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003238:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 800323c:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800323e:	d2c5      	bcs.n	80031cc <copy_tilde+0x58>
 8003240:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8003244:	d2c2      	bcs.n	80031cc <copy_tilde+0x58>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003246:	ebce 190e 	rsb	r9, lr, lr, lsl #4
 800324a:	fa1f f883 	uxth.w	r8, r3
 800324e:	ea4f 1949 	mov.w	r9, r9, lsl #5
 8003252:	444d      	add	r5, r9
 8003254:	f820 8015 	strh.w	r8, [r0, r5, lsl #1]
    int pixel_x = x_base + x + offset;
 8003258:	1ccd      	adds	r5, r1, #3
 800325a:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800325c:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8003260:	d3b9      	bcc.n	80031d6 <copy_tilde+0x62>
    int pixel_x = x_base + x + offset;
 8003262:	1d0f      	adds	r7, r1, #4
 8003264:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003266:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800326a:	d202      	bcs.n	8003272 <copy_tilde+0xfe>
 800326c:	f1bc 0f00 	cmp.w	ip, #0
 8003270:	d11e      	bne.n	80032b0 <copy_tilde+0x13c>
    int pixel_x = x_base + x + offset;
 8003272:	1d4a      	adds	r2, r1, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003274:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8003278:	eb02 0104 	add.w	r1, r2, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800327c:	d2ce      	bcs.n	800321c <copy_tilde+0xa8>
 800327e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8003282:	d2cb      	bcs.n	800321c <copy_tilde+0xa8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003284:	fa1f f883 	uxth.w	r8, r3
 8003288:	e7c2      	b.n	8003210 <copy_tilde+0x9c>
 800328a:	fa1f f883 	uxth.w	r8, r3
 800328e:	ebce 190e 	rsb	r9, lr, lr, lsl #4
 8003292:	eb05 1549 	add.w	r5, r5, r9, lsl #5
 8003296:	ea4f 1949 	mov.w	r9, r9, lsl #5
 800329a:	f820 8015 	strh.w	r8, [r0, r5, lsl #1]
    int pixel_x = x_base + x + offset;
 800329e:	1c8d      	adds	r5, r1, #2
 80032a0:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80032a2:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80032a6:	d291      	bcs.n	80031cc <copy_tilde+0x58>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80032a8:	444d      	add	r5, r9
 80032aa:	f820 8015 	strh.w	r8, [r0, r5, lsl #1]
 80032ae:	e7d3      	b.n	8003258 <copy_tilde+0xe4>
 80032b0:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 80032b4:	fa1f f883 	uxth.w	r8, r3
 80032b8:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80032bc:	e79f      	b.n	80031fe <copy_tilde+0x8a>
 80032be:	bf00      	nop
 80032c0:	240001b8 	.word	0x240001b8

080032c4 <copy_semicolon>:

void copy_semicolon(uint16_t* buffer, int x, int y, uint32_t color)
{
 80032c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pixel_x = x_base + x + offset;
 80032c8:	4cb9      	ldr	r4, [pc, #740]	@ (80035b0 <copy_semicolon+0x2ec>)
 80032ca:	f101 0e01 	add.w	lr, r1, #1
 80032ce:	6824      	ldr	r4, [r4, #0]
 80032d0:	44a6      	add	lr, r4
 80032d2:	f104 0c02 	add.w	ip, r4, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80032d6:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80032da:	448c      	add	ip, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80032dc:	bf2c      	ite	cs
 80032de:	2600      	movcs	r6, #0
 80032e0:	2601      	movcc	r6, #1
 80032e2:	1d15      	adds	r5, r2, #4
 80032e4:	4667      	mov	r7, ip
 80032e6:	d45c      	bmi.n	80033a2 <copy_semicolon+0xde>
 80032e8:	2e00      	cmp	r6, #0
 80032ea:	d05a      	beq.n	80033a2 <copy_semicolon+0xde>
 80032ec:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80032f0:	da55      	bge.n	800339e <copy_semicolon+0xda>
    int pixel_x = x_base + x + offset;
 80032f2:	f101 0802 	add.w	r8, r1, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80032f6:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80032fa:	fa1f f983 	uxth.w	r9, r3
    int pixel_x = x_base + x + offset;
 80032fe:	44a0      	add	r8, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003300:	eb0e 1a45 	add.w	sl, lr, r5, lsl #5
 8003304:	016d      	lsls	r5, r5, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003306:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800330a:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800330e:	f080 8104 	bcs.w	800351a <copy_semicolon+0x256>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003312:	4445      	add	r5, r8
 8003314:	f820 9015 	strh.w	r9, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 8003318:	1d55      	adds	r5, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800331a:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800331e:	da3e      	bge.n	800339e <copy_semicolon+0xda>
    int pixel_x = x_base + x + offset;
 8003320:	f101 0802 	add.w	r8, r1, #2
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003324:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003328:	fa1f f983 	uxth.w	r9, r3
    int pixel_x = x_base + x + offset;
 800332c:	44a0      	add	r8, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800332e:	eb0e 1a45 	add.w	sl, lr, r5, lsl #5
 8003332:	016d      	lsls	r5, r5, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003334:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003338:	f820 901a 	strh.w	r9, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800333c:	f0c0 8096 	bcc.w	800346c <copy_semicolon+0x1a8>
    for (int i = 4; i < 6; i++)
 8003340:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
    int pixel_y = y_base + y;
 8003344:	f102 0508 	add.w	r5, r2, #8
 8003348:	f0c0 80f0 	bcc.w	800352c <copy_semicolon+0x268>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800334c:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003350:	da25      	bge.n	800339e <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003352:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003356:	eb0e 1145 	add.w	r1, lr, r5, lsl #5
    int pixel_y = y_base + y;
 800335a:	f102 0509 	add.w	r5, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800335e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003362:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003366:	da1a      	bge.n	800339e <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003368:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800336c:	eb0e 1145 	add.w	r1, lr, r5, lsl #5
    int pixel_y = y_base + y;
 8003370:	f102 050a 	add.w	r5, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003374:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003378:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800337c:	da0f      	bge.n	800339e <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800337e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    int pixel_y = y_base + y;
 8003382:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003384:	eb0e 1145 	add.w	r1, lr, r5, lsl #5
 8003388:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800338c:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8003390:	da05      	bge.n	800339e <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003392:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003396:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 800339a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    for (int i = 8; i < 12; i++)
    {
        for (int j = 1; j < 3; j++)
            fill_pixel(buffer, x, y, j, i, color);
    }
}
 800339e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80033a2:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80033a6:	bf2c      	ite	cs
 80033a8:	f04f 0800 	movcs.w	r8, #0
 80033ac:	f04f 0801 	movcc.w	r8, #1
 80033b0:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80033b4:	d203      	bcs.n	80033be <copy_semicolon+0xfa>
 80033b6:	f1b8 0f00 	cmp.w	r8, #0
 80033ba:	f040 80b0 	bne.w	800351e <copy_semicolon+0x25a>
 80033be:	1d55      	adds	r5, r2, #5
 80033c0:	d401      	bmi.n	80033c6 <copy_semicolon+0x102>
 80033c2:	2e00      	cmp	r6, #0
 80033c4:	d1a9      	bne.n	800331a <copy_semicolon+0x56>
 80033c6:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80033ca:	d202      	bcs.n	80033d2 <copy_semicolon+0x10e>
 80033cc:	f1b8 0f00 	cmp.w	r8, #0
 80033d0:	d150      	bne.n	8003474 <copy_semicolon+0x1b0>
    for (int i = 4; i < 6; i++)
 80033d2:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80033d6:	d353      	bcc.n	8003480 <copy_semicolon+0x1bc>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80033d8:	f112 0508 	adds.w	r5, r2, #8
 80033dc:	d401      	bmi.n	80033e2 <copy_semicolon+0x11e>
 80033de:	2e00      	cmp	r6, #0
 80033e0:	d1b4      	bne.n	800334c <copy_semicolon+0x88>
    int pixel_x = x_base + x + offset;
 80033e2:	3102      	adds	r1, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80033e4:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80033e8:	eb01 0704 	add.w	r7, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80033ec:	d208      	bcs.n	8003400 <copy_semicolon+0x13c>
 80033ee:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80033f2:	d205      	bcs.n	8003400 <copy_semicolon+0x13c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80033f4:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80033f8:	eb07 1745 	add.w	r7, r7, r5, lsl #5
 80033fc:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003400:	f112 0509 	adds.w	r5, r2, #9
 8003404:	d401      	bmi.n	800340a <copy_semicolon+0x146>
 8003406:	2e00      	cmp	r6, #0
 8003408:	d1ab      	bne.n	8003362 <copy_semicolon+0x9e>
    int pixel_x = x_base + x + offset;
 800340a:	190f      	adds	r7, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800340c:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8003410:	d208      	bcs.n	8003424 <copy_semicolon+0x160>
 8003412:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003416:	d205      	bcs.n	8003424 <copy_semicolon+0x160>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003418:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800341c:	eb07 1745 	add.w	r7, r7, r5, lsl #5
 8003420:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003424:	f112 050a 	adds.w	r5, r2, #10
 8003428:	d401      	bmi.n	800342e <copy_semicolon+0x16a>
 800342a:	2e00      	cmp	r6, #0
 800342c:	d1a4      	bne.n	8003378 <copy_semicolon+0xb4>
    int pixel_x = x_base + x + offset;
 800342e:	190f      	adds	r7, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003430:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8003434:	d208      	bcs.n	8003448 <copy_semicolon+0x184>
 8003436:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800343a:	d205      	bcs.n	8003448 <copy_semicolon+0x184>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800343c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003440:	eb07 1745 	add.w	r7, r7, r5, lsl #5
 8003444:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003448:	320b      	adds	r2, #11
 800344a:	d401      	bmi.n	8003450 <copy_semicolon+0x18c>
 800344c:	2e00      	cmp	r6, #0
 800344e:	d19d      	bne.n	800338c <copy_semicolon+0xc8>
 8003450:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8003454:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003456:	d2a2      	bcs.n	800339e <copy_semicolon+0xda>
 8003458:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800345c:	d29f      	bcs.n	800339e <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800345e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003462:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8003466:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800346a:	e798      	b.n	800339e <copy_semicolon+0xda>
 800346c:	44a8      	add	r8, r5
 800346e:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
 8003472:	e7ae      	b.n	80033d2 <copy_semicolon+0x10e>
 8003474:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003478:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 800347c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003480:	f112 0508 	adds.w	r5, r2, #8
 8003484:	d401      	bmi.n	800348a <copy_semicolon+0x1c6>
 8003486:	2e00      	cmp	r6, #0
 8003488:	d150      	bne.n	800352c <copy_semicolon+0x268>
    int pixel_x = x_base + x + offset;
 800348a:	3102      	adds	r1, #2
 800348c:	eb01 0804 	add.w	r8, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003490:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8003494:	d208      	bcs.n	80034a8 <copy_semicolon+0x1e4>
 8003496:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800349a:	d205      	bcs.n	80034a8 <copy_semicolon+0x1e4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800349c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80034a0:	eb08 1845 	add.w	r8, r8, r5, lsl #5
 80034a4:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80034a8:	f112 0509 	adds.w	r5, r2, #9
 80034ac:	d401      	bmi.n	80034b2 <copy_semicolon+0x1ee>
 80034ae:	2e00      	cmp	r6, #0
 80034b0:	d14d      	bne.n	800354e <copy_semicolon+0x28a>
    int pixel_x = x_base + x + offset;
 80034b2:	eb01 0804 	add.w	r8, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80034b6:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80034ba:	d208      	bcs.n	80034ce <copy_semicolon+0x20a>
 80034bc:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80034c0:	d205      	bcs.n	80034ce <copy_semicolon+0x20a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80034c2:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80034c6:	eb08 1845 	add.w	r8, r8, r5, lsl #5
 80034ca:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80034ce:	f112 050a 	adds.w	r5, r2, #10
 80034d2:	d401      	bmi.n	80034d8 <copy_semicolon+0x214>
 80034d4:	2e00      	cmp	r6, #0
 80034d6:	d14b      	bne.n	8003570 <copy_semicolon+0x2ac>
    int pixel_x = x_base + x + offset;
 80034d8:	eb01 0c04 	add.w	ip, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80034dc:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80034e0:	d208      	bcs.n	80034f4 <copy_semicolon+0x230>
 80034e2:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80034e6:	d205      	bcs.n	80034f4 <copy_semicolon+0x230>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80034e8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80034ec:	eb0c 1c45 	add.w	ip, ip, r5, lsl #5
 80034f0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80034f4:	320b      	adds	r2, #11
 80034f6:	d401      	bmi.n	80034fc <copy_semicolon+0x238>
 80034f8:	2e00      	cmp	r6, #0
 80034fa:	d149      	bne.n	8003590 <copy_semicolon+0x2cc>
 80034fc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8003500:	eb01 0704 	add.w	r7, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003504:	f4bf af4b 	bcs.w	800339e <copy_semicolon+0xda>
 8003508:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800350c:	f4bf af47 	bcs.w	800339e <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003510:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003514:	b29b      	uxth	r3, r3
 8003516:	0152      	lsls	r2, r2, #5
 8003518:	e046      	b.n	80035a8 <copy_semicolon+0x2e4>
    int pixel_y = y_base + y;
 800351a:	1d55      	adds	r5, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800351c:	e6fd      	b.n	800331a <copy_semicolon+0x56>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800351e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003522:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8003526:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800352a:	e748      	b.n	80033be <copy_semicolon+0xfa>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800352c:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003530:	f6bf af35 	bge.w	800339e <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003534:	ebc5 1105 	rsb	r1, r5, r5, lsl #4
    int pixel_y = y_base + y;
 8003538:	f102 0509 	add.w	r5, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800353c:	b29c      	uxth	r4, r3
 800353e:	eb0e 1641 	add.w	r6, lr, r1, lsl #5
 8003542:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8003546:	f820 4016 	strh.w	r4, [r0, r6, lsl #1]
 800354a:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800354e:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003552:	f6bf af24 	bge.w	800339e <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003556:	ebc5 1105 	rsb	r1, r5, r5, lsl #4
    int pixel_y = y_base + y;
 800355a:	f102 050a 	add.w	r5, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800355e:	b29c      	uxth	r4, r3
 8003560:	eb0e 1641 	add.w	r6, lr, r1, lsl #5
 8003564:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8003568:	f820 4016 	strh.w	r4, [r0, r6, lsl #1]
 800356c:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003570:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8003574:	f6bf af13 	bge.w	800339e <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003578:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    int pixel_y = y_base + y;
 800357c:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800357e:	b299      	uxth	r1, r3
 8003580:	eb0c 1c45 	add.w	ip, ip, r5, lsl #5
 8003584:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8003588:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
 800358c:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003590:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8003594:	f6bf af03 	bge.w	800339e <copy_semicolon+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003598:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800359c:	b29b      	uxth	r3, r3
 800359e:	eb0e 1e42 	add.w	lr, lr, r2, lsl #5
 80035a2:	0152      	lsls	r2, r2, #5
 80035a4:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80035a8:	443a      	add	r2, r7
 80035aa:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 80035ae:	e6f6      	b.n	800339e <copy_semicolon+0xda>
 80035b0:	240001b8 	.word	0x240001b8

080035b4 <copy_colon>:

void copy_colon(uint16_t* buffer, int x, int y, uint32_t color)
{
 80035b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int pixel_x = x_base + x + offset;
 80035b6:	4c5d      	ldr	r4, [pc, #372]	@ (800372c <copy_colon+0x178>)
 80035b8:	f101 0c02 	add.w	ip, r1, #2
 80035bc:	6824      	ldr	r4, [r4, #0]
 80035be:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80035c0:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80035c4:	bf2c      	ite	cs
 80035c6:	2500      	movcs	r5, #0
 80035c8:	2501      	movcc	r5, #1
 80035ca:	f112 0e03 	adds.w	lr, r2, #3
 80035ce:	d456      	bmi.n	800367e <copy_colon+0xca>
 80035d0:	2d00      	cmp	r5, #0
 80035d2:	d054      	beq.n	800367e <copy_colon+0xca>
 80035d4:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80035d8:	da50      	bge.n	800367c <copy_colon+0xc8>
    int pixel_x = x_base + x + offset;
 80035da:	1ccd      	adds	r5, r1, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80035dc:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 80035e0:	b29e      	uxth	r6, r3
    int pixel_x = x_base + x + offset;
 80035e2:	4425      	add	r5, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80035e4:	eb0c 174e 	add.w	r7, ip, lr, lsl #5
 80035e8:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80035ec:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80035f0:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80035f4:	d274      	bcs.n	80036e0 <copy_colon+0x12c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80035f6:	44ae      	add	lr, r5
 80035f8:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
    int pixel_y = y_base + y;
 80035fc:	f102 0e04 	add.w	lr, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003600:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8003604:	da3a      	bge.n	800367c <copy_colon+0xc8>
    int pixel_x = x_base + x + offset;
 8003606:	1ccd      	adds	r5, r1, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003608:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800360c:	b29e      	uxth	r6, r3
    int pixel_x = x_base + x + offset;
 800360e:	4425      	add	r5, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003610:	eb0c 174e 	add.w	r7, ip, lr, lsl #5
 8003614:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003618:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800361c:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003620:	d275      	bcs.n	800370e <copy_colon+0x15a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003622:	4475      	add	r5, lr
    int pixel_y = y_base + y;
 8003624:	f102 0e07 	add.w	lr, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003628:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800362c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8003630:	da24      	bge.n	800367c <copy_colon+0xc8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003632:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    int pixel_x = x_base + x + offset;
 8003636:	3103      	adds	r1, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003638:	b29e      	uxth	r6, r3
 800363a:	eb0c 154e 	add.w	r5, ip, lr, lsl #5
 800363e:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8003642:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
    int pixel_x = x_base + x + offset;
 8003646:	190d      	adds	r5, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003648:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 800364c:	d26c      	bcs.n	8003728 <copy_colon+0x174>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800364e:	44ae      	add	lr, r5
    int pixel_y = y_base + y;
 8003650:	3208      	adds	r2, #8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003652:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003656:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800365a:	da0f      	bge.n	800367c <copy_colon+0xc8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800365c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    int pixel_x = x_base + x + offset;
 8003660:	4421      	add	r1, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003662:	b29b      	uxth	r3, r3
 8003664:	eb0c 1c42 	add.w	ip, ip, r2, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003668:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800366c:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8003670:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003674:	d202      	bcs.n	800367c <copy_colon+0xc8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003676:	4411      	add	r1, r2
 8003678:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for (int i = 7; i < 9; i++)
    {
        for (int j = 2; j < 4; j++)
            fill_pixel(buffer, x, y, j, i, color);
    }
}
 800367c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int pixel_x = x_base + x + offset;
 800367e:	1ce6      	adds	r6, r4, #3
 8003680:	440e      	add	r6, r1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003682:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8003686:	bf2c      	ite	cs
 8003688:	2700      	movcs	r7, #0
 800368a:	2701      	movcc	r7, #1
 800368c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8003690:	d200      	bcs.n	8003694 <copy_colon+0xe0>
 8003692:	bb47      	cbnz	r7, 80036e6 <copy_colon+0x132>
 8003694:	f112 0e04 	adds.w	lr, r2, #4
 8003698:	d401      	bmi.n	800369e <copy_colon+0xea>
 800369a:	2d00      	cmp	r5, #0
 800369c:	d1b0      	bne.n	8003600 <copy_colon+0x4c>
 800369e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80036a2:	d200      	bcs.n	80036a6 <copy_colon+0xf2>
 80036a4:	bb4f      	cbnz	r7, 80036fa <copy_colon+0x146>
 80036a6:	f112 0e07 	adds.w	lr, r2, #7
 80036aa:	d401      	bmi.n	80036b0 <copy_colon+0xfc>
 80036ac:	2d00      	cmp	r5, #0
 80036ae:	d1bd      	bne.n	800362c <copy_colon+0x78>
    int pixel_x = x_base + x + offset;
 80036b0:	3103      	adds	r1, #3
 80036b2:	190e      	adds	r6, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036b4:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80036b8:	d202      	bcs.n	80036c0 <copy_colon+0x10c>
 80036ba:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80036be:	d32c      	bcc.n	800371a <copy_colon+0x166>
 80036c0:	3208      	adds	r2, #8
 80036c2:	d401      	bmi.n	80036c8 <copy_colon+0x114>
 80036c4:	2d00      	cmp	r5, #0
 80036c6:	d1c6      	bne.n	8003656 <copy_colon+0xa2>
 80036c8:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80036cc:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036ce:	d2d5      	bcs.n	800367c <copy_colon+0xc8>
 80036d0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80036d4:	d2d2      	bcs.n	800367c <copy_colon+0xc8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80036d6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80036da:	b29b      	uxth	r3, r3
 80036dc:	0152      	lsls	r2, r2, #5
 80036de:	e7ca      	b.n	8003676 <copy_colon+0xc2>
    int pixel_y = y_base + y;
 80036e0:	f102 0e04 	add.w	lr, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036e4:	e78c      	b.n	8003600 <copy_colon+0x4c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80036e6:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 80036ea:	eb06 1e4e 	add.w	lr, r6, lr, lsl #5
 80036ee:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80036f2:	f112 0e04 	adds.w	lr, r2, #4
 80036f6:	d5d0      	bpl.n	800369a <copy_colon+0xe6>
 80036f8:	e7d1      	b.n	800369e <copy_colon+0xea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80036fa:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 80036fe:	eb06 164e 	add.w	r6, r6, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003702:	f112 0e07 	adds.w	lr, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003706:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800370a:	d5cf      	bpl.n	80036ac <copy_colon+0xf8>
 800370c:	e7d0      	b.n	80036b0 <copy_colon+0xfc>
    int pixel_y = y_base + y;
 800370e:	f102 0e07 	add.w	lr, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003712:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8003716:	db8c      	blt.n	8003632 <copy_colon+0x7e>
 8003718:	e7b0      	b.n	800367c <copy_colon+0xc8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800371a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800371e:	eb06 164e 	add.w	r6, r6, lr, lsl #5
 8003722:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8003726:	e7cb      	b.n	80036c0 <copy_colon+0x10c>
    int pixel_y = y_base + y;
 8003728:	3208      	adds	r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800372a:	e794      	b.n	8003656 <copy_colon+0xa2>
 800372c:	240001b8 	.word	0x240001b8

08003730 <copy_A>:

//================================ LETTER -> BUFFER =====================================================

void copy_A(uint16_t* buffer, int x, int y, uint32_t color)
{
 8003730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8003734:	4c95      	ldr	r4, [pc, #596]	@ (800398c <copy_A+0x25c>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003736:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800373a:	b099      	sub	sp, #100	@ 0x64
    int pixel_x = x_base + x + offset;
 800373c:	6825      	ldr	r5, [r4, #0]
 800373e:	f101 0401 	add.w	r4, r1, #1
 8003742:	eb04 0705 	add.w	r7, r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003746:	bf2c      	ite	cs
 8003748:	2400      	movcs	r4, #0
 800374a:	2401      	movcc	r4, #1
 800374c:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8003750:	9711      	str	r7, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003752:	bf2c      	ite	cs
 8003754:	2600      	movcs	r6, #0
 8003756:	2601      	movcc	r6, #1
 8003758:	9604      	str	r6, [sp, #16]
 800375a:	b114      	cbz	r4, 8003762 <copy_A+0x32>
 800375c:	2e00      	cmp	r6, #0
 800375e:	f040 815a 	bne.w	8003a16 <copy_A+0x2e6>
    int pixel_x = x_base + x + offset;
 8003762:	1c8e      	adds	r6, r1, #2
 8003764:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003766:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800376a:	9712      	str	r7, [sp, #72]	@ 0x48
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800376c:	bf2c      	ite	cs
 800376e:	2600      	movcs	r6, #0
 8003770:	2601      	movcc	r6, #1
 8003772:	9605      	str	r6, [sp, #20]
 8003774:	b114      	cbz	r4, 800377c <copy_A+0x4c>
 8003776:	2e00      	cmp	r6, #0
 8003778:	f040 8146 	bne.w	8003a08 <copy_A+0x2d8>
    int pixel_x = x_base + x + offset;
 800377c:	1cce      	adds	r6, r1, #3
 800377e:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003780:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8003784:	9713      	str	r7, [sp, #76]	@ 0x4c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003786:	bf2c      	ite	cs
 8003788:	2600      	movcs	r6, #0
 800378a:	2601      	movcc	r6, #1
 800378c:	9606      	str	r6, [sp, #24]
 800378e:	b114      	cbz	r4, 8003796 <copy_A+0x66>
 8003790:	2e00      	cmp	r6, #0
 8003792:	f040 8132 	bne.w	80039fa <copy_A+0x2ca>
    int pixel_x = x_base + x + offset;
 8003796:	1d0e      	adds	r6, r1, #4
 8003798:	442e      	add	r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800379a:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800379e:	960f      	str	r6, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037a0:	bf2c      	ite	cs
 80037a2:	2700      	movcs	r7, #0
 80037a4:	2701      	movcc	r7, #1
 80037a6:	9701      	str	r7, [sp, #4]
 80037a8:	b117      	cbz	r7, 80037b0 <copy_A+0x80>
 80037aa:	2c00      	cmp	r4, #0
 80037ac:	f040 811e 	bne.w	80039ec <copy_A+0x2bc>
    int pixel_x = x_base + x + offset;
 80037b0:	eb01 0e05 	add.w	lr, r1, r5
    int pixel_y = y_base + y;
 80037b4:	1c56      	adds	r6, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037b6:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
    int pixel_y = y_base + y;
 80037ba:	9610      	str	r6, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037bc:	bf2c      	ite	cs
 80037be:	2400      	movcs	r4, #0
 80037c0:	2401      	movcc	r4, #1
 80037c2:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 80037c6:	bf2c      	ite	cs
 80037c8:	2700      	movcs	r7, #0
 80037ca:	2701      	movcc	r7, #1
 80037cc:	9703      	str	r7, [sp, #12]
 80037ce:	b114      	cbz	r4, 80037d6 <copy_A+0xa6>
 80037d0:	2f00      	cmp	r7, #0
 80037d2:	f040 8127 	bne.w	8003a24 <copy_A+0x2f4>
    int pixel_y = y_base + y;
 80037d6:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037d8:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80037dc:	9714      	str	r7, [sp, #80]	@ 0x50
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037de:	bf2c      	ite	cs
 80037e0:	2600      	movcs	r6, #0
 80037e2:	2601      	movcc	r6, #1
 80037e4:	9607      	str	r6, [sp, #28]
 80037e6:	b134      	cbz	r4, 80037f6 <copy_A+0xc6>
 80037e8:	b12e      	cbz	r6, 80037f6 <copy_A+0xc6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80037ea:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80037ee:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 80037f2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 80037f6:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037f8:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80037fc:	9715      	str	r7, [sp, #84]	@ 0x54
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80037fe:	bf2c      	ite	cs
 8003800:	2600      	movcs	r6, #0
 8003802:	2601      	movcc	r6, #1
 8003804:	9608      	str	r6, [sp, #32]
 8003806:	b134      	cbz	r4, 8003816 <copy_A+0xe6>
 8003808:	b12e      	cbz	r6, 8003816 <copy_A+0xe6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800380a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800380e:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003812:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 8003816:	1d17      	adds	r7, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003818:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800381c:	9716      	str	r7, [sp, #88]	@ 0x58
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800381e:	bf2c      	ite	cs
 8003820:	2600      	movcs	r6, #0
 8003822:	2601      	movcc	r6, #1
 8003824:	9609      	str	r6, [sp, #36]	@ 0x24
 8003826:	b134      	cbz	r4, 8003836 <copy_A+0x106>
 8003828:	b12e      	cbz	r6, 8003836 <copy_A+0x106>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800382a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800382e:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003832:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 8003836:	1d57      	adds	r7, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003838:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800383c:	9717      	str	r7, [sp, #92]	@ 0x5c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800383e:	bf2c      	ite	cs
 8003840:	2600      	movcs	r6, #0
 8003842:	2601      	movcc	r6, #1
 8003844:	960a      	str	r6, [sp, #40]	@ 0x28
 8003846:	b134      	cbz	r4, 8003856 <copy_A+0x126>
 8003848:	b12e      	cbz	r6, 8003856 <copy_A+0x126>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800384a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800384e:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003852:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 8003856:	f102 0c06 	add.w	ip, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800385a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800385e:	bf2c      	ite	cs
 8003860:	2600      	movcs	r6, #0
 8003862:	2601      	movcc	r6, #1
 8003864:	9602      	str	r6, [sp, #8]
 8003866:	b134      	cbz	r4, 8003876 <copy_A+0x146>
 8003868:	b12e      	cbz	r6, 8003876 <copy_A+0x146>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800386a:	ebcc 170c 	rsb	r7, ip, ip, lsl #4
 800386e:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003872:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 8003876:	f102 0a07 	add.w	sl, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800387a:	ea4f 160c 	mov.w	r6, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800387e:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003882:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003884:	bf2c      	ite	cs
 8003886:	2600      	movcs	r6, #0
 8003888:	2601      	movcc	r6, #1
 800388a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800388c:	b134      	cbz	r4, 800389c <copy_A+0x16c>
 800388e:	b12e      	cbz	r6, 800389c <copy_A+0x16c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003890:	ebca 170a 	rsb	r7, sl, sl, lsl #4
 8003894:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003898:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 800389c:	f102 0908 	add.w	r9, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80038a0:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 80038a4:	bf2c      	ite	cs
 80038a6:	2600      	movcs	r6, #0
 80038a8:	2601      	movcc	r6, #1
 80038aa:	960c      	str	r6, [sp, #48]	@ 0x30
 80038ac:	b134      	cbz	r4, 80038bc <copy_A+0x18c>
 80038ae:	b12e      	cbz	r6, 80038bc <copy_A+0x18c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80038b0:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 80038b4:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 80038b8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 80038bc:	f102 0809 	add.w	r8, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80038c0:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80038c4:	bf2c      	ite	cs
 80038c6:	2600      	movcs	r6, #0
 80038c8:	2601      	movcc	r6, #1
 80038ca:	960d      	str	r6, [sp, #52]	@ 0x34
 80038cc:	b134      	cbz	r4, 80038dc <copy_A+0x1ac>
 80038ce:	b12e      	cbz	r6, 80038dc <copy_A+0x1ac>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80038d0:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 80038d4:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 80038d8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_y = y_base + y;
 80038dc:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80038e0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80038e4:	bf2c      	ite	cs
 80038e6:	2600      	movcs	r6, #0
 80038e8:	2601      	movcc	r6, #1
 80038ea:	960e      	str	r6, [sp, #56]	@ 0x38
 80038ec:	b134      	cbz	r4, 80038fc <copy_A+0x1cc>
 80038ee:	b12e      	cbz	r6, 80038fc <copy_A+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80038f0:	ebc7 1b07 	rsb	fp, r7, r7, lsl #4
 80038f4:	eb0e 1b4b 	add.w	fp, lr, fp, lsl #5
 80038f8:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    int pixel_y = y_base + y;
 80038fc:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80038fe:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8003902:	bf2c      	ite	cs
 8003904:	f04f 0b00 	movcs.w	fp, #0
 8003908:	f04f 0b01 	movcc.w	fp, #1
 800390c:	f1bb 0f00 	cmp.w	fp, #0
 8003910:	d006      	beq.n	8003920 <copy_A+0x1f0>
 8003912:	b12c      	cbz	r4, 8003920 <copy_A+0x1f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003914:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8003918:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 800391c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    int pixel_x = x_base + x + offset;
 8003920:	3105      	adds	r1, #5
 8003922:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003924:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8003928:	bf2c      	ite	cs
 800392a:	2400      	movcs	r4, #0
 800392c:	2401      	movcc	r4, #1
 800392e:	2c00      	cmp	r4, #0
 8003930:	d037      	beq.n	80039a2 <copy_A+0x272>
 8003932:	9d03      	ldr	r5, [sp, #12]
 8003934:	2d00      	cmp	r5, #0
 8003936:	f040 80d3 	bne.w	8003ae0 <copy_A+0x3b0>
 800393a:	2c00      	cmp	r4, #0
 800393c:	d031      	beq.n	80039a2 <copy_A+0x272>
 800393e:	9d07      	ldr	r5, [sp, #28]
 8003940:	2d00      	cmp	r5, #0
 8003942:	f040 80c5 	bne.w	8003ad0 <copy_A+0x3a0>
 8003946:	2c00      	cmp	r4, #0
 8003948:	d02b      	beq.n	80039a2 <copy_A+0x272>
 800394a:	9d08      	ldr	r5, [sp, #32]
 800394c:	2d00      	cmp	r5, #0
 800394e:	f040 80b0 	bne.w	8003ab2 <copy_A+0x382>
 8003952:	b334      	cbz	r4, 80039a2 <copy_A+0x272>
 8003954:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003956:	2d00      	cmp	r5, #0
 8003958:	f040 80a3 	bne.w	8003aa2 <copy_A+0x372>
 800395c:	b30c      	cbz	r4, 80039a2 <copy_A+0x272>
 800395e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8003960:	2d00      	cmp	r5, #0
 8003962:	f040 8096 	bne.w	8003a92 <copy_A+0x362>
 8003966:	b1e4      	cbz	r4, 80039a2 <copy_A+0x272>
 8003968:	9d02      	ldr	r5, [sp, #8]
 800396a:	2d00      	cmp	r5, #0
 800396c:	f040 8089 	bne.w	8003a82 <copy_A+0x352>
 8003970:	b1bc      	cbz	r4, 80039a2 <copy_A+0x272>
 8003972:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003974:	2d00      	cmp	r5, #0
 8003976:	d17d      	bne.n	8003a74 <copy_A+0x344>
 8003978:	b19c      	cbz	r4, 80039a2 <copy_A+0x272>
 800397a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800397c:	2d00      	cmp	r5, #0
 800397e:	d166      	bne.n	8003a4e <copy_A+0x31e>
 8003980:	b17c      	cbz	r4, 80039a2 <copy_A+0x272>
 8003982:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8003984:	2d00      	cmp	r5, #0
 8003986:	d15b      	bne.n	8003a40 <copy_A+0x310>
 8003988:	e002      	b.n	8003990 <copy_A+0x260>
 800398a:	bf00      	nop
 800398c:	240001b8 	.word	0x240001b8
 8003990:	b13c      	cbz	r4, 80039a2 <copy_A+0x272>
 8003992:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8003994:	b12d      	cbz	r5, 80039a2 <copy_A+0x272>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003996:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800399a:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 800399e:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80039a2:	f1bb 0f00 	cmp.w	fp, #0
 80039a6:	d002      	beq.n	80039ae <copy_A+0x27e>
 80039a8:	2c00      	cmp	r4, #0
 80039aa:	f040 808a 	bne.w	8003ac2 <copy_A+0x392>
 80039ae:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80039b2:	9a00      	ldr	r2, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80039b4:	bf28      	it	cs
 80039b6:	2100      	movcs	r1, #0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80039b8:	eba2 020c 	sub.w	r2, r2, ip
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80039bc:	bf38      	it	cc
 80039be:	2101      	movcc	r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80039c0:	0152      	lsls	r2, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80039c2:	b169      	cbz	r1, 80039e0 <copy_A+0x2b0>
 80039c4:	9c04      	ldr	r4, [sp, #16]
 80039c6:	2c00      	cmp	r4, #0
 80039c8:	d14d      	bne.n	8003a66 <copy_A+0x336>
 80039ca:	b149      	cbz	r1, 80039e0 <copy_A+0x2b0>
 80039cc:	9c05      	ldr	r4, [sp, #20]
 80039ce:	2c00      	cmp	r4, #0
 80039d0:	d144      	bne.n	8003a5c <copy_A+0x32c>
 80039d2:	b129      	cbz	r1, 80039e0 <copy_A+0x2b0>
 80039d4:	9c06      	ldr	r4, [sp, #24]
 80039d6:	b11c      	cbz	r4, 80039e0 <copy_A+0x2b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80039d8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80039da:	4414      	add	r4, r2
 80039dc:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80039e0:	9c01      	ldr	r4, [sp, #4]
 80039e2:	b104      	cbz	r4, 80039e6 <copy_A+0x2b6>
 80039e4:	bb29      	cbnz	r1, 8003a32 <copy_A+0x302>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 12; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 6, color);
}
 80039e6:	b019      	add	sp, #100	@ 0x64
 80039e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80039ec:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 80039f0:	eb06 1444 	add.w	r4, r6, r4, lsl #5
 80039f4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80039f8:	e6da      	b.n	80037b0 <copy_A+0x80>
 80039fa:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80039fe:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8003a02:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8003a06:	e6c6      	b.n	8003796 <copy_A+0x66>
 8003a08:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8003a0c:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8003a10:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8003a14:	e6b2      	b.n	800377c <copy_A+0x4c>
 8003a16:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8003a1a:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8003a1e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8003a22:	e69e      	b.n	8003762 <copy_A+0x32>
 8003a24:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 8003a28:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8003a2c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8003a30:	e6d1      	b.n	80037d6 <copy_A+0xa6>
 8003a32:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003a34:	4411      	add	r1, r2
 8003a36:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8003a3a:	b019      	add	sp, #100	@ 0x64
 8003a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003a40:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8003a44:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 8003a48:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8003a4c:	e7a0      	b.n	8003990 <copy_A+0x260>
 8003a4e:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8003a52:	eb01 1949 	add.w	r9, r1, r9, lsl #5
 8003a56:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8003a5a:	e791      	b.n	8003980 <copy_A+0x250>
 8003a5c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8003a5e:	4414      	add	r4, r2
 8003a60:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003a64:	e7b5      	b.n	80039d2 <copy_A+0x2a2>
 8003a66:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8003a68:	4414      	add	r4, r2
 8003a6a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003a6e:	2900      	cmp	r1, #0
 8003a70:	d1ac      	bne.n	80039cc <copy_A+0x29c>
 8003a72:	e7b5      	b.n	80039e0 <copy_A+0x2b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003a74:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8003a78:	eb01 1a4a 	add.w	sl, r1, sl, lsl #5
 8003a7c:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8003a80:	e77a      	b.n	8003978 <copy_A+0x248>
 8003a82:	9d00      	ldr	r5, [sp, #0]
 8003a84:	eba5 050c 	sub.w	r5, r5, ip
 8003a88:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8003a8c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8003a90:	e76e      	b.n	8003970 <copy_A+0x240>
 8003a92:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8003a94:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003a98:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8003a9c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8003aa0:	e761      	b.n	8003966 <copy_A+0x236>
 8003aa2:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8003aa4:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003aa8:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8003aac:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8003ab0:	e754      	b.n	800395c <copy_A+0x22c>
 8003ab2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8003ab4:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003ab8:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8003abc:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8003ac0:	e747      	b.n	8003952 <copy_A+0x222>
 8003ac2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003ac6:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8003aca:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8003ace:	e76e      	b.n	80039ae <copy_A+0x27e>
 8003ad0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8003ad2:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8003ad6:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8003ada:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8003ade:	e732      	b.n	8003946 <copy_A+0x216>
 8003ae0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8003ae2:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 8003ae6:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8003aea:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003aee:	2c00      	cmp	r4, #0
 8003af0:	f47f af25 	bne.w	800393e <copy_A+0x20e>
 8003af4:	e755      	b.n	80039a2 <copy_A+0x272>
 8003af6:	bf00      	nop

08003af8 <copy_B>:

void copy_B(uint16_t* buffer, int x, int y, uint32_t color)
{
 8003af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8003afc:	4c92      	ldr	r4, [pc, #584]	@ (8003d48 <copy_B+0x250>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003afe:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8003b02:	b097      	sub	sp, #92	@ 0x5c
    int pixel_x = x_base + x + offset;
 8003b04:	f8d4 8000 	ldr.w	r8, [r4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b08:	bf2c      	ite	cs
 8003b0a:	2600      	movcs	r6, #0
 8003b0c:	2601      	movcc	r6, #1
{
 8003b0e:	9101      	str	r1, [sp, #4]
    int pixel_x = x_base + x + offset;
 8003b10:	eb01 0508 	add.w	r5, r1, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b14:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8003b18:	bf2c      	ite	cs
 8003b1a:	2400      	movcs	r4, #0
 8003b1c:	2401      	movcc	r4, #1
 8003b1e:	b114      	cbz	r4, 8003b26 <copy_B+0x2e>
 8003b20:	2e00      	cmp	r6, #0
 8003b22:	f040 8177 	bne.w	8003e14 <copy_B+0x31c>
    int pixel_y = y_base + y;
 8003b26:	1c51      	adds	r1, r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003b28:	ea4f 1e02 	mov.w	lr, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b2c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8003b30:	910c      	str	r1, [sp, #48]	@ 0x30
 8003b32:	bf2c      	ite	cs
 8003b34:	2700      	movcs	r7, #0
 8003b36:	2701      	movcc	r7, #1
 8003b38:	9703      	str	r7, [sp, #12]
 8003b3a:	b114      	cbz	r4, 8003b42 <copy_B+0x4a>
 8003b3c:	2f00      	cmp	r7, #0
 8003b3e:	f040 8161 	bne.w	8003e04 <copy_B+0x30c>
    int pixel_y = y_base + y;
 8003b42:	1c91      	adds	r1, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b44:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003b48:	9110      	str	r1, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b4a:	bf2c      	ite	cs
 8003b4c:	2700      	movcs	r7, #0
 8003b4e:	2701      	movcc	r7, #1
 8003b50:	9704      	str	r7, [sp, #16]
 8003b52:	b114      	cbz	r4, 8003b5a <copy_B+0x62>
 8003b54:	2f00      	cmp	r7, #0
 8003b56:	f040 814e 	bne.w	8003df6 <copy_B+0x2fe>
    int pixel_y = y_base + y;
 8003b5a:	1cd1      	adds	r1, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b5c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003b60:	9111      	str	r1, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b62:	bf2c      	ite	cs
 8003b64:	2700      	movcs	r7, #0
 8003b66:	2701      	movcc	r7, #1
 8003b68:	9705      	str	r7, [sp, #20]
 8003b6a:	b114      	cbz	r4, 8003b72 <copy_B+0x7a>
 8003b6c:	2f00      	cmp	r7, #0
 8003b6e:	f040 813b 	bne.w	8003de8 <copy_B+0x2f0>
    int pixel_y = y_base + y;
 8003b72:	1d11      	adds	r1, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b74:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003b78:	9112      	str	r1, [sp, #72]	@ 0x48
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b7a:	bf2c      	ite	cs
 8003b7c:	2700      	movcs	r7, #0
 8003b7e:	2701      	movcc	r7, #1
 8003b80:	9706      	str	r7, [sp, #24]
 8003b82:	b114      	cbz	r4, 8003b8a <copy_B+0x92>
 8003b84:	2f00      	cmp	r7, #0
 8003b86:	f040 8128 	bne.w	8003dda <copy_B+0x2e2>
    int pixel_y = y_base + y;
 8003b8a:	f102 0a05 	add.w	sl, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b8e:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8003b92:	d202      	bcs.n	8003b9a <copy_B+0xa2>
 8003b94:	2c00      	cmp	r4, #0
 8003b96:	f040 8119 	bne.w	8003dcc <copy_B+0x2d4>
    int pixel_y = y_base + y;
 8003b9a:	1d91      	adds	r1, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003b9c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003ba0:	9113      	str	r1, [sp, #76]	@ 0x4c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ba2:	bf2c      	ite	cs
 8003ba4:	2700      	movcs	r7, #0
 8003ba6:	2701      	movcc	r7, #1
 8003ba8:	9707      	str	r7, [sp, #28]
 8003baa:	b114      	cbz	r4, 8003bb2 <copy_B+0xba>
 8003bac:	2f00      	cmp	r7, #0
 8003bae:	f040 8106 	bne.w	8003dbe <copy_B+0x2c6>
    int pixel_y = y_base + y;
 8003bb2:	1dd1      	adds	r1, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003bb4:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003bb8:	9114      	str	r1, [sp, #80]	@ 0x50
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003bba:	bf2c      	ite	cs
 8003bbc:	2700      	movcs	r7, #0
 8003bbe:	2701      	movcc	r7, #1
 8003bc0:	9708      	str	r7, [sp, #32]
 8003bc2:	b114      	cbz	r4, 8003bca <copy_B+0xd2>
 8003bc4:	2f00      	cmp	r7, #0
 8003bc6:	f040 80f3 	bne.w	8003db0 <copy_B+0x2b8>
    int pixel_y = y_base + y;
 8003bca:	f102 0908 	add.w	r9, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003bce:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8003bd2:	bf2c      	ite	cs
 8003bd4:	2100      	movcs	r1, #0
 8003bd6:	2101      	movcc	r1, #1
 8003bd8:	9109      	str	r1, [sp, #36]	@ 0x24
 8003bda:	b114      	cbz	r4, 8003be2 <copy_B+0xea>
 8003bdc:	2900      	cmp	r1, #0
 8003bde:	f040 80e0 	bne.w	8003da2 <copy_B+0x2aa>
    int pixel_y = y_base + y;
 8003be2:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003be6:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8003bea:	9115      	str	r1, [sp, #84]	@ 0x54
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003bec:	bf2c      	ite	cs
 8003bee:	2700      	movcs	r7, #0
 8003bf0:	2701      	movcc	r7, #1
 8003bf2:	970a      	str	r7, [sp, #40]	@ 0x28
 8003bf4:	b114      	cbz	r4, 8003bfc <copy_B+0x104>
 8003bf6:	2f00      	cmp	r7, #0
 8003bf8:	f040 80cc 	bne.w	8003d94 <copy_B+0x29c>
    int pixel_y = y_base + y;
 8003bfc:	f102 0b0a 	add.w	fp, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c00:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003c04:	bf2c      	ite	cs
 8003c06:	2100      	movcs	r1, #0
 8003c08:	2101      	movcc	r1, #1
 8003c0a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003c0c:	b114      	cbz	r4, 8003c14 <copy_B+0x11c>
 8003c0e:	2900      	cmp	r1, #0
 8003c10:	f040 80b9 	bne.w	8003d86 <copy_B+0x28e>
    int pixel_y = y_base + y;
 8003c14:	f102 0c0b 	add.w	ip, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c18:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8003c1c:	d202      	bcs.n	8003c24 <copy_B+0x12c>
 8003c1e:	2c00      	cmp	r4, #0
 8003c20:	f040 80aa 	bne.w	8003d78 <copy_B+0x280>
    int pixel_x = x_base + x + offset;
 8003c24:	9901      	ldr	r1, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003c26:	ebae 0202 	sub.w	r2, lr, r2
    int pixel_x = x_base + x + offset;
 8003c2a:	1c4c      	adds	r4, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003c2c:	0152      	lsls	r2, r2, #5
    int pixel_x = x_base + x + offset;
 8003c2e:	eb04 0108 	add.w	r1, r4, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c32:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8003c36:	910d      	str	r1, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c38:	bf2c      	ite	cs
 8003c3a:	2700      	movcs	r7, #0
 8003c3c:	2701      	movcc	r7, #1
 8003c3e:	b117      	cbz	r7, 8003c46 <copy_B+0x14e>
 8003c40:	2e00      	cmp	r6, #0
 8003c42:	f040 80ee 	bne.w	8003e22 <copy_B+0x32a>
    int pixel_x = x_base + x + offset;
 8003c46:	9901      	ldr	r1, [sp, #4]
 8003c48:	1c8c      	adds	r4, r1, #2
 8003c4a:	eb04 0108 	add.w	r1, r4, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c4e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8003c52:	910e      	str	r1, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c54:	bf2c      	ite	cs
 8003c56:	2400      	movcs	r4, #0
 8003c58:	2401      	movcc	r4, #1
 8003c5a:	9402      	str	r4, [sp, #8]
 8003c5c:	b114      	cbz	r4, 8003c64 <copy_B+0x16c>
 8003c5e:	2e00      	cmp	r6, #0
 8003c60:	f040 80e3 	bne.w	8003e2a <copy_B+0x332>
    int pixel_x = x_base + x + offset;
 8003c64:	9901      	ldr	r1, [sp, #4]
 8003c66:	1ccc      	adds	r4, r1, #3
 8003c68:	eb04 0108 	add.w	r1, r4, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c6c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8003c70:	910f      	str	r1, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c72:	bf2c      	ite	cs
 8003c74:	2400      	movcs	r4, #0
 8003c76:	2401      	movcc	r4, #1
 8003c78:	b114      	cbz	r4, 8003c80 <copy_B+0x188>
 8003c7a:	2e00      	cmp	r6, #0
 8003c7c:	f040 80de 	bne.w	8003e3c <copy_B+0x344>
    int pixel_x = x_base + x + offset;
 8003c80:	9901      	ldr	r1, [sp, #4]
 8003c82:	f101 0e04 	add.w	lr, r1, #4
 8003c86:	44c6      	add	lr, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003c88:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8003c8c:	bf2c      	ite	cs
 8003c8e:	2500      	movcs	r5, #0
 8003c90:	2501      	movcc	r5, #1
 8003c92:	b115      	cbz	r5, 8003c9a <copy_B+0x1a2>
 8003c94:	2e00      	cmp	r6, #0
 8003c96:	f040 80cc 	bne.w	8003e32 <copy_B+0x33a>
 8003c9a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003c9e:	f502 6a16 	add.w	sl, r2, #2400	@ 0x960
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ca2:	bf2c      	ite	cs
 8003ca4:	2600      	movcs	r6, #0
 8003ca6:	2601      	movcc	r6, #1
 8003ca8:	b16e      	cbz	r6, 8003cc6 <copy_B+0x1ce>
 8003caa:	2f00      	cmp	r7, #0
 8003cac:	f040 80ca 	bne.w	8003e44 <copy_B+0x34c>
 8003cb0:	b14e      	cbz	r6, 8003cc6 <copy_B+0x1ce>
 8003cb2:	9902      	ldr	r1, [sp, #8]
 8003cb4:	2900      	cmp	r1, #0
 8003cb6:	f040 8121 	bne.w	8003efc <copy_B+0x404>
 8003cba:	b126      	cbz	r6, 8003cc6 <copy_B+0x1ce>
 8003cbc:	b11c      	cbz	r4, 8003cc6 <copy_B+0x1ce>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003cbe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003cc0:	4451      	add	r1, sl
 8003cc2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003cc6:	b115      	cbz	r5, 8003cce <copy_B+0x1d6>
 8003cc8:	2e00      	cmp	r6, #0
 8003cca:	f040 8104 	bne.w	8003ed6 <copy_B+0x3de>
 8003cce:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003cd2:	f502 52a5 	add.w	r2, r2, #5280	@ 0x14a0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003cd6:	bf2c      	ite	cs
 8003cd8:	2600      	movcs	r6, #0
 8003cda:	2601      	movcc	r6, #1
 8003cdc:	b16e      	cbz	r6, 8003cfa <copy_B+0x202>
 8003cde:	2f00      	cmp	r7, #0
 8003ce0:	f040 80f1 	bne.w	8003ec6 <copy_B+0x3ce>
 8003ce4:	b14e      	cbz	r6, 8003cfa <copy_B+0x202>
 8003ce6:	9902      	ldr	r1, [sp, #8]
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	f040 80df 	bne.w	8003eac <copy_B+0x3b4>
 8003cee:	b126      	cbz	r6, 8003cfa <copy_B+0x202>
 8003cf0:	b11c      	cbz	r4, 8003cfa <copy_B+0x202>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003cf2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8003cf4:	4414      	add	r4, r2
 8003cf6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003cfa:	b115      	cbz	r5, 8003d02 <copy_B+0x20a>
 8003cfc:	2e00      	cmp	r6, #0
 8003cfe:	f040 80f9 	bne.w	8003ef4 <copy_B+0x3fc>
    int pixel_x = x_base + x + offset;
 8003d02:	9901      	ldr	r1, [sp, #4]
 8003d04:	3105      	adds	r1, #5
 8003d06:	4441      	add	r1, r8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003d08:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8003d0c:	bf2c      	ite	cs
 8003d0e:	2200      	movcs	r2, #0
 8003d10:	2201      	movcc	r2, #1
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	d02d      	beq.n	8003d72 <copy_B+0x27a>
 8003d16:	9c03      	ldr	r4, [sp, #12]
 8003d18:	2c00      	cmp	r4, #0
 8003d1a:	f040 80e0 	bne.w	8003ede <copy_B+0x3e6>
 8003d1e:	b342      	cbz	r2, 8003d72 <copy_B+0x27a>
 8003d20:	9c04      	ldr	r4, [sp, #16]
 8003d22:	2c00      	cmp	r4, #0
 8003d24:	f040 80aa 	bne.w	8003e7c <copy_B+0x384>
 8003d28:	b31a      	cbz	r2, 8003d72 <copy_B+0x27a>
 8003d2a:	9c05      	ldr	r4, [sp, #20]
 8003d2c:	2c00      	cmp	r4, #0
 8003d2e:	f040 80c2 	bne.w	8003eb6 <copy_B+0x3be>
 8003d32:	b1f2      	cbz	r2, 8003d72 <copy_B+0x27a>
 8003d34:	9c06      	ldr	r4, [sp, #24]
 8003d36:	2c00      	cmp	r4, #0
 8003d38:	f040 80b0 	bne.w	8003e9c <copy_B+0x3a4>
 8003d3c:	b1ca      	cbz	r2, 8003d72 <copy_B+0x27a>
 8003d3e:	9c07      	ldr	r4, [sp, #28]
 8003d40:	2c00      	cmp	r4, #0
 8003d42:	f040 80a3 	bne.w	8003e8c <copy_B+0x394>
 8003d46:	e001      	b.n	8003d4c <copy_B+0x254>
 8003d48:	240001b8 	.word	0x240001b8
 8003d4c:	b18a      	cbz	r2, 8003d72 <copy_B+0x27a>
 8003d4e:	9c08      	ldr	r4, [sp, #32]
 8003d50:	2c00      	cmp	r4, #0
 8003d52:	f040 8083 	bne.w	8003e5c <copy_B+0x364>
 8003d56:	b162      	cbz	r2, 8003d72 <copy_B+0x27a>
 8003d58:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8003d5a:	2c00      	cmp	r4, #0
 8003d5c:	d177      	bne.n	8003e4e <copy_B+0x356>
 8003d5e:	b142      	cbz	r2, 8003d72 <copy_B+0x27a>
 8003d60:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003d62:	2c00      	cmp	r4, #0
 8003d64:	f040 8082 	bne.w	8003e6c <copy_B+0x374>
 8003d68:	b11a      	cbz	r2, 8003d72 <copy_B+0x27a>
 8003d6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003d6c:	2a00      	cmp	r2, #0
 8003d6e:	f040 80ca 	bne.w	8003f06 <copy_B+0x40e>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 5, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 6; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
}
 8003d72:	b017      	add	sp, #92	@ 0x5c
 8003d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003d78:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 8003d7c:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 8003d80:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8003d84:	e74e      	b.n	8003c24 <copy_B+0x12c>
 8003d86:	ebcb 1c0b 	rsb	ip, fp, fp, lsl #4
 8003d8a:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003d8e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003d92:	e73f      	b.n	8003c14 <copy_B+0x11c>
 8003d94:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003d98:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003d9c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003da0:	e72c      	b.n	8003bfc <copy_B+0x104>
 8003da2:	ebc9 1c09 	rsb	ip, r9, r9, lsl #4
 8003da6:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003daa:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003dae:	e718      	b.n	8003be2 <copy_B+0xea>
 8003db0:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003db4:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003db8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003dbc:	e705      	b.n	8003bca <copy_B+0xd2>
 8003dbe:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003dc2:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003dc6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003dca:	e6f2      	b.n	8003bb2 <copy_B+0xba>
 8003dcc:	ebca 1c0a 	rsb	ip, sl, sl, lsl #4
 8003dd0:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003dd4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003dd8:	e6df      	b.n	8003b9a <copy_B+0xa2>
 8003dda:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003dde:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003de2:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003de6:	e6d0      	b.n	8003b8a <copy_B+0x92>
 8003de8:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003dec:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003df0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003df4:	e6bd      	b.n	8003b72 <copy_B+0x7a>
 8003df6:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003dfa:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003dfe:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003e02:	e6aa      	b.n	8003b5a <copy_B+0x62>
 8003e04:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003e06:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8003e0a:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8003e0e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8003e12:	e696      	b.n	8003b42 <copy_B+0x4a>
 8003e14:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8003e18:	eb05 1747 	add.w	r7, r5, r7, lsl #5
 8003e1c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8003e20:	e681      	b.n	8003b26 <copy_B+0x2e>
 8003e22:	1854      	adds	r4, r2, r1
 8003e24:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003e28:	e70d      	b.n	8003c46 <copy_B+0x14e>
 8003e2a:	1854      	adds	r4, r2, r1
 8003e2c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003e30:	e718      	b.n	8003c64 <copy_B+0x16c>
 8003e32:	eb0e 0602 	add.w	r6, lr, r2
 8003e36:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8003e3a:	e72e      	b.n	8003c9a <copy_B+0x1a2>
 8003e3c:	1855      	adds	r5, r2, r1
 8003e3e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8003e42:	e71d      	b.n	8003c80 <copy_B+0x188>
 8003e44:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003e46:	4451      	add	r1, sl
 8003e48:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8003e4c:	e730      	b.n	8003cb0 <copy_B+0x1b8>
 8003e4e:	ebc9 1409 	rsb	r4, r9, r9, lsl #4
 8003e52:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003e56:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003e5a:	e780      	b.n	8003d5e <copy_B+0x266>
 8003e5c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8003e5e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003e62:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003e66:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003e6a:	e774      	b.n	8003d56 <copy_B+0x25e>
 8003e6c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8003e6e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003e72:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003e76:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003e7a:	e775      	b.n	8003d68 <copy_B+0x270>
 8003e7c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8003e7e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003e82:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003e86:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003e8a:	e74d      	b.n	8003d28 <copy_B+0x230>
 8003e8c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8003e8e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003e92:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003e96:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003e9a:	e757      	b.n	8003d4c <copy_B+0x254>
 8003e9c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8003e9e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003ea2:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003ea6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003eaa:	e747      	b.n	8003d3c <copy_B+0x244>
 8003eac:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8003eae:	4417      	add	r7, r2
 8003eb0:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8003eb4:	e71b      	b.n	8003cee <copy_B+0x1f6>
 8003eb6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8003eb8:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003ebc:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003ec0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8003ec4:	e735      	b.n	8003d32 <copy_B+0x23a>
 8003ec6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8003ec8:	4417      	add	r7, r2
 8003eca:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ece:	2e00      	cmp	r6, #0
 8003ed0:	f47f af09 	bne.w	8003ce6 <copy_B+0x1ee>
 8003ed4:	e711      	b.n	8003cfa <copy_B+0x202>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003ed6:	44f2      	add	sl, lr
 8003ed8:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8003edc:	e6f7      	b.n	8003cce <copy_B+0x1d6>
 8003ede:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8003ee0:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003ee4:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8003ee8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003eec:	2a00      	cmp	r2, #0
 8003eee:	f47f af17 	bne.w	8003d20 <copy_B+0x228>
 8003ef2:	e73e      	b.n	8003d72 <copy_B+0x27a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8003ef4:	4496      	add	lr, r2
 8003ef6:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8003efa:	e702      	b.n	8003d02 <copy_B+0x20a>
 8003efc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003efe:	4451      	add	r1, sl
 8003f00:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8003f04:	e6d9      	b.n	8003cba <copy_B+0x1c2>
 8003f06:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
 8003f0a:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8003f0e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8003f12:	b017      	add	sp, #92	@ 0x5c
 8003f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003f18 <copy_C>:

void copy_C(uint16_t* buffer, int x, int y, uint32_t color)
{
 8003f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8003f1c:	4c90      	ldr	r4, [pc, #576]	@ (8004160 <copy_C+0x248>)
 8003f1e:	1c4e      	adds	r6, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f20:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8003f24:	468a      	mov	sl, r1
    int pixel_x = x_base + x + offset;
 8003f26:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f28:	bf2c      	ite	cs
 8003f2a:	f04f 0b00 	movcs.w	fp, #0
 8003f2e:	f04f 0b01 	movcc.w	fp, #1
    int pixel_x = x_base + x + offset;
 8003f32:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f34:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8003f38:	bf2c      	ite	cs
 8003f3a:	f04f 0900 	movcs.w	r9, #0
 8003f3e:	f04f 0901 	movcc.w	r9, #1
 8003f42:	f1bb 0f00 	cmp.w	fp, #0
 8003f46:	d003      	beq.n	8003f50 <copy_C+0x38>
 8003f48:	f1b9 0f00 	cmp.w	r9, #0
 8003f4c:	f040 80ab 	bne.w	80040a6 <copy_C+0x18e>
    int pixel_x = x_base + x + offset;
 8003f50:	f10a 0502 	add.w	r5, sl, #2
 8003f54:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f56:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8003f5a:	bf2c      	ite	cs
 8003f5c:	f04f 0800 	movcs.w	r8, #0
 8003f60:	f04f 0801 	movcc.w	r8, #1
 8003f64:	f1bb 0f00 	cmp.w	fp, #0
 8003f68:	d003      	beq.n	8003f72 <copy_C+0x5a>
 8003f6a:	f1b8 0f00 	cmp.w	r8, #0
 8003f6e:	f040 8093 	bne.w	8004098 <copy_C+0x180>
    int pixel_x = x_base + x + offset;
 8003f72:	f10a 0e03 	add.w	lr, sl, #3
 8003f76:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f78:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8003f7c:	bf2c      	ite	cs
 8003f7e:	2100      	movcs	r1, #0
 8003f80:	2101      	movcc	r1, #1
 8003f82:	f1bb 0f00 	cmp.w	fp, #0
 8003f86:	d001      	beq.n	8003f8c <copy_C+0x74>
 8003f88:	2900      	cmp	r1, #0
 8003f8a:	d17e      	bne.n	800408a <copy_C+0x172>
    int pixel_x = x_base + x + offset;
 8003f8c:	f10a 0c04 	add.w	ip, sl, #4
 8003f90:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003f92:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8003f96:	bf2c      	ite	cs
 8003f98:	2700      	movcs	r7, #0
 8003f9a:	2701      	movcc	r7, #1
 8003f9c:	b117      	cbz	r7, 8003fa4 <copy_C+0x8c>
 8003f9e:	f1bb 0f00 	cmp.w	fp, #0
 8003fa2:	d16b      	bne.n	800407c <copy_C+0x164>
    int pixel_x = x_base + x + offset;
 8003fa4:	44a2      	add	sl, r4
    int pixel_y = y_base + y;
 8003fa6:	f102 0b01 	add.w	fp, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003faa:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8003fae:	bf2c      	ite	cs
 8003fb0:	2400      	movcs	r4, #0
 8003fb2:	2401      	movcc	r4, #1
 8003fb4:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003fb8:	d201      	bcs.n	8003fbe <copy_C+0xa6>
 8003fba:	2c00      	cmp	r4, #0
 8003fbc:	d17a      	bne.n	80040b4 <copy_C+0x19c>
    int pixel_y = y_base + y;
 8003fbe:	f102 0b02 	add.w	fp, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003fc2:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003fc6:	d202      	bcs.n	8003fce <copy_C+0xb6>
 8003fc8:	2c00      	cmp	r4, #0
 8003fca:	f040 8097 	bne.w	80040fc <copy_C+0x1e4>
    int pixel_y = y_base + y;
 8003fce:	f102 0b03 	add.w	fp, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003fd2:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003fd6:	d202      	bcs.n	8003fde <copy_C+0xc6>
 8003fd8:	2c00      	cmp	r4, #0
 8003fda:	f040 8088 	bne.w	80040ee <copy_C+0x1d6>
    int pixel_y = y_base + y;
 8003fde:	f102 0b04 	add.w	fp, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003fe2:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003fe6:	d202      	bcs.n	8003fee <copy_C+0xd6>
 8003fe8:	2c00      	cmp	r4, #0
 8003fea:	f040 80b1 	bne.w	8004150 <copy_C+0x238>
    int pixel_y = y_base + y;
 8003fee:	f102 0b05 	add.w	fp, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8003ff2:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8003ff6:	d202      	bcs.n	8003ffe <copy_C+0xe6>
 8003ff8:	2c00      	cmp	r4, #0
 8003ffa:	f040 80a2 	bne.w	8004142 <copy_C+0x22a>
    int pixel_y = y_base + y;
 8003ffe:	f102 0b06 	add.w	fp, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004002:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8004006:	d202      	bcs.n	800400e <copy_C+0xf6>
 8004008:	2c00      	cmp	r4, #0
 800400a:	f040 8093 	bne.w	8004134 <copy_C+0x21c>
    int pixel_y = y_base + y;
 800400e:	f102 0b07 	add.w	fp, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004012:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8004016:	d202      	bcs.n	800401e <copy_C+0x106>
 8004018:	2c00      	cmp	r4, #0
 800401a:	f040 8084 	bne.w	8004126 <copy_C+0x20e>
    int pixel_y = y_base + y;
 800401e:	f102 0b08 	add.w	fp, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004022:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8004026:	d201      	bcs.n	800402c <copy_C+0x114>
 8004028:	2c00      	cmp	r4, #0
 800402a:	d175      	bne.n	8004118 <copy_C+0x200>
    int pixel_y = y_base + y;
 800402c:	f102 0b09 	add.w	fp, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004030:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8004034:	d201      	bcs.n	800403a <copy_C+0x122>
 8004036:	2c00      	cmp	r4, #0
 8004038:	d167      	bne.n	800410a <copy_C+0x1f2>
    int pixel_y = y_base + y;
 800403a:	f102 0b0a 	add.w	fp, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800403e:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8004042:	d201      	bcs.n	8004048 <copy_C+0x130>
 8004044:	2c00      	cmp	r4, #0
 8004046:	d14b      	bne.n	80040e0 <copy_C+0x1c8>
    int pixel_y = y_base + y;
 8004048:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800404a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800404e:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004052:	bf2c      	ite	cs
 8004054:	2200      	movcs	r2, #0
 8004056:	2201      	movcc	r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004058:	0164      	lsls	r4, r4, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800405a:	b15a      	cbz	r2, 8004074 <copy_C+0x15c>
 800405c:	f1b9 0f00 	cmp.w	r9, #0
 8004060:	d138      	bne.n	80040d4 <copy_C+0x1bc>
 8004062:	b13a      	cbz	r2, 8004074 <copy_C+0x15c>
 8004064:	f1b8 0f00 	cmp.w	r8, #0
 8004068:	d130      	bne.n	80040cc <copy_C+0x1b4>
 800406a:	b11a      	cbz	r2, 8004074 <copy_C+0x15c>
 800406c:	b111      	cbz	r1, 8004074 <copy_C+0x15c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800406e:	44a6      	add	lr, r4
 8004070:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004074:	b107      	cbz	r7, 8004078 <copy_C+0x160>
 8004076:	bb22      	cbnz	r2, 80040c2 <copy_C+0x1aa>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 8004078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800407c:	ebc2 1b02 	rsb	fp, r2, r2, lsl #4
 8004080:	eb0c 1b4b 	add.w	fp, ip, fp, lsl #5
 8004084:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004088:	e78c      	b.n	8003fa4 <copy_C+0x8c>
 800408a:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 800408e:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8004092:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004096:	e779      	b.n	8003f8c <copy_C+0x74>
 8004098:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 800409c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 80040a0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80040a4:	e765      	b.n	8003f72 <copy_C+0x5a>
 80040a6:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 80040aa:	eb06 1141 	add.w	r1, r6, r1, lsl #5
 80040ae:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80040b2:	e74d      	b.n	8003f50 <copy_C+0x38>
 80040b4:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 80040b8:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 80040bc:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 80040c0:	e77d      	b.n	8003fbe <copy_C+0xa6>
 80040c2:	44a4      	add	ip, r4
 80040c4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
}
 80040c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80040cc:	4425      	add	r5, r4
 80040ce:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80040d2:	e7ca      	b.n	800406a <copy_C+0x152>
 80040d4:	4426      	add	r6, r4
 80040d6:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80040da:	2a00      	cmp	r2, #0
 80040dc:	d1c2      	bne.n	8004064 <copy_C+0x14c>
 80040de:	e7c9      	b.n	8004074 <copy_C+0x15c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80040e0:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 80040e4:	eb0a 144b 	add.w	r4, sl, fp, lsl #5
 80040e8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80040ec:	e7ac      	b.n	8004048 <copy_C+0x130>
 80040ee:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 80040f2:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 80040f6:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 80040fa:	e770      	b.n	8003fde <copy_C+0xc6>
 80040fc:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8004100:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 8004104:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004108:	e761      	b.n	8003fce <copy_C+0xb6>
 800410a:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 800410e:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 8004112:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004116:	e790      	b.n	800403a <copy_C+0x122>
 8004118:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 800411c:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 8004120:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004124:	e782      	b.n	800402c <copy_C+0x114>
 8004126:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 800412a:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 800412e:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004132:	e774      	b.n	800401e <copy_C+0x106>
 8004134:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8004138:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 800413c:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004140:	e765      	b.n	800400e <copy_C+0xf6>
 8004142:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8004146:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 800414a:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800414e:	e756      	b.n	8003ffe <copy_C+0xe6>
 8004150:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
 8004154:	eb0a 1b4b 	add.w	fp, sl, fp, lsl #5
 8004158:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800415c:	e747      	b.n	8003fee <copy_C+0xd6>
 800415e:	bf00      	nop
 8004160:	240001b8 	.word	0x240001b8

08004164 <copy_D>:

void copy_D(uint16_t* buffer, int x, int y, uint32_t color)
{
 8004164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8004168:	4c8a      	ldr	r4, [pc, #552]	@ (8004394 <copy_D+0x230>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800416a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800416e:	b095      	sub	sp, #84	@ 0x54
    int pixel_x = x_base + x + offset;
 8004170:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004172:	bf2c      	ite	cs
 8004174:	f04f 0800 	movcs.w	r8, #0
 8004178:	f04f 0801 	movcc.w	r8, #1
{
 800417c:	9100      	str	r1, [sp, #0]
    int pixel_x = x_base + x + offset;
 800417e:	190e      	adds	r6, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004180:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8004184:	bf2c      	ite	cs
 8004186:	2500      	movcs	r5, #0
 8004188:	2501      	movcc	r5, #1
 800418a:	b11d      	cbz	r5, 8004194 <copy_D+0x30>
 800418c:	f1b8 0f00 	cmp.w	r8, #0
 8004190:	f040 8132 	bne.w	80043f8 <copy_D+0x294>
    int pixel_y = y_base + y;
 8004194:	1c57      	adds	r7, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004196:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800419a:	970c      	str	r7, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800419c:	bf2c      	ite	cs
 800419e:	2100      	movcs	r1, #0
 80041a0:	2101      	movcc	r1, #1
 80041a2:	9101      	str	r1, [sp, #4]
 80041a4:	b115      	cbz	r5, 80041ac <copy_D+0x48>
 80041a6:	2900      	cmp	r1, #0
 80041a8:	f040 811f 	bne.w	80043ea <copy_D+0x286>
    int pixel_y = y_base + y;
 80041ac:	f102 0a02 	add.w	sl, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041b0:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80041b4:	bf2c      	ite	cs
 80041b6:	2100      	movcs	r1, #0
 80041b8:	2101      	movcc	r1, #1
 80041ba:	9102      	str	r1, [sp, #8]
 80041bc:	b115      	cbz	r5, 80041c4 <copy_D+0x60>
 80041be:	2900      	cmp	r1, #0
 80041c0:	f040 8136 	bne.w	8004430 <copy_D+0x2cc>
    int pixel_y = y_base + y;
 80041c4:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041c6:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80041ca:	970d      	str	r7, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041cc:	bf2c      	ite	cs
 80041ce:	2100      	movcs	r1, #0
 80041d0:	2101      	movcc	r1, #1
 80041d2:	9103      	str	r1, [sp, #12]
 80041d4:	b115      	cbz	r5, 80041dc <copy_D+0x78>
 80041d6:	2900      	cmp	r1, #0
 80041d8:	f040 8123 	bne.w	8004422 <copy_D+0x2be>
    int pixel_y = y_base + y;
 80041dc:	1d17      	adds	r7, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041de:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80041e2:	970e      	str	r7, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041e4:	bf2c      	ite	cs
 80041e6:	2100      	movcs	r1, #0
 80041e8:	2101      	movcc	r1, #1
 80041ea:	9104      	str	r1, [sp, #16]
 80041ec:	b115      	cbz	r5, 80041f4 <copy_D+0x90>
 80041ee:	2900      	cmp	r1, #0
 80041f0:	f040 8110 	bne.w	8004414 <copy_D+0x2b0>
    int pixel_y = y_base + y;
 80041f4:	1d57      	adds	r7, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041f6:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80041fa:	970f      	str	r7, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80041fc:	bf2c      	ite	cs
 80041fe:	2100      	movcs	r1, #0
 8004200:	2101      	movcc	r1, #1
 8004202:	9105      	str	r1, [sp, #20]
 8004204:	b115      	cbz	r5, 800420c <copy_D+0xa8>
 8004206:	2900      	cmp	r1, #0
 8004208:	f040 80fd 	bne.w	8004406 <copy_D+0x2a2>
    int pixel_y = y_base + y;
 800420c:	1d97      	adds	r7, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800420e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8004212:	9710      	str	r7, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004214:	bf2c      	ite	cs
 8004216:	2100      	movcs	r1, #0
 8004218:	2101      	movcc	r1, #1
 800421a:	9106      	str	r1, [sp, #24]
 800421c:	b115      	cbz	r5, 8004224 <copy_D+0xc0>
 800421e:	2900      	cmp	r1, #0
 8004220:	f040 8130 	bne.w	8004484 <copy_D+0x320>
    int pixel_y = y_base + y;
 8004224:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004226:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800422a:	9711      	str	r7, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800422c:	bf2c      	ite	cs
 800422e:	2100      	movcs	r1, #0
 8004230:	2101      	movcc	r1, #1
 8004232:	9107      	str	r1, [sp, #28]
 8004234:	b115      	cbz	r5, 800423c <copy_D+0xd8>
 8004236:	2900      	cmp	r1, #0
 8004238:	f040 811d 	bne.w	8004476 <copy_D+0x312>
    int pixel_y = y_base + y;
 800423c:	f102 0708 	add.w	r7, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004240:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8004244:	9712      	str	r7, [sp, #72]	@ 0x48
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004246:	bf2c      	ite	cs
 8004248:	2100      	movcs	r1, #0
 800424a:	2101      	movcc	r1, #1
 800424c:	9108      	str	r1, [sp, #32]
 800424e:	b115      	cbz	r5, 8004256 <copy_D+0xf2>
 8004250:	2900      	cmp	r1, #0
 8004252:	f040 8109 	bne.w	8004468 <copy_D+0x304>
    int pixel_y = y_base + y;
 8004256:	f102 0b09 	add.w	fp, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800425a:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 800425e:	bf2c      	ite	cs
 8004260:	2100      	movcs	r1, #0
 8004262:	2101      	movcc	r1, #1
 8004264:	9109      	str	r1, [sp, #36]	@ 0x24
 8004266:	b115      	cbz	r5, 800426e <copy_D+0x10a>
 8004268:	2900      	cmp	r1, #0
 800426a:	f040 80f6 	bne.w	800445a <copy_D+0x2f6>
    int pixel_y = y_base + y;
 800426e:	f102 090a 	add.w	r9, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004272:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8004276:	bf2c      	ite	cs
 8004278:	2100      	movcs	r1, #0
 800427a:	2101      	movcc	r1, #1
 800427c:	910a      	str	r1, [sp, #40]	@ 0x28
 800427e:	b115      	cbz	r5, 8004286 <copy_D+0x122>
 8004280:	2900      	cmp	r1, #0
 8004282:	f040 80e3 	bne.w	800444c <copy_D+0x2e8>
    int pixel_y = y_base + y;
 8004286:	f102 0c0b 	add.w	ip, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800428a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800428e:	d202      	bcs.n	8004296 <copy_D+0x132>
 8004290:	2d00      	cmp	r5, #0
 8004292:	f040 80d4 	bne.w	800443e <copy_D+0x2da>
    int pixel_x = x_base + x + offset;
 8004296:	9900      	ldr	r1, [sp, #0]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004298:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
    int pixel_x = x_base + x + offset;
 800429c:	1c4d      	adds	r5, r1, #1
 800429e:	192f      	adds	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80042a0:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80042a4:	970b      	str	r7, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80042a6:	bf2c      	ite	cs
 80042a8:	2500      	movcs	r5, #0
 80042aa:	2501      	movcc	r5, #1
 80042ac:	b11d      	cbz	r5, 80042b6 <copy_D+0x152>
 80042ae:	f1b8 0f00 	cmp.w	r8, #0
 80042b2:	f040 80ee 	bne.w	8004492 <copy_D+0x32e>
    int pixel_x = x_base + x + offset;
 80042b6:	9900      	ldr	r1, [sp, #0]
 80042b8:	1c8f      	adds	r7, r1, #2
 80042ba:	193e      	adds	r6, r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80042bc:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80042c0:	4631      	mov	r1, r6
 80042c2:	9613      	str	r6, [sp, #76]	@ 0x4c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80042c4:	bf2c      	ite	cs
 80042c6:	2700      	movcs	r7, #0
 80042c8:	2701      	movcc	r7, #1
 80042ca:	b11f      	cbz	r7, 80042d4 <copy_D+0x170>
 80042cc:	f1b8 0f00 	cmp.w	r8, #0
 80042d0:	f040 80e6 	bne.w	80044a0 <copy_D+0x33c>
    int pixel_x = x_base + x + offset;
 80042d4:	9900      	ldr	r1, [sp, #0]
 80042d6:	1cce      	adds	r6, r1, #3
 80042d8:	1931      	adds	r1, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80042da:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80042de:	bf2c      	ite	cs
 80042e0:	2600      	movcs	r6, #0
 80042e2:	2601      	movcc	r6, #1
 80042e4:	b11e      	cbz	r6, 80042ee <copy_D+0x18a>
 80042e6:	f1b8 0f00 	cmp.w	r8, #0
 80042ea:	f040 80e0 	bne.w	80044ae <copy_D+0x34a>
 80042ee:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80042f2:	ebae 0e0c 	sub.w	lr, lr, ip
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80042f6:	bf2c      	ite	cs
 80042f8:	2200      	movcs	r2, #0
 80042fa:	2201      	movcc	r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80042fc:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004300:	b132      	cbz	r2, 8004310 <copy_D+0x1ac>
 8004302:	2d00      	cmp	r5, #0
 8004304:	f040 80da 	bne.w	80044bc <copy_D+0x358>
 8004308:	b112      	cbz	r2, 8004310 <copy_D+0x1ac>
 800430a:	2f00      	cmp	r7, #0
 800430c:	f040 8120 	bne.w	8004550 <copy_D+0x3ec>
 8004310:	b116      	cbz	r6, 8004318 <copy_D+0x1b4>
 8004312:	2a00      	cmp	r2, #0
 8004314:	f040 8124 	bne.w	8004560 <copy_D+0x3fc>
    int pixel_x = x_base + x + offset;
 8004318:	9a00      	ldr	r2, [sp, #0]
 800431a:	3204      	adds	r2, #4
 800431c:	4422      	add	r2, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800431e:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8004322:	bf2c      	ite	cs
 8004324:	2500      	movcs	r5, #0
 8004326:	2501      	movcc	r5, #1
 8004328:	2d00      	cmp	r5, #0
 800432a:	d035      	beq.n	8004398 <copy_D+0x234>
 800432c:	9901      	ldr	r1, [sp, #4]
 800432e:	2900      	cmp	r1, #0
 8004330:	f040 811b 	bne.w	800456a <copy_D+0x406>
 8004334:	2d00      	cmp	r5, #0
 8004336:	d02f      	beq.n	8004398 <copy_D+0x234>
 8004338:	9902      	ldr	r1, [sp, #8]
 800433a:	2900      	cmp	r1, #0
 800433c:	f040 8101 	bne.w	8004542 <copy_D+0x3de>
 8004340:	b355      	cbz	r5, 8004398 <copy_D+0x234>
 8004342:	9903      	ldr	r1, [sp, #12]
 8004344:	2900      	cmp	r1, #0
 8004346:	f040 80f4 	bne.w	8004532 <copy_D+0x3ce>
 800434a:	b32d      	cbz	r5, 8004398 <copy_D+0x234>
 800434c:	9904      	ldr	r1, [sp, #16]
 800434e:	2900      	cmp	r1, #0
 8004350:	f040 80e7 	bne.w	8004522 <copy_D+0x3be>
 8004354:	b305      	cbz	r5, 8004398 <copy_D+0x234>
 8004356:	9905      	ldr	r1, [sp, #20]
 8004358:	2900      	cmp	r1, #0
 800435a:	f040 80da 	bne.w	8004512 <copy_D+0x3ae>
 800435e:	b1dd      	cbz	r5, 8004398 <copy_D+0x234>
 8004360:	9906      	ldr	r1, [sp, #24]
 8004362:	2900      	cmp	r1, #0
 8004364:	f040 80cd 	bne.w	8004502 <copy_D+0x39e>
 8004368:	b1b5      	cbz	r5, 8004398 <copy_D+0x234>
 800436a:	9907      	ldr	r1, [sp, #28]
 800436c:	2900      	cmp	r1, #0
 800436e:	f040 80c0 	bne.w	80044f2 <copy_D+0x38e>
 8004372:	b18d      	cbz	r5, 8004398 <copy_D+0x234>
 8004374:	9908      	ldr	r1, [sp, #32]
 8004376:	2900      	cmp	r1, #0
 8004378:	f040 80b3 	bne.w	80044e2 <copy_D+0x37e>
 800437c:	b165      	cbz	r5, 8004398 <copy_D+0x234>
 800437e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004380:	2900      	cmp	r1, #0
 8004382:	f040 80a7 	bne.w	80044d4 <copy_D+0x370>
 8004386:	b13d      	cbz	r5, 8004398 <copy_D+0x234>
 8004388:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800438a:	2900      	cmp	r1, #0
 800438c:	f040 809b 	bne.w	80044c6 <copy_D+0x362>
 8004390:	e002      	b.n	8004398 <copy_D+0x234>
 8004392:	bf00      	nop
 8004394:	240001b8 	.word	0x240001b8
    int pixel_x = x_base + x + offset;
 8004398:	9900      	ldr	r1, [sp, #0]
 800439a:	3105      	adds	r1, #5
 800439c:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800439e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80043a2:	bf2c      	ite	cs
 80043a4:	2200      	movcs	r2, #0
 80043a6:	2201      	movcc	r2, #1
 80043a8:	f1ba 0f00 	cmp.w	sl, #0
 80043ac:	db15      	blt.n	80043da <copy_D+0x276>
 80043ae:	b1a2      	cbz	r2, 80043da <copy_D+0x276>
 80043b0:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80043b4:	da0e      	bge.n	80043d4 <copy_D+0x270>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80043b6:	ebca 120a 	rsb	r2, sl, sl, lsl #4
 80043ba:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 80043be:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80043c2:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 80043c6:	da05      	bge.n	80043d4 <copy_D+0x270>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80043c8:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
 80043cc:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 80043d0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for (int i = 1; i < 4; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 4; i++) fill_pixel(buffer, x, y, i, 11, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 4, i, color);
    fill_pixel(buffer, x, y, 5, 2, color);
    fill_pixel(buffer, x, y, 5, 9, color);
}
 80043d4:	b015      	add	sp, #84	@ 0x54
 80043d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80043da:	f1bb 0f00 	cmp.w	fp, #0
 80043de:	dbf9      	blt.n	80043d4 <copy_D+0x270>
 80043e0:	2a00      	cmp	r2, #0
 80043e2:	d1ee      	bne.n	80043c2 <copy_D+0x25e>
}
 80043e4:	b015      	add	sp, #84	@ 0x54
 80043e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80043ea:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80043ee:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80043f2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80043f6:	e6d9      	b.n	80041ac <copy_D+0x48>
 80043f8:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 80043fc:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004400:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004404:	e6c6      	b.n	8004194 <copy_D+0x30>
 8004406:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800440a:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800440e:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004412:	e6fb      	b.n	800420c <copy_D+0xa8>
 8004414:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8004418:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800441c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004420:	e6e8      	b.n	80041f4 <copy_D+0x90>
 8004422:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8004426:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800442a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800442e:	e6d5      	b.n	80041dc <copy_D+0x78>
 8004430:	ebca 170a 	rsb	r7, sl, sl, lsl #4
 8004434:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004438:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800443c:	e6c2      	b.n	80041c4 <copy_D+0x60>
 800443e:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
 8004442:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8004446:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800444a:	e724      	b.n	8004296 <copy_D+0x132>
 800444c:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 8004450:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004454:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004458:	e715      	b.n	8004286 <copy_D+0x122>
 800445a:	ebcb 170b 	rsb	r7, fp, fp, lsl #4
 800445e:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004462:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004466:	e702      	b.n	800426e <copy_D+0x10a>
 8004468:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800446c:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004470:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004474:	e6ef      	b.n	8004256 <copy_D+0xf2>
 8004476:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800447a:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800447e:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004482:	e6db      	b.n	800423c <copy_D+0xd8>
 8004484:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8004488:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800448c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004490:	e6c8      	b.n	8004224 <copy_D+0xc0>
 8004492:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8004496:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800449a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800449e:	e70a      	b.n	80042b6 <copy_D+0x152>
 80044a0:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80044a4:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 80044a8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80044ac:	e712      	b.n	80042d4 <copy_D+0x170>
 80044ae:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80044b2:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 80044b6:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80044ba:	e718      	b.n	80042ee <copy_D+0x18a>
 80044bc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80044be:	4475      	add	r5, lr
 80044c0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80044c4:	e720      	b.n	8004308 <copy_D+0x1a4>
 80044c6:	ebc9 1509 	rsb	r5, r9, r9, lsl #4
 80044ca:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 80044ce:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80044d2:	e761      	b.n	8004398 <copy_D+0x234>
 80044d4:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 80044d8:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 80044dc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80044e0:	e751      	b.n	8004386 <copy_D+0x222>
 80044e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80044e4:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 80044e8:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 80044ec:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80044f0:	e744      	b.n	800437c <copy_D+0x218>
 80044f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80044f4:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 80044f8:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 80044fc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004500:	e737      	b.n	8004372 <copy_D+0x20e>
 8004502:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004504:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 8004508:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 800450c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004510:	e72a      	b.n	8004368 <copy_D+0x204>
 8004512:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004514:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 8004518:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 800451c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004520:	e71d      	b.n	800435e <copy_D+0x1fa>
 8004522:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004524:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 8004528:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 800452c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004530:	e710      	b.n	8004354 <copy_D+0x1f0>
 8004532:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004534:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 8004538:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 800453c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004540:	e703      	b.n	800434a <copy_D+0x1e6>
 8004542:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8004546:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 800454a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800454e:	e6f7      	b.n	8004340 <copy_D+0x1dc>
 8004550:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8004552:	4477      	add	r7, lr
 8004554:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004558:	2e00      	cmp	r6, #0
 800455a:	f47f aeda 	bne.w	8004312 <copy_D+0x1ae>
 800455e:	e6db      	b.n	8004318 <copy_D+0x1b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004560:	460e      	mov	r6, r1
 8004562:	4476      	add	r6, lr
 8004564:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004568:	e6d6      	b.n	8004318 <copy_D+0x1b4>
 800456a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800456c:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 8004570:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 8004574:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004578:	e6dc      	b.n	8004334 <copy_D+0x1d0>
 800457a:	bf00      	nop

0800457c <copy_E>:

void copy_E(uint16_t* buffer, int x, int y, uint32_t color)
{
 800457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8004580:	4cbb      	ldr	r4, [pc, #748]	@ (8004870 <copy_E+0x2f4>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004582:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8004586:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 8004588:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800458a:	bf2c      	ite	cs
 800458c:	2700      	movcs	r7, #0
 800458e:	2701      	movcc	r7, #1
    int pixel_x = x_base + x + offset;
 8004590:	190e      	adds	r6, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004592:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8004596:	bf2c      	ite	cs
 8004598:	2500      	movcs	r5, #0
 800459a:	2501      	movcc	r5, #1
 800459c:	b115      	cbz	r5, 80045a4 <copy_E+0x28>
 800459e:	2f00      	cmp	r7, #0
 80045a0:	f040 8134 	bne.w	800480c <copy_E+0x290>
    int pixel_y = y_base + y;
 80045a4:	f102 0c01 	add.w	ip, r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80045a8:	ea4f 1802 	mov.w	r8, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80045ac:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80045b0:	d202      	bcs.n	80045b8 <copy_E+0x3c>
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	f040 8123 	bne.w	80047fe <copy_E+0x282>
    int pixel_y = y_base + y;
 80045b8:	f102 0c02 	add.w	ip, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80045bc:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80045c0:	d202      	bcs.n	80045c8 <copy_E+0x4c>
 80045c2:	2d00      	cmp	r5, #0
 80045c4:	f040 8114 	bne.w	80047f0 <copy_E+0x274>
    int pixel_y = y_base + y;
 80045c8:	f102 0c03 	add.w	ip, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80045cc:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80045d0:	d202      	bcs.n	80045d8 <copy_E+0x5c>
 80045d2:	2d00      	cmp	r5, #0
 80045d4:	f040 8105 	bne.w	80047e2 <copy_E+0x266>
    int pixel_y = y_base + y;
 80045d8:	f102 0c04 	add.w	ip, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80045dc:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80045e0:	d202      	bcs.n	80045e8 <copy_E+0x6c>
 80045e2:	2d00      	cmp	r5, #0
 80045e4:	f040 80f6 	bne.w	80047d4 <copy_E+0x258>
    int pixel_y = y_base + y;
 80045e8:	f102 0e05 	add.w	lr, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80045ec:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80045f0:	d202      	bcs.n	80045f8 <copy_E+0x7c>
 80045f2:	2d00      	cmp	r5, #0
 80045f4:	f040 80e7 	bne.w	80047c6 <copy_E+0x24a>
    int pixel_y = y_base + y;
 80045f8:	f102 0c06 	add.w	ip, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80045fc:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004600:	d202      	bcs.n	8004608 <copy_E+0x8c>
 8004602:	2d00      	cmp	r5, #0
 8004604:	f040 80d8 	bne.w	80047b8 <copy_E+0x23c>
    int pixel_y = y_base + y;
 8004608:	f102 0c07 	add.w	ip, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800460c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004610:	d202      	bcs.n	8004618 <copy_E+0x9c>
 8004612:	2d00      	cmp	r5, #0
 8004614:	f040 80c9 	bne.w	80047aa <copy_E+0x22e>
    int pixel_y = y_base + y;
 8004618:	f102 0c08 	add.w	ip, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800461c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004620:	d202      	bcs.n	8004628 <copy_E+0xac>
 8004622:	2d00      	cmp	r5, #0
 8004624:	f040 80ba 	bne.w	800479c <copy_E+0x220>
    int pixel_y = y_base + y;
 8004628:	f102 0c09 	add.w	ip, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800462c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004630:	d202      	bcs.n	8004638 <copy_E+0xbc>
 8004632:	2d00      	cmp	r5, #0
 8004634:	f040 80ab 	bne.w	800478e <copy_E+0x212>
    int pixel_y = y_base + y;
 8004638:	f102 0c0a 	add.w	ip, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800463c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004640:	d202      	bcs.n	8004648 <copy_E+0xcc>
 8004642:	2d00      	cmp	r5, #0
 8004644:	f040 809c 	bne.w	8004780 <copy_E+0x204>
    int pixel_y = y_base + y;
 8004648:	f102 0c0b 	add.w	ip, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800464c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004650:	d202      	bcs.n	8004658 <copy_E+0xdc>
 8004652:	2d00      	cmp	r5, #0
 8004654:	f040 808d 	bne.w	8004772 <copy_E+0x1f6>
    int pixel_x = x_base + x + offset;
 8004658:	1c4d      	adds	r5, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800465a:	eba8 0202 	sub.w	r2, r8, r2
    int pixel_x = x_base + x + offset;
 800465e:	4425      	add	r5, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004660:	0152      	lsls	r2, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004662:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8004666:	bf2c      	ite	cs
 8004668:	f04f 0800 	movcs.w	r8, #0
 800466c:	f04f 0801 	movcc.w	r8, #1
 8004670:	f1b8 0f00 	cmp.w	r8, #0
 8004674:	d002      	beq.n	800467c <copy_E+0x100>
 8004676:	2f00      	cmp	r7, #0
 8004678:	f040 80cf 	bne.w	800481a <copy_E+0x29e>
    int pixel_x = x_base + x + offset;
 800467c:	1c8e      	adds	r6, r1, #2
 800467e:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004680:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8004684:	9603      	str	r6, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004686:	bf2c      	ite	cs
 8004688:	f04f 0a00 	movcs.w	sl, #0
 800468c:	f04f 0a01 	movcc.w	sl, #1
 8004690:	f1ba 0f00 	cmp.w	sl, #0
 8004694:	d002      	beq.n	800469c <copy_E+0x120>
 8004696:	2f00      	cmp	r7, #0
 8004698:	f040 80c3 	bne.w	8004822 <copy_E+0x2a6>
    int pixel_x = x_base + x + offset;
 800469c:	f101 0903 	add.w	r9, r1, #3
 80046a0:	44a1      	add	r9, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80046a2:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 80046a6:	bf2c      	ite	cs
 80046a8:	2600      	movcs	r6, #0
 80046aa:	2601      	movcc	r6, #1
 80046ac:	9600      	str	r6, [sp, #0]
 80046ae:	b116      	cbz	r6, 80046b6 <copy_E+0x13a>
 80046b0:	2f00      	cmp	r7, #0
 80046b2:	f040 80c1 	bne.w	8004838 <copy_E+0x2bc>
    int pixel_x = x_base + x + offset;
 80046b6:	f101 0b04 	add.w	fp, r1, #4
 80046ba:	eb0b 0604 	add.w	r6, fp, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80046be:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80046c2:	9602      	str	r6, [sp, #8]
 80046c4:	bf2c      	ite	cs
 80046c6:	f04f 0b00 	movcs.w	fp, #0
 80046ca:	f04f 0b01 	movcc.w	fp, #1
 80046ce:	465e      	mov	r6, fp
 80046d0:	f8cd b004 	str.w	fp, [sp, #4]
 80046d4:	b116      	cbz	r6, 80046dc <copy_E+0x160>
 80046d6:	2f00      	cmp	r7, #0
 80046d8:	f040 80a8 	bne.w	800482c <copy_E+0x2b0>
    int pixel_x = x_base + x + offset;
 80046dc:	3105      	adds	r1, #5
 80046de:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80046e0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80046e4:	bf2c      	ite	cs
 80046e6:	f04f 0b00 	movcs.w	fp, #0
 80046ea:	f04f 0b01 	movcc.w	fp, #1
 80046ee:	f1bb 0f00 	cmp.w	fp, #0
 80046f2:	d002      	beq.n	80046fa <copy_E+0x17e>
 80046f4:	2f00      	cmp	r7, #0
 80046f6:	f040 80a4 	bne.w	8004842 <copy_E+0x2c6>
 80046fa:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80046fe:	bf2c      	ite	cs
 8004700:	2400      	movcs	r4, #0
 8004702:	2401      	movcc	r4, #1
 8004704:	b18c      	cbz	r4, 800472a <copy_E+0x1ae>
 8004706:	f1b8 0f00 	cmp.w	r8, #0
 800470a:	f040 809e 	bne.w	800484a <copy_E+0x2ce>
 800470e:	b164      	cbz	r4, 800472a <copy_E+0x1ae>
 8004710:	f1ba 0f00 	cmp.w	sl, #0
 8004714:	f040 80a0 	bne.w	8004858 <copy_E+0x2dc>
 8004718:	b13c      	cbz	r4, 800472a <copy_E+0x1ae>
 800471a:	9c00      	ldr	r4, [sp, #0]
 800471c:	b12c      	cbz	r4, 800472a <copy_E+0x1ae>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800471e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8004722:	eb09 1e4e 	add.w	lr, r9, lr, lsl #5
 8004726:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800472a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800472e:	f502 52a5 	add.w	r2, r2, #5280	@ 0x14a0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004732:	bf2c      	ite	cs
 8004734:	2400      	movcs	r4, #0
 8004736:	2401      	movcc	r4, #1
 8004738:	b194      	cbz	r4, 8004760 <copy_E+0x1e4>
 800473a:	f1b8 0f00 	cmp.w	r8, #0
 800473e:	f040 8093 	bne.w	8004868 <copy_E+0x2ec>
 8004742:	b16c      	cbz	r4, 8004760 <copy_E+0x1e4>
 8004744:	f1ba 0f00 	cmp.w	sl, #0
 8004748:	f040 80a2 	bne.w	8004890 <copy_E+0x314>
 800474c:	b144      	cbz	r4, 8004760 <copy_E+0x1e4>
 800474e:	9d00      	ldr	r5, [sp, #0]
 8004750:	2d00      	cmp	r5, #0
 8004752:	f040 8098 	bne.w	8004886 <copy_E+0x30a>
 8004756:	b11c      	cbz	r4, 8004760 <copy_E+0x1e4>
 8004758:	9d01      	ldr	r5, [sp, #4]
 800475a:	2d00      	cmp	r5, #0
 800475c:	f040 808a 	bne.w	8004874 <copy_E+0x2f8>
 8004760:	f1bb 0f00 	cmp.w	fp, #0
 8004764:	d002      	beq.n	800476c <copy_E+0x1f0>
 8004766:	2c00      	cmp	r4, #0
 8004768:	f040 8097 	bne.w	800489a <copy_E+0x31e>
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 6; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 4; i++) fill_pixel(buffer, x, y, i, 5, color);
    for (int i = 1; i < 6; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800476c:	b005      	add	sp, #20
 800476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004772:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
 8004776:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800477a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800477e:	e76b      	b.n	8004658 <copy_E+0xdc>
 8004780:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004784:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004788:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800478c:	e75c      	b.n	8004648 <copy_E+0xcc>
 800478e:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004792:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004796:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800479a:	e74d      	b.n	8004638 <copy_E+0xbc>
 800479c:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80047a0:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80047a4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80047a8:	e73e      	b.n	8004628 <copy_E+0xac>
 80047aa:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80047ae:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80047b2:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80047b6:	e72f      	b.n	8004618 <copy_E+0x9c>
 80047b8:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80047bc:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80047c0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80047c4:	e720      	b.n	8004608 <copy_E+0x8c>
 80047c6:	ebce 1c0e 	rsb	ip, lr, lr, lsl #4
 80047ca:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80047ce:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80047d2:	e711      	b.n	80045f8 <copy_E+0x7c>
 80047d4:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80047d8:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80047dc:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80047e0:	e702      	b.n	80045e8 <copy_E+0x6c>
 80047e2:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80047e6:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80047ea:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80047ee:	e6f3      	b.n	80045d8 <copy_E+0x5c>
 80047f0:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80047f4:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80047f8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80047fc:	e6e4      	b.n	80045c8 <copy_E+0x4c>
 80047fe:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004802:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004806:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800480a:	e6d5      	b.n	80045b8 <copy_E+0x3c>
 800480c:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 8004810:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004814:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004818:	e6c4      	b.n	80045a4 <copy_E+0x28>
 800481a:	1956      	adds	r6, r2, r5
 800481c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004820:	e72c      	b.n	800467c <copy_E+0x100>
 8004822:	eb02 0906 	add.w	r9, r2, r6
 8004826:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800482a:	e737      	b.n	800469c <copy_E+0x120>
 800482c:	9e02      	ldr	r6, [sp, #8]
 800482e:	eb02 0b06 	add.w	fp, r2, r6
 8004832:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004836:	e751      	b.n	80046dc <copy_E+0x160>
 8004838:	eb02 0b09 	add.w	fp, r2, r9
 800483c:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004840:	e739      	b.n	80046b6 <copy_E+0x13a>
 8004842:	188c      	adds	r4, r1, r2
 8004844:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8004848:	e757      	b.n	80046fa <copy_E+0x17e>
 800484a:	ebce 170e 	rsb	r7, lr, lr, lsl #4
 800484e:	eb05 1747 	add.w	r7, r5, r7, lsl #5
 8004852:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004856:	e75a      	b.n	800470e <copy_E+0x192>
 8004858:	ebce 170e 	rsb	r7, lr, lr, lsl #4
 800485c:	9e03      	ldr	r6, [sp, #12]
 800485e:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8004862:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8004866:	e757      	b.n	8004718 <copy_E+0x19c>
 8004868:	4415      	add	r5, r2
 800486a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800486e:	e768      	b.n	8004742 <copy_E+0x1c6>
 8004870:	240001b8 	.word	0x240001b8
 8004874:	9d02      	ldr	r5, [sp, #8]
 8004876:	4415      	add	r5, r2
 8004878:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800487c:	f1bb 0f00 	cmp.w	fp, #0
 8004880:	f47f af71 	bne.w	8004766 <copy_E+0x1ea>
 8004884:	e772      	b.n	800476c <copy_E+0x1f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004886:	eb02 0509 	add.w	r5, r2, r9
 800488a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800488e:	e762      	b.n	8004756 <copy_E+0x1da>
 8004890:	9e03      	ldr	r6, [sp, #12]
 8004892:	4416      	add	r6, r2
 8004894:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004898:	e758      	b.n	800474c <copy_E+0x1d0>
 800489a:	4411      	add	r1, r2
 800489c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 80048a0:	b005      	add	sp, #20
 80048a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a6:	bf00      	nop

080048a8 <copy_F>:

void copy_F(uint16_t* buffer, int x, int y, uint32_t color)
{
 80048a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80048ac:	4c9c      	ldr	r4, [pc, #624]	@ (8004b20 <copy_F+0x278>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80048ae:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80048b2:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80048b4:	bf2c      	ite	cs
 80048b6:	2700      	movcs	r7, #0
 80048b8:	2701      	movcc	r7, #1
    int pixel_x = x_base + x + offset;
 80048ba:	190e      	adds	r6, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80048bc:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80048c0:	bf2c      	ite	cs
 80048c2:	2500      	movcs	r5, #0
 80048c4:	2501      	movcc	r5, #1
 80048c6:	b115      	cbz	r5, 80048ce <copy_F+0x26>
 80048c8:	2f00      	cmp	r7, #0
 80048ca:	f040 80fe 	bne.w	8004aca <copy_F+0x222>
    int pixel_y = y_base + y;
 80048ce:	f102 0c01 	add.w	ip, r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80048d2:	ea4f 1e02 	mov.w	lr, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80048d6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80048da:	d202      	bcs.n	80048e2 <copy_F+0x3a>
 80048dc:	2d00      	cmp	r5, #0
 80048de:	f040 80ed 	bne.w	8004abc <copy_F+0x214>
    int pixel_y = y_base + y;
 80048e2:	f102 0c02 	add.w	ip, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80048e6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80048ea:	d202      	bcs.n	80048f2 <copy_F+0x4a>
 80048ec:	2d00      	cmp	r5, #0
 80048ee:	f040 80de 	bne.w	8004aae <copy_F+0x206>
    int pixel_y = y_base + y;
 80048f2:	f102 0c03 	add.w	ip, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80048f6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80048fa:	d202      	bcs.n	8004902 <copy_F+0x5a>
 80048fc:	2d00      	cmp	r5, #0
 80048fe:	f040 80cf 	bne.w	8004aa0 <copy_F+0x1f8>
    int pixel_y = y_base + y;
 8004902:	f102 0c04 	add.w	ip, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004906:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800490a:	d202      	bcs.n	8004912 <copy_F+0x6a>
 800490c:	2d00      	cmp	r5, #0
 800490e:	f040 80c0 	bne.w	8004a92 <copy_F+0x1ea>
    int pixel_y = y_base + y;
 8004912:	f102 0c05 	add.w	ip, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004916:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800491a:	d202      	bcs.n	8004922 <copy_F+0x7a>
 800491c:	2d00      	cmp	r5, #0
 800491e:	f040 80b1 	bne.w	8004a84 <copy_F+0x1dc>
    int pixel_y = y_base + y;
 8004922:	f102 0806 	add.w	r8, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004926:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800492a:	d202      	bcs.n	8004932 <copy_F+0x8a>
 800492c:	2d00      	cmp	r5, #0
 800492e:	f040 80a2 	bne.w	8004a76 <copy_F+0x1ce>
    int pixel_y = y_base + y;
 8004932:	f102 0807 	add.w	r8, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004936:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800493a:	d202      	bcs.n	8004942 <copy_F+0x9a>
 800493c:	2d00      	cmp	r5, #0
 800493e:	f040 8093 	bne.w	8004a68 <copy_F+0x1c0>
    int pixel_y = y_base + y;
 8004942:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004946:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800494a:	d202      	bcs.n	8004952 <copy_F+0xaa>
 800494c:	2d00      	cmp	r5, #0
 800494e:	f040 8084 	bne.w	8004a5a <copy_F+0x1b2>
    int pixel_y = y_base + y;
 8004952:	f102 0809 	add.w	r8, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004956:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800495a:	d201      	bcs.n	8004960 <copy_F+0xb8>
 800495c:	2d00      	cmp	r5, #0
 800495e:	d175      	bne.n	8004a4c <copy_F+0x1a4>
    int pixel_y = y_base + y;
 8004960:	f102 080a 	add.w	r8, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004964:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8004968:	d201      	bcs.n	800496e <copy_F+0xc6>
 800496a:	2d00      	cmp	r5, #0
 800496c:	d167      	bne.n	8004a3e <copy_F+0x196>
    int pixel_y = y_base + y;
 800496e:	f102 080b 	add.w	r8, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004972:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8004976:	d201      	bcs.n	800497c <copy_F+0xd4>
 8004978:	2d00      	cmp	r5, #0
 800497a:	d159      	bne.n	8004a30 <copy_F+0x188>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800497c:	ebae 0202 	sub.w	r2, lr, r2
    int pixel_x = x_base + x + offset;
 8004980:	f101 0e01 	add.w	lr, r1, #1
 8004984:	44a6      	add	lr, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004986:	0152      	lsls	r2, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004988:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800498c:	bf2c      	ite	cs
 800498e:	f04f 0800 	movcs.w	r8, #0
 8004992:	f04f 0801 	movcc.w	r8, #1
 8004996:	f1b8 0f00 	cmp.w	r8, #0
 800499a:	d002      	beq.n	80049a2 <copy_F+0xfa>
 800499c:	2f00      	cmp	r7, #0
 800499e:	f040 809b 	bne.w	8004ad8 <copy_F+0x230>
    int pixel_x = x_base + x + offset;
 80049a2:	1c8e      	adds	r6, r1, #2
 80049a4:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80049a6:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80049aa:	bf2c      	ite	cs
 80049ac:	f04f 0a00 	movcs.w	sl, #0
 80049b0:	f04f 0a01 	movcc.w	sl, #1
 80049b4:	f1ba 0f00 	cmp.w	sl, #0
 80049b8:	d002      	beq.n	80049c0 <copy_F+0x118>
 80049ba:	2f00      	cmp	r7, #0
 80049bc:	f040 8095 	bne.w	8004aea <copy_F+0x242>
    int pixel_x = x_base + x + offset;
 80049c0:	1ccd      	adds	r5, r1, #3
 80049c2:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80049c4:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80049c8:	bf2c      	ite	cs
 80049ca:	f04f 0900 	movcs.w	r9, #0
 80049ce:	f04f 0901 	movcc.w	r9, #1
 80049d2:	f1b9 0f00 	cmp.w	r9, #0
 80049d6:	d002      	beq.n	80049de <copy_F+0x136>
 80049d8:	2f00      	cmp	r7, #0
 80049da:	f040 808e 	bne.w	8004afa <copy_F+0x252>
    int pixel_x = x_base + x + offset;
 80049de:	f101 0b04 	add.w	fp, r1, #4
 80049e2:	44a3      	add	fp, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80049e4:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 80049e8:	d202      	bcs.n	80049f0 <copy_F+0x148>
 80049ea:	2f00      	cmp	r7, #0
 80049ec:	f040 8081 	bne.w	8004af2 <copy_F+0x24a>
    int pixel_x = x_base + x + offset;
 80049f0:	3105      	adds	r1, #5
 80049f2:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80049f4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80049f8:	d201      	bcs.n	80049fe <copy_F+0x156>
 80049fa:	2f00      	cmp	r7, #0
 80049fc:	d171      	bne.n	8004ae2 <copy_F+0x23a>
 80049fe:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004a02:	bf2c      	ite	cs
 8004a04:	2200      	movcs	r2, #0
 8004a06:	2201      	movcc	r2, #1
 8004a08:	b182      	cbz	r2, 8004a2c <copy_F+0x184>
 8004a0a:	f1b8 0f00 	cmp.w	r8, #0
 8004a0e:	d179      	bne.n	8004b04 <copy_F+0x25c>
 8004a10:	b162      	cbz	r2, 8004a2c <copy_F+0x184>
 8004a12:	f1ba 0f00 	cmp.w	sl, #0
 8004a16:	d17c      	bne.n	8004b12 <copy_F+0x26a>
 8004a18:	b142      	cbz	r2, 8004a2c <copy_F+0x184>
 8004a1a:	f1b9 0f00 	cmp.w	r9, #0
 8004a1e:	d005      	beq.n	8004a2c <copy_F+0x184>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004a20:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004a24:	eb05 154c 	add.w	r5, r5, ip, lsl #5
 8004a28:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 6; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 4; i++) fill_pixel(buffer, x, y, i, 5, color);
}
 8004a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004a30:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8004a34:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 8004a38:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004a3c:	e79e      	b.n	800497c <copy_F+0xd4>
 8004a3e:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8004a42:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 8004a46:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8004a4a:	e790      	b.n	800496e <copy_F+0xc6>
 8004a4c:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8004a50:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 8004a54:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8004a58:	e782      	b.n	8004960 <copy_F+0xb8>
 8004a5a:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8004a5e:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 8004a62:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8004a66:	e774      	b.n	8004952 <copy_F+0xaa>
 8004a68:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8004a6c:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 8004a70:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8004a74:	e765      	b.n	8004942 <copy_F+0x9a>
 8004a76:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8004a7a:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 8004a7e:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8004a82:	e756      	b.n	8004932 <copy_F+0x8a>
 8004a84:	ebcc 180c 	rsb	r8, ip, ip, lsl #4
 8004a88:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 8004a8c:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8004a90:	e747      	b.n	8004922 <copy_F+0x7a>
 8004a92:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004a96:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004a9a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004a9e:	e738      	b.n	8004912 <copy_F+0x6a>
 8004aa0:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004aa4:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004aa8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004aac:	e729      	b.n	8004902 <copy_F+0x5a>
 8004aae:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004ab2:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004ab6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004aba:	e71a      	b.n	80048f2 <copy_F+0x4a>
 8004abc:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004ac0:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004ac4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004ac8:	e70b      	b.n	80048e2 <copy_F+0x3a>
 8004aca:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 8004ace:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 8004ad2:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8004ad6:	e6fa      	b.n	80048ce <copy_F+0x26>
 8004ad8:	eb02 050e 	add.w	r5, r2, lr
 8004adc:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8004ae0:	e75f      	b.n	80049a2 <copy_F+0xfa>
 8004ae2:	4411      	add	r1, r2
 8004ae4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8004ae8:	e789      	b.n	80049fe <copy_F+0x156>
 8004aea:	1995      	adds	r5, r2, r6
 8004aec:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8004af0:	e766      	b.n	80049c0 <copy_F+0x118>
 8004af2:	4493      	add	fp, r2
 8004af4:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004af8:	e77a      	b.n	80049f0 <copy_F+0x148>
 8004afa:	eb02 0b05 	add.w	fp, r2, r5
 8004afe:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8004b02:	e76c      	b.n	80049de <copy_F+0x136>
 8004b04:	ebcc 110c 	rsb	r1, ip, ip, lsl #4
 8004b08:	eb0e 1e41 	add.w	lr, lr, r1, lsl #5
 8004b0c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8004b10:	e77e      	b.n	8004a10 <copy_F+0x168>
 8004b12:	ebcc 110c 	rsb	r1, ip, ip, lsl #4
 8004b16:	eb06 1641 	add.w	r6, r6, r1, lsl #5
 8004b1a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004b1e:	e77b      	b.n	8004a18 <copy_F+0x170>
 8004b20:	240001b8 	.word	0x240001b8

08004b24 <copy_G>:

void copy_G(uint16_t* buffer, int x, int y, uint32_t color)
{
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8004b28:	4c9b      	ldr	r4, [pc, #620]	@ (8004d98 <copy_G+0x274>)
 8004b2a:	1c4d      	adds	r5, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b2c:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8004b30:	b08f      	sub	sp, #60	@ 0x3c
    int pixel_x = x_base + x + offset;
 8004b32:	6824      	ldr	r4, [r4, #0]
 8004b34:	eb05 0a04 	add.w	sl, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b38:	bf2c      	ite	cs
 8004b3a:	2500      	movcs	r5, #0
 8004b3c:	2501      	movcc	r5, #1
 8004b3e:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 8004b42:	bf2c      	ite	cs
 8004b44:	2600      	movcs	r6, #0
 8004b46:	2601      	movcc	r6, #1
 8004b48:	9604      	str	r6, [sp, #16]
 8004b4a:	b115      	cbz	r5, 8004b52 <copy_G+0x2e>
 8004b4c:	2e00      	cmp	r6, #0
 8004b4e:	f040 80fd 	bne.w	8004d4c <copy_G+0x228>
    int pixel_x = x_base + x + offset;
 8004b52:	1c8e      	adds	r6, r1, #2
 8004b54:	eb06 0804 	add.w	r8, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b58:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8004b5c:	bf2c      	ite	cs
 8004b5e:	2600      	movcs	r6, #0
 8004b60:	2601      	movcc	r6, #1
 8004b62:	9605      	str	r6, [sp, #20]
 8004b64:	b115      	cbz	r5, 8004b6c <copy_G+0x48>
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	f040 80e9 	bne.w	8004d3e <copy_G+0x21a>
    int pixel_x = x_base + x + offset;
 8004b6c:	1cce      	adds	r6, r1, #3
 8004b6e:	1937      	adds	r7, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b70:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8004b74:	9706      	str	r7, [sp, #24]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b76:	bf2c      	ite	cs
 8004b78:	2600      	movcs	r6, #0
 8004b7a:	2601      	movcc	r6, #1
 8004b7c:	9602      	str	r6, [sp, #8]
 8004b7e:	b115      	cbz	r5, 8004b86 <copy_G+0x62>
 8004b80:	2e00      	cmp	r6, #0
 8004b82:	f040 80d5 	bne.w	8004d30 <copy_G+0x20c>
    int pixel_x = x_base + x + offset;
 8004b86:	1d0e      	adds	r6, r1, #4
 8004b88:	eb06 0b04 	add.w	fp, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004b8c:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8004b90:	bf2c      	ite	cs
 8004b92:	2600      	movcs	r6, #0
 8004b94:	2601      	movcc	r6, #1
 8004b96:	9601      	str	r6, [sp, #4]
 8004b98:	b116      	cbz	r6, 8004ba0 <copy_G+0x7c>
 8004b9a:	2d00      	cmp	r5, #0
 8004b9c:	f040 80c1 	bne.w	8004d22 <copy_G+0x1fe>
    int pixel_x = x_base + x + offset;
 8004ba0:	eb01 0e04 	add.w	lr, r1, r4
    int pixel_y = y_base + y;
 8004ba4:	1c56      	adds	r6, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004ba6:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8004baa:	bf2c      	ite	cs
 8004bac:	2500      	movcs	r5, #0
 8004bae:	2501      	movcc	r5, #1
 8004bb0:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004bb4:	d202      	bcs.n	8004bbc <copy_G+0x98>
 8004bb6:	2d00      	cmp	r5, #0
 8004bb8:	f040 80cf 	bne.w	8004d5a <copy_G+0x236>
    int pixel_y = y_base + y;
 8004bbc:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004bbe:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004bc2:	d202      	bcs.n	8004bca <copy_G+0xa6>
 8004bc4:	2d00      	cmp	r5, #0
 8004bc6:	f040 8130 	bne.w	8004e2a <copy_G+0x306>
    int pixel_y = y_base + y;
 8004bca:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004bcc:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004bd0:	d202      	bcs.n	8004bd8 <copy_G+0xb4>
 8004bd2:	2d00      	cmp	r5, #0
 8004bd4:	f040 8122 	bne.w	8004e1c <copy_G+0x2f8>
    int pixel_y = y_base + y;
 8004bd8:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004bda:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004bde:	d202      	bcs.n	8004be6 <copy_G+0xc2>
 8004be0:	2d00      	cmp	r5, #0
 8004be2:	f040 8114 	bne.w	8004e0e <copy_G+0x2ea>
    int pixel_y = y_base + y;
 8004be6:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004be8:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004bec:	d202      	bcs.n	8004bf4 <copy_G+0xd0>
 8004bee:	2d00      	cmp	r5, #0
 8004bf0:	f040 8106 	bne.w	8004e00 <copy_G+0x2dc>
    int pixel_y = y_base + y;
 8004bf4:	f102 0c06 	add.w	ip, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004bf8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004bfc:	bf2c      	ite	cs
 8004bfe:	2600      	movcs	r6, #0
 8004c00:	2601      	movcc	r6, #1
 8004c02:	9607      	str	r6, [sp, #28]
 8004c04:	b115      	cbz	r5, 8004c0c <copy_G+0xe8>
 8004c06:	2e00      	cmp	r6, #0
 8004c08:	f040 80f3 	bne.w	8004df2 <copy_G+0x2ce>
    int pixel_y = y_base + y;
 8004c0c:	f102 0907 	add.w	r9, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004c10:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8004c14:	bf2c      	ite	cs
 8004c16:	2600      	movcs	r6, #0
 8004c18:	2601      	movcc	r6, #1
 8004c1a:	9608      	str	r6, [sp, #32]
 8004c1c:	b115      	cbz	r5, 8004c24 <copy_G+0x100>
 8004c1e:	2e00      	cmp	r6, #0
 8004c20:	f040 80e0 	bne.w	8004de4 <copy_G+0x2c0>
    int pixel_y = y_base + y;
 8004c24:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004c28:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004c2c:	960b      	str	r6, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004c2e:	bf2c      	ite	cs
 8004c30:	2700      	movcs	r7, #0
 8004c32:	2701      	movcc	r7, #1
 8004c34:	9709      	str	r7, [sp, #36]	@ 0x24
 8004c36:	b115      	cbz	r5, 8004c3e <copy_G+0x11a>
 8004c38:	2f00      	cmp	r7, #0
 8004c3a:	f040 80cc 	bne.w	8004dd6 <copy_G+0x2b2>
    int pixel_y = y_base + y;
 8004c3e:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004c42:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004c46:	960c      	str	r6, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004c48:	bf2c      	ite	cs
 8004c4a:	2700      	movcs	r7, #0
 8004c4c:	2701      	movcc	r7, #1
 8004c4e:	970a      	str	r7, [sp, #40]	@ 0x28
 8004c50:	b115      	cbz	r5, 8004c58 <copy_G+0x134>
 8004c52:	2f00      	cmp	r7, #0
 8004c54:	f040 80b8 	bne.w	8004dc8 <copy_G+0x2a4>
    int pixel_y = y_base + y;
 8004c58:	f102 060a 	add.w	r6, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004c5c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004c60:	bf2c      	ite	cs
 8004c62:	2700      	movcs	r7, #0
 8004c64:	2701      	movcc	r7, #1
 8004c66:	9703      	str	r7, [sp, #12]
 8004c68:	b117      	cbz	r7, 8004c70 <copy_G+0x14c>
 8004c6a:	2d00      	cmp	r5, #0
 8004c6c:	f040 80a5 	bne.w	8004dba <copy_G+0x296>
    int pixel_y = y_base + y;
 8004c70:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004c72:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004c76:	ebc2 1e02 	rsb	lr, r2, r2, lsl #4
 8004c7a:	ea4f 1702 	mov.w	r7, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004c7e:	bf2c      	ite	cs
 8004c80:	2500      	movcs	r5, #0
 8004c82:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004c84:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8004c88:	970d      	str	r7, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004c8a:	b175      	cbz	r5, 8004caa <copy_G+0x186>
 8004c8c:	9f04      	ldr	r7, [sp, #16]
 8004c8e:	2f00      	cmp	r7, #0
 8004c90:	d173      	bne.n	8004d7a <copy_G+0x256>
 8004c92:	b155      	cbz	r5, 8004caa <copy_G+0x186>
 8004c94:	9f05      	ldr	r7, [sp, #20]
 8004c96:	2f00      	cmp	r7, #0
 8004c98:	d166      	bne.n	8004d68 <copy_G+0x244>
 8004c9a:	b135      	cbz	r5, 8004caa <copy_G+0x186>
 8004c9c:	9f02      	ldr	r7, [sp, #8]
 8004c9e:	b127      	cbz	r7, 8004caa <copy_G+0x186>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004ca0:	9f06      	ldr	r7, [sp, #24]
 8004ca2:	eb0e 0a07 	add.w	sl, lr, r7
 8004ca6:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004caa:	9f01      	ldr	r7, [sp, #4]
 8004cac:	b10f      	cbz	r7, 8004cb2 <copy_G+0x18e>
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	d15f      	bne.n	8004d72 <copy_G+0x24e>
    int pixel_x = x_base + x + offset;
 8004cb2:	3105      	adds	r1, #5
 8004cb4:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004cb6:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8004cba:	bf2c      	ite	cs
 8004cbc:	2400      	movcs	r4, #0
 8004cbe:	2401      	movcc	r4, #1
 8004cc0:	b194      	cbz	r4, 8004ce8 <copy_G+0x1c4>
 8004cc2:	9d07      	ldr	r5, [sp, #28]
 8004cc4:	2d00      	cmp	r5, #0
 8004cc6:	f040 80b7 	bne.w	8004e38 <copy_G+0x314>
 8004cca:	b16c      	cbz	r4, 8004ce8 <copy_G+0x1c4>
 8004ccc:	9d08      	ldr	r5, [sp, #32]
 8004cce:	2d00      	cmp	r5, #0
 8004cd0:	f040 80cd 	bne.w	8004e6e <copy_G+0x34a>
 8004cd4:	b144      	cbz	r4, 8004ce8 <copy_G+0x1c4>
 8004cd6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004cd8:	2d00      	cmp	r5, #0
 8004cda:	f040 80c0 	bne.w	8004e5e <copy_G+0x33a>
 8004cde:	b11c      	cbz	r4, 8004ce8 <copy_G+0x1c4>
 8004ce0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8004ce2:	2d00      	cmp	r5, #0
 8004ce4:	f040 80af 	bne.w	8004e46 <copy_G+0x322>
 8004ce8:	9d03      	ldr	r5, [sp, #12]
 8004cea:	b115      	cbz	r5, 8004cf2 <copy_G+0x1ce>
 8004cec:	2c00      	cmp	r4, #0
 8004cee:	f040 80c5 	bne.w	8004e7c <copy_G+0x358>
 8004cf2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8004cf6:	d202      	bcs.n	8004cfe <copy_G+0x1da>
 8004cf8:	2c00      	cmp	r4, #0
 8004cfa:	f040 80ca 	bne.w	8004e92 <copy_G+0x36e>
 8004cfe:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004d02:	bf2c      	ite	cs
 8004d04:	2500      	movcs	r5, #0
 8004d06:	2501      	movcc	r5, #1
 8004d08:	b115      	cbz	r5, 8004d10 <copy_G+0x1ec>
 8004d0a:	9a02      	ldr	r2, [sp, #8]
 8004d0c:	2a00      	cmp	r2, #0
 8004d0e:	d14c      	bne.n	8004daa <copy_G+0x286>
 8004d10:	9a01      	ldr	r2, [sp, #4]
 8004d12:	b10a      	cbz	r2, 8004d18 <copy_G+0x1f4>
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	d141      	bne.n	8004d9c <copy_G+0x278>
 8004d18:	b104      	cbz	r4, 8004d1c <copy_G+0x1f8>
 8004d1a:	bba5      	cbnz	r5, 8004d86 <copy_G+0x262>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
    for (int i = 6; i < 12; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 3; i < 6; i++) fill_pixel(buffer, x, y, i, 6, color);
}
 8004d1c:	b00f      	add	sp, #60	@ 0x3c
 8004d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004d22:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8004d26:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 8004d2a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8004d2e:	e737      	b.n	8004ba0 <copy_G+0x7c>
 8004d30:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8004d34:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8004d38:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d3c:	e723      	b.n	8004b86 <copy_G+0x62>
 8004d3e:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8004d42:	eb08 1646 	add.w	r6, r8, r6, lsl #5
 8004d46:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d4a:	e70f      	b.n	8004b6c <copy_G+0x48>
 8004d4c:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8004d50:	eb0a 1646 	add.w	r6, sl, r6, lsl #5
 8004d54:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d58:	e6fb      	b.n	8004b52 <copy_G+0x2e>
 8004d5a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004d5e:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004d62:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004d66:	e729      	b.n	8004bbc <copy_G+0x98>
 8004d68:	eb0e 0a08 	add.w	sl, lr, r8
 8004d6c:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8004d70:	e793      	b.n	8004c9a <copy_G+0x176>
 8004d72:	44de      	add	lr, fp
 8004d74:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8004d78:	e79b      	b.n	8004cb2 <copy_G+0x18e>
 8004d7a:	44f2      	add	sl, lr
 8004d7c:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	d187      	bne.n	8004c94 <copy_G+0x170>
 8004d84:	e791      	b.n	8004caa <copy_G+0x186>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004d86:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8004d8a:	eb01 114c 	add.w	r1, r1, ip, lsl #5
 8004d8e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8004d92:	b00f      	add	sp, #60	@ 0x3c
 8004d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d98:	240001b8 	.word	0x240001b8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004d9c:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
 8004da0:	eb0b 1242 	add.w	r2, fp, r2, lsl #5
 8004da4:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8004da8:	e7b6      	b.n	8004d18 <copy_G+0x1f4>
 8004daa:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
 8004dae:	9e06      	ldr	r6, [sp, #24]
 8004db0:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 8004db4:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8004db8:	e7aa      	b.n	8004d10 <copy_G+0x1ec>
 8004dba:	ebc6 1506 	rsb	r5, r6, r6, lsl #4
 8004dbe:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 8004dc2:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8004dc6:	e753      	b.n	8004c70 <copy_G+0x14c>
 8004dc8:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004dcc:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004dd0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004dd4:	e740      	b.n	8004c58 <copy_G+0x134>
 8004dd6:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004dda:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004dde:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004de2:	e72c      	b.n	8004c3e <copy_G+0x11a>
 8004de4:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 8004de8:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004dec:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004df0:	e718      	b.n	8004c24 <copy_G+0x100>
 8004df2:	ebcc 160c 	rsb	r6, ip, ip, lsl #4
 8004df6:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004dfa:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004dfe:	e705      	b.n	8004c0c <copy_G+0xe8>
 8004e00:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004e04:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004e08:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004e0c:	e6f2      	b.n	8004bf4 <copy_G+0xd0>
 8004e0e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004e12:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004e16:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004e1a:	e6e4      	b.n	8004be6 <copy_G+0xc2>
 8004e1c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004e20:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004e24:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004e28:	e6d6      	b.n	8004bd8 <copy_G+0xb4>
 8004e2a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004e2e:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8004e32:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8004e36:	e6c8      	b.n	8004bca <copy_G+0xa6>
 8004e38:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
 8004e3c:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8004e40:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8004e44:	e741      	b.n	8004cca <copy_G+0x1a6>
 8004e46:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004e48:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8004e4c:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8004e50:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e54:	9d03      	ldr	r5, [sp, #12]
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	f47f af48 	bne.w	8004cec <copy_G+0x1c8>
 8004e5c:	e749      	b.n	8004cf2 <copy_G+0x1ce>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004e5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004e60:	ebc5 1805 	rsb	r8, r5, r5, lsl #4
 8004e64:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 8004e68:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8004e6c:	e737      	b.n	8004cde <copy_G+0x1ba>
 8004e6e:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8004e72:	eb01 1949 	add.w	r9, r1, r9, lsl #5
 8004e76:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8004e7a:	e72b      	b.n	8004cd4 <copy_G+0x1b0>
 8004e7c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e80:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004e84:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8004e88:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004e8c:	f4ff af34 	bcc.w	8004cf8 <copy_G+0x1d4>
 8004e90:	e735      	b.n	8004cfe <copy_G+0x1da>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004e92:	0115      	lsls	r5, r2, #4
 8004e94:	1aaa      	subs	r2, r5, r2
 8004e96:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8004e9a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8004e9e:	e72e      	b.n	8004cfe <copy_G+0x1da>

08004ea0 <copy_H>:

void copy_H(uint16_t* buffer, int x, int y, uint32_t color)
{
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8004ea4:	4c9c      	ldr	r4, [pc, #624]	@ (8005118 <copy_H+0x278>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004ea6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8004eaa:	b093      	sub	sp, #76	@ 0x4c
    int pixel_x = x_base + x + offset;
 8004eac:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004eae:	bf2c      	ite	cs
 8004eb0:	2400      	movcs	r4, #0
 8004eb2:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 8004eb4:	eb01 0e05 	add.w	lr, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004eb8:	4626      	mov	r6, r4
 8004eba:	9403      	str	r4, [sp, #12]
 8004ebc:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8004ec0:	bf2c      	ite	cs
 8004ec2:	2400      	movcs	r4, #0
 8004ec4:	2401      	movcc	r4, #1
 8004ec6:	b114      	cbz	r4, 8004ece <copy_H+0x2e>
 8004ec8:	2e00      	cmp	r6, #0
 8004eca:	f040 8151 	bne.w	8005170 <copy_H+0x2d0>
    int pixel_y = y_base + y;
 8004ece:	f102 0901 	add.w	r9, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004ed2:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8004ed6:	bf2c      	ite	cs
 8004ed8:	2600      	movcs	r6, #0
 8004eda:	2601      	movcc	r6, #1
 8004edc:	9604      	str	r6, [sp, #16]
 8004ede:	b114      	cbz	r4, 8004ee6 <copy_H+0x46>
 8004ee0:	2e00      	cmp	r6, #0
 8004ee2:	f040 813e 	bne.w	8005162 <copy_H+0x2c2>
    int pixel_y = y_base + y;
 8004ee6:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004ee8:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004eec:	960e      	str	r6, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004eee:	bf2c      	ite	cs
 8004ef0:	2700      	movcs	r7, #0
 8004ef2:	2701      	movcc	r7, #1
 8004ef4:	9705      	str	r7, [sp, #20]
 8004ef6:	b114      	cbz	r4, 8004efe <copy_H+0x5e>
 8004ef8:	2f00      	cmp	r7, #0
 8004efa:	f040 812b 	bne.w	8005154 <copy_H+0x2b4>
    int pixel_y = y_base + y;
 8004efe:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f00:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004f04:	960f      	str	r6, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f06:	bf2c      	ite	cs
 8004f08:	2700      	movcs	r7, #0
 8004f0a:	2701      	movcc	r7, #1
 8004f0c:	9706      	str	r7, [sp, #24]
 8004f0e:	b114      	cbz	r4, 8004f16 <copy_H+0x76>
 8004f10:	2f00      	cmp	r7, #0
 8004f12:	f040 8118 	bne.w	8005146 <copy_H+0x2a6>
    int pixel_y = y_base + y;
 8004f16:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f18:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004f1c:	9610      	str	r6, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f1e:	bf2c      	ite	cs
 8004f20:	2700      	movcs	r7, #0
 8004f22:	2701      	movcc	r7, #1
 8004f24:	9707      	str	r7, [sp, #28]
 8004f26:	b114      	cbz	r4, 8004f2e <copy_H+0x8e>
 8004f28:	2f00      	cmp	r7, #0
 8004f2a:	f040 8105 	bne.w	8005138 <copy_H+0x298>
    int pixel_y = y_base + y;
 8004f2e:	f102 0c05 	add.w	ip, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f32:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8004f36:	bf2c      	ite	cs
 8004f38:	2600      	movcs	r6, #0
 8004f3a:	2601      	movcc	r6, #1
 8004f3c:	9600      	str	r6, [sp, #0]
 8004f3e:	b114      	cbz	r4, 8004f46 <copy_H+0xa6>
 8004f40:	2e00      	cmp	r6, #0
 8004f42:	f040 80f2 	bne.w	800512a <copy_H+0x28a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8004f46:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8004f4a:	9601      	str	r6, [sp, #4]
    int pixel_y = y_base + y;
 8004f4c:	1d96      	adds	r6, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f4e:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8004f52:	9611      	str	r6, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f54:	bf2c      	ite	cs
 8004f56:	2700      	movcs	r7, #0
 8004f58:	2701      	movcc	r7, #1
 8004f5a:	9708      	str	r7, [sp, #32]
 8004f5c:	b114      	cbz	r4, 8004f64 <copy_H+0xc4>
 8004f5e:	2f00      	cmp	r7, #0
 8004f60:	f040 80dc 	bne.w	800511c <copy_H+0x27c>
    int pixel_y = y_base + y;
 8004f64:	f102 0b07 	add.w	fp, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f68:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8004f6c:	bf2c      	ite	cs
 8004f6e:	2600      	movcs	r6, #0
 8004f70:	2601      	movcc	r6, #1
 8004f72:	9609      	str	r6, [sp, #36]	@ 0x24
 8004f74:	b114      	cbz	r4, 8004f7c <copy_H+0xdc>
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	f040 80c6 	bne.w	8005108 <copy_H+0x268>
    int pixel_y = y_base + y;
 8004f7c:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f80:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8004f84:	bf2c      	ite	cs
 8004f86:	2600      	movcs	r6, #0
 8004f88:	2601      	movcc	r6, #1
 8004f8a:	960a      	str	r6, [sp, #40]	@ 0x28
 8004f8c:	b114      	cbz	r4, 8004f94 <copy_H+0xf4>
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	f040 80b3 	bne.w	80050fa <copy_H+0x25a>
    int pixel_y = y_base + y;
 8004f94:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004f98:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8004f9c:	bf2c      	ite	cs
 8004f9e:	2600      	movcs	r6, #0
 8004fa0:	2601      	movcc	r6, #1
 8004fa2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8004fa4:	b114      	cbz	r4, 8004fac <copy_H+0x10c>
 8004fa6:	2e00      	cmp	r6, #0
 8004fa8:	f040 80a0 	bne.w	80050ec <copy_H+0x24c>
    int pixel_y = y_base + y;
 8004fac:	f102 060a 	add.w	r6, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004fb0:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8004fb4:	960d      	str	r6, [sp, #52]	@ 0x34
 8004fb6:	bf2c      	ite	cs
 8004fb8:	2600      	movcs	r6, #0
 8004fba:	2601      	movcc	r6, #1
 8004fbc:	960c      	str	r6, [sp, #48]	@ 0x30
 8004fbe:	b114      	cbz	r4, 8004fc6 <copy_H+0x126>
 8004fc0:	2e00      	cmp	r6, #0
 8004fc2:	f040 808b 	bne.w	80050dc <copy_H+0x23c>
    int pixel_y = y_base + y;
 8004fc6:	f102 0a0b 	add.w	sl, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004fca:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8004fce:	bf2c      	ite	cs
 8004fd0:	2600      	movcs	r6, #0
 8004fd2:	2601      	movcc	r6, #1
 8004fd4:	9602      	str	r6, [sp, #8]
 8004fd6:	b10c      	cbz	r4, 8004fdc <copy_H+0x13c>
 8004fd8:	2e00      	cmp	r6, #0
 8004fda:	d178      	bne.n	80050ce <copy_H+0x22e>
    int pixel_x = x_base + x + offset;
 8004fdc:	f101 0e05 	add.w	lr, r1, #5
 8004fe0:	44ae      	add	lr, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8004fe2:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8004fe6:	bf2c      	ite	cs
 8004fe8:	2400      	movcs	r4, #0
 8004fea:	2401      	movcc	r4, #1
 8004fec:	2c00      	cmp	r4, #0
 8004fee:	d03c      	beq.n	800506a <copy_H+0x1ca>
 8004ff0:	9e03      	ldr	r6, [sp, #12]
 8004ff2:	2e00      	cmp	r6, #0
 8004ff4:	f040 80c3 	bne.w	800517e <copy_H+0x2de>
 8004ff8:	2c00      	cmp	r4, #0
 8004ffa:	d036      	beq.n	800506a <copy_H+0x1ca>
 8004ffc:	9a04      	ldr	r2, [sp, #16]
 8004ffe:	2a00      	cmp	r2, #0
 8005000:	f040 80fd 	bne.w	80051fe <copy_H+0x35e>
 8005004:	2c00      	cmp	r4, #0
 8005006:	d030      	beq.n	800506a <copy_H+0x1ca>
 8005008:	9a05      	ldr	r2, [sp, #20]
 800500a:	2a00      	cmp	r2, #0
 800500c:	f040 80ef 	bne.w	80051ee <copy_H+0x34e>
 8005010:	b35c      	cbz	r4, 800506a <copy_H+0x1ca>
 8005012:	9a06      	ldr	r2, [sp, #24]
 8005014:	2a00      	cmp	r2, #0
 8005016:	f040 8111 	bne.w	800523c <copy_H+0x39c>
 800501a:	b334      	cbz	r4, 800506a <copy_H+0x1ca>
 800501c:	9a07      	ldr	r2, [sp, #28]
 800501e:	2a00      	cmp	r2, #0
 8005020:	f040 8104 	bne.w	800522c <copy_H+0x38c>
 8005024:	b30c      	cbz	r4, 800506a <copy_H+0x1ca>
 8005026:	9a00      	ldr	r2, [sp, #0]
 8005028:	2a00      	cmp	r2, #0
 800502a:	f040 80f7 	bne.w	800521c <copy_H+0x37c>
 800502e:	b1e4      	cbz	r4, 800506a <copy_H+0x1ca>
 8005030:	9a08      	ldr	r2, [sp, #32]
 8005032:	2a00      	cmp	r2, #0
 8005034:	f040 80ea 	bne.w	800520c <copy_H+0x36c>
 8005038:	b1bc      	cbz	r4, 800506a <copy_H+0x1ca>
 800503a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800503c:	2a00      	cmp	r2, #0
 800503e:	f040 80af 	bne.w	80051a0 <copy_H+0x300>
 8005042:	b194      	cbz	r4, 800506a <copy_H+0x1ca>
 8005044:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005046:	2a00      	cmp	r2, #0
 8005048:	f040 80a3 	bne.w	8005192 <copy_H+0x2f2>
 800504c:	b16c      	cbz	r4, 800506a <copy_H+0x1ca>
 800504e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005050:	2a00      	cmp	r2, #0
 8005052:	f040 80c5 	bne.w	80051e0 <copy_H+0x340>
 8005056:	b144      	cbz	r4, 800506a <copy_H+0x1ca>
 8005058:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800505a:	b132      	cbz	r2, 800506a <copy_H+0x1ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800505c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800505e:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8005062:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005066:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800506a:	9a02      	ldr	r2, [sp, #8]
 800506c:	b112      	cbz	r2, 8005074 <copy_H+0x1d4>
 800506e:	2c00      	cmp	r4, #0
 8005070:	f040 80a9 	bne.w	80051c6 <copy_H+0x326>
    int pixel_x = x_base + x + offset;
 8005074:	1c4c      	adds	r4, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005076:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800507a:	9a01      	ldr	r2, [sp, #4]
    int pixel_x = x_base + x + offset;
 800507c:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800507e:	bf28      	it	cs
 8005080:	2600      	movcs	r6, #0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005082:	eba2 020c 	sub.w	r2, r2, ip
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005086:	bf38      	it	cc
 8005088:	2601      	movcc	r6, #1
 800508a:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800508e:	ea4f 1242 	mov.w	r2, r2, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005092:	d202      	bcs.n	800509a <copy_H+0x1fa>
 8005094:	2e00      	cmp	r6, #0
 8005096:	f040 8092 	bne.w	80051be <copy_H+0x31e>
    int pixel_x = x_base + x + offset;
 800509a:	1c8c      	adds	r4, r1, #2
 800509c:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800509e:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 80050a2:	d202      	bcs.n	80050aa <copy_H+0x20a>
 80050a4:	2e00      	cmp	r6, #0
 80050a6:	f040 8086 	bne.w	80051b6 <copy_H+0x316>
    int pixel_x = x_base + x + offset;
 80050aa:	1ccc      	adds	r4, r1, #3
 80050ac:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80050ae:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 80050b2:	d201      	bcs.n	80050b8 <copy_H+0x218>
 80050b4:	2e00      	cmp	r6, #0
 80050b6:	d17a      	bne.n	80051ae <copy_H+0x30e>
    int pixel_x = x_base + x + offset;
 80050b8:	3104      	adds	r1, #4
 80050ba:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80050bc:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80050c0:	d202      	bcs.n	80050c8 <copy_H+0x228>
 80050c2:	2e00      	cmp	r6, #0
 80050c4:	f040 8086 	bne.w	80051d4 <copy_H+0x334>
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 5, color);
}
 80050c8:	b013      	add	sp, #76	@ 0x4c
 80050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80050ce:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 80050d2:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 80050d6:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80050da:	e77f      	b.n	8004fdc <copy_H+0x13c>
 80050dc:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80050de:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 80050e2:	eb0e 1a4a 	add.w	sl, lr, sl, lsl #5
 80050e6:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80050ea:	e76c      	b.n	8004fc6 <copy_H+0x126>
 80050ec:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 80050f0:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 80050f4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80050f8:	e758      	b.n	8004fac <copy_H+0x10c>
 80050fa:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 80050fe:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005102:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005106:	e745      	b.n	8004f94 <copy_H+0xf4>
 8005108:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 800510c:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005110:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005114:	e732      	b.n	8004f7c <copy_H+0xdc>
 8005116:	bf00      	nop
 8005118:	240001b8 	.word	0x240001b8
 800511c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8005120:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005124:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005128:	e71c      	b.n	8004f64 <copy_H+0xc4>
 800512a:	ebcc 160c 	rsb	r6, ip, ip, lsl #4
 800512e:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005132:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005136:	e706      	b.n	8004f46 <copy_H+0xa6>
 8005138:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800513c:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005140:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005144:	e6f3      	b.n	8004f2e <copy_H+0x8e>
 8005146:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800514a:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 800514e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005152:	e6e0      	b.n	8004f16 <copy_H+0x76>
 8005154:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8005158:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 800515c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005160:	e6cd      	b.n	8004efe <copy_H+0x5e>
 8005162:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 8005166:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 800516a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800516e:	e6ba      	b.n	8004ee6 <copy_H+0x46>
 8005170:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8005174:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8005178:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800517c:	e6a7      	b.n	8004ece <copy_H+0x2e>
 800517e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005182:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8005186:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800518a:	2c00      	cmp	r4, #0
 800518c:	f47f af36 	bne.w	8004ffc <copy_H+0x15c>
 8005190:	e76b      	b.n	800506a <copy_H+0x1ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005192:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8005196:	eb0e 1848 	add.w	r8, lr, r8, lsl #5
 800519a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800519e:	e755      	b.n	800504c <copy_H+0x1ac>
 80051a0:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
 80051a4:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 80051a8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80051ac:	e749      	b.n	8005042 <copy_H+0x1a2>
 80051ae:	4414      	add	r4, r2
 80051b0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80051b4:	e780      	b.n	80050b8 <copy_H+0x218>
 80051b6:	4414      	add	r4, r2
 80051b8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80051bc:	e775      	b.n	80050aa <copy_H+0x20a>
 80051be:	4414      	add	r4, r2
 80051c0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80051c4:	e769      	b.n	800509a <copy_H+0x1fa>
 80051c6:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80051ca:	eb0e 1e4a 	add.w	lr, lr, sl, lsl #5
 80051ce:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80051d2:	e74f      	b.n	8005074 <copy_H+0x1d4>
 80051d4:	4411      	add	r1, r2
 80051d6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 80051da:	b013      	add	sp, #76	@ 0x4c
 80051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80051e0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80051e4:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 80051e8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80051ec:	e733      	b.n	8005056 <copy_H+0x1b6>
 80051ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051f0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80051f4:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 80051f8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80051fc:	e708      	b.n	8005010 <copy_H+0x170>
 80051fe:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8005202:	eb0e 1949 	add.w	r9, lr, r9, lsl #5
 8005206:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800520a:	e6fb      	b.n	8005004 <copy_H+0x164>
 800520c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800520e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005212:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8005216:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800521a:	e70d      	b.n	8005038 <copy_H+0x198>
 800521c:	9a01      	ldr	r2, [sp, #4]
 800521e:	eba2 020c 	sub.w	r2, r2, ip
 8005222:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8005226:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800522a:	e700      	b.n	800502e <copy_H+0x18e>
 800522c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800522e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005232:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8005236:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800523a:	e6f3      	b.n	8005024 <copy_H+0x184>
 800523c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800523e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005242:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
 8005246:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800524a:	e6e6      	b.n	800501a <copy_H+0x17a>

0800524c <copy_I>:

void copy_I(uint16_t* buffer, int x, int y, uint32_t color)
{
 800524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8005250:	4c9a      	ldr	r4, [pc, #616]	@ (80054bc <copy_I+0x270>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005252:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005256:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
{
 800525a:	b08f      	sub	sp, #60	@ 0x3c
    int pixel_x = x_base + x + offset;
 800525c:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800525e:	bf2c      	ite	cs
 8005260:	2600      	movcs	r6, #0
 8005262:	2601      	movcc	r6, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005264:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    int pixel_x = x_base + x + offset;
 8005268:	eb01 0805 	add.w	r8, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800526c:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8005270:	bf2c      	ite	cs
 8005272:	f04f 0900 	movcs.w	r9, #0
 8005276:	f04f 0901 	movcc.w	r9, #1
 800527a:	b11e      	cbz	r6, 8005284 <copy_I+0x38>
 800527c:	f1b9 0f00 	cmp.w	r9, #0
 8005280:	f040 8132 	bne.w	80054e8 <copy_I+0x29c>
    int pixel_x = x_base + x + offset;
 8005284:	1c4f      	adds	r7, r1, #1
 8005286:	442f      	add	r7, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005288:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800528c:	9704      	str	r7, [sp, #16]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800528e:	bf2c      	ite	cs
 8005290:	2400      	movcs	r4, #0
 8005292:	2401      	movcc	r4, #1
 8005294:	9402      	str	r4, [sp, #8]
 8005296:	b116      	cbz	r6, 800529e <copy_I+0x52>
 8005298:	2c00      	cmp	r4, #0
 800529a:	f040 8120 	bne.w	80054de <copy_I+0x292>
    int pixel_x = x_base + x + offset;
 800529e:	1c8c      	adds	r4, r1, #2
 80052a0:	eb04 0a05 	add.w	sl, r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052a4:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 80052a8:	bf2c      	ite	cs
 80052aa:	2400      	movcs	r4, #0
 80052ac:	2401      	movcc	r4, #1
 80052ae:	b116      	cbz	r6, 80052b6 <copy_I+0x6a>
 80052b0:	2c00      	cmp	r4, #0
 80052b2:	f040 810f 	bne.w	80054d4 <copy_I+0x288>
    int pixel_x = x_base + x + offset;
 80052b6:	f101 0e03 	add.w	lr, r1, #3
 80052ba:	eb0e 0705 	add.w	r7, lr, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052be:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 80052c2:	9701      	str	r7, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052c4:	bf2c      	ite	cs
 80052c6:	f04f 0b00 	movcs.w	fp, #0
 80052ca:	f04f 0b01 	movcc.w	fp, #1
 80052ce:	b11e      	cbz	r6, 80052d8 <copy_I+0x8c>
 80052d0:	f1bb 0f00 	cmp.w	fp, #0
 80052d4:	f040 80f9 	bne.w	80054ca <copy_I+0x27e>
    int pixel_x = x_base + x + offset;
 80052d8:	f101 0e04 	add.w	lr, r1, #4
 80052dc:	44ae      	add	lr, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052de:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80052e2:	bf2c      	ite	cs
 80052e4:	2700      	movcs	r7, #0
 80052e6:	2701      	movcc	r7, #1
 80052e8:	9703      	str	r7, [sp, #12]
 80052ea:	b116      	cbz	r6, 80052f2 <copy_I+0xa6>
 80052ec:	2f00      	cmp	r7, #0
 80052ee:	f040 80e7 	bne.w	80054c0 <copy_I+0x274>
    int pixel_x = x_base + x + offset;
 80052f2:	3105      	adds	r1, #5
 80052f4:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80052f6:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80052fa:	bf2c      	ite	cs
 80052fc:	2500      	movcs	r5, #0
 80052fe:	2501      	movcc	r5, #1
 8005300:	b115      	cbz	r5, 8005308 <copy_I+0xbc>
 8005302:	2e00      	cmp	r6, #0
 8005304:	f040 80d5 	bne.w	80054b2 <copy_I+0x266>
 8005308:	f102 060b 	add.w	r6, r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800530c:	f50c 5ca5 	add.w	ip, ip, #5280	@ 0x14a0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005310:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8005314:	bf2c      	ite	cs
 8005316:	2600      	movcs	r6, #0
 8005318:	2601      	movcc	r6, #1
 800531a:	b1be      	cbz	r6, 800534c <copy_I+0x100>
 800531c:	f1b9 0f00 	cmp.w	r9, #0
 8005320:	f040 80e7 	bne.w	80054f2 <copy_I+0x2a6>
 8005324:	b196      	cbz	r6, 800534c <copy_I+0x100>
 8005326:	9f02      	ldr	r7, [sp, #8]
 8005328:	2f00      	cmp	r7, #0
 800532a:	f040 8143 	bne.w	80055b4 <copy_I+0x368>
 800532e:	b16e      	cbz	r6, 800534c <copy_I+0x100>
 8005330:	2c00      	cmp	r4, #0
 8005332:	f040 813a 	bne.w	80055aa <copy_I+0x35e>
 8005336:	b14e      	cbz	r6, 800534c <copy_I+0x100>
 8005338:	f1bb 0f00 	cmp.w	fp, #0
 800533c:	f040 813f 	bne.w	80055be <copy_I+0x372>
 8005340:	b126      	cbz	r6, 800534c <copy_I+0x100>
 8005342:	9f03      	ldr	r7, [sp, #12]
 8005344:	b117      	cbz	r7, 800534c <copy_I+0x100>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005346:	44e6      	add	lr, ip
 8005348:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800534c:	b115      	cbz	r5, 8005354 <copy_I+0x108>
 800534e:	2e00      	cmp	r6, #0
 8005350:	f040 8180 	bne.w	8005654 <copy_I+0x408>
    int pixel_y = y_base + y;
 8005354:	1c51      	adds	r1, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005356:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 800535a:	9109      	str	r1, [sp, #36]	@ 0x24
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800535c:	bf2c      	ite	cs
 800535e:	2500      	movcs	r5, #0
 8005360:	2501      	movcc	r5, #1
 8005362:	9502      	str	r5, [sp, #8]
 8005364:	b115      	cbz	r5, 800536c <copy_I+0x120>
 8005366:	2c00      	cmp	r4, #0
 8005368:	f040 816d 	bne.w	8005646 <copy_I+0x3fa>
    int pixel_y = y_base + y;
 800536c:	1c91      	adds	r1, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800536e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8005372:	910a      	str	r1, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005374:	bf2c      	ite	cs
 8005376:	2500      	movcs	r5, #0
 8005378:	2501      	movcc	r5, #1
 800537a:	9503      	str	r5, [sp, #12]
 800537c:	b115      	cbz	r5, 8005384 <copy_I+0x138>
 800537e:	2c00      	cmp	r4, #0
 8005380:	f040 815a 	bne.w	8005638 <copy_I+0x3ec>
    int pixel_y = y_base + y;
 8005384:	1cd1      	adds	r1, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005386:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 800538a:	910b      	str	r1, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800538c:	bf2c      	ite	cs
 800538e:	2500      	movcs	r5, #0
 8005390:	2501      	movcc	r5, #1
 8005392:	9504      	str	r5, [sp, #16]
 8005394:	b115      	cbz	r5, 800539c <copy_I+0x150>
 8005396:	2c00      	cmp	r4, #0
 8005398:	f040 8147 	bne.w	800562a <copy_I+0x3de>
    int pixel_y = y_base + y;
 800539c:	1d11      	adds	r1, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800539e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 80053a2:	910c      	str	r1, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80053a4:	bf2c      	ite	cs
 80053a6:	2500      	movcs	r5, #0
 80053a8:	2501      	movcc	r5, #1
 80053aa:	9505      	str	r5, [sp, #20]
 80053ac:	b115      	cbz	r5, 80053b4 <copy_I+0x168>
 80053ae:	2c00      	cmp	r4, #0
 80053b0:	f040 8134 	bne.w	800561c <copy_I+0x3d0>
    int pixel_y = y_base + y;
 80053b4:	f102 0805 	add.w	r8, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80053b8:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80053bc:	bf2c      	ite	cs
 80053be:	2100      	movcs	r1, #0
 80053c0:	2101      	movcc	r1, #1
 80053c2:	9106      	str	r1, [sp, #24]
 80053c4:	b111      	cbz	r1, 80053cc <copy_I+0x180>
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	f040 8121 	bne.w	800560e <copy_I+0x3c2>
    int pixel_y = y_base + y;
 80053cc:	f102 0e06 	add.w	lr, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80053d0:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80053d4:	bf2c      	ite	cs
 80053d6:	2100      	movcs	r1, #0
 80053d8:	2101      	movcc	r1, #1
 80053da:	9107      	str	r1, [sp, #28]
 80053dc:	b111      	cbz	r1, 80053e4 <copy_I+0x198>
 80053de:	2c00      	cmp	r4, #0
 80053e0:	f040 810e 	bne.w	8005600 <copy_I+0x3b4>
    int pixel_y = y_base + y;
 80053e4:	f102 0c07 	add.w	ip, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80053e8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80053ec:	bf2c      	ite	cs
 80053ee:	2500      	movcs	r5, #0
 80053f0:	2501      	movcc	r5, #1
 80053f2:	b115      	cbz	r5, 80053fa <copy_I+0x1ae>
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	f040 80fc 	bne.w	80055f2 <copy_I+0x3a6>
    int pixel_y = y_base + y;
 80053fa:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80053fe:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8005402:	910d      	str	r1, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005404:	bf2c      	ite	cs
 8005406:	2700      	movcs	r7, #0
 8005408:	2701      	movcc	r7, #1
 800540a:	b117      	cbz	r7, 8005412 <copy_I+0x1c6>
 800540c:	2c00      	cmp	r4, #0
 800540e:	f040 80e9 	bne.w	80055e4 <copy_I+0x398>
    int pixel_y = y_base + y;
 8005412:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005416:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800541a:	bf2c      	ite	cs
 800541c:	2600      	movcs	r6, #0
 800541e:	2601      	movcc	r6, #1
 8005420:	b116      	cbz	r6, 8005428 <copy_I+0x1dc>
 8005422:	2c00      	cmp	r4, #0
 8005424:	f040 80d7 	bne.w	80055d6 <copy_I+0x38a>
    int pixel_y = y_base + y;
 8005428:	320a      	adds	r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800542a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_y = y_base + y;
 800542e:	9208      	str	r2, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005430:	bf2c      	ite	cs
 8005432:	f04f 0900 	movcs.w	r9, #0
 8005436:	f04f 0901 	movcc.w	r9, #1
 800543a:	f1b9 0f00 	cmp.w	r9, #0
 800543e:	d002      	beq.n	8005446 <copy_I+0x1fa>
 8005440:	2c00      	cmp	r4, #0
 8005442:	f040 80c1 	bne.w	80055c8 <copy_I+0x37c>
 8005446:	9c02      	ldr	r4, [sp, #8]
 8005448:	b11c      	cbz	r4, 8005452 <copy_I+0x206>
 800544a:	f1bb 0f00 	cmp.w	fp, #0
 800544e:	f040 80a3 	bne.w	8005598 <copy_I+0x34c>
 8005452:	9c03      	ldr	r4, [sp, #12]
 8005454:	b11c      	cbz	r4, 800545e <copy_I+0x212>
 8005456:	f1bb 0f00 	cmp.w	fp, #0
 800545a:	f040 8094 	bne.w	8005586 <copy_I+0x33a>
 800545e:	9c04      	ldr	r4, [sp, #16]
 8005460:	b11c      	cbz	r4, 800546a <copy_I+0x21e>
 8005462:	f1bb 0f00 	cmp.w	fp, #0
 8005466:	f040 8085 	bne.w	8005574 <copy_I+0x328>
 800546a:	9c05      	ldr	r4, [sp, #20]
 800546c:	b114      	cbz	r4, 8005474 <copy_I+0x228>
 800546e:	f1bb 0f00 	cmp.w	fp, #0
 8005472:	d176      	bne.n	8005562 <copy_I+0x316>
 8005474:	9c06      	ldr	r4, [sp, #24]
 8005476:	b114      	cbz	r4, 800547e <copy_I+0x232>
 8005478:	f1bb 0f00 	cmp.w	fp, #0
 800547c:	d169      	bne.n	8005552 <copy_I+0x306>
 800547e:	9c07      	ldr	r4, [sp, #28]
 8005480:	b114      	cbz	r4, 8005488 <copy_I+0x23c>
 8005482:	f1bb 0f00 	cmp.w	fp, #0
 8005486:	d15c      	bne.n	8005542 <copy_I+0x2f6>
 8005488:	b115      	cbz	r5, 8005490 <copy_I+0x244>
 800548a:	f1bb 0f00 	cmp.w	fp, #0
 800548e:	d150      	bne.n	8005532 <copy_I+0x2e6>
 8005490:	b117      	cbz	r7, 8005498 <copy_I+0x24c>
 8005492:	f1bb 0f00 	cmp.w	fp, #0
 8005496:	d143      	bne.n	8005520 <copy_I+0x2d4>
 8005498:	b116      	cbz	r6, 80054a0 <copy_I+0x254>
 800549a:	f1bb 0f00 	cmp.w	fp, #0
 800549e:	d137      	bne.n	8005510 <copy_I+0x2c4>
 80054a0:	f1b9 0f00 	cmp.w	r9, #0
 80054a4:	d002      	beq.n	80054ac <copy_I+0x260>
 80054a6:	f1bb 0f00 	cmp.w	fp, #0
 80054aa:	d126      	bne.n	80054fa <copy_I+0x2ae>
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 11, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 2, i, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 3, i, color);
}
 80054ac:	b00f      	add	sp, #60	@ 0x3c
 80054ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80054b2:	eb01 060c 	add.w	r6, r1, ip
 80054b6:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80054ba:	e725      	b.n	8005308 <copy_I+0xbc>
 80054bc:	240001b8 	.word	0x240001b8
 80054c0:	eb0c 070e 	add.w	r7, ip, lr
 80054c4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80054c8:	e713      	b.n	80052f2 <copy_I+0xa6>
 80054ca:	eb0c 0e07 	add.w	lr, ip, r7
 80054ce:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80054d2:	e701      	b.n	80052d8 <copy_I+0x8c>
 80054d4:	eb0c 0e0a 	add.w	lr, ip, sl
 80054d8:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80054dc:	e6eb      	b.n	80052b6 <copy_I+0x6a>
 80054de:	eb0c 0407 	add.w	r4, ip, r7
 80054e2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80054e6:	e6da      	b.n	800529e <copy_I+0x52>
 80054e8:	eb0c 0408 	add.w	r4, ip, r8
 80054ec:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80054f0:	e6c8      	b.n	8005284 <copy_I+0x38>
 80054f2:	44e0      	add	r8, ip
 80054f4:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80054f8:	e714      	b.n	8005324 <copy_I+0xd8>
 80054fa:	9a08      	ldr	r2, [sp, #32]
 80054fc:	9901      	ldr	r1, [sp, #4]
 80054fe:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005502:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8005506:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800550a:	b00f      	add	sp, #60	@ 0x3c
 800550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005510:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005514:	9a01      	ldr	r2, [sp, #4]
 8005516:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800551a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800551e:	e7bf      	b.n	80054a0 <copy_I+0x254>
 8005520:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005522:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8005526:	9a01      	ldr	r2, [sp, #4]
 8005528:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 800552c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8005530:	e7b2      	b.n	8005498 <copy_I+0x24c>
 8005532:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 8005536:	9a01      	ldr	r2, [sp, #4]
 8005538:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800553c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005540:	e7a6      	b.n	8005490 <copy_I+0x244>
 8005542:	ebce 140e 	rsb	r4, lr, lr, lsl #4
 8005546:	9a01      	ldr	r2, [sp, #4]
 8005548:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800554c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005550:	e79a      	b.n	8005488 <copy_I+0x23c>
 8005552:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 8005556:	9a01      	ldr	r2, [sp, #4]
 8005558:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800555c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005560:	e78d      	b.n	800547e <copy_I+0x232>
 8005562:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005564:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8005568:	9a01      	ldr	r2, [sp, #4]
 800556a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800556e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005572:	e77f      	b.n	8005474 <copy_I+0x228>
 8005574:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005576:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800557a:	9a01      	ldr	r2, [sp, #4]
 800557c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8005580:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005584:	e771      	b.n	800546a <copy_I+0x21e>
 8005586:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005588:	9a01      	ldr	r2, [sp, #4]
 800558a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800558e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8005592:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005596:	e762      	b.n	800545e <copy_I+0x212>
 8005598:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800559a:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
 800559e:	9c01      	ldr	r4, [sp, #4]
 80055a0:	eb04 1a4a 	add.w	sl, r4, sl, lsl #5
 80055a4:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80055a8:	e753      	b.n	8005452 <copy_I+0x206>
 80055aa:	eb0c 070a 	add.w	r7, ip, sl
 80055ae:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80055b2:	e6c0      	b.n	8005336 <copy_I+0xea>
 80055b4:	9f04      	ldr	r7, [sp, #16]
 80055b6:	4467      	add	r7, ip
 80055b8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80055bc:	e6b7      	b.n	800532e <copy_I+0xe2>
 80055be:	9f01      	ldr	r7, [sp, #4]
 80055c0:	4467      	add	r7, ip
 80055c2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80055c6:	e6bb      	b.n	8005340 <copy_I+0xf4>
 80055c8:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 80055cc:	eb0a 1444 	add.w	r4, sl, r4, lsl #5
 80055d0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80055d4:	e737      	b.n	8005446 <copy_I+0x1fa>
 80055d6:	ebc1 1901 	rsb	r9, r1, r1, lsl #4
 80055da:	eb0a 1949 	add.w	r9, sl, r9, lsl #5
 80055de:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80055e2:	e721      	b.n	8005428 <copy_I+0x1dc>
 80055e4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80055e8:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 80055ec:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80055f0:	e70f      	b.n	8005412 <copy_I+0x1c6>
 80055f2:	ebcc 110c 	rsb	r1, ip, ip, lsl #4
 80055f6:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 80055fa:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80055fe:	e6fc      	b.n	80053fa <copy_I+0x1ae>
 8005600:	ebce 110e 	rsb	r1, lr, lr, lsl #4
 8005604:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8005608:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800560c:	e6ea      	b.n	80053e4 <copy_I+0x198>
 800560e:	ebc8 1108 	rsb	r1, r8, r8, lsl #4
 8005612:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8005616:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800561a:	e6d7      	b.n	80053cc <copy_I+0x180>
 800561c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005620:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8005624:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005628:	e6c4      	b.n	80053b4 <copy_I+0x168>
 800562a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800562e:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8005632:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005636:	e6b1      	b.n	800539c <copy_I+0x150>
 8005638:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800563c:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8005640:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005644:	e69e      	b.n	8005384 <copy_I+0x138>
 8005646:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800564a:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 800564e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005652:	e68b      	b.n	800536c <copy_I+0x120>
 8005654:	4461      	add	r1, ip
 8005656:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800565a:	e67b      	b.n	8005354 <copy_I+0x108>

0800565c <copy_J>:

void copy_J(uint16_t* buffer, int x, int y, uint32_t color)
{
 800565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8005660:	4cab      	ldr	r4, [pc, #684]	@ (8005910 <copy_J+0x2b4>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005662:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005666:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
{
 800566a:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 800566c:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800566e:	bf2c      	ite	cs
 8005670:	2500      	movcs	r5, #0
 8005672:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005674:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    int pixel_x = x_base + x + offset;
 8005678:	eb01 0904 	add.w	r9, r1, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800567c:	ea4f 1b02 	mov.w	fp, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005680:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 8005684:	bf2c      	ite	cs
 8005686:	f04f 0a00 	movcs.w	sl, #0
 800568a:	f04f 0a01 	movcc.w	sl, #1
 800568e:	b11d      	cbz	r5, 8005698 <copy_J+0x3c>
 8005690:	f1ba 0f00 	cmp.w	sl, #0
 8005694:	f040 80cb 	bne.w	800582e <copy_J+0x1d2>
    int pixel_x = x_base + x + offset;
 8005698:	f101 0801 	add.w	r8, r1, #1
 800569c:	44a0      	add	r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800569e:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80056a2:	bf2c      	ite	cs
 80056a4:	2600      	movcs	r6, #0
 80056a6:	2601      	movcc	r6, #1
 80056a8:	9600      	str	r6, [sp, #0]
 80056aa:	b115      	cbz	r5, 80056b2 <copy_J+0x56>
 80056ac:	2e00      	cmp	r6, #0
 80056ae:	f040 80b9 	bne.w	8005824 <copy_J+0x1c8>
    int pixel_x = x_base + x + offset;
 80056b2:	1c8f      	adds	r7, r1, #2
 80056b4:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80056b6:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80056ba:	bf2c      	ite	cs
 80056bc:	2600      	movcs	r6, #0
 80056be:	2601      	movcc	r6, #1
 80056c0:	9601      	str	r6, [sp, #4]
 80056c2:	b115      	cbz	r5, 80056ca <copy_J+0x6e>
 80056c4:	2e00      	cmp	r6, #0
 80056c6:	f040 809a 	bne.w	80057fe <copy_J+0x1a2>
    int pixel_x = x_base + x + offset;
 80056ca:	1cce      	adds	r6, r1, #3
 80056cc:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80056ce:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80056d2:	9603      	str	r6, [sp, #12]
 80056d4:	bf2c      	ite	cs
 80056d6:	2600      	movcs	r6, #0
 80056d8:	2601      	movcc	r6, #1
 80056da:	9602      	str	r6, [sp, #8]
 80056dc:	b115      	cbz	r5, 80056e4 <copy_J+0x88>
 80056de:	2e00      	cmp	r6, #0
 80056e0:	f040 8088 	bne.w	80057f4 <copy_J+0x198>
    int pixel_x = x_base + x + offset;
 80056e4:	f101 0e04 	add.w	lr, r1, #4
 80056e8:	3105      	adds	r1, #5
 80056ea:	44a6      	add	lr, r4
 80056ec:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80056ee:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80056f2:	bf2c      	ite	cs
 80056f4:	2600      	movcs	r6, #0
 80056f6:	2601      	movcc	r6, #1
 80056f8:	b115      	cbz	r5, 8005700 <copy_J+0xa4>
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	f040 8084 	bne.w	8005808 <copy_J+0x1ac>
 8005700:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005704:	d202      	bcs.n	800570c <copy_J+0xb0>
 8005706:	2d00      	cmp	r5, #0
 8005708:	f040 80f9 	bne.w	80058fe <copy_J+0x2a2>
    int pixel_y = y_base + y;
 800570c:	1c51      	adds	r1, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800570e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005712:	d202      	bcs.n	800571a <copy_J+0xbe>
 8005714:	2e00      	cmp	r6, #0
 8005716:	f040 80dc 	bne.w	80058d2 <copy_J+0x276>
    int pixel_y = y_base + y;
 800571a:	1c91      	adds	r1, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800571c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005720:	d202      	bcs.n	8005728 <copy_J+0xcc>
 8005722:	2e00      	cmp	r6, #0
 8005724:	f040 80ce 	bne.w	80058c4 <copy_J+0x268>
    int pixel_y = y_base + y;
 8005728:	1cd1      	adds	r1, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800572a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800572e:	d202      	bcs.n	8005736 <copy_J+0xda>
 8005730:	2e00      	cmp	r6, #0
 8005732:	f040 80c0 	bne.w	80058b6 <copy_J+0x25a>
    int pixel_y = y_base + y;
 8005736:	1d11      	adds	r1, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005738:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800573c:	d202      	bcs.n	8005744 <copy_J+0xe8>
 800573e:	2e00      	cmp	r6, #0
 8005740:	f040 80b2 	bne.w	80058a8 <copy_J+0x24c>
    int pixel_y = y_base + y;
 8005744:	1d51      	adds	r1, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005746:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800574a:	d202      	bcs.n	8005752 <copy_J+0xf6>
 800574c:	2e00      	cmp	r6, #0
 800574e:	f040 80a4 	bne.w	800589a <copy_J+0x23e>
    int pixel_y = y_base + y;
 8005752:	1d91      	adds	r1, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005754:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005758:	d202      	bcs.n	8005760 <copy_J+0x104>
 800575a:	2e00      	cmp	r6, #0
 800575c:	f040 8096 	bne.w	800588c <copy_J+0x230>
    int pixel_y = y_base + y;
 8005760:	1dd1      	adds	r1, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005762:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005766:	d202      	bcs.n	800576e <copy_J+0x112>
 8005768:	2e00      	cmp	r6, #0
 800576a:	f040 8088 	bne.w	800587e <copy_J+0x222>
    int pixel_y = y_base + y;
 800576e:	f102 0408 	add.w	r4, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005772:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8005776:	bf2c      	ite	cs
 8005778:	f04f 0b00 	movcs.w	fp, #0
 800577c:	f04f 0b01 	movcc.w	fp, #1
 8005780:	f1bb 0f00 	cmp.w	fp, #0
 8005784:	d001      	beq.n	800578a <copy_J+0x12e>
 8005786:	2e00      	cmp	r6, #0
 8005788:	d172      	bne.n	8005870 <copy_J+0x214>
    int pixel_y = y_base + y;
 800578a:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800578e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005792:	bf2c      	ite	cs
 8005794:	2500      	movcs	r5, #0
 8005796:	2501      	movcc	r5, #1
 8005798:	b10d      	cbz	r5, 800579e <copy_J+0x142>
 800579a:	2e00      	cmp	r6, #0
 800579c:	d161      	bne.n	8005862 <copy_J+0x206>
 800579e:	f1bb 0f00 	cmp.w	fp, #0
 80057a2:	d002      	beq.n	80057aa <copy_J+0x14e>
 80057a4:	f1ba 0f00 	cmp.w	sl, #0
 80057a8:	d154      	bne.n	8005854 <copy_J+0x1f8>
 80057aa:	b115      	cbz	r5, 80057b2 <copy_J+0x156>
 80057ac:	f1ba 0f00 	cmp.w	sl, #0
 80057b0:	d149      	bne.n	8005846 <copy_J+0x1ea>
    int pixel_y = y_base + y;
 80057b2:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80057b6:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80057ba:	d202      	bcs.n	80057c2 <copy_J+0x166>
 80057bc:	f1ba 0f00 	cmp.w	sl, #0
 80057c0:	d13a      	bne.n	8005838 <copy_J+0x1dc>
 80057c2:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80057c4:	f50c 5ca5 	add.w	ip, ip, #5280	@ 0x14a0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80057c8:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80057cc:	bf2c      	ite	cs
 80057ce:	2200      	movcs	r2, #0
 80057d0:	2201      	movcc	r2, #1
 80057d2:	b162      	cbz	r2, 80057ee <copy_J+0x192>
 80057d4:	9900      	ldr	r1, [sp, #0]
 80057d6:	2900      	cmp	r1, #0
 80057d8:	f040 8082 	bne.w	80058e0 <copy_J+0x284>
 80057dc:	b13a      	cbz	r2, 80057ee <copy_J+0x192>
 80057de:	9901      	ldr	r1, [sp, #4]
 80057e0:	2900      	cmp	r1, #0
 80057e2:	f040 8088 	bne.w	80058f6 <copy_J+0x29a>
 80057e6:	b112      	cbz	r2, 80057ee <copy_J+0x192>
 80057e8:	9a02      	ldr	r2, [sp, #8]
 80057ea:	2a00      	cmp	r2, #0
 80057ec:	d17c      	bne.n	80058e8 <copy_J+0x28c>
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 0; i < 10; i++) fill_pixel(buffer, x, y, 4, i, color);
    for (int i = 8; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 4; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 80057ee:	b005      	add	sp, #20
 80057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80057f4:	9e03      	ldr	r6, [sp, #12]
 80057f6:	4466      	add	r6, ip
 80057f8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80057fc:	e772      	b.n	80056e4 <copy_J+0x88>
 80057fe:	eb0c 0607 	add.w	r6, ip, r7
 8005802:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005806:	e760      	b.n	80056ca <copy_J+0x6e>
 8005808:	eb0c 040e 	add.w	r4, ip, lr
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800580c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005810:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005814:	d377      	bcc.n	8005906 <copy_J+0x2aa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005816:	ebab 0b02 	sub.w	fp, fp, r2
 800581a:	eb0e 1b4b 	add.w	fp, lr, fp, lsl #5
 800581e:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8005822:	e773      	b.n	800570c <copy_J+0xb0>
 8005824:	eb0c 0608 	add.w	r6, ip, r8
 8005828:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800582c:	e741      	b.n	80056b2 <copy_J+0x56>
 800582e:	eb0c 0609 	add.w	r6, ip, r9
 8005832:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005836:	e72f      	b.n	8005698 <copy_J+0x3c>
 8005838:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800583c:	eb09 1941 	add.w	r9, r9, r1, lsl #5
 8005840:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8005844:	e7bd      	b.n	80057c2 <copy_J+0x166>
 8005846:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800584a:	eb09 1141 	add.w	r1, r9, r1, lsl #5
 800584e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005852:	e7ae      	b.n	80057b2 <copy_J+0x156>
 8005854:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8005858:	eb09 1444 	add.w	r4, r9, r4, lsl #5
 800585c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8005860:	e7a3      	b.n	80057aa <copy_J+0x14e>
 8005862:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 8005866:	eb0e 1e46 	add.w	lr, lr, r6, lsl #5
 800586a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 800586e:	e796      	b.n	800579e <copy_J+0x142>
 8005870:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
 8005874:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 8005878:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800587c:	e785      	b.n	800578a <copy_J+0x12e>
 800587e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005882:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 8005886:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800588a:	e770      	b.n	800576e <copy_J+0x112>
 800588c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005890:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 8005894:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005898:	e762      	b.n	8005760 <copy_J+0x104>
 800589a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800589e:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80058a2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80058a6:	e754      	b.n	8005752 <copy_J+0xf6>
 80058a8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80058ac:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80058b0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80058b4:	e746      	b.n	8005744 <copy_J+0xe8>
 80058b6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80058ba:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80058be:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80058c2:	e738      	b.n	8005736 <copy_J+0xda>
 80058c4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80058c8:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80058cc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80058d0:	e72a      	b.n	8005728 <copy_J+0xcc>
 80058d2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80058d6:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 80058da:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80058de:	e71c      	b.n	800571a <copy_J+0xbe>
 80058e0:	44e0      	add	r8, ip
 80058e2:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80058e6:	e779      	b.n	80057dc <copy_J+0x180>
 80058e8:	9a03      	ldr	r2, [sp, #12]
 80058ea:	4494      	add	ip, r2
 80058ec:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
}
 80058f0:	b005      	add	sp, #20
 80058f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80058f6:	4467      	add	r7, ip
 80058f8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80058fc:	e773      	b.n	80057e6 <copy_J+0x18a>
 80058fe:	4461      	add	r1, ip
 8005900:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005904:	e702      	b.n	800570c <copy_J+0xb0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005906:	4461      	add	r1, ip
 8005908:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800590c:	e783      	b.n	8005816 <copy_J+0x1ba>
 800590e:	bf00      	nop
 8005910:	240001b8 	.word	0x240001b8

08005914 <copy_K>:

void copy_K(uint16_t* buffer, int x, int y, uint32_t color)
{
 8005914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8005918:	4cbd      	ldr	r4, [pc, #756]	@ (8005c10 <copy_K+0x2fc>)
{
 800591a:	b087      	sub	sp, #28
    int pixel_x = x_base + x + offset;
 800591c:	6825      	ldr	r5, [r4, #0]
 800591e:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005922:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005926:	bf2c      	ite	cs
 8005928:	2400      	movcs	r4, #0
 800592a:	2401      	movcc	r4, #1
 800592c:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8005930:	d202      	bcs.n	8005938 <copy_K+0x24>
 8005932:	2c00      	cmp	r4, #0
 8005934:	f040 815e 	bne.w	8005bf4 <copy_K+0x2e0>
    int pixel_y = y_base + y;
 8005938:	f102 0e01 	add.w	lr, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800593c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005940:	d202      	bcs.n	8005948 <copy_K+0x34>
 8005942:	2c00      	cmp	r4, #0
 8005944:	f040 814f 	bne.w	8005be6 <copy_K+0x2d2>
    int pixel_y = y_base + y;
 8005948:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800594a:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800594e:	d202      	bcs.n	8005956 <copy_K+0x42>
 8005950:	2c00      	cmp	r4, #0
 8005952:	f040 8141 	bne.w	8005bd8 <copy_K+0x2c4>
    int pixel_y = y_base + y;
 8005956:	f102 0a03 	add.w	sl, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800595a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800595e:	d202      	bcs.n	8005966 <copy_K+0x52>
 8005960:	2c00      	cmp	r4, #0
 8005962:	f040 8132 	bne.w	8005bca <copy_K+0x2b6>
    int pixel_y = y_base + y;
 8005966:	f102 0904 	add.w	r9, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800596a:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 800596e:	d202      	bcs.n	8005976 <copy_K+0x62>
 8005970:	2c00      	cmp	r4, #0
 8005972:	f040 8123 	bne.w	8005bbc <copy_K+0x2a8>
    int pixel_y = y_base + y;
 8005976:	f102 0805 	add.w	r8, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800597a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800597e:	d202      	bcs.n	8005986 <copy_K+0x72>
 8005980:	2c00      	cmp	r4, #0
 8005982:	f040 8114 	bne.w	8005bae <copy_K+0x29a>
    int pixel_y = y_base + y;
 8005986:	f102 0b06 	add.w	fp, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800598a:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 800598e:	d202      	bcs.n	8005996 <copy_K+0x82>
 8005990:	2c00      	cmp	r4, #0
 8005992:	f040 8105 	bne.w	8005ba0 <copy_K+0x28c>
    int pixel_y = y_base + y;
 8005996:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005998:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800599c:	9702      	str	r7, [sp, #8]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800599e:	d202      	bcs.n	80059a6 <copy_K+0x92>
 80059a0:	2c00      	cmp	r4, #0
 80059a2:	f040 80f6 	bne.w	8005b92 <copy_K+0x27e>
    int pixel_y = y_base + y;
 80059a6:	f102 0708 	add.w	r7, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059aa:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80059ae:	9703      	str	r7, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059b0:	d202      	bcs.n	80059b8 <copy_K+0xa4>
 80059b2:	2c00      	cmp	r4, #0
 80059b4:	f040 80e6 	bne.w	8005b84 <copy_K+0x270>
    int pixel_y = y_base + y;
 80059b8:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059bc:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80059c0:	9704      	str	r7, [sp, #16]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059c2:	d202      	bcs.n	80059ca <copy_K+0xb6>
 80059c4:	2c00      	cmp	r4, #0
 80059c6:	f040 80d6 	bne.w	8005b76 <copy_K+0x262>
    int pixel_y = y_base + y;
 80059ca:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059ce:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80059d2:	9701      	str	r7, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059d4:	d202      	bcs.n	80059dc <copy_K+0xc8>
 80059d6:	2c00      	cmp	r4, #0
 80059d8:	f040 80c6 	bne.w	8005b68 <copy_K+0x254>
    int pixel_y = y_base + y;
 80059dc:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059de:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80059e2:	d202      	bcs.n	80059ea <copy_K+0xd6>
 80059e4:	2c00      	cmp	r4, #0
 80059e6:	f040 80b8 	bne.w	8005b5a <copy_K+0x246>
    int pixel_x = x_base + x + offset;
 80059ea:	1c4a      	adds	r2, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059ec:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80059f0:	442a      	add	r2, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80059f2:	d203      	bcs.n	80059fc <copy_K+0xe8>
 80059f4:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 80059f8:	f0c0 80a8 	bcc.w	8005b4c <copy_K+0x238>
    int pixel_x = x_base + x + offset;
 80059fc:	f101 0802 	add.w	r8, r1, #2
 8005a00:	44a8      	add	r8, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005a02:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8005a06:	bf2c      	ite	cs
 8005a08:	2200      	movcs	r2, #0
 8005a0a:	2201      	movcc	r2, #1
 8005a0c:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8005a10:	9205      	str	r2, [sp, #20]
 8005a12:	d202      	bcs.n	8005a1a <copy_K+0x106>
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	f040 80f4 	bne.w	8005c02 <copy_K+0x2ee>
    int pixel_x = x_base + x + offset;
 8005a1a:	f101 0c03 	add.w	ip, r1, #3
 8005a1e:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005a20:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005a24:	bf2c      	ite	cs
 8005a26:	f04f 0900 	movcs.w	r9, #0
 8005a2a:	f04f 0901 	movcc.w	r9, #1
 8005a2e:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8005a32:	d203      	bcs.n	8005a3c <copy_K+0x128>
 8005a34:	f1b9 0f00 	cmp.w	r9, #0
 8005a38:	f040 8081 	bne.w	8005b3e <copy_K+0x22a>
    int pixel_x = x_base + x + offset;
 8005a3c:	1d4a      	adds	r2, r1, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005a3e:	f240 14df 	movw	r4, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 8005a42:	3104      	adds	r1, #4
 8005a44:	442a      	add	r2, r5
 8005a46:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005a48:	42a2      	cmp	r2, r4
 8005a4a:	bf8c      	ite	hi
 8005a4c:	2500      	movhi	r5, #0
 8005a4e:	2501      	movls	r5, #1
 8005a50:	42a1      	cmp	r1, r4
 8005a52:	bf8c      	ite	hi
 8005a54:	2400      	movhi	r4, #0
 8005a56:	2401      	movls	r4, #1
 8005a58:	f1be 0f00 	cmp.w	lr, #0
 8005a5c:	bfb4      	ite	lt
 8005a5e:	f04f 0a00 	movlt.w	sl, #0
 8005a62:	f005 0a01 	andge.w	sl, r5, #1
 8005a66:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8005a6a:	d201      	bcs.n	8005a70 <copy_K+0x15c>
 8005a6c:	2c00      	cmp	r4, #0
 8005a6e:	d154      	bne.n	8005b1a <copy_K+0x206>
 8005a70:	f1ba 0f00 	cmp.w	sl, #0
 8005a74:	d146      	bne.n	8005b04 <copy_K+0x1f0>
 8005a76:	f1bb 0f00 	cmp.w	fp, #0
 8005a7a:	db0a      	blt.n	8005a92 <copy_K+0x17e>
 8005a7c:	9e05      	ldr	r6, [sp, #20]
 8005a7e:	b146      	cbz	r6, 8005a92 <copy_K+0x17e>
 8005a80:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8005a84:	da3b      	bge.n	8005afe <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005a86:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 8005a8a:	eb08 1846 	add.w	r8, r8, r6, lsl #5
 8005a8e:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005a92:	9e02      	ldr	r6, [sp, #8]
 8005a94:	2e00      	cmp	r6, #0
 8005a96:	db0b      	blt.n	8005ab0 <copy_K+0x19c>
 8005a98:	f1b9 0f00 	cmp.w	r9, #0
 8005a9c:	d008      	beq.n	8005ab0 <copy_K+0x19c>
 8005a9e:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8005aa2:	da2c      	bge.n	8005afe <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005aa4:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8005aa8:	eb0c 1c46 	add.w	ip, ip, r6, lsl #5
 8005aac:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005ab0:	9e03      	ldr	r6, [sp, #12]
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	db09      	blt.n	8005aca <copy_K+0x1b6>
 8005ab6:	b144      	cbz	r4, 8005aca <copy_K+0x1b6>
 8005ab8:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8005abc:	da1f      	bge.n	8005afe <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005abe:	ebc6 1406 	rsb	r4, r6, r6, lsl #4
 8005ac2:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 8005ac6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005aca:	9904      	ldr	r1, [sp, #16]
 8005acc:	2900      	cmp	r1, #0
 8005ace:	f2c0 80a1 	blt.w	8005c14 <copy_K+0x300>
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	f000 809e 	beq.w	8005c14 <copy_K+0x300>
 8005ad8:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005adc:	da0f      	bge.n	8005afe <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005ade:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8005ae2:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8005ae6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005aea:	9901      	ldr	r1, [sp, #4]
 8005aec:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8005af0:	da05      	bge.n	8005afe <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005af2:	ebc1 1701 	rsb	r7, r1, r1, lsl #4
 8005af6:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8005afa:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 2, 6, color);
    fill_pixel(buffer, x, y, 3, 7, color);
    fill_pixel(buffer, x, y, 4, 8, color);
    fill_pixel(buffer, x, y, 5, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
}
 8005afe:	b007      	add	sp, #28
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005b04:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005b08:	daf9      	bge.n	8005afe <copy_K+0x1ea>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005b0a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005b0e:	b29e      	uxth	r6, r3
 8005b10:	eb02 1e4e 	add.w	lr, r2, lr, lsl #5
 8005b14:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
 8005b18:	e7ad      	b.n	8005a76 <copy_K+0x162>
 8005b1a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8005b1e:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8005b22:	4637      	mov	r7, r6
 8005b24:	b29e      	uxth	r6, r3
 8005b26:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005b2a:	f1ba 0f00 	cmp.w	sl, #0
 8005b2e:	d0a2      	beq.n	8005a76 <copy_K+0x162>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005b30:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005b34:	eb02 1e4e 	add.w	lr, r2, lr, lsl #5
 8005b38:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
 8005b3c:	e79b      	b.n	8005a76 <copy_K+0x162>
 8005b3e:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8005b42:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 8005b46:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8005b4a:	e777      	b.n	8005a3c <copy_K+0x128>
 8005b4c:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8005b50:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 8005b54:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8005b58:	e750      	b.n	80059fc <copy_K+0xe8>
 8005b5a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005b5e:	eb0c 1c42 	add.w	ip, ip, r2, lsl #5
 8005b62:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005b66:	e740      	b.n	80059ea <copy_K+0xd6>
 8005b68:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005b6c:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005b70:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005b74:	e732      	b.n	80059dc <copy_K+0xc8>
 8005b76:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005b7a:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005b7e:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005b82:	e722      	b.n	80059ca <copy_K+0xb6>
 8005b84:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005b88:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005b8c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005b90:	e712      	b.n	80059b8 <copy_K+0xa4>
 8005b92:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005b96:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005b9a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005b9e:	e702      	b.n	80059a6 <copy_K+0x92>
 8005ba0:	ebcb 170b 	rsb	r7, fp, fp, lsl #4
 8005ba4:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005ba8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005bac:	e6f3      	b.n	8005996 <copy_K+0x82>
 8005bae:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 8005bb2:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005bb6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005bba:	e6e4      	b.n	8005986 <copy_K+0x72>
 8005bbc:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 8005bc0:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005bc4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005bc8:	e6d5      	b.n	8005976 <copy_K+0x62>
 8005bca:	ebca 170a 	rsb	r7, sl, sl, lsl #4
 8005bce:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005bd2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005bd6:	e6c6      	b.n	8005966 <copy_K+0x52>
 8005bd8:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 8005bdc:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005be0:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8005be4:	e6b7      	b.n	8005956 <copy_K+0x42>
 8005be6:	ebce 160e 	rsb	r6, lr, lr, lsl #4
 8005bea:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8005bee:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005bf2:	e6a9      	b.n	8005948 <copy_K+0x34>
 8005bf4:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8005bf8:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8005bfc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8005c00:	e69a      	b.n	8005938 <copy_K+0x24>
 8005c02:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8005c06:	eb08 1949 	add.w	r9, r8, r9, lsl #5
 8005c0a:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8005c0e:	e704      	b.n	8005a1a <copy_K+0x106>
 8005c10:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c14:	9901      	ldr	r1, [sp, #4]
 8005c16:	2900      	cmp	r1, #0
 8005c18:	f6ff af71 	blt.w	8005afe <copy_K+0x1ea>
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	f47f af64 	bne.w	8005aea <copy_K+0x1d6>
}
 8005c22:	b007      	add	sp, #28
 8005c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c28 <copy_L>:

void copy_L(uint16_t* buffer, int x, int y, uint32_t color)
{
 8005c28:	b530      	push	{r4, r5, lr}
    int pixel_x = x_base + x + offset;
 8005c2a:	4c7c      	ldr	r4, [pc, #496]	@ (8005e1c <copy_L+0x1f4>)
 8005c2c:	6825      	ldr	r5, [r4, #0]
 8005c2e:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c32:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005c36:	bf2c      	ite	cs
 8005c38:	2400      	movcs	r4, #0
 8005c3a:	2401      	movcc	r4, #1
 8005c3c:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8005c40:	d202      	bcs.n	8005c48 <copy_L+0x20>
 8005c42:	2c00      	cmp	r4, #0
 8005c44:	f040 80cf 	bne.w	8005de6 <copy_L+0x1be>
    int pixel_y = y_base + y;
 8005c48:	f102 0e01 	add.w	lr, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c4c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005c50:	d202      	bcs.n	8005c58 <copy_L+0x30>
 8005c52:	2c00      	cmp	r4, #0
 8005c54:	f040 80c0 	bne.w	8005dd8 <copy_L+0x1b0>
    int pixel_y = y_base + y;
 8005c58:	f102 0e02 	add.w	lr, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c5c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005c60:	d202      	bcs.n	8005c68 <copy_L+0x40>
 8005c62:	2c00      	cmp	r4, #0
 8005c64:	f040 80b1 	bne.w	8005dca <copy_L+0x1a2>
    int pixel_y = y_base + y;
 8005c68:	f102 0e03 	add.w	lr, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c6c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005c70:	d202      	bcs.n	8005c78 <copy_L+0x50>
 8005c72:	2c00      	cmp	r4, #0
 8005c74:	f040 80a2 	bne.w	8005dbc <copy_L+0x194>
    int pixel_y = y_base + y;
 8005c78:	f102 0e04 	add.w	lr, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c7c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005c80:	d202      	bcs.n	8005c88 <copy_L+0x60>
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	f040 8093 	bne.w	8005dae <copy_L+0x186>
    int pixel_y = y_base + y;
 8005c88:	f102 0e05 	add.w	lr, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c8c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005c90:	d202      	bcs.n	8005c98 <copy_L+0x70>
 8005c92:	2c00      	cmp	r4, #0
 8005c94:	f040 8084 	bne.w	8005da0 <copy_L+0x178>
    int pixel_y = y_base + y;
 8005c98:	f102 0e06 	add.w	lr, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005c9c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005ca0:	d201      	bcs.n	8005ca6 <copy_L+0x7e>
 8005ca2:	2c00      	cmp	r4, #0
 8005ca4:	d175      	bne.n	8005d92 <copy_L+0x16a>
    int pixel_y = y_base + y;
 8005ca6:	f102 0e07 	add.w	lr, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005caa:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005cae:	d201      	bcs.n	8005cb4 <copy_L+0x8c>
 8005cb0:	2c00      	cmp	r4, #0
 8005cb2:	d167      	bne.n	8005d84 <copy_L+0x15c>
    int pixel_y = y_base + y;
 8005cb4:	f102 0e08 	add.w	lr, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005cb8:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005cbc:	d201      	bcs.n	8005cc2 <copy_L+0x9a>
 8005cbe:	2c00      	cmp	r4, #0
 8005cc0:	d159      	bne.n	8005d76 <copy_L+0x14e>
    int pixel_y = y_base + y;
 8005cc2:	f102 0e09 	add.w	lr, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005cc6:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005cca:	d201      	bcs.n	8005cd0 <copy_L+0xa8>
 8005ccc:	2c00      	cmp	r4, #0
 8005cce:	d14b      	bne.n	8005d68 <copy_L+0x140>
    int pixel_y = y_base + y;
 8005cd0:	f102 0e0a 	add.w	lr, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005cd4:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005cd8:	d201      	bcs.n	8005cde <copy_L+0xb6>
 8005cda:	2c00      	cmp	r4, #0
 8005cdc:	d13d      	bne.n	8005d5a <copy_L+0x132>
    int pixel_y = y_base + y;
 8005cde:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005ce0:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8005ce4:	d200      	bcs.n	8005ce8 <copy_L+0xc0>
 8005ce6:	bb8c      	cbnz	r4, 8005d4c <copy_L+0x124>
    int pixel_x = x_base + x + offset;
 8005ce8:	f101 0c01 	add.w	ip, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005cec:	0114      	lsls	r4, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005cee:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8005cf2:	44ac      	add	ip, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005cf4:	eba4 0402 	sub.w	r4, r4, r2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005cf8:	bf2c      	ite	cs
 8005cfa:	2200      	movcs	r2, #0
 8005cfc:	2201      	movcc	r2, #1
 8005cfe:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005d02:	ea4f 1444 	mov.w	r4, r4, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005d06:	d201      	bcs.n	8005d0c <copy_L+0xe4>
 8005d08:	2a00      	cmp	r2, #0
 8005d0a:	d173      	bne.n	8005df4 <copy_L+0x1cc>
    int pixel_x = x_base + x + offset;
 8005d0c:	f101 0c02 	add.w	ip, r1, #2
 8005d10:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005d12:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005d16:	d201      	bcs.n	8005d1c <copy_L+0xf4>
 8005d18:	2a00      	cmp	r2, #0
 8005d1a:	d173      	bne.n	8005e04 <copy_L+0x1dc>
    int pixel_x = x_base + x + offset;
 8005d1c:	f101 0c03 	add.w	ip, r1, #3
 8005d20:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005d22:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005d26:	d201      	bcs.n	8005d2c <copy_L+0x104>
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	d173      	bne.n	8005e14 <copy_L+0x1ec>
    int pixel_x = x_base + x + offset;
 8005d2c:	f101 0c04 	add.w	ip, r1, #4
 8005d30:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005d32:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005d36:	d201      	bcs.n	8005d3c <copy_L+0x114>
 8005d38:	2a00      	cmp	r2, #0
 8005d3a:	d167      	bne.n	8005e0c <copy_L+0x1e4>
    int pixel_x = x_base + x + offset;
 8005d3c:	3105      	adds	r1, #5
 8005d3e:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005d40:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005d44:	d201      	bcs.n	8005d4a <copy_L+0x122>
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d158      	bne.n	8005dfc <copy_L+0x1d4>
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 6; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 8005d4a:	bd30      	pop	{r4, r5, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005d4c:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8005d50:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 8005d54:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005d58:	e7c6      	b.n	8005ce8 <copy_L+0xc0>
 8005d5a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005d5e:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005d62:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005d66:	e7ba      	b.n	8005cde <copy_L+0xb6>
 8005d68:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005d6c:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005d70:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005d74:	e7ac      	b.n	8005cd0 <copy_L+0xa8>
 8005d76:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005d7a:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005d7e:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005d82:	e79e      	b.n	8005cc2 <copy_L+0x9a>
 8005d84:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005d88:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005d8c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005d90:	e790      	b.n	8005cb4 <copy_L+0x8c>
 8005d92:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005d96:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005d9a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005d9e:	e782      	b.n	8005ca6 <copy_L+0x7e>
 8005da0:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005da4:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005da8:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005dac:	e774      	b.n	8005c98 <copy_L+0x70>
 8005dae:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005db2:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005db6:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005dba:	e765      	b.n	8005c88 <copy_L+0x60>
 8005dbc:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005dc0:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005dc4:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005dc8:	e756      	b.n	8005c78 <copy_L+0x50>
 8005dca:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005dce:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005dd2:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005dd6:	e747      	b.n	8005c68 <copy_L+0x40>
 8005dd8:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8005ddc:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005de0:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005de4:	e738      	b.n	8005c58 <copy_L+0x30>
 8005de6:	ebc2 1e02 	rsb	lr, r2, r2, lsl #4
 8005dea:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8005dee:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8005df2:	e729      	b.n	8005c48 <copy_L+0x20>
 8005df4:	44a4      	add	ip, r4
 8005df6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005dfa:	e787      	b.n	8005d0c <copy_L+0xe4>
 8005dfc:	4421      	add	r1, r4
 8005dfe:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8005e02:	bd30      	pop	{r4, r5, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005e04:	44a4      	add	ip, r4
 8005e06:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005e0a:	e787      	b.n	8005d1c <copy_L+0xf4>
 8005e0c:	44a4      	add	ip, r4
 8005e0e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005e12:	e793      	b.n	8005d3c <copy_L+0x114>
 8005e14:	44a4      	add	ip, r4
 8005e16:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8005e1a:	e787      	b.n	8005d2c <copy_L+0x104>
 8005e1c:	240001b8 	.word	0x240001b8

08005e20 <copy_M>:

void copy_M(uint16_t* buffer, int x, int y, uint32_t color)
{
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8005e24:	4c9e      	ldr	r4, [pc, #632]	@ (80060a0 <copy_M+0x280>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e26:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8005e2a:	b093      	sub	sp, #76	@ 0x4c
    int pixel_x = x_base + x + offset;
 8005e2c:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e2e:	bf2c      	ite	cs
 8005e30:	f04f 0900 	movcs.w	r9, #0
 8005e34:	f04f 0901 	movcc.w	r9, #1
    int pixel_x = x_base + x + offset;
 8005e38:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e3c:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005e40:	bf2c      	ite	cs
 8005e42:	2400      	movcs	r4, #0
 8005e44:	2401      	movcc	r4, #1
 8005e46:	b11c      	cbz	r4, 8005e50 <copy_M+0x30>
 8005e48:	f1b9 0f00 	cmp.w	r9, #0
 8005e4c:	f040 8158 	bne.w	8006100 <copy_M+0x2e0>
    int pixel_y = y_base + y;
 8005e50:	1c56      	adds	r6, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e52:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8005e56:	9601      	str	r6, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e58:	bf2c      	ite	cs
 8005e5a:	2700      	movcs	r7, #0
 8005e5c:	2701      	movcc	r7, #1
 8005e5e:	9703      	str	r7, [sp, #12]
 8005e60:	b114      	cbz	r4, 8005e68 <copy_M+0x48>
 8005e62:	2f00      	cmp	r7, #0
 8005e64:	f040 8145 	bne.w	80060f2 <copy_M+0x2d2>
    int pixel_y = y_base + y;
 8005e68:	f102 0e02 	add.w	lr, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e6c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8005e70:	bf2c      	ite	cs
 8005e72:	2700      	movcs	r7, #0
 8005e74:	2701      	movcc	r7, #1
 8005e76:	9704      	str	r7, [sp, #16]
 8005e78:	b114      	cbz	r4, 8005e80 <copy_M+0x60>
 8005e7a:	2f00      	cmp	r7, #0
 8005e7c:	f040 815c 	bne.w	8006138 <copy_M+0x318>
    int pixel_y = y_base + y;
 8005e80:	f102 0b03 	add.w	fp, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e84:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8005e88:	bf2c      	ite	cs
 8005e8a:	2700      	movcs	r7, #0
 8005e8c:	2701      	movcc	r7, #1
 8005e8e:	9705      	str	r7, [sp, #20]
 8005e90:	b114      	cbz	r4, 8005e98 <copy_M+0x78>
 8005e92:	2f00      	cmp	r7, #0
 8005e94:	f040 8149 	bne.w	800612a <copy_M+0x30a>
    int pixel_y = y_base + y;
 8005e98:	1d17      	adds	r7, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005e9a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005e9e:	970d      	str	r7, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005ea0:	bf2c      	ite	cs
 8005ea2:	2600      	movcs	r6, #0
 8005ea4:	2601      	movcc	r6, #1
 8005ea6:	9606      	str	r6, [sp, #24]
 8005ea8:	b114      	cbz	r4, 8005eb0 <copy_M+0x90>
 8005eaa:	2e00      	cmp	r6, #0
 8005eac:	f040 8136 	bne.w	800611c <copy_M+0x2fc>
    int pixel_y = y_base + y;
 8005eb0:	1d57      	adds	r7, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005eb2:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005eb6:	970e      	str	r7, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005eb8:	bf2c      	ite	cs
 8005eba:	2600      	movcs	r6, #0
 8005ebc:	2601      	movcc	r6, #1
 8005ebe:	9607      	str	r6, [sp, #28]
 8005ec0:	b114      	cbz	r4, 8005ec8 <copy_M+0xa8>
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	f040 8123 	bne.w	800610e <copy_M+0x2ee>
    int pixel_y = y_base + y;
 8005ec8:	1d97      	adds	r7, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005eca:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005ece:	970f      	str	r7, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005ed0:	bf2c      	ite	cs
 8005ed2:	2600      	movcs	r6, #0
 8005ed4:	2601      	movcc	r6, #1
 8005ed6:	9608      	str	r6, [sp, #32]
 8005ed8:	b114      	cbz	r4, 8005ee0 <copy_M+0xc0>
 8005eda:	2e00      	cmp	r6, #0
 8005edc:	f040 815d 	bne.w	800619a <copy_M+0x37a>
    int pixel_y = y_base + y;
 8005ee0:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005ee2:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005ee6:	9710      	str	r7, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005ee8:	bf2c      	ite	cs
 8005eea:	2600      	movcs	r6, #0
 8005eec:	2601      	movcc	r6, #1
 8005eee:	9609      	str	r6, [sp, #36]	@ 0x24
 8005ef0:	b114      	cbz	r4, 8005ef8 <copy_M+0xd8>
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	f040 814a 	bne.w	800618c <copy_M+0x36c>
    int pixel_y = y_base + y;
 8005ef8:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005efc:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8005f00:	bf2c      	ite	cs
 8005f02:	2600      	movcs	r6, #0
 8005f04:	2601      	movcc	r6, #1
 8005f06:	960a      	str	r6, [sp, #40]	@ 0x28
 8005f08:	b114      	cbz	r4, 8005f10 <copy_M+0xf0>
 8005f0a:	2e00      	cmp	r6, #0
 8005f0c:	f040 8137 	bne.w	800617e <copy_M+0x35e>
    int pixel_y = y_base + y;
 8005f10:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f14:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8005f18:	9711      	str	r7, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f1a:	bf2c      	ite	cs
 8005f1c:	2600      	movcs	r6, #0
 8005f1e:	2601      	movcc	r6, #1
 8005f20:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005f22:	b114      	cbz	r4, 8005f2a <copy_M+0x10a>
 8005f24:	2e00      	cmp	r6, #0
 8005f26:	f040 8123 	bne.w	8006170 <copy_M+0x350>
    int pixel_y = y_base + y;
 8005f2a:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f2e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8005f32:	bf2c      	ite	cs
 8005f34:	2600      	movcs	r6, #0
 8005f36:	2601      	movcc	r6, #1
 8005f38:	960c      	str	r6, [sp, #48]	@ 0x30
 8005f3a:	b114      	cbz	r4, 8005f42 <copy_M+0x122>
 8005f3c:	2e00      	cmp	r6, #0
 8005f3e:	f040 8110 	bne.w	8006162 <copy_M+0x342>
    int pixel_y = y_base + y;
 8005f42:	f102 0a0b 	add.w	sl, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f46:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8005f4a:	bf2c      	ite	cs
 8005f4c:	2600      	movcs	r6, #0
 8005f4e:	2601      	movcc	r6, #1
 8005f50:	9602      	str	r6, [sp, #8]
 8005f52:	b114      	cbz	r4, 8005f5a <copy_M+0x13a>
 8005f54:	2e00      	cmp	r6, #0
 8005f56:	f040 80fd 	bne.w	8006154 <copy_M+0x334>
    int pixel_x = x_base + x + offset;
 8005f5a:	f101 0c05 	add.w	ip, r1, #5
 8005f5e:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005f60:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8005f64:	bf2c      	ite	cs
 8005f66:	2400      	movcs	r4, #0
 8005f68:	2401      	movcc	r4, #1
 8005f6a:	2c00      	cmp	r4, #0
 8005f6c:	d03b      	beq.n	8005fe6 <copy_M+0x1c6>
 8005f6e:	f1b9 0f00 	cmp.w	r9, #0
 8005f72:	f040 8119 	bne.w	80061a8 <copy_M+0x388>
 8005f76:	2c00      	cmp	r4, #0
 8005f78:	d035      	beq.n	8005fe6 <copy_M+0x1c6>
 8005f7a:	9e03      	ldr	r6, [sp, #12]
 8005f7c:	2e00      	cmp	r6, #0
 8005f7e:	f040 811d 	bne.w	80061bc <copy_M+0x39c>
 8005f82:	2c00      	cmp	r4, #0
 8005f84:	d02f      	beq.n	8005fe6 <copy_M+0x1c6>
 8005f86:	9e04      	ldr	r6, [sp, #16]
 8005f88:	2e00      	cmp	r6, #0
 8005f8a:	f040 811f 	bne.w	80061cc <copy_M+0x3ac>
 8005f8e:	b354      	cbz	r4, 8005fe6 <copy_M+0x1c6>
 8005f90:	9e05      	ldr	r6, [sp, #20]
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	f040 8157 	bne.w	8006246 <copy_M+0x426>
 8005f98:	b32c      	cbz	r4, 8005fe6 <copy_M+0x1c6>
 8005f9a:	9e06      	ldr	r6, [sp, #24]
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	f040 814a 	bne.w	8006236 <copy_M+0x416>
 8005fa2:	b304      	cbz	r4, 8005fe6 <copy_M+0x1c6>
 8005fa4:	9e07      	ldr	r6, [sp, #28]
 8005fa6:	2e00      	cmp	r6, #0
 8005fa8:	f040 813d 	bne.w	8006226 <copy_M+0x406>
 8005fac:	b1dc      	cbz	r4, 8005fe6 <copy_M+0x1c6>
 8005fae:	9e08      	ldr	r6, [sp, #32]
 8005fb0:	2e00      	cmp	r6, #0
 8005fb2:	f040 8130 	bne.w	8006216 <copy_M+0x3f6>
 8005fb6:	b1b4      	cbz	r4, 8005fe6 <copy_M+0x1c6>
 8005fb8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8005fba:	2e00      	cmp	r6, #0
 8005fbc:	f040 8123 	bne.w	8006206 <copy_M+0x3e6>
 8005fc0:	b18c      	cbz	r4, 8005fe6 <copy_M+0x1c6>
 8005fc2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005fc4:	2e00      	cmp	r6, #0
 8005fc6:	f040 8117 	bne.w	80061f8 <copy_M+0x3d8>
 8005fca:	b164      	cbz	r4, 8005fe6 <copy_M+0x1c6>
 8005fcc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005fce:	2e00      	cmp	r6, #0
 8005fd0:	f040 810a 	bne.w	80061e8 <copy_M+0x3c8>
 8005fd4:	b13c      	cbz	r4, 8005fe6 <copy_M+0x1c6>
 8005fd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fd8:	b12e      	cbz	r6, 8005fe6 <copy_M+0x1c6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8005fda:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8005fde:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8005fe2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005fe6:	9e02      	ldr	r6, [sp, #8]
 8005fe8:	b116      	cbz	r6, 8005ff0 <copy_M+0x1d0>
 8005fea:	2c00      	cmp	r4, #0
 8005fec:	f040 80f5 	bne.w	80061da <copy_M+0x3ba>
    int pixel_x = x_base + x + offset;
 8005ff0:	1c4c      	adds	r4, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005ff2:	9e01      	ldr	r6, [sp, #4]
    int pixel_x = x_base + x + offset;
 8005ff4:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8005ff6:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8005ffa:	bf2c      	ite	cs
 8005ffc:	f04f 0900 	movcs.w	r9, #0
 8006000:	f04f 0901 	movcc.w	r9, #1
 8006004:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8006008:	d203      	bcs.n	8006012 <copy_M+0x1f2>
 800600a:	f1b9 0f00 	cmp.w	r9, #0
 800600e:	f040 809a 	bne.w	8006146 <copy_M+0x326>
    int pixel_x = x_base + x + offset;
 8006012:	1c8c      	adds	r4, r1, #2
 8006014:	1ccf      	adds	r7, r1, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006016:	ea6f 0c0e 	mvn.w	ip, lr
    int pixel_x = x_base + x + offset;
 800601a:	442c      	add	r4, r5
 800601c:	442f      	add	r7, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800601e:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8006022:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8006026:	bf2c      	ite	cs
 8006028:	f04f 0800 	movcs.w	r8, #0
 800602c:	f04f 0801 	movcc.w	r8, #1
 8006030:	f1b8 0f00 	cmp.w	r8, #0
 8006034:	d036      	beq.n	80060a4 <copy_M+0x284>
 8006036:	f1bc 0f00 	cmp.w	ip, #0
 800603a:	d033      	beq.n	80060a4 <copy_M+0x284>
 800603c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8006040:	da4d      	bge.n	80060de <copy_M+0x2be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006042:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006046:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800604a:	b29a      	uxth	r2, r3
 800604c:	eb04 144e 	add.w	r4, r4, lr, lsl #5
 8006050:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8006054:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006058:	f000 810a 	beq.w	8006270 <copy_M+0x450>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800605c:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006060:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006064:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006068:	d239      	bcs.n	80060de <copy_M+0x2be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800606a:	44be      	add	lr, r7
 800606c:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
 8006070:	ebcb 130b 	rsb	r3, fp, fp, lsl #4
    int pixel_x = x_base + x + offset;
 8006074:	3104      	adds	r1, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006076:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    int pixel_x = x_base + x + offset;
 800607a:	4429      	add	r1, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800607c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006080:	9b01      	ldr	r3, [sp, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	db09      	blt.n	800609a <copy_M+0x27a>
 8006086:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800608a:	d206      	bcs.n	800609a <copy_M+0x27a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800608c:	9b01      	ldr	r3, [sp, #4]
 800608e:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
 8006092:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8006096:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
    fill_pixel(buffer, x, y, 2, 2, color);
    fill_pixel(buffer, x, y, 2, 3, color);
    fill_pixel(buffer, x, y, 3, 2, color);
    fill_pixel(buffer, x, y, 3, 3, color);
    fill_pixel(buffer, x, y, 4, 1, color);
}
 800609a:	b013      	add	sp, #76	@ 0x4c
 800609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a0:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80060a4:	1cd6      	adds	r6, r2, #3
 80060a6:	bfb4      	ite	lt
 80060a8:	2200      	movlt	r2, #0
 80060aa:	2201      	movge	r2, #1
 80060ac:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80060b0:	bf2c      	ite	cs
 80060b2:	f04f 0a00 	movcs.w	sl, #0
 80060b6:	f04f 0a01 	movcc.w	sl, #1
 80060ba:	b11a      	cbz	r2, 80060c4 <copy_M+0x2a4>
 80060bc:	f1b8 0f00 	cmp.w	r8, #0
 80060c0:	f040 80df 	bne.w	8006282 <copy_M+0x462>
 80060c4:	ea1c 0c0a 	ands.w	ip, ip, sl
 80060c8:	f040 80c4 	bne.w	8006254 <copy_M+0x434>
 80060cc:	ea02 0c0a 	and.w	ip, r2, sl
 80060d0:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 80060d4:	da03      	bge.n	80060de <copy_M+0x2be>
 80060d6:	f1bc 0f00 	cmp.w	ip, #0
 80060da:	f040 80c7 	bne.w	800626c <copy_M+0x44c>
    int pixel_x = x_base + x + offset;
 80060de:	3104      	adds	r1, #4
 80060e0:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80060e2:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80060e6:	d2d8      	bcs.n	800609a <copy_M+0x27a>
 80060e8:	f1b9 0f00 	cmp.w	r9, #0
 80060ec:	d0d5      	beq.n	800609a <copy_M+0x27a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	e7cc      	b.n	800608c <copy_M+0x26c>
 80060f2:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 80060f6:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 80060fa:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80060fe:	e6b3      	b.n	8005e68 <copy_M+0x48>
 8006100:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8006104:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8006108:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800610c:	e6a0      	b.n	8005e50 <copy_M+0x30>
 800610e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006112:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8006116:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800611a:	e6d5      	b.n	8005ec8 <copy_M+0xa8>
 800611c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006120:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8006124:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006128:	e6c2      	b.n	8005eb0 <copy_M+0x90>
 800612a:	ebcb 170b 	rsb	r7, fp, fp, lsl #4
 800612e:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8006132:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006136:	e6af      	b.n	8005e98 <copy_M+0x78>
 8006138:	ebce 170e 	rsb	r7, lr, lr, lsl #4
 800613c:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8006140:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006144:	e69c      	b.n	8005e80 <copy_M+0x60>
 8006146:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 800614a:	eb04 1447 	add.w	r4, r4, r7, lsl #5
 800614e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006152:	e75e      	b.n	8006012 <copy_M+0x1f2>
 8006154:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 8006158:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 800615c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006160:	e6fb      	b.n	8005f5a <copy_M+0x13a>
 8006162:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 8006166:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 800616a:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 800616e:	e6e8      	b.n	8005f42 <copy_M+0x122>
 8006170:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006174:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8006178:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800617c:	e6d5      	b.n	8005f2a <copy_M+0x10a>
 800617e:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 8006182:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8006186:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800618a:	e6c1      	b.n	8005f10 <copy_M+0xf0>
 800618c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006190:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8006194:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006198:	e6ae      	b.n	8005ef8 <copy_M+0xd8>
 800619a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800619e:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 80061a2:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80061a6:	e69b      	b.n	8005ee0 <copy_M+0xc0>
 80061a8:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
 80061ac:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80061b0:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80061b4:	2c00      	cmp	r4, #0
 80061b6:	f47f aee0 	bne.w	8005f7a <copy_M+0x15a>
 80061ba:	e714      	b.n	8005fe6 <copy_M+0x1c6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80061bc:	9e01      	ldr	r6, [sp, #4]
 80061be:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 80061c2:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80061c6:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80061ca:	e6da      	b.n	8005f82 <copy_M+0x162>
 80061cc:	ebce 190e 	rsb	r9, lr, lr, lsl #4
 80061d0:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80061d4:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80061d8:	e6d9      	b.n	8005f8e <copy_M+0x16e>
 80061da:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80061de:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
 80061e2:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80061e6:	e703      	b.n	8005ff0 <copy_M+0x1d0>
 80061e8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80061ea:	ebc6 1806 	rsb	r8, r6, r6, lsl #4
 80061ee:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80061f2:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80061f6:	e6ed      	b.n	8005fd4 <copy_M+0x1b4>
 80061f8:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80061fc:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8006200:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8006204:	e6e1      	b.n	8005fca <copy_M+0x1aa>
 8006206:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006208:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 800620c:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006210:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006214:	e6d4      	b.n	8005fc0 <copy_M+0x1a0>
 8006216:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8006218:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 800621c:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006220:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006224:	e6c7      	b.n	8005fb6 <copy_M+0x196>
 8006226:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8006228:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 800622c:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006230:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006234:	e6ba      	b.n	8005fac <copy_M+0x18c>
 8006236:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8006238:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 800623c:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006240:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006244:	e6ad      	b.n	8005fa2 <copy_M+0x182>
 8006246:	ebcb 190b 	rsb	r9, fp, fp, lsl #4
 800624a:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 800624e:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8006252:	e6a1      	b.n	8005f98 <copy_M+0x178>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006254:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8006258:	f6bf af3a 	bge.w	80060d0 <copy_M+0x2b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800625c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8006260:	4694      	mov	ip, r2
 8006262:	eb07 124e 	add.w	r2, r7, lr, lsl #5
 8006266:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800626a:	e731      	b.n	80060d0 <copy_M+0x2b0>
 800626c:	b29a      	uxth	r2, r3
 800626e:	e6ff      	b.n	8006070 <copy_M+0x250>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006270:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8006274:	f4bf af33 	bcs.w	80060de <copy_M+0x2be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006278:	4a08      	ldr	r2, [pc, #32]	@ (800629c <copy_M+0x47c>)
 800627a:	443a      	add	r2, r7
 800627c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006280:	e72d      	b.n	80060de <copy_M+0x2be>
 8006282:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8006286:	f6bf af2a 	bge.w	80060de <copy_M+0x2be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800628a:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
 800628e:	46d4      	mov	ip, sl
 8006290:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8006294:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006298:	e71a      	b.n	80060d0 <copy_M+0x2b0>
 800629a:	bf00      	nop
 800629c:	0001fc20 	.word	0x0001fc20

080062a0 <copy_N>:

void copy_N(uint16_t* buffer, int x, int y, uint32_t color)
{
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80062a4:	4c78      	ldr	r4, [pc, #480]	@ (8006488 <copy_N+0x1e8>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062a6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 80062aa:	b093      	sub	sp, #76	@ 0x4c
    int pixel_x = x_base + x + offset;
 80062ac:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062ae:	bf2c      	ite	cs
 80062b0:	2400      	movcs	r4, #0
 80062b2:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 80062b4:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062b8:	4626      	mov	r6, r4
 80062ba:	9404      	str	r4, [sp, #16]
 80062bc:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80062c0:	bf2c      	ite	cs
 80062c2:	2400      	movcs	r4, #0
 80062c4:	2401      	movcc	r4, #1
 80062c6:	b114      	cbz	r4, 80062ce <copy_N+0x2e>
 80062c8:	2e00      	cmp	r6, #0
 80062ca:	f040 81a8 	bne.w	800661e <copy_N+0x37e>
    int pixel_y = y_base + y;
 80062ce:	f102 0901 	add.w	r9, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062d2:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 80062d6:	bf2c      	ite	cs
 80062d8:	2600      	movcs	r6, #0
 80062da:	2601      	movcc	r6, #1
 80062dc:	9605      	str	r6, [sp, #20]
 80062de:	b114      	cbz	r4, 80062e6 <copy_N+0x46>
 80062e0:	2e00      	cmp	r6, #0
 80062e2:	f040 8195 	bne.w	8006610 <copy_N+0x370>
    int pixel_y = y_base + y;
 80062e6:	f102 0802 	add.w	r8, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80062ea:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80062ee:	bf2c      	ite	cs
 80062f0:	2600      	movcs	r6, #0
 80062f2:	2601      	movcc	r6, #1
 80062f4:	9606      	str	r6, [sp, #24]
 80062f6:	b114      	cbz	r4, 80062fe <copy_N+0x5e>
 80062f8:	2e00      	cmp	r6, #0
 80062fa:	f040 8182 	bne.w	8006602 <copy_N+0x362>
    int pixel_y = y_base + y;
 80062fe:	f102 0e03 	add.w	lr, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006302:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8006306:	bf2c      	ite	cs
 8006308:	2600      	movcs	r6, #0
 800630a:	2601      	movcc	r6, #1
 800630c:	9607      	str	r6, [sp, #28]
 800630e:	b114      	cbz	r4, 8006316 <copy_N+0x76>
 8006310:	2e00      	cmp	r6, #0
 8006312:	f040 816f 	bne.w	80065f4 <copy_N+0x354>
    int pixel_y = y_base + y;
 8006316:	f102 0b04 	add.w	fp, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800631a:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 800631e:	bf2c      	ite	cs
 8006320:	2600      	movcs	r6, #0
 8006322:	2601      	movcc	r6, #1
 8006324:	9608      	str	r6, [sp, #32]
 8006326:	b114      	cbz	r4, 800632e <copy_N+0x8e>
 8006328:	2e00      	cmp	r6, #0
 800632a:	f040 815c 	bne.w	80065e6 <copy_N+0x346>
    int pixel_y = y_base + y;
 800632e:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006330:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006334:	960f      	str	r6, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006336:	bf2c      	ite	cs
 8006338:	2700      	movcs	r7, #0
 800633a:	2701      	movcc	r7, #1
 800633c:	9709      	str	r7, [sp, #36]	@ 0x24
 800633e:	b114      	cbz	r4, 8006346 <copy_N+0xa6>
 8006340:	2f00      	cmp	r7, #0
 8006342:	f040 8149 	bne.w	80065d8 <copy_N+0x338>
    int pixel_y = y_base + y;
 8006346:	1d96      	adds	r6, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006348:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800634c:	9603      	str	r6, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800634e:	bf2c      	ite	cs
 8006350:	2700      	movcs	r7, #0
 8006352:	2701      	movcc	r7, #1
 8006354:	970a      	str	r7, [sp, #40]	@ 0x28
 8006356:	b114      	cbz	r4, 800635e <copy_N+0xbe>
 8006358:	2f00      	cmp	r7, #0
 800635a:	f040 8136 	bne.w	80065ca <copy_N+0x32a>
    int pixel_y = y_base + y;
 800635e:	1dd6      	adds	r6, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006360:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006364:	9601      	str	r6, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006366:	bf2c      	ite	cs
 8006368:	2700      	movcs	r7, #0
 800636a:	2701      	movcc	r7, #1
 800636c:	970b      	str	r7, [sp, #44]	@ 0x2c
 800636e:	b114      	cbz	r4, 8006376 <copy_N+0xd6>
 8006370:	2f00      	cmp	r7, #0
 8006372:	f040 8123 	bne.w	80065bc <copy_N+0x31c>
    int pixel_y = y_base + y;
 8006376:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800637a:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800637e:	9602      	str	r6, [sp, #8]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006380:	bf2c      	ite	cs
 8006382:	2700      	movcs	r7, #0
 8006384:	2701      	movcc	r7, #1
 8006386:	970c      	str	r7, [sp, #48]	@ 0x30
 8006388:	b114      	cbz	r4, 8006390 <copy_N+0xf0>
 800638a:	2f00      	cmp	r7, #0
 800638c:	f040 810f 	bne.w	80065ae <copy_N+0x30e>
    int pixel_y = y_base + y;
 8006390:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006394:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8006398:	9710      	str	r7, [sp, #64]	@ 0x40
 800639a:	bf2c      	ite	cs
 800639c:	2600      	movcs	r6, #0
 800639e:	2601      	movcc	r6, #1
 80063a0:	960d      	str	r6, [sp, #52]	@ 0x34
 80063a2:	b114      	cbz	r4, 80063aa <copy_N+0x10a>
 80063a4:	2e00      	cmp	r6, #0
 80063a6:	f040 80fa 	bne.w	800659e <copy_N+0x2fe>
    int pixel_y = y_base + y;
 80063aa:	f102 070a 	add.w	r7, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80063ae:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80063b2:	9711      	str	r7, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80063b4:	bf2c      	ite	cs
 80063b6:	2600      	movcs	r6, #0
 80063b8:	2601      	movcc	r6, #1
 80063ba:	960e      	str	r6, [sp, #56]	@ 0x38
 80063bc:	b114      	cbz	r4, 80063c4 <copy_N+0x124>
 80063be:	2e00      	cmp	r6, #0
 80063c0:	f040 80e6 	bne.w	8006590 <copy_N+0x2f0>
    int pixel_y = y_base + y;
 80063c4:	f102 0a0b 	add.w	sl, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80063c8:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80063cc:	bf2c      	ite	cs
 80063ce:	2600      	movcs	r6, #0
 80063d0:	2601      	movcc	r6, #1
 80063d2:	4637      	mov	r7, r6
 80063d4:	b114      	cbz	r4, 80063dc <copy_N+0x13c>
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	f040 80d3 	bne.w	8006582 <copy_N+0x2e2>
    int pixel_x = x_base + x + offset;
 80063dc:	f101 0c05 	add.w	ip, r1, #5
 80063e0:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80063e2:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80063e6:	bf2c      	ite	cs
 80063e8:	2400      	movcs	r4, #0
 80063ea:	2401      	movcc	r4, #1
 80063ec:	2c00      	cmp	r4, #0
 80063ee:	d03c      	beq.n	800646a <copy_N+0x1ca>
 80063f0:	9e04      	ldr	r6, [sp, #16]
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	f040 811a 	bne.w	800662c <copy_N+0x38c>
 80063f8:	2c00      	cmp	r4, #0
 80063fa:	d036      	beq.n	800646a <copy_N+0x1ca>
 80063fc:	9e05      	ldr	r6, [sp, #20]
 80063fe:	2e00      	cmp	r6, #0
 8006400:	f040 8126 	bne.w	8006650 <copy_N+0x3b0>
 8006404:	2c00      	cmp	r4, #0
 8006406:	d030      	beq.n	800646a <copy_N+0x1ca>
 8006408:	9e06      	ldr	r6, [sp, #24]
 800640a:	2e00      	cmp	r6, #0
 800640c:	f040 8155 	bne.w	80066ba <copy_N+0x41a>
 8006410:	b35c      	cbz	r4, 800646a <copy_N+0x1ca>
 8006412:	9e07      	ldr	r6, [sp, #28]
 8006414:	2e00      	cmp	r6, #0
 8006416:	f040 8149 	bne.w	80066ac <copy_N+0x40c>
 800641a:	b334      	cbz	r4, 800646a <copy_N+0x1ca>
 800641c:	9e08      	ldr	r6, [sp, #32]
 800641e:	2e00      	cmp	r6, #0
 8006420:	f040 813d 	bne.w	800669e <copy_N+0x3fe>
 8006424:	b30c      	cbz	r4, 800646a <copy_N+0x1ca>
 8006426:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006428:	2e00      	cmp	r6, #0
 800642a:	f040 8130 	bne.w	800668e <copy_N+0x3ee>
 800642e:	b1e4      	cbz	r4, 800646a <copy_N+0x1ca>
 8006430:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006432:	2e00      	cmp	r6, #0
 8006434:	f040 8123 	bne.w	800667e <copy_N+0x3de>
 8006438:	b1bc      	cbz	r4, 800646a <copy_N+0x1ca>
 800643a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800643c:	2e00      	cmp	r6, #0
 800643e:	f040 8116 	bne.w	800666e <copy_N+0x3ce>
 8006442:	b194      	cbz	r4, 800646a <copy_N+0x1ca>
 8006444:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006446:	2e00      	cmp	r6, #0
 8006448:	f040 8109 	bne.w	800665e <copy_N+0x3be>
 800644c:	b16c      	cbz	r4, 800646a <copy_N+0x1ca>
 800644e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8006450:	2e00      	cmp	r6, #0
 8006452:	f040 80f5 	bne.w	8006640 <copy_N+0x3a0>
 8006456:	b144      	cbz	r4, 800646a <copy_N+0x1ca>
 8006458:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800645a:	b136      	cbz	r6, 800646a <copy_N+0x1ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800645c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800645e:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006462:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006466:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800646a:	b117      	cbz	r7, 8006472 <copy_N+0x1d2>
 800646c:	2c00      	cmp	r4, #0
 800646e:	f040 812b 	bne.w	80066c8 <copy_N+0x428>
    int pixel_x = x_base + x + offset;
 8006472:	1c4c      	adds	r4, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006474:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8006478:	eb04 0c05 	add.w	ip, r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800647c:	d206      	bcs.n	800648c <copy_N+0x1ec>
 800647e:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8006482:	d377      	bcc.n	8006574 <copy_N+0x2d4>
 8006484:	e002      	b.n	800648c <copy_N+0x1ec>
 8006486:	bf00      	nop
 8006488:	240001b8 	.word	0x240001b8
    int pixel_x = x_base + x + offset;
 800648c:	1c8c      	adds	r4, r1, #2
 800648e:	f101 0c03 	add.w	ip, r1, #3
 8006492:	442c      	add	r4, r5
 8006494:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006496:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 800649a:	bf2c      	ite	cs
 800649c:	f04f 0900 	movcs.w	r9, #0
 80064a0:	f04f 0901 	movcc.w	r9, #1
 80064a4:	f1be 0f00 	cmp.w	lr, #0
 80064a8:	db57      	blt.n	800655a <copy_N+0x2ba>
 80064aa:	f1b9 0f00 	cmp.w	r9, #0
 80064ae:	d054      	beq.n	800655a <copy_N+0x2ba>
 80064b0:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80064b4:	da58      	bge.n	8006568 <copy_N+0x2c8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80064b6:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 80064ba:	eb04 1e4e 	add.w	lr, r4, lr, lsl #5
 80064be:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80064c2:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 80064c6:	da4f      	bge.n	8006568 <copy_N+0x2c8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80064c8:	ebcb 1e0b 	rsb	lr, fp, fp, lsl #4
 80064cc:	eb04 144e 	add.w	r4, r4, lr, lsl #5
 80064d0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80064d4:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80064d8:	bf2c      	ite	cs
 80064da:	2400      	movcs	r4, #0
 80064dc:	2401      	movcc	r4, #1
 80064de:	1d56      	adds	r6, r2, #5
 80064e0:	f2c0 80f9 	blt.w	80066d6 <copy_N+0x436>
 80064e4:	2c00      	cmp	r4, #0
 80064e6:	f000 80f6 	beq.w	80066d6 <copy_N+0x436>
 80064ea:	f5b2 7f85 	cmp.w	r2, #266	@ 0x10a
 80064ee:	dc31      	bgt.n	8006554 <copy_N+0x2b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80064f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80064f2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80064f6:	eb0c 1242 	add.w	r2, ip, r2, lsl #5
 80064fa:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80064fe:	9a03      	ldr	r2, [sp, #12]
 8006500:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8006504:	da05      	bge.n	8006512 <copy_N+0x272>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006506:	ebc2 1802 	rsb	r8, r2, r2, lsl #4
 800650a:	eb0c 1c48 	add.w	ip, ip, r8, lsl #5
 800650e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8006512:	3104      	adds	r1, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006514:	9c01      	ldr	r4, [sp, #4]
    int pixel_x = x_base + x + offset;
 8006516:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006518:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800651c:	bf2c      	ite	cs
 800651e:	2200      	movcs	r2, #0
 8006520:	2201      	movcc	r2, #1
 8006522:	2c00      	cmp	r4, #0
 8006524:	f2c0 80df 	blt.w	80066e6 <copy_N+0x446>
 8006528:	2a00      	cmp	r2, #0
 800652a:	f000 80dc 	beq.w	80066e6 <copy_N+0x446>
 800652e:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8006532:	da0f      	bge.n	8006554 <copy_N+0x2b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006534:	ebc4 1604 	rsb	r6, r4, r4, lsl #4
 8006538:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 800653c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006540:	9a02      	ldr	r2, [sp, #8]
 8006542:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8006546:	da05      	bge.n	8006554 <copy_N+0x2b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006548:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 800654c:	eb01 1147 	add.w	r1, r1, r7, lsl #5
 8006550:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    fill_pixel(buffer, x, y, 2, 4, color);
    fill_pixel(buffer, x, y, 3, 5, color);
    fill_pixel(buffer, x, y, 3, 6, color);
    fill_pixel(buffer, x, y, 4, 7, color);
    fill_pixel(buffer, x, y, 4, 8, color);
}
 8006554:	b013      	add	sp, #76	@ 0x4c
 8006556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800655a:	f1bb 0f00 	cmp.w	fp, #0
 800655e:	dbb9      	blt.n	80064d4 <copy_N+0x234>
 8006560:	f1b9 0f00 	cmp.w	r9, #0
 8006564:	d0b6      	beq.n	80064d4 <copy_N+0x234>
 8006566:	e7ac      	b.n	80064c2 <copy_N+0x222>
 8006568:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800656c:	d2d1      	bcs.n	8006512 <copy_N+0x272>
}
 800656e:	b013      	add	sp, #76	@ 0x4c
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006574:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 8006578:	eb0c 1444 	add.w	r4, ip, r4, lsl #5
 800657c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006580:	e784      	b.n	800648c <copy_N+0x1ec>
 8006582:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 8006586:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 800658a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800658e:	e725      	b.n	80063dc <copy_N+0x13c>
 8006590:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 8006594:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 8006598:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 800659c:	e712      	b.n	80063c4 <copy_N+0x124>
 800659e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80065a0:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 80065a4:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 80065a8:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80065ac:	e6fd      	b.n	80063aa <copy_N+0x10a>
 80065ae:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 80065b2:	eb0c 1a4a 	add.w	sl, ip, sl, lsl #5
 80065b6:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80065ba:	e6e9      	b.n	8006390 <copy_N+0xf0>
 80065bc:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 80065c0:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 80065c4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80065c8:	e6d5      	b.n	8006376 <copy_N+0xd6>
 80065ca:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80065ce:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 80065d2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80065d6:	e6c2      	b.n	800635e <copy_N+0xbe>
 80065d8:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80065dc:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 80065e0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80065e4:	e6af      	b.n	8006346 <copy_N+0xa6>
 80065e6:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 80065ea:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 80065ee:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80065f2:	e69c      	b.n	800632e <copy_N+0x8e>
 80065f4:	ebce 160e 	rsb	r6, lr, lr, lsl #4
 80065f8:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 80065fc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006600:	e689      	b.n	8006316 <copy_N+0x76>
 8006602:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8006606:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800660a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800660e:	e676      	b.n	80062fe <copy_N+0x5e>
 8006610:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 8006614:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8006618:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800661c:	e663      	b.n	80062e6 <copy_N+0x46>
 800661e:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8006622:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8006626:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800662a:	e650      	b.n	80062ce <copy_N+0x2e>
 800662c:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8006630:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8006634:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006638:	2c00      	cmp	r4, #0
 800663a:	f47f aedf 	bne.w	80063fc <copy_N+0x15c>
 800663e:	e714      	b.n	800646a <copy_N+0x1ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006640:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006642:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006646:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 800664a:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800664e:	e702      	b.n	8006456 <copy_N+0x1b6>
 8006650:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8006654:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006658:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800665c:	e6d2      	b.n	8006404 <copy_N+0x164>
 800665e:	9e02      	ldr	r6, [sp, #8]
 8006660:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006664:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006668:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800666c:	e6ee      	b.n	800644c <copy_N+0x1ac>
 800666e:	9e01      	ldr	r6, [sp, #4]
 8006670:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006674:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006678:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800667c:	e6e1      	b.n	8006442 <copy_N+0x1a2>
 800667e:	9e03      	ldr	r6, [sp, #12]
 8006680:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006684:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006688:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800668c:	e6d4      	b.n	8006438 <copy_N+0x198>
 800668e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8006690:	ebc6 1906 	rsb	r9, r6, r6, lsl #4
 8006694:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8006698:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800669c:	e6c7      	b.n	800642e <copy_N+0x18e>
 800669e:	ebcb 190b 	rsb	r9, fp, fp, lsl #4
 80066a2:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80066a6:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80066aa:	e6bb      	b.n	8006424 <copy_N+0x184>
 80066ac:	ebce 190e 	rsb	r9, lr, lr, lsl #4
 80066b0:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80066b4:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80066b8:	e6af      	b.n	800641a <copy_N+0x17a>
 80066ba:	ebc8 1908 	rsb	r9, r8, r8, lsl #4
 80066be:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80066c2:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 80066c6:	e6a3      	b.n	8006410 <copy_N+0x170>
 80066c8:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80066cc:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
 80066d0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80066d4:	e6cd      	b.n	8006472 <copy_N+0x1d2>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80066d6:	9a03      	ldr	r2, [sp, #12]
 80066d8:	2a00      	cmp	r2, #0
 80066da:	f6ff af1a 	blt.w	8006512 <copy_N+0x272>
 80066de:	2c00      	cmp	r4, #0
 80066e0:	f43f af17 	beq.w	8006512 <copy_N+0x272>
 80066e4:	e70b      	b.n	80064fe <copy_N+0x25e>
 80066e6:	9c02      	ldr	r4, [sp, #8]
 80066e8:	2c00      	cmp	r4, #0
 80066ea:	f6ff af33 	blt.w	8006554 <copy_N+0x2b4>
 80066ee:	2a00      	cmp	r2, #0
 80066f0:	f47f af26 	bne.w	8006540 <copy_N+0x2a0>
}
 80066f4:	b013      	add	sp, #76	@ 0x4c
 80066f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fa:	bf00      	nop

080066fc <copy_O>:

void copy_O(uint16_t* buffer, int x, int y, uint32_t color)
{
 80066fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8006700:	4c93      	ldr	r4, [pc, #588]	@ (8006950 <copy_O+0x254>)
 8006702:	f101 0e01 	add.w	lr, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006706:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800670a:	b097      	sub	sp, #92	@ 0x5c
    int pixel_x = x_base + x + offset;
 800670c:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800670e:	bf2c      	ite	cs
 8006710:	2400      	movcs	r4, #0
 8006712:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 8006714:	44ae      	add	lr, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006716:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800671a:	bf2c      	ite	cs
 800671c:	2600      	movcs	r6, #0
 800671e:	2601      	movcc	r6, #1
 8006720:	9603      	str	r6, [sp, #12]
 8006722:	b114      	cbz	r4, 800672a <copy_O+0x2e>
 8006724:	2e00      	cmp	r6, #0
 8006726:	f040 811c 	bne.w	8006962 <copy_O+0x266>
    int pixel_x = x_base + x + offset;
 800672a:	f101 0c02 	add.w	ip, r1, #2
 800672e:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006730:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8006734:	bf2c      	ite	cs
 8006736:	2600      	movcs	r6, #0
 8006738:	2601      	movcc	r6, #1
 800673a:	9604      	str	r6, [sp, #16]
 800673c:	b114      	cbz	r4, 8006744 <copy_O+0x48>
 800673e:	2e00      	cmp	r6, #0
 8006740:	f040 8108 	bne.w	8006954 <copy_O+0x258>
    int pixel_x = x_base + x + offset;
 8006744:	1cce      	adds	r6, r1, #3
 8006746:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006748:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800674c:	970e      	str	r7, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800674e:	bf2c      	ite	cs
 8006750:	2600      	movcs	r6, #0
 8006752:	2601      	movcc	r6, #1
 8006754:	9605      	str	r6, [sp, #20]
 8006756:	b114      	cbz	r4, 800675e <copy_O+0x62>
 8006758:	2e00      	cmp	r6, #0
 800675a:	f040 80f2 	bne.w	8006942 <copy_O+0x246>
    int pixel_x = x_base + x + offset;
 800675e:	1d0e      	adds	r6, r1, #4
 8006760:	eb06 0805 	add.w	r8, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006764:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8006768:	bf2c      	ite	cs
 800676a:	f04f 0900 	movcs.w	r9, #0
 800676e:	f04f 0901 	movcc.w	r9, #1
 8006772:	f1b9 0f00 	cmp.w	r9, #0
 8006776:	d002      	beq.n	800677e <copy_O+0x82>
 8006778:	2c00      	cmp	r4, #0
 800677a:	f040 80db 	bne.w	8006934 <copy_O+0x238>
    int pixel_x = x_base + x + offset;
 800677e:	194e      	adds	r6, r1, r5
    int pixel_y = y_base + y;
 8006780:	f102 0b01 	add.w	fp, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006784:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8006788:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800678a:	bf2c      	ite	cs
 800678c:	2400      	movcs	r4, #0
 800678e:	2401      	movcc	r4, #1
 8006790:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8006794:	bf2c      	ite	cs
 8006796:	2700      	movcs	r7, #0
 8006798:	2701      	movcc	r7, #1
 800679a:	9702      	str	r7, [sp, #8]
 800679c:	b114      	cbz	r4, 80067a4 <copy_O+0xa8>
 800679e:	2f00      	cmp	r7, #0
 80067a0:	f040 80e6 	bne.w	8006970 <copy_O+0x274>
    int pixel_y = y_base + y;
 80067a4:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067a6:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80067aa:	970f      	str	r7, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067ac:	bf2c      	ite	cs
 80067ae:	2600      	movcs	r6, #0
 80067b0:	2601      	movcc	r6, #1
 80067b2:	9606      	str	r6, [sp, #24]
 80067b4:	b114      	cbz	r4, 80067bc <copy_O+0xc0>
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	f040 80f7 	bne.w	80069aa <copy_O+0x2ae>
    int pixel_y = y_base + y;
 80067bc:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067be:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80067c2:	9710      	str	r7, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067c4:	bf2c      	ite	cs
 80067c6:	2600      	movcs	r6, #0
 80067c8:	2601      	movcc	r6, #1
 80067ca:	9607      	str	r6, [sp, #28]
 80067cc:	b114      	cbz	r4, 80067d4 <copy_O+0xd8>
 80067ce:	2e00      	cmp	r6, #0
 80067d0:	f040 814c 	bne.w	8006a6c <copy_O+0x370>
    int pixel_y = y_base + y;
 80067d4:	1d17      	adds	r7, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067d6:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80067da:	9711      	str	r7, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067dc:	bf2c      	ite	cs
 80067de:	2600      	movcs	r6, #0
 80067e0:	2601      	movcc	r6, #1
 80067e2:	9608      	str	r6, [sp, #32]
 80067e4:	b114      	cbz	r4, 80067ec <copy_O+0xf0>
 80067e6:	2e00      	cmp	r6, #0
 80067e8:	f040 8138 	bne.w	8006a5c <copy_O+0x360>
    int pixel_y = y_base + y;
 80067ec:	1d57      	adds	r7, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067ee:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80067f2:	9712      	str	r7, [sp, #72]	@ 0x48
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80067f4:	bf2c      	ite	cs
 80067f6:	2600      	movcs	r6, #0
 80067f8:	2601      	movcc	r6, #1
 80067fa:	9609      	str	r6, [sp, #36]	@ 0x24
 80067fc:	b114      	cbz	r4, 8006804 <copy_O+0x108>
 80067fe:	2e00      	cmp	r6, #0
 8006800:	f040 8154 	bne.w	8006aac <copy_O+0x3b0>
    int pixel_y = y_base + y;
 8006804:	1d97      	adds	r7, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006806:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800680a:	9713      	str	r7, [sp, #76]	@ 0x4c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800680c:	bf2c      	ite	cs
 800680e:	2600      	movcs	r6, #0
 8006810:	2601      	movcc	r6, #1
 8006812:	960a      	str	r6, [sp, #40]	@ 0x28
 8006814:	b114      	cbz	r4, 800681c <copy_O+0x120>
 8006816:	2e00      	cmp	r6, #0
 8006818:	f040 8140 	bne.w	8006a9c <copy_O+0x3a0>
    int pixel_y = y_base + y;
 800681c:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800681e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8006822:	9714      	str	r7, [sp, #80]	@ 0x50
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006824:	bf2c      	ite	cs
 8006826:	2600      	movcs	r6, #0
 8006828:	2601      	movcc	r6, #1
 800682a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800682c:	b114      	cbz	r4, 8006834 <copy_O+0x138>
 800682e:	2e00      	cmp	r6, #0
 8006830:	f040 812c 	bne.w	8006a8c <copy_O+0x390>
    int pixel_y = y_base + y;
 8006834:	f102 0708 	add.w	r7, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006838:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800683c:	9715      	str	r7, [sp, #84]	@ 0x54
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800683e:	bf2c      	ite	cs
 8006840:	2600      	movcs	r6, #0
 8006842:	2601      	movcc	r6, #1
 8006844:	960c      	str	r6, [sp, #48]	@ 0x30
 8006846:	b114      	cbz	r4, 800684e <copy_O+0x152>
 8006848:	2e00      	cmp	r6, #0
 800684a:	f040 8117 	bne.w	8006a7c <copy_O+0x380>
    int pixel_y = y_base + y;
 800684e:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006852:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8006856:	bf2c      	ite	cs
 8006858:	2600      	movcs	r6, #0
 800685a:	2601      	movcc	r6, #1
 800685c:	960d      	str	r6, [sp, #52]	@ 0x34
 800685e:	b114      	cbz	r4, 8006866 <copy_O+0x16a>
 8006860:	2e00      	cmp	r6, #0
 8006862:	f040 80b2 	bne.w	80069ca <copy_O+0x2ce>
    int pixel_y = y_base + y;
 8006866:	f102 0a0a 	add.w	sl, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800686a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800686e:	bf2c      	ite	cs
 8006870:	2600      	movcs	r6, #0
 8006872:	2601      	movcc	r6, #1
 8006874:	9601      	str	r6, [sp, #4]
 8006876:	b116      	cbz	r6, 800687e <copy_O+0x182>
 8006878:	2c00      	cmp	r4, #0
 800687a:	f040 809e 	bne.w	80069ba <copy_O+0x2be>
    int pixel_y = y_base + y;
 800687e:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006880:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006884:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006888:	bf2c      	ite	cs
 800688a:	2200      	movcs	r2, #0
 800688c:	2201      	movcc	r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800688e:	0164      	lsls	r4, r4, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006890:	b16a      	cbz	r2, 80068ae <copy_O+0x1b2>
 8006892:	9e03      	ldr	r6, [sp, #12]
 8006894:	2e00      	cmp	r6, #0
 8006896:	d176      	bne.n	8006986 <copy_O+0x28a>
 8006898:	b14a      	cbz	r2, 80068ae <copy_O+0x1b2>
 800689a:	9e04      	ldr	r6, [sp, #16]
 800689c:	2e00      	cmp	r6, #0
 800689e:	d16e      	bne.n	800697e <copy_O+0x282>
 80068a0:	b12a      	cbz	r2, 80068ae <copy_O+0x1b2>
 80068a2:	9e05      	ldr	r6, [sp, #20]
 80068a4:	b11e      	cbz	r6, 80068ae <copy_O+0x1b2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80068a6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80068a8:	4426      	add	r6, r4
 80068aa:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80068ae:	f1b9 0f00 	cmp.w	r9, #0
 80068b2:	d001      	beq.n	80068b8 <copy_O+0x1bc>
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	d16c      	bne.n	8006992 <copy_O+0x296>
    int pixel_x = x_base + x + offset;
 80068b8:	3105      	adds	r1, #5
 80068ba:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80068bc:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80068c0:	bf2c      	ite	cs
 80068c2:	2200      	movcs	r2, #0
 80068c4:	2201      	movcc	r2, #1
 80068c6:	2a00      	cmp	r2, #0
 80068c8:	d02d      	beq.n	8006926 <copy_O+0x22a>
 80068ca:	9c02      	ldr	r4, [sp, #8]
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	d165      	bne.n	800699c <copy_O+0x2a0>
 80068d0:	b34a      	cbz	r2, 8006926 <copy_O+0x22a>
 80068d2:	9c06      	ldr	r4, [sp, #24]
 80068d4:	2c00      	cmp	r4, #0
 80068d6:	f040 8080 	bne.w	80069da <copy_O+0x2de>
 80068da:	b322      	cbz	r2, 8006926 <copy_O+0x22a>
 80068dc:	9c07      	ldr	r4, [sp, #28]
 80068de:	2c00      	cmp	r4, #0
 80068e0:	f040 80a4 	bne.w	8006a2c <copy_O+0x330>
 80068e4:	b1fa      	cbz	r2, 8006926 <copy_O+0x22a>
 80068e6:	9c08      	ldr	r4, [sp, #32]
 80068e8:	2c00      	cmp	r4, #0
 80068ea:	f040 8097 	bne.w	8006a1c <copy_O+0x320>
 80068ee:	b1d2      	cbz	r2, 8006926 <copy_O+0x22a>
 80068f0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80068f2:	2c00      	cmp	r4, #0
 80068f4:	f040 808a 	bne.w	8006a0c <copy_O+0x310>
 80068f8:	b1aa      	cbz	r2, 8006926 <copy_O+0x22a>
 80068fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068fc:	2c00      	cmp	r4, #0
 80068fe:	d17d      	bne.n	80069fc <copy_O+0x300>
 8006900:	b18a      	cbz	r2, 8006926 <copy_O+0x22a>
 8006902:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006904:	2c00      	cmp	r4, #0
 8006906:	f040 80a1 	bne.w	8006a4c <copy_O+0x350>
 800690a:	b162      	cbz	r2, 8006926 <copy_O+0x22a>
 800690c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800690e:	2c00      	cmp	r4, #0
 8006910:	f040 8094 	bne.w	8006a3c <copy_O+0x340>
 8006914:	b13a      	cbz	r2, 8006926 <copy_O+0x22a>
 8006916:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8006918:	b12c      	cbz	r4, 8006926 <copy_O+0x22a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800691a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800691e:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 8006922:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006926:	9c01      	ldr	r4, [sp, #4]
 8006928:	b10c      	cbz	r4, 800692e <copy_O+0x232>
 800692a:	2a00      	cmp	r2, #0
 800692c:	d15d      	bne.n	80069ea <copy_O+0x2ee>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
}
 800692e:	b017      	add	sp, #92	@ 0x5c
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006934:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8006938:	eb08 1444 	add.w	r4, r8, r4, lsl #5
 800693c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006940:	e71d      	b.n	800677e <copy_O+0x82>
 8006942:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8006946:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800694a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800694e:	e706      	b.n	800675e <copy_O+0x62>
 8006950:	240001b8 	.word	0x240001b8
 8006954:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8006958:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800695c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006960:	e6f0      	b.n	8006744 <copy_O+0x48>
 8006962:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8006966:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 800696a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800696e:	e6dc      	b.n	800672a <copy_O+0x2e>
 8006970:	ebcb 170b 	rsb	r7, fp, fp, lsl #4
 8006974:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8006978:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800697c:	e712      	b.n	80067a4 <copy_O+0xa8>
 800697e:	44a4      	add	ip, r4
 8006980:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006984:	e78c      	b.n	80068a0 <copy_O+0x1a4>
 8006986:	44a6      	add	lr, r4
 8006988:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800698c:	2a00      	cmp	r2, #0
 800698e:	d184      	bne.n	800689a <copy_O+0x19e>
 8006990:	e78d      	b.n	80068ae <copy_O+0x1b2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006992:	eb08 0204 	add.w	r2, r8, r4
 8006996:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800699a:	e78d      	b.n	80068b8 <copy_O+0x1bc>
 800699c:	ebcb 140b 	rsb	r4, fp, fp, lsl #4
 80069a0:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 80069a4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80069a8:	e792      	b.n	80068d0 <copy_O+0x1d4>
 80069aa:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80069ae:	9e00      	ldr	r6, [sp, #0]
 80069b0:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80069b4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80069b8:	e700      	b.n	80067bc <copy_O+0xc0>
 80069ba:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 80069be:	9e00      	ldr	r6, [sp, #0]
 80069c0:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 80069c4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80069c8:	e759      	b.n	800687e <copy_O+0x182>
 80069ca:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 80069ce:	9e00      	ldr	r6, [sp, #0]
 80069d0:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 80069d4:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80069d8:	e745      	b.n	8006866 <copy_O+0x16a>
 80069da:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80069dc:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 80069e0:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 80069e4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80069e8:	e777      	b.n	80068da <copy_O+0x1de>
 80069ea:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80069ee:	eb01 114a 	add.w	r1, r1, sl, lsl #5
 80069f2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 80069f6:	b017      	add	sp, #92	@ 0x5c
 80069f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80069fc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80069fe:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006a02:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006a06:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006a0a:	e779      	b.n	8006900 <copy_O+0x204>
 8006a0c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8006a0e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006a12:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006a16:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006a1a:	e76d      	b.n	80068f8 <copy_O+0x1fc>
 8006a1c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006a1e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006a22:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006a26:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006a2a:	e760      	b.n	80068ee <copy_O+0x1f2>
 8006a2c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8006a2e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006a32:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006a36:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006a3a:	e753      	b.n	80068e4 <copy_O+0x1e8>
 8006a3c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8006a3e:	ebc4 1804 	rsb	r8, r4, r4, lsl #4
 8006a42:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 8006a46:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8006a4a:	e763      	b.n	8006914 <copy_O+0x218>
 8006a4c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8006a4e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006a52:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006a56:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006a5a:	e756      	b.n	800690a <copy_O+0x20e>
 8006a5c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006a60:	9e00      	ldr	r6, [sp, #0]
 8006a62:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8006a66:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006a6a:	e6bf      	b.n	80067ec <copy_O+0xf0>
 8006a6c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006a70:	9e00      	ldr	r6, [sp, #0]
 8006a72:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8006a76:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006a7a:	e6ab      	b.n	80067d4 <copy_O+0xd8>
 8006a7c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006a80:	9e00      	ldr	r6, [sp, #0]
 8006a82:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8006a86:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006a8a:	e6e0      	b.n	800684e <copy_O+0x152>
 8006a8c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006a90:	9e00      	ldr	r6, [sp, #0]
 8006a92:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8006a96:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006a9a:	e6cb      	b.n	8006834 <copy_O+0x138>
 8006a9c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006aa0:	9e00      	ldr	r6, [sp, #0]
 8006aa2:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8006aa6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006aaa:	e6b7      	b.n	800681c <copy_O+0x120>
 8006aac:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8006ab0:	9e00      	ldr	r6, [sp, #0]
 8006ab2:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 8006ab6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006aba:	e6a3      	b.n	8006804 <copy_O+0x108>

08006abc <copy_P>:

void copy_P(uint16_t* buffer, int x, int y, uint32_t color)
{
 8006abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8006ac0:	4caf      	ldr	r4, [pc, #700]	@ (8006d80 <copy_P+0x2c4>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ac2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8006ac6:	b08d      	sub	sp, #52	@ 0x34
    int pixel_x = x_base + x + offset;
 8006ac8:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006aca:	bf2c      	ite	cs
 8006acc:	f04f 0b00 	movcs.w	fp, #0
 8006ad0:	f04f 0b01 	movcc.w	fp, #1
    int pixel_x = x_base + x + offset;
 8006ad4:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ad8:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8006adc:	bf2c      	ite	cs
 8006ade:	2500      	movcs	r5, #0
 8006ae0:	2501      	movcc	r5, #1
 8006ae2:	b11d      	cbz	r5, 8006aec <copy_P+0x30>
 8006ae4:	f1bb 0f00 	cmp.w	fp, #0
 8006ae8:	f040 8137 	bne.w	8006d5a <copy_P+0x29e>
    int pixel_y = y_base + y;
 8006aec:	1c57      	adds	r7, r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006aee:	0116      	lsls	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006af0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006af4:	9601      	str	r6, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006af6:	9709      	str	r7, [sp, #36]	@ 0x24
 8006af8:	bf2c      	ite	cs
 8006afa:	2600      	movcs	r6, #0
 8006afc:	2601      	movcc	r6, #1
 8006afe:	9602      	str	r6, [sp, #8]
 8006b00:	b115      	cbz	r5, 8006b08 <copy_P+0x4c>
 8006b02:	2e00      	cmp	r6, #0
 8006b04:	f040 8121 	bne.w	8006d4a <copy_P+0x28e>
    int pixel_y = y_base + y;
 8006b08:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b0a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8006b0e:	970a      	str	r7, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b10:	bf2c      	ite	cs
 8006b12:	2600      	movcs	r6, #0
 8006b14:	2601      	movcc	r6, #1
 8006b16:	9603      	str	r6, [sp, #12]
 8006b18:	b115      	cbz	r5, 8006b20 <copy_P+0x64>
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	f040 8124 	bne.w	8006d68 <copy_P+0x2ac>
    int pixel_y = y_base + y;
 8006b20:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b22:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8006b26:	970b      	str	r7, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b28:	bf2c      	ite	cs
 8006b2a:	2600      	movcs	r6, #0
 8006b2c:	2601      	movcc	r6, #1
 8006b2e:	9604      	str	r6, [sp, #16]
 8006b30:	b115      	cbz	r5, 8006b38 <copy_P+0x7c>
 8006b32:	2e00      	cmp	r6, #0
 8006b34:	f040 80ca 	bne.w	8006ccc <copy_P+0x210>
    int pixel_y = y_base + y;
 8006b38:	f102 0804 	add.w	r8, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b3c:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8006b40:	bf2c      	ite	cs
 8006b42:	2600      	movcs	r6, #0
 8006b44:	2601      	movcc	r6, #1
 8006b46:	9605      	str	r6, [sp, #20]
 8006b48:	b115      	cbz	r5, 8006b50 <copy_P+0x94>
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	f040 80f6 	bne.w	8006d3c <copy_P+0x280>
    int pixel_y = y_base + y;
 8006b50:	f102 0a05 	add.w	sl, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b54:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8006b58:	bf2c      	ite	cs
 8006b5a:	2600      	movcs	r6, #0
 8006b5c:	2601      	movcc	r6, #1
 8006b5e:	9606      	str	r6, [sp, #24]
 8006b60:	b115      	cbz	r5, 8006b68 <copy_P+0xac>
 8006b62:	2e00      	cmp	r6, #0
 8006b64:	f040 80e3 	bne.w	8006d2e <copy_P+0x272>
    int pixel_y = y_base + y;
 8006b68:	f102 0906 	add.w	r9, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b6c:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8006b70:	d202      	bcs.n	8006b78 <copy_P+0xbc>
 8006b72:	2d00      	cmp	r5, #0
 8006b74:	f040 80d4 	bne.w	8006d20 <copy_P+0x264>
    int pixel_y = y_base + y;
 8006b78:	f102 0c07 	add.w	ip, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b7c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006b80:	d202      	bcs.n	8006b88 <copy_P+0xcc>
 8006b82:	2d00      	cmp	r5, #0
 8006b84:	f040 80c5 	bne.w	8006d12 <copy_P+0x256>
    int pixel_y = y_base + y;
 8006b88:	f102 0c08 	add.w	ip, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b8c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006b90:	d202      	bcs.n	8006b98 <copy_P+0xdc>
 8006b92:	2d00      	cmp	r5, #0
 8006b94:	f040 80b6 	bne.w	8006d04 <copy_P+0x248>
    int pixel_y = y_base + y;
 8006b98:	f102 0c09 	add.w	ip, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006b9c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006ba0:	d202      	bcs.n	8006ba8 <copy_P+0xec>
 8006ba2:	2d00      	cmp	r5, #0
 8006ba4:	f040 80a7 	bne.w	8006cf6 <copy_P+0x23a>
    int pixel_y = y_base + y;
 8006ba8:	f102 0c0a 	add.w	ip, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006bac:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006bb0:	d202      	bcs.n	8006bb8 <copy_P+0xfc>
 8006bb2:	2d00      	cmp	r5, #0
 8006bb4:	f040 8098 	bne.w	8006ce8 <copy_P+0x22c>
    int pixel_y = y_base + y;
 8006bb8:	f102 0c0b 	add.w	ip, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006bbc:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006bc0:	d202      	bcs.n	8006bc8 <copy_P+0x10c>
 8006bc2:	2d00      	cmp	r5, #0
 8006bc4:	f040 8089 	bne.w	8006cda <copy_P+0x21e>
    int pixel_x = x_base + x + offset;
 8006bc8:	f101 0c01 	add.w	ip, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006bcc:	9d01      	ldr	r5, [sp, #4]
    int pixel_x = x_base + x + offset;
 8006bce:	44a4      	add	ip, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006bd0:	1aaa      	subs	r2, r5, r2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006bd2:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006bd6:	ea4f 1242 	mov.w	r2, r2, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006bda:	bf2c      	ite	cs
 8006bdc:	2500      	movcs	r5, #0
 8006bde:	2501      	movcc	r5, #1
 8006be0:	9501      	str	r5, [sp, #4]
 8006be2:	b11d      	cbz	r5, 8006bec <copy_P+0x130>
 8006be4:	f1bb 0f00 	cmp.w	fp, #0
 8006be8:	f040 80c5 	bne.w	8006d76 <copy_P+0x2ba>
    int pixel_x = x_base + x + offset;
 8006bec:	1c8e      	adds	r6, r1, #2
 8006bee:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006bf0:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8006bf4:	bf2c      	ite	cs
 8006bf6:	2500      	movcs	r5, #0
 8006bf8:	2501      	movcc	r5, #1
 8006bfa:	9507      	str	r5, [sp, #28]
 8006bfc:	b11d      	cbz	r5, 8006c06 <copy_P+0x14a>
 8006bfe:	f1bb 0f00 	cmp.w	fp, #0
 8006c02:	f040 80bf 	bne.w	8006d84 <copy_P+0x2c8>
    int pixel_x = x_base + x + offset;
 8006c06:	1ccd      	adds	r5, r1, #3
 8006c08:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006c0a:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8006c0e:	bf2c      	ite	cs
 8006c10:	2700      	movcs	r7, #0
 8006c12:	2701      	movcc	r7, #1
 8006c14:	9708      	str	r7, [sp, #32]
 8006c16:	b11f      	cbz	r7, 8006c20 <copy_P+0x164>
 8006c18:	f1bb 0f00 	cmp.w	fp, #0
 8006c1c:	f040 80bb 	bne.w	8006d96 <copy_P+0x2da>
    int pixel_x = x_base + x + offset;
 8006c20:	f101 0e04 	add.w	lr, r1, #4
 8006c24:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006c26:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8006c2a:	bf2c      	ite	cs
 8006c2c:	2700      	movcs	r7, #0
 8006c2e:	2701      	movcc	r7, #1
 8006c30:	b11f      	cbz	r7, 8006c3a <copy_P+0x17e>
 8006c32:	f1bb 0f00 	cmp.w	fp, #0
 8006c36:	f040 80a9 	bne.w	8006d8c <copy_P+0x2d0>
    int pixel_x = x_base + x + offset;
 8006c3a:	3105      	adds	r1, #5
 8006c3c:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006c3e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8006c42:	bf2c      	ite	cs
 8006c44:	f04f 0b00 	movcs.w	fp, #0
 8006c48:	f04f 0b01 	movcc.w	fp, #1
 8006c4c:	f1bb 0f00 	cmp.w	fp, #0
 8006c50:	d01f      	beq.n	8006c92 <copy_P+0x1d6>
 8006c52:	9c02      	ldr	r4, [sp, #8]
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	f040 80a2 	bne.w	8006d9e <copy_P+0x2e2>
 8006c5a:	f1bb 0f00 	cmp.w	fp, #0
 8006c5e:	d018      	beq.n	8006c92 <copy_P+0x1d6>
 8006c60:	9c03      	ldr	r4, [sp, #12]
 8006c62:	2c00      	cmp	r4, #0
 8006c64:	f040 80ca 	bne.w	8006dfc <copy_P+0x340>
 8006c68:	f1bb 0f00 	cmp.w	fp, #0
 8006c6c:	d011      	beq.n	8006c92 <copy_P+0x1d6>
 8006c6e:	9c04      	ldr	r4, [sp, #16]
 8006c70:	2c00      	cmp	r4, #0
 8006c72:	f040 80bb 	bne.w	8006dec <copy_P+0x330>
 8006c76:	f1bb 0f00 	cmp.w	fp, #0
 8006c7a:	d00a      	beq.n	8006c92 <copy_P+0x1d6>
 8006c7c:	9c05      	ldr	r4, [sp, #20]
 8006c7e:	2c00      	cmp	r4, #0
 8006c80:	f040 80a6 	bne.w	8006dd0 <copy_P+0x314>
 8006c84:	f1bb 0f00 	cmp.w	fp, #0
 8006c88:	d003      	beq.n	8006c92 <copy_P+0x1d6>
 8006c8a:	9c06      	ldr	r4, [sp, #24]
 8006c8c:	2c00      	cmp	r4, #0
 8006c8e:	f040 80a6 	bne.w	8006dde <copy_P+0x322>
 8006c92:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006c96:	f502 6234 	add.w	r2, r2, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006c9a:	bf2c      	ite	cs
 8006c9c:	2100      	movcs	r1, #0
 8006c9e:	2101      	movcc	r1, #1
 8006ca0:	b171      	cbz	r1, 8006cc0 <copy_P+0x204>
 8006ca2:	9c01      	ldr	r4, [sp, #4]
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	f040 808c 	bne.w	8006dc2 <copy_P+0x306>
 8006caa:	b149      	cbz	r1, 8006cc0 <copy_P+0x204>
 8006cac:	9c07      	ldr	r4, [sp, #28]
 8006cae:	2c00      	cmp	r4, #0
 8006cb0:	f040 8083 	bne.w	8006dba <copy_P+0x2fe>
 8006cb4:	b121      	cbz	r1, 8006cc0 <copy_P+0x204>
 8006cb6:	9c08      	ldr	r4, [sp, #32]
 8006cb8:	b114      	cbz	r4, 8006cc0 <copy_P+0x204>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006cba:	4415      	add	r5, r2
 8006cbc:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006cc0:	b10f      	cbz	r7, 8006cc6 <copy_P+0x20a>
 8006cc2:	2900      	cmp	r1, #0
 8006cc4:	d173      	bne.n	8006dae <copy_P+0x2f2>
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 6; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 6, color);
}
 8006cc6:	b00d      	add	sp, #52	@ 0x34
 8006cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006ccc:	ebc7 1c07 	rsb	ip, r7, r7, lsl #4
 8006cd0:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006cd4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006cd8:	e72e      	b.n	8006b38 <copy_P+0x7c>
 8006cda:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006cde:	eb0e 164c 	add.w	r6, lr, ip, lsl #5
 8006ce2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006ce6:	e76f      	b.n	8006bc8 <copy_P+0x10c>
 8006ce8:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006cec:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006cf0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006cf4:	e760      	b.n	8006bb8 <copy_P+0xfc>
 8006cf6:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006cfa:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006cfe:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006d02:	e751      	b.n	8006ba8 <copy_P+0xec>
 8006d04:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006d08:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006d0c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006d10:	e742      	b.n	8006b98 <copy_P+0xdc>
 8006d12:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8006d16:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006d1a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006d1e:	e733      	b.n	8006b88 <copy_P+0xcc>
 8006d20:	ebc9 1c09 	rsb	ip, r9, r9, lsl #4
 8006d24:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006d28:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006d2c:	e724      	b.n	8006b78 <copy_P+0xbc>
 8006d2e:	ebca 1c0a 	rsb	ip, sl, sl, lsl #4
 8006d32:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006d36:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006d3a:	e715      	b.n	8006b68 <copy_P+0xac>
 8006d3c:	ebc8 1c08 	rsb	ip, r8, r8, lsl #4
 8006d40:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006d44:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006d48:	e702      	b.n	8006b50 <copy_P+0x94>
 8006d4a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8006d4c:	ebc7 1c07 	rsb	ip, r7, r7, lsl #4
 8006d50:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006d54:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006d58:	e6d6      	b.n	8006b08 <copy_P+0x4c>
 8006d5a:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8006d5e:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 8006d62:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006d66:	e6c1      	b.n	8006aec <copy_P+0x30>
 8006d68:	ebc7 1c07 	rsb	ip, r7, r7, lsl #4
 8006d6c:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 8006d70:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8006d74:	e6d4      	b.n	8006b20 <copy_P+0x64>
 8006d76:	eb02 050c 	add.w	r5, r2, ip
 8006d7a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8006d7e:	e735      	b.n	8006bec <copy_P+0x130>
 8006d80:	240001b8 	.word	0x240001b8
 8006d84:	1995      	adds	r5, r2, r6
 8006d86:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8006d8a:	e73c      	b.n	8006c06 <copy_P+0x14a>
 8006d8c:	eb0e 0b02 	add.w	fp, lr, r2
 8006d90:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8006d94:	e751      	b.n	8006c3a <copy_P+0x17e>
 8006d96:	1957      	adds	r7, r2, r5
 8006d98:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8006d9c:	e740      	b.n	8006c20 <copy_P+0x164>
 8006d9e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8006da0:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006da4:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006da8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006dac:	e755      	b.n	8006c5a <copy_P+0x19e>
 8006dae:	4496      	add	lr, r2
 8006db0:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
}
 8006db4:	b00d      	add	sp, #52	@ 0x34
 8006db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006dba:	4416      	add	r6, r2
 8006dbc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8006dc0:	e778      	b.n	8006cb4 <copy_P+0x1f8>
 8006dc2:	4494      	add	ip, r2
 8006dc4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006dc8:	2900      	cmp	r1, #0
 8006dca:	f47f af6f 	bne.w	8006cac <copy_P+0x1f0>
 8006dce:	e777      	b.n	8006cc0 <copy_P+0x204>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006dd0:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 8006dd4:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006dd8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006ddc:	e752      	b.n	8006c84 <copy_P+0x1c8>
 8006dde:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 8006de2:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 8006de6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8006dea:	e752      	b.n	8006c92 <copy_P+0x1d6>
 8006dec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006dee:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006df2:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006df6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006dfa:	e73c      	b.n	8006c76 <copy_P+0x1ba>
 8006dfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dfe:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8006e02:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8006e06:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8006e0a:	e72d      	b.n	8006c68 <copy_P+0x1ac>

08006e0c <copy_Q>:

void copy_Q(uint16_t* buffer, int x, int y, uint32_t color)
{
 8006e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8006e10:	4c93      	ldr	r4, [pc, #588]	@ (8007060 <copy_Q+0x254>)
 8006e12:	1c4e      	adds	r6, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e14:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8006e18:	b097      	sub	sp, #92	@ 0x5c
    int pixel_x = x_base + x + offset;
 8006e1a:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e1c:	bf2c      	ite	cs
 8006e1e:	2400      	movcs	r4, #0
 8006e20:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 8006e22:	442e      	add	r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e24:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8006e28:	9607      	str	r6, [sp, #28]
 8006e2a:	bf2c      	ite	cs
 8006e2c:	2600      	movcs	r6, #0
 8006e2e:	2601      	movcc	r6, #1
 8006e30:	9604      	str	r6, [sp, #16]
 8006e32:	b114      	cbz	r4, 8006e3a <copy_Q+0x2e>
 8006e34:	2e00      	cmp	r6, #0
 8006e36:	f040 8135 	bne.w	80070a4 <copy_Q+0x298>
    int pixel_x = x_base + x + offset;
 8006e3a:	f101 0e02 	add.w	lr, r1, #2
 8006e3e:	44ae      	add	lr, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e40:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8006e44:	bf2c      	ite	cs
 8006e46:	2600      	movcs	r6, #0
 8006e48:	2601      	movcc	r6, #1
 8006e4a:	9605      	str	r6, [sp, #20]
 8006e4c:	b114      	cbz	r4, 8006e54 <copy_Q+0x48>
 8006e4e:	2e00      	cmp	r6, #0
 8006e50:	f040 813f 	bne.w	80070d2 <copy_Q+0x2c6>
    int pixel_x = x_base + x + offset;
 8006e54:	1ccf      	adds	r7, r1, #3
 8006e56:	442f      	add	r7, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e58:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8006e5c:	9702      	str	r7, [sp, #8]
 8006e5e:	bf2c      	ite	cs
 8006e60:	2600      	movcs	r6, #0
 8006e62:	2601      	movcc	r6, #1
 8006e64:	9601      	str	r6, [sp, #4]
 8006e66:	b114      	cbz	r4, 8006e6e <copy_Q+0x62>
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	f040 812a 	bne.w	80070c2 <copy_Q+0x2b6>
    int pixel_x = x_base + x + offset;
 8006e6e:	1d0f      	adds	r7, r1, #4
 8006e70:	197e      	adds	r6, r7, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e72:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8006e76:	9606      	str	r6, [sp, #24]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e78:	bf2c      	ite	cs
 8006e7a:	2700      	movcs	r7, #0
 8006e7c:	2701      	movcc	r7, #1
 8006e7e:	9700      	str	r7, [sp, #0]
 8006e80:	b114      	cbz	r4, 8006e88 <copy_Q+0x7c>
 8006e82:	2f00      	cmp	r7, #0
 8006e84:	f040 8116 	bne.w	80070b4 <copy_Q+0x2a8>
    int pixel_x = x_base + x + offset;
 8006e88:	eb01 0b05 	add.w	fp, r1, r5
    int pixel_y = y_base + y;
 8006e8c:	f102 0901 	add.w	r9, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006e90:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8006e94:	bf2c      	ite	cs
 8006e96:	2400      	movcs	r4, #0
 8006e98:	2401      	movcc	r4, #1
 8006e9a:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8006e9e:	bf2c      	ite	cs
 8006ea0:	2600      	movcs	r6, #0
 8006ea2:	2601      	movcc	r6, #1
 8006ea4:	9603      	str	r6, [sp, #12]
 8006ea6:	b114      	cbz	r4, 8006eae <copy_Q+0xa2>
 8006ea8:	2e00      	cmp	r6, #0
 8006eaa:	f040 8129 	bne.w	8007100 <copy_Q+0x2f4>
    int pixel_y = y_base + y;
 8006eae:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006eb0:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006eb4:	9610      	str	r6, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006eb6:	bf2c      	ite	cs
 8006eb8:	2700      	movcs	r7, #0
 8006eba:	2701      	movcc	r7, #1
 8006ebc:	9708      	str	r7, [sp, #32]
 8006ebe:	b114      	cbz	r4, 8006ec6 <copy_Q+0xba>
 8006ec0:	2f00      	cmp	r7, #0
 8006ec2:	f040 81ab 	bne.w	800721c <copy_Q+0x410>
    int pixel_y = y_base + y;
 8006ec6:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ec8:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006ecc:	9611      	str	r6, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ece:	bf2c      	ite	cs
 8006ed0:	2700      	movcs	r7, #0
 8006ed2:	2701      	movcc	r7, #1
 8006ed4:	9709      	str	r7, [sp, #36]	@ 0x24
 8006ed6:	b114      	cbz	r4, 8006ede <copy_Q+0xd2>
 8006ed8:	2f00      	cmp	r7, #0
 8006eda:	f040 8198 	bne.w	800720e <copy_Q+0x402>
    int pixel_y = y_base + y;
 8006ede:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ee0:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006ee4:	9612      	str	r6, [sp, #72]	@ 0x48
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ee6:	bf2c      	ite	cs
 8006ee8:	2700      	movcs	r7, #0
 8006eea:	2701      	movcc	r7, #1
 8006eec:	970a      	str	r7, [sp, #40]	@ 0x28
 8006eee:	b114      	cbz	r4, 8006ef6 <copy_Q+0xea>
 8006ef0:	2f00      	cmp	r7, #0
 8006ef2:	f040 8185 	bne.w	8007200 <copy_Q+0x3f4>
    int pixel_y = y_base + y;
 8006ef6:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006ef8:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006efc:	9613      	str	r6, [sp, #76]	@ 0x4c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006efe:	bf2c      	ite	cs
 8006f00:	2700      	movcs	r7, #0
 8006f02:	2701      	movcc	r7, #1
 8006f04:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006f06:	b114      	cbz	r4, 8006f0e <copy_Q+0x102>
 8006f08:	2f00      	cmp	r7, #0
 8006f0a:	f040 8172 	bne.w	80071f2 <copy_Q+0x3e6>
    int pixel_y = y_base + y;
 8006f0e:	1d96      	adds	r6, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f10:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8006f14:	9614      	str	r6, [sp, #80]	@ 0x50
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f16:	bf2c      	ite	cs
 8006f18:	2700      	movcs	r7, #0
 8006f1a:	2701      	movcc	r7, #1
 8006f1c:	970c      	str	r7, [sp, #48]	@ 0x30
 8006f1e:	b114      	cbz	r4, 8006f26 <copy_Q+0x11a>
 8006f20:	2f00      	cmp	r7, #0
 8006f22:	f040 8140 	bne.w	80071a6 <copy_Q+0x39a>
    int pixel_y = y_base + y;
 8006f26:	f102 0a07 	add.w	sl, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f2a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8006f2e:	bf2c      	ite	cs
 8006f30:	2600      	movcs	r6, #0
 8006f32:	2601      	movcc	r6, #1
 8006f34:	960d      	str	r6, [sp, #52]	@ 0x34
 8006f36:	b114      	cbz	r4, 8006f3e <copy_Q+0x132>
 8006f38:	2e00      	cmp	r6, #0
 8006f3a:	f040 812d 	bne.w	8007198 <copy_Q+0x38c>
    int pixel_y = y_base + y;
 8006f3e:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f42:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8006f46:	bf2c      	ite	cs
 8006f48:	2600      	movcs	r6, #0
 8006f4a:	2601      	movcc	r6, #1
 8006f4c:	960e      	str	r6, [sp, #56]	@ 0x38
 8006f4e:	b114      	cbz	r4, 8006f56 <copy_Q+0x14a>
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	f040 811a 	bne.w	800718a <copy_Q+0x37e>
    int pixel_y = y_base + y;
 8006f56:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f5a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8006f5e:	bf2c      	ite	cs
 8006f60:	2600      	movcs	r6, #0
 8006f62:	2601      	movcc	r6, #1
 8006f64:	960f      	str	r6, [sp, #60]	@ 0x3c
 8006f66:	b114      	cbz	r4, 8006f6e <copy_Q+0x162>
 8006f68:	2e00      	cmp	r6, #0
 8006f6a:	f040 8107 	bne.w	800717c <copy_Q+0x370>
    int pixel_y = y_base + y;
 8006f6e:	f102 0c0a 	add.w	ip, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f72:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8006f76:	d202      	bcs.n	8006f7e <copy_Q+0x172>
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	f040 80e1 	bne.w	8007140 <copy_Q+0x334>
    int pixel_y = y_base + y;
 8006f7e:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f80:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006f84:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8006f88:	ea4f 1602 	mov.w	r6, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f8c:	bf2c      	ite	cs
 8006f8e:	f04f 0b00 	movcs.w	fp, #0
 8006f92:	f04f 0b01 	movcc.w	fp, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006f96:	0164      	lsls	r4, r4, #5
 8006f98:	9615      	str	r6, [sp, #84]	@ 0x54
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006f9a:	f1bb 0f00 	cmp.w	fp, #0
 8006f9e:	d013      	beq.n	8006fc8 <copy_Q+0x1bc>
 8006fa0:	9e04      	ldr	r6, [sp, #16]
 8006fa2:	2e00      	cmp	r6, #0
 8006fa4:	f040 80bc 	bne.w	8007120 <copy_Q+0x314>
 8006fa8:	f1bb 0f00 	cmp.w	fp, #0
 8006fac:	d00c      	beq.n	8006fc8 <copy_Q+0x1bc>
 8006fae:	9e05      	ldr	r6, [sp, #20]
 8006fb0:	2e00      	cmp	r6, #0
 8006fb2:	f040 80ac 	bne.w	800710e <copy_Q+0x302>
 8006fb6:	f1bb 0f00 	cmp.w	fp, #0
 8006fba:	d005      	beq.n	8006fc8 <copy_Q+0x1bc>
 8006fbc:	9e01      	ldr	r6, [sp, #4]
 8006fbe:	b11e      	cbz	r6, 8006fc8 <copy_Q+0x1bc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8006fc0:	9e02      	ldr	r6, [sp, #8]
 8006fc2:	19a6      	adds	r6, r4, r6
 8006fc4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006fc8:	9e00      	ldr	r6, [sp, #0]
 8006fca:	b11e      	cbz	r6, 8006fd4 <copy_Q+0x1c8>
 8006fcc:	f1bb 0f00 	cmp.w	fp, #0
 8006fd0:	f040 80a1 	bne.w	8007116 <copy_Q+0x30a>
    int pixel_x = x_base + x + offset;
 8006fd4:	3105      	adds	r1, #5
 8006fd6:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8006fd8:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8006fdc:	bf2c      	ite	cs
 8006fde:	2400      	movcs	r4, #0
 8006fe0:	2401      	movcc	r4, #1
 8006fe2:	2c00      	cmp	r4, #0
 8006fe4:	d02f      	beq.n	8007046 <copy_Q+0x23a>
 8006fe6:	9d03      	ldr	r5, [sp, #12]
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	f040 80a2 	bne.w	8007132 <copy_Q+0x326>
 8006fee:	b354      	cbz	r4, 8007046 <copy_Q+0x23a>
 8006ff0:	9d08      	ldr	r5, [sp, #32]
 8006ff2:	2d00      	cmp	r5, #0
 8006ff4:	f040 80ba 	bne.w	800716c <copy_Q+0x360>
 8006ff8:	b32c      	cbz	r4, 8007046 <copy_Q+0x23a>
 8006ffa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006ffc:	2d00      	cmp	r5, #0
 8006ffe:	f040 80ad 	bne.w	800715c <copy_Q+0x350>
 8007002:	b304      	cbz	r4, 8007046 <copy_Q+0x23a>
 8007004:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007006:	2d00      	cmp	r5, #0
 8007008:	f040 80eb 	bne.w	80071e2 <copy_Q+0x3d6>
 800700c:	b1dc      	cbz	r4, 8007046 <copy_Q+0x23a>
 800700e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007010:	2d00      	cmp	r5, #0
 8007012:	f040 80de 	bne.w	80071d2 <copy_Q+0x3c6>
 8007016:	b1b4      	cbz	r4, 8007046 <copy_Q+0x23a>
 8007018:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800701a:	2d00      	cmp	r5, #0
 800701c:	f040 80d1 	bne.w	80071c2 <copy_Q+0x3b6>
 8007020:	b18c      	cbz	r4, 8007046 <copy_Q+0x23a>
 8007022:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007024:	2d00      	cmp	r5, #0
 8007026:	f040 80c5 	bne.w	80071b4 <copy_Q+0x3a8>
 800702a:	b164      	cbz	r4, 8007046 <copy_Q+0x23a>
 800702c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800702e:	2d00      	cmp	r5, #0
 8007030:	f040 808d 	bne.w	800714e <copy_Q+0x342>
 8007034:	b13c      	cbz	r4, 8007046 <copy_Q+0x23a>
 8007036:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007038:	b12d      	cbz	r5, 8007046 <copy_Q+0x23a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800703a:	ebc7 1507 	rsb	r5, r7, r7, lsl #4
 800703e:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8007042:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007046:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800704a:	d202      	bcs.n	8007052 <copy_Q+0x246>
 800704c:	9d01      	ldr	r5, [sp, #4]
 800704e:	2d00      	cmp	r5, #0
 8007050:	d146      	bne.n	80070e0 <copy_Q+0x2d4>
 8007052:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8007056:	d205      	bcs.n	8007064 <copy_Q+0x258>
 8007058:	9d00      	ldr	r5, [sp, #0]
 800705a:	2d00      	cmp	r5, #0
 800705c:	d148      	bne.n	80070f0 <copy_Q+0x2e4>
 800705e:	e001      	b.n	8007064 <copy_Q+0x258>
 8007060:	240001b8 	.word	0x240001b8
 8007064:	f1bc 0f00 	cmp.w	ip, #0
 8007068:	db15      	blt.n	8007096 <copy_Q+0x28a>
 800706a:	b1a4      	cbz	r4, 8007096 <copy_Q+0x28a>
 800706c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8007070:	da0e      	bge.n	8007090 <copy_Q+0x284>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007072:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8007076:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 800707a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800707e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8007082:	da05      	bge.n	8007090 <copy_Q+0x284>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007084:	0114      	lsls	r4, r2, #4
 8007086:	1aa2      	subs	r2, r4, r2
 8007088:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 800708c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for (int i = 1; i < 10; i++) fill_pixel(buffer, x, y, 5, i, color);
    fill_pixel(buffer, x, y, 3, 8, color);
    fill_pixel(buffer, x, y, 4, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    fill_pixel(buffer, x, y, 5, 11, color);
}
 8007090:	b017      	add	sp, #92	@ 0x5c
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007096:	2a00      	cmp	r2, #0
 8007098:	dbfa      	blt.n	8007090 <copy_Q+0x284>
 800709a:	2c00      	cmp	r4, #0
 800709c:	d1ef      	bne.n	800707e <copy_Q+0x272>
}
 800709e:	b017      	add	sp, #92	@ 0x5c
 80070a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80070a4:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 80070a8:	9e07      	ldr	r6, [sp, #28]
 80070aa:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80070ae:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80070b2:	e6c2      	b.n	8006e3a <copy_Q+0x2e>
 80070b4:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 80070b8:	eb06 1444 	add.w	r4, r6, r4, lsl #5
 80070bc:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80070c0:	e6e2      	b.n	8006e88 <copy_Q+0x7c>
 80070c2:	463e      	mov	r6, r7
 80070c4:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 80070c8:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 80070cc:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80070d0:	e6cd      	b.n	8006e6e <copy_Q+0x62>
 80070d2:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 80070d6:	eb0e 1747 	add.w	r7, lr, r7, lsl #5
 80070da:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80070de:	e6b9      	b.n	8006e54 <copy_Q+0x48>
 80070e0:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80070e4:	9d02      	ldr	r5, [sp, #8]
 80070e6:	eb05 1548 	add.w	r5, r5, r8, lsl #5
 80070ea:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80070ee:	e7b0      	b.n	8007052 <copy_Q+0x246>
 80070f0:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80070f4:	9d06      	ldr	r5, [sp, #24]
 80070f6:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 80070fa:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80070fe:	e7b1      	b.n	8007064 <copy_Q+0x258>
 8007100:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 8007104:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 8007108:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800710c:	e6cf      	b.n	8006eae <copy_Q+0xa2>
 800710e:	44a6      	add	lr, r4
 8007110:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8007114:	e74f      	b.n	8006fb6 <copy_Q+0x1aa>
 8007116:	9e06      	ldr	r6, [sp, #24]
 8007118:	4434      	add	r4, r6
 800711a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800711e:	e759      	b.n	8006fd4 <copy_Q+0x1c8>
 8007120:	9e07      	ldr	r6, [sp, #28]
 8007122:	4426      	add	r6, r4
 8007124:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007128:	f1bb 0f00 	cmp.w	fp, #0
 800712c:	f47f af3f 	bne.w	8006fae <copy_Q+0x1a2>
 8007130:	e74a      	b.n	8006fc8 <copy_Q+0x1bc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007132:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8007136:	eb01 1949 	add.w	r9, r1, r9, lsl #5
 800713a:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800713e:	e756      	b.n	8006fee <copy_Q+0x1e2>
 8007140:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 8007144:	eb0b 1b44 	add.w	fp, fp, r4, lsl #5
 8007148:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800714c:	e717      	b.n	8006f7e <copy_Q+0x172>
 800714e:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
 8007152:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8007156:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800715a:	e76b      	b.n	8007034 <copy_Q+0x228>
 800715c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800715e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007162:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8007166:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800716a:	e74a      	b.n	8007002 <copy_Q+0x1f6>
 800716c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800716e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007172:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8007176:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800717a:	e73d      	b.n	8006ff8 <copy_Q+0x1ec>
 800717c:	ebc7 1c07 	rsb	ip, r7, r7, lsl #4
 8007180:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 8007184:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8007188:	e6f1      	b.n	8006f6e <copy_Q+0x162>
 800718a:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 800718e:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 8007192:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007196:	e6de      	b.n	8006f56 <copy_Q+0x14a>
 8007198:	ebca 170a 	rsb	r7, sl, sl, lsl #4
 800719c:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 80071a0:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80071a4:	e6cb      	b.n	8006f3e <copy_Q+0x132>
 80071a6:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 80071aa:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 80071ae:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80071b2:	e6b8      	b.n	8006f26 <copy_Q+0x11a>
 80071b4:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 80071b8:	eb01 1a4a 	add.w	sl, r1, sl, lsl #5
 80071bc:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 80071c0:	e733      	b.n	800702a <copy_Q+0x21e>
 80071c2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80071c4:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80071c8:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80071cc:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80071d0:	e726      	b.n	8007020 <copy_Q+0x214>
 80071d2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80071d4:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80071d8:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80071dc:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80071e0:	e719      	b.n	8007016 <copy_Q+0x20a>
 80071e2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80071e4:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80071e8:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80071ec:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80071f0:	e70c      	b.n	800700c <copy_Q+0x200>
 80071f2:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 80071f6:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 80071fa:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 80071fe:	e686      	b.n	8006f0e <copy_Q+0x102>
 8007200:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 8007204:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 8007208:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800720c:	e673      	b.n	8006ef6 <copy_Q+0xea>
 800720e:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 8007212:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 8007216:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800721a:	e660      	b.n	8006ede <copy_Q+0xd2>
 800721c:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 8007220:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 8007224:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007228:	e64d      	b.n	8006ec6 <copy_Q+0xba>
 800722a:	bf00      	nop

0800722c <copy_R>:

void copy_R(uint16_t* buffer, int x, int y, uint32_t color)
{
 800722c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8007230:	4ca4      	ldr	r4, [pc, #656]	@ (80074c4 <copy_R+0x298>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007232:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8007236:	b093      	sub	sp, #76	@ 0x4c
    int pixel_x = x_base + x + offset;
 8007238:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800723a:	bf2c      	ite	cs
 800723c:	f04f 0b00 	movcs.w	fp, #0
 8007240:	f04f 0b01 	movcc.w	fp, #1
    int pixel_x = x_base + x + offset;
 8007244:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007248:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800724c:	bf2c      	ite	cs
 800724e:	2700      	movcs	r7, #0
 8007250:	2701      	movcc	r7, #1
 8007252:	b11f      	cbz	r7, 800725c <copy_R+0x30>
 8007254:	f1bb 0f00 	cmp.w	fp, #0
 8007258:	f040 818c 	bne.w	8007574 <copy_R+0x348>
    int pixel_y = y_base + y;
 800725c:	1c55      	adds	r5, r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800725e:	ea4f 1802 	mov.w	r8, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007262:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 8007266:	950d      	str	r5, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007268:	bf2c      	ite	cs
 800726a:	2600      	movcs	r6, #0
 800726c:	2601      	movcc	r6, #1
 800726e:	9604      	str	r6, [sp, #16]
 8007270:	b117      	cbz	r7, 8007278 <copy_R+0x4c>
 8007272:	2e00      	cmp	r6, #0
 8007274:	f040 8177 	bne.w	8007566 <copy_R+0x33a>
    int pixel_y = y_base + y;
 8007278:	1c95      	adds	r5, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800727a:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 800727e:	950e      	str	r5, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007280:	bf2c      	ite	cs
 8007282:	2600      	movcs	r6, #0
 8007284:	2601      	movcc	r6, #1
 8007286:	9606      	str	r6, [sp, #24]
 8007288:	b117      	cbz	r7, 8007290 <copy_R+0x64>
 800728a:	2e00      	cmp	r6, #0
 800728c:	f040 8164 	bne.w	8007558 <copy_R+0x32c>
    int pixel_y = y_base + y;
 8007290:	1cd5      	adds	r5, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007292:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 8007296:	950f      	str	r5, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007298:	bf2c      	ite	cs
 800729a:	2600      	movcs	r6, #0
 800729c:	2601      	movcc	r6, #1
 800729e:	9607      	str	r6, [sp, #28]
 80072a0:	b117      	cbz	r7, 80072a8 <copy_R+0x7c>
 80072a2:	2e00      	cmp	r6, #0
 80072a4:	f040 8151 	bne.w	800754a <copy_R+0x31e>
    int pixel_y = y_base + y;
 80072a8:	1d15      	adds	r5, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072aa:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 80072ae:	9510      	str	r5, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072b0:	bf2c      	ite	cs
 80072b2:	2600      	movcs	r6, #0
 80072b4:	2601      	movcc	r6, #1
 80072b6:	9608      	str	r6, [sp, #32]
 80072b8:	b117      	cbz	r7, 80072c0 <copy_R+0x94>
 80072ba:	2e00      	cmp	r6, #0
 80072bc:	f040 813e 	bne.w	800753c <copy_R+0x310>
    int pixel_y = y_base + y;
 80072c0:	1d55      	adds	r5, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072c2:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 80072c6:	9511      	str	r5, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072c8:	bf2c      	ite	cs
 80072ca:	2600      	movcs	r6, #0
 80072cc:	2601      	movcc	r6, #1
 80072ce:	9609      	str	r6, [sp, #36]	@ 0x24
 80072d0:	b117      	cbz	r7, 80072d8 <copy_R+0xac>
 80072d2:	2e00      	cmp	r6, #0
 80072d4:	f040 812b 	bne.w	800752e <copy_R+0x302>
    int pixel_y = y_base + y;
 80072d8:	1d95      	adds	r5, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072da:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 80072de:	9502      	str	r5, [sp, #8]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072e0:	d202      	bcs.n	80072e8 <copy_R+0xbc>
 80072e2:	2f00      	cmp	r7, #0
 80072e4:	f040 811c 	bne.w	8007520 <copy_R+0x2f4>
    int pixel_y = y_base + y;
 80072e8:	f102 0a07 	add.w	sl, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072ec:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80072f0:	d202      	bcs.n	80072f8 <copy_R+0xcc>
 80072f2:	2f00      	cmp	r7, #0
 80072f4:	f040 80f6 	bne.w	80074e4 <copy_R+0x2b8>
    int pixel_y = y_base + y;
 80072f8:	f102 0908 	add.w	r9, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80072fc:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8007300:	d202      	bcs.n	8007308 <copy_R+0xdc>
 8007302:	2f00      	cmp	r7, #0
 8007304:	f040 80e7 	bne.w	80074d6 <copy_R+0x2aa>
    int pixel_y = y_base + y;
 8007308:	f102 0509 	add.w	r5, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800730c:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8007310:	d202      	bcs.n	8007318 <copy_R+0xec>
 8007312:	2f00      	cmp	r7, #0
 8007314:	f040 80d8 	bne.w	80074c8 <copy_R+0x29c>
    int pixel_y = y_base + y;
 8007318:	f102 0c0a 	add.w	ip, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800731c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8007320:	d202      	bcs.n	8007328 <copy_R+0xfc>
 8007322:	2f00      	cmp	r7, #0
 8007324:	f040 80c7 	bne.w	80074b6 <copy_R+0x28a>
    int pixel_y = y_base + y;
 8007328:	f102 060b 	add.w	r6, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800732c:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007330:	9603      	str	r6, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007332:	d202      	bcs.n	800733a <copy_R+0x10e>
 8007334:	2f00      	cmp	r7, #0
 8007336:	f040 80b7 	bne.w	80074a8 <copy_R+0x27c>
    int pixel_x = x_base + x + offset;
 800733a:	1c4f      	adds	r7, r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800733c:	eba8 0202 	sub.w	r2, r8, r2
    int pixel_x = x_base + x + offset;
 8007340:	4427      	add	r7, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007342:	0152      	lsls	r2, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007344:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8007348:	970c      	str	r7, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800734a:	bf2c      	ite	cs
 800734c:	2600      	movcs	r6, #0
 800734e:	2601      	movcc	r6, #1
 8007350:	9605      	str	r6, [sp, #20]
 8007352:	b11e      	cbz	r6, 800735c <copy_R+0x130>
 8007354:	f1bb 0f00 	cmp.w	fp, #0
 8007358:	f040 8113 	bne.w	8007582 <copy_R+0x356>
    int pixel_x = x_base + x + offset;
 800735c:	1c8f      	adds	r7, r1, #2
 800735e:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007360:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8007364:	970a      	str	r7, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007366:	bf2c      	ite	cs
 8007368:	2600      	movcs	r6, #0
 800736a:	2601      	movcc	r6, #1
 800736c:	9601      	str	r6, [sp, #4]
 800736e:	b11e      	cbz	r6, 8007378 <copy_R+0x14c>
 8007370:	f1bb 0f00 	cmp.w	fp, #0
 8007374:	f040 810d 	bne.w	8007592 <copy_R+0x366>
    int pixel_x = x_base + x + offset;
 8007378:	1ccf      	adds	r7, r1, #3
 800737a:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800737c:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8007380:	970b      	str	r7, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007382:	bf2c      	ite	cs
 8007384:	f04f 0800 	movcs.w	r8, #0
 8007388:	f04f 0801 	movcc.w	r8, #1
 800738c:	f1b8 0f00 	cmp.w	r8, #0
 8007390:	d003      	beq.n	800739a <copy_R+0x16e>
 8007392:	f1bb 0f00 	cmp.w	fp, #0
 8007396:	f040 80f8 	bne.w	800758a <copy_R+0x35e>
    int pixel_x = x_base + x + offset;
 800739a:	f101 0e04 	add.w	lr, r1, #4
 800739e:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80073a0:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80073a4:	bf2c      	ite	cs
 80073a6:	2700      	movcs	r7, #0
 80073a8:	2701      	movcc	r7, #1
 80073aa:	b11f      	cbz	r7, 80073b4 <copy_R+0x188>
 80073ac:	f1bb 0f00 	cmp.w	fp, #0
 80073b0:	f040 80f3 	bne.w	800759a <copy_R+0x36e>
    int pixel_x = x_base + x + offset;
 80073b4:	3105      	adds	r1, #5
 80073b6:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80073b8:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80073bc:	bf2c      	ite	cs
 80073be:	2400      	movcs	r4, #0
 80073c0:	2401      	movcc	r4, #1
 80073c2:	b1bc      	cbz	r4, 80073f4 <copy_R+0x1c8>
 80073c4:	9e04      	ldr	r6, [sp, #16]
 80073c6:	2e00      	cmp	r6, #0
 80073c8:	f040 80ec 	bne.w	80075a4 <copy_R+0x378>
 80073cc:	b194      	cbz	r4, 80073f4 <copy_R+0x1c8>
 80073ce:	9e06      	ldr	r6, [sp, #24]
 80073d0:	2e00      	cmp	r6, #0
 80073d2:	f040 8119 	bne.w	8007608 <copy_R+0x3dc>
 80073d6:	b16c      	cbz	r4, 80073f4 <copy_R+0x1c8>
 80073d8:	9e07      	ldr	r6, [sp, #28]
 80073da:	2e00      	cmp	r6, #0
 80073dc:	f040 8104 	bne.w	80075e8 <copy_R+0x3bc>
 80073e0:	b144      	cbz	r4, 80073f4 <copy_R+0x1c8>
 80073e2:	9e08      	ldr	r6, [sp, #32]
 80073e4:	2e00      	cmp	r6, #0
 80073e6:	f040 80f7 	bne.w	80075d8 <copy_R+0x3ac>
 80073ea:	b11c      	cbz	r4, 80073f4 <copy_R+0x1c8>
 80073ec:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80073ee:	2e00      	cmp	r6, #0
 80073f0:	f040 8102 	bne.w	80075f8 <copy_R+0x3cc>
 80073f4:	9e02      	ldr	r6, [sp, #8]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80073f6:	f502 6234 	add.w	r2, r2, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80073fa:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 80073fe:	bf2c      	ite	cs
 8007400:	f04f 0b00 	movcs.w	fp, #0
 8007404:	f04f 0b01 	movcc.w	fp, #1
 8007408:	f1bb 0f00 	cmp.w	fp, #0
 800740c:	d014      	beq.n	8007438 <copy_R+0x20c>
 800740e:	9e05      	ldr	r6, [sp, #20]
 8007410:	2e00      	cmp	r6, #0
 8007412:	f040 80d8 	bne.w	80075c6 <copy_R+0x39a>
 8007416:	f1bb 0f00 	cmp.w	fp, #0
 800741a:	d00d      	beq.n	8007438 <copy_R+0x20c>
 800741c:	9e01      	ldr	r6, [sp, #4]
 800741e:	2e00      	cmp	r6, #0
 8007420:	f040 80cc 	bne.w	80075bc <copy_R+0x390>
 8007424:	f1bb 0f00 	cmp.w	fp, #0
 8007428:	d006      	beq.n	8007438 <copy_R+0x20c>
 800742a:	f1b8 0f00 	cmp.w	r8, #0
 800742e:	d003      	beq.n	8007438 <copy_R+0x20c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007430:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007432:	1996      	adds	r6, r2, r6
 8007434:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007438:	b11f      	cbz	r7, 8007442 <copy_R+0x216>
 800743a:	f1bb 0f00 	cmp.w	fp, #0
 800743e:	f040 80b9 	bne.w	80075b4 <copy_R+0x388>
 8007442:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8007446:	d202      	bcs.n	800744e <copy_R+0x222>
 8007448:	9a01      	ldr	r2, [sp, #4]
 800744a:	2a00      	cmp	r2, #0
 800744c:	d160      	bne.n	8007510 <copy_R+0x2e4>
 800744e:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8007452:	d202      	bcs.n	800745a <copy_R+0x22e>
 8007454:	f1b8 0f00 	cmp.w	r8, #0
 8007458:	d152      	bne.n	8007500 <copy_R+0x2d4>
 800745a:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800745e:	d201      	bcs.n	8007464 <copy_R+0x238>
 8007460:	2f00      	cmp	r7, #0
 8007462:	d146      	bne.n	80074f2 <copy_R+0x2c6>
 8007464:	f1bc 0f00 	cmp.w	ip, #0
 8007468:	db16      	blt.n	8007498 <copy_R+0x26c>
 800746a:	b1ac      	cbz	r4, 8007498 <copy_R+0x26c>
 800746c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8007470:	da0f      	bge.n	8007492 <copy_R+0x266>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007472:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8007476:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 800747a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800747e:	9a03      	ldr	r2, [sp, #12]
 8007480:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8007484:	da05      	bge.n	8007492 <copy_R+0x266>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007486:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800748a:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800748e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    fill_pixel(buffer, x, y, 2, 7, color);
    fill_pixel(buffer, x, y, 3, 8, color);
    fill_pixel(buffer, x, y, 4, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    fill_pixel(buffer, x, y, 5, 11, color);
}
 8007492:	b013      	add	sp, #76	@ 0x4c
 8007494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007498:	9a03      	ldr	r2, [sp, #12]
 800749a:	2a00      	cmp	r2, #0
 800749c:	dbf9      	blt.n	8007492 <copy_R+0x266>
 800749e:	2c00      	cmp	r4, #0
 80074a0:	d1ed      	bne.n	800747e <copy_R+0x252>
}
 80074a2:	b013      	add	sp, #76	@ 0x4c
 80074a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80074a8:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 80074ac:	eb0e 1e47 	add.w	lr, lr, r7, lsl #5
 80074b0:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80074b4:	e741      	b.n	800733a <copy_R+0x10e>
 80074b6:	ebcc 160c 	rsb	r6, ip, ip, lsl #4
 80074ba:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 80074be:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80074c2:	e731      	b.n	8007328 <copy_R+0xfc>
 80074c4:	240001b8 	.word	0x240001b8
 80074c8:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 80074cc:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 80074d0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80074d4:	e720      	b.n	8007318 <copy_R+0xec>
 80074d6:	ebc9 1509 	rsb	r5, r9, r9, lsl #4
 80074da:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 80074de:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80074e2:	e711      	b.n	8007308 <copy_R+0xdc>
 80074e4:	ebca 150a 	rsb	r5, sl, sl, lsl #4
 80074e8:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 80074ec:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80074f0:	e702      	b.n	80072f8 <copy_R+0xcc>
 80074f2:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80074f6:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 80074fa:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80074fe:	e7b1      	b.n	8007464 <copy_R+0x238>
 8007500:	ebc9 1209 	rsb	r2, r9, r9, lsl #4
 8007504:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007506:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 800750a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800750e:	e7a4      	b.n	800745a <copy_R+0x22e>
 8007510:	ebca 120a 	rsb	r2, sl, sl, lsl #4
 8007514:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007516:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 800751a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800751e:	e796      	b.n	800744e <copy_R+0x222>
 8007520:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007524:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007528:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800752c:	e6dc      	b.n	80072e8 <copy_R+0xbc>
 800752e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007532:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007536:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800753a:	e6cd      	b.n	80072d8 <copy_R+0xac>
 800753c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007540:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007544:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007548:	e6ba      	b.n	80072c0 <copy_R+0x94>
 800754a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800754e:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007552:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007556:	e6a7      	b.n	80072a8 <copy_R+0x7c>
 8007558:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800755c:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 8007560:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007564:	e694      	b.n	8007290 <copy_R+0x64>
 8007566:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800756a:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 800756e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007572:	e681      	b.n	8007278 <copy_R+0x4c>
 8007574:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8007578:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 800757c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007580:	e66c      	b.n	800725c <copy_R+0x30>
 8007582:	19d7      	adds	r7, r2, r7
 8007584:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007588:	e6e8      	b.n	800735c <copy_R+0x130>
 800758a:	19d7      	adds	r7, r2, r7
 800758c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007590:	e703      	b.n	800739a <copy_R+0x16e>
 8007592:	19d7      	adds	r7, r2, r7
 8007594:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007598:	e6ee      	b.n	8007378 <copy_R+0x14c>
 800759a:	eb0e 0b02 	add.w	fp, lr, r2
 800759e:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 80075a2:	e707      	b.n	80073b4 <copy_R+0x188>
 80075a4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80075a6:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 80075aa:	eb01 1b4b 	add.w	fp, r1, fp, lsl #5
 80075ae:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 80075b2:	e70b      	b.n	80073cc <copy_R+0x1a0>
 80075b4:	4472      	add	r2, lr
 80075b6:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80075ba:	e742      	b.n	8007442 <copy_R+0x216>
 80075bc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80075be:	1996      	adds	r6, r2, r6
 80075c0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80075c4:	e72e      	b.n	8007424 <copy_R+0x1f8>
 80075c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075c8:	4416      	add	r6, r2
 80075ca:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80075ce:	f1bb 0f00 	cmp.w	fp, #0
 80075d2:	f47f af23 	bne.w	800741c <copy_R+0x1f0>
 80075d6:	e72f      	b.n	8007438 <copy_R+0x20c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80075d8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80075da:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 80075de:	eb01 1b4b 	add.w	fp, r1, fp, lsl #5
 80075e2:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 80075e6:	e700      	b.n	80073ea <copy_R+0x1be>
 80075e8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80075ea:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 80075ee:	eb01 1b4b 	add.w	fp, r1, fp, lsl #5
 80075f2:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 80075f6:	e6f3      	b.n	80073e0 <copy_R+0x1b4>
 80075f8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80075fa:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 80075fe:	eb01 1b4b 	add.w	fp, r1, fp, lsl #5
 8007602:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8007606:	e6f5      	b.n	80073f4 <copy_R+0x1c8>
 8007608:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800760a:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 800760e:	eb01 1b4b 	add.w	fp, r1, fp, lsl #5
 8007612:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8007616:	e6de      	b.n	80073d6 <copy_R+0x1aa>

08007618 <copy_S>:

void copy_S(uint16_t* buffer, int x, int y, uint32_t color)
{
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800761c:	4cb6      	ldr	r4, [pc, #728]	@ (80078f8 <copy_S+0x2e0>)
 800761e:	f101 0801 	add.w	r8, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007622:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8007626:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 8007628:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800762a:	bf2c      	ite	cs
 800762c:	2500      	movcs	r5, #0
 800762e:	2501      	movcc	r5, #1
    int pixel_x = x_base + x + offset;
 8007630:	44a0      	add	r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007632:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8007636:	bf2c      	ite	cs
 8007638:	f04f 0a00 	movcs.w	sl, #0
 800763c:	f04f 0a01 	movcc.w	sl, #1
 8007640:	b11d      	cbz	r5, 800764a <copy_S+0x32>
 8007642:	f1ba 0f00 	cmp.w	sl, #0
 8007646:	f040 80d7 	bne.w	80077f8 <copy_S+0x1e0>
    int pixel_x = x_base + x + offset;
 800764a:	1c8f      	adds	r7, r1, #2
 800764c:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800764e:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 8007652:	bf2c      	ite	cs
 8007654:	2600      	movcs	r6, #0
 8007656:	2601      	movcc	r6, #1
 8007658:	9601      	str	r6, [sp, #4]
 800765a:	b115      	cbz	r5, 8007662 <copy_S+0x4a>
 800765c:	2e00      	cmp	r6, #0
 800765e:	f040 80c4 	bne.w	80077ea <copy_S+0x1d2>
    int pixel_x = x_base + x + offset;
 8007662:	1cce      	adds	r6, r1, #3
 8007664:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007666:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800766a:	9603      	str	r6, [sp, #12]
 800766c:	bf2c      	ite	cs
 800766e:	2600      	movcs	r6, #0
 8007670:	2601      	movcc	r6, #1
 8007672:	9602      	str	r6, [sp, #8]
 8007674:	b115      	cbz	r5, 800767c <copy_S+0x64>
 8007676:	2e00      	cmp	r6, #0
 8007678:	f040 80af 	bne.w	80077da <copy_S+0x1c2>
    int pixel_x = x_base + x + offset;
 800767c:	f101 0e04 	add.w	lr, r1, #4
 8007680:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007682:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8007686:	bf2c      	ite	cs
 8007688:	f04f 0900 	movcs.w	r9, #0
 800768c:	f04f 0901 	movcc.w	r9, #1
 8007690:	f1b9 0f00 	cmp.w	r9, #0
 8007694:	d002      	beq.n	800769c <copy_S+0x84>
 8007696:	2d00      	cmp	r5, #0
 8007698:	f040 8098 	bne.w	80077cc <copy_S+0x1b4>
    int pixel_x = x_base + x + offset;
 800769c:	190d      	adds	r5, r1, r4
    int pixel_y = y_base + y;
 800769e:	f102 0c01 	add.w	ip, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80076a2:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80076a6:	bf2c      	ite	cs
 80076a8:	f04f 0b00 	movcs.w	fp, #0
 80076ac:	f04f 0b01 	movcc.w	fp, #1
 80076b0:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80076b4:	d203      	bcs.n	80076be <copy_S+0xa6>
 80076b6:	f1bb 0f00 	cmp.w	fp, #0
 80076ba:	f040 80a4 	bne.w	8007806 <copy_S+0x1ee>
    int pixel_y = y_base + y;
 80076be:	f102 0c02 	add.w	ip, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80076c2:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80076c6:	d203      	bcs.n	80076d0 <copy_S+0xb8>
 80076c8:	f1bb 0f00 	cmp.w	fp, #0
 80076cc:	f040 80c4 	bne.w	8007858 <copy_S+0x240>
    int pixel_y = y_base + y;
 80076d0:	f102 0c03 	add.w	ip, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80076d4:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80076d8:	d203      	bcs.n	80076e2 <copy_S+0xca>
 80076da:	f1bb 0f00 	cmp.w	fp, #0
 80076de:	f040 80c9 	bne.w	8007874 <copy_S+0x25c>
    int pixel_y = y_base + y;
 80076e2:	f102 0c04 	add.w	ip, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80076e6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80076ea:	d203      	bcs.n	80076f4 <copy_S+0xdc>
 80076ec:	f1bb 0f00 	cmp.w	fp, #0
 80076f0:	f040 80b9 	bne.w	8007866 <copy_S+0x24e>
    int pixel_y = y_base + y;
 80076f4:	1d55      	adds	r5, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80076f6:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80076fa:	ebc5 1c05 	rsb	ip, r5, r5, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80076fe:	bf2c      	ite	cs
 8007700:	2500      	movcs	r5, #0
 8007702:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007704:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007708:	b185      	cbz	r5, 800772c <copy_S+0x114>
 800770a:	f1ba 0f00 	cmp.w	sl, #0
 800770e:	f040 8096 	bne.w	800783e <copy_S+0x226>
 8007712:	b15d      	cbz	r5, 800772c <copy_S+0x114>
 8007714:	9e01      	ldr	r6, [sp, #4]
 8007716:	2e00      	cmp	r6, #0
 8007718:	f040 808c 	bne.w	8007834 <copy_S+0x21c>
 800771c:	b135      	cbz	r5, 800772c <copy_S+0x114>
 800771e:	9e02      	ldr	r6, [sp, #8]
 8007720:	b126      	cbz	r6, 800772c <copy_S+0x114>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007722:	9e03      	ldr	r6, [sp, #12]
 8007724:	eb0c 0b06 	add.w	fp, ip, r6
 8007728:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800772c:	f1b9 0f00 	cmp.w	r9, #0
 8007730:	d002      	beq.n	8007738 <copy_S+0x120>
 8007732:	2d00      	cmp	r5, #0
 8007734:	f040 808b 	bne.w	800784e <copy_S+0x236>
    int pixel_x = x_base + x + offset;
 8007738:	3105      	adds	r1, #5
    int pixel_y = y_base + y;
 800773a:	1d95      	adds	r5, r2, #6
    int pixel_x = x_base + x + offset;
 800773c:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800773e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8007742:	bf2c      	ite	cs
 8007744:	2400      	movcs	r4, #0
 8007746:	2401      	movcc	r4, #1
 8007748:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800774c:	d202      	bcs.n	8007754 <copy_S+0x13c>
 800774e:	2c00      	cmp	r4, #0
 8007750:	f040 80c5 	bne.w	80078de <copy_S+0x2c6>
    int pixel_y = y_base + y;
 8007754:	1dd5      	adds	r5, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007756:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800775a:	d202      	bcs.n	8007762 <copy_S+0x14a>
 800775c:	2c00      	cmp	r4, #0
 800775e:	f040 8090 	bne.w	8007882 <copy_S+0x26a>
    int pixel_y = y_base + y;
 8007762:	f102 0508 	add.w	r5, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007766:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800776a:	d202      	bcs.n	8007772 <copy_S+0x15a>
 800776c:	2c00      	cmp	r4, #0
 800776e:	f040 8095 	bne.w	800789c <copy_S+0x284>
    int pixel_y = y_base + y;
 8007772:	f102 0509 	add.w	r5, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007776:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800777a:	d202      	bcs.n	8007782 <copy_S+0x16a>
 800777c:	2c00      	cmp	r4, #0
 800777e:	f040 809a 	bne.w	80078b6 <copy_S+0x29e>
    int pixel_y = y_base + y;
 8007782:	f102 050a 	add.w	r5, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007786:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800778a:	d202      	bcs.n	8007792 <copy_S+0x17a>
 800778c:	2c00      	cmp	r4, #0
 800778e:	f040 809f 	bne.w	80078d0 <copy_S+0x2b8>
 8007792:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007794:	f50c 6c34 	add.w	ip, ip, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007798:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800779c:	bf2c      	ite	cs
 800779e:	2200      	movcs	r2, #0
 80077a0:	2201      	movcc	r2, #1
 80077a2:	b162      	cbz	r2, 80077be <copy_S+0x1a6>
 80077a4:	f1ba 0f00 	cmp.w	sl, #0
 80077a8:	d13e      	bne.n	8007828 <copy_S+0x210>
 80077aa:	b142      	cbz	r2, 80077be <copy_S+0x1a6>
 80077ac:	9901      	ldr	r1, [sp, #4]
 80077ae:	bbb9      	cbnz	r1, 8007820 <copy_S+0x208>
 80077b0:	b12a      	cbz	r2, 80077be <copy_S+0x1a6>
 80077b2:	9902      	ldr	r1, [sp, #8]
 80077b4:	b119      	cbz	r1, 80077be <copy_S+0x1a6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80077b6:	9e03      	ldr	r6, [sp, #12]
 80077b8:	4466      	add	r6, ip
 80077ba:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80077be:	f1b9 0f00 	cmp.w	r9, #0
 80077c2:	d000      	beq.n	80077c6 <copy_S+0x1ae>
 80077c4:	bb32      	cbnz	r2, 8007814 <copy_S+0x1fc>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 5, color);
    for (int i = 6; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 80077c6:	b005      	add	sp, #20
 80077c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80077cc:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 80077d0:	eb0e 1545 	add.w	r5, lr, r5, lsl #5
 80077d4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80077d8:	e760      	b.n	800769c <copy_S+0x84>
 80077da:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 80077de:	9e03      	ldr	r6, [sp, #12]
 80077e0:	eb06 1c4c 	add.w	ip, r6, ip, lsl #5
 80077e4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80077e8:	e748      	b.n	800767c <copy_S+0x64>
 80077ea:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80077ee:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 80077f2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80077f6:	e734      	b.n	8007662 <copy_S+0x4a>
 80077f8:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 80077fc:	eb08 1646 	add.w	r6, r8, r6, lsl #5
 8007800:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007804:	e721      	b.n	800764a <copy_S+0x32>
 8007806:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800780a:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 800780e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8007812:	e754      	b.n	80076be <copy_S+0xa6>
 8007814:	44e6      	add	lr, ip
 8007816:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
}
 800781a:	b005      	add	sp, #20
 800781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007820:	4467      	add	r7, ip
 8007822:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007826:	e7c3      	b.n	80077b0 <copy_S+0x198>
 8007828:	44e0      	add	r8, ip
 800782a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800782e:	2a00      	cmp	r2, #0
 8007830:	d1bc      	bne.n	80077ac <copy_S+0x194>
 8007832:	e7c4      	b.n	80077be <copy_S+0x1a6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007834:	eb0c 0b07 	add.w	fp, ip, r7
 8007838:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800783c:	e76e      	b.n	800771c <copy_S+0x104>
 800783e:	eb0c 0b08 	add.w	fp, ip, r8
 8007842:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007846:	2d00      	cmp	r5, #0
 8007848:	f47f af64 	bne.w	8007714 <copy_S+0xfc>
 800784c:	e76e      	b.n	800772c <copy_S+0x114>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800784e:	eb0e 050c 	add.w	r5, lr, ip
 8007852:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007856:	e76f      	b.n	8007738 <copy_S+0x120>
 8007858:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800785c:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 8007860:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8007864:	e734      	b.n	80076d0 <copy_S+0xb8>
 8007866:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800786a:	eb05 154c 	add.w	r5, r5, ip, lsl #5
 800786e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8007872:	e73f      	b.n	80076f4 <copy_S+0xdc>
 8007874:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8007878:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 800787c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8007880:	e72f      	b.n	80076e2 <copy_S+0xca>
 8007882:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8007886:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800788a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 800788e:	f102 0508 	add.w	r5, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007892:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8007896:	f4ff af69 	bcc.w	800776c <copy_S+0x154>
 800789a:	e76a      	b.n	8007772 <copy_S+0x15a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800789c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80078a0:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80078a4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 80078a8:	f102 0509 	add.w	r5, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078ac:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80078b0:	f4ff af64 	bcc.w	800777c <copy_S+0x164>
 80078b4:	e765      	b.n	8007782 <copy_S+0x16a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80078b6:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80078ba:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80078be:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 80078c2:	f102 050a 	add.w	r5, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078c6:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80078ca:	f4ff af5f 	bcc.w	800778c <copy_S+0x174>
 80078ce:	e760      	b.n	8007792 <copy_S+0x17a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80078d0:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80078d4:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80078d8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80078dc:	e759      	b.n	8007792 <copy_S+0x17a>
 80078de:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80078e2:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80078e6:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 80078ea:	1dd5      	adds	r5, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80078ec:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80078f0:	f4ff af34 	bcc.w	800775c <copy_S+0x144>
 80078f4:	e735      	b.n	8007762 <copy_S+0x14a>
 80078f6:	bf00      	nop
 80078f8:	240001b8 	.word	0x240001b8

080078fc <copy_T>:

void copy_T(uint16_t* buffer, int x, int y, uint32_t color)
{
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8007900:	4c9c      	ldr	r4, [pc, #624]	@ (8007b74 <copy_T+0x278>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007902:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007906:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
{
 800790a:	b091      	sub	sp, #68	@ 0x44
    int pixel_x = x_base + x + offset;
 800790c:	6826      	ldr	r6, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800790e:	bf2c      	ite	cs
 8007910:	2700      	movcs	r7, #0
 8007912:	2701      	movcc	r7, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007914:	ea4f 1949 	mov.w	r9, r9, lsl #5
    int pixel_x = x_base + x + offset;
 8007918:	198c      	adds	r4, r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800791a:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 800791e:	d202      	bcs.n	8007926 <copy_T+0x2a>
 8007920:	2f00      	cmp	r7, #0
 8007922:	f040 80fe 	bne.w	8007b22 <copy_T+0x226>
    int pixel_x = x_base + x + offset;
 8007926:	1c4c      	adds	r4, r1, #1
 8007928:	4434      	add	r4, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800792a:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 800792e:	d202      	bcs.n	8007936 <copy_T+0x3a>
 8007930:	2f00      	cmp	r7, #0
 8007932:	f040 80f2 	bne.w	8007b1a <copy_T+0x21e>
    int pixel_x = x_base + x + offset;
 8007936:	f101 0e02 	add.w	lr, r1, #2
 800793a:	44b6      	add	lr, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800793c:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8007940:	bf2c      	ite	cs
 8007942:	2500      	movcs	r5, #0
 8007944:	2501      	movcc	r5, #1
 8007946:	b117      	cbz	r7, 800794e <copy_T+0x52>
 8007948:	2d00      	cmp	r5, #0
 800794a:	f040 80e1 	bne.w	8007b10 <copy_T+0x214>
    int pixel_x = x_base + x + offset;
 800794e:	f101 0c03 	add.w	ip, r1, #3
 8007952:	44b4      	add	ip, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007954:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8007958:	bf2c      	ite	cs
 800795a:	2400      	movcs	r4, #0
 800795c:	2401      	movcc	r4, #1
 800795e:	b117      	cbz	r7, 8007966 <copy_T+0x6a>
 8007960:	2c00      	cmp	r4, #0
 8007962:	f040 80d0 	bne.w	8007b06 <copy_T+0x20a>
    int pixel_x = x_base + x + offset;
 8007966:	f101 0804 	add.w	r8, r1, #4
 800796a:	44b0      	add	r8, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800796c:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8007970:	d202      	bcs.n	8007978 <copy_T+0x7c>
 8007972:	2f00      	cmp	r7, #0
 8007974:	f040 80c3 	bne.w	8007afe <copy_T+0x202>
    int pixel_x = x_base + x + offset;
 8007978:	3105      	adds	r1, #5
 800797a:	4431      	add	r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800797c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8007980:	d202      	bcs.n	8007988 <copy_T+0x8c>
 8007982:	2f00      	cmp	r7, #0
 8007984:	f040 80b7 	bne.w	8007af6 <copy_T+0x1fa>
    int pixel_y = y_base + y;
 8007988:	1c51      	adds	r1, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800798a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 800798e:	910a      	str	r1, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007990:	bf2c      	ite	cs
 8007992:	2700      	movcs	r7, #0
 8007994:	2701      	movcc	r7, #1
 8007996:	b117      	cbz	r7, 800799e <copy_T+0xa2>
 8007998:	2d00      	cmp	r5, #0
 800799a:	f040 80c6 	bne.w	8007b2a <copy_T+0x22e>
    int pixel_y = y_base + y;
 800799e:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80079a0:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 80079a4:	960b      	str	r6, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80079a6:	bf2c      	ite	cs
 80079a8:	2100      	movcs	r1, #0
 80079aa:	2101      	movcc	r1, #1
 80079ac:	9101      	str	r1, [sp, #4]
 80079ae:	b111      	cbz	r1, 80079b6 <copy_T+0xba>
 80079b0:	2d00      	cmp	r5, #0
 80079b2:	f040 8127 	bne.w	8007c04 <copy_T+0x308>
    int pixel_y = y_base + y;
 80079b6:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80079b8:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 80079bc:	960c      	str	r6, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80079be:	bf2c      	ite	cs
 80079c0:	2100      	movcs	r1, #0
 80079c2:	2101      	movcc	r1, #1
 80079c4:	9102      	str	r1, [sp, #8]
 80079c6:	b111      	cbz	r1, 80079ce <copy_T+0xd2>
 80079c8:	2d00      	cmp	r5, #0
 80079ca:	f040 8114 	bne.w	8007bf6 <copy_T+0x2fa>
    int pixel_y = y_base + y;
 80079ce:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80079d0:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 80079d4:	960d      	str	r6, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80079d6:	bf2c      	ite	cs
 80079d8:	2100      	movcs	r1, #0
 80079da:	2101      	movcc	r1, #1
 80079dc:	9103      	str	r1, [sp, #12]
 80079de:	b111      	cbz	r1, 80079e6 <copy_T+0xea>
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	f040 8101 	bne.w	8007be8 <copy_T+0x2ec>
    int pixel_y = y_base + y;
 80079e6:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80079e8:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 80079ec:	960e      	str	r6, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80079ee:	bf2c      	ite	cs
 80079f0:	2100      	movcs	r1, #0
 80079f2:	2101      	movcc	r1, #1
 80079f4:	9104      	str	r1, [sp, #16]
 80079f6:	b111      	cbz	r1, 80079fe <copy_T+0x102>
 80079f8:	2d00      	cmp	r5, #0
 80079fa:	f040 8134 	bne.w	8007c66 <copy_T+0x36a>
    int pixel_y = y_base + y;
 80079fe:	f102 0806 	add.w	r8, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007a02:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8007a06:	bf2c      	ite	cs
 8007a08:	2100      	movcs	r1, #0
 8007a0a:	2101      	movcc	r1, #1
 8007a0c:	9105      	str	r1, [sp, #20]
 8007a0e:	b111      	cbz	r1, 8007a16 <copy_T+0x11a>
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	f040 8121 	bne.w	8007c58 <copy_T+0x35c>
    int pixel_y = y_base + y;
 8007a16:	f102 0a07 	add.w	sl, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007a1a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8007a1e:	bf2c      	ite	cs
 8007a20:	2100      	movcs	r1, #0
 8007a22:	2101      	movcc	r1, #1
 8007a24:	9106      	str	r1, [sp, #24]
 8007a26:	b111      	cbz	r1, 8007a2e <copy_T+0x132>
 8007a28:	2d00      	cmp	r5, #0
 8007a2a:	f040 810e 	bne.w	8007c4a <copy_T+0x34e>
    int pixel_y = y_base + y;
 8007a2e:	f102 0908 	add.w	r9, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007a32:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8007a36:	bf2c      	ite	cs
 8007a38:	2100      	movcs	r1, #0
 8007a3a:	2101      	movcc	r1, #1
 8007a3c:	9107      	str	r1, [sp, #28]
 8007a3e:	b111      	cbz	r1, 8007a46 <copy_T+0x14a>
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	f040 80fb 	bne.w	8007c3c <copy_T+0x340>
    int pixel_y = y_base + y;
 8007a46:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007a4a:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007a4e:	960f      	str	r6, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007a50:	bf2c      	ite	cs
 8007a52:	2100      	movcs	r1, #0
 8007a54:	2101      	movcc	r1, #1
 8007a56:	9108      	str	r1, [sp, #32]
 8007a58:	b111      	cbz	r1, 8007a60 <copy_T+0x164>
 8007a5a:	2d00      	cmp	r5, #0
 8007a5c:	f040 80e7 	bne.w	8007c2e <copy_T+0x332>
    int pixel_y = y_base + y;
 8007a60:	f102 060a 	add.w	r6, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007a64:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8007a68:	bf2c      	ite	cs
 8007a6a:	2100      	movcs	r1, #0
 8007a6c:	2101      	movcc	r1, #1
 8007a6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a70:	b111      	cbz	r1, 8007a78 <copy_T+0x17c>
 8007a72:	2d00      	cmp	r5, #0
 8007a74:	f040 80d4 	bne.w	8007c20 <copy_T+0x324>
    int pixel_y = y_base + y;
 8007a78:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007a7a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8007a7e:	bf2c      	ite	cs
 8007a80:	f04f 0b00 	movcs.w	fp, #0
 8007a84:	f04f 0b01 	movcc.w	fp, #1
 8007a88:	f1bb 0f00 	cmp.w	fp, #0
 8007a8c:	d002      	beq.n	8007a94 <copy_T+0x198>
 8007a8e:	2d00      	cmp	r5, #0
 8007a90:	f040 80bf 	bne.w	8007c12 <copy_T+0x316>
 8007a94:	b117      	cbz	r7, 8007a9c <copy_T+0x1a0>
 8007a96:	2c00      	cmp	r4, #0
 8007a98:	f040 809e 	bne.w	8007bd8 <copy_T+0x2dc>
 8007a9c:	9901      	ldr	r1, [sp, #4]
 8007a9e:	b111      	cbz	r1, 8007aa6 <copy_T+0x1aa>
 8007aa0:	2c00      	cmp	r4, #0
 8007aa2:	f040 8091 	bne.w	8007bc8 <copy_T+0x2cc>
 8007aa6:	9902      	ldr	r1, [sp, #8]
 8007aa8:	b111      	cbz	r1, 8007ab0 <copy_T+0x1b4>
 8007aaa:	2c00      	cmp	r4, #0
 8007aac:	f040 8084 	bne.w	8007bb8 <copy_T+0x2bc>
 8007ab0:	9903      	ldr	r1, [sp, #12]
 8007ab2:	b109      	cbz	r1, 8007ab8 <copy_T+0x1bc>
 8007ab4:	2c00      	cmp	r4, #0
 8007ab6:	d177      	bne.n	8007ba8 <copy_T+0x2ac>
 8007ab8:	9904      	ldr	r1, [sp, #16]
 8007aba:	b109      	cbz	r1, 8007ac0 <copy_T+0x1c4>
 8007abc:	2c00      	cmp	r4, #0
 8007abe:	d16b      	bne.n	8007b98 <copy_T+0x29c>
 8007ac0:	9905      	ldr	r1, [sp, #20]
 8007ac2:	b109      	cbz	r1, 8007ac8 <copy_T+0x1cc>
 8007ac4:	2c00      	cmp	r4, #0
 8007ac6:	d14d      	bne.n	8007b64 <copy_T+0x268>
 8007ac8:	9906      	ldr	r1, [sp, #24]
 8007aca:	b109      	cbz	r1, 8007ad0 <copy_T+0x1d4>
 8007acc:	2c00      	cmp	r4, #0
 8007ace:	d142      	bne.n	8007b56 <copy_T+0x25a>
 8007ad0:	9907      	ldr	r1, [sp, #28]
 8007ad2:	b109      	cbz	r1, 8007ad8 <copy_T+0x1dc>
 8007ad4:	2c00      	cmp	r4, #0
 8007ad6:	d137      	bne.n	8007b48 <copy_T+0x24c>
 8007ad8:	9908      	ldr	r1, [sp, #32]
 8007ada:	b101      	cbz	r1, 8007ade <copy_T+0x1e2>
 8007adc:	bb64      	cbnz	r4, 8007b38 <copy_T+0x23c>
 8007ade:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ae0:	b109      	cbz	r1, 8007ae6 <copy_T+0x1ea>
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	d151      	bne.n	8007b8a <copy_T+0x28e>
 8007ae6:	f1bb 0f00 	cmp.w	fp, #0
 8007aea:	d001      	beq.n	8007af0 <copy_T+0x1f4>
 8007aec:	2c00      	cmp	r4, #0
 8007aee:	d143      	bne.n	8007b78 <copy_T+0x27c>
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 12; i++) fill_pixel(buffer, x, y, 2, i, color);
    for (int i = 1; i < 12; i++) fill_pixel(buffer, x, y, 3, i, color);
}
 8007af0:	b011      	add	sp, #68	@ 0x44
 8007af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007af6:	4449      	add	r1, r9
 8007af8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007afc:	e744      	b.n	8007988 <copy_T+0x8c>
 8007afe:	44c8      	add	r8, r9
 8007b00:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8007b04:	e738      	b.n	8007978 <copy_T+0x7c>
 8007b06:	eb09 080c 	add.w	r8, r9, ip
 8007b0a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8007b0e:	e72a      	b.n	8007966 <copy_T+0x6a>
 8007b10:	eb09 040e 	add.w	r4, r9, lr
 8007b14:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007b18:	e719      	b.n	800794e <copy_T+0x52>
 8007b1a:	444c      	add	r4, r9
 8007b1c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007b20:	e709      	b.n	8007936 <copy_T+0x3a>
 8007b22:	444c      	add	r4, r9
 8007b24:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007b28:	e6fd      	b.n	8007926 <copy_T+0x2a>
 8007b2a:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 8007b2e:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007b32:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007b36:	e732      	b.n	800799e <copy_T+0xa2>
 8007b38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007b3a:	ebc1 1701 	rsb	r7, r1, r1, lsl #4
 8007b3e:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007b42:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007b46:	e7ca      	b.n	8007ade <copy_T+0x1e2>
 8007b48:	ebc9 1109 	rsb	r1, r9, r9, lsl #4
 8007b4c:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007b50:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007b54:	e7c0      	b.n	8007ad8 <copy_T+0x1dc>
 8007b56:	ebca 110a 	rsb	r1, sl, sl, lsl #4
 8007b5a:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007b5e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007b62:	e7b5      	b.n	8007ad0 <copy_T+0x1d4>
 8007b64:	ebc8 1108 	rsb	r1, r8, r8, lsl #4
 8007b68:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007b6c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007b70:	e7aa      	b.n	8007ac8 <copy_T+0x1cc>
 8007b72:	bf00      	nop
 8007b74:	240001b8 	.word	0x240001b8
 8007b78:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8007b7c:	eb0c 1c42 	add.w	ip, ip, r2, lsl #5
 8007b80:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
}
 8007b84:	b011      	add	sp, #68	@ 0x44
 8007b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007b8a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007b8e:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007b92:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007b96:	e7a6      	b.n	8007ae6 <copy_T+0x1ea>
 8007b98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007b9a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007b9e:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007ba2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007ba6:	e78b      	b.n	8007ac0 <copy_T+0x1c4>
 8007ba8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007baa:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007bae:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007bb2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007bb6:	e77f      	b.n	8007ab8 <copy_T+0x1bc>
 8007bb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007bba:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007bbe:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007bc2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007bc6:	e773      	b.n	8007ab0 <copy_T+0x1b4>
 8007bc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bca:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007bce:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007bd2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007bd6:	e766      	b.n	8007aa6 <copy_T+0x1aa>
 8007bd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bda:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007bde:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 8007be2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8007be6:	e759      	b.n	8007a9c <copy_T+0x1a0>
 8007be8:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007bec:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007bf0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007bf4:	e6f7      	b.n	80079e6 <copy_T+0xea>
 8007bf6:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007bfa:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007bfe:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007c02:	e6e4      	b.n	80079ce <copy_T+0xd2>
 8007c04:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007c08:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007c0c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007c10:	e6d1      	b.n	80079b6 <copy_T+0xba>
 8007c12:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8007c16:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 8007c1a:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8007c1e:	e739      	b.n	8007a94 <copy_T+0x198>
 8007c20:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 8007c24:	eb0e 1b4b 	add.w	fp, lr, fp, lsl #5
 8007c28:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8007c2c:	e724      	b.n	8007a78 <copy_T+0x17c>
 8007c2e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007c32:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007c36:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007c3a:	e711      	b.n	8007a60 <copy_T+0x164>
 8007c3c:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 8007c40:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007c44:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007c48:	e6fd      	b.n	8007a46 <copy_T+0x14a>
 8007c4a:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8007c4e:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007c52:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007c56:	e6ea      	b.n	8007a2e <copy_T+0x132>
 8007c58:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8007c5c:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007c60:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007c64:	e6d7      	b.n	8007a16 <copy_T+0x11a>
 8007c66:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007c6a:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 8007c6e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007c72:	e6c4      	b.n	80079fe <copy_T+0x102>

08007c74 <copy_U>:

void copy_U(uint16_t* buffer, int x, int y, uint32_t color)
{
 8007c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8007c78:	4ca0      	ldr	r4, [pc, #640]	@ (8007efc <copy_U+0x288>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c7a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8007c7e:	b091      	sub	sp, #68	@ 0x44
    int pixel_x = x_base + x + offset;
 8007c80:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c82:	bf2c      	ite	cs
 8007c84:	2400      	movcs	r4, #0
 8007c86:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 8007c88:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007c8c:	4626      	mov	r6, r4
 8007c8e:	9402      	str	r4, [sp, #8]
 8007c90:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8007c94:	bf2c      	ite	cs
 8007c96:	2400      	movcs	r4, #0
 8007c98:	2401      	movcc	r4, #1
 8007c9a:	b114      	cbz	r4, 8007ca2 <copy_U+0x2e>
 8007c9c:	2e00      	cmp	r6, #0
 8007c9e:	f040 812f 	bne.w	8007f00 <copy_U+0x28c>
    int pixel_y = y_base + y;
 8007ca2:	f102 0801 	add.w	r8, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007ca6:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8007caa:	bf2c      	ite	cs
 8007cac:	2600      	movcs	r6, #0
 8007cae:	2601      	movcc	r6, #1
 8007cb0:	9603      	str	r6, [sp, #12]
 8007cb2:	b114      	cbz	r4, 8007cba <copy_U+0x46>
 8007cb4:	2e00      	cmp	r6, #0
 8007cb6:	f040 8119 	bne.w	8007eec <copy_U+0x278>
    int pixel_y = y_base + y;
 8007cba:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007cbc:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8007cc0:	970c      	str	r7, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007cc2:	bf2c      	ite	cs
 8007cc4:	2600      	movcs	r6, #0
 8007cc6:	2601      	movcc	r6, #1
 8007cc8:	9604      	str	r6, [sp, #16]
 8007cca:	b114      	cbz	r4, 8007cd2 <copy_U+0x5e>
 8007ccc:	2e00      	cmp	r6, #0
 8007cce:	f040 8106 	bne.w	8007ede <copy_U+0x26a>
    int pixel_y = y_base + y;
 8007cd2:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007cd4:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007cd8:	960d      	str	r6, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007cda:	bf2c      	ite	cs
 8007cdc:	2700      	movcs	r7, #0
 8007cde:	2701      	movcc	r7, #1
 8007ce0:	9705      	str	r7, [sp, #20]
 8007ce2:	b114      	cbz	r4, 8007cea <copy_U+0x76>
 8007ce4:	2f00      	cmp	r7, #0
 8007ce6:	f040 80f3 	bne.w	8007ed0 <copy_U+0x25c>
    int pixel_y = y_base + y;
 8007cea:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007cec:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007cf0:	960e      	str	r6, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007cf2:	bf2c      	ite	cs
 8007cf4:	2700      	movcs	r7, #0
 8007cf6:	2701      	movcc	r7, #1
 8007cf8:	9706      	str	r7, [sp, #24]
 8007cfa:	b114      	cbz	r4, 8007d02 <copy_U+0x8e>
 8007cfc:	2f00      	cmp	r7, #0
 8007cfe:	f040 80e0 	bne.w	8007ec2 <copy_U+0x24e>
    int pixel_y = y_base + y;
 8007d02:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d04:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8007d08:	960f      	str	r6, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d0a:	bf2c      	ite	cs
 8007d0c:	2700      	movcs	r7, #0
 8007d0e:	2701      	movcc	r7, #1
 8007d10:	9707      	str	r7, [sp, #28]
 8007d12:	b114      	cbz	r4, 8007d1a <copy_U+0xa6>
 8007d14:	2f00      	cmp	r7, #0
 8007d16:	f040 80cd 	bne.w	8007eb4 <copy_U+0x240>
    int pixel_y = y_base + y;
 8007d1a:	f102 0b06 	add.w	fp, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d1e:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8007d22:	bf2c      	ite	cs
 8007d24:	2600      	movcs	r6, #0
 8007d26:	2601      	movcc	r6, #1
 8007d28:	9608      	str	r6, [sp, #32]
 8007d2a:	b114      	cbz	r4, 8007d32 <copy_U+0xbe>
 8007d2c:	2e00      	cmp	r6, #0
 8007d2e:	f040 80ba 	bne.w	8007ea6 <copy_U+0x232>
    int pixel_y = y_base + y;
 8007d32:	f102 0a07 	add.w	sl, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d36:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8007d3a:	bf2c      	ite	cs
 8007d3c:	2600      	movcs	r6, #0
 8007d3e:	2601      	movcc	r6, #1
 8007d40:	9609      	str	r6, [sp, #36]	@ 0x24
 8007d42:	b114      	cbz	r4, 8007d4a <copy_U+0xd6>
 8007d44:	2e00      	cmp	r6, #0
 8007d46:	f040 80a7 	bne.w	8007e98 <copy_U+0x224>
    int pixel_y = y_base + y;
 8007d4a:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d4e:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8007d52:	bf2c      	ite	cs
 8007d54:	2700      	movcs	r7, #0
 8007d56:	2701      	movcc	r7, #1
 8007d58:	970a      	str	r7, [sp, #40]	@ 0x28
 8007d5a:	b114      	cbz	r4, 8007d62 <copy_U+0xee>
 8007d5c:	2f00      	cmp	r7, #0
 8007d5e:	f040 8094 	bne.w	8007e8a <copy_U+0x216>
    int pixel_y = y_base + y;
 8007d62:	f102 0e09 	add.w	lr, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d66:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8007d6a:	bf2c      	ite	cs
 8007d6c:	2700      	movcs	r7, #0
 8007d6e:	2701      	movcc	r7, #1
 8007d70:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007d72:	b114      	cbz	r4, 8007d7a <copy_U+0x106>
 8007d74:	2f00      	cmp	r7, #0
 8007d76:	f040 8081 	bne.w	8007e7c <copy_U+0x208>
    int pixel_y = y_base + y;
 8007d7a:	f102 090a 	add.w	r9, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d7e:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8007d82:	bf2c      	ite	cs
 8007d84:	2700      	movcs	r7, #0
 8007d86:	2701      	movcc	r7, #1
 8007d88:	9701      	str	r7, [sp, #4]
 8007d8a:	b10c      	cbz	r4, 8007d90 <copy_U+0x11c>
 8007d8c:	2f00      	cmp	r7, #0
 8007d8e:	d16e      	bne.n	8007e6e <copy_U+0x1fa>
    int pixel_x = x_base + x + offset;
 8007d90:	f101 0c05 	add.w	ip, r1, #5
 8007d94:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007d96:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8007d9a:	bf2c      	ite	cs
 8007d9c:	2400      	movcs	r4, #0
 8007d9e:	2401      	movcc	r4, #1
 8007da0:	2c00      	cmp	r4, #0
 8007da2:	d035      	beq.n	8007e10 <copy_U+0x19c>
 8007da4:	9f02      	ldr	r7, [sp, #8]
 8007da6:	2f00      	cmp	r7, #0
 8007da8:	f040 80b1 	bne.w	8007f0e <copy_U+0x29a>
 8007dac:	2c00      	cmp	r4, #0
 8007dae:	d02f      	beq.n	8007e10 <copy_U+0x19c>
 8007db0:	9f03      	ldr	r7, [sp, #12]
 8007db2:	2f00      	cmp	r7, #0
 8007db4:	f040 80b5 	bne.w	8007f22 <copy_U+0x2ae>
 8007db8:	b354      	cbz	r4, 8007e10 <copy_U+0x19c>
 8007dba:	9f04      	ldr	r7, [sp, #16]
 8007dbc:	2f00      	cmp	r7, #0
 8007dbe:	f040 80df 	bne.w	8007f80 <copy_U+0x30c>
 8007dc2:	b32c      	cbz	r4, 8007e10 <copy_U+0x19c>
 8007dc4:	9f05      	ldr	r7, [sp, #20]
 8007dc6:	2f00      	cmp	r7, #0
 8007dc8:	f040 80d2 	bne.w	8007f70 <copy_U+0x2fc>
 8007dcc:	b304      	cbz	r4, 8007e10 <copy_U+0x19c>
 8007dce:	9f06      	ldr	r7, [sp, #24]
 8007dd0:	2f00      	cmp	r7, #0
 8007dd2:	f040 80f3 	bne.w	8007fbc <copy_U+0x348>
 8007dd6:	b1dc      	cbz	r4, 8007e10 <copy_U+0x19c>
 8007dd8:	9f07      	ldr	r7, [sp, #28]
 8007dda:	2f00      	cmp	r7, #0
 8007ddc:	f040 80e6 	bne.w	8007fac <copy_U+0x338>
 8007de0:	b1b4      	cbz	r4, 8007e10 <copy_U+0x19c>
 8007de2:	9f08      	ldr	r7, [sp, #32]
 8007de4:	2f00      	cmp	r7, #0
 8007de6:	f040 80da 	bne.w	8007f9e <copy_U+0x32a>
 8007dea:	b18c      	cbz	r4, 8007e10 <copy_U+0x19c>
 8007dec:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007dee:	2f00      	cmp	r7, #0
 8007df0:	f040 80ce 	bne.w	8007f90 <copy_U+0x31c>
 8007df4:	b164      	cbz	r4, 8007e10 <copy_U+0x19c>
 8007df6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007df8:	2f00      	cmp	r7, #0
 8007dfa:	f040 80ac 	bne.w	8007f56 <copy_U+0x2e2>
 8007dfe:	b13c      	cbz	r4, 8007e10 <copy_U+0x19c>
 8007e00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007e02:	b12e      	cbz	r6, 8007e10 <copy_U+0x19c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007e04:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8007e08:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8007e0c:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007e10:	9e01      	ldr	r6, [sp, #4]
 8007e12:	b116      	cbz	r6, 8007e1a <copy_U+0x1a6>
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	f040 8097 	bne.w	8007f48 <copy_U+0x2d4>
    int pixel_y = y_base + y;
 8007e1a:	320b      	adds	r2, #11
    int pixel_x = x_base + x + offset;
 8007e1c:	1c4c      	adds	r4, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007e1e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 8007e22:	442c      	add	r4, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007e24:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007e28:	bf2c      	ite	cs
 8007e2a:	2200      	movcs	r2, #0
 8007e2c:	2201      	movcc	r2, #1
 8007e2e:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007e32:	ea4f 1646 	mov.w	r6, r6, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007e36:	d202      	bcs.n	8007e3e <copy_U+0x1ca>
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	f040 8081 	bne.w	8007f40 <copy_U+0x2cc>
    int pixel_x = x_base + x + offset;
 8007e3e:	1c8c      	adds	r4, r1, #2
 8007e40:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007e42:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8007e46:	d201      	bcs.n	8007e4c <copy_U+0x1d8>
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	d175      	bne.n	8007f38 <copy_U+0x2c4>
    int pixel_x = x_base + x + offset;
 8007e4c:	1ccc      	adds	r4, r1, #3
 8007e4e:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007e50:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8007e54:	d201      	bcs.n	8007e5a <copy_U+0x1e6>
 8007e56:	2a00      	cmp	r2, #0
 8007e58:	d16a      	bne.n	8007f30 <copy_U+0x2bc>
    int pixel_x = x_base + x + offset;
 8007e5a:	3104      	adds	r1, #4
 8007e5c:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007e5e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8007e62:	d201      	bcs.n	8007e68 <copy_U+0x1f4>
 8007e64:	2a00      	cmp	r2, #0
 8007e66:	d17d      	bne.n	8007f64 <copy_U+0x2f0>
    for (int i = 0; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 0; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 8007e68:	b011      	add	sp, #68	@ 0x44
 8007e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007e6e:	ebc9 1409 	rsb	r4, r9, r9, lsl #4
 8007e72:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 8007e76:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8007e7a:	e789      	b.n	8007d90 <copy_U+0x11c>
 8007e7c:	ebce 190e 	rsb	r9, lr, lr, lsl #4
 8007e80:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 8007e84:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8007e88:	e777      	b.n	8007d7a <copy_U+0x106>
 8007e8a:	ebc6 1e06 	rsb	lr, r6, r6, lsl #4
 8007e8e:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8007e92:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8007e96:	e764      	b.n	8007d62 <copy_U+0xee>
 8007e98:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8007e9c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007ea0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007ea4:	e751      	b.n	8007d4a <copy_U+0xd6>
 8007ea6:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 8007eaa:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007eae:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007eb2:	e73e      	b.n	8007d32 <copy_U+0xbe>
 8007eb4:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007eb8:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007ebc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007ec0:	e72b      	b.n	8007d1a <copy_U+0xa6>
 8007ec2:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007ec6:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007eca:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007ece:	e718      	b.n	8007d02 <copy_U+0x8e>
 8007ed0:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007ed4:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007ed8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007edc:	e705      	b.n	8007cea <copy_U+0x76>
 8007ede:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 8007ee2:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007ee6:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007eea:	e6f2      	b.n	8007cd2 <copy_U+0x5e>
 8007eec:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8007ef0:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007ef4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007ef8:	e6df      	b.n	8007cba <copy_U+0x46>
 8007efa:	bf00      	nop
 8007efc:	240001b8 	.word	0x240001b8
 8007f00:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8007f04:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007f08:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007f0c:	e6c9      	b.n	8007ca2 <copy_U+0x2e>
 8007f0e:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8007f12:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007f16:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007f1a:	2c00      	cmp	r4, #0
 8007f1c:	f47f af48 	bne.w	8007db0 <copy_U+0x13c>
 8007f20:	e776      	b.n	8007e10 <copy_U+0x19c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007f22:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8007f26:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8007f2a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8007f2e:	e743      	b.n	8007db8 <copy_U+0x144>
 8007f30:	4434      	add	r4, r6
 8007f32:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007f36:	e790      	b.n	8007e5a <copy_U+0x1e6>
 8007f38:	4434      	add	r4, r6
 8007f3a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007f3e:	e785      	b.n	8007e4c <copy_U+0x1d8>
 8007f40:	4434      	add	r4, r6
 8007f42:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8007f46:	e77a      	b.n	8007e3e <copy_U+0x1ca>
 8007f48:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8007f4c:	eb0c 1c49 	add.w	ip, ip, r9, lsl #5
 8007f50:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8007f54:	e761      	b.n	8007e1a <copy_U+0x1a6>
 8007f56:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8007f5a:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8007f5e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8007f62:	e74c      	b.n	8007dfe <copy_U+0x18a>
 8007f64:	4431      	add	r1, r6
 8007f66:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8007f6a:	b011      	add	sp, #68	@ 0x44
 8007f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8007f70:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8007f72:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8007f76:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007f7a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007f7e:	e725      	b.n	8007dcc <copy_U+0x158>
 8007f80:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8007f82:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8007f86:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007f8a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007f8e:	e718      	b.n	8007dc2 <copy_U+0x14e>
 8007f90:	ebca 170a 	rsb	r7, sl, sl, lsl #4
 8007f94:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007f98:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007f9c:	e72a      	b.n	8007df4 <copy_U+0x180>
 8007f9e:	ebcb 170b 	rsb	r7, fp, fp, lsl #4
 8007fa2:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007fa6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007faa:	e71e      	b.n	8007dea <copy_U+0x176>
 8007fac:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8007fae:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8007fb2:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007fb6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007fba:	e711      	b.n	8007de0 <copy_U+0x16c>
 8007fbc:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8007fbe:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8007fc2:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8007fc6:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8007fca:	e704      	b.n	8007dd6 <copy_U+0x162>

08007fcc <copy_V>:

void copy_V(uint16_t* buffer, int x, int y, uint32_t color)
{
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8007fd0:	4cab      	ldr	r4, [pc, #684]	@ (8008280 <copy_V+0x2b4>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007fd2:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8007fd6:	b08b      	sub	sp, #44	@ 0x2c
    int pixel_x = x_base + x + offset;
 8007fd8:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007fda:	bf2c      	ite	cs
 8007fdc:	2400      	movcs	r4, #0
 8007fde:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 8007fe0:	eb01 0b05 	add.w	fp, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007fe4:	4626      	mov	r6, r4
 8007fe6:	9401      	str	r4, [sp, #4]
 8007fe8:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8007fec:	bf2c      	ite	cs
 8007fee:	2400      	movcs	r4, #0
 8007ff0:	2401      	movcc	r4, #1
 8007ff2:	b114      	cbz	r4, 8007ffa <copy_V+0x2e>
 8007ff4:	2e00      	cmp	r6, #0
 8007ff6:	f040 813b 	bne.w	8008270 <copy_V+0x2a4>
    int pixel_y = y_base + y;
 8007ffa:	1c57      	adds	r7, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8007ffc:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8008000:	bf2c      	ite	cs
 8008002:	2600      	movcs	r6, #0
 8008004:	2601      	movcc	r6, #1
 8008006:	9603      	str	r6, [sp, #12]
 8008008:	b114      	cbz	r4, 8008010 <copy_V+0x44>
 800800a:	2e00      	cmp	r6, #0
 800800c:	f040 8129 	bne.w	8008262 <copy_V+0x296>
    int pixel_y = y_base + y;
 8008010:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008012:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8008016:	9609      	str	r6, [sp, #36]	@ 0x24
 8008018:	bf2c      	ite	cs
 800801a:	2600      	movcs	r6, #0
 800801c:	2601      	movcc	r6, #1
 800801e:	9604      	str	r6, [sp, #16]
 8008020:	b114      	cbz	r4, 8008028 <copy_V+0x5c>
 8008022:	2e00      	cmp	r6, #0
 8008024:	f040 8169 	bne.w	80082fa <copy_V+0x32e>
    int pixel_y = y_base + y;
 8008028:	f102 0903 	add.w	r9, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800802c:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8008030:	bf2c      	ite	cs
 8008032:	2600      	movcs	r6, #0
 8008034:	2601      	movcc	r6, #1
 8008036:	9605      	str	r6, [sp, #20]
 8008038:	b114      	cbz	r4, 8008040 <copy_V+0x74>
 800803a:	2e00      	cmp	r6, #0
 800803c:	f040 8156 	bne.w	80082ec <copy_V+0x320>
    int pixel_y = y_base + y;
 8008040:	f102 0a04 	add.w	sl, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008044:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8008048:	bf2c      	ite	cs
 800804a:	2600      	movcs	r6, #0
 800804c:	2601      	movcc	r6, #1
 800804e:	9606      	str	r6, [sp, #24]
 8008050:	b114      	cbz	r4, 8008058 <copy_V+0x8c>
 8008052:	2e00      	cmp	r6, #0
 8008054:	f040 8143 	bne.w	80082de <copy_V+0x312>
    int pixel_y = y_base + y;
 8008058:	f102 0e05 	add.w	lr, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800805c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8008060:	bf2c      	ite	cs
 8008062:	2600      	movcs	r6, #0
 8008064:	2601      	movcc	r6, #1
 8008066:	9607      	str	r6, [sp, #28]
 8008068:	b114      	cbz	r4, 8008070 <copy_V+0xa4>
 800806a:	2e00      	cmp	r6, #0
 800806c:	f040 8130 	bne.w	80082d0 <copy_V+0x304>
    int pixel_y = y_base + y;
 8008070:	f102 0c06 	add.w	ip, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008074:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8008078:	bf2c      	ite	cs
 800807a:	2600      	movcs	r6, #0
 800807c:	2601      	movcc	r6, #1
 800807e:	9608      	str	r6, [sp, #32]
 8008080:	b114      	cbz	r4, 8008088 <copy_V+0xbc>
 8008082:	2e00      	cmp	r6, #0
 8008084:	f040 8141 	bne.w	800830a <copy_V+0x33e>
    int pixel_y = y_base + y;
 8008088:	f102 0807 	add.w	r8, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800808c:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008090:	bf2c      	ite	cs
 8008092:	2600      	movcs	r6, #0
 8008094:	2601      	movcc	r6, #1
 8008096:	9602      	str	r6, [sp, #8]
 8008098:	b114      	cbz	r4, 80080a0 <copy_V+0xd4>
 800809a:	2e00      	cmp	r6, #0
 800809c:	f040 8111 	bne.w	80082c2 <copy_V+0x2f6>
    int pixel_x = x_base + x + offset;
 80080a0:	1d4c      	adds	r4, r1, #5
 80080a2:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80080a4:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 80080a8:	bf2c      	ite	cs
 80080aa:	f04f 0b00 	movcs.w	fp, #0
 80080ae:	f04f 0b01 	movcc.w	fp, #1
 80080b2:	f1bb 0f00 	cmp.w	fp, #0
 80080b6:	d038      	beq.n	800812a <copy_V+0x15e>
 80080b8:	9e01      	ldr	r6, [sp, #4]
 80080ba:	2e00      	cmp	r6, #0
 80080bc:	f040 812c 	bne.w	8008318 <copy_V+0x34c>
 80080c0:	f1bb 0f00 	cmp.w	fp, #0
 80080c4:	d031      	beq.n	800812a <copy_V+0x15e>
 80080c6:	9e03      	ldr	r6, [sp, #12]
 80080c8:	2e00      	cmp	r6, #0
 80080ca:	f040 8130 	bne.w	800832e <copy_V+0x362>
 80080ce:	f1bb 0f00 	cmp.w	fp, #0
 80080d2:	d02a      	beq.n	800812a <copy_V+0x15e>
 80080d4:	9e04      	ldr	r6, [sp, #16]
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	f040 814c 	bne.w	8008374 <copy_V+0x3a8>
 80080dc:	f1bb 0f00 	cmp.w	fp, #0
 80080e0:	d023      	beq.n	800812a <copy_V+0x15e>
 80080e2:	9e05      	ldr	r6, [sp, #20]
 80080e4:	2e00      	cmp	r6, #0
 80080e6:	f040 813e 	bne.w	8008366 <copy_V+0x39a>
 80080ea:	f1bb 0f00 	cmp.w	fp, #0
 80080ee:	d01c      	beq.n	800812a <copy_V+0x15e>
 80080f0:	9e06      	ldr	r6, [sp, #24]
 80080f2:	2e00      	cmp	r6, #0
 80080f4:	f040 8130 	bne.w	8008358 <copy_V+0x38c>
 80080f8:	f1bb 0f00 	cmp.w	fp, #0
 80080fc:	d015      	beq.n	800812a <copy_V+0x15e>
 80080fe:	9e07      	ldr	r6, [sp, #28]
 8008100:	2e00      	cmp	r6, #0
 8008102:	f040 8122 	bne.w	800834a <copy_V+0x37e>
 8008106:	f1bb 0f00 	cmp.w	fp, #0
 800810a:	d00e      	beq.n	800812a <copy_V+0x15e>
 800810c:	9e08      	ldr	r6, [sp, #32]
 800810e:	2e00      	cmp	r6, #0
 8008110:	f040 8114 	bne.w	800833c <copy_V+0x370>
 8008114:	f1bb 0f00 	cmp.w	fp, #0
 8008118:	d007      	beq.n	800812a <copy_V+0x15e>
 800811a:	9e02      	ldr	r6, [sp, #8]
 800811c:	b12e      	cbz	r6, 800812a <copy_V+0x15e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800811e:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8008122:	eb04 1448 	add.w	r4, r4, r8, lsl #5
 8008126:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_x = x_base + x + offset;
 800812a:	1c4c      	adds	r4, r1, #1
 800812c:	1d0e      	adds	r6, r1, #4
    int pixel_y = y_base + y;
 800812e:	f102 0c08 	add.w	ip, r2, #8
 8008132:	f102 0809 	add.w	r8, r2, #9
    int pixel_x = x_base + x + offset;
 8008136:	442c      	add	r4, r5
 8008138:	eb06 0e05 	add.w	lr, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800813c:	ea6f 060c 	mvn.w	r6, ip
 8008140:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8008144:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8008148:	bf2c      	ite	cs
 800814a:	2700      	movcs	r7, #0
 800814c:	2701      	movcc	r7, #1
 800814e:	2f00      	cmp	r7, #0
 8008150:	d056      	beq.n	8008200 <copy_V+0x234>
 8008152:	2e00      	cmp	r6, #0
 8008154:	d054      	beq.n	8008200 <copy_V+0x234>
 8008156:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800815a:	f2c0 8093 	blt.w	8008284 <copy_V+0x2b8>
    int pixel_x = x_base + x + offset;
 800815e:	1c8e      	adds	r6, r1, #2
    int pixel_y = y_base + y;
 8008160:	f102 040a 	add.w	r4, r2, #10
    int pixel_x = x_base + x + offset;
 8008164:	3103      	adds	r1, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008166:	f240 1edf 	movw	lr, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 800816a:	442e      	add	r6, r5
 800816c:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800816e:	43e5      	mvns	r5, r4
 8008170:	4576      	cmp	r6, lr
 8008172:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 8008176:	bf8c      	ite	hi
 8008178:	f04f 0c00 	movhi.w	ip, #0
 800817c:	f04f 0c01 	movls.w	ip, #1
 8008180:	ea1c 0705 	ands.w	r7, ip, r5
 8008184:	d022      	beq.n	80081cc <copy_V+0x200>
 8008186:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800818a:	da1c      	bge.n	80081c6 <copy_V+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800818c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008190:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008194:	b29d      	uxth	r5, r3
 8008196:	eb06 1c44 	add.w	ip, r6, r4, lsl #5
 800819a:	ea4f 1444 	mov.w	r4, r4, lsl #5
 800819e:	f820 501c 	strh.w	r5, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80081a2:	f080 80fb 	bcs.w	800839c <copy_V+0x3d0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80081a6:	440c      	add	r4, r1
    int pixel_y = y_base + y;
 80081a8:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80081aa:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80081ae:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80081b2:	da08      	bge.n	80081c6 <copy_V+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80081b4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	eb06 1642 	add.w	r6, r6, r2, lsl #5
 80081be:	0152      	lsls	r2, r2, #5
 80081c0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80081c4:	b9b7      	cbnz	r7, 80081f4 <copy_V+0x228>
    fill_pixel(buffer, x, y, 4, 9, color);
    fill_pixel(buffer, x, y, 2, 10, color);
    fill_pixel(buffer, x, y, 3, 10, color);
    fill_pixel(buffer, x, y, 2, 11, color);
    fill_pixel(buffer, x, y, 3, 11, color);
}
 80081c6:	b00b      	add	sp, #44	@ 0x2c
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80081cc:	4571      	cmp	r1, lr
 80081ce:	bf8c      	ite	hi
 80081d0:	2700      	movhi	r7, #0
 80081d2:	2701      	movls	r7, #1
 80081d4:	403d      	ands	r5, r7
 80081d6:	d139      	bne.n	800824c <copy_V+0x280>
 80081d8:	320b      	adds	r2, #11
 80081da:	d4f4      	bmi.n	80081c6 <copy_V+0x1fa>
 80081dc:	f1bc 0f00 	cmp.w	ip, #0
 80081e0:	d1e5      	bne.n	80081ae <copy_V+0x1e2>
 80081e2:	2f00      	cmp	r7, #0
 80081e4:	d0ef      	beq.n	80081c6 <copy_V+0x1fa>
 80081e6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80081ea:	daec      	bge.n	80081c6 <copy_V+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80081ec:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	0152      	lsls	r2, r2, #5
 80081f4:	440a      	add	r2, r1
 80081f6:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 80081fa:	b00b      	add	sp, #44	@ 0x2c
 80081fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008200:	f112 0f09 	cmn.w	r2, #9
 8008204:	bfb4      	ite	lt
 8008206:	f04f 0900 	movlt.w	r9, #0
 800820a:	f04f 0901 	movge.w	r9, #1
 800820e:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8008212:	bf2c      	ite	cs
 8008214:	f04f 0a00 	movcs.w	sl, #0
 8008218:	f04f 0a01 	movcc.w	sl, #1
 800821c:	f1b9 0f00 	cmp.w	r9, #0
 8008220:	d002      	beq.n	8008228 <copy_V+0x25c>
 8008222:	2f00      	cmp	r7, #0
 8008224:	f040 80cf 	bne.w	80083c6 <copy_V+0x3fa>
 8008228:	ea16 060a 	ands.w	r6, r6, sl
 800822c:	f040 80aa 	bne.w	8008384 <copy_V+0x3b8>
 8008230:	ea09 060a 	and.w	r6, r9, sl
 8008234:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008238:	da91      	bge.n	800815e <copy_V+0x192>
 800823a:	2e00      	cmp	r6, #0
 800823c:	d08f      	beq.n	800815e <copy_V+0x192>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800823e:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8008242:	eb0e 1848 	add.w	r8, lr, r8, lsl #5
 8008246:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800824a:	e788      	b.n	800815e <copy_V+0x192>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800824c:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8008250:	dab9      	bge.n	80081c6 <copy_V+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008252:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8008256:	462f      	mov	r7, r5
 8008258:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800825c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8008260:	e7ba      	b.n	80081d8 <copy_V+0x20c>
 8008262:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 8008266:	eb0b 1646 	add.w	r6, fp, r6, lsl #5
 800826a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800826e:	e6cf      	b.n	8008010 <copy_V+0x44>
 8008270:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8008274:	eb0b 1646 	add.w	r6, fp, r6, lsl #5
 8008278:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800827c:	e6bd      	b.n	8007ffa <copy_V+0x2e>
 800827e:	bf00      	nop
 8008280:	240001b8 	.word	0x240001b8
 8008284:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008288:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800828c:	b29e      	uxth	r6, r3
 800828e:	eb04 144c 	add.w	r4, r4, ip, lsl #5
 8008292:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8008296:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800829a:	f000 808b 	beq.w	80083b4 <copy_V+0x3e8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800829e:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80082a2:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80082a6:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80082aa:	f4bf af58 	bcs.w	800815e <copy_V+0x192>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80082ae:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80082b2:	44f4      	add	ip, lr
 80082b4:	eb0e 1848 	add.w	r8, lr, r8, lsl #5
 80082b8:	f820 601c 	strh.w	r6, [r0, ip, lsl #1]
 80082bc:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80082c0:	e74d      	b.n	800815e <copy_V+0x192>
 80082c2:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 80082c6:	eb0b 1b44 	add.w	fp, fp, r4, lsl #5
 80082ca:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 80082ce:	e6e7      	b.n	80080a0 <copy_V+0xd4>
 80082d0:	ebce 1c0e 	rsb	ip, lr, lr, lsl #4
 80082d4:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 80082d8:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80082dc:	e6c8      	b.n	8008070 <copy_V+0xa4>
 80082de:	ebca 1c0a 	rsb	ip, sl, sl, lsl #4
 80082e2:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 80082e6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80082ea:	e6b5      	b.n	8008058 <copy_V+0x8c>
 80082ec:	ebc9 1c09 	rsb	ip, r9, r9, lsl #4
 80082f0:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 80082f4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80082f8:	e6a2      	b.n	8008040 <copy_V+0x74>
 80082fa:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80082fc:	ebc6 1c06 	rsb	ip, r6, r6, lsl #4
 8008300:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 8008304:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8008308:	e68e      	b.n	8008028 <copy_V+0x5c>
 800830a:	ebcc 180c 	rsb	r8, ip, ip, lsl #4
 800830e:	eb0b 1848 	add.w	r8, fp, r8, lsl #5
 8008312:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8008316:	e6b7      	b.n	8008088 <copy_V+0xbc>
 8008318:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800831c:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8008320:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008324:	f1bb 0f00 	cmp.w	fp, #0
 8008328:	f47f aecd 	bne.w	80080c6 <copy_V+0xfa>
 800832c:	e6fd      	b.n	800812a <copy_V+0x15e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800832e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8008332:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 8008336:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800833a:	e6c8      	b.n	80080ce <copy_V+0x102>
 800833c:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8008340:	eb04 1c4c 	add.w	ip, r4, ip, lsl #5
 8008344:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8008348:	e6e4      	b.n	8008114 <copy_V+0x148>
 800834a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800834e:	eb04 1e4e 	add.w	lr, r4, lr, lsl #5
 8008352:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8008356:	e6d6      	b.n	8008106 <copy_V+0x13a>
 8008358:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 800835c:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8008360:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8008364:	e6c8      	b.n	80080f8 <copy_V+0x12c>
 8008366:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 800836a:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 800836e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8008372:	e6ba      	b.n	80080ea <copy_V+0x11e>
 8008374:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008376:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800837a:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 800837e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8008382:	e6ab      	b.n	80080dc <copy_V+0x110>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008384:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8008388:	f6bf af54 	bge.w	8008234 <copy_V+0x268>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800838c:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 8008390:	464e      	mov	r6, r9
 8008392:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 8008396:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800839a:	e74b      	b.n	8008234 <copy_V+0x268>
    int pixel_y = y_base + y;
 800839c:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800839e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80083a2:	f43f af10 	beq.w	80081c6 <copy_V+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80083a6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80083aa:	eb06 1342 	add.w	r3, r6, r2, lsl #5
 80083ae:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083b2:	e708      	b.n	80081c6 <copy_V+0x1fa>
 80083b4:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 80083b8:	f4bf aed1 	bcs.w	800815e <copy_V+0x192>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80083bc:	4c08      	ldr	r4, [pc, #32]	@ (80083e0 <copy_V+0x414>)
 80083be:	4474      	add	r4, lr
 80083c0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083c4:	e6cb      	b.n	800815e <copy_V+0x192>
 80083c6:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80083ca:	f6bf aec8 	bge.w	800815e <copy_V+0x192>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80083ce:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 80083d2:	4656      	mov	r6, sl
 80083d4:	eb04 1447 	add.w	r4, r4, r7, lsl #5
 80083d8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083dc:	e72a      	b.n	8008234 <copy_V+0x268>
 80083de:	bf00      	nop
 80083e0:	0001fc20 	.word	0x0001fc20

080083e4 <copy_W>:

void copy_W(uint16_t* buffer, int x, int y, uint32_t color)
{
 80083e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80083e8:	4c9c      	ldr	r4, [pc, #624]	@ (800865c <copy_W+0x278>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083ea:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 80083ee:	b093      	sub	sp, #76	@ 0x4c
    int pixel_x = x_base + x + offset;
 80083f0:	6826      	ldr	r6, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083f2:	bf2c      	ite	cs
 80083f4:	2400      	movcs	r4, #0
 80083f6:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 80083f8:	eb01 0c06 	add.w	ip, r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80083fc:	4625      	mov	r5, r4
 80083fe:	9403      	str	r4, [sp, #12]
 8008400:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8008404:	bf2c      	ite	cs
 8008406:	2400      	movcs	r4, #0
 8008408:	2401      	movcc	r4, #1
 800840a:	b114      	cbz	r4, 8008412 <copy_W+0x2e>
 800840c:	2d00      	cmp	r5, #0
 800840e:	f040 8161 	bne.w	80086d4 <copy_W+0x2f0>
    int pixel_y = y_base + y;
 8008412:	f102 0801 	add.w	r8, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008416:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800841a:	bf2c      	ite	cs
 800841c:	2500      	movcs	r5, #0
 800841e:	2501      	movcc	r5, #1
 8008420:	9504      	str	r5, [sp, #16]
 8008422:	b114      	cbz	r4, 800842a <copy_W+0x46>
 8008424:	2d00      	cmp	r5, #0
 8008426:	f040 81a4 	bne.w	8008772 <copy_W+0x38e>
    int pixel_y = y_base + y;
 800842a:	1c95      	adds	r5, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800842c:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 8008430:	950e      	str	r5, [sp, #56]	@ 0x38
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008432:	bf2c      	ite	cs
 8008434:	2700      	movcs	r7, #0
 8008436:	2701      	movcc	r7, #1
 8008438:	9705      	str	r7, [sp, #20]
 800843a:	b114      	cbz	r4, 8008442 <copy_W+0x5e>
 800843c:	2f00      	cmp	r7, #0
 800843e:	f040 8191 	bne.w	8008764 <copy_W+0x380>
    int pixel_y = y_base + y;
 8008442:	1cd5      	adds	r5, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008444:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 8008448:	950f      	str	r5, [sp, #60]	@ 0x3c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800844a:	bf2c      	ite	cs
 800844c:	2700      	movcs	r7, #0
 800844e:	2701      	movcc	r7, #1
 8008450:	9706      	str	r7, [sp, #24]
 8008452:	b114      	cbz	r4, 800845a <copy_W+0x76>
 8008454:	2f00      	cmp	r7, #0
 8008456:	f040 817e 	bne.w	8008756 <copy_W+0x372>
    int pixel_y = y_base + y;
 800845a:	1d15      	adds	r5, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800845c:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 8008460:	9510      	str	r5, [sp, #64]	@ 0x40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008462:	bf2c      	ite	cs
 8008464:	2700      	movcs	r7, #0
 8008466:	2701      	movcc	r7, #1
 8008468:	9707      	str	r7, [sp, #28]
 800846a:	b114      	cbz	r4, 8008472 <copy_W+0x8e>
 800846c:	2f00      	cmp	r7, #0
 800846e:	f040 816b 	bne.w	8008748 <copy_W+0x364>
    int pixel_y = y_base + y;
 8008472:	1d55      	adds	r5, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008474:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_y = y_base + y;
 8008478:	9511      	str	r5, [sp, #68]	@ 0x44
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800847a:	bf2c      	ite	cs
 800847c:	2700      	movcs	r7, #0
 800847e:	2701      	movcc	r7, #1
 8008480:	9708      	str	r7, [sp, #32]
 8008482:	b114      	cbz	r4, 800848a <copy_W+0xa6>
 8008484:	2f00      	cmp	r7, #0
 8008486:	f040 8158 	bne.w	800873a <copy_W+0x356>
    int pixel_y = y_base + y;
 800848a:	f102 0b06 	add.w	fp, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800848e:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 8008492:	bf2c      	ite	cs
 8008494:	2500      	movcs	r5, #0
 8008496:	2501      	movcc	r5, #1
 8008498:	9509      	str	r5, [sp, #36]	@ 0x24
 800849a:	b114      	cbz	r4, 80084a2 <copy_W+0xbe>
 800849c:	2d00      	cmp	r5, #0
 800849e:	f040 8145 	bne.w	800872c <copy_W+0x348>
    int pixel_y = y_base + y;
 80084a2:	f102 0a07 	add.w	sl, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80084a6:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 80084aa:	bf2c      	ite	cs
 80084ac:	2500      	movcs	r5, #0
 80084ae:	2501      	movcc	r5, #1
 80084b0:	950a      	str	r5, [sp, #40]	@ 0x28
 80084b2:	b114      	cbz	r4, 80084ba <copy_W+0xd6>
 80084b4:	2d00      	cmp	r5, #0
 80084b6:	f040 8132 	bne.w	800871e <copy_W+0x33a>
    int pixel_y = y_base + y;
 80084ba:	f102 0e08 	add.w	lr, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80084be:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80084c2:	bf2c      	ite	cs
 80084c4:	2500      	movcs	r5, #0
 80084c6:	2501      	movcc	r5, #1
 80084c8:	950b      	str	r5, [sp, #44]	@ 0x2c
 80084ca:	b114      	cbz	r4, 80084d2 <copy_W+0xee>
 80084cc:	2d00      	cmp	r5, #0
 80084ce:	f040 811f 	bne.w	8008710 <copy_W+0x32c>
    int pixel_y = y_base + y;
 80084d2:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80084d6:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80084da:	9701      	str	r7, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80084dc:	bf2c      	ite	cs
 80084de:	2500      	movcs	r5, #0
 80084e0:	2501      	movcc	r5, #1
 80084e2:	950c      	str	r5, [sp, #48]	@ 0x30
 80084e4:	b114      	cbz	r4, 80084ec <copy_W+0x108>
 80084e6:	2d00      	cmp	r5, #0
 80084e8:	f040 810b 	bne.w	8008702 <copy_W+0x31e>
    int pixel_y = y_base + y;
 80084ec:	f102 050a 	add.w	r5, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80084f0:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 80084f4:	bf2c      	ite	cs
 80084f6:	2700      	movcs	r7, #0
 80084f8:	2701      	movcc	r7, #1
 80084fa:	970d      	str	r7, [sp, #52]	@ 0x34
 80084fc:	b114      	cbz	r4, 8008504 <copy_W+0x120>
 80084fe:	2f00      	cmp	r7, #0
 8008500:	f040 80f8 	bne.w	80086f4 <copy_W+0x310>
    int pixel_y = y_base + y;
 8008504:	f102 090b 	add.w	r9, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008508:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 800850c:	bf2c      	ite	cs
 800850e:	2700      	movcs	r7, #0
 8008510:	2701      	movcc	r7, #1
 8008512:	9702      	str	r7, [sp, #8]
 8008514:	b117      	cbz	r7, 800851c <copy_W+0x138>
 8008516:	2c00      	cmp	r4, #0
 8008518:	f040 80d5 	bne.w	80086c6 <copy_W+0x2e2>
    int pixel_x = x_base + x + offset;
 800851c:	f101 0c05 	add.w	ip, r1, #5
 8008520:	44b4      	add	ip, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008522:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8008526:	bf2c      	ite	cs
 8008528:	2400      	movcs	r4, #0
 800852a:	2401      	movcc	r4, #1
 800852c:	2c00      	cmp	r4, #0
 800852e:	d03b      	beq.n	80085a8 <copy_W+0x1c4>
 8008530:	9f03      	ldr	r7, [sp, #12]
 8008532:	2f00      	cmp	r7, #0
 8008534:	f040 8124 	bne.w	8008780 <copy_W+0x39c>
 8008538:	2c00      	cmp	r4, #0
 800853a:	d035      	beq.n	80085a8 <copy_W+0x1c4>
 800853c:	9f04      	ldr	r7, [sp, #16]
 800853e:	2f00      	cmp	r7, #0
 8008540:	f040 813e 	bne.w	80087c0 <copy_W+0x3dc>
 8008544:	2c00      	cmp	r4, #0
 8008546:	d02f      	beq.n	80085a8 <copy_W+0x1c4>
 8008548:	9f05      	ldr	r7, [sp, #20]
 800854a:	2f00      	cmp	r7, #0
 800854c:	f040 8130 	bne.w	80087b0 <copy_W+0x3cc>
 8008550:	b354      	cbz	r4, 80085a8 <copy_W+0x1c4>
 8008552:	9f06      	ldr	r7, [sp, #24]
 8008554:	2f00      	cmp	r7, #0
 8008556:	f040 8160 	bne.w	800881a <copy_W+0x436>
 800855a:	b32c      	cbz	r4, 80085a8 <copy_W+0x1c4>
 800855c:	9f07      	ldr	r7, [sp, #28]
 800855e:	2f00      	cmp	r7, #0
 8008560:	f040 8153 	bne.w	800880a <copy_W+0x426>
 8008564:	b304      	cbz	r4, 80085a8 <copy_W+0x1c4>
 8008566:	9f08      	ldr	r7, [sp, #32]
 8008568:	2f00      	cmp	r7, #0
 800856a:	f040 8146 	bne.w	80087fa <copy_W+0x416>
 800856e:	b1dc      	cbz	r4, 80085a8 <copy_W+0x1c4>
 8008570:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8008572:	2f00      	cmp	r7, #0
 8008574:	f040 813a 	bne.w	80087ec <copy_W+0x408>
 8008578:	b1b4      	cbz	r4, 80085a8 <copy_W+0x1c4>
 800857a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800857c:	2f00      	cmp	r7, #0
 800857e:	f040 8110 	bne.w	80087a2 <copy_W+0x3be>
 8008582:	b18c      	cbz	r4, 80085a8 <copy_W+0x1c4>
 8008584:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008586:	2f00      	cmp	r7, #0
 8008588:	f040 8104 	bne.w	8008794 <copy_W+0x3b0>
 800858c:	b164      	cbz	r4, 80085a8 <copy_W+0x1c4>
 800858e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8008590:	2f00      	cmp	r7, #0
 8008592:	f040 811c 	bne.w	80087ce <copy_W+0x3ea>
 8008596:	b13c      	cbz	r4, 80085a8 <copy_W+0x1c4>
 8008598:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800859a:	b12f      	cbz	r7, 80085a8 <copy_W+0x1c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800859c:	ebc5 1805 	rsb	r8, r5, r5, lsl #4
 80085a0:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80085a4:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80085a8:	9f02      	ldr	r7, [sp, #8]
 80085aa:	b117      	cbz	r7, 80085b2 <copy_W+0x1ce>
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	f040 8116 	bne.w	80087de <copy_W+0x3fa>
    int pixel_x = x_base + x + offset;
 80085b2:	1c8c      	adds	r4, r1, #2
 80085b4:	f101 0c03 	add.w	ip, r1, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80085b8:	ea6f 080e 	mvn.w	r8, lr
    int pixel_x = x_base + x + offset;
 80085bc:	4434      	add	r4, r6
 80085be:	44b4      	add	ip, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80085c0:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80085c4:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 80085c8:	bf2c      	ite	cs
 80085ca:	f04f 0900 	movcs.w	r9, #0
 80085ce:	f04f 0901 	movcc.w	r9, #1
 80085d2:	f1b9 0f00 	cmp.w	r9, #0
 80085d6:	d043      	beq.n	8008660 <copy_W+0x27c>
 80085d8:	f1b8 0f00 	cmp.w	r8, #0
 80085dc:	d040      	beq.n	8008660 <copy_W+0x27c>
 80085de:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80085e2:	da7e      	bge.n	80086e2 <copy_W+0x2fe>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80085e4:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80085e8:	9f01      	ldr	r7, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	eb04 144e 	add.w	r4, r4, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80085f0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80085f4:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 80085f8:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80085fc:	f000 8121 	beq.w	8008842 <copy_W+0x45e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008600:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008604:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008608:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800860c:	d209      	bcs.n	8008622 <copy_W+0x23e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800860e:	44e6      	add	lr, ip
 8008610:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
 8008614:	9a01      	ldr	r2, [sp, #4]
 8008616:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 800861a:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 800861e:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    int pixel_x = x_base + x + offset;
 8008622:	1c4a      	adds	r2, r1, #1
 8008624:	4432      	add	r2, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008626:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 800862a:	d23c      	bcs.n	80086a6 <copy_W+0x2c2>
 800862c:	2d00      	cmp	r5, #0
 800862e:	db3a      	blt.n	80086a6 <copy_W+0x2c2>
 8008630:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 8008634:	da0f      	bge.n	8008656 <copy_W+0x272>
    int pixel_x = x_base + x + offset;
 8008636:	3104      	adds	r1, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008638:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800863c:	b29b      	uxth	r3, r3
    int pixel_x = x_base + x + offset;
 800863e:	4431      	add	r1, r6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008640:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 8008644:	016d      	lsls	r5, r5, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008646:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800864a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800864e:	d202      	bcs.n	8008656 <copy_W+0x272>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008650:	4429      	add	r1, r5
 8008652:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    fill_pixel(buffer, x, y, 2, 9, color);
    fill_pixel(buffer, x, y, 3, 8, color);
    fill_pixel(buffer, x, y, 3, 9, color);
    fill_pixel(buffer, x, y, 1, 10, color);
    fill_pixel(buffer, x, y, 4, 10, color);
}
 8008656:	b013      	add	sp, #76	@ 0x4c
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865c:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008660:	f112 0f09 	cmn.w	r2, #9
 8008664:	bfb4      	ite	lt
 8008666:	2200      	movlt	r2, #0
 8008668:	2201      	movge	r2, #1
 800866a:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800866e:	bf2c      	ite	cs
 8008670:	f04f 0a00 	movcs.w	sl, #0
 8008674:	f04f 0a01 	movcc.w	sl, #1
 8008678:	b11a      	cbz	r2, 8008682 <copy_W+0x29e>
 800867a:	f1b9 0f00 	cmp.w	r9, #0
 800867e:	f040 80e9 	bne.w	8008854 <copy_W+0x470>
 8008682:	ea18 080a 	ands.w	r8, r8, sl
 8008686:	f040 80d0 	bne.w	800882a <copy_W+0x446>
 800868a:	ea02 080a 	and.w	r8, r2, sl
 800868e:	9a01      	ldr	r2, [sp, #4]
 8008690:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8008694:	dac5      	bge.n	8008622 <copy_W+0x23e>
 8008696:	f1b8 0f00 	cmp.w	r8, #0
 800869a:	d1bb      	bne.n	8008614 <copy_W+0x230>
    int pixel_x = x_base + x + offset;
 800869c:	1c4a      	adds	r2, r1, #1
 800869e:	4432      	add	r2, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80086a0:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 80086a4:	d3c2      	bcc.n	800862c <copy_W+0x248>
    int pixel_x = x_base + x + offset;
 80086a6:	3104      	adds	r1, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80086a8:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
    int pixel_x = x_base + x + offset;
 80086ac:	4431      	add	r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80086ae:	d2d2      	bcs.n	8008656 <copy_W+0x272>
 80086b0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80086b4:	d2cf      	bcs.n	8008656 <copy_W+0x272>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80086b6:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	016d      	lsls	r5, r5, #5
 80086be:	4429      	add	r1, r5
 80086c0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80086c4:	e7c7      	b.n	8008656 <copy_W+0x272>
 80086c6:	ebc9 1409 	rsb	r4, r9, r9, lsl #4
 80086ca:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 80086ce:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80086d2:	e723      	b.n	800851c <copy_W+0x138>
 80086d4:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 80086d8:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 80086dc:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80086e0:	e697      	b.n	8008412 <copy_W+0x2e>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80086e2:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80086e6:	d29c      	bcs.n	8008622 <copy_W+0x23e>
    int pixel_x = x_base + x + offset;
 80086e8:	1c4a      	adds	r2, r1, #1
 80086ea:	4432      	add	r2, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80086ec:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 80086f0:	d3b1      	bcc.n	8008656 <copy_W+0x272>
 80086f2:	e7d8      	b.n	80086a6 <copy_W+0x2c2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80086f4:	ebc5 1905 	rsb	r9, r5, r5, lsl #4
 80086f8:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 80086fc:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8008700:	e700      	b.n	8008504 <copy_W+0x120>
 8008702:	ebc7 1507 	rsb	r5, r7, r7, lsl #4
 8008706:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 800870a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800870e:	e6ed      	b.n	80084ec <copy_W+0x108>
 8008710:	ebce 150e 	rsb	r5, lr, lr, lsl #4
 8008714:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8008718:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800871c:	e6d9      	b.n	80084d2 <copy_W+0xee>
 800871e:	ebca 150a 	rsb	r5, sl, sl, lsl #4
 8008722:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8008726:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800872a:	e6c6      	b.n	80084ba <copy_W+0xd6>
 800872c:	ebcb 150b 	rsb	r5, fp, fp, lsl #4
 8008730:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8008734:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008738:	e6b3      	b.n	80084a2 <copy_W+0xbe>
 800873a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800873e:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8008742:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008746:	e6a0      	b.n	800848a <copy_W+0xa6>
 8008748:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800874c:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8008750:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008754:	e68d      	b.n	8008472 <copy_W+0x8e>
 8008756:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800875a:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 800875e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008762:	e67a      	b.n	800845a <copy_W+0x76>
 8008764:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8008768:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 800876c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008770:	e667      	b.n	8008442 <copy_W+0x5e>
 8008772:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
 8008776:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 800877a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800877e:	e654      	b.n	800842a <copy_W+0x46>
 8008780:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 8008784:	eb0c 1747 	add.w	r7, ip, r7, lsl #5
 8008788:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800878c:	2c00      	cmp	r4, #0
 800878e:	f47f aed5 	bne.w	800853c <copy_W+0x158>
 8008792:	e709      	b.n	80085a8 <copy_W+0x1c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008794:	ebce 180e 	rsb	r8, lr, lr, lsl #4
 8008798:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 800879c:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80087a0:	e6f4      	b.n	800858c <copy_W+0x1a8>
 80087a2:	ebca 180a 	rsb	r8, sl, sl, lsl #4
 80087a6:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80087aa:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80087ae:	e6e8      	b.n	8008582 <copy_W+0x19e>
 80087b0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80087b2:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 80087b6:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80087ba:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80087be:	e6c7      	b.n	8008550 <copy_W+0x16c>
 80087c0:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80087c4:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80087c8:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80087cc:	e6ba      	b.n	8008544 <copy_W+0x160>
 80087ce:	9f01      	ldr	r7, [sp, #4]
 80087d0:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 80087d4:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80087d8:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80087dc:	e6db      	b.n	8008596 <copy_W+0x1b2>
 80087de:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 80087e2:	eb0c 1c49 	add.w	ip, ip, r9, lsl #5
 80087e6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80087ea:	e6e2      	b.n	80085b2 <copy_W+0x1ce>
 80087ec:	ebcb 180b 	rsb	r8, fp, fp, lsl #4
 80087f0:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 80087f4:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 80087f8:	e6be      	b.n	8008578 <copy_W+0x194>
 80087fa:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80087fc:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8008800:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8008804:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8008808:	e6b1      	b.n	800856e <copy_W+0x18a>
 800880a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800880c:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8008810:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8008814:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8008818:	e6a4      	b.n	8008564 <copy_W+0x180>
 800881a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800881c:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
 8008820:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8008824:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8008828:	e697      	b.n	800855a <copy_W+0x176>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800882a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800882e:	f6bf af2e 	bge.w	800868e <copy_W+0x2aa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008832:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8008836:	4690      	mov	r8, r2
 8008838:	eb0c 124e 	add.w	r2, ip, lr, lsl #5
 800883c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8008840:	e725      	b.n	800868e <copy_W+0x2aa>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008842:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8008846:	f4bf af4f 	bcs.w	80086e8 <copy_W+0x304>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800884a:	4a09      	ldr	r2, [pc, #36]	@ (8008870 <copy_W+0x48c>)
 800884c:	4462      	add	r2, ip
 800884e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008852:	e6e6      	b.n	8008622 <copy_W+0x23e>
 8008854:	9a01      	ldr	r2, [sp, #4]
 8008856:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800885a:	f6bf af45 	bge.w	80086e8 <copy_W+0x304>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800885e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8008862:	46d0      	mov	r8, sl
 8008864:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8008868:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800886c:	e70f      	b.n	800868e <copy_W+0x2aa>
 800886e:	bf00      	nop
 8008870:	0001fc20 	.word	0x0001fc20

08008874 <copy_X>:

void copy_X(uint16_t* buffer, int x, int y, uint32_t color)
{
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8008878:	4c9b      	ldr	r4, [pc, #620]	@ (8008ae8 <copy_X+0x274>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800887a:	f240 1edf 	movw	lr, #479	@ 0x1df
{
 800887e:	b087      	sub	sp, #28
    int pixel_x = x_base + x + offset;
 8008880:	1d4e      	adds	r6, r1, #5
 8008882:	6824      	ldr	r4, [r4, #0]
    int pixel_y = y_base + y;
 8008884:	f102 0c01 	add.w	ip, r2, #1
    int pixel_x = x_base + x + offset;
 8008888:	190f      	adds	r7, r1, r4
 800888a:	1935      	adds	r5, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800888c:	4577      	cmp	r7, lr
 800888e:	463e      	mov	r6, r7
    int pixel_x = x_base + x + offset;
 8008890:	9705      	str	r7, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008892:	bf8c      	ite	hi
 8008894:	2700      	movhi	r7, #0
 8008896:	2701      	movls	r7, #1
    int pixel_x = x_base + x + offset;
 8008898:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800889a:	9702      	str	r7, [sp, #8]
 800889c:	463d      	mov	r5, r7
 800889e:	43d7      	mvns	r7, r2
 80088a0:	0fff      	lsrs	r7, r7, #31
 80088a2:	403d      	ands	r5, r7
 80088a4:	9500      	str	r5, [sp, #0]
 80088a6:	f000 80fb 	beq.w	8008aa0 <copy_X+0x22c>
 80088aa:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 80088ae:	f280 80ef 	bge.w	8008a90 <copy_X+0x21c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80088b2:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80088b6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80088ba:	fa1f fe83 	uxth.w	lr, r3
 80088be:	eb06 1745 	add.w	r7, r6, r5, lsl #5
 80088c2:	ea4f 1545 	mov.w	r5, r5, lsl #5
 80088c6:	f820 e017 	strh.w	lr, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80088ca:	f000 8303 	beq.w	8008ed4 <copy_X+0x660>
 80088ce:	9e01      	ldr	r6, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80088d0:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80088d4:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80088d8:	f820 e017 	strh.w	lr, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80088dc:	f080 80dd 	bcs.w	8008a9a <copy_X+0x226>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80088e0:	4435      	add	r5, r6
 80088e2:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
 80088e6:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80088ea:	9d01      	ldr	r5, [sp, #4]
 80088ec:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 80088f0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 80088f4:	1c4d      	adds	r5, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80088f6:	f240 1edf 	movw	lr, #479	@ 0x1df
    int pixel_y = y_base + y;
 80088fa:	1c97      	adds	r7, r2, #2
    int pixel_x = x_base + x + offset;
 80088fc:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80088fe:	ea6f 0c07 	mvn.w	ip, r7
    int pixel_x = x_base + x + offset;
 8008902:	462e      	mov	r6, r5
 8008904:	1d0d      	adds	r5, r1, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008906:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 800890a:	4576      	cmp	r6, lr
    int pixel_x = x_base + x + offset;
 800890c:	eb05 0b04 	add.w	fp, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008910:	9604      	str	r6, [sp, #16]
 8008912:	bf8c      	ite	hi
 8008914:	2600      	movhi	r6, #0
 8008916:	2601      	movls	r6, #1
 8008918:	45f3      	cmp	fp, lr
 800891a:	9603      	str	r6, [sp, #12]
 800891c:	bf8c      	ite	hi
 800891e:	f04f 0e00 	movhi.w	lr, #0
 8008922:	f04f 0e01 	movls.w	lr, #1
 8008926:	ea16 050c 	ands.w	r5, r6, ip
 800892a:	f000 80df 	beq.w	8008aec <copy_X+0x278>
 800892e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8008932:	f2c0 81a1 	blt.w	8008c78 <copy_X+0x404>
    int pixel_x = x_base + x + offset;
 8008936:	f101 0c02 	add.w	ip, r1, #2
 800893a:	3103      	adds	r1, #3
 800893c:	44a4      	add	ip, r4
 800893e:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008940:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8008944:	f0c0 81f1 	bcc.w	8008d2a <copy_X+0x4b6>
 8008948:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800894c:	f0c0 81db 	bcc.w	8008d06 <copy_X+0x492>
 8008950:	2400      	movs	r4, #0
 8008952:	46a8      	mov	r8, r5
    int pixel_y = y_base + y;
 8008954:	f102 0a05 	add.w	sl, r2, #5
 8008958:	4675      	mov	r5, lr
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800895a:	4627      	mov	r7, r4
 800895c:	ea08 0804 	and.w	r8, r8, r4
 8008960:	fa5f f888 	uxtb.w	r8, r8
 8008964:	f1b8 0f00 	cmp.w	r8, #0
 8008968:	f040 81c3 	bne.w	8008cf2 <copy_X+0x47e>
    int pixel_y = y_base + y;
 800896c:	f102 0806 	add.w	r8, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008970:	ea6f 0e08 	mvn.w	lr, r8
 8008974:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8008978:	f1be 0f00 	cmp.w	lr, #0
 800897c:	f000 8123 	beq.w	8008bc6 <copy_X+0x352>
 8008980:	2f00      	cmp	r7, #0
 8008982:	f000 8120 	beq.w	8008bc6 <copy_X+0x352>
 8008986:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800898a:	f280 81d4 	bge.w	8008d36 <copy_X+0x4c2>
 800898e:	46a2      	mov	sl, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008990:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
    int pixel_y = y_base + y;
 8008994:	f102 0907 	add.w	r9, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008998:	eb0c 1444 	add.w	r4, ip, r4, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800899c:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80089a0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 80089a4:	ea4f 1408 	mov.w	r4, r8, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80089a8:	f000 82f9 	beq.w	8008f9e <copy_X+0x72a>
 80089ac:	4654      	mov	r4, sl
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80089ae:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 80089b2:	fa1f fe83 	uxth.w	lr, r3
 80089b6:	eb0c 1c47 	add.w	ip, ip, r7, lsl #5
 80089ba:	017f      	lsls	r7, r7, #5
 80089bc:	f820 e01c 	strh.w	lr, [r0, ip, lsl #1]
 80089c0:	ea4f 1c09 	mov.w	ip, r9, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80089c4:	f1ba 0f00 	cmp.w	sl, #0
 80089c8:	f000 82c5 	beq.w	8008f56 <copy_X+0x6e2>
 80089cc:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80089d0:	da09      	bge.n	80089e6 <copy_X+0x172>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80089d2:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 80089d6:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 80089da:	f820 e018 	strh.w	lr, [r0, r8, lsl #1]
 80089de:	ebac 0c09 	sub.w	ip, ip, r9
 80089e2:	ea4f 174c 	mov.w	r7, ip, lsl #5
 80089e6:	440f      	add	r7, r1
    int pixel_y = y_base + y;
 80089e8:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80089ec:	43cc      	mvns	r4, r1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80089ee:	f820 e017 	strh.w	lr, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80089f2:	0fe4      	lsrs	r4, r4, #31
 80089f4:	2c00      	cmp	r4, #0
 80089f6:	f040 810b 	bne.w	8008c10 <copy_X+0x39c>
    int pixel_y = y_base + y;
 80089fa:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80089fe:	402c      	ands	r4, r5
 8008a00:	ea6f 0c07 	mvn.w	ip, r7
 8008a04:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8008a08:	f1bc 0f00 	cmp.w	ip, #0
 8008a0c:	d003      	beq.n	8008a16 <copy_X+0x1a2>
 8008a0e:	9e03      	ldr	r6, [sp, #12]
 8008a10:	2e00      	cmp	r6, #0
 8008a12:	f040 829a 	bne.w	8008f4a <copy_X+0x6d6>
 8008a16:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008a1a:	ea0c 0505 	and.w	r5, ip, r5
 8008a1e:	da02      	bge.n	8008a26 <copy_X+0x1b2>
 8008a20:	2c00      	cmp	r4, #0
 8008a22:	f040 820f 	bne.w	8008e44 <copy_X+0x5d0>
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	f040 81a1 	bne.w	8008d6e <copy_X+0x4fa>
    int pixel_y = y_base + y;
 8008a2c:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008a30:	43cc      	mvns	r4, r1
 8008a32:	0fe4      	lsrs	r4, r4, #31
 8008a34:	2c00      	cmp	r4, #0
 8008a36:	f000 81a6 	beq.w	8008d86 <copy_X+0x512>
 8008a3a:	9d02      	ldr	r5, [sp, #8]
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	f000 81a2 	beq.w	8008d86 <copy_X+0x512>
 8008a42:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008a46:	da20      	bge.n	8008a8a <copy_X+0x216>
    int pixel_y = y_base + y;
 8008a48:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008a4a:	ebc1 1401 	rsb	r4, r1, r1, lsl #4
 8008a4e:	9d05      	ldr	r5, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008a50:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008a54:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8008a58:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008a5c:	f000 8224 	beq.w	8008ea8 <copy_X+0x634>
 8008a60:	9c00      	ldr	r4, [sp, #0]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008a62:	fa1f fe83 	uxth.w	lr, r3
 8008a66:	9d05      	ldr	r5, [sp, #20]
 8008a68:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 8008a6c:	eb05 1543 	add.w	r5, r5, r3, lsl #5
 8008a70:	015b      	lsls	r3, r3, #5
 8008a72:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
 8008a76:	0115      	lsls	r5, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008a78:	2c00      	cmp	r4, #0
 8008a7a:	f040 8252 	bne.w	8008f22 <copy_X+0x6ae>
 8008a7e:	9a00      	ldr	r2, [sp, #0]
 8008a80:	b11a      	cbz	r2, 8008a8a <copy_X+0x216>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008a82:	9a01      	ldr	r2, [sp, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	f820 e013 	strh.w	lr, [r0, r3, lsl #1]
    fill_pixel(buffer, x, y, 4, 9, color);
    fill_pixel(buffer, x, y, 0, 10, color);
    fill_pixel(buffer, x, y, 0, 11, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    fill_pixel(buffer, x, y, 5, 11, color);
}
 8008a8a:	b007      	add	sp, #28
 8008a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008a90:	9d01      	ldr	r5, [sp, #4]
 8008a92:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8008a96:	f4ff af2d 	bcc.w	80088f4 <copy_X+0x80>
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	9500      	str	r5, [sp, #0]
 8008a9e:	e729      	b.n	80088f4 <copy_X+0x80>
 8008aa0:	9d01      	ldr	r5, [sp, #4]
 8008aa2:	4575      	cmp	r5, lr
 8008aa4:	bf8c      	ite	hi
 8008aa6:	2500      	movhi	r5, #0
 8008aa8:	2501      	movls	r5, #1
 8008aaa:	1c56      	adds	r6, r2, #1
 8008aac:	bfb4      	ite	lt
 8008aae:	f04f 0e00 	movlt.w	lr, #0
 8008ab2:	f04f 0e01 	movge.w	lr, #1
 8008ab6:	f1be 0f00 	cmp.w	lr, #0
 8008aba:	d003      	beq.n	8008ac4 <copy_X+0x250>
 8008abc:	9e02      	ldr	r6, [sp, #8]
 8008abe:	2e00      	cmp	r6, #0
 8008ac0:	f040 8277 	bne.w	8008fb2 <copy_X+0x73e>
 8008ac4:	ea17 0605 	ands.w	r6, r7, r5
 8008ac8:	9600      	str	r6, [sp, #0]
 8008aca:	f040 817d 	bne.w	8008dc8 <copy_X+0x554>
 8008ace:	ea0e 0e05 	and.w	lr, lr, r5
 8008ad2:	9500      	str	r5, [sp, #0]
 8008ad4:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8008ad8:	f6bf af0c 	bge.w	80088f4 <copy_X+0x80>
 8008adc:	f1be 0f00 	cmp.w	lr, #0
 8008ae0:	f43f af08 	beq.w	80088f4 <copy_X+0x80>
 8008ae4:	e6ff      	b.n	80088e6 <copy_X+0x72>
 8008ae6:	bf00      	nop
 8008ae8:	240001b8 	.word	0x240001b8
    int pixel_y = y_base + y;
 8008aec:	f102 0803 	add.w	r8, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008af0:	ea6f 0908 	mvn.w	r9, r8
 8008af4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8008af8:	f1b9 0f00 	cmp.w	r9, #0
 8008afc:	d002      	beq.n	8008b04 <copy_X+0x290>
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	f040 828a 	bne.w	8009018 <copy_X+0x7a4>
 8008b04:	ea1c 050e 	ands.w	r5, ip, lr
 8008b08:	f040 8169 	bne.w	8008dde <copy_X+0x56a>
 8008b0c:	ea09 090e 	and.w	r9, r9, lr
 8008b10:	4675      	mov	r5, lr
 8008b12:	fa5f f989 	uxtb.w	r9, r9
 8008b16:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008b1a:	da08      	bge.n	8008b2e <copy_X+0x2ba>
 8008b1c:	f1b9 0f00 	cmp.w	r9, #0
 8008b20:	d005      	beq.n	8008b2e <copy_X+0x2ba>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b22:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8008b26:	eb0b 1848 	add.w	r8, fp, r8, lsl #5
 8008b2a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    int pixel_x = x_base + x + offset;
 8008b2e:	f101 0c02 	add.w	ip, r1, #2
 8008b32:	3103      	adds	r1, #3
    int pixel_y = y_base + y;
 8008b34:	f102 0e04 	add.w	lr, r2, #4
 8008b38:	f102 0a05 	add.w	sl, r2, #5
    int pixel_x = x_base + x + offset;
 8008b3c:	44a4      	add	ip, r4
 8008b3e:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008b40:	f240 14df 	movw	r4, #479	@ 0x1df
 8008b44:	ea6f 090e 	mvn.w	r9, lr
 8008b48:	45a4      	cmp	ip, r4
 8008b4a:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8008b4e:	bf8c      	ite	hi
 8008b50:	2700      	movhi	r7, #0
 8008b52:	2701      	movls	r7, #1
 8008b54:	42a1      	cmp	r1, r4
 8008b56:	bf8c      	ite	hi
 8008b58:	2400      	movhi	r4, #0
 8008b5a:	2401      	movls	r4, #1
 8008b5c:	ea17 0809 	ands.w	r8, r7, r9
 8008b60:	f000 80a7 	beq.w	8008cb2 <copy_X+0x43e>
 8008b64:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8008b68:	f280 80e5 	bge.w	8008d36 <copy_X+0x4c2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b6c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008b70:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b74:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8008b78:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008b7c:	f000 81fe 	beq.w	8008f7c <copy_X+0x708>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b80:	ebca 190a 	rsb	r9, sl, sl, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008b84:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b88:	fa1f fe83 	uxth.w	lr, r3
 8008b8c:	eb0c 1449 	add.w	r4, ip, r9, lsl #5
 8008b90:	ea4f 1949 	mov.w	r9, r9, lsl #5
 8008b94:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008b98:	f080 8169 	bcs.w	8008e6e <copy_X+0x5fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008b9c:	eb09 0401 	add.w	r4, r9, r1
 8008ba0:	4647      	mov	r7, r8
 8008ba2:	f5a4 74f0 	sub.w	r4, r4, #480	@ 0x1e0
 8008ba6:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
 8008baa:	4489      	add	r9, r1
    int pixel_y = y_base + y;
 8008bac:	f102 0806 	add.w	r8, r2, #6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008bb0:	f820 e019 	strh.w	lr, [r0, r9, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008bb4:	ea6f 0e08 	mvn.w	lr, r8
 8008bb8:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8008bbc:	ea17 0a0e 	ands.w	sl, r7, lr
 8008bc0:	f040 81cd 	bne.w	8008f5e <copy_X+0x6ea>
 8008bc4:	2401      	movs	r4, #1
    int pixel_y = y_base + y;
 8008bc6:	f102 0907 	add.w	r9, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008bca:	ea0e 0a04 	and.w	sl, lr, r4
 8008bce:	ea6f 0e09 	mvn.w	lr, r9
 8008bd2:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8008bd6:	f1be 0f00 	cmp.w	lr, #0
 8008bda:	f040 810b 	bne.w	8008df4 <copy_X+0x580>
 8008bde:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008be2:	f280 809f 	bge.w	8008d24 <copy_X+0x4b0>
 8008be6:	f1ba 0f00 	cmp.w	sl, #0
 8008bea:	f000 809b 	beq.w	8008d24 <copy_X+0x4b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008bee:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8008bf2:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 8008bf6:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008bfa:	f1be 0f00 	cmp.w	lr, #0
 8008bfe:	f040 8174 	bne.w	8008eea <copy_X+0x676>
    int pixel_y = y_base + y;
 8008c02:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c06:	43cc      	mvns	r4, r1
 8008c08:	0fe4      	lsrs	r4, r4, #31
 8008c0a:	2c00      	cmp	r4, #0
 8008c0c:	f43f aef5 	beq.w	80089fa <copy_X+0x186>
 8008c10:	9e03      	ldr	r6, [sp, #12]
 8008c12:	2e00      	cmp	r6, #0
 8008c14:	f43f aef1 	beq.w	80089fa <copy_X+0x186>
 8008c18:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008c1c:	f280 81a4 	bge.w	8008f68 <copy_X+0x6f4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c20:	ebc1 1401 	rsb	r4, r1, r1, lsl #4
 8008c24:	9e04      	ldr	r6, [sp, #16]
    int pixel_y = y_base + y;
 8008c26:	f102 0709 	add.w	r7, r2, #9
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c2a:	eb06 1444 	add.w	r4, r6, r4, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c2e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c32:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c36:	f000 813e 	beq.w	8008eb6 <copy_X+0x642>
 8008c3a:	46ac      	mov	ip, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c3c:	ebc7 1407 	rsb	r4, r7, r7, lsl #4
 8008c40:	9e04      	ldr	r6, [sp, #16]
 8008c42:	fa1f fe83 	uxth.w	lr, r3
 8008c46:	eb06 1844 	add.w	r8, r6, r4, lsl #5
 8008c4a:	0164      	lsls	r4, r4, #5
 8008c4c:	f820 e018 	strh.w	lr, [r0, r8, lsl #1]
 8008c50:	ea4f 1807 	mov.w	r8, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c54:	2d00      	cmp	r5, #0
 8008c56:	f000 8174 	beq.w	8008f42 <copy_X+0x6ce>
 8008c5a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008c5e:	f280 811f 	bge.w	8008ea0 <copy_X+0x62c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c62:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008c66:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
 8008c6a:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c6e:	f1bc 0f00 	cmp.w	ip, #0
 8008c72:	f43f aedb 	beq.w	8008a2c <copy_X+0x1b8>
 8008c76:	e10f      	b.n	8008e98 <copy_X+0x624>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c78:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    int pixel_y = y_base + y;
 8008c7c:	f102 0803 	add.w	r8, r2, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c80:	9e04      	ldr	r6, [sp, #16]
 8008c82:	fa1f fe83 	uxth.w	lr, r3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c86:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c8a:	eb06 1c47 	add.w	ip, r6, r7, lsl #5
 8008c8e:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8008c92:	f820 e01c 	strh.w	lr, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c96:	f000 8178 	beq.w	8008f8a <copy_X+0x716>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008c9a:	f50c 7cf0 	add.w	ip, ip, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008c9e:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008ca2:	f820 e01c 	strh.w	lr, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ca6:	f080 80e0 	bcs.w	8008e6a <copy_X+0x5f6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008caa:	445f      	add	r7, fp
 8008cac:	f820 e017 	strh.w	lr, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008cb0:	e737      	b.n	8008b22 <copy_X+0x2ae>
 8008cb2:	1d56      	adds	r6, r2, #5
 8008cb4:	bfb4      	ite	lt
 8008cb6:	f04f 0800 	movlt.w	r8, #0
 8008cba:	f04f 0801 	movge.w	r8, #1
 8008cbe:	ea18 0607 	ands.w	r6, r8, r7
 8008cc2:	f040 8196 	bne.w	8008ff2 <copy_X+0x77e>
 8008cc6:	f1b9 0f00 	cmp.w	r9, #0
 8008cca:	f43f ae47 	beq.w	800895c <copy_X+0xe8>
 8008cce:	2c00      	cmp	r4, #0
 8008cd0:	f43f ae44 	beq.w	800895c <copy_X+0xe8>
 8008cd4:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8008cd8:	f280 8184 	bge.w	8008fe4 <copy_X+0x770>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008cdc:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8008ce0:	2401      	movs	r4, #1
 8008ce2:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 8008ce6:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008cea:	f1b8 0f00 	cmp.w	r8, #0
 8008cee:	f43f ae3d 	beq.w	800896c <copy_X+0xf8>
 8008cf2:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8008cf6:	da21      	bge.n	8008d3c <copy_X+0x4c8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008cf8:	ebca 190a 	rsb	r9, sl, sl, lsl #4
 8008cfc:	fa1f fe83 	uxth.w	lr, r3
 8008d00:	ea4f 1949 	mov.w	r9, r9, lsl #5
 8008d04:	e751      	b.n	8008baa <copy_X+0x336>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d06:	2700      	movs	r7, #0
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	f040 8146 	bne.w	8008f9a <copy_X+0x726>
 8008d0e:	2f00      	cmp	r7, #0
 8008d10:	f040 8143 	bne.w	8008f9a <copy_X+0x726>
    int pixel_y = y_base + y;
 8008d14:	f102 0907 	add.w	r9, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d18:	4675      	mov	r5, lr
 8008d1a:	2401      	movs	r4, #1
 8008d1c:	ea6f 0e09 	mvn.w	lr, r9
 8008d20:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8008d24:	ea04 0e0e 	and.w	lr, r4, lr
 8008d28:	e767      	b.n	8008bfa <copy_X+0x386>
 8008d2a:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008d2e:	4675      	mov	r5, lr
 8008d30:	bf2c      	ite	cs
 8008d32:	2400      	movcs	r4, #0
 8008d34:	2401      	movcc	r4, #1
 8008d36:	2c00      	cmp	r4, #0
 8008d38:	f000 80a1 	beq.w	8008e7e <copy_X+0x60a>
    int pixel_y = y_base + y;
 8008d3c:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d40:	9e03      	ldr	r6, [sp, #12]
 8008d42:	43cc      	mvns	r4, r1
 8008d44:	0fe4      	lsrs	r4, r4, #31
 8008d46:	2e00      	cmp	r6, #0
 8008d48:	f43f ae57 	beq.w	80089fa <copy_X+0x186>
 8008d4c:	2c00      	cmp	r4, #0
 8008d4e:	f43f ae54 	beq.w	80089fa <copy_X+0x186>
 8008d52:	2d00      	cmp	r5, #0
 8008d54:	f43f ae6a 	beq.w	8008a2c <copy_X+0x1b8>
 8008d58:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8008d5c:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d60:	da05      	bge.n	8008d6e <copy_X+0x4fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008d62:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008d66:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
 8008d6a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d6e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8008d72:	f2c0 808d 	blt.w	8008e90 <copy_X+0x61c>
    int pixel_y = y_base + y;
 8008d76:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d7a:	9d02      	ldr	r5, [sp, #8]
 8008d7c:	43cc      	mvns	r4, r1
 8008d7e:	0fe4      	lsrs	r4, r4, #31
 8008d80:	b10d      	cbz	r5, 8008d86 <copy_X+0x512>
 8008d82:	2c00      	cmp	r4, #0
 8008d84:	d14d      	bne.n	8008e22 <copy_X+0x5ae>
 8008d86:	9d00      	ldr	r5, [sp, #0]
    int pixel_y = y_base + y;
 8008d88:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008d8a:	402c      	ands	r4, r5
 8008d8c:	43d5      	mvns	r5, r2
 8008d8e:	0fed      	lsrs	r5, r5, #31
 8008d90:	b11d      	cbz	r5, 8008d9a <copy_X+0x526>
 8008d92:	9e02      	ldr	r6, [sp, #8]
 8008d94:	2e00      	cmp	r6, #0
 8008d96:	f040 80b1 	bne.w	8008efc <copy_X+0x688>
 8008d9a:	9e00      	ldr	r6, [sp, #0]
 8008d9c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008da0:	ea06 0605 	and.w	r6, r6, r5
 8008da4:	9600      	str	r6, [sp, #0]
 8008da6:	da01      	bge.n	8008dac <copy_X+0x538>
 8008da8:	2c00      	cmp	r4, #0
 8008daa:	d152      	bne.n	8008e52 <copy_X+0x5de>
 8008dac:	9900      	ldr	r1, [sp, #0]
 8008dae:	2900      	cmp	r1, #0
 8008db0:	f43f ae6b 	beq.w	8008a8a <copy_X+0x216>
 8008db4:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8008db8:	f6bf ae67 	bge.w	8008a8a <copy_X+0x216>
 8008dbc:	fa1f fe83 	uxth.w	lr, r3
 8008dc0:	0115      	lsls	r5, r2, #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008dc2:	1aad      	subs	r5, r5, r2
 8008dc4:	016b      	lsls	r3, r5, #5
 8008dc6:	e65c      	b.n	8008a82 <copy_X+0x20e>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008dc8:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8008dcc:	da5e      	bge.n	8008e8c <copy_X+0x618>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008dce:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8008dd2:	9e01      	ldr	r6, [sp, #4]
 8008dd4:	eb06 1545 	add.w	r5, r6, r5, lsl #5
 8008dd8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8008ddc:	e67a      	b.n	8008ad4 <copy_X+0x260>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008dde:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8008de2:	f6bf aea4 	bge.w	8008b2e <copy_X+0x2ba>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008de6:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8008dea:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
 8008dee:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8008df2:	e690      	b.n	8008b16 <copy_X+0x2a2>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008df4:	2f00      	cmp	r7, #0
 8008df6:	f43f aef2 	beq.w	8008bde <copy_X+0x36a>
 8008dfa:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8008dfe:	f6ff add6 	blt.w	80089ae <copy_X+0x13a>
 8008e02:	f1ba 0f00 	cmp.w	sl, #0
 8008e06:	f000 80f0 	beq.w	8008fea <copy_X+0x776>
 8008e0a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008e0e:	da95      	bge.n	8008d3c <copy_X+0x4c8>
 8008e10:	ea4f 1408 	mov.w	r4, r8, lsl #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008e14:	eba4 0408 	sub.w	r4, r4, r8
 8008e18:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8008e1c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e20:	e78c      	b.n	8008d3c <copy_X+0x4c8>
 8008e22:	9c00      	ldr	r4, [sp, #0]
 8008e24:	2c00      	cmp	r4, #0
 8008e26:	f43f ae30 	beq.w	8008a8a <copy_X+0x216>
 8008e2a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 8008e2e:	f102 020b 	add.w	r2, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e32:	dabf      	bge.n	8008db4 <copy_X+0x540>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008e34:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008e38:	9c01      	ldr	r4, [sp, #4]
 8008e3a:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 8008e3e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e42:	e7b7      	b.n	8008db4 <copy_X+0x540>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008e44:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008e48:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
 8008e4c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8008e50:	e5e9      	b.n	8008a26 <copy_X+0x1b2>
 8008e52:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008e56:	9c01      	ldr	r4, [sp, #4]
 8008e58:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 8008e5c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e60:	9900      	ldr	r1, [sp, #0]
 8008e62:	2900      	cmp	r1, #0
 8008e64:	f43f ae11 	beq.w	8008a8a <copy_X+0x216>
 8008e68:	e7a4      	b.n	8008db4 <copy_X+0x540>
 8008e6a:	2500      	movs	r5, #0
 8008e6c:	e65f      	b.n	8008b2e <copy_X+0x2ba>
 8008e6e:	f04f 0a00 	mov.w	sl, #0
    int pixel_y = y_base + y;
 8008e72:	f102 0806 	add.w	r8, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e76:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008e7a:	f6ff ad89 	blt.w	8008990 <copy_X+0x11c>
 8008e7e:	9904      	ldr	r1, [sp, #16]
 8008e80:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008e84:	d370      	bcc.n	8008f68 <copy_X+0x6f4>
    int pixel_y = y_base + y;
 8008e86:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008e8a:	e5cc      	b.n	8008a26 <copy_X+0x1b2>
 8008e8c:	46b6      	mov	lr, r6
 8008e8e:	e621      	b.n	8008ad4 <copy_X+0x260>
 8008e90:	fa1f fe83 	uxth.w	lr, r3
 8008e94:	ea4f 1807 	mov.w	r8, r7, lsl #4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008e98:	eba8 0807 	sub.w	r8, r8, r7
 8008e9c:	ea4f 1448 	mov.w	r4, r8, lsl #5
 8008ea0:	445c      	add	r4, fp
 8008ea2:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
 8008ea6:	e5c1      	b.n	8008a2c <copy_X+0x1b8>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ea8:	9a00      	ldr	r2, [sp, #0]
 8008eaa:	2a00      	cmp	r2, #0
 8008eac:	f43f aded 	beq.w	8008a8a <copy_X+0x216>
 8008eb0:	f240 110f 	movw	r1, #271	@ 0x10f
 8008eb4:	e02d      	b.n	8008f12 <copy_X+0x69e>
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	f43f adb8 	beq.w	8008a2c <copy_X+0x1b8>
 8008ebc:	f240 110f 	movw	r1, #271	@ 0x10f
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008ec0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008ec4:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
 8008ec8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ecc:	2d00      	cmp	r5, #0
 8008ece:	f43f adad 	beq.w	8008a2c <copy_X+0x1b8>
 8008ed2:	e750      	b.n	8008d76 <copy_X+0x502>
 8008ed4:	9d01      	ldr	r5, [sp, #4]
 8008ed6:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8008eda:	f4bf adde 	bcs.w	8008a9a <copy_X+0x226>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008ede:	462e      	mov	r6, r5
 8008ee0:	4d5b      	ldr	r5, [pc, #364]	@ (8009050 <copy_X+0x7dc>)
 8008ee2:	4435      	add	r5, r6
 8008ee4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008ee8:	e504      	b.n	80088f4 <copy_X+0x80>
 8008eea:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 8008eee:	f6bf af25 	bge.w	8008d3c <copy_X+0x4c8>
 8008ef2:	fa1f fe83 	uxth.w	lr, r3
 8008ef6:	ea4f 1c09 	mov.w	ip, r9, lsl #4
 8008efa:	e570      	b.n	80089de <copy_X+0x16a>
 8008efc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8008f00:	f6ff adaf 	blt.w	8008a62 <copy_X+0x1ee>
 8008f04:	2c00      	cmp	r4, #0
 8008f06:	f43f adc0 	beq.w	8008a8a <copy_X+0x216>
 8008f0a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008f0e:	f6bf adbc 	bge.w	8008a8a <copy_X+0x216>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008f12:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008f16:	9a01      	ldr	r2, [sp, #4]
 8008f18:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8008f1c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008f20:	e5b3      	b.n	8008a8a <copy_X+0x216>
 8008f22:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008f26:	f6bf adac 	bge.w	8008a82 <copy_X+0x20e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008f2a:	9b01      	ldr	r3, [sp, #4]
 8008f2c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8008f30:	eb03 1141 	add.w	r1, r3, r1, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008f34:	9b00      	ldr	r3, [sp, #0]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008f36:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f43f ada5 	beq.w	8008a8a <copy_X+0x216>
 8008f40:	e73f      	b.n	8008dc2 <copy_X+0x54e>
 8008f42:	f1bc 0f00 	cmp.w	ip, #0
 8008f46:	d1ab      	bne.n	8008ea0 <copy_X+0x62c>
 8008f48:	e570      	b.n	8008a2c <copy_X+0x1b8>
 8008f4a:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8008f4e:	da3f      	bge.n	8008fd0 <copy_X+0x75c>
 8008f50:	46ac      	mov	ip, r5
 8008f52:	4625      	mov	r5, r4
 8008f54:	e672      	b.n	8008c3c <copy_X+0x3c8>
 8008f56:	2c00      	cmp	r4, #0
 8008f58:	f47f ad45 	bne.w	80089e6 <copy_X+0x172>
 8008f5c:	e651      	b.n	8008c02 <copy_X+0x38e>
 8008f5e:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 8008f62:	f6ff ad15 	blt.w	8008990 <copy_X+0x11c>
 8008f66:	e6e9      	b.n	8008d3c <copy_X+0x4c8>
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	f47f af04 	bne.w	8008d76 <copy_X+0x502>
 8008f6e:	9905      	ldr	r1, [sp, #20]
 8008f70:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008f74:	f4ff ad89 	bcc.w	8008a8a <copy_X+0x216>
    int pixel_y = y_base + y;
 8008f78:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008f7a:	e717      	b.n	8008dac <copy_X+0x538>
 8008f7c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008f80:	4647      	mov	r7, r8
 8008f82:	d214      	bcs.n	8008fae <copy_X+0x73a>
 8008f84:	f240 1e0f 	movw	lr, #271	@ 0x10f
 8008f88:	e6a8      	b.n	8008cdc <copy_X+0x468>
 8008f8a:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8008f8e:	d20b      	bcs.n	8008fa8 <copy_X+0x734>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008f90:	4f2f      	ldr	r7, [pc, #188]	@ (8009050 <copy_X+0x7dc>)
 8008f92:	445f      	add	r7, fp
 8008f94:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008f98:	e5c9      	b.n	8008b2e <copy_X+0x2ba>
 8008f9a:	4675      	mov	r5, lr
 8008f9c:	e6ce      	b.n	8008d3c <copy_X+0x4c8>
 8008f9e:	f1ba 0f00 	cmp.w	sl, #0
 8008fa2:	f47f af37 	bne.w	8008e14 <copy_X+0x5a0>
 8008fa6:	e62c      	b.n	8008c02 <copy_X+0x38e>
 8008fa8:	f04f 0e00 	mov.w	lr, #0
 8008fac:	e4c3      	b.n	8008936 <copy_X+0xc2>
 8008fae:	2400      	movs	r4, #0
 8008fb0:	e4d4      	b.n	800895c <copy_X+0xe8>
 8008fb2:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8008fb6:	f6bf ad71 	bge.w	8008a9c <copy_X+0x228>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008fba:	46ae      	mov	lr, r5
 8008fbc:	9e05      	ldr	r6, [sp, #20]
 8008fbe:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008fc2:	f8cd e000 	str.w	lr, [sp]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008fc6:	eb06 1545 	add.w	r5, r6, r5, lsl #5
 8008fca:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8008fce:	e581      	b.n	8008ad4 <copy_X+0x260>
 8008fd0:	b124      	cbz	r4, 8008fdc <copy_X+0x768>
 8008fd2:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8008fd6:	f6bf aece 	bge.w	8008d76 <copy_X+0x502>
 8008fda:	e771      	b.n	8008ec0 <copy_X+0x64c>
 8008fdc:	2d00      	cmp	r5, #0
 8008fde:	f47f aeca 	bne.w	8008d76 <copy_X+0x502>
 8008fe2:	e523      	b.n	8008a2c <copy_X+0x1b8>
 8008fe4:	46ae      	mov	lr, r5
 8008fe6:	4645      	mov	r5, r8
 8008fe8:	e68e      	b.n	8008d08 <copy_X+0x494>
 8008fea:	2c00      	cmp	r4, #0
 8008fec:	f47f aea6 	bne.w	8008d3c <copy_X+0x4c8>
 8008ff0:	e607      	b.n	8008c02 <copy_X+0x38e>
 8008ff2:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8008ff6:	da1c      	bge.n	8009032 <copy_X+0x7be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8008ff8:	f44f 79f0 	mov.w	r9, #480	@ 0x1e0
 8008ffc:	fa1f fe83 	uxth.w	lr, r3
 8009000:	fb09 f90a 	mul.w	r9, r9, sl
 8009004:	46a2      	mov	sl, r4
 8009006:	eb0c 0709 	add.w	r7, ip, r9
 800900a:	f820 e017 	strh.w	lr, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800900e:	2c00      	cmp	r4, #0
 8009010:	f43f af2f 	beq.w	8008e72 <copy_X+0x5fe>
 8009014:	4627      	mov	r7, r4
 8009016:	e5c8      	b.n	8008baa <copy_X+0x336>
 8009018:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800901c:	da12      	bge.n	8009044 <copy_X+0x7d0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800901e:	f44f 75f0 	mov.w	r5, #480	@ 0x1e0
 8009022:	9e04      	ldr	r6, [sp, #16]
 8009024:	46f1      	mov	r9, lr
 8009026:	fb05 6508 	mla	r5, r5, r8, r6
 800902a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800902e:	4675      	mov	r5, lr
 8009030:	e571      	b.n	8008b16 <copy_X+0x2a2>
 8009032:	ea19 0704 	ands.w	r7, r9, r4
 8009036:	d007      	beq.n	8009048 <copy_X+0x7d4>
 8009038:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800903c:	f6bf ae7e 	bge.w	8008d3c <copy_X+0x4c8>
 8009040:	46b8      	mov	r8, r7
 8009042:	e64b      	b.n	8008cdc <copy_X+0x468>
 8009044:	4675      	mov	r5, lr
 8009046:	e572      	b.n	8008b2e <copy_X+0x2ba>
 8009048:	46b0      	mov	r8, r6
 800904a:	4637      	mov	r7, r6
 800904c:	e486      	b.n	800895c <copy_X+0xe8>
 800904e:	bf00      	nop
 8009050:	0001fc20 	.word	0x0001fc20

08009054 <copy_Y>:

void copy_Y(uint16_t* buffer, int x, int y, uint32_t color)
{
 8009054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8009058:	4cbf      	ldr	r4, [pc, #764]	@ (8009358 <copy_Y+0x304>)
 800905a:	1d4d      	adds	r5, r1, #5
{
 800905c:	b085      	sub	sp, #20
    int pixel_y = y_base + y;
 800905e:	f102 0801 	add.w	r8, r2, #1
    int pixel_x = x_base + x + offset;
 8009062:	6824      	ldr	r4, [r4, #0]
 8009064:	eb01 0e04 	add.w	lr, r1, r4
 8009068:	eb05 0c04 	add.w	ip, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800906c:	43d5      	mvns	r5, r2
 800906e:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8009072:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 8009076:	bf2c      	ite	cs
 8009078:	2600      	movcs	r6, #0
 800907a:	2601      	movcc	r6, #1
 800907c:	2e00      	cmp	r6, #0
 800907e:	f000 80d4 	beq.w	800922a <copy_Y+0x1d6>
 8009082:	2d00      	cmp	r5, #0
 8009084:	f000 80d1 	beq.w	800922a <copy_Y+0x1d6>
 8009088:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800908c:	f2c0 8166 	blt.w	800935c <copy_Y+0x308>
    int pixel_x = x_base + x + offset;
 8009090:	1c4d      	adds	r5, r1, #1
    int pixel_y = y_base + y;
 8009092:	1c96      	adds	r6, r2, #2
    int pixel_x = x_base + x + offset;
 8009094:	1d0f      	adds	r7, r1, #4
 8009096:	4425      	add	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009098:	ea6f 0806 	mvn.w	r8, r6
    int pixel_x = x_base + x + offset;
 800909c:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800909e:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 80090a2:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80090a6:	bf2c      	ite	cs
 80090a8:	f04f 0e00 	movcs.w	lr, #0
 80090ac:	f04f 0e01 	movcc.w	lr, #1
 80090b0:	f1be 0f00 	cmp.w	lr, #0
 80090b4:	f000 8095 	beq.w	80091e2 <copy_Y+0x18e>
 80090b8:	f1b8 0f00 	cmp.w	r8, #0
 80090bc:	f000 8091 	beq.w	80091e2 <copy_Y+0x18e>
 80090c0:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 80090c4:	da17      	bge.n	80090f6 <copy_Y+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80090c6:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    int pixel_y = y_base + y;
 80090ca:	f102 0c03 	add.w	ip, r2, #3
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80090ce:	fa1f fe83 	uxth.w	lr, r3
 80090d2:	eb05 1546 	add.w	r5, r5, r6, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80090d6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80090da:	ea4f 1646 	mov.w	r6, r6, lsl #5
 80090de:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80090e2:	f000 81e7 	beq.w	80094b4 <copy_Y+0x460>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80090e6:	f505 75f0 	add.w	r5, r5, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80090ea:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80090ee:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80090f2:	f0c0 81c8 	bcc.w	8009486 <copy_Y+0x432>
    int pixel_x = x_base + x + offset;
 80090f6:	f101 0c02 	add.w	ip, r1, #2
 80090fa:	3103      	adds	r1, #3
    int pixel_y = y_base + y;
 80090fc:	1d16      	adds	r6, r2, #4
    int pixel_x = x_base + x + offset;
 80090fe:	44a4      	add	ip, r4
 8009100:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009102:	f240 14df 	movw	r4, #479	@ 0x1df
 8009106:	ea6f 0e06 	mvn.w	lr, r6
 800910a:	45a4      	cmp	ip, r4
 800910c:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8009110:	bf8c      	ite	hi
 8009112:	2500      	movhi	r5, #0
 8009114:	2501      	movls	r5, #1
 8009116:	42a1      	cmp	r1, r4
 8009118:	bf8c      	ite	hi
 800911a:	2400      	movhi	r4, #0
 800911c:	2401      	movls	r4, #1
 800911e:	ea15 080e 	ands.w	r8, r5, lr
 8009122:	f000 80a7 	beq.w	8009274 <copy_Y+0x220>
 8009126:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800912a:	f2c0 80f2 	blt.w	8009312 <copy_Y+0x2be>
    int pixel_y = y_base + y;
 800912e:	f102 0906 	add.w	r9, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009132:	2700      	movs	r7, #0
    int pixel_y = y_base + y;
 8009134:	1dd6      	adds	r6, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009136:	46ba      	mov	sl, r7
    int pixel_y = y_base + y;
 8009138:	9602      	str	r6, [sp, #8]
 800913a:	46b8      	mov	r8, r7
 800913c:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009140:	9700      	str	r7, [sp, #0]
    int pixel_y = y_base + y;
 8009142:	9601      	str	r6, [sp, #4]
 8009144:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009148:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800914c:	4637      	mov	r7, r6
 800914e:	9603      	str	r6, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009150:	bf2c      	ite	cs
 8009152:	2600      	movcs	r6, #0
 8009154:	2601      	movcc	r6, #1
 8009156:	b136      	cbz	r6, 8009166 <copy_Y+0x112>
 8009158:	b12d      	cbz	r5, 8009166 <copy_Y+0x112>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800915a:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
 800915e:	eb0c 1e4e 	add.w	lr, ip, lr, lsl #5
 8009162:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    int pixel_y = y_base + y;
 8009166:	f102 0e0a 	add.w	lr, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800916a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800916e:	bf2c      	ite	cs
 8009170:	2700      	movcs	r7, #0
 8009172:	2701      	movcc	r7, #1
 8009174:	b135      	cbz	r5, 8009184 <copy_Y+0x130>
 8009176:	b12f      	cbz	r7, 8009184 <copy_Y+0x130>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009178:	ebce 1b0e 	rsb	fp, lr, lr, lsl #4
 800917c:	eb0c 1b4b 	add.w	fp, ip, fp, lsl #5
 8009180:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    int pixel_y = y_base + y;
 8009184:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009186:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800918a:	bf2c      	ite	cs
 800918c:	f04f 0b00 	movcs.w	fp, #0
 8009190:	f04f 0b01 	movcc.w	fp, #1
 8009194:	b11d      	cbz	r5, 800919e <copy_Y+0x14a>
 8009196:	f1bb 0f00 	cmp.w	fp, #0
 800919a:	f040 8149 	bne.w	8009430 <copy_Y+0x3dc>
 800919e:	f1b8 0f00 	cmp.w	r8, #0
 80091a2:	f000 8136 	beq.w	8009412 <copy_Y+0x3be>
 80091a6:	2c00      	cmp	r4, #0
 80091a8:	f040 812d 	bne.w	8009406 <copy_Y+0x3b2>
 80091ac:	f1ba 0f00 	cmp.w	sl, #0
 80091b0:	d002      	beq.n	80091b8 <copy_Y+0x164>
 80091b2:	2c00      	cmp	r4, #0
 80091b4:	f040 8117 	bne.w	80093e6 <copy_Y+0x392>
 80091b8:	b116      	cbz	r6, 80091c0 <copy_Y+0x16c>
 80091ba:	2c00      	cmp	r4, #0
 80091bc:	f040 811b 	bne.w	80093f6 <copy_Y+0x3a2>
 80091c0:	b117      	cbz	r7, 80091c8 <copy_Y+0x174>
 80091c2:	2c00      	cmp	r4, #0
 80091c4:	f040 8108 	bne.w	80093d8 <copy_Y+0x384>
 80091c8:	f1bb 0f00 	cmp.w	fp, #0
 80091cc:	d006      	beq.n	80091dc <copy_Y+0x188>
 80091ce:	b12c      	cbz	r4, 80091dc <copy_Y+0x188>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80091d0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80091d4:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 80091d8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 2, 5, color);
    fill_pixel(buffer, x, y, 3, 4, color);
    fill_pixel(buffer, x, y, 3, 5, color);
    for (int i = 6; i < 12; i++) fill_pixel(buffer, x, y, 2, i, color);
    for (int i = 6; i < 12; i++) fill_pixel(buffer, x, y, 3, i, color);
}
 80091dc:	b005      	add	sp, #20
 80091de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int pixel_y = y_base + y;
 80091e2:	f102 0c03 	add.w	ip, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80091e6:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80091ea:	ea6f 090c 	mvn.w	r9, ip
 80091ee:	bf2c      	ite	cs
 80091f0:	f04f 0a00 	movcs.w	sl, #0
 80091f4:	f04f 0a01 	movcc.w	sl, #1
 80091f8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80091fc:	f1b9 0f00 	cmp.w	r9, #0
 8009200:	f040 80cb 	bne.w	800939a <copy_Y+0x346>
 8009204:	f1b8 0f00 	cmp.w	r8, #0
 8009208:	f000 8125 	beq.w	8009456 <copy_Y+0x402>
 800920c:	f1ba 0f00 	cmp.w	sl, #0
 8009210:	f000 8121 	beq.w	8009456 <copy_Y+0x402>
 8009214:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009218:	f6bf af6d 	bge.w	80090f6 <copy_Y+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800921c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009220:	eb07 1546 	add.w	r5, r7, r6, lsl #5
 8009224:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8009228:	e117      	b.n	800945a <copy_Y+0x406>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800922a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800922e:	bfb4      	ite	lt
 8009230:	f04f 0900 	movlt.w	r9, #0
 8009234:	f04f 0901 	movge.w	r9, #1
 8009238:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800923c:	bf2c      	ite	cs
 800923e:	2700      	movcs	r7, #0
 8009240:	2701      	movcc	r7, #1
 8009242:	f1b9 0f00 	cmp.w	r9, #0
 8009246:	d002      	beq.n	800924e <copy_Y+0x1fa>
 8009248:	2e00      	cmp	r6, #0
 800924a:	f040 8149 	bne.w	80094e0 <copy_Y+0x48c>
 800924e:	403d      	ands	r5, r7
 8009250:	f040 80f5 	bne.w	800943e <copy_Y+0x3ea>
 8009254:	ea09 0507 	and.w	r5, r9, r7
 8009258:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800925c:	f6bf af18 	bge.w	8009090 <copy_Y+0x3c>
 8009260:	2d00      	cmp	r5, #0
 8009262:	f43f af15 	beq.w	8009090 <copy_Y+0x3c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009266:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800926a:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 800926e:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8009272:	e70d      	b.n	8009090 <copy_Y+0x3c>
    int pixel_y = y_base + y;
 8009274:	1d57      	adds	r7, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009276:	ea6f 0807 	mvn.w	r8, r7
 800927a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800927e:	f1b8 0f00 	cmp.w	r8, #0
 8009282:	f040 809a 	bne.w	80093ba <copy_Y+0x366>
 8009286:	ea1e 0e04 	ands.w	lr, lr, r4
 800928a:	f040 80f5 	bne.w	8009478 <copy_Y+0x424>
 800928e:	ea08 0804 	and.w	r8, r8, r4
 8009292:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 8009296:	da02      	bge.n	800929e <copy_Y+0x24a>
 8009298:	f1b8 0f00 	cmp.w	r8, #0
 800929c:	d154      	bne.n	8009348 <copy_Y+0x2f4>
    int pixel_y = y_base + y;
 800929e:	f102 0906 	add.w	r9, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80092a2:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 80092a6:	bf2c      	ite	cs
 80092a8:	f04f 0800 	movcs.w	r8, #0
 80092ac:	f04f 0801 	movcc.w	r8, #1
 80092b0:	ea15 0608 	ands.w	r6, r5, r8
 80092b4:	d006      	beq.n	80092c4 <copy_Y+0x270>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80092b6:	46b0      	mov	r8, r6
 80092b8:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 80092bc:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 80092c0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    int pixel_y = y_base + y;
 80092c4:	1dd7      	adds	r7, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80092c6:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80092ca:	9702      	str	r7, [sp, #8]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80092cc:	bf2c      	ite	cs
 80092ce:	2600      	movcs	r6, #0
 80092d0:	2601      	movcc	r6, #1
 80092d2:	9600      	str	r6, [sp, #0]
 80092d4:	402e      	ands	r6, r5
 80092d6:	d006      	beq.n	80092e6 <copy_Y+0x292>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80092d8:	9600      	str	r6, [sp, #0]
 80092da:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 80092de:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 80092e2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    int pixel_y = y_base + y;
 80092e6:	f102 0708 	add.w	r7, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80092ea:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80092ee:	9701      	str	r7, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80092f0:	bf2c      	ite	cs
 80092f2:	f04f 0a00 	movcs.w	sl, #0
 80092f6:	f04f 0a01 	movcc.w	sl, #1
 80092fa:	ea15 060a 	ands.w	r6, r5, sl
 80092fe:	f43f af21 	beq.w	8009144 <copy_Y+0xf0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009302:	46b2      	mov	sl, r6
 8009304:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 8009308:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800930c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009310:	e718      	b.n	8009144 <copy_Y+0xf0>
 8009312:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    int pixel_y = y_base + y;
 8009316:	1d57      	adds	r7, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009318:	fa1f fe83 	uxth.w	lr, r3
 800931c:	eb0c 1446 	add.w	r4, ip, r6, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009320:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009324:	ea4f 1646 	mov.w	r6, r6, lsl #5
 8009328:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800932c:	f000 80b9 	beq.w	80094a2 <copy_Y+0x44e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009330:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009334:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009338:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800933c:	f080 80a7 	bcs.w	800948e <copy_Y+0x43a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009340:	440e      	add	r6, r1
 8009342:	4644      	mov	r4, r8
 8009344:	f820 e016 	strh.w	lr, [r0, r6, lsl #1]
 8009348:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800934c:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 8009350:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    for (int i = 6; i < 12; i++) fill_pixel(buffer, x, y, 2, i, color);
 8009354:	e7a3      	b.n	800929e <copy_Y+0x24a>
 8009356:	bf00      	nop
 8009358:	240001b8 	.word	0x240001b8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800935c:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009360:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009364:	b29e      	uxth	r6, r3
 8009366:	eb0e 1e45 	add.w	lr, lr, r5, lsl #5
 800936a:	ea4f 1545 	mov.w	r5, r5, lsl #5
 800936e:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009372:	f000 80a8 	beq.w	80094c6 <copy_Y+0x472>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009376:	f50e 7ef0 	add.w	lr, lr, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800937a:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800937e:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009382:	f4bf ae85 	bcs.w	8009090 <copy_Y+0x3c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009386:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800938a:	4465      	add	r5, ip
 800938c:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 8009390:	f820 6015 	strh.w	r6, [r0, r5, lsl #1]
 8009394:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8009398:	e67a      	b.n	8009090 <copy_Y+0x3c>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800939a:	f1be 0f00 	cmp.w	lr, #0
 800939e:	f43f af31 	beq.w	8009204 <copy_Y+0x1b0>
 80093a2:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80093a6:	f6bf aea6 	bge.w	80090f6 <copy_Y+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80093aa:	f44f 76f0 	mov.w	r6, #480	@ 0x1e0
 80093ae:	46d1      	mov	r9, sl
 80093b0:	fb06 550c 	mla	r5, r6, ip, r5
 80093b4:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80093b8:	e04f      	b.n	800945a <copy_Y+0x406>
 80093ba:	2d00      	cmp	r5, #0
 80093bc:	f43f af63 	beq.w	8009286 <copy_Y+0x232>
 80093c0:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 80093c4:	f6bf aeb3 	bge.w	800912e <copy_Y+0xda>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80093c8:	f44f 76f0 	mov.w	r6, #480	@ 0x1e0
 80093cc:	46a0      	mov	r8, r4
 80093ce:	fb06 c607 	mla	r6, r6, r7, ip
 80093d2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80093d6:	e75c      	b.n	8009292 <copy_Y+0x23e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80093d8:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 80093dc:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 80093e0:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 80093e4:	e6f0      	b.n	80091c8 <copy_Y+0x174>
 80093e6:	9d01      	ldr	r5, [sp, #4]
 80093e8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80093ec:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80093f0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80093f4:	e6e0      	b.n	80091b8 <copy_Y+0x164>
 80093f6:	9d03      	ldr	r5, [sp, #12]
 80093f8:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 80093fc:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8009400:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009404:	e6dc      	b.n	80091c0 <copy_Y+0x16c>
 8009406:	ebc9 1509 	rsb	r5, r9, r9, lsl #4
 800940a:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800940e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009412:	2c00      	cmp	r4, #0
 8009414:	f43f aeca 	beq.w	80091ac <copy_Y+0x158>
 8009418:	9d00      	ldr	r5, [sp, #0]
 800941a:	2d00      	cmp	r5, #0
 800941c:	f43f aec6 	beq.w	80091ac <copy_Y+0x158>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009420:	9d02      	ldr	r5, [sp, #8]
 8009422:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8009426:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800942a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800942e:	e6bd      	b.n	80091ac <copy_Y+0x158>
 8009430:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8009434:	eb0c 1545 	add.w	r5, ip, r5, lsl #5
 8009438:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800943c:	e6af      	b.n	800919e <copy_Y+0x14a>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800943e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8009442:	f6bf af09 	bge.w	8009258 <copy_Y+0x204>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009446:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800944a:	464d      	mov	r5, r9
 800944c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009450:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009454:	e700      	b.n	8009258 <copy_Y+0x204>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009456:	ea09 090a 	and.w	r9, r9, sl
 800945a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800945e:	f6bf ae4a 	bge.w	80090f6 <copy_Y+0xa2>
 8009462:	f1b9 0f00 	cmp.w	r9, #0
 8009466:	f43f ae46 	beq.w	80090f6 <copy_Y+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800946a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800946e:	eb07 1c4c 	add.w	ip, r7, ip, lsl #5
 8009472:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8009476:	e63e      	b.n	80090f6 <copy_Y+0xa2>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009478:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800947c:	db09      	blt.n	8009492 <copy_Y+0x43e>
    int pixel_y = y_base + y;
 800947e:	4674      	mov	r4, lr
 8009480:	f102 0906 	add.w	r9, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009484:	e655      	b.n	8009132 <copy_Y+0xde>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009486:	443e      	add	r6, r7
 8009488:	f820 e016 	strh.w	lr, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800948c:	e7ed      	b.n	800946a <copy_Y+0x416>
 800948e:	2400      	movs	r4, #0
    for (int i = 6; i < 12; i++) fill_pixel(buffer, x, y, 2, i, color);
 8009490:	e705      	b.n	800929e <copy_Y+0x24a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009492:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009496:	4674      	mov	r4, lr
 8009498:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 800949c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 80094a0:	e6f7      	b.n	8009292 <copy_Y+0x23e>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80094a2:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80094a6:	d217      	bcs.n	80094d8 <copy_Y+0x484>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80094a8:	4e13      	ldr	r6, [pc, #76]	@ (80094f8 <copy_Y+0x4a4>)
 80094aa:	4644      	mov	r4, r8
 80094ac:	440e      	add	r6, r1
 80094ae:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80094b2:	e6f4      	b.n	800929e <copy_Y+0x24a>
 80094b4:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 80094b8:	f4bf ae1d 	bcs.w	80090f6 <copy_Y+0xa2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80094bc:	4d0e      	ldr	r5, [pc, #56]	@ (80094f8 <copy_Y+0x4a4>)
 80094be:	443d      	add	r5, r7
 80094c0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80094c4:	e617      	b.n	80090f6 <copy_Y+0xa2>
 80094c6:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 80094ca:	f4bf ade1 	bcs.w	8009090 <copy_Y+0x3c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80094ce:	4d0a      	ldr	r5, [pc, #40]	@ (80094f8 <copy_Y+0x4a4>)
 80094d0:	4465      	add	r5, ip
 80094d2:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80094d6:	e5db      	b.n	8009090 <copy_Y+0x3c>
 80094d8:	2400      	movs	r4, #0
    int pixel_y = y_base + y;
 80094da:	f240 1911 	movw	r9, #273	@ 0x111
 80094de:	e628      	b.n	8009132 <copy_Y+0xde>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80094e0:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 80094e4:	f6bf add4 	bge.w	8009090 <copy_Y+0x3c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80094e8:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 80094ec:	463d      	mov	r5, r7
 80094ee:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 80094f2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80094f6:	e6af      	b.n	8009258 <copy_Y+0x204>
 80094f8:	0001fc20 	.word	0x0001fc20

080094fc <copy_Z>:

void copy_Z(uint16_t* buffer, int x, int y, uint32_t color)
{
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8009500:	4cac      	ldr	r4, [pc, #688]	@ (80097b4 <copy_Z+0x2b8>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009502:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009506:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
{
 800950a:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 800950c:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800950e:	bf2c      	ite	cs
 8009510:	2500      	movcs	r5, #0
 8009512:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009514:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    int pixel_x = x_base + x + offset;
 8009518:	eb01 0904 	add.w	r9, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800951c:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 8009520:	bf2c      	ite	cs
 8009522:	f04f 0a00 	movcs.w	sl, #0
 8009526:	f04f 0a01 	movcc.w	sl, #1
 800952a:	b11d      	cbz	r5, 8009534 <copy_Z+0x38>
 800952c:	f1ba 0f00 	cmp.w	sl, #0
 8009530:	f040 8102 	bne.w	8009738 <copy_Z+0x23c>
    int pixel_x = x_base + x + offset;
 8009534:	f101 0801 	add.w	r8, r1, #1
 8009538:	44a0      	add	r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800953a:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800953e:	bf2c      	ite	cs
 8009540:	2600      	movcs	r6, #0
 8009542:	2601      	movcc	r6, #1
 8009544:	9603      	str	r6, [sp, #12]
 8009546:	b115      	cbz	r5, 800954e <copy_Z+0x52>
 8009548:	2e00      	cmp	r6, #0
 800954a:	f040 8109 	bne.w	8009760 <copy_Z+0x264>
    int pixel_x = x_base + x + offset;
 800954e:	1c8e      	adds	r6, r1, #2
 8009550:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009552:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8009556:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009558:	bf2c      	ite	cs
 800955a:	2700      	movcs	r7, #0
 800955c:	2701      	movcc	r7, #1
 800955e:	9702      	str	r7, [sp, #8]
 8009560:	b115      	cbz	r5, 8009568 <copy_Z+0x6c>
 8009562:	2f00      	cmp	r7, #0
 8009564:	f040 80f7 	bne.w	8009756 <copy_Z+0x25a>
    int pixel_x = x_base + x + offset;
 8009568:	f101 0e03 	add.w	lr, r1, #3
 800956c:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800956e:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8009572:	bf2c      	ite	cs
 8009574:	2700      	movcs	r7, #0
 8009576:	2701      	movcc	r7, #1
 8009578:	9701      	str	r7, [sp, #4]
 800957a:	b115      	cbz	r5, 8009582 <copy_Z+0x86>
 800957c:	2f00      	cmp	r7, #0
 800957e:	f040 80e5 	bne.w	800974c <copy_Z+0x250>
    int pixel_x = x_base + x + offset;
 8009582:	1d0f      	adds	r7, r1, #4
 8009584:	193e      	adds	r6, r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009586:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800958a:	bf2c      	ite	cs
 800958c:	2700      	movcs	r7, #0
 800958e:	2701      	movcc	r7, #1
 8009590:	b115      	cbz	r5, 8009598 <copy_Z+0x9c>
 8009592:	2f00      	cmp	r7, #0
 8009594:	f040 80d5 	bne.w	8009742 <copy_Z+0x246>
    int pixel_x = x_base + x + offset;
 8009598:	3105      	adds	r1, #5
 800959a:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800959c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80095a0:	bf2c      	ite	cs
 80095a2:	f04f 0b00 	movcs.w	fp, #0
 80095a6:	f04f 0b01 	movcc.w	fp, #1
 80095aa:	f1bb 0f00 	cmp.w	fp, #0
 80095ae:	d002      	beq.n	80095b6 <copy_Z+0xba>
 80095b0:	2d00      	cmp	r5, #0
 80095b2:	f040 80da 	bne.w	800976a <copy_Z+0x26e>
 80095b6:	f102 040b 	add.w	r4, r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80095ba:	f50c 5ca5 	add.w	ip, ip, #5280	@ 0x14a0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80095be:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 80095c2:	bf2c      	ite	cs
 80095c4:	2400      	movcs	r4, #0
 80095c6:	2401      	movcc	r4, #1
 80095c8:	b1c4      	cbz	r4, 80095fc <copy_Z+0x100>
 80095ca:	f1ba 0f00 	cmp.w	sl, #0
 80095ce:	f040 80d1 	bne.w	8009774 <copy_Z+0x278>
 80095d2:	b19c      	cbz	r4, 80095fc <copy_Z+0x100>
 80095d4:	9d03      	ldr	r5, [sp, #12]
 80095d6:	2d00      	cmp	r5, #0
 80095d8:	f040 80df 	bne.w	800979a <copy_Z+0x29e>
 80095dc:	b174      	cbz	r4, 80095fc <copy_Z+0x100>
 80095de:	9d02      	ldr	r5, [sp, #8]
 80095e0:	2d00      	cmp	r5, #0
 80095e2:	f040 80d5 	bne.w	8009790 <copy_Z+0x294>
 80095e6:	b14c      	cbz	r4, 80095fc <copy_Z+0x100>
 80095e8:	9d01      	ldr	r5, [sp, #4]
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	f040 80c7 	bne.w	800977e <copy_Z+0x282>
 80095f0:	b124      	cbz	r4, 80095fc <copy_Z+0x100>
 80095f2:	b11f      	cbz	r7, 80095fc <copy_Z+0x100>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80095f4:	eb0c 0506 	add.w	r5, ip, r6
 80095f8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80095fc:	f1bb 0f00 	cmp.w	fp, #0
 8009600:	d002      	beq.n	8009608 <copy_Z+0x10c>
 8009602:	2c00      	cmp	r4, #0
 8009604:	f040 80c0 	bne.w	8009788 <copy_Z+0x28c>
 8009608:	1c54      	adds	r4, r2, #1
 800960a:	f100 8085 	bmi.w	8009718 <copy_Z+0x21c>
 800960e:	f1bb 0f00 	cmp.w	fp, #0
 8009612:	f000 8081 	beq.w	8009718 <copy_Z+0x21c>
 8009616:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800961a:	f280 8083 	bge.w	8009724 <copy_Z+0x228>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800961e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009622:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009626:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800962a:	1c94      	adds	r4, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800962c:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 8009630:	da05      	bge.n	800963e <copy_Z+0x142>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009632:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009636:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 800963a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800963e:	1cd1      	adds	r1, r2, #3
 8009640:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8009644:	d206      	bcs.n	8009654 <copy_Z+0x158>
 8009646:	b12f      	cbz	r7, 8009654 <copy_Z+0x158>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009648:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800964c:	eb06 1741 	add.w	r7, r6, r1, lsl #5
 8009650:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009654:	1d11      	adds	r1, r2, #4
 8009656:	f100 80a5 	bmi.w	80097a4 <copy_Z+0x2a8>
 800965a:	9c01      	ldr	r4, [sp, #4]
 800965c:	2c00      	cmp	r4, #0
 800965e:	f000 80a1 	beq.w	80097a4 <copy_Z+0x2a8>
 8009662:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8009666:	f280 80a7 	bge.w	80097b8 <copy_Z+0x2bc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800966a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800966e:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 8009672:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 8009676:	1d51      	adds	r1, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009678:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800967c:	da05      	bge.n	800968a <copy_Z+0x18e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800967e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8009682:	eb0e 1e41 	add.w	lr, lr, r1, lsl #5
 8009686:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800968a:	1d91      	adds	r1, r2, #6
 800968c:	d44e      	bmi.n	800972c <copy_Z+0x230>
 800968e:	9c02      	ldr	r4, [sp, #8]
 8009690:	2c00      	cmp	r4, #0
 8009692:	d04b      	beq.n	800972c <copy_Z+0x230>
 8009694:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8009698:	f280 8092 	bge.w	80097c0 <copy_Z+0x2c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800969c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80096a0:	9c00      	ldr	r4, [sp, #0]
 80096a2:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 80096a6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 80096aa:	1dd1      	adds	r1, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80096ac:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80096b0:	da06      	bge.n	80096c0 <copy_Z+0x1c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80096b2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80096b6:	9c00      	ldr	r4, [sp, #0]
 80096b8:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 80096bc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80096c0:	f112 0f08 	cmn.w	r2, #8
 80096c4:	db0c      	blt.n	80096e0 <copy_Z+0x1e4>
 80096c6:	9903      	ldr	r1, [sp, #12]
 80096c8:	b151      	cbz	r1, 80096e0 <copy_Z+0x1e4>
 80096ca:	f5b2 7f84 	cmp.w	r2, #264	@ 0x108
 80096ce:	da20      	bge.n	8009712 <copy_Z+0x216>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80096d0:	f102 0108 	add.w	r1, r2, #8
 80096d4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80096d8:	eb08 1141 	add.w	r1, r8, r1, lsl #5
 80096dc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80096e0:	f112 0109 	adds.w	r1, r2, #9
 80096e4:	d472      	bmi.n	80097cc <copy_Z+0x2d0>
 80096e6:	f1ba 0f00 	cmp.w	sl, #0
 80096ea:	d06f      	beq.n	80097cc <copy_Z+0x2d0>
 80096ec:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 80096f0:	da0f      	bge.n	8009712 <copy_Z+0x216>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80096f2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    int pixel_y = y_base + y;
 80096f6:	320a      	adds	r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 80096f8:	eb09 1141 	add.w	r1, r9, r1, lsl #5
 80096fc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009700:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8009704:	da05      	bge.n	8009712 <copy_Z+0x216>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009706:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800970a:	eb09 1242 	add.w	r2, r9, r2, lsl #5
 800970e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 2, 6, color);
    fill_pixel(buffer, x, y, 2, 7, color);
    fill_pixel(buffer, x, y, 1, 8, color);
    fill_pixel(buffer, x, y, 0, 9, color);
    fill_pixel(buffer, x, y, 0, 10, color);
}
 8009712:	b005      	add	sp, #20
 8009714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009718:	1c94      	adds	r4, r2, #2
 800971a:	d490      	bmi.n	800963e <copy_Z+0x142>
 800971c:	f1bb 0f00 	cmp.w	fp, #0
 8009720:	d08d      	beq.n	800963e <copy_Z+0x142>
 8009722:	e783      	b.n	800962c <copy_Z+0x130>
 8009724:	9900      	ldr	r1, [sp, #0]
 8009726:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800972a:	d349      	bcc.n	80097c0 <copy_Z+0x2c4>
 800972c:	1dd1      	adds	r1, r2, #7
 800972e:	d4c7      	bmi.n	80096c0 <copy_Z+0x1c4>
 8009730:	9c02      	ldr	r4, [sp, #8]
 8009732:	2c00      	cmp	r4, #0
 8009734:	d0c4      	beq.n	80096c0 <copy_Z+0x1c4>
 8009736:	e7b9      	b.n	80096ac <copy_Z+0x1b0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009738:	eb0c 0609 	add.w	r6, ip, r9
 800973c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009740:	e6f8      	b.n	8009534 <copy_Z+0x38>
 8009742:	eb0c 0b06 	add.w	fp, ip, r6
 8009746:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800974a:	e725      	b.n	8009598 <copy_Z+0x9c>
 800974c:	eb0c 070e 	add.w	r7, ip, lr
 8009750:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8009754:	e715      	b.n	8009582 <copy_Z+0x86>
 8009756:	eb0c 0706 	add.w	r7, ip, r6
 800975a:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800975e:	e703      	b.n	8009568 <copy_Z+0x6c>
 8009760:	eb0c 0608 	add.w	r6, ip, r8
 8009764:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009768:	e6f1      	b.n	800954e <copy_Z+0x52>
 800976a:	eb01 040c 	add.w	r4, r1, ip
 800976e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009772:	e720      	b.n	80095b6 <copy_Z+0xba>
 8009774:	eb0c 0509 	add.w	r5, ip, r9
 8009778:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800977c:	e729      	b.n	80095d2 <copy_Z+0xd6>
 800977e:	eb0c 050e 	add.w	r5, ip, lr
 8009782:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8009786:	e733      	b.n	80095f0 <copy_Z+0xf4>
 8009788:	448c      	add	ip, r1
 800978a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800978e:	e73b      	b.n	8009608 <copy_Z+0x10c>
 8009790:	9d00      	ldr	r5, [sp, #0]
 8009792:	4465      	add	r5, ip
 8009794:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8009798:	e725      	b.n	80095e6 <copy_Z+0xea>
 800979a:	eb0c 0508 	add.w	r5, ip, r8
 800979e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80097a2:	e71b      	b.n	80095dc <copy_Z+0xe0>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80097a4:	1d51      	adds	r1, r2, #5
 80097a6:	f53f af70 	bmi.w	800968a <copy_Z+0x18e>
 80097aa:	9c01      	ldr	r4, [sp, #4]
 80097ac:	2c00      	cmp	r4, #0
 80097ae:	f43f af6c 	beq.w	800968a <copy_Z+0x18e>
 80097b2:	e761      	b.n	8009678 <copy_Z+0x17c>
 80097b4:	240001b8 	.word	0x240001b8
 80097b8:	9900      	ldr	r1, [sp, #0]
 80097ba:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80097be:	d20d      	bcs.n	80097dc <copy_Z+0x2e0>
 80097c0:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80097c4:	d3a5      	bcc.n	8009712 <copy_Z+0x216>
 80097c6:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 80097ca:	d3a2      	bcc.n	8009712 <copy_Z+0x216>
 80097cc:	320a      	adds	r2, #10
 80097ce:	d4a0      	bmi.n	8009712 <copy_Z+0x216>
 80097d0:	f1ba 0f00 	cmp.w	sl, #0
 80097d4:	d194      	bne.n	8009700 <copy_Z+0x204>
}
 80097d6:	b005      	add	sp, #20
 80097d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80097dc:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80097e0:	d397      	bcc.n	8009712 <copy_Z+0x216>
 80097e2:	e77d      	b.n	80096e0 <copy_Z+0x1e4>

080097e4 <copy_0>:
}

//================================ NUMBER -> BUFFER =====================================================

void copy_0(uint16_t* buffer, int x, int y, uint32_t color)
{
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 80097e8:	4c91      	ldr	r4, [pc, #580]	@ (8009a30 <copy_0+0x24c>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80097ea:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 80097ee:	b097      	sub	sp, #92	@ 0x5c
    int pixel_x = x_base + x + offset;
 80097f0:	6825      	ldr	r5, [r4, #0]
 80097f2:	f101 0401 	add.w	r4, r1, #1
 80097f6:	eb04 0705 	add.w	r7, r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80097fa:	bf2c      	ite	cs
 80097fc:	2400      	movcs	r4, #0
 80097fe:	2401      	movcc	r4, #1
 8009800:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8009804:	9708      	str	r7, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009806:	bf2c      	ite	cs
 8009808:	2600      	movcs	r6, #0
 800980a:	2601      	movcc	r6, #1
 800980c:	9601      	str	r6, [sp, #4]
 800980e:	b114      	cbz	r4, 8009816 <copy_0+0x32>
 8009810:	2e00      	cmp	r6, #0
 8009812:	f040 8159 	bne.w	8009ac8 <copy_0+0x2e4>
    int pixel_x = x_base + x + offset;
 8009816:	1c8e      	adds	r6, r1, #2
 8009818:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800981a:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800981e:	9709      	str	r7, [sp, #36]	@ 0x24
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009820:	bf2c      	ite	cs
 8009822:	2600      	movcs	r6, #0
 8009824:	2601      	movcc	r6, #1
 8009826:	9602      	str	r6, [sp, #8]
 8009828:	b114      	cbz	r4, 8009830 <copy_0+0x4c>
 800982a:	2e00      	cmp	r6, #0
 800982c:	f040 8145 	bne.w	8009aba <copy_0+0x2d6>
    int pixel_x = x_base + x + offset;
 8009830:	1cce      	adds	r6, r1, #3
 8009832:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009834:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8009838:	970a      	str	r7, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800983a:	bf2c      	ite	cs
 800983c:	2600      	movcs	r6, #0
 800983e:	2601      	movcc	r6, #1
 8009840:	9603      	str	r6, [sp, #12]
 8009842:	b114      	cbz	r4, 800984a <copy_0+0x66>
 8009844:	2e00      	cmp	r6, #0
 8009846:	f040 8131 	bne.w	8009aac <copy_0+0x2c8>
    int pixel_x = x_base + x + offset;
 800984a:	1d0e      	adds	r6, r1, #4
 800984c:	442e      	add	r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800984e:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8009852:	9607      	str	r6, [sp, #28]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009854:	bf2c      	ite	cs
 8009856:	2700      	movcs	r7, #0
 8009858:	2701      	movcc	r7, #1
 800985a:	9700      	str	r7, [sp, #0]
 800985c:	b117      	cbz	r7, 8009864 <copy_0+0x80>
 800985e:	2c00      	cmp	r4, #0
 8009860:	f040 811d 	bne.w	8009a9e <copy_0+0x2ba>
    int pixel_x = x_base + x + offset;
 8009864:	eb01 0b05 	add.w	fp, r1, r5
    int pixel_y = y_base + y;
 8009868:	f102 0801 	add.w	r8, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800986c:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8009870:	bf2c      	ite	cs
 8009872:	2400      	movcs	r4, #0
 8009874:	2401      	movcc	r4, #1
 8009876:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800987a:	bf2c      	ite	cs
 800987c:	2600      	movcs	r6, #0
 800987e:	2601      	movcc	r6, #1
 8009880:	9606      	str	r6, [sp, #24]
 8009882:	b114      	cbz	r4, 800988a <copy_0+0xa6>
 8009884:	2e00      	cmp	r6, #0
 8009886:	f040 8126 	bne.w	8009ad6 <copy_0+0x2f2>
    int pixel_y = y_base + y;
 800988a:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800988c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 8009890:	9704      	str	r7, [sp, #16]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009892:	bf2c      	ite	cs
 8009894:	2600      	movcs	r6, #0
 8009896:	2601      	movcc	r6, #1
 8009898:	960b      	str	r6, [sp, #44]	@ 0x2c
 800989a:	b114      	cbz	r4, 80098a2 <copy_0+0xbe>
 800989c:	2e00      	cmp	r6, #0
 800989e:	f040 813c 	bne.w	8009b1a <copy_0+0x336>
    int pixel_y = y_base + y;
 80098a2:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80098a4:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 80098a8:	9705      	str	r7, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80098aa:	bf2c      	ite	cs
 80098ac:	2600      	movcs	r6, #0
 80098ae:	2601      	movcc	r6, #1
 80098b0:	960c      	str	r6, [sp, #48]	@ 0x30
 80098b2:	b114      	cbz	r4, 80098ba <copy_0+0xd6>
 80098b4:	2e00      	cmp	r6, #0
 80098b6:	f040 8188 	bne.w	8009bca <copy_0+0x3e6>
    int pixel_y = y_base + y;
 80098ba:	f102 0e04 	add.w	lr, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80098be:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 80098c2:	bf2c      	ite	cs
 80098c4:	2600      	movcs	r6, #0
 80098c6:	2601      	movcc	r6, #1
 80098c8:	960d      	str	r6, [sp, #52]	@ 0x34
 80098ca:	b114      	cbz	r4, 80098d2 <copy_0+0xee>
 80098cc:	2e00      	cmp	r6, #0
 80098ce:	f040 8175 	bne.w	8009bbc <copy_0+0x3d8>
    int pixel_y = y_base + y;
 80098d2:	f102 0c05 	add.w	ip, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80098d6:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 80098da:	bf2c      	ite	cs
 80098dc:	2600      	movcs	r6, #0
 80098de:	2601      	movcc	r6, #1
 80098e0:	960e      	str	r6, [sp, #56]	@ 0x38
 80098e2:	b114      	cbz	r4, 80098ea <copy_0+0x106>
 80098e4:	2e00      	cmp	r6, #0
 80098e6:	f040 818d 	bne.w	8009c04 <copy_0+0x420>
    int pixel_y = y_base + y;
 80098ea:	f102 0906 	add.w	r9, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80098ee:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 80098f2:	bf2c      	ite	cs
 80098f4:	2600      	movcs	r6, #0
 80098f6:	2601      	movcc	r6, #1
 80098f8:	960f      	str	r6, [sp, #60]	@ 0x3c
 80098fa:	b114      	cbz	r4, 8009902 <copy_0+0x11e>
 80098fc:	2e00      	cmp	r6, #0
 80098fe:	f040 817a 	bne.w	8009bf6 <copy_0+0x412>
    int pixel_y = y_base + y;
 8009902:	1dd6      	adds	r6, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009904:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009908:	9613      	str	r6, [sp, #76]	@ 0x4c
 800990a:	bf2c      	ite	cs
 800990c:	2700      	movcs	r7, #0
 800990e:	2701      	movcc	r7, #1
 8009910:	9710      	str	r7, [sp, #64]	@ 0x40
 8009912:	b114      	cbz	r4, 800991a <copy_0+0x136>
 8009914:	2f00      	cmp	r7, #0
 8009916:	f040 8166 	bne.w	8009be6 <copy_0+0x402>
    int pixel_y = y_base + y;
 800991a:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800991e:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 8009922:	9614      	str	r6, [sp, #80]	@ 0x50
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009924:	bf2c      	ite	cs
 8009926:	2700      	movcs	r7, #0
 8009928:	2701      	movcc	r7, #1
 800992a:	9711      	str	r7, [sp, #68]	@ 0x44
 800992c:	b114      	cbz	r4, 8009934 <copy_0+0x150>
 800992e:	2f00      	cmp	r7, #0
 8009930:	f040 8152 	bne.w	8009bd8 <copy_0+0x3f4>
    int pixel_y = y_base + y;
 8009934:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009938:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800993c:	9615      	str	r6, [sp, #84]	@ 0x54
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800993e:	bf2c      	ite	cs
 8009940:	2700      	movcs	r7, #0
 8009942:	2701      	movcc	r7, #1
 8009944:	9712      	str	r7, [sp, #72]	@ 0x48
 8009946:	b114      	cbz	r4, 800994e <copy_0+0x16a>
 8009948:	2f00      	cmp	r7, #0
 800994a:	f040 80f4 	bne.w	8009b36 <copy_0+0x352>
    int pixel_y = y_base + y;
 800994e:	f102 0a0a 	add.w	sl, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009952:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8009956:	bf2c      	ite	cs
 8009958:	2600      	movcs	r6, #0
 800995a:	2601      	movcc	r6, #1
 800995c:	4637      	mov	r7, r6
 800995e:	b116      	cbz	r6, 8009966 <copy_0+0x182>
 8009960:	2c00      	cmp	r4, #0
 8009962:	f040 80e1 	bne.w	8009b28 <copy_0+0x344>
    int pixel_y = y_base + y;
 8009966:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009968:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800996c:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009970:	bf2c      	ite	cs
 8009972:	2200      	movcs	r2, #0
 8009974:	2201      	movcc	r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009976:	0164      	lsls	r4, r4, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009978:	b182      	cbz	r2, 800999c <copy_0+0x1b8>
 800997a:	9e01      	ldr	r6, [sp, #4]
 800997c:	2e00      	cmp	r6, #0
 800997e:	f040 80bc 	bne.w	8009afa <copy_0+0x316>
 8009982:	b15a      	cbz	r2, 800999c <copy_0+0x1b8>
 8009984:	9e02      	ldr	r6, [sp, #8]
 8009986:	2e00      	cmp	r6, #0
 8009988:	f040 80b1 	bne.w	8009aee <copy_0+0x30a>
 800998c:	b132      	cbz	r2, 800999c <copy_0+0x1b8>
 800998e:	9e03      	ldr	r6, [sp, #12]
 8009990:	b126      	cbz	r6, 800999c <copy_0+0x1b8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009992:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009994:	eb04 0b06 	add.w	fp, r4, r6
 8009998:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800999c:	9e00      	ldr	r6, [sp, #0]
 800999e:	b116      	cbz	r6, 80099a6 <copy_0+0x1c2>
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	f040 809f 	bne.w	8009ae4 <copy_0+0x300>
    int pixel_x = x_base + x + offset;
 80099a6:	3105      	adds	r1, #5
 80099a8:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 80099aa:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80099ae:	bf2c      	ite	cs
 80099b0:	2200      	movcs	r2, #0
 80099b2:	2201      	movcc	r2, #1
 80099b4:	2a00      	cmp	r2, #0
 80099b6:	d030      	beq.n	8009a1a <copy_0+0x236>
 80099b8:	9c06      	ldr	r4, [sp, #24]
 80099ba:	2c00      	cmp	r4, #0
 80099bc:	f040 80a6 	bne.w	8009b0c <copy_0+0x328>
 80099c0:	b35a      	cbz	r2, 8009a1a <copy_0+0x236>
 80099c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80099c4:	2c00      	cmp	r4, #0
 80099c6:	f040 80bd 	bne.w	8009b44 <copy_0+0x360>
 80099ca:	b332      	cbz	r2, 8009a1a <copy_0+0x236>
 80099cc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80099ce:	2c00      	cmp	r4, #0
 80099d0:	f040 80dc 	bne.w	8009b8c <copy_0+0x3a8>
 80099d4:	b30a      	cbz	r2, 8009a1a <copy_0+0x236>
 80099d6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80099d8:	2c00      	cmp	r4, #0
 80099da:	f040 80d0 	bne.w	8009b7e <copy_0+0x39a>
 80099de:	b1e2      	cbz	r2, 8009a1a <copy_0+0x236>
 80099e0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80099e2:	2c00      	cmp	r4, #0
 80099e4:	f040 80c4 	bne.w	8009b70 <copy_0+0x38c>
 80099e8:	b1ba      	cbz	r2, 8009a1a <copy_0+0x236>
 80099ea:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80099ec:	2c00      	cmp	r4, #0
 80099ee:	f040 80b8 	bne.w	8009b62 <copy_0+0x37e>
 80099f2:	b192      	cbz	r2, 8009a1a <copy_0+0x236>
 80099f4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80099f6:	2c00      	cmp	r4, #0
 80099f8:	f040 80d8 	bne.w	8009bac <copy_0+0x3c8>
 80099fc:	b16a      	cbz	r2, 8009a1a <copy_0+0x236>
 80099fe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009a00:	2c00      	cmp	r4, #0
 8009a02:	f040 80cb 	bne.w	8009b9c <copy_0+0x3b8>
 8009a06:	b142      	cbz	r2, 8009a1a <copy_0+0x236>
 8009a08:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8009a0a:	b134      	cbz	r4, 8009a1a <copy_0+0x236>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009a0c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8009a0e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009a12:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009a16:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009a1a:	b117      	cbz	r7, 8009a22 <copy_0+0x23e>
 8009a1c:	2a00      	cmp	r2, #0
 8009a1e:	f040 8099 	bne.w	8009b54 <copy_0+0x370>
 8009a22:	9904      	ldr	r1, [sp, #16]
 8009a24:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8009a28:	d204      	bcs.n	8009a34 <copy_0+0x250>
 8009a2a:	9a00      	ldr	r2, [sp, #0]
 8009a2c:	bb7a      	cbnz	r2, 8009a8e <copy_0+0x2aa>
 8009a2e:	e001      	b.n	8009a34 <copy_0+0x250>
 8009a30:	240001b8 	.word	0x240001b8
 8009a34:	9905      	ldr	r1, [sp, #20]
 8009a36:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8009a3a:	d201      	bcs.n	8009a40 <copy_0+0x25c>
 8009a3c:	9a03      	ldr	r2, [sp, #12]
 8009a3e:	b9f2      	cbnz	r2, 8009a7e <copy_0+0x29a>
 8009a40:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8009a44:	d201      	bcs.n	8009a4a <copy_0+0x266>
 8009a46:	9a02      	ldr	r2, [sp, #8]
 8009a48:	b98a      	cbnz	r2, 8009a6e <copy_0+0x28a>
 8009a4a:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009a4e:	d201      	bcs.n	8009a54 <copy_0+0x270>
 8009a50:	9a01      	ldr	r2, [sp, #4]
 8009a52:	b912      	cbnz	r2, 8009a5a <copy_0+0x276>
    // Diagonal line to distinguish from O
    fill_pixel(buffer, x, y, 4, 2, color);
    fill_pixel(buffer, x, y, 3, 3, color);
    fill_pixel(buffer, x, y, 2, 4, color);
    fill_pixel(buffer, x, y, 1, 5, color);
}
 8009a54:	b017      	add	sp, #92	@ 0x5c
 8009a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009a5a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009a5e:	9a08      	ldr	r2, [sp, #32]
 8009a60:	eb02 124c 	add.w	r2, r2, ip, lsl #5
 8009a64:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8009a68:	b017      	add	sp, #92	@ 0x5c
 8009a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009a6e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8009a72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a74:	eb02 124e 	add.w	r2, r2, lr, lsl #5
 8009a78:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8009a7c:	e7e5      	b.n	8009a4a <copy_0+0x266>
 8009a7e:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
 8009a82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a84:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8009a88:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8009a8c:	e7d8      	b.n	8009a40 <copy_0+0x25c>
 8009a8e:	ebc1 1701 	rsb	r7, r1, r1, lsl #4
 8009a92:	9a07      	ldr	r2, [sp, #28]
 8009a94:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8009a98:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 8009a9c:	e7ca      	b.n	8009a34 <copy_0+0x250>
 8009a9e:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 8009aa2:	eb06 1444 	add.w	r4, r6, r4, lsl #5
 8009aa6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009aaa:	e6db      	b.n	8009864 <copy_0+0x80>
 8009aac:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8009ab0:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8009ab4:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009ab8:	e6c7      	b.n	800984a <copy_0+0x66>
 8009aba:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8009abe:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8009ac2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009ac6:	e6b3      	b.n	8009830 <copy_0+0x4c>
 8009ac8:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8009acc:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 8009ad0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009ad4:	e69f      	b.n	8009816 <copy_0+0x32>
 8009ad6:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 8009ada:	eb0b 1646 	add.w	r6, fp, r6, lsl #5
 8009ade:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009ae2:	e6d2      	b.n	800988a <copy_0+0xa6>
 8009ae4:	9a07      	ldr	r2, [sp, #28]
 8009ae6:	4414      	add	r4, r2
 8009ae8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009aec:	e75b      	b.n	80099a6 <copy_0+0x1c2>
 8009aee:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009af0:	eb04 0b06 	add.w	fp, r4, r6
 8009af4:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8009af8:	e748      	b.n	800998c <copy_0+0x1a8>
 8009afa:	9e08      	ldr	r6, [sp, #32]
 8009afc:	eb04 0b06 	add.w	fp, r4, r6
 8009b00:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009b04:	2a00      	cmp	r2, #0
 8009b06:	f47f af3d 	bne.w	8009984 <copy_0+0x1a0>
 8009b0a:	e747      	b.n	800999c <copy_0+0x1b8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009b0c:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8009b10:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 8009b14:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 8009b18:	e752      	b.n	80099c0 <copy_0+0x1dc>
 8009b1a:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 8009b1e:	eb0b 1646 	add.w	r6, fp, r6, lsl #5
 8009b22:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009b26:	e6bc      	b.n	80098a2 <copy_0+0xbe>
 8009b28:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 8009b2c:	eb0b 1b44 	add.w	fp, fp, r4, lsl #5
 8009b30:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 8009b34:	e717      	b.n	8009966 <copy_0+0x182>
 8009b36:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 8009b3a:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8009b3e:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8009b42:	e704      	b.n	800994e <copy_0+0x16a>
 8009b44:	9c04      	ldr	r4, [sp, #16]
 8009b46:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009b4a:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009b4e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009b52:	e73a      	b.n	80099ca <copy_0+0x1e6>
 8009b54:	ebca 120a 	rsb	r2, sl, sl, lsl #4
 8009b58:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8009b5c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8009b60:	e75f      	b.n	8009a22 <copy_0+0x23e>
 8009b62:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 8009b66:	eb01 1949 	add.w	r9, r1, r9, lsl #5
 8009b6a:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8009b6e:	e740      	b.n	80099f2 <copy_0+0x20e>
 8009b70:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 8009b74:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009b78:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009b7c:	e734      	b.n	80099e8 <copy_0+0x204>
 8009b7e:	ebce 140e 	rsb	r4, lr, lr, lsl #4
 8009b82:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009b86:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009b8a:	e728      	b.n	80099de <copy_0+0x1fa>
 8009b8c:	9c05      	ldr	r4, [sp, #20]
 8009b8e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009b92:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009b96:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009b9a:	e71b      	b.n	80099d4 <copy_0+0x1f0>
 8009b9c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8009b9e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009ba2:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009ba6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009baa:	e72c      	b.n	8009a06 <copy_0+0x222>
 8009bac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009bae:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8009bb2:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 8009bb6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8009bba:	e71f      	b.n	80099fc <copy_0+0x218>
 8009bbc:	ebce 1c0e 	rsb	ip, lr, lr, lsl #4
 8009bc0:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 8009bc4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8009bc8:	e683      	b.n	80098d2 <copy_0+0xee>
 8009bca:	ebc7 1c07 	rsb	ip, r7, r7, lsl #4
 8009bce:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 8009bd2:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 8009bd6:	e670      	b.n	80098ba <copy_0+0xd6>
 8009bd8:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 8009bdc:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8009be0:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8009be4:	e6a6      	b.n	8009934 <copy_0+0x150>
 8009be6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009be8:	ebc6 1a06 	rsb	sl, r6, r6, lsl #4
 8009bec:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8009bf0:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8009bf4:	e691      	b.n	800991a <copy_0+0x136>
 8009bf6:	ebc9 1a09 	rsb	sl, r9, r9, lsl #4
 8009bfa:	eb0b 1a4a 	add.w	sl, fp, sl, lsl #5
 8009bfe:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 8009c02:	e67e      	b.n	8009902 <copy_0+0x11e>
 8009c04:	ebcc 190c 	rsb	r9, ip, ip, lsl #4
 8009c08:	eb0b 1949 	add.w	r9, fp, r9, lsl #5
 8009c0c:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8009c10:	e66b      	b.n	80098ea <copy_0+0x106>
 8009c12:	bf00      	nop

08009c14 <copy_1>:

void copy_1(uint16_t* buffer, int x, int y, uint32_t color)
{
 8009c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8009c18:	4c9f      	ldr	r4, [pc, #636]	@ (8009e98 <copy_1+0x284>)
 8009c1a:	f101 0c02 	add.w	ip, r1, #2
 8009c1e:	6825      	ldr	r5, [r4, #0]
 8009c20:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c22:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 8009c26:	bf2c      	ite	cs
 8009c28:	2400      	movcs	r4, #0
 8009c2a:	2401      	movcc	r4, #1
 8009c2c:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8009c30:	d202      	bcs.n	8009c38 <copy_1+0x24>
 8009c32:	2c00      	cmp	r4, #0
 8009c34:	f040 811e 	bne.w	8009e74 <copy_1+0x260>
    int pixel_y = y_base + y;
 8009c38:	f102 0e01 	add.w	lr, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c3c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8009c40:	d202      	bcs.n	8009c48 <copy_1+0x34>
 8009c42:	2c00      	cmp	r4, #0
 8009c44:	f040 810f 	bne.w	8009e66 <copy_1+0x252>
    int pixel_y = y_base + y;
 8009c48:	f102 0a02 	add.w	sl, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c4c:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8009c50:	d202      	bcs.n	8009c58 <copy_1+0x44>
 8009c52:	2c00      	cmp	r4, #0
 8009c54:	f040 8100 	bne.w	8009e58 <copy_1+0x244>
    int pixel_y = y_base + y;
 8009c58:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c5a:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009c5e:	d202      	bcs.n	8009c66 <copy_1+0x52>
 8009c60:	2c00      	cmp	r4, #0
 8009c62:	f040 80f2 	bne.w	8009e4a <copy_1+0x236>
    int pixel_y = y_base + y;
 8009c66:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c68:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009c6c:	d202      	bcs.n	8009c74 <copy_1+0x60>
 8009c6e:	2c00      	cmp	r4, #0
 8009c70:	f040 80e4 	bne.w	8009e3c <copy_1+0x228>
    int pixel_y = y_base + y;
 8009c74:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c76:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009c7a:	d202      	bcs.n	8009c82 <copy_1+0x6e>
 8009c7c:	2c00      	cmp	r4, #0
 8009c7e:	f040 80d6 	bne.w	8009e2e <copy_1+0x21a>
    int pixel_y = y_base + y;
 8009c82:	1d96      	adds	r6, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c84:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009c88:	d202      	bcs.n	8009c90 <copy_1+0x7c>
 8009c8a:	2c00      	cmp	r4, #0
 8009c8c:	f040 80c8 	bne.w	8009e20 <copy_1+0x20c>
    int pixel_y = y_base + y;
 8009c90:	1dd6      	adds	r6, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009c92:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009c96:	d202      	bcs.n	8009c9e <copy_1+0x8a>
 8009c98:	2c00      	cmp	r4, #0
 8009c9a:	f040 80ba 	bne.w	8009e12 <copy_1+0x1fe>
    int pixel_y = y_base + y;
 8009c9e:	f102 0608 	add.w	r6, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009ca2:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009ca6:	d202      	bcs.n	8009cae <copy_1+0x9a>
 8009ca8:	2c00      	cmp	r4, #0
 8009caa:	f040 80ab 	bne.w	8009e04 <copy_1+0x1f0>
    int pixel_y = y_base + y;
 8009cae:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009cb2:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009cb6:	d202      	bcs.n	8009cbe <copy_1+0xaa>
 8009cb8:	2c00      	cmp	r4, #0
 8009cba:	f040 809c 	bne.w	8009df6 <copy_1+0x1e2>
    int pixel_y = y_base + y;
 8009cbe:	f102 060a 	add.w	r6, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009cc2:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 8009cc6:	d202      	bcs.n	8009cce <copy_1+0xba>
 8009cc8:	2c00      	cmp	r4, #0
 8009cca:	f040 808d 	bne.w	8009de8 <copy_1+0x1d4>
    int pixel_y = y_base + y;
 8009cce:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009cd0:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 8009cd4:	d201      	bcs.n	8009cda <copy_1+0xc6>
 8009cd6:	2c00      	cmp	r4, #0
 8009cd8:	d15f      	bne.n	8009d9a <copy_1+0x186>
    int pixel_x = x_base + x + offset;
 8009cda:	1c4f      	adds	r7, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009cdc:	f240 16df 	movw	r6, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 8009ce0:	eb01 0905 	add.w	r9, r1, r5
 8009ce4:	442f      	add	r7, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009ce6:	42b7      	cmp	r7, r6
 8009ce8:	bf8c      	ite	hi
 8009cea:	f04f 0800 	movhi.w	r8, #0
 8009cee:	f04f 0801 	movls.w	r8, #1
 8009cf2:	45b1      	cmp	r9, r6
 8009cf4:	bf8c      	ite	hi
 8009cf6:	2600      	movhi	r6, #0
 8009cf8:	2601      	movls	r6, #1
 8009cfa:	f1be 0f00 	cmp.w	lr, #0
 8009cfe:	bfb4      	ite	lt
 8009d00:	f04f 0b00 	movlt.w	fp, #0
 8009d04:	f008 0b01 	andge.w	fp, r8, #1
 8009d08:	f1bb 0f00 	cmp.w	fp, #0
 8009d0c:	d007      	beq.n	8009d1e <copy_1+0x10a>
 8009d0e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 8009d12:	f2c0 80be 	blt.w	8009e92 <copy_1+0x27e>
 8009d16:	46d8      	mov	r8, fp
 8009d18:	ea4f 1b02 	mov.w	fp, r2, lsl #4
 8009d1c:	e012      	b.n	8009d44 <copy_1+0x130>
 8009d1e:	ea4f 1b02 	mov.w	fp, r2, lsl #4
 8009d22:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 8009d26:	bf2c      	ite	cs
 8009d28:	f04f 0e00 	movcs.w	lr, #0
 8009d2c:	f006 0e01 	andcc.w	lr, r6, #1
 8009d30:	f1be 0f00 	cmp.w	lr, #0
 8009d34:	d006      	beq.n	8009d44 <copy_1+0x130>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009d36:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 8009d3a:	4676      	mov	r6, lr
 8009d3c:	eb09 1a4a 	add.w	sl, r9, sl, lsl #5
 8009d40:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009d44:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009d48:	ebab 0e02 	sub.w	lr, fp, r2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009d4c:	bf2c      	ite	cs
 8009d4e:	2200      	movcs	r2, #0
 8009d50:	2201      	movcc	r2, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009d52:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009d56:	b13a      	cbz	r2, 8009d68 <copy_1+0x154>
 8009d58:	2e00      	cmp	r6, #0
 8009d5a:	f040 8096 	bne.w	8009e8a <copy_1+0x276>
 8009d5e:	b11a      	cbz	r2, 8009d68 <copy_1+0x154>
 8009d60:	f1b8 0f00 	cmp.w	r8, #0
 8009d64:	f040 808d 	bne.w	8009e82 <copy_1+0x26e>
 8009d68:	b11c      	cbz	r4, 8009d72 <copy_1+0x15e>
 8009d6a:	b112      	cbz	r2, 8009d72 <copy_1+0x15e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009d6c:	44f4      	add	ip, lr
 8009d6e:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_x = x_base + x + offset;
 8009d72:	1ccc      	adds	r4, r1, #3
 8009d74:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009d76:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 8009d7a:	d203      	bcs.n	8009d84 <copy_1+0x170>
 8009d7c:	b112      	cbz	r2, 8009d84 <copy_1+0x170>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009d7e:	4474      	add	r4, lr
 8009d80:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_x = x_base + x + offset;
 8009d84:	3104      	adds	r1, #4
 8009d86:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009d88:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8009d8c:	d203      	bcs.n	8009d96 <copy_1+0x182>
 8009d8e:	b112      	cbz	r2, 8009d96 <copy_1+0x182>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009d90:	4471      	add	r1, lr
 8009d92:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 2, i, color);
    fill_pixel(buffer, x, y, 1, 1, color);
    fill_pixel(buffer, x, y, 0, 2, color);
    for (int i = 0; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 8009d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009d9a:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
    int pixel_x = x_base + x + offset;
 8009d9e:	1c4f      	adds	r7, r1, #1
 8009da0:	eb01 0905 	add.w	r9, r1, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009da4:	ea4f 1b02 	mov.w	fp, r2, lsl #4
 8009da8:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
    int pixel_x = x_base + x + offset;
 8009dac:	442f      	add	r7, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009dae:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009db2:	f240 16df 	movw	r6, #479	@ 0x1df
 8009db6:	42b7      	cmp	r7, r6
 8009db8:	bf8c      	ite	hi
 8009dba:	f04f 0800 	movhi.w	r8, #0
 8009dbe:	f04f 0801 	movls.w	r8, #1
 8009dc2:	45b1      	cmp	r9, r6
 8009dc4:	bf8c      	ite	hi
 8009dc6:	2600      	movhi	r6, #0
 8009dc8:	2601      	movls	r6, #1
 8009dca:	f1be 0f00 	cmp.w	lr, #0
 8009dce:	dba8      	blt.n	8009d22 <copy_1+0x10e>
 8009dd0:	f1b8 0f00 	cmp.w	r8, #0
 8009dd4:	d0a5      	beq.n	8009d22 <copy_1+0x10e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009dd6:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 8009dda:	f04f 0801 	mov.w	r8, #1
 8009dde:	eb07 1e4e 	add.w	lr, r7, lr, lsl #5
 8009de2:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 8009de6:	e79c      	b.n	8009d22 <copy_1+0x10e>
 8009de8:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009dec:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009df0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009df4:	e76b      	b.n	8009cce <copy_1+0xba>
 8009df6:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009dfa:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009dfe:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009e02:	e75c      	b.n	8009cbe <copy_1+0xaa>
 8009e04:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009e08:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009e0c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009e10:	e74d      	b.n	8009cae <copy_1+0x9a>
 8009e12:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009e16:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009e1a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009e1e:	e73e      	b.n	8009c9e <copy_1+0x8a>
 8009e20:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009e24:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009e28:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009e2c:	e730      	b.n	8009c90 <copy_1+0x7c>
 8009e2e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009e32:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009e36:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009e3a:	e722      	b.n	8009c82 <copy_1+0x6e>
 8009e3c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009e40:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009e44:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009e48:	e714      	b.n	8009c74 <copy_1+0x60>
 8009e4a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8009e4e:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009e52:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009e56:	e706      	b.n	8009c66 <copy_1+0x52>
 8009e58:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8009e5c:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009e60:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009e64:	e6f8      	b.n	8009c58 <copy_1+0x44>
 8009e66:	ebce 160e 	rsb	r6, lr, lr, lsl #4
 8009e6a:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009e6e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009e72:	e6e9      	b.n	8009c48 <copy_1+0x34>
 8009e74:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 8009e78:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 8009e7c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 8009e80:	e6da      	b.n	8009c38 <copy_1+0x24>
 8009e82:	4477      	add	r7, lr
 8009e84:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 8009e88:	e76e      	b.n	8009d68 <copy_1+0x154>
 8009e8a:	44f1      	add	r9, lr
 8009e8c:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 8009e90:	e765      	b.n	8009d5e <copy_1+0x14a>
 8009e92:	ea4f 1b02 	mov.w	fp, r2, lsl #4
 8009e96:	e79e      	b.n	8009dd6 <copy_1+0x1c2>
 8009e98:	240001b8 	.word	0x240001b8

08009e9c <copy_2>:

void copy_2(uint16_t* buffer, int x, int y, uint32_t color)
{
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 8009ea0:	4cbb      	ldr	r4, [pc, #748]	@ (800a190 <copy_2+0x2f4>)
 8009ea2:	f101 0e01 	add.w	lr, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009ea6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 8009eaa:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 8009eac:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009eae:	bf2c      	ite	cs
 8009eb0:	f04f 0c00 	movcs.w	ip, #0
 8009eb4:	f04f 0c01 	movcc.w	ip, #1
    int pixel_x = x_base + x + offset;
 8009eb8:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009eba:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 8009ebe:	bf2c      	ite	cs
 8009ec0:	2500      	movcs	r5, #0
 8009ec2:	2501      	movcc	r5, #1
 8009ec4:	f1bc 0f00 	cmp.w	ip, #0
 8009ec8:	d002      	beq.n	8009ed0 <copy_2+0x34>
 8009eca:	2d00      	cmp	r5, #0
 8009ecc:	f040 8146 	bne.w	800a15c <copy_2+0x2c0>
    int pixel_x = x_base + x + offset;
 8009ed0:	1c8e      	adds	r6, r1, #2
 8009ed2:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009ed4:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 8009ed8:	4637      	mov	r7, r6
 8009eda:	9603      	str	r6, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009edc:	bf2c      	ite	cs
 8009ede:	2600      	movcs	r6, #0
 8009ee0:	2601      	movcc	r6, #1
 8009ee2:	9601      	str	r6, [sp, #4]
 8009ee4:	f1bc 0f00 	cmp.w	ip, #0
 8009ee8:	d002      	beq.n	8009ef0 <copy_2+0x54>
 8009eea:	2e00      	cmp	r6, #0
 8009eec:	f040 8128 	bne.w	800a140 <copy_2+0x2a4>
    int pixel_x = x_base + x + offset;
 8009ef0:	1cce      	adds	r6, r1, #3
 8009ef2:	eb06 0904 	add.w	r9, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009ef6:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 8009efa:	bf2c      	ite	cs
 8009efc:	2600      	movcs	r6, #0
 8009efe:	2601      	movcc	r6, #1
 8009f00:	f1bc 0f00 	cmp.w	ip, #0
 8009f04:	d002      	beq.n	8009f0c <copy_2+0x70>
 8009f06:	2e00      	cmp	r6, #0
 8009f08:	f040 8121 	bne.w	800a14e <copy_2+0x2b2>
    int pixel_x = x_base + x + offset;
 8009f0c:	f101 0804 	add.w	r8, r1, #4
 8009f10:	eb08 0b04 	add.w	fp, r8, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f14:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 8009f18:	bf2c      	ite	cs
 8009f1a:	2700      	movcs	r7, #0
 8009f1c:	2701      	movcc	r7, #1
 8009f1e:	9700      	str	r7, [sp, #0]
 8009f20:	f1bc 0f00 	cmp.w	ip, #0
 8009f24:	d002      	beq.n	8009f2c <copy_2+0x90>
 8009f26:	2f00      	cmp	r7, #0
 8009f28:	f040 8103 	bne.w	800a132 <copy_2+0x296>
    int pixel_x = x_base + x + offset;
 8009f2c:	eb01 0804 	add.w	r8, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f30:	f240 1adf 	movw	sl, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 8009f34:	3105      	adds	r1, #5
    int pixel_y = y_base + y;
 8009f36:	f102 0c01 	add.w	ip, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f3a:	45d0      	cmp	r8, sl
    int pixel_x = x_base + x + offset;
 8009f3c:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f3e:	bf8c      	ite	hi
 8009f40:	2400      	movhi	r4, #0
 8009f42:	2401      	movls	r4, #1
 8009f44:	4551      	cmp	r1, sl
 8009f46:	ea6f 0a0c 	mvn.w	sl, ip
 8009f4a:	bf8c      	ite	hi
 8009f4c:	2700      	movhi	r7, #0
 8009f4e:	2701      	movls	r7, #1
 8009f50:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8009f54:	9702      	str	r7, [sp, #8]
 8009f56:	2c00      	cmp	r4, #0
 8009f58:	f000 8081 	beq.w	800a05e <copy_2+0x1c2>
 8009f5c:	f1ba 0f00 	cmp.w	sl, #0
 8009f60:	d07d      	beq.n	800a05e <copy_2+0x1c2>
 8009f62:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009f66:	f280 8096 	bge.w	800a096 <copy_2+0x1fa>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009f6a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f6e:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009f72:	fa1f fa83 	uxth.w	sl, r3
 8009f76:	eb08 174c 	add.w	r7, r8, ip, lsl #5
 8009f7a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8009f7e:	f820 a017 	strh.w	sl, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f82:	d218      	bcs.n	8009fb6 <copy_2+0x11a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009f84:	448c      	add	ip, r1
 8009f86:	f820 a01c 	strh.w	sl, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 8009f8a:	f102 0c02 	add.w	ip, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009f8e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009f92:	da37      	bge.n	800a004 <copy_2+0x168>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009f94:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009f98:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 8009f9c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 8009fa0:	f102 0c03 	add.w	ip, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009fa4:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009fa8:	da05      	bge.n	8009fb6 <copy_2+0x11a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009faa:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009fae:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 8009fb2:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009fb6:	f102 0c04 	add.w	ip, r2, #4
 8009fba:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009fbe:	d207      	bcs.n	8009fd0 <copy_2+0x134>
 8009fc0:	9f00      	ldr	r7, [sp, #0]
 8009fc2:	b12f      	cbz	r7, 8009fd0 <copy_2+0x134>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009fc4:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009fc8:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 8009fcc:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009fd0:	f102 0c05 	add.w	ip, r2, #5
 8009fd4:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009fd8:	d206      	bcs.n	8009fe8 <copy_2+0x14c>
 8009fda:	b12e      	cbz	r6, 8009fe8 <copy_2+0x14c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009fdc:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009fe0:	eb09 1c4c 	add.w	ip, r9, ip, lsl #5
 8009fe4:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 8009fe8:	f102 0c06 	add.w	ip, r2, #6
 8009fec:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 8009ff0:	d208      	bcs.n	800a004 <copy_2+0x168>
 8009ff2:	9f01      	ldr	r7, [sp, #4]
 8009ff4:	b137      	cbz	r7, 800a004 <copy_2+0x168>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 8009ff6:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8009ffa:	9f03      	ldr	r7, [sp, #12]
 8009ffc:	eb07 1c4c 	add.w	ip, r7, ip, lsl #5
 800a000:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a004:	f112 0c07 	adds.w	ip, r2, #7
 800a008:	d44b      	bmi.n	800a0a2 <copy_2+0x206>
 800a00a:	2d00      	cmp	r5, #0
 800a00c:	d049      	beq.n	800a0a2 <copy_2+0x206>
 800a00e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800a012:	f2c0 80c8 	blt.w	800a1a6 <copy_2+0x30a>
    int pixel_y = y_base + y;
 800a016:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a018:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800a01c:	f04f 0c00 	mov.w	ip, #0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a020:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800a024:	ea4f 1242 	mov.w	r2, r2, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a028:	d30e      	bcc.n	800a048 <copy_2+0x1ac>
 800a02a:	ea15 050c 	ands.w	r5, r5, ip
 800a02e:	d172      	bne.n	800a116 <copy_2+0x27a>
 800a030:	9c01      	ldr	r4, [sp, #4]
 800a032:	ea1c 0704 	ands.w	r7, ip, r4
 800a036:	d176      	bne.n	800a126 <copy_2+0x28a>
 800a038:	ea1c 0606 	ands.w	r6, ip, r6
 800a03c:	d004      	beq.n	800a048 <copy_2+0x1ac>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a03e:	eb02 0409 	add.w	r4, r2, r9
 800a042:	46b4      	mov	ip, r6
 800a044:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a048:	9c00      	ldr	r4, [sp, #0]
 800a04a:	2c00      	cmp	r4, #0
 800a04c:	f000 8091 	beq.w	800a172 <copy_2+0x2d6>
 800a050:	f1bc 0f00 	cmp.w	ip, #0
 800a054:	f040 8089 	bne.w	800a16a <copy_2+0x2ce>
    fill_pixel(buffer, x, y, 1, 7, color);
    fill_pixel(buffer, x, y, 0, 8, color);
    fill_pixel(buffer, x, y, 0, 9, color);
    fill_pixel(buffer, x, y, 0, 10, color);
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800a058:	b005      	add	sp, #20
 800a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a05e:	9f02      	ldr	r7, [sp, #8]
 800a060:	ea1a 0a07 	ands.w	sl, sl, r7
 800a064:	d10d      	bne.n	800a082 <copy_2+0x1e6>
 800a066:	46ba      	mov	sl, r7
 800a068:	f112 0c02 	adds.w	ip, r2, #2
 800a06c:	d402      	bmi.n	800a074 <copy_2+0x1d8>
 800a06e:	f1ba 0f00 	cmp.w	sl, #0
 800a072:	d18c      	bne.n	8009f8e <copy_2+0xf2>
 800a074:	f112 0c03 	adds.w	ip, r2, #3
 800a078:	d49d      	bmi.n	8009fb6 <copy_2+0x11a>
 800a07a:	f1ba 0f00 	cmp.w	sl, #0
 800a07e:	d09a      	beq.n	8009fb6 <copy_2+0x11a>
 800a080:	e790      	b.n	8009fa4 <copy_2+0x108>
 800a082:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800a086:	dabd      	bge.n	800a004 <copy_2+0x168>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a088:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800a08c:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 800a090:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800a094:	e7e8      	b.n	800a068 <copy_2+0x1cc>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a096:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a09a:	d299      	bcs.n	8009fd0 <copy_2+0x134>
 800a09c:	f112 0c07 	adds.w	ip, r2, #7
 800a0a0:	d5b3      	bpl.n	800a00a <copy_2+0x16e>
 800a0a2:	f112 0c08 	adds.w	ip, r2, #8
 800a0a6:	d475      	bmi.n	800a194 <copy_2+0x2f8>
 800a0a8:	2c00      	cmp	r4, #0
 800a0aa:	d073      	beq.n	800a194 <copy_2+0x2f8>
 800a0ac:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800a0b0:	da1b      	bge.n	800a0ea <copy_2+0x24e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a0b2:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800a0b6:	eb08 1c4c 	add.w	ip, r8, ip, lsl #5
 800a0ba:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 800a0be:	f102 0c09 	add.w	ip, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a0c2:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800a0c6:	da10      	bge.n	800a0ea <copy_2+0x24e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a0c8:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800a0cc:	eb08 1c4c 	add.w	ip, r8, ip, lsl #5
 800a0d0:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 800a0d4:	f102 0c0a 	add.w	ip, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a0d8:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800a0dc:	da05      	bge.n	800a0ea <copy_2+0x24e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a0de:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800a0e2:	eb08 1c4c 	add.w	ip, r8, ip, lsl #5
 800a0e6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    int pixel_y = y_base + y;
 800a0ea:	f102 0c0b 	add.w	ip, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a0ee:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a0f2:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a0f6:	bf2c      	ite	cs
 800a0f8:	f04f 0c00 	movcs.w	ip, #0
 800a0fc:	f04f 0c01 	movcc.w	ip, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a100:	0152      	lsls	r2, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a102:	ea14 040c 	ands.w	r4, r4, ip
 800a106:	d090      	beq.n	800a02a <copy_2+0x18e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a108:	46a4      	mov	ip, r4
 800a10a:	4490      	add	r8, r2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a10c:	ea15 050c 	ands.w	r5, r5, ip
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a110:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a114:	d08c      	beq.n	800a030 <copy_2+0x194>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a116:	46ac      	mov	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a118:	9c01      	ldr	r4, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a11a:	4496      	add	lr, r2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a11c:	ea1c 0704 	ands.w	r7, ip, r4
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a120:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a124:	d088      	beq.n	800a038 <copy_2+0x19c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a126:	9c03      	ldr	r4, [sp, #12]
 800a128:	46bc      	mov	ip, r7
 800a12a:	4414      	add	r4, r2
 800a12c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a130:	e782      	b.n	800a038 <copy_2+0x19c>
 800a132:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
 800a136:	eb0b 1c4c 	add.w	ip, fp, ip, lsl #5
 800a13a:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800a13e:	e6f5      	b.n	8009f2c <copy_2+0x90>
 800a140:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a144:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800a148:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a14c:	e6d0      	b.n	8009ef0 <copy_2+0x54>
 800a14e:	ebc2 1802 	rsb	r8, r2, r2, lsl #4
 800a152:	eb09 1848 	add.w	r8, r9, r8, lsl #5
 800a156:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800a15a:	e6d7      	b.n	8009f0c <copy_2+0x70>
 800a15c:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a160:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 800a164:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a168:	e6b2      	b.n	8009ed0 <copy_2+0x34>
 800a16a:	eb0b 0402 	add.w	r4, fp, r2
 800a16e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a172:	f1bc 0f00 	cmp.w	ip, #0
 800a176:	f43f af6f 	beq.w	800a058 <copy_2+0x1bc>
 800a17a:	9c02      	ldr	r4, [sp, #8]
 800a17c:	2c00      	cmp	r4, #0
 800a17e:	f43f af6b 	beq.w	800a058 <copy_2+0x1bc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a182:	440a      	add	r2, r1
 800a184:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800a188:	b005      	add	sp, #20
 800a18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18e:	bf00      	nop
 800a190:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a194:	f112 0c09 	adds.w	ip, r2, #9
 800a198:	d50c      	bpl.n	800a1b4 <copy_2+0x318>
 800a19a:	f112 0c0a 	adds.w	ip, r2, #10
 800a19e:	d4a4      	bmi.n	800a0ea <copy_2+0x24e>
 800a1a0:	2c00      	cmp	r4, #0
 800a1a2:	d0a2      	beq.n	800a0ea <copy_2+0x24e>
 800a1a4:	e798      	b.n	800a0d8 <copy_2+0x23c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a1a6:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800a1aa:	eb0e 1c4c 	add.w	ip, lr, ip, lsl #5
 800a1ae:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800a1b2:	e776      	b.n	800a0a2 <copy_2+0x206>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a1b4:	2c00      	cmp	r4, #0
 800a1b6:	d184      	bne.n	800a0c2 <copy_2+0x226>
 800a1b8:	f112 0c0a 	adds.w	ip, r2, #10
 800a1bc:	d495      	bmi.n	800a0ea <copy_2+0x24e>
 800a1be:	e7ef      	b.n	800a1a0 <copy_2+0x304>

0800a1c0 <copy_3>:

void copy_3(uint16_t* buffer, int x, int y, uint32_t color)
{
 800a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800a1c4:	4cad      	ldr	r4, [pc, #692]	@ (800a47c <copy_3+0x2bc>)
 800a1c6:	1c4d      	adds	r5, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a1c8:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800a1cc:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 800a1ce:	6824      	ldr	r4, [r4, #0]
 800a1d0:	eb05 0704 	add.w	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a1d4:	bf2c      	ite	cs
 800a1d6:	2500      	movcs	r5, #0
 800a1d8:	2501      	movcc	r5, #1
 800a1da:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800a1de:	9703      	str	r7, [sp, #12]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a1e0:	bf2c      	ite	cs
 800a1e2:	2600      	movcs	r6, #0
 800a1e4:	2601      	movcc	r6, #1
 800a1e6:	9600      	str	r6, [sp, #0]
 800a1e8:	b116      	cbz	r6, 800a1f0 <copy_3+0x30>
 800a1ea:	2d00      	cmp	r5, #0
 800a1ec:	f040 8118 	bne.w	800a420 <copy_3+0x260>
    int pixel_x = x_base + x + offset;
 800a1f0:	f101 0e02 	add.w	lr, r1, #2
 800a1f4:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a1f6:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800a1fa:	bf2c      	ite	cs
 800a1fc:	f04f 0900 	movcs.w	r9, #0
 800a200:	f04f 0901 	movcc.w	r9, #1
 800a204:	b11d      	cbz	r5, 800a20e <copy_3+0x4e>
 800a206:	f1b9 0f00 	cmp.w	r9, #0
 800a20a:	f040 8102 	bne.w	800a412 <copy_3+0x252>
    int pixel_x = x_base + x + offset;
 800a20e:	f101 0c03 	add.w	ip, r1, #3
 800a212:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a214:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800a218:	bf2c      	ite	cs
 800a21a:	f04f 0800 	movcs.w	r8, #0
 800a21e:	f04f 0801 	movcc.w	r8, #1
 800a222:	b11d      	cbz	r5, 800a22c <copy_3+0x6c>
 800a224:	f1b8 0f00 	cmp.w	r8, #0
 800a228:	f040 80ec 	bne.w	800a404 <copy_3+0x244>
    int pixel_x = x_base + x + offset;
 800a22c:	1d0e      	adds	r6, r1, #4
 800a22e:	eb06 0a04 	add.w	sl, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a232:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 800a236:	bf2c      	ite	cs
 800a238:	2700      	movcs	r7, #0
 800a23a:	2701      	movcc	r7, #1
 800a23c:	b117      	cbz	r7, 800a244 <copy_3+0x84>
 800a23e:	2d00      	cmp	r5, #0
 800a240:	f040 80d9 	bne.w	800a3f6 <copy_3+0x236>
    int pixel_x = x_base + x + offset;
 800a244:	190d      	adds	r5, r1, r4
 800a246:	3105      	adds	r1, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a248:	f240 1bdf 	movw	fp, #479	@ 0x1df
    int pixel_x = x_base + x + offset;
 800a24c:	4421      	add	r1, r4
    int pixel_y = y_base + y;
 800a24e:	1c54      	adds	r4, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a250:	455d      	cmp	r5, fp
    int pixel_x = x_base + x + offset;
 800a252:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a254:	ea6f 0604 	mvn.w	r6, r4
 800a258:	bf8c      	ite	hi
 800a25a:	2500      	movhi	r5, #0
 800a25c:	2501      	movls	r5, #1
 800a25e:	0ff6      	lsrs	r6, r6, #31
 800a260:	9502      	str	r5, [sp, #8]
 800a262:	4035      	ands	r5, r6
 800a264:	f000 80a1 	beq.w	800a3aa <copy_3+0x1ea>
 800a268:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a26c:	f280 80bc 	bge.w	800a3e8 <copy_3+0x228>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a270:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a274:	9e01      	ldr	r6, [sp, #4]
 800a276:	b29d      	uxth	r5, r3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a278:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a27c:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800a280:	ea4f 1444 	mov.w	r4, r4, lsl #5
 800a284:	f820 5016 	strh.w	r5, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a288:	f080 8133 	bcs.w	800a4f2 <copy_3+0x332>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a28c:	440c      	add	r4, r1
 800a28e:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a292:	1c94      	adds	r4, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a294:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a298:	da19      	bge.n	800a2ce <copy_3+0x10e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a29a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a29e:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a2a2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a2a6:	1cd4      	adds	r4, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a2a8:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a2ac:	da0f      	bge.n	800a2ce <copy_3+0x10e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a2ae:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a2b2:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a2b6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a2ba:	1d14      	adds	r4, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a2bc:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a2c0:	da05      	bge.n	800a2ce <copy_3+0x10e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a2c2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a2c6:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a2ca:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a2ce:	2501      	movs	r5, #1
    int pixel_y = y_base + y;
 800a2d0:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a2d2:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800a2d6:	bf2c      	ite	cs
 800a2d8:	2400      	movcs	r4, #0
 800a2da:	2401      	movcc	r4, #1
 800a2dc:	ea14 0b09 	ands.w	fp, r4, r9
 800a2e0:	f040 80f8 	bne.w	800a4d4 <copy_3+0x314>
 800a2e4:	ea18 0b04 	ands.w	fp, r8, r4
 800a2e8:	f040 80a1 	bne.w	800a42e <copy_3+0x26e>
 800a2ec:	b137      	cbz	r7, 800a2fc <copy_3+0x13c>
 800a2ee:	b12c      	cbz	r4, 800a2fc <copy_3+0x13c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a2f0:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800a2f4:	eb0a 1646 	add.w	r6, sl, r6, lsl #5
 800a2f8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a2fc:	1d94      	adds	r4, r2, #6
 800a2fe:	f100 80bf 	bmi.w	800a480 <copy_3+0x2c0>
 800a302:	2d00      	cmp	r5, #0
 800a304:	f000 80bc 	beq.w	800a480 <copy_3+0x2c0>
 800a308:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a30c:	da37      	bge.n	800a37e <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a30e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a312:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a316:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a31a:	1dd4      	adds	r4, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a31c:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a320:	da2d      	bge.n	800a37e <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a322:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a326:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a32a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a32e:	f102 0408 	add.w	r4, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a332:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a336:	da22      	bge.n	800a37e <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a338:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a33c:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a340:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a344:	f102 0409 	add.w	r4, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a348:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a34c:	da17      	bge.n	800a37e <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a34e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    int pixel_y = y_base + y;
 800a352:	f102 060a 	add.w	r6, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a356:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a35a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a35e:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800a362:	da0c      	bge.n	800a37e <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a364:	ebc6 1406 	rsb	r4, r6, r6, lsl #4
 800a368:	b29d      	uxth	r5, r3
 800a36a:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 800a36e:	0164      	lsls	r4, r4, #5
 800a370:	f820 5011 	strh.w	r5, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a374:	9901      	ldr	r1, [sp, #4]
 800a376:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a37a:	f0c0 80a6 	bcc.w	800a4ca <copy_3+0x30a>
 800a37e:	320b      	adds	r2, #11
 800a380:	9c00      	ldr	r4, [sp, #0]
 800a382:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800a386:	bf2c      	ite	cs
 800a388:	2100      	movcs	r1, #0
 800a38a:	2101      	movcc	r1, #1
 800a38c:	2c00      	cmp	r4, #0
 800a38e:	d05d      	beq.n	800a44c <copy_3+0x28c>
 800a390:	2900      	cmp	r1, #0
 800a392:	d154      	bne.n	800a43e <copy_3+0x27e>
 800a394:	b137      	cbz	r7, 800a3a4 <copy_3+0x1e4>
 800a396:	b129      	cbz	r1, 800a3a4 <copy_3+0x1e4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a398:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800a39c:	eb0a 1242 	add.w	r2, sl, r2, lsl #5
 800a3a0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 5, 8, color);
    fill_pixel(buffer, x, y, 5, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    fill_pixel(buffer, x, y, 0, 10, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800a3a4:	b005      	add	sp, #20
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a3aa:	4559      	cmp	r1, fp
 800a3ac:	bf8c      	ite	hi
 800a3ae:	2500      	movhi	r5, #0
 800a3b0:	2501      	movls	r5, #1
 800a3b2:	402e      	ands	r6, r5
 800a3b4:	d10c      	bne.n	800a3d0 <copy_3+0x210>
 800a3b6:	1c94      	adds	r4, r2, #2
 800a3b8:	d402      	bmi.n	800a3c0 <copy_3+0x200>
 800a3ba:	2d00      	cmp	r5, #0
 800a3bc:	f47f af6a 	bne.w	800a294 <copy_3+0xd4>
 800a3c0:	1cd4      	adds	r4, r2, #3
 800a3c2:	f140 808f 	bpl.w	800a4e4 <copy_3+0x324>
 800a3c6:	1d16      	adds	r6, r2, #4
 800a3c8:	db82      	blt.n	800a2d0 <copy_3+0x110>
 800a3ca:	2d00      	cmp	r5, #0
 800a3cc:	d080      	beq.n	800a2d0 <copy_3+0x110>
 800a3ce:	e774      	b.n	800a2ba <copy_3+0xfa>
 800a3d0:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a3d4:	f6bf af7b 	bge.w	800a2ce <copy_3+0x10e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a3d8:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a3dc:	4635      	mov	r5, r6
 800a3de:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a3e2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a3e6:	e7e6      	b.n	800a3b6 <copy_3+0x1f6>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a3e8:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a3ec:	f080 8081 	bcs.w	800a4f2 <copy_3+0x332>
    int pixel_y = y_base + y;
 800a3f0:	1d56      	adds	r6, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a3f2:	2400      	movs	r4, #0
 800a3f4:	e77a      	b.n	800a2ec <copy_3+0x12c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a3f6:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800a3fa:	eb0a 1545 	add.w	r5, sl, r5, lsl #5
 800a3fe:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800a402:	e71f      	b.n	800a244 <copy_3+0x84>
 800a404:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a408:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a40c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a410:	e70c      	b.n	800a22c <copy_3+0x6c>
 800a412:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a416:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
 800a41a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a41e:	e6f6      	b.n	800a20e <copy_3+0x4e>
 800a420:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a424:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800a428:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a42c:	e6e0      	b.n	800a1f0 <copy_3+0x30>
 800a42e:	465c      	mov	r4, fp
 800a430:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 800a434:	eb0c 1b4b 	add.w	fp, ip, fp, lsl #5
 800a438:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800a43c:	e756      	b.n	800a2ec <copy_3+0x12c>
 800a43e:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800a442:	9d03      	ldr	r5, [sp, #12]
 800a444:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 800a448:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a44c:	2900      	cmp	r1, #0
 800a44e:	d0a1      	beq.n	800a394 <copy_3+0x1d4>
 800a450:	f1b9 0f00 	cmp.w	r9, #0
 800a454:	d10b      	bne.n	800a46e <copy_3+0x2ae>
 800a456:	2900      	cmp	r1, #0
 800a458:	d09c      	beq.n	800a394 <copy_3+0x1d4>
 800a45a:	f1b8 0f00 	cmp.w	r8, #0
 800a45e:	d099      	beq.n	800a394 <copy_3+0x1d4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a460:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800a464:	eb0c 1c44 	add.w	ip, ip, r4, lsl #5
 800a468:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800a46c:	e792      	b.n	800a394 <copy_3+0x1d4>
 800a46e:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800a472:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 800a476:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
 800a47a:	e7ec      	b.n	800a456 <copy_3+0x296>
 800a47c:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a480:	1dd4      	adds	r4, r2, #7
 800a482:	d402      	bmi.n	800a48a <copy_3+0x2ca>
 800a484:	2d00      	cmp	r5, #0
 800a486:	f47f af49 	bne.w	800a31c <copy_3+0x15c>
 800a48a:	f112 0408 	adds.w	r4, r2, #8
 800a48e:	d402      	bmi.n	800a496 <copy_3+0x2d6>
 800a490:	2d00      	cmp	r5, #0
 800a492:	f47f af4e 	bne.w	800a332 <copy_3+0x172>
 800a496:	f112 0409 	adds.w	r4, r2, #9
 800a49a:	d402      	bmi.n	800a4a2 <copy_3+0x2e2>
 800a49c:	2d00      	cmp	r5, #0
 800a49e:	f47f af53 	bne.w	800a348 <copy_3+0x188>
    int pixel_y = y_base + y;
 800a4a2:	f102 040a 	add.w	r4, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a4a6:	2c00      	cmp	r4, #0
    int pixel_y = y_base + y;
 800a4a8:	4626      	mov	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a4aa:	db02      	blt.n	800a4b2 <copy_3+0x2f2>
 800a4ac:	2d00      	cmp	r5, #0
 800a4ae:	f47f af56 	bne.w	800a35e <copy_3+0x19e>
 800a4b2:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a4b6:	f4bf af62 	bcs.w	800a37e <copy_3+0x1be>
 800a4ba:	9902      	ldr	r1, [sp, #8]
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	f43f af5e 	beq.w	800a37e <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a4c2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a4c6:	b29d      	uxth	r5, r3
 800a4c8:	0164      	lsls	r4, r4, #5
 800a4ca:	9901      	ldr	r1, [sp, #4]
 800a4cc:	4421      	add	r1, r4
 800a4ce:	f820 5011 	strh.w	r5, [r0, r1, lsl #1]
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
 800a4d2:	e754      	b.n	800a37e <copy_3+0x1be>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a4d4:	465c      	mov	r4, fp
 800a4d6:	ebc6 1b06 	rsb	fp, r6, r6, lsl #4
 800a4da:	eb0e 1b4b 	add.w	fp, lr, fp, lsl #5
 800a4de:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800a4e2:	e6ff      	b.n	800a2e4 <copy_3+0x124>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a4e4:	2d00      	cmp	r5, #0
 800a4e6:	f47f aedf 	bne.w	800a2a8 <copy_3+0xe8>
 800a4ea:	1d16      	adds	r6, r2, #4
 800a4ec:	f6ff aef0 	blt.w	800a2d0 <copy_3+0x110>
 800a4f0:	e76b      	b.n	800a3ca <copy_3+0x20a>
 800a4f2:	2500      	movs	r5, #0
 800a4f4:	e6ec      	b.n	800a2d0 <copy_3+0x110>
 800a4f6:	bf00      	nop

0800a4f8 <copy_4>:

void copy_4(uint16_t* buffer, int x, int y, uint32_t color)
{
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800a4fc:	4ca8      	ldr	r4, [pc, #672]	@ (800a7a0 <copy_4+0x2a8>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a4fe:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800a502:	b08b      	sub	sp, #44	@ 0x2c
    int pixel_x = x_base + x + offset;
 800a504:	6825      	ldr	r5, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a506:	bf2c      	ite	cs
 800a508:	2400      	movcs	r4, #0
 800a50a:	2401      	movcc	r4, #1
    int pixel_x = x_base + x + offset;
 800a50c:	eb01 0c05 	add.w	ip, r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a510:	4626      	mov	r6, r4
 800a512:	9402      	str	r4, [sp, #8]
 800a514:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800a518:	bf2c      	ite	cs
 800a51a:	2400      	movcs	r4, #0
 800a51c:	2401      	movcc	r4, #1
 800a51e:	b114      	cbz	r4, 800a526 <copy_4+0x2e>
 800a520:	2e00      	cmp	r6, #0
 800a522:	f040 810a 	bne.w	800a73a <copy_4+0x242>
    int pixel_y = y_base + y;
 800a526:	f102 0901 	add.w	r9, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a52a:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 800a52e:	bf2c      	ite	cs
 800a530:	2600      	movcs	r6, #0
 800a532:	2601      	movcc	r6, #1
 800a534:	9603      	str	r6, [sp, #12]
 800a536:	b114      	cbz	r4, 800a53e <copy_4+0x46>
 800a538:	2e00      	cmp	r6, #0
 800a53a:	f040 80f7 	bne.w	800a72c <copy_4+0x234>
    int pixel_y = y_base + y;
 800a53e:	1c96      	adds	r6, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a540:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800a544:	9608      	str	r6, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a546:	bf2c      	ite	cs
 800a548:	2700      	movcs	r7, #0
 800a54a:	2701      	movcc	r7, #1
 800a54c:	9704      	str	r7, [sp, #16]
 800a54e:	b114      	cbz	r4, 800a556 <copy_4+0x5e>
 800a550:	2f00      	cmp	r7, #0
 800a552:	f040 80e4 	bne.w	800a71e <copy_4+0x226>
    int pixel_y = y_base + y;
 800a556:	f102 0a03 	add.w	sl, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a55a:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800a55e:	bf2c      	ite	cs
 800a560:	2600      	movcs	r6, #0
 800a562:	2601      	movcc	r6, #1
 800a564:	9605      	str	r6, [sp, #20]
 800a566:	b114      	cbz	r4, 800a56e <copy_4+0x76>
 800a568:	2e00      	cmp	r6, #0
 800a56a:	f040 80d1 	bne.w	800a710 <copy_4+0x218>
    int pixel_y = y_base + y;
 800a56e:	f102 0b04 	add.w	fp, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a572:	f5bb 7f88 	cmp.w	fp, #272	@ 0x110
 800a576:	bf2c      	ite	cs
 800a578:	2600      	movcs	r6, #0
 800a57a:	2601      	movcc	r6, #1
 800a57c:	9606      	str	r6, [sp, #24]
 800a57e:	b114      	cbz	r4, 800a586 <copy_4+0x8e>
 800a580:	2e00      	cmp	r6, #0
 800a582:	f040 80be 	bne.w	800a702 <copy_4+0x20a>
    int pixel_y = y_base + y;
 800a586:	f102 0805 	add.w	r8, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a58a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800a58e:	bf2c      	ite	cs
 800a590:	2600      	movcs	r6, #0
 800a592:	2601      	movcc	r6, #1
 800a594:	9607      	str	r6, [sp, #28]
 800a596:	b114      	cbz	r4, 800a59e <copy_4+0xa6>
 800a598:	2e00      	cmp	r6, #0
 800a59a:	f040 80ab 	bne.w	800a6f4 <copy_4+0x1fc>
    int pixel_y = y_base + y;
 800a59e:	f102 0e06 	add.w	lr, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5a2:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800a5a6:	bf2c      	ite	cs
 800a5a8:	2600      	movcs	r6, #0
 800a5aa:	2601      	movcc	r6, #1
 800a5ac:	9601      	str	r6, [sp, #4]
 800a5ae:	b114      	cbz	r4, 800a5b6 <copy_4+0xbe>
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	f040 808e 	bne.w	800a6d2 <copy_4+0x1da>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a5b6:	ebce 160e 	rsb	r6, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5ba:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a5be:	ea4f 170e 	mov.w	r7, lr, lsl #4
 800a5c2:	ea4f 1646 	mov.w	r6, r6, lsl #5
 800a5c6:	9709      	str	r7, [sp, #36]	@ 0x24
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5c8:	bf2c      	ite	cs
 800a5ca:	2700      	movcs	r7, #0
 800a5cc:	2701      	movcc	r7, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a5ce:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5d0:	2c00      	cmp	r4, #0
 800a5d2:	d17b      	bne.n	800a6cc <copy_4+0x1d4>
    int pixel_x = x_base + x + offset;
 800a5d4:	1c4c      	adds	r4, r1, #1
 800a5d6:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5d8:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 800a5dc:	d202      	bcs.n	800a5e4 <copy_4+0xec>
 800a5de:	2f00      	cmp	r7, #0
 800a5e0:	f040 80c1 	bne.w	800a766 <copy_4+0x26e>
    int pixel_x = x_base + x + offset;
 800a5e4:	1c8c      	adds	r4, r1, #2
 800a5e6:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5e8:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 800a5ec:	d202      	bcs.n	800a5f4 <copy_4+0xfc>
 800a5ee:	2f00      	cmp	r7, #0
 800a5f0:	f040 80b4 	bne.w	800a75c <copy_4+0x264>
    int pixel_x = x_base + x + offset;
 800a5f4:	1ccc      	adds	r4, r1, #3
 800a5f6:	442c      	add	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a5f8:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
 800a5fc:	d202      	bcs.n	800a604 <copy_4+0x10c>
 800a5fe:	2f00      	cmp	r7, #0
 800a600:	f040 80a7 	bne.w	800a752 <copy_4+0x25a>
    int pixel_x = x_base + x + offset;
 800a604:	f101 0c04 	add.w	ip, r1, #4
 800a608:	44ac      	add	ip, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a60a:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800a60e:	bf2c      	ite	cs
 800a610:	2400      	movcs	r4, #0
 800a612:	2401      	movcc	r4, #1
 800a614:	b117      	cbz	r7, 800a61c <copy_4+0x124>
 800a616:	2c00      	cmp	r4, #0
 800a618:	f040 8096 	bne.w	800a748 <copy_4+0x250>
    int pixel_x = x_base + x + offset;
 800a61c:	3105      	adds	r1, #5
 800a61e:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a620:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a624:	d202      	bcs.n	800a62c <copy_4+0x134>
 800a626:	2f00      	cmp	r7, #0
 800a628:	f040 80a2 	bne.w	800a770 <copy_4+0x278>
 800a62c:	b304      	cbz	r4, 800a670 <copy_4+0x178>
 800a62e:	9902      	ldr	r1, [sp, #8]
 800a630:	2900      	cmp	r1, #0
 800a632:	f040 80a2 	bne.w	800a77a <copy_4+0x282>
 800a636:	b1dc      	cbz	r4, 800a670 <copy_4+0x178>
 800a638:	9903      	ldr	r1, [sp, #12]
 800a63a:	2900      	cmp	r1, #0
 800a63c:	f040 80b2 	bne.w	800a7a4 <copy_4+0x2ac>
 800a640:	b1b4      	cbz	r4, 800a670 <copy_4+0x178>
 800a642:	9904      	ldr	r1, [sp, #16]
 800a644:	2900      	cmp	r1, #0
 800a646:	f040 80a2 	bne.w	800a78e <copy_4+0x296>
 800a64a:	b18c      	cbz	r4, 800a670 <copy_4+0x178>
 800a64c:	9905      	ldr	r1, [sp, #20]
 800a64e:	2900      	cmp	r1, #0
 800a650:	f040 80b6 	bne.w	800a7c0 <copy_4+0x2c8>
 800a654:	b164      	cbz	r4, 800a670 <copy_4+0x178>
 800a656:	9906      	ldr	r1, [sp, #24]
 800a658:	2900      	cmp	r1, #0
 800a65a:	f040 80aa 	bne.w	800a7b2 <copy_4+0x2ba>
 800a65e:	b13c      	cbz	r4, 800a670 <copy_4+0x178>
 800a660:	9907      	ldr	r1, [sp, #28]
 800a662:	b129      	cbz	r1, 800a670 <copy_4+0x178>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a664:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800a668:	eb0c 1848 	add.w	r8, ip, r8, lsl #5
 800a66c:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a670:	9901      	ldr	r1, [sp, #4]
 800a672:	b111      	cbz	r1, 800a67a <copy_4+0x182>
 800a674:	2c00      	cmp	r4, #0
 800a676:	f040 80cf 	bne.w	800a818 <copy_4+0x320>
    int pixel_y = y_base + y;
 800a67a:	1dd1      	adds	r1, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a67c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800a680:	d202      	bcs.n	800a688 <copy_4+0x190>
 800a682:	2c00      	cmp	r4, #0
 800a684:	f040 80c1 	bne.w	800a80a <copy_4+0x312>
    int pixel_y = y_base + y;
 800a688:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a68c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800a690:	d202      	bcs.n	800a698 <copy_4+0x1a0>
 800a692:	2c00      	cmp	r4, #0
 800a694:	f040 80b2 	bne.w	800a7fc <copy_4+0x304>
    int pixel_y = y_base + y;
 800a698:	f102 0109 	add.w	r1, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a69c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800a6a0:	d202      	bcs.n	800a6a8 <copy_4+0x1b0>
 800a6a2:	2c00      	cmp	r4, #0
 800a6a4:	f040 80a3 	bne.w	800a7ee <copy_4+0x2f6>
    int pixel_y = y_base + y;
 800a6a8:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a6ac:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800a6b0:	d202      	bcs.n	800a6b8 <copy_4+0x1c0>
 800a6b2:	2c00      	cmp	r4, #0
 800a6b4:	f040 8094 	bne.w	800a7e0 <copy_4+0x2e8>
    int pixel_y = y_base + y;
 800a6b8:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a6ba:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800a6be:	d202      	bcs.n	800a6c6 <copy_4+0x1ce>
 800a6c0:	2c00      	cmp	r4, #0
 800a6c2:	f040 8084 	bne.w	800a7ce <copy_4+0x2d6>
    for (int i = 0; i < 7; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 0; i < 6; i++) fill_pixel(buffer, x, y, i, 6, color);
    for (int i = 0; i < 12; i++) fill_pixel(buffer, x, y, 4, i, color);
}
 800a6c6:	b00b      	add	sp, #44	@ 0x2c
 800a6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a6cc:	2f00      	cmp	r7, #0
 800a6ce:	d081      	beq.n	800a5d4 <copy_4+0xdc>
 800a6d0:	e00a      	b.n	800a6e8 <copy_4+0x1f0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a6d2:	ebce 160e 	rsb	r6, lr, lr, lsl #4
 800a6d6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a6da:	9409      	str	r4, [sp, #36]	@ 0x24
 800a6dc:	eb0c 1446 	add.w	r4, ip, r6, lsl #5
 800a6e0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    for (int i = 0; i < 7; i++) fill_pixel(buffer, x, y, 0, i, color);
 800a6e4:	0174      	lsls	r4, r6, #5
 800a6e6:	9400      	str	r4, [sp, #0]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a6e8:	9c00      	ldr	r4, [sp, #0]
 800a6ea:	2701      	movs	r7, #1
 800a6ec:	44a4      	add	ip, r4
 800a6ee:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800a6f2:	e76f      	b.n	800a5d4 <copy_4+0xdc>
 800a6f4:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
 800a6f8:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a6fc:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a700:	e74d      	b.n	800a59e <copy_4+0xa6>
 800a702:	ebcb 160b 	rsb	r6, fp, fp, lsl #4
 800a706:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a70a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a70e:	e73a      	b.n	800a586 <copy_4+0x8e>
 800a710:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 800a714:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a718:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a71c:	e727      	b.n	800a56e <copy_4+0x76>
 800a71e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800a722:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a726:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a72a:	e714      	b.n	800a556 <copy_4+0x5e>
 800a72c:	ebc9 1609 	rsb	r6, r9, r9, lsl #4
 800a730:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a734:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a738:	e701      	b.n	800a53e <copy_4+0x46>
 800a73a:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800a73e:	eb0c 1646 	add.w	r6, ip, r6, lsl #5
 800a742:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a746:	e6ee      	b.n	800a526 <copy_4+0x2e>
 800a748:	9e00      	ldr	r6, [sp, #0]
 800a74a:	4466      	add	r6, ip
 800a74c:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800a750:	e764      	b.n	800a61c <copy_4+0x124>
 800a752:	9e00      	ldr	r6, [sp, #0]
 800a754:	4434      	add	r4, r6
 800a756:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a75a:	e753      	b.n	800a604 <copy_4+0x10c>
 800a75c:	9e00      	ldr	r6, [sp, #0]
 800a75e:	4434      	add	r4, r6
 800a760:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a764:	e746      	b.n	800a5f4 <copy_4+0xfc>
 800a766:	9e00      	ldr	r6, [sp, #0]
 800a768:	4434      	add	r4, r6
 800a76a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800a76e:	e739      	b.n	800a5e4 <copy_4+0xec>
 800a770:	9d00      	ldr	r5, [sp, #0]
 800a772:	4429      	add	r1, r5
 800a774:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a778:	e758      	b.n	800a62c <copy_4+0x134>
 800a77a:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 800a77e:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a782:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a786:	2c00      	cmp	r4, #0
 800a788:	f47f af56 	bne.w	800a638 <copy_4+0x140>
 800a78c:	e770      	b.n	800a670 <copy_4+0x178>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a78e:	9908      	ldr	r1, [sp, #32]
 800a790:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800a794:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a798:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a79c:	e755      	b.n	800a64a <copy_4+0x152>
 800a79e:	bf00      	nop
 800a7a0:	240001b8 	.word	0x240001b8
 800a7a4:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 800a7a8:	eb0c 1949 	add.w	r9, ip, r9, lsl #5
 800a7ac:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800a7b0:	e746      	b.n	800a640 <copy_4+0x148>
 800a7b2:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 800a7b6:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a7ba:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a7be:	e74e      	b.n	800a65e <copy_4+0x166>
 800a7c0:	ebca 110a 	rsb	r1, sl, sl, lsl #4
 800a7c4:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a7c8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a7cc:	e742      	b.n	800a654 <copy_4+0x15c>
 800a7ce:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800a7d2:	eb0c 1c42 	add.w	ip, ip, r2, lsl #5
 800a7d6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
}
 800a7da:	b00b      	add	sp, #44	@ 0x2c
 800a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a7e0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800a7e4:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a7e8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a7ec:	e764      	b.n	800a6b8 <copy_4+0x1c0>
 800a7ee:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800a7f2:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a7f6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a7fa:	e755      	b.n	800a6a8 <copy_4+0x1b0>
 800a7fc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800a800:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a804:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a808:	e746      	b.n	800a698 <copy_4+0x1a0>
 800a80a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800a80e:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a812:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a816:	e737      	b.n	800a688 <copy_4+0x190>
 800a818:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a81a:	eba1 010e 	sub.w	r1, r1, lr
 800a81e:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800a822:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a826:	e728      	b.n	800a67a <copy_4+0x182>

0800a828 <copy_5>:

void copy_5(uint16_t* buffer, int x, int y, uint32_t color)
{
 800a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800a82c:	4ca9      	ldr	r4, [pc, #676]	@ (800aad4 <copy_5+0x2ac>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a82e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a832:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
{
 800a836:	b085      	sub	sp, #20
    int pixel_x = x_base + x + offset;
 800a838:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a83a:	bf2c      	ite	cs
 800a83c:	2500      	movcs	r5, #0
 800a83e:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a840:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    int pixel_x = x_base + x + offset;
 800a844:	eb01 0e04 	add.w	lr, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a848:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800a84c:	bf2c      	ite	cs
 800a84e:	2600      	movcs	r6, #0
 800a850:	2601      	movcc	r6, #1
 800a852:	b115      	cbz	r5, 800a85a <copy_5+0x32>
 800a854:	2e00      	cmp	r6, #0
 800a856:	f040 8131 	bne.w	800aabc <copy_5+0x294>
    int pixel_x = x_base + x + offset;
 800a85a:	1c4f      	adds	r7, r1, #1
 800a85c:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a85e:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800a862:	9703      	str	r7, [sp, #12]
 800a864:	bf2c      	ite	cs
 800a866:	2700      	movcs	r7, #0
 800a868:	2701      	movcc	r7, #1
 800a86a:	9700      	str	r7, [sp, #0]
 800a86c:	b115      	cbz	r5, 800a874 <copy_5+0x4c>
 800a86e:	2f00      	cmp	r7, #0
 800a870:	f040 815a 	bne.w	800ab28 <copy_5+0x300>
    int pixel_x = x_base + x + offset;
 800a874:	1c8f      	adds	r7, r1, #2
 800a876:	eb07 0a04 	add.w	sl, r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a87a:	f5ba 7ff0 	cmp.w	sl, #480	@ 0x1e0
 800a87e:	bf2c      	ite	cs
 800a880:	2700      	movcs	r7, #0
 800a882:	2701      	movcc	r7, #1
 800a884:	9701      	str	r7, [sp, #4]
 800a886:	b115      	cbz	r5, 800a88e <copy_5+0x66>
 800a888:	2f00      	cmp	r7, #0
 800a88a:	f040 8148 	bne.w	800ab1e <copy_5+0x2f6>
    int pixel_x = x_base + x + offset;
 800a88e:	1ccf      	adds	r7, r1, #3
 800a890:	eb07 0904 	add.w	r9, r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a894:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 800a898:	bf2c      	ite	cs
 800a89a:	2700      	movcs	r7, #0
 800a89c:	2701      	movcc	r7, #1
 800a89e:	9702      	str	r7, [sp, #8]
 800a8a0:	b115      	cbz	r5, 800a8a8 <copy_5+0x80>
 800a8a2:	2f00      	cmp	r7, #0
 800a8a4:	f040 8145 	bne.w	800ab32 <copy_5+0x30a>
    int pixel_x = x_base + x + offset;
 800a8a8:	1d0f      	adds	r7, r1, #4
 800a8aa:	eb07 0804 	add.w	r8, r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a8ae:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800a8b2:	bf2c      	ite	cs
 800a8b4:	2700      	movcs	r7, #0
 800a8b6:	2701      	movcc	r7, #1
 800a8b8:	b115      	cbz	r5, 800a8c0 <copy_5+0x98>
 800a8ba:	2f00      	cmp	r7, #0
 800a8bc:	f040 810c 	bne.w	800aad8 <copy_5+0x2b0>
    int pixel_x = x_base + x + offset;
 800a8c0:	3105      	adds	r1, #5
 800a8c2:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a8c4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a8c8:	bf2c      	ite	cs
 800a8ca:	f04f 0b00 	movcs.w	fp, #0
 800a8ce:	f04f 0b01 	movcc.w	fp, #1
 800a8d2:	f1bb 0f00 	cmp.w	fp, #0
 800a8d6:	d002      	beq.n	800a8de <copy_5+0xb6>
 800a8d8:	2d00      	cmp	r5, #0
 800a8da:	f040 8102 	bne.w	800aae2 <copy_5+0x2ba>
 800a8de:	1c54      	adds	r4, r2, #1
 800a8e0:	f100 80b8 	bmi.w	800aa54 <copy_5+0x22c>
 800a8e4:	2e00      	cmp	r6, #0
 800a8e6:	f000 80b5 	beq.w	800aa54 <copy_5+0x22c>
 800a8ea:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a8ee:	da23      	bge.n	800a938 <copy_5+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a8f0:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a8f4:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 800a8f8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a8fc:	1c94      	adds	r4, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a8fe:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a902:	da19      	bge.n	800a938 <copy_5+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a904:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a908:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 800a90c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a910:	1cd4      	adds	r4, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a912:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a916:	da0f      	bge.n	800a938 <copy_5+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a918:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a91c:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 800a920:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a924:	1d14      	adds	r4, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a926:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a92a:	da05      	bge.n	800a938 <copy_5+0x110>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a92c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a930:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 800a934:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a938:	1d54      	adds	r4, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a93a:	f50c 6c16 	add.w	ip, ip, #2400	@ 0x960
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a93e:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a942:	bf2c      	ite	cs
 800a944:	2400      	movcs	r4, #0
 800a946:	2401      	movcc	r4, #1
 800a948:	b1ac      	cbz	r4, 800a976 <copy_5+0x14e>
 800a94a:	2e00      	cmp	r6, #0
 800a94c:	f040 80fb 	bne.w	800ab46 <copy_5+0x31e>
 800a950:	b18c      	cbz	r4, 800a976 <copy_5+0x14e>
 800a952:	9d00      	ldr	r5, [sp, #0]
 800a954:	2d00      	cmp	r5, #0
 800a956:	f040 80f1 	bne.w	800ab3c <copy_5+0x314>
 800a95a:	b164      	cbz	r4, 800a976 <copy_5+0x14e>
 800a95c:	9d01      	ldr	r5, [sp, #4]
 800a95e:	2d00      	cmp	r5, #0
 800a960:	f040 80ff 	bne.w	800ab62 <copy_5+0x33a>
 800a964:	b13c      	cbz	r4, 800a976 <copy_5+0x14e>
 800a966:	9d02      	ldr	r5, [sp, #8]
 800a968:	2d00      	cmp	r5, #0
 800a96a:	f040 80f1 	bne.w	800ab50 <copy_5+0x328>
 800a96e:	b114      	cbz	r4, 800a976 <copy_5+0x14e>
 800a970:	2f00      	cmp	r7, #0
 800a972:	f040 80f2 	bne.w	800ab5a <copy_5+0x332>
 800a976:	1d94      	adds	r4, r2, #6
 800a978:	d452      	bmi.n	800aa20 <copy_5+0x1f8>
 800a97a:	f1bb 0f00 	cmp.w	fp, #0
 800a97e:	d04f      	beq.n	800aa20 <copy_5+0x1f8>
 800a980:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a984:	da36      	bge.n	800a9f4 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a986:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a98a:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a98e:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a992:	1dd4      	adds	r4, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a994:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a998:	da2c      	bge.n	800a9f4 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a99a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a99e:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a9a2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a9a6:	f102 0408 	add.w	r4, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a9aa:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a9ae:	da21      	bge.n	800a9f4 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a9b0:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800a9b4:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a9b8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    int pixel_y = y_base + y;
 800a9bc:	f102 0409 	add.w	r4, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a9c0:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800a9c4:	da16      	bge.n	800a9f4 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a9c6:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    int pixel_y = y_base + y;
 800a9ca:	f102 050a 	add.w	r5, r2, #10
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a9ce:	eb01 1444 	add.w	r4, r1, r4, lsl #5
 800a9d2:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a9d6:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800a9da:	da0b      	bge.n	800a9f4 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a9dc:	ebc5 1405 	rsb	r4, r5, r5, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a9e0:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800a9e4:	b29d      	uxth	r5, r3
 800a9e6:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 800a9ea:	ea4f 1444 	mov.w	r4, r4, lsl #5
 800a9ee:	f820 5011 	strh.w	r5, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a9f2:	d32b      	bcc.n	800aa4c <copy_5+0x224>
    int pixel_y = y_base + y;
 800a9f4:	320b      	adds	r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800a9f6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800a9fa:	bf2c      	ite	cs
 800a9fc:	2100      	movcs	r1, #0
 800a9fe:	2101      	movcc	r1, #1
 800aa00:	b159      	cbz	r1, 800aa1a <copy_5+0x1f2>
 800aa02:	9c00      	ldr	r4, [sp, #0]
 800aa04:	2c00      	cmp	r4, #0
 800aa06:	d14a      	bne.n	800aa9e <copy_5+0x276>
 800aa08:	b139      	cbz	r1, 800aa1a <copy_5+0x1f2>
 800aa0a:	9c01      	ldr	r4, [sp, #4]
 800aa0c:	2c00      	cmp	r4, #0
 800aa0e:	d13f      	bne.n	800aa90 <copy_5+0x268>
 800aa10:	b119      	cbz	r1, 800aa1a <copy_5+0x1f2>
 800aa12:	9c02      	ldr	r4, [sp, #8]
 800aa14:	bbac      	cbnz	r4, 800aa82 <copy_5+0x25a>
 800aa16:	b101      	cbz	r1, 800aa1a <copy_5+0x1f2>
 800aa18:	bb57      	cbnz	r7, 800aa70 <copy_5+0x248>
    fill_pixel(buffer, x, y, 5, 8, color);
    fill_pixel(buffer, x, y, 5, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    fill_pixel(buffer, x, y, 0, 10, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800aa1a:	b005      	add	sp, #20
 800aa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aa20:	1dd4      	adds	r4, r2, #7
 800aa22:	d574      	bpl.n	800ab0e <copy_5+0x2e6>
 800aa24:	f112 0408 	adds.w	r4, r2, #8
 800aa28:	d560      	bpl.n	800aaec <copy_5+0x2c4>
 800aa2a:	f112 0409 	adds.w	r4, r2, #9
 800aa2e:	d564      	bpl.n	800aafa <copy_5+0x2d2>
    int pixel_y = y_base + y;
 800aa30:	f102 040a 	add.w	r4, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aa34:	2c00      	cmp	r4, #0
    int pixel_y = y_base + y;
 800aa36:	4625      	mov	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aa38:	da45      	bge.n	800aac6 <copy_5+0x29e>
 800aa3a:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800aa3e:	d2d9      	bcs.n	800a9f4 <copy_5+0x1cc>
 800aa40:	2e00      	cmp	r6, #0
 800aa42:	d0d7      	beq.n	800a9f4 <copy_5+0x1cc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aa44:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800aa48:	b29d      	uxth	r5, r3
 800aa4a:	0164      	lsls	r4, r4, #5
 800aa4c:	4474      	add	r4, lr
 800aa4e:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
 800aa52:	e7cf      	b.n	800a9f4 <copy_5+0x1cc>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aa54:	1c94      	adds	r4, r2, #2
 800aa56:	d402      	bmi.n	800aa5e <copy_5+0x236>
 800aa58:	2e00      	cmp	r6, #0
 800aa5a:	f47f af50 	bne.w	800a8fe <copy_5+0xd6>
 800aa5e:	1cd4      	adds	r4, r2, #3
 800aa60:	d525      	bpl.n	800aaae <copy_5+0x286>
 800aa62:	1d14      	adds	r4, r2, #4
 800aa64:	f53f af68 	bmi.w	800a938 <copy_5+0x110>
 800aa68:	2e00      	cmp	r6, #0
 800aa6a:	f43f af65 	beq.w	800a938 <copy_5+0x110>
 800aa6e:	e75a      	b.n	800a926 <copy_5+0xfe>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aa70:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800aa74:	eb08 1242 	add.w	r2, r8, r2, lsl #5
 800aa78:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800aa7c:	b005      	add	sp, #20
 800aa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aa82:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800aa86:	eb09 1444 	add.w	r4, r9, r4, lsl #5
 800aa8a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800aa8e:	e7c2      	b.n	800aa16 <copy_5+0x1ee>
 800aa90:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800aa94:	eb0a 1444 	add.w	r4, sl, r4, lsl #5
 800aa98:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800aa9c:	e7b8      	b.n	800aa10 <copy_5+0x1e8>
 800aa9e:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800aaa2:	9d03      	ldr	r5, [sp, #12]
 800aaa4:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 800aaa8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800aaac:	e7ac      	b.n	800aa08 <copy_5+0x1e0>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aaae:	2e00      	cmp	r6, #0
 800aab0:	f47f af2f 	bne.w	800a912 <copy_5+0xea>
 800aab4:	1d14      	adds	r4, r2, #4
 800aab6:	f53f af3f 	bmi.w	800a938 <copy_5+0x110>
 800aaba:	e7d5      	b.n	800aa68 <copy_5+0x240>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aabc:	eb0c 070e 	add.w	r7, ip, lr
 800aac0:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800aac4:	e6c9      	b.n	800a85a <copy_5+0x32>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aac6:	f1bb 0f00 	cmp.w	fp, #0
 800aaca:	d184      	bne.n	800a9d6 <copy_5+0x1ae>
 800aacc:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800aad0:	d3b6      	bcc.n	800aa40 <copy_5+0x218>
 800aad2:	e78f      	b.n	800a9f4 <copy_5+0x1cc>
 800aad4:	240001b8 	.word	0x240001b8
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aad8:	eb0c 0b08 	add.w	fp, ip, r8
 800aadc:	f820 301b 	strh.w	r3, [r0, fp, lsl #1]
 800aae0:	e6ee      	b.n	800a8c0 <copy_5+0x98>
 800aae2:	eb01 040c 	add.w	r4, r1, ip
 800aae6:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800aaea:	e6f8      	b.n	800a8de <copy_5+0xb6>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aaec:	f1bb 0f00 	cmp.w	fp, #0
 800aaf0:	f47f af5b 	bne.w	800a9aa <copy_5+0x182>
 800aaf4:	f112 0409 	adds.w	r4, r2, #9
 800aaf8:	d49a      	bmi.n	800aa30 <copy_5+0x208>
 800aafa:	f1bb 0f00 	cmp.w	fp, #0
 800aafe:	f47f af5f 	bne.w	800a9c0 <copy_5+0x198>
    int pixel_y = y_base + y;
 800ab02:	f102 040a 	add.w	r4, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab06:	2c00      	cmp	r4, #0
    int pixel_y = y_base + y;
 800ab08:	4625      	mov	r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab0a:	db96      	blt.n	800aa3a <copy_5+0x212>
 800ab0c:	e7db      	b.n	800aac6 <copy_5+0x29e>
 800ab0e:	f1bb 0f00 	cmp.w	fp, #0
 800ab12:	f47f af3f 	bne.w	800a994 <copy_5+0x16c>
 800ab16:	f112 0408 	adds.w	r4, r2, #8
 800ab1a:	d486      	bmi.n	800aa2a <copy_5+0x202>
 800ab1c:	e7e6      	b.n	800aaec <copy_5+0x2c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ab1e:	eb0c 070a 	add.w	r7, ip, sl
 800ab22:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ab26:	e6b2      	b.n	800a88e <copy_5+0x66>
 800ab28:	9f03      	ldr	r7, [sp, #12]
 800ab2a:	4467      	add	r7, ip
 800ab2c:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ab30:	e6a0      	b.n	800a874 <copy_5+0x4c>
 800ab32:	eb0c 0709 	add.w	r7, ip, r9
 800ab36:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ab3a:	e6b5      	b.n	800a8a8 <copy_5+0x80>
 800ab3c:	9d03      	ldr	r5, [sp, #12]
 800ab3e:	4465      	add	r5, ip
 800ab40:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800ab44:	e709      	b.n	800a95a <copy_5+0x132>
 800ab46:	eb0c 050e 	add.w	r5, ip, lr
 800ab4a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800ab4e:	e6ff      	b.n	800a950 <copy_5+0x128>
 800ab50:	eb0c 0509 	add.w	r5, ip, r9
 800ab54:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800ab58:	e709      	b.n	800a96e <copy_5+0x146>
 800ab5a:	44c4      	add	ip, r8
 800ab5c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800ab60:	e709      	b.n	800a976 <copy_5+0x14e>
 800ab62:	eb0c 050a 	add.w	r5, ip, sl
 800ab66:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800ab6a:	e6fb      	b.n	800a964 <copy_5+0x13c>

0800ab6c <copy_6>:

void copy_6(uint16_t* buffer, int x, int y, uint32_t color)
{
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800ab70:	4c9c      	ldr	r4, [pc, #624]	@ (800ade4 <copy_6+0x278>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab72:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800ab76:	b08f      	sub	sp, #60	@ 0x3c
    int pixel_x = x_base + x + offset;
 800ab78:	6825      	ldr	r5, [r4, #0]
 800ab7a:	f101 0401 	add.w	r4, r1, #1
 800ab7e:	eb04 0705 	add.w	r7, r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab82:	bf2c      	ite	cs
 800ab84:	2400      	movcs	r4, #0
 800ab86:	2401      	movcc	r4, #1
 800ab88:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800ab8c:	9706      	str	r7, [sp, #24]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ab8e:	bf2c      	ite	cs
 800ab90:	2600      	movcs	r6, #0
 800ab92:	2601      	movcc	r6, #1
 800ab94:	9601      	str	r6, [sp, #4]
 800ab96:	b114      	cbz	r4, 800ab9e <copy_6+0x32>
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	f040 8104 	bne.w	800ada6 <copy_6+0x23a>
    int pixel_x = x_base + x + offset;
 800ab9e:	1c8e      	adds	r6, r1, #2
 800aba0:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aba2:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800aba6:	9707      	str	r7, [sp, #28]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aba8:	bf2c      	ite	cs
 800abaa:	2600      	movcs	r6, #0
 800abac:	2601      	movcc	r6, #1
 800abae:	9602      	str	r6, [sp, #8]
 800abb0:	b114      	cbz	r4, 800abb8 <copy_6+0x4c>
 800abb2:	2e00      	cmp	r6, #0
 800abb4:	f040 80f0 	bne.w	800ad98 <copy_6+0x22c>
    int pixel_x = x_base + x + offset;
 800abb8:	1cce      	adds	r6, r1, #3
 800abba:	1977      	adds	r7, r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800abbc:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800abc0:	9708      	str	r7, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800abc2:	bf2c      	ite	cs
 800abc4:	2600      	movcs	r6, #0
 800abc6:	2601      	movcc	r6, #1
 800abc8:	9603      	str	r6, [sp, #12]
 800abca:	b114      	cbz	r4, 800abd2 <copy_6+0x66>
 800abcc:	2e00      	cmp	r6, #0
 800abce:	f040 80dc 	bne.w	800ad8a <copy_6+0x21e>
    int pixel_x = x_base + x + offset;
 800abd2:	1d0e      	adds	r6, r1, #4
 800abd4:	442e      	add	r6, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800abd6:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800abda:	9605      	str	r6, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800abdc:	bf2c      	ite	cs
 800abde:	f04f 0b00 	movcs.w	fp, #0
 800abe2:	f04f 0b01 	movcc.w	fp, #1
 800abe6:	f1bb 0f00 	cmp.w	fp, #0
 800abea:	d002      	beq.n	800abf2 <copy_6+0x86>
 800abec:	2c00      	cmp	r4, #0
 800abee:	f040 80c5 	bne.w	800ad7c <copy_6+0x210>
    int pixel_x = x_base + x + offset;
 800abf2:	194e      	adds	r6, r1, r5
    int pixel_y = y_base + y;
 800abf4:	1c57      	adds	r7, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800abf6:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800abfa:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800abfc:	bf2c      	ite	cs
 800abfe:	2400      	movcs	r4, #0
 800ac00:	2401      	movcc	r4, #1
 800ac02:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800ac06:	d202      	bcs.n	800ac0e <copy_6+0xa2>
 800ac08:	2c00      	cmp	r4, #0
 800ac0a:	f040 80d3 	bne.w	800adb4 <copy_6+0x248>
    int pixel_y = y_base + y;
 800ac0e:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac10:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800ac14:	d202      	bcs.n	800ac1c <copy_6+0xb0>
 800ac16:	2c00      	cmp	r4, #0
 800ac18:	f040 80f9 	bne.w	800ae0e <copy_6+0x2a2>
    int pixel_y = y_base + y;
 800ac1c:	1cd7      	adds	r7, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac1e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800ac22:	d202      	bcs.n	800ac2a <copy_6+0xbe>
 800ac24:	2c00      	cmp	r4, #0
 800ac26:	f040 8112 	bne.w	800ae4e <copy_6+0x2e2>
    int pixel_y = y_base + y;
 800ac2a:	1d17      	adds	r7, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac2c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800ac30:	d202      	bcs.n	800ac38 <copy_6+0xcc>
 800ac32:	2c00      	cmp	r4, #0
 800ac34:	f040 8103 	bne.w	800ae3e <copy_6+0x2d2>
    int pixel_y = y_base + y;
 800ac38:	f102 0c05 	add.w	ip, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac3c:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800ac40:	d202      	bcs.n	800ac48 <copy_6+0xdc>
 800ac42:	2c00      	cmp	r4, #0
 800ac44:	f040 8123 	bne.w	800ae8e <copy_6+0x322>
    int pixel_y = y_base + y;
 800ac48:	1d97      	adds	r7, r2, #6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ac4a:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac4e:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
    int pixel_y = y_base + y;
 800ac52:	970d      	str	r7, [sp, #52]	@ 0x34
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac54:	bf2c      	ite	cs
 800ac56:	2600      	movcs	r6, #0
 800ac58:	2601      	movcc	r6, #1
 800ac5a:	9609      	str	r6, [sp, #36]	@ 0x24
 800ac5c:	b114      	cbz	r4, 800ac64 <copy_6+0xf8>
 800ac5e:	2e00      	cmp	r6, #0
 800ac60:	f040 810d 	bne.w	800ae7e <copy_6+0x312>
    int pixel_y = y_base + y;
 800ac64:	f102 0907 	add.w	r9, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac68:	f5b9 7f88 	cmp.w	r9, #272	@ 0x110
 800ac6c:	bf2c      	ite	cs
 800ac6e:	2600      	movcs	r6, #0
 800ac70:	2601      	movcc	r6, #1
 800ac72:	960a      	str	r6, [sp, #40]	@ 0x28
 800ac74:	b114      	cbz	r4, 800ac7c <copy_6+0x110>
 800ac76:	2e00      	cmp	r6, #0
 800ac78:	f040 80f9 	bne.w	800ae6e <copy_6+0x302>
    int pixel_y = y_base + y;
 800ac7c:	f102 0808 	add.w	r8, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac80:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800ac84:	bf2c      	ite	cs
 800ac86:	2600      	movcs	r6, #0
 800ac88:	2601      	movcc	r6, #1
 800ac8a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ac8c:	b114      	cbz	r4, 800ac94 <copy_6+0x128>
 800ac8e:	2e00      	cmp	r6, #0
 800ac90:	f040 80e5 	bne.w	800ae5e <copy_6+0x2f2>
    int pixel_y = y_base + y;
 800ac94:	f102 0709 	add.w	r7, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ac98:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800ac9c:	bf2c      	ite	cs
 800ac9e:	2600      	movcs	r6, #0
 800aca0:	2601      	movcc	r6, #1
 800aca2:	960c      	str	r6, [sp, #48]	@ 0x30
 800aca4:	b114      	cbz	r4, 800acac <copy_6+0x140>
 800aca6:	2e00      	cmp	r6, #0
 800aca8:	f040 80c1 	bne.w	800ae2e <copy_6+0x2c2>
    int pixel_y = y_base + y;
 800acac:	f102 0a0a 	add.w	sl, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800acb0:	f5ba 7f88 	cmp.w	sl, #272	@ 0x110
 800acb4:	bf2c      	ite	cs
 800acb6:	2600      	movcs	r6, #0
 800acb8:	2601      	movcc	r6, #1
 800acba:	9604      	str	r6, [sp, #16]
 800acbc:	b116      	cbz	r6, 800acc4 <copy_6+0x158>
 800acbe:	2c00      	cmp	r4, #0
 800acc0:	f040 80ad 	bne.w	800ae1e <copy_6+0x2b2>
 800acc4:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800acc8:	ebae 0e0c 	sub.w	lr, lr, ip
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800accc:	bf2c      	ite	cs
 800acce:	2400      	movcs	r4, #0
 800acd0:	2401      	movcc	r4, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800acd2:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800acd6:	b16c      	cbz	r4, 800acf4 <copy_6+0x188>
 800acd8:	9e01      	ldr	r6, [sp, #4]
 800acda:	2e00      	cmp	r6, #0
 800acdc:	d176      	bne.n	800adcc <copy_6+0x260>
 800acde:	b14c      	cbz	r4, 800acf4 <copy_6+0x188>
 800ace0:	9e02      	ldr	r6, [sp, #8]
 800ace2:	2e00      	cmp	r6, #0
 800ace4:	d16d      	bne.n	800adc2 <copy_6+0x256>
 800ace6:	b12c      	cbz	r4, 800acf4 <copy_6+0x188>
 800ace8:	9e03      	ldr	r6, [sp, #12]
 800acea:	b11e      	cbz	r6, 800acf4 <copy_6+0x188>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800acec:	9e08      	ldr	r6, [sp, #32]
 800acee:	4476      	add	r6, lr
 800acf0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800acf4:	f1bb 0f00 	cmp.w	fp, #0
 800acf8:	d001      	beq.n	800acfe <copy_6+0x192>
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	d16d      	bne.n	800adda <copy_6+0x26e>
    int pixel_x = x_base + x + offset;
 800acfe:	3105      	adds	r1, #5
 800ad00:	4429      	add	r1, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ad02:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800ad06:	bf2c      	ite	cs
 800ad08:	2400      	movcs	r4, #0
 800ad0a:	2401      	movcc	r4, #1
 800ad0c:	b194      	cbz	r4, 800ad34 <copy_6+0x1c8>
 800ad0e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	f040 80c4 	bne.w	800ae9e <copy_6+0x332>
 800ad16:	b16c      	cbz	r4, 800ad34 <copy_6+0x1c8>
 800ad18:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ad1a:	2d00      	cmp	r5, #0
 800ad1c:	f040 80d9 	bne.w	800aed2 <copy_6+0x366>
 800ad20:	b144      	cbz	r4, 800ad34 <copy_6+0x1c8>
 800ad22:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ad24:	2d00      	cmp	r5, #0
 800ad26:	f040 80cd 	bne.w	800aec4 <copy_6+0x358>
 800ad2a:	b11c      	cbz	r4, 800ad34 <copy_6+0x1c8>
 800ad2c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	f040 80bd 	bne.w	800aeae <copy_6+0x342>
 800ad34:	9d04      	ldr	r5, [sp, #16]
 800ad36:	b115      	cbz	r5, 800ad3e <copy_6+0x1d2>
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	f040 80d1 	bne.w	800aee0 <copy_6+0x374>
 800ad3e:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ad40:	f50e 6e34 	add.w	lr, lr, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ad44:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800ad48:	bf2c      	ite	cs
 800ad4a:	2200      	movcs	r2, #0
 800ad4c:	2201      	movcc	r2, #1
 800ad4e:	b16a      	cbz	r2, 800ad6c <copy_6+0x200>
 800ad50:	9901      	ldr	r1, [sp, #4]
 800ad52:	2900      	cmp	r1, #0
 800ad54:	d14d      	bne.n	800adf2 <copy_6+0x286>
 800ad56:	b14a      	cbz	r2, 800ad6c <copy_6+0x200>
 800ad58:	9902      	ldr	r1, [sp, #8]
 800ad5a:	2900      	cmp	r1, #0
 800ad5c:	d144      	bne.n	800ade8 <copy_6+0x27c>
 800ad5e:	b12a      	cbz	r2, 800ad6c <copy_6+0x200>
 800ad60:	9903      	ldr	r1, [sp, #12]
 800ad62:	b119      	cbz	r1, 800ad6c <copy_6+0x200>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ad64:	9908      	ldr	r1, [sp, #32]
 800ad66:	4471      	add	r1, lr
 800ad68:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ad6c:	f1bb 0f00 	cmp.w	fp, #0
 800ad70:	d001      	beq.n	800ad76 <copy_6+0x20a>
 800ad72:	2a00      	cmp	r2, #0
 800ad74:	d144      	bne.n	800ae00 <copy_6+0x294>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 5, color);
    for (int i = 6; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800ad76:	b00f      	add	sp, #60	@ 0x3c
 800ad78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ad7c:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800ad80:	eb06 1444 	add.w	r4, r6, r4, lsl #5
 800ad84:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800ad88:	e733      	b.n	800abf2 <copy_6+0x86>
 800ad8a:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800ad8e:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800ad92:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800ad96:	e71c      	b.n	800abd2 <copy_6+0x66>
 800ad98:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800ad9c:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800ada0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800ada4:	e708      	b.n	800abb8 <copy_6+0x4c>
 800ada6:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800adaa:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800adae:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800adb2:	e6f4      	b.n	800ab9e <copy_6+0x32>
 800adb4:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800adb8:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800adbc:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800adc0:	e725      	b.n	800ac0e <copy_6+0xa2>
 800adc2:	9e07      	ldr	r6, [sp, #28]
 800adc4:	4476      	add	r6, lr
 800adc6:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800adca:	e78c      	b.n	800ace6 <copy_6+0x17a>
 800adcc:	9e06      	ldr	r6, [sp, #24]
 800adce:	4476      	add	r6, lr
 800add0:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800add4:	2c00      	cmp	r4, #0
 800add6:	d183      	bne.n	800ace0 <copy_6+0x174>
 800add8:	e78c      	b.n	800acf4 <copy_6+0x188>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800adda:	9c05      	ldr	r4, [sp, #20]
 800addc:	4474      	add	r4, lr
 800adde:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800ade2:	e78c      	b.n	800acfe <copy_6+0x192>
 800ade4:	240001b8 	.word	0x240001b8
 800ade8:	9907      	ldr	r1, [sp, #28]
 800adea:	4471      	add	r1, lr
 800adec:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800adf0:	e7b5      	b.n	800ad5e <copy_6+0x1f2>
 800adf2:	9906      	ldr	r1, [sp, #24]
 800adf4:	4471      	add	r1, lr
 800adf6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800adfa:	2a00      	cmp	r2, #0
 800adfc:	d1ac      	bne.n	800ad58 <copy_6+0x1ec>
 800adfe:	e7b5      	b.n	800ad6c <copy_6+0x200>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ae00:	9a05      	ldr	r2, [sp, #20]
 800ae02:	4472      	add	r2, lr
 800ae04:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800ae08:	b00f      	add	sp, #60	@ 0x3c
 800ae0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ae0e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800ae12:	9e00      	ldr	r6, [sp, #0]
 800ae14:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ae18:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ae1c:	e6fe      	b.n	800ac1c <copy_6+0xb0>
 800ae1e:	ebca 140a 	rsb	r4, sl, sl, lsl #4
 800ae22:	9e00      	ldr	r6, [sp, #0]
 800ae24:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800ae28:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800ae2c:	e74a      	b.n	800acc4 <copy_6+0x158>
 800ae2e:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 800ae32:	9e00      	ldr	r6, [sp, #0]
 800ae34:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 800ae38:	f820 301a 	strh.w	r3, [r0, sl, lsl #1]
 800ae3c:	e736      	b.n	800acac <copy_6+0x140>
 800ae3e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800ae42:	9e00      	ldr	r6, [sp, #0]
 800ae44:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ae48:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ae4c:	e6f4      	b.n	800ac38 <copy_6+0xcc>
 800ae4e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800ae52:	9e00      	ldr	r6, [sp, #0]
 800ae54:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ae58:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ae5c:	e6e5      	b.n	800ac2a <copy_6+0xbe>
 800ae5e:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
 800ae62:	9e00      	ldr	r6, [sp, #0]
 800ae64:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ae68:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ae6c:	e712      	b.n	800ac94 <copy_6+0x128>
 800ae6e:	ebc9 1709 	rsb	r7, r9, r9, lsl #4
 800ae72:	9e00      	ldr	r6, [sp, #0]
 800ae74:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ae78:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ae7c:	e6fe      	b.n	800ac7c <copy_6+0x110>
 800ae7e:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800ae82:	9e00      	ldr	r6, [sp, #0]
 800ae84:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ae88:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ae8c:	e6ea      	b.n	800ac64 <copy_6+0xf8>
 800ae8e:	ebcc 170c 	rsb	r7, ip, ip, lsl #4
 800ae92:	9e00      	ldr	r6, [sp, #0]
 800ae94:	eb06 1747 	add.w	r7, r6, r7, lsl #5
 800ae98:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800ae9c:	e6d4      	b.n	800ac48 <copy_6+0xdc>
 800ae9e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800aea0:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800aea4:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800aea8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800aeac:	e733      	b.n	800ad16 <copy_6+0x1aa>
 800aeae:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aeb2:	9d04      	ldr	r5, [sp, #16]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aeb4:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 800aeb8:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aebc:	2d00      	cmp	r5, #0
 800aebe:	f47f af3b 	bne.w	800ad38 <copy_6+0x1cc>
 800aec2:	e73c      	b.n	800ad3e <copy_6+0x1d2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aec4:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800aec8:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 800aecc:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800aed0:	e72b      	b.n	800ad2a <copy_6+0x1be>
 800aed2:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 800aed6:	eb01 1949 	add.w	r9, r1, r9, lsl #5
 800aeda:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800aede:	e71f      	b.n	800ad20 <copy_6+0x1b4>
 800aee0:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 800aee4:	eb01 114a 	add.w	r1, r1, sl, lsl #5
 800aee8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800aeec:	e727      	b.n	800ad3e <copy_6+0x1d2>
 800aeee:	bf00      	nop

0800aef0 <copy_7>:

void copy_7(uint16_t* buffer, int x, int y, uint32_t color)
{
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800aef4:	4ca2      	ldr	r4, [pc, #648]	@ (800b180 <copy_7+0x290>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800aef6:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800aefa:	ebc2 1802 	rsb	r8, r2, r2, lsl #4
{
 800aefe:	b083      	sub	sp, #12
    int pixel_x = x_base + x + offset;
 800af00:	6824      	ldr	r4, [r4, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af02:	bf2c      	ite	cs
 800af04:	2500      	movcs	r5, #0
 800af06:	2501      	movcc	r5, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800af08:	ea4f 1848 	mov.w	r8, r8, lsl #5
    int pixel_x = x_base + x + offset;
 800af0c:	190e      	adds	r6, r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af0e:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800af12:	d202      	bcs.n	800af1a <copy_7+0x2a>
 800af14:	2d00      	cmp	r5, #0
 800af16:	f040 811a 	bne.w	800b14e <copy_7+0x25e>
    int pixel_x = x_base + x + offset;
 800af1a:	1c4f      	adds	r7, r1, #1
 800af1c:	4427      	add	r7, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af1e:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800af22:	bf2c      	ite	cs
 800af24:	f04f 0a00 	movcs.w	sl, #0
 800af28:	f04f 0a01 	movcc.w	sl, #1
 800af2c:	b11d      	cbz	r5, 800af36 <copy_7+0x46>
 800af2e:	f1ba 0f00 	cmp.w	sl, #0
 800af32:	f040 8107 	bne.w	800b144 <copy_7+0x254>
    int pixel_x = x_base + x + offset;
 800af36:	f101 0e02 	add.w	lr, r1, #2
 800af3a:	44a6      	add	lr, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af3c:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800af40:	bf2c      	ite	cs
 800af42:	2600      	movcs	r6, #0
 800af44:	2601      	movcc	r6, #1
 800af46:	9601      	str	r6, [sp, #4]
 800af48:	b115      	cbz	r5, 800af50 <copy_7+0x60>
 800af4a:	2e00      	cmp	r6, #0
 800af4c:	f040 8103 	bne.w	800b156 <copy_7+0x266>
    int pixel_x = x_base + x + offset;
 800af50:	1cce      	adds	r6, r1, #3
 800af52:	4426      	add	r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af54:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800af58:	9600      	str	r6, [sp, #0]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af5a:	bf2c      	ite	cs
 800af5c:	f04f 0900 	movcs.w	r9, #0
 800af60:	f04f 0901 	movcc.w	r9, #1
 800af64:	f1b9 0f00 	cmp.w	r9, #0
 800af68:	d002      	beq.n	800af70 <copy_7+0x80>
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	f040 80dc 	bne.w	800b128 <copy_7+0x238>
    int pixel_x = x_base + x + offset;
 800af70:	f101 0c04 	add.w	ip, r1, #4
 800af74:	44a4      	add	ip, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af76:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800af7a:	bf2c      	ite	cs
 800af7c:	f04f 0b00 	movcs.w	fp, #0
 800af80:	f04f 0b01 	movcc.w	fp, #1
 800af84:	b11d      	cbz	r5, 800af8e <copy_7+0x9e>
 800af86:	f1bb 0f00 	cmp.w	fp, #0
 800af8a:	f040 80d6 	bne.w	800b13a <copy_7+0x24a>
    int pixel_x = x_base + x + offset;
 800af8e:	3105      	adds	r1, #5
 800af90:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800af92:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800af96:	bf2c      	ite	cs
 800af98:	2400      	movcs	r4, #0
 800af9a:	2401      	movcc	r4, #1
 800af9c:	b114      	cbz	r4, 800afa4 <copy_7+0xb4>
 800af9e:	2d00      	cmp	r5, #0
 800afa0:	f040 80c7 	bne.w	800b132 <copy_7+0x242>
 800afa4:	1c55      	adds	r5, r2, #1
 800afa6:	f100 8086 	bmi.w	800b0b6 <copy_7+0x1c6>
 800afaa:	2c00      	cmp	r4, #0
 800afac:	f000 8083 	beq.w	800b0b6 <copy_7+0x1c6>
 800afb0:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800afb4:	f280 80aa 	bge.w	800b10c <copy_7+0x21c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800afb8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800afbc:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800afc0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    int pixel_y = y_base + y;
 800afc4:	1c95      	adds	r5, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800afc6:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800afca:	da05      	bge.n	800afd8 <copy_7+0xe8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800afcc:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800afd0:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800afd4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800afd8:	1cd1      	adds	r1, r2, #3
 800afda:	db72      	blt.n	800b0c2 <copy_7+0x1d2>
 800afdc:	f1bb 0f00 	cmp.w	fp, #0
 800afe0:	d06f      	beq.n	800b0c2 <copy_7+0x1d2>
 800afe2:	f5b2 7f86 	cmp.w	r2, #268	@ 0x10c
 800afe6:	f300 8094 	bgt.w	800b112 <copy_7+0x222>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800afea:	1cd1      	adds	r1, r2, #3
 800afec:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800aff0:	eb0c 1141 	add.w	r1, ip, r1, lsl #5
 800aff4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800aff8:	1d11      	adds	r1, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800affa:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800affe:	da05      	bge.n	800b00c <copy_7+0x11c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b000:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800b004:	eb0c 1c41 	add.w	ip, ip, r1, lsl #5
 800b008:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b00c:	1d51      	adds	r1, r2, #5
 800b00e:	d45f      	bmi.n	800b0d0 <copy_7+0x1e0>
 800b010:	f1b9 0f00 	cmp.w	r9, #0
 800b014:	d05c      	beq.n	800b0d0 <copy_7+0x1e0>
 800b016:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b01a:	da7e      	bge.n	800b11a <copy_7+0x22a>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b01c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800b020:	9c00      	ldr	r4, [sp, #0]
 800b022:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 800b026:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800b02a:	1d91      	adds	r1, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b02c:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b030:	da06      	bge.n	800b040 <copy_7+0x150>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b032:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800b036:	9c00      	ldr	r4, [sp, #0]
 800b038:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 800b03c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b040:	1dd1      	adds	r1, r2, #7
 800b042:	d44c      	bmi.n	800b0de <copy_7+0x1ee>
 800b044:	9c01      	ldr	r4, [sp, #4]
 800b046:	2c00      	cmp	r4, #0
 800b048:	d049      	beq.n	800b0de <copy_7+0x1ee>
 800b04a:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b04e:	da2f      	bge.n	800b0b0 <copy_7+0x1c0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b050:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800b054:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 800b058:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800b05c:	f102 0108 	add.w	r1, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b060:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b064:	da05      	bge.n	800b072 <copy_7+0x182>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b066:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800b06a:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
 800b06e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b072:	f112 0109 	adds.w	r1, r2, #9
 800b076:	d43b      	bmi.n	800b0f0 <copy_7+0x200>
 800b078:	f1ba 0f00 	cmp.w	sl, #0
 800b07c:	d038      	beq.n	800b0f0 <copy_7+0x200>
 800b07e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b082:	da15      	bge.n	800b0b0 <copy_7+0x1c0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b084:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800b088:	eb07 1141 	add.w	r1, r7, r1, lsl #5
 800b08c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800b090:	f102 010a 	add.w	r1, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b094:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
    int pixel_y = y_base + y;
 800b098:	f102 020b 	add.w	r2, r2, #11
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b09c:	db60      	blt.n	800b160 <copy_7+0x270>
 800b09e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
 800b0a2:	da05      	bge.n	800b0b0 <copy_7+0x1c0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b0a4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800b0a8:	eb07 1242 	add.w	r2, r7, r2, lsl #5
 800b0ac:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 2, 7, color);
    fill_pixel(buffer, x, y, 2, 8, color);
    fill_pixel(buffer, x, y, 1, 9, color);
    fill_pixel(buffer, x, y, 1, 10, color);
    fill_pixel(buffer, x, y, 1, 11, color);
}
 800b0b0:	b003      	add	sp, #12
 800b0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b0b6:	1c95      	adds	r5, r2, #2
 800b0b8:	d48e      	bmi.n	800afd8 <copy_7+0xe8>
 800b0ba:	2c00      	cmp	r4, #0
 800b0bc:	d183      	bne.n	800afc6 <copy_7+0xd6>
 800b0be:	1cd1      	adds	r1, r2, #3
 800b0c0:	da8c      	bge.n	800afdc <copy_7+0xec>
 800b0c2:	1d11      	adds	r1, r2, #4
 800b0c4:	d4a2      	bmi.n	800b00c <copy_7+0x11c>
 800b0c6:	f1bb 0f00 	cmp.w	fp, #0
 800b0ca:	d196      	bne.n	800affa <copy_7+0x10a>
 800b0cc:	1d51      	adds	r1, r2, #5
 800b0ce:	d59f      	bpl.n	800b010 <copy_7+0x120>
 800b0d0:	1d91      	adds	r1, r2, #6
 800b0d2:	d4b5      	bmi.n	800b040 <copy_7+0x150>
 800b0d4:	f1b9 0f00 	cmp.w	r9, #0
 800b0d8:	d1a8      	bne.n	800b02c <copy_7+0x13c>
 800b0da:	1dd1      	adds	r1, r2, #7
 800b0dc:	d5b2      	bpl.n	800b044 <copy_7+0x154>
 800b0de:	f112 0108 	adds.w	r1, r2, #8
 800b0e2:	d4c6      	bmi.n	800b072 <copy_7+0x182>
 800b0e4:	9c01      	ldr	r4, [sp, #4]
 800b0e6:	2c00      	cmp	r4, #0
 800b0e8:	d1ba      	bne.n	800b060 <copy_7+0x170>
 800b0ea:	f112 0109 	adds.w	r1, r2, #9
 800b0ee:	d5c3      	bpl.n	800b078 <copy_7+0x188>
 800b0f0:	f112 010a 	adds.w	r1, r2, #10
 800b0f4:	d402      	bmi.n	800b0fc <copy_7+0x20c>
 800b0f6:	f1ba 0f00 	cmp.w	sl, #0
 800b0fa:	d1cb      	bne.n	800b094 <copy_7+0x1a4>
 800b0fc:	f112 0f0b 	cmn.w	r2, #11
 800b100:	dbd6      	blt.n	800b0b0 <copy_7+0x1c0>
 800b102:	f1ba 0f00 	cmp.w	sl, #0
 800b106:	d0d3      	beq.n	800b0b0 <copy_7+0x1c0>
    int pixel_y = y_base + y;
 800b108:	320b      	adds	r2, #11
 800b10a:	e7c8      	b.n	800b09e <copy_7+0x1ae>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b10c:	f5bc 7ff0 	cmp.w	ip, #480	@ 0x1e0
 800b110:	d231      	bcs.n	800b176 <copy_7+0x286>
 800b112:	9900      	ldr	r1, [sp, #0]
 800b114:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800b118:	d229      	bcs.n	800b16e <copy_7+0x27e>
 800b11a:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800b11e:	d3c7      	bcc.n	800b0b0 <copy_7+0x1c0>
 800b120:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
 800b124:	d3c4      	bcc.n	800b0b0 <copy_7+0x1c0>
 800b126:	e7e3      	b.n	800b0f0 <copy_7+0x200>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b128:	eb08 0c06 	add.w	ip, r8, r6
 800b12c:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 800b130:	e71e      	b.n	800af70 <copy_7+0x80>
 800b132:	4488      	add	r8, r1
 800b134:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800b138:	e734      	b.n	800afa4 <copy_7+0xb4>
 800b13a:	eb08 060c 	add.w	r6, r8, ip
 800b13e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b142:	e724      	b.n	800af8e <copy_7+0x9e>
 800b144:	eb08 0607 	add.w	r6, r8, r7
 800b148:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b14c:	e6f3      	b.n	800af36 <copy_7+0x46>
 800b14e:	4446      	add	r6, r8
 800b150:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b154:	e6e1      	b.n	800af1a <copy_7+0x2a>
 800b156:	eb08 060e 	add.w	r6, r8, lr
 800b15a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b15e:	e6f7      	b.n	800af50 <copy_7+0x60>
 800b160:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800b164:	eb07 1141 	add.w	r1, r7, r1, lsl #5
 800b168:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b16c:	e797      	b.n	800b09e <copy_7+0x1ae>
 800b16e:	f5be 7ff0 	cmp.w	lr, #480	@ 0x1e0
 800b172:	d39d      	bcc.n	800b0b0 <copy_7+0x1c0>
 800b174:	e7b3      	b.n	800b0de <copy_7+0x1ee>
 800b176:	9900      	ldr	r1, [sp, #0]
 800b178:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800b17c:	d3cd      	bcc.n	800b11a <copy_7+0x22a>
 800b17e:	e7a7      	b.n	800b0d0 <copy_7+0x1e0>
 800b180:	240001b8 	.word	0x240001b8

0800b184 <copy_8>:

void copy_8(uint16_t* buffer, int x, int y, uint32_t color)
{
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800b188:	4c4a      	ldr	r4, [pc, #296]	@ (800b2b4 <copy_8+0x130>)
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b18a:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800b18e:	b08d      	sub	sp, #52	@ 0x34
    int pixel_x = x_base + x + offset;
 800b190:	6826      	ldr	r6, [r4, #0]
 800b192:	f101 0401 	add.w	r4, r1, #1
 800b196:	eb04 0706 	add.w	r7, r4, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b19a:	bf2c      	ite	cs
 800b19c:	2400      	movcs	r4, #0
 800b19e:	2401      	movcc	r4, #1
 800b1a0:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b1a4:	970a      	str	r7, [sp, #40]	@ 0x28
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1a6:	bf2c      	ite	cs
 800b1a8:	2500      	movcs	r5, #0
 800b1aa:	2501      	movcc	r5, #1
 800b1ac:	9504      	str	r5, [sp, #16]
 800b1ae:	b115      	cbz	r5, 800b1b6 <copy_8+0x32>
 800b1b0:	2c00      	cmp	r4, #0
 800b1b2:	f040 817d 	bne.w	800b4b0 <copy_8+0x32c>
    int pixel_x = x_base + x + offset;
 800b1b6:	1c8d      	adds	r5, r1, #2
 800b1b8:	19af      	adds	r7, r5, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1ba:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b1be:	9708      	str	r7, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1c0:	bf2c      	ite	cs
 800b1c2:	2500      	movcs	r5, #0
 800b1c4:	2501      	movcc	r5, #1
 800b1c6:	9503      	str	r5, [sp, #12]
 800b1c8:	b115      	cbz	r5, 800b1d0 <copy_8+0x4c>
 800b1ca:	2c00      	cmp	r4, #0
 800b1cc:	f040 8162 	bne.w	800b494 <copy_8+0x310>
    int pixel_x = x_base + x + offset;
 800b1d0:	1ccd      	adds	r5, r1, #3
 800b1d2:	19af      	adds	r7, r5, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1d4:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b1d8:	970b      	str	r7, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1da:	bf2c      	ite	cs
 800b1dc:	2500      	movcs	r5, #0
 800b1de:	2501      	movcc	r5, #1
 800b1e0:	9507      	str	r5, [sp, #28]
 800b1e2:	b114      	cbz	r4, 800b1ea <copy_8+0x66>
 800b1e4:	2d00      	cmp	r5, #0
 800b1e6:	f040 815c 	bne.w	800b4a2 <copy_8+0x31e>
    int pixel_x = x_base + x + offset;
 800b1ea:	1d0d      	adds	r5, r1, #4
 800b1ec:	4435      	add	r5, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1ee:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b1f2:	9509      	str	r5, [sp, #36]	@ 0x24
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b1f4:	bf2c      	ite	cs
 800b1f6:	2700      	movcs	r7, #0
 800b1f8:	2701      	movcc	r7, #1
 800b1fa:	9702      	str	r7, [sp, #8]
 800b1fc:	b117      	cbz	r7, 800b204 <copy_8+0x80>
 800b1fe:	2c00      	cmp	r4, #0
 800b200:	f040 813d 	bne.w	800b47e <copy_8+0x2fa>
    int pixel_x = x_base + x + offset;
 800b204:	eb01 0b06 	add.w	fp, r1, r6
    int pixel_y = y_base + y;
 800b208:	f102 0c01 	add.w	ip, r2, #1
 800b20c:	1d17      	adds	r7, r2, #4
 800b20e:	f102 0e03 	add.w	lr, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b212:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 800b216:	ea6f 050c 	mvn.w	r5, ip
    int pixel_y = y_base + y;
 800b21a:	f102 0802 	add.w	r8, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b21e:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 800b222:	bf2c      	ite	cs
 800b224:	2400      	movcs	r4, #0
 800b226:	2401      	movcc	r4, #1
 800b228:	9506      	str	r5, [sp, #24]
 800b22a:	4025      	ands	r5, r4
 800b22c:	d044      	beq.n	800b2b8 <copy_8+0x134>
 800b22e:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800b232:	f280 8118 	bge.w	800b466 <copy_8+0x2e2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b236:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
 800b23a:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 800b23e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b242:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800b246:	f280 81f7 	bge.w	800b638 <copy_8+0x4b4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b24a:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
 800b24e:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 800b252:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b256:	2501      	movs	r5, #1
 800b258:	9505      	str	r5, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b25a:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800b25e:	f280 81ed 	bge.w	800b63c <copy_8+0x4b8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b262:	ebce 150e 	rsb	r5, lr, lr, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b266:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b26a:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 800b26e:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b272:	f000 81eb 	beq.w	800b64c <copy_8+0x4c8>
    int pixel_x = x_base + x + offset;
 800b276:	3105      	adds	r1, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b278:	ebc7 1507 	rsb	r5, r7, r7, lsl #4
    int pixel_x = x_base + x + offset;
 800b27c:	198e      	adds	r6, r1, r6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b27e:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 800b282:	b299      	uxth	r1, r3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b284:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b288:	9601      	str	r6, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b28a:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b28e:	9e06      	ldr	r6, [sp, #24]
 800b290:	bf2c      	ite	cs
 800b292:	2500      	movcs	r5, #0
 800b294:	2501      	movcc	r5, #1
 800b296:	ea16 0a05 	ands.w	sl, r6, r5
 800b29a:	f000 81b6 	beq.w	800b60a <copy_8+0x486>
 800b29e:	46d1      	mov	r9, sl
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b2a0:	9d01      	ldr	r5, [sp, #4]
 800b2a2:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800b2a6:	eb05 1c4c 	add.w	ip, r5, ip, lsl #5
 800b2aa:	2501      	movs	r5, #1
 800b2ac:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
 800b2b0:	e033      	b.n	800b31a <copy_8+0x196>
 800b2b2:	bf00      	nop
 800b2b4:	240001b8 	.word	0x240001b8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b2b8:	f112 0f02 	cmn.w	r2, #2
 800b2bc:	bfb4      	ite	lt
 800b2be:	2500      	movlt	r5, #0
 800b2c0:	2501      	movge	r5, #1
 800b2c2:	9505      	str	r5, [sp, #20]
 800b2c4:	b10d      	cbz	r5, 800b2ca <copy_8+0x146>
 800b2c6:	2c00      	cmp	r4, #0
 800b2c8:	d1bb      	bne.n	800b242 <copy_8+0xbe>
 800b2ca:	1cd5      	adds	r5, r2, #3
 800b2cc:	bfb4      	ite	lt
 800b2ce:	f04f 0900 	movlt.w	r9, #0
 800b2d2:	f04f 0901 	movge.w	r9, #1
 800b2d6:	f1b9 0f00 	cmp.w	r9, #0
 800b2da:	f040 80d7 	bne.w	800b48c <copy_8+0x308>
 800b2de:	1d15      	adds	r5, r2, #4
 800b2e0:	bfb4      	ite	lt
 800b2e2:	f04f 0a00 	movlt.w	sl, #0
 800b2e6:	f04f 0a01 	movge.w	sl, #1
 800b2ea:	ea1a 0504 	ands.w	r5, sl, r4
 800b2ee:	f040 81c9 	bne.w	800b684 <copy_8+0x500>
    int pixel_x = x_base + x + offset;
 800b2f2:	3105      	adds	r1, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b2f4:	9d06      	ldr	r5, [sp, #24]
    int pixel_x = x_base + x + offset;
 800b2f6:	4431      	add	r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b2f8:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b2fc:	9101      	str	r1, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b2fe:	bf2c      	ite	cs
 800b300:	2100      	movcs	r1, #0
 800b302:	2101      	movcc	r1, #1
 800b304:	400d      	ands	r5, r1
 800b306:	f040 80da 	bne.w	800b4be <copy_8+0x33a>
 800b30a:	9d05      	ldr	r5, [sp, #20]
 800b30c:	ea0a 0a01 	and.w	sl, sl, r1
 800b310:	ea09 0901 	and.w	r9, r9, r1
 800b314:	400d      	ands	r5, r1
 800b316:	9505      	str	r5, [sp, #20]
 800b318:	460d      	mov	r5, r1
 800b31a:	f5b8 7f88 	cmp.w	r8, #272	@ 0x110
 800b31e:	da08      	bge.n	800b332 <copy_8+0x1ae>
 800b320:	9905      	ldr	r1, [sp, #20]
 800b322:	b131      	cbz	r1, 800b332 <copy_8+0x1ae>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b324:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800b328:	9901      	ldr	r1, [sp, #4]
 800b32a:	eb01 1848 	add.w	r8, r1, r8, lsl #5
 800b32e:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b332:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800b336:	da09      	bge.n	800b34c <copy_8+0x1c8>
 800b338:	f1b9 0f00 	cmp.w	r9, #0
 800b33c:	d006      	beq.n	800b34c <copy_8+0x1c8>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b33e:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800b342:	9901      	ldr	r1, [sp, #4]
 800b344:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 800b348:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b34c:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800b350:	da09      	bge.n	800b366 <copy_8+0x1e2>
 800b352:	f1ba 0f00 	cmp.w	sl, #0
 800b356:	d006      	beq.n	800b366 <copy_8+0x1e2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b358:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 800b35c:	9e01      	ldr	r6, [sp, #4]
 800b35e:	eb06 1141 	add.w	r1, r6, r1, lsl #5
 800b362:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800b366:	1d51      	adds	r1, r2, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b368:	9f04      	ldr	r7, [sp, #16]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b36a:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b36e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b372:	ea4f 1646 	mov.w	r6, r6, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b376:	bf2c      	ite	cs
 800b378:	2100      	movcs	r1, #0
 800b37a:	2101      	movcc	r1, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b37c:	9606      	str	r6, [sp, #24]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b37e:	b127      	cbz	r7, 800b38a <copy_8+0x206>
 800b380:	b119      	cbz	r1, 800b38a <copy_8+0x206>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b382:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800b384:	443e      	add	r6, r7
 800b386:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b38a:	9e03      	ldr	r6, [sp, #12]
 800b38c:	2e00      	cmp	r6, #0
 800b38e:	f000 80f9 	beq.w	800b584 <copy_8+0x400>
 800b392:	2900      	cmp	r1, #0
 800b394:	f040 80f1 	bne.w	800b57a <copy_8+0x3f6>
 800b398:	9e02      	ldr	r6, [sp, #8]
 800b39a:	b12e      	cbz	r6, 800b3a8 <copy_8+0x224>
 800b39c:	b121      	cbz	r1, 800b3a8 <copy_8+0x224>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b39e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3a0:	9e06      	ldr	r6, [sp, #24]
 800b3a2:	4431      	add	r1, r6
 800b3a4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    int pixel_y = y_base + y;
 800b3a8:	1d91      	adds	r1, r2, #6
 800b3aa:	f102 0708 	add.w	r7, r2, #8
 800b3ae:	f102 0e0a 	add.w	lr, r2, #10
 800b3b2:	f102 0609 	add.w	r6, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b3b6:	ea6f 0a01 	mvn.w	sl, r1
    int pixel_y = y_base + y;
 800b3ba:	9705      	str	r7, [sp, #20]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b3bc:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800b3c0:	2c00      	cmp	r4, #0
 800b3c2:	f000 8090 	beq.w	800b4e6 <copy_8+0x362>
 800b3c6:	f1ba 0f00 	cmp.w	sl, #0
 800b3ca:	f000 808c 	beq.w	800b4e6 <copy_8+0x362>
 800b3ce:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b3d2:	f2c0 80e4 	blt.w	800b59e <copy_8+0x41a>
 800b3d6:	46a8      	mov	r8, r5
 800b3d8:	46a9      	mov	r9, r5
 800b3da:	462c      	mov	r4, r5
 800b3dc:	9905      	ldr	r1, [sp, #20]
 800b3de:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b3e2:	da09      	bge.n	800b3f8 <copy_8+0x274>
 800b3e4:	f1b8 0f00 	cmp.w	r8, #0
 800b3e8:	d006      	beq.n	800b3f8 <copy_8+0x274>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b3ea:	ebc1 1701 	rsb	r7, r1, r1, lsl #4
 800b3ee:	9901      	ldr	r1, [sp, #4]
 800b3f0:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 800b3f4:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b3f8:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800b3fc:	da09      	bge.n	800b412 <copy_8+0x28e>
 800b3fe:	f1b9 0f00 	cmp.w	r9, #0
 800b402:	d006      	beq.n	800b412 <copy_8+0x28e>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b404:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800b408:	9901      	ldr	r1, [sp, #4]
 800b40a:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 800b40e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b412:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800b416:	da07      	bge.n	800b428 <copy_8+0x2a4>
 800b418:	b134      	cbz	r4, 800b428 <copy_8+0x2a4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b41a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800b41e:	9901      	ldr	r1, [sp, #4]
 800b420:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 800b424:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b428:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b42a:	9906      	ldr	r1, [sp, #24]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b42c:	9c04      	ldr	r4, [sp, #16]
 800b42e:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b432:	f501 6134 	add.w	r1, r1, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b436:	bf2c      	ite	cs
 800b438:	2200      	movcs	r2, #0
 800b43a:	2201      	movcc	r2, #1
 800b43c:	b124      	cbz	r4, 800b448 <copy_8+0x2c4>
 800b43e:	b11a      	cbz	r2, 800b448 <copy_8+0x2c4>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b440:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b442:	440c      	add	r4, r1
 800b444:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b448:	9c03      	ldr	r4, [sp, #12]
 800b44a:	2c00      	cmp	r4, #0
 800b44c:	d041      	beq.n	800b4d2 <copy_8+0x34e>
 800b44e:	2a00      	cmp	r2, #0
 800b450:	d13b      	bne.n	800b4ca <copy_8+0x346>
 800b452:	9c02      	ldr	r4, [sp, #8]
 800b454:	b124      	cbz	r4, 800b460 <copy_8+0x2dc>
 800b456:	b11a      	cbz	r2, 800b460 <copy_8+0x2dc>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b45a:	440a      	add	r2, r1
 800b45c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    fill_pixel(buffer, x, y, 5, 7, color);
    fill_pixel(buffer, x, y, 5, 8, color);
    fill_pixel(buffer, x, y, 5, 9, color);
    fill_pixel(buffer, x, y, 5, 10, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800b460:	b00d      	add	sp, #52	@ 0x34
 800b462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int pixel_x = x_base + x + offset;
 800b466:	3105      	adds	r1, #5
 800b468:	4431      	add	r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b46a:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b46e:	9101      	str	r1, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b470:	f4ff af79 	bcc.w	800b366 <copy_8+0x1e2>
 800b474:	f04f 0900 	mov.w	r9, #0
 800b478:	46ca      	mov	sl, r9
 800b47a:	464d      	mov	r5, r9
 800b47c:	e759      	b.n	800b332 <copy_8+0x1ae>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b47e:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800b482:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 800b486:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800b48a:	e6bb      	b.n	800b204 <copy_8+0x80>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b48c:	2c00      	cmp	r4, #0
 800b48e:	f43f af26 	beq.w	800b2de <copy_8+0x15a>
 800b492:	e6e2      	b.n	800b25a <copy_8+0xd6>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b494:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800b498:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 800b49c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b4a0:	e696      	b.n	800b1d0 <copy_8+0x4c>
 800b4a2:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800b4a6:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 800b4aa:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b4ae:	e69c      	b.n	800b1ea <copy_8+0x66>
 800b4b0:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800b4b4:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 800b4b8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b4bc:	e67b      	b.n	800b1b6 <copy_8+0x32>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b4be:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800b4c2:	f6bf af2a 	bge.w	800b31a <copy_8+0x196>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b4c6:	b299      	uxth	r1, r3
 800b4c8:	e6ea      	b.n	800b2a0 <copy_8+0x11c>
 800b4ca:	9c08      	ldr	r4, [sp, #32]
 800b4cc:	440c      	add	r4, r1
 800b4ce:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b4d2:	2a00      	cmp	r2, #0
 800b4d4:	d0bd      	beq.n	800b452 <copy_8+0x2ce>
 800b4d6:	9c07      	ldr	r4, [sp, #28]
 800b4d8:	2c00      	cmp	r4, #0
 800b4da:	d0ba      	beq.n	800b452 <copy_8+0x2ce>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b4dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b4de:	440c      	add	r4, r1
 800b4e0:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 800b4e4:	e7b5      	b.n	800b452 <copy_8+0x2ce>
    int pixel_y = y_base + y;
 800b4e6:	f102 0c07 	add.w	ip, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b4ea:	ea6f 080c 	mvn.w	r8, ip
 800b4ee:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800b4f2:	b114      	cbz	r4, 800b4fa <copy_8+0x376>
 800b4f4:	f1b8 0f00 	cmp.w	r8, #0
 800b4f8:	d159      	bne.n	800b5ae <copy_8+0x42a>
 800b4fa:	f112 0f08 	cmn.w	r2, #8
 800b4fe:	ea08 0705 	and.w	r7, r8, r5
 800b502:	bfb4      	ite	lt
 800b504:	f04f 0800 	movlt.w	r8, #0
 800b508:	f04f 0801 	movge.w	r8, #1
 800b50c:	b114      	cbz	r4, 800b514 <copy_8+0x390>
 800b50e:	f1b8 0f00 	cmp.w	r8, #0
 800b512:	d156      	bne.n	800b5c2 <copy_8+0x43e>
 800b514:	f112 0f09 	cmn.w	r2, #9
 800b518:	ea08 0805 	and.w	r8, r8, r5
 800b51c:	bfb4      	ite	lt
 800b51e:	f04f 0900 	movlt.w	r9, #0
 800b522:	f04f 0901 	movge.w	r9, #1
 800b526:	b114      	cbz	r4, 800b52e <copy_8+0x3aa>
 800b528:	f1b9 0f00 	cmp.w	r9, #0
 800b52c:	d154      	bne.n	800b5d8 <copy_8+0x454>
 800b52e:	f112 0f0a 	cmn.w	r2, #10
 800b532:	ea09 0905 	and.w	r9, r9, r5
 800b536:	bfb4      	ite	lt
 800b538:	f04f 0a00 	movlt.w	sl, #0
 800b53c:	f04f 0a01 	movge.w	sl, #1
 800b540:	b11c      	cbz	r4, 800b54a <copy_8+0x3c6>
 800b542:	f1ba 0f00 	cmp.w	sl, #0
 800b546:	f040 8091 	bne.w	800b66c <copy_8+0x4e8>
 800b54a:	ea0a 0405 	and.w	r4, sl, r5
 800b54e:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b552:	d201      	bcs.n	800b558 <copy_8+0x3d4>
 800b554:	2d00      	cmp	r5, #0
 800b556:	d163      	bne.n	800b620 <copy_8+0x49c>
 800b558:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800b55c:	f6bf af3e 	bge.w	800b3dc <copy_8+0x258>
 800b560:	2f00      	cmp	r7, #0
 800b562:	f43f af3b 	beq.w	800b3dc <copy_8+0x258>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b566:	fa1f fb83 	uxth.w	fp, r3
 800b56a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800b56e:	9901      	ldr	r1, [sp, #4]
 800b570:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
 800b574:	f820 b01c 	strh.w	fp, [r0, ip, lsl #1]
 800b578:	e730      	b.n	800b3dc <copy_8+0x258>
 800b57a:	9e08      	ldr	r6, [sp, #32]
 800b57c:	9f06      	ldr	r7, [sp, #24]
 800b57e:	443e      	add	r6, r7
 800b580:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b584:	2900      	cmp	r1, #0
 800b586:	f43f af07 	beq.w	800b398 <copy_8+0x214>
 800b58a:	9e07      	ldr	r6, [sp, #28]
 800b58c:	2e00      	cmp	r6, #0
 800b58e:	f43f af03 	beq.w	800b398 <copy_8+0x214>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b592:	9e06      	ldr	r6, [sp, #24]
 800b594:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b596:	443e      	add	r6, r7
 800b598:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b59c:	e6fc      	b.n	800b398 <copy_8+0x214>
 800b59e:	ebc1 1401 	rsb	r4, r1, r1, lsl #4
    int pixel_y = y_base + y;
 800b5a2:	f102 0c07 	add.w	ip, r2, #7
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5a6:	eb0b 1444 	add.w	r4, fp, r4, lsl #5
 800b5aa:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b5ae:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800b5b2:	da79      	bge.n	800b6a8 <copy_8+0x524>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5b4:	ebcc 140c 	rsb	r4, ip, ip, lsl #4
 800b5b8:	462f      	mov	r7, r5
 800b5ba:	eb0b 1444 	add.w	r4, fp, r4, lsl #5
 800b5be:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b5c2:	9c05      	ldr	r4, [sp, #20]
 800b5c4:	f5b4 7f88 	cmp.w	r4, #272	@ 0x110
 800b5c8:	da3c      	bge.n	800b644 <copy_8+0x4c0>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5ca:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800b5ce:	46a8      	mov	r8, r5
 800b5d0:	eb0b 1444 	add.w	r4, fp, r4, lsl #5
 800b5d4:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b5d8:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
 800b5dc:	da33      	bge.n	800b646 <copy_8+0x4c2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5de:	ebc6 1406 	rsb	r4, r6, r6, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b5e2:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5e6:	eb0b 1444 	add.w	r4, fp, r4, lsl #5
 800b5ea:	fa1f fb83 	uxth.w	fp, r3
 800b5ee:	f820 b014 	strh.w	fp, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b5f2:	d028      	beq.n	800b646 <copy_8+0x4c2>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5f4:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b5f8:	ea1a 0905 	ands.w	r9, sl, r5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b5fc:	f820 b014 	strh.w	fp, [r0, r4, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b600:	d118      	bne.n	800b634 <copy_8+0x4b0>
 800b602:	bb6f      	cbnz	r7, 800b660 <copy_8+0x4dc>
 800b604:	46a9      	mov	r9, r5
 800b606:	462c      	mov	r4, r5
 800b608:	e6e8      	b.n	800b3dc <copy_8+0x258>
 800b60a:	f04f 0901 	mov.w	r9, #1
 800b60e:	9905      	ldr	r1, [sp, #20]
 800b610:	ea09 0905 	and.w	r9, r9, r5
 800b614:	46aa      	mov	sl, r5
 800b616:	4029      	ands	r1, r5
 800b618:	fa5f f989 	uxtb.w	r9, r9
 800b61c:	9105      	str	r1, [sp, #20]
 800b61e:	e67c      	b.n	800b31a <copy_8+0x196>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b620:	fa1f fb83 	uxth.w	fp, r3
 800b624:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800b628:	9d01      	ldr	r5, [sp, #4]
 800b62a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 800b62e:	f820 b011 	strh.w	fp, [r0, r1, lsl #1]
 800b632:	e791      	b.n	800b558 <copy_8+0x3d4>
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b634:	464c      	mov	r4, r9
 800b636:	e7f5      	b.n	800b624 <copy_8+0x4a0>
 800b638:	2501      	movs	r5, #1
 800b63a:	9505      	str	r5, [sp, #20]
 800b63c:	f04f 0901 	mov.w	r9, #1
 800b640:	46ca      	mov	sl, r9
 800b642:	e656      	b.n	800b2f2 <copy_8+0x16e>
 800b644:	46a8      	mov	r8, r5
 800b646:	462c      	mov	r4, r5
 800b648:	46a9      	mov	r9, r5
 800b64a:	e780      	b.n	800b54e <copy_8+0x3ca>
    int pixel_x = x_base + x + offset;
 800b64c:	3105      	adds	r1, #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b64e:	f04f 0901 	mov.w	r9, #1
    int pixel_x = x_base + x + offset;
 800b652:	4431      	add	r1, r6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b654:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b658:	9101      	str	r1, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b65a:	d204      	bcs.n	800b666 <copy_8+0x4e2>
 800b65c:	46ca      	mov	sl, r9
 800b65e:	e732      	b.n	800b4c6 <copy_8+0x342>
 800b660:	462c      	mov	r4, r5
 800b662:	46a9      	mov	r9, r5
 800b664:	e781      	b.n	800b56a <copy_8+0x3e6>
 800b666:	2100      	movs	r1, #0
 800b668:	46ca      	mov	sl, r9
 800b66a:	e64e      	b.n	800b30a <copy_8+0x186>
 800b66c:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b670:	462c      	mov	r4, r5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b672:	f6bf af6c 	bge.w	800b54e <copy_8+0x3ca>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b676:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800b67a:	fb01 b10e 	mla	r1, r1, lr, fp
 800b67e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b682:	e6ab      	b.n	800b3dc <copy_8+0x258>
 800b684:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800b688:	da21      	bge.n	800b6ce <copy_8+0x54a>
    int pixel_x = x_base + x + offset;
 800b68a:	3105      	adds	r1, #5
 800b68c:	198d      	adds	r5, r1, r6
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b68e:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b692:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b696:	fb01 b107 	mla	r1, r1, r7, fp
    int pixel_x = x_base + x + offset;
 800b69a:	9501      	str	r5, [sp, #4]
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b69c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b6a0:	bf2c      	ite	cs
 800b6a2:	2500      	movcs	r5, #0
 800b6a4:	2501      	movcc	r5, #1
 800b6a6:	e7b2      	b.n	800b60e <copy_8+0x48a>
 800b6a8:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800b6ac:	bf2c      	ite	cs
 800b6ae:	2400      	movcs	r4, #0
 800b6b0:	f005 0401 	andcc.w	r4, r5, #1
 800b6b4:	2c00      	cmp	r4, #0
 800b6b6:	f43f ae8e 	beq.w	800b3d6 <copy_8+0x252>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b6ba:	f44f 75f0 	mov.w	r5, #480	@ 0x1e0
 800b6be:	9f01      	ldr	r7, [sp, #4]
 800b6c0:	46a0      	mov	r8, r4
 800b6c2:	46a1      	mov	r9, r4
 800b6c4:	fb05 7501 	mla	r5, r5, r1, r7
 800b6c8:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b6cc:	e686      	b.n	800b3dc <copy_8+0x258>
 800b6ce:	46aa      	mov	sl, r5
 800b6d0:	e60f      	b.n	800b2f2 <copy_8+0x16e>
 800b6d2:	bf00      	nop

0800b6d4 <copy_9>:

void copy_9(uint16_t* buffer, int x, int y, uint32_t color)
{
 800b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pixel_x = x_base + x + offset;
 800b6d8:	4ca7      	ldr	r4, [pc, #668]	@ (800b978 <copy_9+0x2a4>)
 800b6da:	1c4d      	adds	r5, r1, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b6dc:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
{
 800b6e0:	b08f      	sub	sp, #60	@ 0x3c
    int pixel_x = x_base + x + offset;
 800b6e2:	6824      	ldr	r4, [r4, #0]
 800b6e4:	eb05 0704 	add.w	r7, r5, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b6e8:	bf2c      	ite	cs
 800b6ea:	2500      	movcs	r5, #0
 800b6ec:	2501      	movcc	r5, #1
 800b6ee:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b6f2:	9707      	str	r7, [sp, #28]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b6f4:	bf2c      	ite	cs
 800b6f6:	2600      	movcs	r6, #0
 800b6f8:	2601      	movcc	r6, #1
 800b6fa:	9602      	str	r6, [sp, #8]
 800b6fc:	b115      	cbz	r5, 800b704 <copy_9+0x30>
 800b6fe:	2e00      	cmp	r6, #0
 800b700:	f040 8112 	bne.w	800b928 <copy_9+0x254>
    int pixel_x = x_base + x + offset;
 800b704:	1c8e      	adds	r6, r1, #2
 800b706:	1937      	adds	r7, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b708:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
    int pixel_x = x_base + x + offset;
 800b70c:	9708      	str	r7, [sp, #32]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b70e:	bf2c      	ite	cs
 800b710:	2600      	movcs	r6, #0
 800b712:	2601      	movcc	r6, #1
 800b714:	9603      	str	r6, [sp, #12]
 800b716:	b115      	cbz	r5, 800b71e <copy_9+0x4a>
 800b718:	2e00      	cmp	r6, #0
 800b71a:	f040 80fe 	bne.w	800b91a <copy_9+0x246>
    int pixel_x = x_base + x + offset;
 800b71e:	1cce      	adds	r6, r1, #3
 800b720:	eb06 0904 	add.w	r9, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b724:	f5b9 7ff0 	cmp.w	r9, #480	@ 0x1e0
 800b728:	bf2c      	ite	cs
 800b72a:	2600      	movcs	r6, #0
 800b72c:	2601      	movcc	r6, #1
 800b72e:	9604      	str	r6, [sp, #16]
 800b730:	b115      	cbz	r5, 800b738 <copy_9+0x64>
 800b732:	2e00      	cmp	r6, #0
 800b734:	f040 80ea 	bne.w	800b90c <copy_9+0x238>
    int pixel_x = x_base + x + offset;
 800b738:	1d0e      	adds	r6, r1, #4
 800b73a:	eb06 0b04 	add.w	fp, r6, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b73e:	f5bb 7ff0 	cmp.w	fp, #480	@ 0x1e0
 800b742:	bf2c      	ite	cs
 800b744:	f04f 0a00 	movcs.w	sl, #0
 800b748:	f04f 0a01 	movcc.w	sl, #1
 800b74c:	f1ba 0f00 	cmp.w	sl, #0
 800b750:	d002      	beq.n	800b758 <copy_9+0x84>
 800b752:	2d00      	cmp	r5, #0
 800b754:	f040 80d3 	bne.w	800b8fe <copy_9+0x22a>
    int pixel_x = x_base + x + offset;
 800b758:	eb01 0804 	add.w	r8, r1, r4
    int pixel_y = y_base + y;
 800b75c:	f102 0e01 	add.w	lr, r2, #1
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b760:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800b764:	bf2c      	ite	cs
 800b766:	f04f 0c00 	movcs.w	ip, #0
 800b76a:	f04f 0c01 	movcc.w	ip, #1
 800b76e:	f5be 7f88 	cmp.w	lr, #272	@ 0x110
 800b772:	bf2c      	ite	cs
 800b774:	2500      	movcs	r5, #0
 800b776:	2501      	movcc	r5, #1
 800b778:	9506      	str	r5, [sp, #24]
 800b77a:	f1bc 0f00 	cmp.w	ip, #0
 800b77e:	d002      	beq.n	800b786 <copy_9+0xb2>
 800b780:	2d00      	cmp	r5, #0
 800b782:	f040 8131 	bne.w	800b9e8 <copy_9+0x314>
    int pixel_y = y_base + y;
 800b786:	1c97      	adds	r7, r2, #2
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b788:	f5b7 7f88 	cmp.w	r7, #272	@ 0x110
 800b78c:	bf2c      	ite	cs
 800b78e:	2500      	movcs	r5, #0
 800b790:	2501      	movcc	r5, #1
 800b792:	9509      	str	r5, [sp, #36]	@ 0x24
 800b794:	f1bc 0f00 	cmp.w	ip, #0
 800b798:	d002      	beq.n	800b7a0 <copy_9+0xcc>
 800b79a:	2d00      	cmp	r5, #0
 800b79c:	f040 812b 	bne.w	800b9f6 <copy_9+0x322>
    int pixel_y = y_base + y;
 800b7a0:	1cd6      	adds	r6, r2, #3
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7a2:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800b7a6:	960c      	str	r6, [sp, #48]	@ 0x30
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7a8:	bf2c      	ite	cs
 800b7aa:	2500      	movcs	r5, #0
 800b7ac:	2501      	movcc	r5, #1
 800b7ae:	950a      	str	r5, [sp, #40]	@ 0x28
 800b7b0:	f1bc 0f00 	cmp.w	ip, #0
 800b7b4:	d002      	beq.n	800b7bc <copy_9+0xe8>
 800b7b6:	2d00      	cmp	r5, #0
 800b7b8:	f040 8124 	bne.w	800ba04 <copy_9+0x330>
    int pixel_y = y_base + y;
 800b7bc:	1d16      	adds	r6, r2, #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7be:	f5b6 7f88 	cmp.w	r6, #272	@ 0x110
    int pixel_y = y_base + y;
 800b7c2:	960b      	str	r6, [sp, #44]	@ 0x2c
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7c4:	bf2c      	ite	cs
 800b7c6:	2500      	movcs	r5, #0
 800b7c8:	2501      	movcc	r5, #1
 800b7ca:	9505      	str	r5, [sp, #20]
 800b7cc:	b11d      	cbz	r5, 800b7d6 <copy_9+0x102>
 800b7ce:	f1bc 0f00 	cmp.w	ip, #0
 800b7d2:	f040 811e 	bne.w	800ba12 <copy_9+0x33e>
    int pixel_y = y_base + y;
 800b7d6:	f102 0c05 	add.w	ip, r2, #5
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b7da:	ebcc 180c 	rsb	r8, ip, ip, lsl #4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7de:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b7e2:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800b7e6:	ea4f 1548 	mov.w	r5, r8, lsl #5
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7ea:	bf2c      	ite	cs
 800b7ec:	f04f 0800 	movcs.w	r8, #0
 800b7f0:	f04f 0801 	movcc.w	r8, #1
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b7f4:	960d      	str	r6, [sp, #52]	@ 0x34
 800b7f6:	9501      	str	r5, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b7f8:	f1b8 0f00 	cmp.w	r8, #0
 800b7fc:	d013      	beq.n	800b826 <copy_9+0x152>
 800b7fe:	9e02      	ldr	r6, [sp, #8]
 800b800:	2e00      	cmp	r6, #0
 800b802:	f040 810d 	bne.w	800ba20 <copy_9+0x34c>
 800b806:	f1b8 0f00 	cmp.w	r8, #0
 800b80a:	d00c      	beq.n	800b826 <copy_9+0x152>
 800b80c:	9d03      	ldr	r5, [sp, #12]
 800b80e:	2d00      	cmp	r5, #0
 800b810:	f040 8115 	bne.w	800ba3e <copy_9+0x36a>
 800b814:	f1b8 0f00 	cmp.w	r8, #0
 800b818:	d005      	beq.n	800b826 <copy_9+0x152>
 800b81a:	9d04      	ldr	r5, [sp, #16]
 800b81c:	b11d      	cbz	r5, 800b826 <copy_9+0x152>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b81e:	9d01      	ldr	r5, [sp, #4]
 800b820:	444d      	add	r5, r9
 800b822:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b826:	f1ba 0f00 	cmp.w	sl, #0
 800b82a:	d003      	beq.n	800b834 <copy_9+0x160>
 800b82c:	f1b8 0f00 	cmp.w	r8, #0
 800b830:	f040 80ff 	bne.w	800ba32 <copy_9+0x35e>
    int pixel_x = x_base + x + offset;
 800b834:	3105      	adds	r1, #5
 800b836:	4421      	add	r1, r4
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b838:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800b83c:	bf2c      	ite	cs
 800b83e:	2400      	movcs	r4, #0
 800b840:	2401      	movcc	r4, #1
 800b842:	b194      	cbz	r4, 800b86a <copy_9+0x196>
 800b844:	9d06      	ldr	r5, [sp, #24]
 800b846:	2d00      	cmp	r5, #0
 800b848:	f040 80c4 	bne.w	800b9d4 <copy_9+0x300>
 800b84c:	b16c      	cbz	r4, 800b86a <copy_9+0x196>
 800b84e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b850:	2d00      	cmp	r5, #0
 800b852:	f040 80b8 	bne.w	800b9c6 <copy_9+0x2f2>
 800b856:	b144      	cbz	r4, 800b86a <copy_9+0x196>
 800b858:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b85a:	b135      	cbz	r5, 800b86a <copy_9+0x196>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b85c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800b85e:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 800b862:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 800b866:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b86a:	9d05      	ldr	r5, [sp, #20]
 800b86c:	b115      	cbz	r5, 800b874 <copy_9+0x1a0>
 800b86e:	2c00      	cmp	r4, #0
 800b870:	f040 80a1 	bne.w	800b9b6 <copy_9+0x2e2>
 800b874:	f5bc 7f88 	cmp.w	ip, #272	@ 0x110
 800b878:	d202      	bcs.n	800b880 <copy_9+0x1ac>
 800b87a:	2c00      	cmp	r4, #0
 800b87c:	f040 8093 	bne.w	800b9a6 <copy_9+0x2d2>
    int pixel_y = y_base + y;
 800b880:	1d95      	adds	r5, r2, #6
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b882:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800b886:	d202      	bcs.n	800b88e <copy_9+0x1ba>
 800b888:	2c00      	cmp	r4, #0
 800b88a:	f040 8085 	bne.w	800b998 <copy_9+0x2c4>
    int pixel_y = y_base + y;
 800b88e:	1dd5      	adds	r5, r2, #7
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b890:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800b894:	d201      	bcs.n	800b89a <copy_9+0x1c6>
 800b896:	2c00      	cmp	r4, #0
 800b898:	d177      	bne.n	800b98a <copy_9+0x2b6>
    int pixel_y = y_base + y;
 800b89a:	f102 0508 	add.w	r5, r2, #8
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b89e:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800b8a2:	d201      	bcs.n	800b8a8 <copy_9+0x1d4>
 800b8a4:	2c00      	cmp	r4, #0
 800b8a6:	d169      	bne.n	800b97c <copy_9+0x2a8>
    int pixel_y = y_base + y;
 800b8a8:	f102 0509 	add.w	r5, r2, #9
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b8ac:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800b8b0:	d201      	bcs.n	800b8b6 <copy_9+0x1e2>
 800b8b2:	2c00      	cmp	r4, #0
 800b8b4:	d159      	bne.n	800b96a <copy_9+0x296>
    int pixel_y = y_base + y;
 800b8b6:	f102 050a 	add.w	r5, r2, #10
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b8ba:	f5b5 7f88 	cmp.w	r5, #272	@ 0x110
 800b8be:	d201      	bcs.n	800b8c4 <copy_9+0x1f0>
 800b8c0:	2c00      	cmp	r4, #0
 800b8c2:	d14b      	bne.n	800b95c <copy_9+0x288>
 800b8c4:	320b      	adds	r2, #11
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b8c6:	9901      	ldr	r1, [sp, #4]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b8c8:	f5b2 7f88 	cmp.w	r2, #272	@ 0x110
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b8cc:	f501 6434 	add.w	r4, r1, #2880	@ 0xb40
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b8d0:	bf2c      	ite	cs
 800b8d2:	2200      	movcs	r2, #0
 800b8d4:	2201      	movcc	r2, #1
 800b8d6:	b15a      	cbz	r2, 800b8f0 <copy_9+0x21c>
 800b8d8:	9902      	ldr	r1, [sp, #8]
 800b8da:	bbc1      	cbnz	r1, 800b94e <copy_9+0x27a>
 800b8dc:	b142      	cbz	r2, 800b8f0 <copy_9+0x21c>
 800b8de:	9903      	ldr	r1, [sp, #12]
 800b8e0:	bb81      	cbnz	r1, 800b944 <copy_9+0x270>
 800b8e2:	b12a      	cbz	r2, 800b8f0 <copy_9+0x21c>
 800b8e4:	9904      	ldr	r1, [sp, #16]
 800b8e6:	b119      	cbz	r1, 800b8f0 <copy_9+0x21c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b8e8:	eb04 0109 	add.w	r1, r4, r9
 800b8ec:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b8f0:	f1ba 0f00 	cmp.w	sl, #0
 800b8f4:	d000      	beq.n	800b8f8 <copy_9+0x224>
 800b8f6:	b9f2      	cbnz	r2, 800b936 <copy_9+0x262>
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 0, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, 0, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 5, color);
    for (int i = 1; i < 11; i++) fill_pixel(buffer, x, y, 5, i, color);
    for (int i = 1; i < 5; i++) fill_pixel(buffer, x, y, i, 11, color);
}
 800b8f8:	b00f      	add	sp, #60	@ 0x3c
 800b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b8fe:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800b902:	eb0b 1545 	add.w	r5, fp, r5, lsl #5
 800b906:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b90a:	e725      	b.n	800b758 <copy_9+0x84>
 800b90c:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800b910:	eb09 1646 	add.w	r6, r9, r6, lsl #5
 800b914:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b918:	e70e      	b.n	800b738 <copy_9+0x64>
 800b91a:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800b91e:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800b922:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b926:	e6fa      	b.n	800b71e <copy_9+0x4a>
 800b928:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
 800b92c:	eb07 1646 	add.w	r6, r7, r6, lsl #5
 800b930:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 800b934:	e6e6      	b.n	800b704 <copy_9+0x30>
 800b936:	eb0b 0204 	add.w	r2, fp, r4
 800b93a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800b93e:	b00f      	add	sp, #60	@ 0x3c
 800b940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b944:	9908      	ldr	r1, [sp, #32]
 800b946:	4421      	add	r1, r4
 800b948:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800b94c:	e7c9      	b.n	800b8e2 <copy_9+0x20e>
 800b94e:	9907      	ldr	r1, [sp, #28]
 800b950:	4421      	add	r1, r4
 800b952:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b956:	2a00      	cmp	r2, #0
 800b958:	d1c1      	bne.n	800b8de <copy_9+0x20a>
 800b95a:	e7c9      	b.n	800b8f0 <copy_9+0x21c>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b95c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b960:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800b964:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800b968:	e7ac      	b.n	800b8c4 <copy_9+0x1f0>
 800b96a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b96e:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b972:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b976:	e79e      	b.n	800b8b6 <copy_9+0x1e2>
 800b978:	240001b8 	.word	0x240001b8
 800b97c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b980:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b984:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b988:	e78e      	b.n	800b8a8 <copy_9+0x1d4>
 800b98a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b98e:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b992:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b996:	e780      	b.n	800b89a <copy_9+0x1c6>
 800b998:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b99c:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b9a0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b9a4:	e773      	b.n	800b88e <copy_9+0x1ba>
 800b9a6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b9a8:	eba5 050c 	sub.w	r5, r5, ip
 800b9ac:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b9b0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b9b4:	e764      	b.n	800b880 <copy_9+0x1ac>
 800b9b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b9b8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800b9bc:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800b9c0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b9c4:	e756      	b.n	800b874 <copy_9+0x1a0>
 800b9c6:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800b9ca:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 800b9ce:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
 800b9d2:	e740      	b.n	800b856 <copy_9+0x182>
 800b9d4:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
 800b9d8:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 800b9dc:	f820 301e 	strh.w	r3, [r0, lr, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800b9e0:	2c00      	cmp	r4, #0
 800b9e2:	f47f af34 	bne.w	800b84e <copy_9+0x17a>
 800b9e6:	e740      	b.n	800b86a <copy_9+0x196>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800b9e8:	ebce 150e 	rsb	r5, lr, lr, lsl #4
 800b9ec:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 800b9f0:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800b9f4:	e6c7      	b.n	800b786 <copy_9+0xb2>
 800b9f6:	ebc7 1507 	rsb	r5, r7, r7, lsl #4
 800b9fa:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 800b9fe:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800ba02:	e6cd      	b.n	800b7a0 <copy_9+0xcc>
 800ba04:	ebc6 1506 	rsb	r5, r6, r6, lsl #4
 800ba08:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 800ba0c:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800ba10:	e6d4      	b.n	800b7bc <copy_9+0xe8>
 800ba12:	ebc6 1c06 	rsb	ip, r6, r6, lsl #4
 800ba16:	eb08 184c 	add.w	r8, r8, ip, lsl #5
 800ba1a:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800ba1e:	e6da      	b.n	800b7d6 <copy_9+0x102>
 800ba20:	9e07      	ldr	r6, [sp, #28]
 800ba22:	4435      	add	r5, r6
 800ba24:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
    if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH && pixel_y >= 0 && pixel_y < SCREEN_HEIGHT)
 800ba28:	f1b8 0f00 	cmp.w	r8, #0
 800ba2c:	f47f aeee 	bne.w	800b80c <copy_9+0x138>
 800ba30:	e6f9      	b.n	800b826 <copy_9+0x152>
        buffer[pixel_x + pixel_y * SCREEN_WIDTH] = color;
 800ba32:	9d01      	ldr	r5, [sp, #4]
 800ba34:	eb0b 0805 	add.w	r8, fp, r5
 800ba38:	f820 3018 	strh.w	r3, [r0, r8, lsl #1]
 800ba3c:	e6fa      	b.n	800b834 <copy_9+0x160>
 800ba3e:	9d01      	ldr	r5, [sp, #4]
 800ba40:	9e08      	ldr	r6, [sp, #32]
 800ba42:	4435      	add	r5, r6
 800ba44:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 800ba48:	e6e4      	b.n	800b814 <copy_9+0x140>
 800ba4a:	bf00      	nop

0800ba4c <Error_Handler>:
 * @retval None
 */
void Error_Handler(void)
{
    /* Turn LED REDon */
    BSP_LED_On(LED_RED);
 800ba4c:	2001      	movs	r0, #1
{
 800ba4e:	b508      	push	{r3, lr}
    BSP_LED_On(LED_RED);
 800ba50:	f000 f994 	bl	800bd7c <BSP_LED_On>
    while (1)
 800ba54:	e7fe      	b.n	800ba54 <Error_Handler+0x8>
 800ba56:	bf00      	nop

0800ba58 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800ba58:	4a92      	ldr	r2, [pc, #584]	@ (800bca4 <main+0x24c>)
 800ba5a:	6953      	ldr	r3, [r2, #20]
 800ba5c:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b0a2      	sub	sp, #136	@ 0x88
 800ba64:	d111      	bne.n	800ba8a <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ba66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ba6a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800ba6e:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800ba72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ba76:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800ba7a:	6953      	ldr	r3, [r2, #20]
 800ba7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ba82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ba86:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800ba8a:	4886      	ldr	r0, [pc, #536]	@ (800bca4 <main+0x24c>)
 800ba8c:	6943      	ldr	r3, [r0, #20]
 800ba8e:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800ba92:	d126      	bne.n	800bae2 <main+0x8a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800ba94:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ba98:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800ba9c:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800baa0:	f643 75e0 	movw	r5, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800baa4:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800baa8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 800baac:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800bab0:	ea0c 0105 	and.w	r1, ip, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800bab4:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800bab6:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800baba:	3b01      	subs	r3, #1
 800babc:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800babe:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 800bac2:	d1f8      	bne.n	800bab6 <main+0x5e>
    } while(sets-- != 0U);
 800bac4:	f1ac 0c20 	sub.w	ip, ip, #32
 800bac8:	f11c 0f20 	cmn.w	ip, #32
 800bacc:	d1f0      	bne.n	800bab0 <main+0x58>
 800bace:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800bad2:	6943      	ldr	r3, [r0, #20]
 800bad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bad8:	6143      	str	r3, [r0, #20]
 800bada:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bade:	f3bf 8f6f 	isb	sy
  hdma2d.Instance = DMA2D;
 800bae2:	4c71      	ldr	r4, [pc, #452]	@ (800bca8 <main+0x250>)
  HAL_Init();
 800bae4:	f002 f9a6 	bl	800de34 <HAL_Init>
  hdma2d.Init.Mode = DMA2D_M2M;
 800bae8:	2300      	movs	r3, #0
  hdma2d.Instance = DMA2D;
 800baea:	4a70      	ldr	r2, [pc, #448]	@ (800bcac <main+0x254>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800baec:	4620      	mov	r0, r4
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800baee:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma2d.Init.Mode = DMA2D_M2M;
 800baf0:	e9c4 2300 	strd	r2, r3, [r4]
  hdma2d.Init.OutputOffset = 0;
 800baf4:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800baf8:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800bafc:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800bb00:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800bb04:	f002 fa56 	bl	800dfb4 <HAL_DMA2D_Init>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	f040 80c9 	bne.w	800bca0 <main+0x248>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800bb0e:	2101      	movs	r1, #1
 800bb10:	4620      	mov	r0, r4
 800bb12:	f002 fb95 	bl	800e240 <HAL_DMA2D_ConfigLayer>
 800bb16:	4605      	mov	r5, r0
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	f040 80c1 	bne.w	800bca0 <main+0x248>
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 800bb1e:	4a61      	ldr	r2, [pc, #388]	@ (800bca4 <main+0x24c>)
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800bb20:	2002      	movs	r0, #2
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 800bb22:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800bb26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bb2a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800bb2e:	f003 fe0d 	bl	800f74c <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bb32:	4b5f      	ldr	r3, [pc, #380]	@ (800bcb0 <main+0x258>)
 800bb34:	9504      	str	r5, [sp, #16]
 800bb36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bb38:	4a5e      	ldr	r2, [pc, #376]	@ (800bcb4 <main+0x25c>)
 800bb3a:	f021 0101 	bic.w	r1, r1, #1
 800bb3e:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800bb40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	6993      	ldr	r3, [r2, #24]
 800bb4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bb4e:	6193      	str	r3, [r2, #24]
 800bb50:	6993      	ldr	r3, [r2, #24]
 800bb52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bb56:	9304      	str	r3, [sp, #16]
 800bb58:	9b04      	ldr	r3, [sp, #16]
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800bb5a:	6993      	ldr	r3, [r2, #24]
 800bb5c:	049e      	lsls	r6, r3, #18
 800bb5e:	d5fc      	bpl.n	800bb5a <main+0x102>
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bb60:	2001      	movs	r0, #1
 800bb62:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800bb66:	2300      	movs	r3, #0
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bb68:	2602      	movs	r6, #2
    RCC_OscInitStruct.PLL.PLLN = 160;
 800bb6a:	22a0      	movs	r2, #160	@ 0xa0
    RCC_OscInitStruct.PLL.PLLQ = 4;
 800bb6c:	2704      	movs	r7, #4
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800bb6e:	2508      	movs	r5, #8
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800bb70:	9311      	str	r3, [sp, #68]	@ 0x44
    RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800bb72:	9315      	str	r3, [sp, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLP = 2;
 800bb74:	961b      	str	r6, [sp, #108]	@ 0x6c
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800bb76:	951e      	str	r5, [sp, #120]	@ 0x78
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bb78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 5;
 800bb7c:	2105      	movs	r1, #5
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bb7e:	a80e      	add	r0, sp, #56	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bb80:	e9cd 6617 	strd	r6, r6, [sp, #92]	@ 0x5c
    RCC_OscInitStruct.PLL.PLLN = 160;
 800bb84:	e9cd 1219 	strd	r1, r2, [sp, #100]	@ 0x64
    RCC_OscInitStruct.PLL.PLLQ = 4;
 800bb88:	e9cd 761c 	strd	r7, r6, [sp, #112]	@ 0x70
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800bb8c:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bb90:	f003 fe72 	bl	800f878 <HAL_RCC_OscConfig>
    if (ret != HAL_OK)
 800bb94:	2800      	cmp	r0, #0
 800bb96:	f040 8083 	bne.w	800bca0 <main+0x248>
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800bb9a:	2340      	movs	r3, #64	@ 0x40
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800bb9c:	4639      	mov	r1, r7
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800bb9e:	9008      	str	r0, [sp, #32]
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800bba0:	a806      	add	r0, sp, #24
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800bba2:	930b      	str	r3, [sp, #44]	@ 0x2c
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800bba4:	930d      	str	r3, [sp, #52]	@ 0x34
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800bba6:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	253f      	movs	r5, #63	@ 0x3f
 800bbae:	e9cd 5306 	strd	r5, r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800bbb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbb6:	930c      	str	r3, [sp, #48]	@ 0x30
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800bbb8:	f004 f9da 	bl	800ff70 <HAL_RCC_ClockConfig>
    if (ret != HAL_OK)
 800bbbc:	4607      	mov	r7, r0
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	d16e      	bne.n	800bca0 <main+0x248>
    __HAL_RCC_CSI_ENABLE();
 800bbc2:	4d3d      	ldr	r5, [pc, #244]	@ (800bcb8 <main+0x260>)
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbca:	602b      	str	r3, [r5, #0]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bbcc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800bbd0:	4333      	orrs	r3, r6
 800bbd2:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 800bbd6:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800bbda:	4033      	ands	r3, r6
 800bbdc:	9305      	str	r3, [sp, #20]
 800bbde:	9b05      	ldr	r3, [sp, #20]
    HAL_EnableCompensationCell();
 800bbe0:	f002 f982 	bl	800dee8 <HAL_EnableCompensationCell>
  BSP_LCD_InitEx(0, LCD_ORIENTATION_LANDSCAPE, LCD_PIXEL_FORMAT_RGB565, 480, 272);
 800bbe4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bbe8:	4632      	mov	r2, r6
 800bbea:	2101      	movs	r1, #1
 800bbec:	4638      	mov	r0, r7
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800bbf4:	f000 fff8 	bl	800cbe8 <BSP_LCD_InitEx>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 800bbf8:	4830      	ldr	r0, [pc, #192]	@ (800bcbc <main+0x264>)
 800bbfa:	f000 f863 	bl	800bcc4 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_Clear (UTIL_LCD_COLOR_BLACK);
 800bbfe:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800bc02:	f000 f88f 	bl	800bd24 <UTIL_LCD_Clear>
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800bc06:	f8d5 30d4 	ldr.w	r3, [r5, #212]	@ 0xd4
  hdma2d.Init.Mode = DMA2D_R2M;
 800bc0a:	60a6      	str	r6, [r4, #8]
 800bc0c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800bc10:	f043 0310 	orr.w	r3, r3, #16
  hdma2d.Init.OutputOffset = 0;
 800bc14:	60e7      	str	r7, [r4, #12]
  hdma2d.Instance = DMA2D;
 800bc16:	4925      	ldr	r1, [pc, #148]	@ (800bcac <main+0x254>)
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800bc18:	f8c5 30d4 	str.w	r3, [r5, #212]	@ 0xd4
 800bc1c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	@ 0xd4
  if (HAL_DMA2D_Init (&hdma2d) != HAL_OK)
 800bc20:	4821      	ldr	r0, [pc, #132]	@ (800bca8 <main+0x250>)
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800bc22:	f003 0310 	and.w	r3, r3, #16
 800bc26:	9303      	str	r3, [sp, #12]
 800bc28:	9b03      	ldr	r3, [sp, #12]
  hdma2d.Init.Mode = DMA2D_R2M;
 800bc2a:	e9c4 1200 	strd	r1, r2, [r4]
  if (HAL_DMA2D_Init (&hdma2d) != HAL_OK)
 800bc2e:	f002 f9c1 	bl	800dfb4 <HAL_DMA2D_Init>
 800bc32:	4604      	mov	r4, r0
 800bc34:	bba0      	cbnz	r0, 800bca0 <main+0x248>
  LTDC->LIPCR = 271;
 800bc36:	4b22      	ldr	r3, [pc, #136]	@ (800bcc0 <main+0x268>)
 800bc38:	f240 100f 	movw	r0, #271	@ 0x10f
  HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	4621      	mov	r1, r4
  LTDC->LIPCR = 271;
 800bc40:	6418      	str	r0, [r3, #64]	@ 0x40
  SET_BIT (LTDC->IER, LTDC_IER_LIE);
 800bc42:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800bc44:	f040 0001 	orr.w	r0, r0, #1
 800bc48:	6358      	str	r0, [r3, #52]	@ 0x34
  HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800bc4a:	2058      	movs	r0, #88	@ 0x58
 800bc4c:	f002 f966 	bl	800df1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800bc50:	2058      	movs	r0, #88	@ 0x58
 800bc52:	f002 f99f 	bl	800df94 <HAL_NVIC_EnableIRQ>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800bc56:	4813      	ldr	r0, [pc, #76]	@ (800bca4 <main+0x24c>)
 800bc58:	f8c0 4084 	str.w	r4, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800bc5c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800bc60:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800bc64:	f643 75e0 	movw	r5, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800bc68:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800bc6c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 800bc70:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800bc74:	ea0c 0105 	and.w	r1, ip, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800bc78:	4623      	mov	r3, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800bc7a:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800bc7e:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800bc80:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
 800bc84:	1c5a      	adds	r2, r3, #1
 800bc86:	d1f8      	bne.n	800bc7a <main+0x222>
    } while(sets-- != 0U);
 800bc88:	f1ac 0c20 	sub.w	ip, ip, #32
 800bc8c:	f11c 0f20 	cmn.w	ip, #32
 800bc90:	d1f0      	bne.n	800bc74 <main+0x21c>
 800bc92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bc96:	f3bf 8f6f 	isb	sy
  AppMain ();
 800bc9a:	f001 fef9 	bl	800da90 <AppMain>
  while (1)
 800bc9e:	e7fe      	b.n	800bc9e <main+0x246>
    Error_Handler();
 800bca0:	f7ff fed4 	bl	800ba4c <Error_Handler>
 800bca4:	e000ed00 	.word	0xe000ed00
 800bca8:	240001c0 	.word	0x240001c0
 800bcac:	52001000 	.word	0x52001000
 800bcb0:	58000400 	.word	0x58000400
 800bcb4:	58024800 	.word	0x58024800
 800bcb8:	58024400 	.word	0x58024400
 800bcbc:	080130c0 	.word	0x080130c0
 800bcc0:	50001000 	.word	0x50001000

0800bcc4 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800bcc4:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800bcc6:	e9d0 2300 	ldrd	r2, r3, [r0]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800bcca:	4c14      	ldr	r4, [pc, #80]	@ (800bd1c <UTIL_LCD_SetFuncDriver+0x58>)
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 800bccc:	6881      	ldr	r1, [r0, #8]
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 800bcce:	4e14      	ldr	r6, [pc, #80]	@ (800bd20 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800bcd0:	e9c4 2300 	strd	r2, r3, [r4]
  FuncDriver.FillRect       = pDrv->FillRect;
 800bcd4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800bcd8:	e9c4 1302 	strd	r1, r3, [r4, #8]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800bcdc:	e9d0 3505 	ldrd	r3, r5, [r0, #20]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 800bce0:	e9c4 2304 	strd	r2, r3, [r4, #16]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800bce4:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800bce8:	e9c4 5306 	strd	r5, r3, [r4, #24]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800bcec:	6222      	str	r2, [r4, #32]
  DrawProp->LcdLayer = 0;
 800bcee:	2500      	movs	r5, #0
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800bcf0:	e9d0 2109 	ldrd	r2, r1, [r0, #36]	@ 0x24
  DrawProp->LcdLayer = 0;
 800bcf4:	e9c6 5503 	strd	r5, r5, [r6, #12]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800bcf8:	62a1      	str	r1, [r4, #40]	@ 0x28
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800bd00:	6262      	str	r2, [r4, #36]	@ 0x24
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800bd02:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800bd04:	6a23      	ldr	r3, [r4, #32]
 800bd06:	f106 0118 	add.w	r1, r6, #24
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800bd0e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bd10:	f106 011c 	add.w	r1, r6, #28
 800bd14:	4628      	mov	r0, r5
}
 800bd16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800bd1a:	4718      	bx	r3
 800bd1c:	24000228 	.word	0x24000228
 800bd20:	24000258 	.word	0x24000258

0800bd24 <UTIL_LCD_Clear>:
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800bd24:	4a13      	ldr	r2, [pc, #76]	@ (800bd74 <UTIL_LCD_Clear+0x50>)
{
 800bd26:	4601      	mov	r1, r0
 800bd28:	b570      	push	{r4, r5, r6, lr}
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800bd2a:	69d6      	ldr	r6, [r2, #28]
{
 800bd2c:	b082      	sub	sp, #8
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800bd2e:	4c12      	ldr	r4, [pc, #72]	@ (800bd78 <UTIL_LCD_Clear+0x54>)
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800bd30:	2e02      	cmp	r6, #2
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800bd32:	6953      	ldr	r3, [r2, #20]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800bd34:	6924      	ldr	r4, [r4, #16]
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800bd36:	6995      	ldr	r5, [r2, #24]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800bd38:	6910      	ldr	r0, [r2, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800bd3a:	d006      	beq.n	800bd4a <UTIL_LCD_Clear+0x26>
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	9101      	str	r1, [sp, #4]
 800bd40:	9500      	str	r5, [sp, #0]
 800bd42:	4611      	mov	r1, r2
 800bd44:	47a0      	blx	r4
}
 800bd46:	b002      	add	sp, #8
 800bd48:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800bd4a:	9500      	str	r5, [sp, #0]
 800bd4c:	ea4f 1c51 	mov.w	ip, r1, lsr #5
 800bd50:	0a0d      	lsrs	r5, r1, #8
 800bd52:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800bd56:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 800bd60:	ea4c 0c05 	orr.w	ip, ip, r5
 800bd64:	ea4c 0101 	orr.w	r1, ip, r1
 800bd68:	9101      	str	r1, [sp, #4]
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	47a0      	blx	r4
}
 800bd6e:	b002      	add	sp, #8
 800bd70:	bd70      	pop	{r4, r5, r6, pc}
 800bd72:	bf00      	nop
 800bd74:	24000258 	.word	0x24000258
 800bd78:	24000228 	.word	0x24000228

0800bd7c <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800bd7c:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800bd7e:	4905      	ldr	r1, [pc, #20]	@ (800bd94 <BSP_LED_On+0x18>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	4b05      	ldr	r3, [pc, #20]	@ (800bd98 <BSP_LED_On+0x1c>)
 800bd84:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 800bd88:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800bd8c:	f002 fe10 	bl	800e9b0 <HAL_GPIO_WritePin>
  return ret;
}
 800bd90:	2000      	movs	r0, #0
 800bd92:	bd08      	pop	{r3, pc}
 800bd94:	080130b0 	.word	0x080130b0
 800bd98:	080130b8 	.word	0x080130b8

0800bd9c <BSP_PB_IRQHandler>:
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800bd9c:	4b02      	ldr	r3, [pc, #8]	@ (800bda8 <BSP_PB_IRQHandler+0xc>)
 800bd9e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800bda2:	f002 bab7 	b.w	800e314 <HAL_EXTI_IRQHandler>
 800bda6:	bf00      	nop
 800bda8:	24000298 	.word	0x24000298

0800bdac <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800bdac:	4a10      	ldr	r2, [pc, #64]	@ (800bdf0 <BSP_I2C4_DeInit+0x44>)
{
 800bdae:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 800bdb0:	6813      	ldr	r3, [r2, #0]
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800bdb6:	b10b      	cbz	r3, 800bdbc <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800bdb8:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800bdba:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800bdbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bdc0:	480c      	ldr	r0, [pc, #48]	@ (800bdf4 <BSP_I2C4_DeInit+0x48>)
 800bdc2:	f002 fcc5 	bl	800e750 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800bdc6:	480b      	ldr	r0, [pc, #44]	@ (800bdf4 <BSP_I2C4_DeInit+0x48>)
 800bdc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800bdcc:	f002 fcc0 	bl	800e750 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800bdd0:	4a09      	ldr	r2, [pc, #36]	@ (800bdf8 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800bdd2:	480a      	ldr	r0, [pc, #40]	@ (800bdfc <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800bdd4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 800bdd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bddc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800bde0:	f002 ffb0 	bl	800ed44 <HAL_I2C_DeInit>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d0e7      	beq.n	800bdb8 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800bde8:	f06f 0007 	mvn.w	r0, #7
}
 800bdec:	bd08      	pop	{r3, pc}
 800bdee:	bf00      	nop
 800bdf0:	24000cf8 	.word	0x24000cf8
 800bdf4:	58020c00 	.word	0x58020c00
 800bdf8:	58024400 	.word	0x58024400
 800bdfc:	240002a0 	.word	0x240002a0

0800be00 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 800be00:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800be02:	2201      	movs	r2, #1
{
 800be04:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
 800be06:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800be0a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800be0e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800be12:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
 800be16:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800be18:	f002 ff3c 	bl	800ec94 <HAL_I2C_Init>
 800be1c:	b108      	cbz	r0, 800be22 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 800be1e:	2001      	movs	r0, #1
}
 800be20:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800be22:	4601      	mov	r1, r0
 800be24:	4620      	mov	r0, r4
 800be26:	f003 fa5f 	bl	800f2e8 <HAL_I2CEx_ConfigAnalogFilter>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d1f7      	bne.n	800be1e <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800be2e:	4601      	mov	r1, r0
 800be30:	4620      	mov	r0, r4
 800be32:	f003 fa83 	bl	800f33c <HAL_I2CEx_ConfigDigitalFilter>
 800be36:	3800      	subs	r0, #0
 800be38:	bf18      	it	ne
 800be3a:	2001      	movne	r0, #1
}
 800be3c:	bd10      	pop	{r4, pc}
 800be3e:	bf00      	nop

0800be40 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 800be40:	4b97      	ldr	r3, [pc, #604]	@ (800c0a0 <BSP_I2C4_Init+0x260>)
  hbus_i2c4.Instance = BUS_I2C4;
 800be42:	4898      	ldr	r0, [pc, #608]	@ (800c0a4 <BSP_I2C4_Init+0x264>)
 800be44:	4a98      	ldr	r2, [pc, #608]	@ (800c0a8 <BSP_I2C4_Init+0x268>)
{
 800be46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (I2c4InitCounter == 0U)
 800be4a:	681c      	ldr	r4, [r3, #0]
{
 800be4c:	b09d      	sub	sp, #116	@ 0x74
  hbus_i2c4.Instance = BUS_I2C4;
 800be4e:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 800be50:	b11c      	cbz	r4, 800be5a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800be52:	2000      	movs	r0, #0
}
 800be54:	b01d      	add	sp, #116	@ 0x74
 800be56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800be5a:	2201      	movs	r2, #1
 800be5c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800be5e:	f003 fa3d 	bl	800f2dc <HAL_I2C_GetState>
 800be62:	2800      	cmp	r0, #0
 800be64:	d1f5      	bne.n	800be52 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800be66:	4d91      	ldr	r5, [pc, #580]	@ (800c0ac <BSP_I2C4_Init+0x26c>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800be68:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800be6c:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800be6e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800be70:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800be74:	f04f 0800 	mov.w	r8, #0
 800be78:	f04f 0902 	mov.w	r9, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800be7c:	f043 0308 	orr.w	r3, r3, #8
 800be80:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800be84:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800be88:	f003 0308 	and.w	r3, r3, #8
 800be8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800be90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800be94:	f043 0308 	orr.w	r3, r3, #8
 800be98:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800be9c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800bea0:	961a      	str	r6, [sp, #104]	@ 0x68
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800bea2:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800bea6:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800beaa:	9314      	str	r3, [sp, #80]	@ 0x50
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800beac:	a916      	add	r1, sp, #88	@ 0x58
 800beae:	4880      	ldr	r0, [pc, #512]	@ (800c0b0 <BSP_I2C4_Init+0x270>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800beb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800beb2:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800beb6:	f002 fa45 	bl	800e344 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800beba:	2312      	movs	r3, #18
 800bebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800bec0:	a916      	add	r1, sp, #88	@ 0x58
 800bec2:	487b      	ldr	r0, [pc, #492]	@ (800c0b0 <BSP_I2C4_Init+0x270>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800bec4:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800bec6:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 800beca:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800bece:	f002 fa39 	bl	800e344 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800bed2:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800bed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beda:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 800bede:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800bee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bee6:	9315      	str	r3, [sp, #84]	@ 0x54
 800bee8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  BUS_I2C4_FORCE_RESET();
 800beea:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800beee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bef2:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 800bef6:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800befa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800befe:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800bf02:	f004 f9a7 	bl	8010254 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f000 8186 	beq.w	800c218 <BSP_I2C4_Init+0x3d8>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800bf0c:	4b69      	ldr	r3, [pc, #420]	@ (800c0b4 <BSP_I2C4_Init+0x274>)
  if (tsdadel_max <= 0)
 800bf0e:	4626      	mov	r6, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 800bf10:	f04f 0a10 	mov.w	sl, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bf14:	f8df 91a4 	ldr.w	r9, [pc, #420]	@ 800c0bc <BSP_I2C4_Init+0x27c>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800bf18:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bf1c:	f04f 0c07 	mov.w	ip, #7
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800bf20:	fbb3 f5f0 	udiv	r5, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800bf24:	00ab      	lsls	r3, r5, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800bf26:	9501      	str	r5, [sp, #4]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800bf28:	eb05 0245 	add.w	r2, r5, r5, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800bf2c:	f5c3 77c3 	rsb	r7, r3, #390	@ 0x186
 800bf30:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800bf34:	f1c2 0032 	rsb	r0, r2, #50	@ 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800bf38:	0069      	lsls	r1, r5, #1
 800bf3a:	005a      	lsls	r2, r3, #1
 800bf3c:	4b5e      	ldr	r3, [pc, #376]	@ (800c0b8 <BSP_I2C4_Init+0x278>)
  if (tsdadel_min <= 0)
 800bf3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  if (tsdadel_max <= 0)
 800bf42:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800bf46:	681b      	ldr	r3, [r3, #0]
  if (tsdadel_max <= 0)
 800bf48:	4693      	mov	fp, r2
 800bf4a:	9211      	str	r2, [sp, #68]	@ 0x44
 800bf4c:	e9cd 4102 	strd	r4, r1, [sp, #8]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800bf50:	ebb7 0f45 	cmp.w	r7, r5, lsl #1
 800bf54:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800bf58:	bf2c      	ite	cs
 800bf5a:	2401      	movcs	r4, #1
 800bf5c:	2400      	movcc	r4, #0
 800bf5e:	ebb0 0f45 	cmp.w	r0, r5, lsl #1
 800bf62:	f004 0401 	and.w	r4, r4, #1
 800bf66:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800bf6a:	bf88      	it	hi
 800bf6c:	2400      	movhi	r4, #0
 800bf6e:	4290      	cmp	r0, r2
 800bf70:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 800bf74:	9405      	str	r4, [sp, #20]
 800bf76:	bf8c      	ite	hi
 800bf78:	2400      	movhi	r4, #0
 800bf7a:	2401      	movls	r4, #1
 800bf7c:	4297      	cmp	r7, r2
 800bf7e:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800bf82:	ebc5 0ec5 	rsb	lr, r5, r5, lsl #3
 800bf86:	bf38      	it	cc
 800bf88:	2400      	movcc	r4, #0
 800bf8a:	ebb0 0f85 	cmp.w	r0, r5, lsl #2
 800bf8e:	9404      	str	r4, [sp, #16]
 800bf90:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 800bf94:	9406      	str	r4, [sp, #24]
 800bf96:	4644      	mov	r4, r8
 800bf98:	bf94      	ite	ls
 800bf9a:	2401      	movls	r4, #1
 800bf9c:	2400      	movhi	r4, #0
 800bf9e:	ebb7 0f85 	cmp.w	r7, r5, lsl #2
 800bfa2:	f004 0801 	and.w	r8, r4, #1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800bfa6:	f04f 0400 	mov.w	r4, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800bfaa:	bf38      	it	cc
 800bfac:	f04f 0800 	movcc.w	r8, #0
 800bfb0:	4288      	cmp	r0, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800bfb2:	9400      	str	r4, [sp, #0]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800bfb4:	f8cd 801c 	str.w	r8, [sp, #28]
 800bfb8:	bf8c      	ite	hi
 800bfba:	f04f 0800 	movhi.w	r8, #0
 800bfbe:	f04f 0801 	movls.w	r8, #1
 800bfc2:	428f      	cmp	r7, r1
 800bfc4:	bf38      	it	cc
 800bfc6:	f04f 0800 	movcc.w	r8, #0
 800bfca:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 800bfce:	bf98      	it	ls
 800bfd0:	2401      	movls	r4, #1
 800bfd2:	ebb7 0f42 	cmp.w	r7, r2, lsl #1
 800bfd6:	f8cd 8020 	str.w	r8, [sp, #32]
 800bfda:	46a8      	mov	r8, r5
 800bfdc:	f004 0401 	and.w	r4, r4, #1
 800bfe0:	bf38      	it	cc
 800bfe2:	2400      	movcc	r4, #0
 800bfe4:	4570      	cmp	r0, lr
 800bfe6:	9409      	str	r4, [sp, #36]	@ 0x24
 800bfe8:	bf8c      	ite	hi
 800bfea:	2400      	movhi	r4, #0
 800bfec:	2401      	movls	r4, #1
 800bfee:	4577      	cmp	r7, lr
 800bff0:	bf38      	it	cc
 800bff2:	2400      	movcc	r4, #0
 800bff4:	ebb0 0fc5 	cmp.w	r0, r5, lsl #3
 800bff8:	bf94      	ite	ls
 800bffa:	f04f 0e01 	movls.w	lr, #1
 800bffe:	f04f 0e00 	movhi.w	lr, #0
 800c002:	ebb7 0fc5 	cmp.w	r7, r5, lsl #3
 800c006:	940a      	str	r4, [sp, #40]	@ 0x28
 800c008:	f00e 0e01 	and.w	lr, lr, #1
 800c00c:	bf38      	it	cc
 800c00e:	f04f 0e00 	movcc.w	lr, #0
 800c012:	4674      	mov	r4, lr
 800c014:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800c018:	eb05 0ec5 	add.w	lr, r5, r5, lsl #3
 800c01c:	4570      	cmp	r0, lr
 800c01e:	bf8c      	ite	hi
 800c020:	2400      	movhi	r4, #0
 800c022:	2401      	movls	r4, #1
 800c024:	4577      	cmp	r7, lr
 800c026:	bf38      	it	cc
 800c028:	2400      	movcc	r4, #0
 800c02a:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 800c02e:	940c      	str	r4, [sp, #48]	@ 0x30
 800c030:	bf98      	it	ls
 800c032:	f04f 0e01 	movls.w	lr, #1
 800c036:	9c06      	ldr	r4, [sp, #24]
 800c038:	bf88      	it	hi
 800c03a:	f04f 0e00 	movhi.w	lr, #0
 800c03e:	ebb7 0f41 	cmp.w	r7, r1, lsl #1
 800c042:	f00e 0101 	and.w	r1, lr, #1
 800c046:	bf38      	it	cc
 800c048:	2100      	movcc	r1, #0
 800c04a:	42a0      	cmp	r0, r4
 800c04c:	910d      	str	r1, [sp, #52]	@ 0x34
 800c04e:	4621      	mov	r1, r4
 800c050:	bf8c      	ite	hi
 800c052:	2100      	movhi	r1, #0
 800c054:	2101      	movls	r1, #1
 800c056:	42a7      	cmp	r7, r4
 800c058:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c05a:	bf38      	it	cc
 800c05c:	2100      	movcc	r1, #0
 800c05e:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 800c062:	910e      	str	r1, [sp, #56]	@ 0x38
 800c064:	bf94      	ite	ls
 800c066:	2101      	movls	r1, #1
 800c068:	2100      	movhi	r1, #0
 800c06a:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
 800c06e:	4622      	mov	r2, r4
 800c070:	f001 0101 	and.w	r1, r1, #1
 800c074:	bf38      	it	cc
 800c076:	2100      	movcc	r1, #0
 800c078:	42a0      	cmp	r0, r4
 800c07a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800c07c:	bf8c      	ite	hi
 800c07e:	2200      	movhi	r2, #0
 800c080:	2201      	movls	r2, #1
 800c082:	42a7      	cmp	r7, r4
 800c084:	bf38      	it	cc
 800c086:	2200      	movcc	r2, #0
 800c088:	9210      	str	r2, [sp, #64]	@ 0x40
 800c08a:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
 800c08e:	4290      	cmp	r0, r2
 800c090:	bf8c      	ite	hi
 800c092:	2100      	movhi	r1, #0
 800c094:	2101      	movls	r1, #1
 800c096:	4297      	cmp	r7, r2
 800c098:	bf38      	it	cc
 800c09a:	2100      	movcc	r1, #0
 800c09c:	9106      	str	r1, [sp, #24]
 800c09e:	e014      	b.n	800c0ca <BSP_I2C4_Init+0x28a>
 800c0a0:	24000cf8 	.word	0x24000cf8
 800c0a4:	240002a0 	.word	0x240002a0
 800c0a8:	58001c00 	.word	0x58001c00
 800c0ac:	58024400 	.word	0x58024400
 800c0b0:	58020c00 	.word	0x58020c00
 800c0b4:	3b9aca00 	.word	0x3b9aca00
 800c0b8:	240002f4 	.word	0x240002f4
 800c0bc:	240002f8 	.word	0x240002f8
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800c0c0:	9a00      	ldr	r2, [sp, #0]
 800c0c2:	44a8      	add	r8, r5
 800c0c4:	2a10      	cmp	r2, #16
 800c0c6:	f000 8239 	beq.w	800c53c <BSP_I2C4_Init+0x6fc>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800c0ca:	9900      	ldr	r1, [sp, #0]
      if (tscldel >= (uint32_t)tscldel_min)
 800c0cc:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 800c0d0:	460a      	mov	r2, r1
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800c0d2:	f101 0101 	add.w	r1, r1, #1
 800c0d6:	9100      	str	r1, [sp, #0]
      if (tscldel >= (uint32_t)tscldel_min)
 800c0d8:	d3f2      	bcc.n	800c0c0 <BSP_I2C4_Init+0x280>
            if(presc != prev_presc)
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	f040 80a6 	bne.w	800c22c <BSP_I2C4_Init+0x3ec>
 800c0e0:	4556      	cmp	r6, sl
 800c0e2:	f000 80a3 	beq.w	800c22c <BSP_I2C4_Init+0x3ec>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c0e6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c0ea:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c0ec:	f04f 0e00 	mov.w	lr, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c0f0:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c0f4:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c0f6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c0fa:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c0fe:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c100:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c102:	f200 80f1 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c106:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c108:	45b2      	cmp	sl, r6
 800c10a:	f000 80ac 	beq.w	800c266 <BSP_I2C4_Init+0x426>
 800c10e:	9904      	ldr	r1, [sp, #16]
 800c110:	2900      	cmp	r1, #0
 800c112:	f000 81b0 	beq.w	800c476 <BSP_I2C4_Init+0x636>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c116:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c11a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c11c:	f04f 0e03 	mov.w	lr, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c120:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c124:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c126:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c12a:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c12e:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c130:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c132:	f200 80d9 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c136:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c138:	4556      	cmp	r6, sl
 800c13a:	d026      	beq.n	800c18a <BSP_I2C4_Init+0x34a>
 800c13c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c13e:	2900      	cmp	r1, #0
 800c140:	f000 81b1 	beq.w	800c4a6 <BSP_I2C4_Init+0x666>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c144:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c148:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c14a:	46ce      	mov	lr, r9
 800c14c:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c150:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c152:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c156:	e9c1 2c01 	strd	r2, ip, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c15a:	f200 80c5 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c15e:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c160:	4556      	cmp	r6, sl
 800c162:	d012      	beq.n	800c18a <BSP_I2C4_Init+0x34a>
 800c164:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c166:	2900      	cmp	r1, #0
 800c168:	f000 81b3 	beq.w	800c4d2 <BSP_I2C4_Init+0x692>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c16c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c170:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c172:	240b      	movs	r4, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c174:	46ce      	mov	lr, r9
 800c176:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c17a:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c17c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c180:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c182:	608c      	str	r4, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c184:	f200 80b0 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c188:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c18a:	4558      	cmp	r0, fp
 800c18c:	bf8c      	ite	hi
 800c18e:	2100      	movhi	r1, #0
 800c190:	2101      	movls	r1, #1
 800c192:	455f      	cmp	r7, fp
 800c194:	bf38      	it	cc
 800c196:	2100      	movcc	r1, #0
 800c198:	2900      	cmp	r1, #0
 800c19a:	f000 81b0 	beq.w	800c4fe <BSP_I2C4_Init+0x6be>
 800c19e:	4556      	cmp	r6, sl
 800c1a0:	d08e      	beq.n	800c0c0 <BSP_I2C4_Init+0x280>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c1a2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c1a6:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c1a8:	46ce      	mov	lr, r9
 800c1aa:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
 800c1ae:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c1b2:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c1b4:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c1b6:	f04f 020e 	mov.w	r2, #14
 800c1ba:	608a      	str	r2, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c1bc:	f200 8094 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c1c0:	46b2      	mov	sl, r6
 800c1c2:	e77d      	b.n	800c0c0 <BSP_I2C4_Init+0x280>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800c1c4:	9a05      	ldr	r2, [sp, #20]
 800c1c6:	4661      	mov	r1, ip
 800c1c8:	9807      	ldr	r0, [sp, #28]
 800c1ca:	f109 0914 	add.w	r9, r9, #20
 800c1ce:	3201      	adds	r2, #1
 800c1d0:	4282      	cmp	r2, r0
 800c1d2:	9205      	str	r2, [sp, #20]
 800c1d4:	e9dd c409 	ldrd	ip, r4, [sp, #36]	@ 0x24
 800c1d8:	e9dd e30b 	ldrd	lr, r3, [sp, #44]	@ 0x2c
 800c1dc:	f040 80a5 	bne.w	800c32a <BSP_I2C4_Init+0x4ea>
        if (idx < I2C_VALID_TIMING_NBR)
 800c1e0:	9b00      	ldr	r3, [sp, #0]
 800c1e2:	9c08      	ldr	r4, [sp, #32]
 800c1e4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1e6:	d817      	bhi.n	800c218 <BSP_I2C4_Init+0x3d8>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800c1e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c1ec:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 800c1f0:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800c1f4:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800c1f6:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800c1f8:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800c1fa:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800c1fe:	f400 0070 	and.w	r0, r0, #15728640	@ 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800c202:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800c206:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800c208:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800c20a:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800c20c:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800c210:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800c212:	430b      	orrs	r3, r1
 800c214:	ea43 0402 	orr.w	r4, r3, r2
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800c218:	4621      	mov	r1, r4
 800c21a:	48c5      	ldr	r0, [pc, #788]	@ (800c530 <BSP_I2C4_Init+0x6f0>)
 800c21c:	f7ff fdf0 	bl	800be00 <MX_I2C4_Init>
 800c220:	2800      	cmp	r0, #0
 800c222:	f43f ae16 	beq.w	800be52 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 800c226:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800c22a:	e613      	b.n	800be54 <BSP_I2C4_Init+0x14>
            if(presc != prev_presc)
 800c22c:	42bd      	cmp	r5, r7
 800c22e:	bf8c      	ite	hi
 800c230:	2100      	movhi	r1, #0
 800c232:	2101      	movls	r1, #1
 800c234:	4285      	cmp	r5, r0
 800c236:	bf38      	it	cc
 800c238:	2100      	movcc	r1, #0
 800c23a:	2900      	cmp	r1, #0
 800c23c:	f000 80d5 	beq.w	800c3ea <BSP_I2C4_Init+0x5aa>
 800c240:	4556      	cmp	r6, sl
 800c242:	f43f af61 	beq.w	800c108 <BSP_I2C4_Init+0x2c8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c246:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c24a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c24c:	f04f 0e01 	mov.w	lr, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c250:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c254:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c256:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c25a:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c25e:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c260:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c262:	d841      	bhi.n	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c264:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c266:	4556      	cmp	r6, sl
 800c268:	d08f      	beq.n	800c18a <BSP_I2C4_Init+0x34a>
 800c26a:	9908      	ldr	r1, [sp, #32]
 800c26c:	2900      	cmp	r1, #0
 800c26e:	f000 80d4 	beq.w	800c41a <BSP_I2C4_Init+0x5da>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c272:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c276:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c278:	f04f 0e05 	mov.w	lr, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c27c:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c280:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c282:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c286:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c28a:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c28c:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c28e:	d82b      	bhi.n	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c290:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c292:	4556      	cmp	r6, sl
 800c294:	f43f af79 	beq.w	800c18a <BSP_I2C4_Init+0x34a>
 800c298:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c29a:	2900      	cmp	r1, #0
 800c29c:	f000 80d5 	beq.w	800c44a <BSP_I2C4_Init+0x60a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c2a0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c2a4:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c2a6:	2409      	movs	r4, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c2a8:	46ce      	mov	lr, r9
 800c2aa:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c2ae:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c2b0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c2b4:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c2b6:	608c      	str	r4, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c2b8:	d816      	bhi.n	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c2ba:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c2bc:	4556      	cmp	r6, sl
 800c2be:	f43f af64 	beq.w	800c18a <BSP_I2C4_Init+0x34a>
 800c2c2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c2c4:	2900      	cmp	r1, #0
 800c2c6:	f43f af60 	beq.w	800c18a <BSP_I2C4_Init+0x34a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c2ca:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c2ce:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c2d0:	46ce      	mov	lr, r9
 800c2d2:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
 800c2d6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c2da:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c2dc:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c2de:	f04f 020d 	mov.w	r2, #13
 800c2e2:	608a      	str	r2, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c2e4:	f67f af6c 	bls.w	800c1c0 <BSP_I2C4_Init+0x380>
 800c2e8:	4a92      	ldr	r2, [pc, #584]	@ (800c534 <BSP_I2C4_Init+0x6f4>)
 800c2ea:	9c02      	ldr	r4, [sp, #8]
 800c2ec:	9903      	ldr	r1, [sp, #12]
 800c2ee:	9307      	str	r3, [sp, #28]
 800c2f0:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800c2f2:	f640 0234 	movw	r2, #2100	@ 0x834
 800c2f6:	f101 0332 	add.w	r3, r1, #50	@ 0x32
 800c2fa:	f240 2657 	movw	r6, #599	@ 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c2fe:	2000      	movs	r0, #0
 800c300:	1a52      	subs	r2, r2, r1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800c302:	469c      	mov	ip, r3
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c304:	9005      	str	r0, [sp, #20]
 800c306:	f640 1bc4 	movw	fp, #2500	@ 0x9c4
 800c30a:	1ad5      	subs	r5, r2, r3
 800c30c:	9a01      	ldr	r2, [sp, #4]
 800c30e:	f04f 30ff 	mov.w	r0, #4294967295
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800c312:	460b      	mov	r3, r1
 800c314:	4296      	cmp	r6, r2
 800c316:	9408      	str	r4, [sp, #32]
 800c318:	f8df 921c 	ldr.w	r9, [pc, #540]	@ 800c538 <BSP_I2C4_Init+0x6f8>
 800c31c:	f240 4a12 	movw	sl, #1042	@ 0x412
 800c320:	bf38      	it	cc
 800c322:	4616      	movcc	r6, r2
 800c324:	462c      	mov	r4, r5
 800c326:	4611      	mov	r1, r2
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c328:	9000      	str	r0, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800c32a:	f8d9 0000 	ldr.w	r0, [r9]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800c32e:	2500      	movs	r5, #0
 800c330:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800c334:	fb00 1001 	mla	r0, r0, r1, r1
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800c338:	930c      	str	r3, [sp, #48]	@ 0x30
 800c33a:	18c2      	adds	r2, r0, r3
 800c33c:	eb00 070c 	add.w	r7, r0, ip
 800c340:	eba4 0840 	sub.w	r8, r4, r0, lsl #1
 800c344:	468c      	mov	ip, r1
 800c346:	f6a2 0234 	subw	r2, r2, #2100	@ 0x834
 800c34a:	e9cd 4e0a 	strd	r4, lr, [sp, #40]	@ 0x28
 800c34e:	9206      	str	r2, [sp, #24]
 800c350:	e006      	b.n	800c360 <BSP_I2C4_Init+0x520>
 800c352:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800c356:	4407      	add	r7, r0
 800c358:	eba8 0800 	sub.w	r8, r8, r0
 800c35c:	f43f af32 	beq.w	800c1c4 <BSP_I2C4_Init+0x384>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800c360:	f240 5314 	movw	r3, #1300	@ 0x514
 800c364:	4629      	mov	r1, r5
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c366:	3501      	adds	r5, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800c368:	429f      	cmp	r7, r3
 800c36a:	d9f2      	bls.n	800c352 <BSP_I2C4_Init+0x512>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c36c:	f1a7 0332 	sub.w	r3, r7, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800c370:	ebbc 0f93 	cmp.w	ip, r3, lsr #2
 800c374:	d2ed      	bcs.n	800c352 <BSP_I2C4_Init+0x512>
 800c376:	f640 0e34 	movw	lr, #2100	@ 0x834
 800c37a:	4644      	mov	r4, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800c37c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	ebae 0e03 	sub.w	lr, lr, r3
 800c386:	9b06      	ldr	r3, [sp, #24]
 800c388:	9704      	str	r7, [sp, #16]
 800c38a:	443b      	add	r3, r7
 800c38c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c390:	460f      	mov	r7, r1
 800c392:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800c396:	46b4      	mov	ip, r6
 800c398:	e005      	b.n	800c3a6 <BSP_I2C4_Init+0x566>
 800c39a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800c39e:	4403      	add	r3, r0
 800c3a0:	eba4 0400 	sub.w	r4, r4, r0
 800c3a4:	d01a      	beq.n	800c3dc <BSP_I2C4_Init+0x59c>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800c3a6:	eb0e 0103 	add.w	r1, lr, r3
 800c3aa:	4616      	mov	r6, r2
 800c3ac:	f203 15a1 	addw	r5, r3, #417	@ 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800c3b0:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800c3b2:	4561      	cmp	r1, ip
 800c3b4:	d9f1      	bls.n	800c39a <BSP_I2C4_Init+0x55a>
 800c3b6:	4555      	cmp	r5, sl
 800c3b8:	d8ef      	bhi.n	800c39a <BSP_I2C4_Init+0x55a>
            if (error < 0)
 800c3ba:	ea33 0123 	bics.w	r1, r3, r3, asr #32
 800c3be:	bf28      	it	cs
 800c3c0:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
 800c3c2:	458b      	cmp	fp, r1
 800c3c4:	d9e9      	bls.n	800c39a <BSP_I2C4_Init+0x55a>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800c3c6:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
              prev_error = (uint32_t)error;
 800c3ca:	468b      	mov	fp, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800c3cc:	4403      	add	r3, r0
 800c3ce:	eba4 0400 	sub.w	r4, r4, r0
              ret = count;
 800c3d2:	f8cd 8000 	str.w	r8, [sp]
              I2c_valid_timing[count].sclh = sclh;
 800c3d6:	e9c9 6703 	strd	r6, r7, [r9, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800c3da:	d1e4      	bne.n	800c3a6 <BSP_I2C4_Init+0x566>
 800c3dc:	4666      	mov	r6, ip
 800c3de:	9d01      	ldr	r5, [sp, #4]
 800c3e0:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c3e4:	e9dd 8703 	ldrd	r8, r7, [sp, #12]
 800c3e8:	e7b3      	b.n	800c352 <BSP_I2C4_Init+0x512>
            if(presc != prev_presc)
 800c3ea:	4556      	cmp	r6, sl
 800c3ec:	f43f ae8c 	beq.w	800c108 <BSP_I2C4_Init+0x2c8>
 800c3f0:	9905      	ldr	r1, [sp, #20]
 800c3f2:	2900      	cmp	r1, #0
 800c3f4:	f43f ae88 	beq.w	800c108 <BSP_I2C4_Init+0x2c8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c3f8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c3fc:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c3fe:	f04f 0e02 	mov.w	lr, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c402:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c406:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c408:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c40c:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c410:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c412:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c414:	f63f af68 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c418:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c41a:	4556      	cmp	r6, sl
 800c41c:	f43f aeb5 	beq.w	800c18a <BSP_I2C4_Init+0x34a>
 800c420:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c422:	2900      	cmp	r1, #0
 800c424:	f43f ae88 	beq.w	800c138 <BSP_I2C4_Init+0x2f8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c428:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c42c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c42e:	f04f 0e06 	mov.w	lr, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c432:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c436:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c438:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c43c:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c440:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c442:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c444:	f63f af50 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c448:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c44a:	4556      	cmp	r6, sl
 800c44c:	f43f ae9d 	beq.w	800c18a <BSP_I2C4_Init+0x34a>
 800c450:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c452:	2900      	cmp	r1, #0
 800c454:	f43f ae84 	beq.w	800c160 <BSP_I2C4_Init+0x320>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c458:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c45c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c45e:	240a      	movs	r4, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c460:	46ce      	mov	lr, r9
 800c462:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c466:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c468:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c46c:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c46e:	608c      	str	r4, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c470:	f67f ae8a 	bls.w	800c188 <BSP_I2C4_Init+0x348>
 800c474:	e738      	b.n	800c2e8 <BSP_I2C4_Init+0x4a8>
            if(presc != prev_presc)
 800c476:	45b2      	cmp	sl, r6
 800c478:	f43f aef5 	beq.w	800c266 <BSP_I2C4_Init+0x426>
 800c47c:	9907      	ldr	r1, [sp, #28]
 800c47e:	2900      	cmp	r1, #0
 800c480:	f43f aef1 	beq.w	800c266 <BSP_I2C4_Init+0x426>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c484:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c488:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c48a:	f04f 0e04 	mov.w	lr, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c48e:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c492:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c494:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c498:	f8c1 e008 	str.w	lr, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c49c:	46ce      	mov	lr, r9
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c49e:	604a      	str	r2, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c4a0:	f63f af22 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c4a4:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c4a6:	4556      	cmp	r6, sl
 800c4a8:	f43f ae6f 	beq.w	800c18a <BSP_I2C4_Init+0x34a>
 800c4ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4ae:	2900      	cmp	r1, #0
 800c4b0:	f43f aeef 	beq.w	800c292 <BSP_I2C4_Init+0x452>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c4b4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c4b8:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c4ba:	2408      	movs	r4, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c4bc:	46ce      	mov	lr, r9
 800c4be:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c4c2:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c4c4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c4c8:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c4ca:	608c      	str	r4, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c4cc:	f63f af0c 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c4d0:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c4d2:	4556      	cmp	r6, sl
 800c4d4:	f43f ae59 	beq.w	800c18a <BSP_I2C4_Init+0x34a>
 800c4d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c4da:	2900      	cmp	r1, #0
 800c4dc:	f43f aeee 	beq.w	800c2bc <BSP_I2C4_Init+0x47c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c4e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800c4e4:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c4e6:	240c      	movs	r4, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c4e8:	46ce      	mov	lr, r9
 800c4ea:	f849 6021 	str.w	r6, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c4ee:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c4f0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c4f4:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c4f6:	608c      	str	r4, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c4f8:	f63f aef6 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c4fc:	46b2      	mov	sl, r6
            if(presc != prev_presc)
 800c4fe:	4556      	cmp	r6, sl
 800c500:	f43f adde 	beq.w	800c0c0 <BSP_I2C4_Init+0x280>
 800c504:	9906      	ldr	r1, [sp, #24]
 800c506:	2900      	cmp	r1, #0
 800c508:	f43f adda 	beq.w	800c0c0 <BSP_I2C4_Init+0x280>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c50c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800c510:	f8df e024 	ldr.w	lr, [pc, #36]	@ 800c538 <BSP_I2C4_Init+0x6f8>
              I2c_valid_timing_nbr ++;
 800c514:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800c516:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
 800c51a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c51e:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800c520:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800c522:	f04f 020f 	mov.w	r2, #15
 800c526:	608a      	str	r2, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c528:	f63f aede 	bhi.w	800c2e8 <BSP_I2C4_Init+0x4a8>
              prev_presc = presc;
 800c52c:	46b2      	mov	sl, r6
 800c52e:	e5c7      	b.n	800c0c0 <BSP_I2C4_Init+0x280>
 800c530:	240002a0 	.word	0x240002a0
 800c534:	240002f4 	.word	0x240002f4
 800c538:	240002f8 	.word	0x240002f8
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800c53c:	9a01      	ldr	r2, [sp, #4]
 800c53e:	3601      	adds	r6, #1
 800c540:	4415      	add	r5, r2
 800c542:	2e10      	cmp	r6, #16
 800c544:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c546:	4493      	add	fp, r2
 800c548:	f47f ad02 	bne.w	800bf50 <BSP_I2C4_Init+0x110>
 800c54c:	4a05      	ldr	r2, [pc, #20]	@ (800c564 <BSP_I2C4_Init+0x724>)
 800c54e:	9c02      	ldr	r4, [sp, #8]
 800c550:	9903      	ldr	r1, [sp, #12]
 800c552:	9307      	str	r3, [sp, #28]
 800c554:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800c556:	2b00      	cmp	r3, #0
 800c558:	f43f ae5e 	beq.w	800c218 <BSP_I2C4_Init+0x3d8>
 800c55c:	f8df e008 	ldr.w	lr, [pc, #8]	@ 800c568 <BSP_I2C4_Init+0x728>
 800c560:	e6c7      	b.n	800c2f2 <BSP_I2C4_Init+0x4b2>
 800c562:	bf00      	nop
 800c564:	240002f4 	.word	0x240002f4
 800c568:	240002f8 	.word	0x240002f8

0800c56c <BSP_I2C4_WriteReg>:
{
 800c56c:	b530      	push	{r4, r5, lr}
 800c56e:	4614      	mov	r4, r2
 800c570:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800c572:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 800c576:	460a      	mov	r2, r1
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	4601      	mov	r1, r0
 800c57c:	2301      	movs	r3, #1
 800c57e:	4809      	ldr	r0, [pc, #36]	@ (800c5a4 <BSP_I2C4_WriteReg+0x38>)
 800c580:	9502      	str	r5, [sp, #8]
 800c582:	9400      	str	r4, [sp, #0]
 800c584:	f002 fbf8 	bl	800ed78 <HAL_I2C_Mem_Write>
 800c588:	b908      	cbnz	r0, 800c58e <BSP_I2C4_WriteReg+0x22>
}
 800c58a:	b005      	add	sp, #20
 800c58c:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800c58e:	4805      	ldr	r0, [pc, #20]	@ (800c5a4 <BSP_I2C4_WriteReg+0x38>)
 800c590:	f002 fea8 	bl	800f2e4 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800c594:	2804      	cmp	r0, #4
 800c596:	bf14      	ite	ne
 800c598:	f06f 0003 	mvnne.w	r0, #3
 800c59c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 800c5a0:	e7f3      	b.n	800c58a <BSP_I2C4_WriteReg+0x1e>
 800c5a2:	bf00      	nop
 800c5a4:	240002a0 	.word	0x240002a0

0800c5a8 <BSP_I2C4_ReadReg>:
{
 800c5a8:	b530      	push	{r4, r5, lr}
 800c5aa:	4614      	mov	r4, r2
 800c5ac:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800c5ae:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 800c5b2:	460a      	mov	r2, r1
 800c5b4:	9301      	str	r3, [sp, #4]
 800c5b6:	4601      	mov	r1, r0
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	4809      	ldr	r0, [pc, #36]	@ (800c5e0 <BSP_I2C4_ReadReg+0x38>)
 800c5bc:	9502      	str	r5, [sp, #8]
 800c5be:	9400      	str	r4, [sp, #0]
 800c5c0:	f002 fd48 	bl	800f054 <HAL_I2C_Mem_Read>
 800c5c4:	b908      	cbnz	r0, 800c5ca <BSP_I2C4_ReadReg+0x22>
}
 800c5c6:	b005      	add	sp, #20
 800c5c8:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800c5ca:	4805      	ldr	r0, [pc, #20]	@ (800c5e0 <BSP_I2C4_ReadReg+0x38>)
 800c5cc:	f002 fe8a 	bl	800f2e4 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800c5d0:	2804      	cmp	r0, #4
 800c5d2:	bf14      	ite	ne
 800c5d4:	f06f 0003 	mvnne.w	r0, #3
 800c5d8:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 800c5dc:	e7f3      	b.n	800c5c6 <BSP_I2C4_ReadReg+0x1e>
 800c5de:	bf00      	nop
 800c5e0:	240002a0 	.word	0x240002a0

0800c5e4 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800c5e4:	f001 bc62 	b.w	800deac <HAL_GetTick>

0800c5e8 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c5e8:	b918      	cbnz	r0, 800c5f2 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800c5ea:	4b03      	ldr	r3, [pc, #12]	@ (800c5f8 <BSP_LCD_GetPixelFormat+0x10>)
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	600b      	str	r3, [r1, #0]
 800c5f0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c5f2:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c5f6:	4770      	bx	lr
 800c5f8:	24000cfc 	.word	0x24000cfc

0800c5fc <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c5fc:	b910      	cbnz	r0, 800c604 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800c5fe:	4b03      	ldr	r3, [pc, #12]	@ (800c60c <BSP_LCD_SetActiveLayer+0x10>)
 800c600:	6099      	str	r1, [r3, #8]
 800c602:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c604:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	24000cfc 	.word	0x24000cfc

0800c610 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c610:	b918      	cbnz	r0, 800c61a <BSP_LCD_GetXSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800c612:	4b03      	ldr	r3, [pc, #12]	@ (800c620 <BSP_LCD_GetXSize+0x10>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	600b      	str	r3, [r1, #0]
 800c618:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c61a:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c61e:	4770      	bx	lr
 800c620:	24000cfc 	.word	0x24000cfc

0800c624 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c624:	b918      	cbnz	r0, 800c62e <BSP_LCD_GetYSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800c626:	4b03      	ldr	r3, [pc, #12]	@ (800c634 <BSP_LCD_GetYSize+0x10>)
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	600b      	str	r3, [r1, #0]
 800c62c:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c62e:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c632:	4770      	bx	lr
 800c634:	24000cfc 	.word	0x24000cfc

0800c638 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800c638:	b410      	push	{r4}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c63a:	4c0f      	ldr	r4, [pc, #60]	@ (800c678 <BSP_LCD_ReadPixel+0x40>)
 800c63c:	eb04 1c40 	add.w	ip, r4, r0, lsl #5
 800c640:	0140      	lsls	r0, r0, #5
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c642:	5820      	ldr	r0, [r4, r0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c644:	f8dc 4008 	ldr.w	r4, [ip, #8]
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c648:	fb00 1102 	mla	r1, r0, r2, r1
 800c64c:	2234      	movs	r2, #52	@ 0x34
 800c64e:	480b      	ldr	r0, [pc, #44]	@ (800c67c <BSP_LCD_ReadPixel+0x44>)
 800c650:	fb02 0004 	mla	r0, r2, r4, r0
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c654:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c656:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c658:	b934      	cbnz	r4, 800c668 <BSP_LCD_ReadPixel+0x30>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c65a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
  }

  return BSP_ERROR_NONE;
}
 800c65e:	2000      	movs	r0, #0
 800c660:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c668:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
}
 800c66c:	2000      	movs	r0, #0
 800c66e:	f85d 4b04 	ldr.w	r4, [sp], #4
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800c672:	b292      	uxth	r2, r2
 800c674:	601a      	str	r2, [r3, #0]
}
 800c676:	4770      	bx	lr
 800c678:	24000cfc 	.word	0x24000cfc
 800c67c:	24000d1c 	.word	0x24000d1c

0800c680 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800c680:	b410      	push	{r4}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c682:	4c0e      	ldr	r4, [pc, #56]	@ (800c6bc <BSP_LCD_WritePixel+0x3c>)
 800c684:	eb04 1c40 	add.w	ip, r4, r0, lsl #5
 800c688:	0140      	lsls	r0, r0, #5
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c68a:	5820      	ldr	r0, [r4, r0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c68c:	f8dc 4008 	ldr.w	r4, [ip, #8]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c690:	fb00 1102 	mla	r1, r0, r2, r1
 800c694:	2234      	movs	r2, #52	@ 0x34
 800c696:	480a      	ldr	r0, [pc, #40]	@ (800c6c0 <BSP_LCD_WritePixel+0x40>)
 800c698:	fb02 0004 	mla	r0, r2, r4, r0
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c69c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c69e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c6a0:	b92c      	cbnz	r4, 800c6ae <BSP_LCD_WritePixel+0x2e>
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
  }

  return BSP_ERROR_NONE;
}
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c6a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800c6ac:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c6ae:	b29b      	uxth	r3, r3
}
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c6b6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
}
 800c6ba:	4770      	bx	lr
 800c6bc:	24000cfc 	.word	0x24000cfc
 800c6c0:	24000d1c 	.word	0x24000d1c

0800c6c4 <BSP_LCD_DrawBitmap>:
{
 800c6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c6c8:	4e3d      	ldr	r6, [pc, #244]	@ (800c7c0 <BSP_LCD_DrawBitmap+0xfc>)
 800c6ca:	0145      	lsls	r5, r0, #5
{
 800c6cc:	461f      	mov	r7, r3
 800c6ce:	4696      	mov	lr, r2
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c6d0:	eb06 1040 	add.w	r0, r6, r0, lsl #5
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c6d4:	f8d3 400a 	ldr.w	r4, [r3, #10]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c6d8:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 800c6dc:	4b39      	ldr	r3, [pc, #228]	@ (800c7c4 <BSP_LCD_DrawBitmap+0x100>)
 800c6de:	6882      	ldr	r2, [r0, #8]
{
 800c6e0:	b085      	sub	sp, #20
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800c6e2:	f8b7 901c 	ldrh.w	r9, [r7, #28]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c6e6:	fb0c 3302 	mla	r3, ip, r2, r3
 800c6ea:	5972      	ldr	r2, [r6, r5]
 800c6ec:	6900      	ldr	r0, [r0, #16]
 800c6ee:	fb02 110e 	mla	r1, r2, lr, r1
  if ((bit_pixel/8U) == 4U)
 800c6f2:	f1a9 0220 	sub.w	r2, r9, #32
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c6f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  if ((bit_pixel/8U) == 4U)
 800c6f8:	2a07      	cmp	r2, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c6fa:	f8d7 a016 	ldr.w	sl, [r7, #22]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c6fe:	fb00 3b01 	mla	fp, r0, r1, r3
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c702:	f8d7 3012 	ldr.w	r3, [r7, #18]
  if ((bit_pixel/8U) == 4U)
 800c706:	d957      	bls.n	800c7b8 <BSP_LCD_DrawBitmap+0xf4>
  else if ((bit_pixel/8U) == 2U)
 800c708:	f1a9 0210 	sub.w	r2, r9, #16
    input_color_mode = DMA2D_INPUT_RGB565;
 800c70c:	2a07      	cmp	r2, #7
 800c70e:	bf8c      	ite	hi
 800c710:	f04f 0c01 	movhi.w	ip, #1
 800c714:	f04f 0c02 	movls.w	ip, #2
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800c718:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800c71c:	f10a 32ff 	add.w	r2, sl, #4294967295
 800c720:	fb03 f909 	mul.w	r9, r3, r9
 800c724:	fb09 4402 	mla	r4, r9, r2, r4
 800c728:	4427      	add	r7, r4
  for(index=0; index < height; index++)
 800c72a:	f1ba 0f00 	cmp.w	sl, #0
 800c72e:	d03f      	beq.n	800c7b0 <BSP_LCD_DrawBitmap+0xec>
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 800c730:	442e      	add	r6, r5
    pbmp -= width*(bit_pixel/8U);
 800c732:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 800c736:	f04f 0800 	mov.w	r8, #0
 800c73a:	4c23      	ldr	r4, [pc, #140]	@ (800c7c8 <BSP_LCD_DrawBitmap+0x104>)
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;

  hlcd_dma2d.Instance = DMA2D;
 800c73c:	4665      	mov	r5, ip
 800c73e:	9303      	str	r3, [sp, #12]
 800c740:	e008      	b.n	800c754 <BSP_LCD_DrawBitmap+0x90>
  for(index=0; index < height; index++)
 800c742:	f108 0801 	add.w	r8, r8, #1
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800c746:	6833      	ldr	r3, [r6, #0]
 800c748:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800c74a:	444f      	add	r7, r9
  for(index=0; index < height; index++)
 800c74c:	45c2      	cmp	sl, r8
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800c74e:	fb02 bb03 	mla	fp, r2, r3, fp
  for(index=0; index < height; index++)
 800c752:	d02d      	beq.n	800c7b0 <BSP_LCD_DrawBitmap+0xec>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c754:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800c756:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  hlcd_dma2d.Init.OutputOffset = 0;
 800c75a:	2200      	movs	r2, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800c75c:	21ff      	movs	r1, #255	@ 0xff
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c75e:	f1a3 0302 	sub.w	r3, r3, #2
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800c762:	6060      	str	r0, [r4, #4]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c764:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = 0;
 800c766:	60e2      	str	r2, [r4, #12]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c768:	fab3 f383 	clz	r3, r3
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800c76c:	64e2      	str	r2, [r4, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800c76e:	6521      	str	r1, [r4, #80]	@ 0x50
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c770:	095b      	lsrs	r3, r3, #5
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800c772:	64a5      	str	r5, [r4, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800c774:	6462      	str	r2, [r4, #68]	@ 0x44
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c776:	005b      	lsls	r3, r3, #1
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800c778:	60a3      	str	r3, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800c77a:	4b14      	ldr	r3, [pc, #80]	@ (800c7cc <BSP_LCD_DrawBitmap+0x108>)
 800c77c:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c77e:	f001 fc19 	bl	800dfb4 <HAL_DMA2D_Init>
 800c782:	2800      	cmp	r0, #0
 800c784:	d1dd      	bne.n	800c742 <BSP_LCD_DrawBitmap+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800c786:	2101      	movs	r1, #1
 800c788:	4620      	mov	r0, r4
 800c78a:	f001 fd59 	bl	800e240 <HAL_DMA2D_ConfigLayer>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d1d7      	bne.n	800c742 <BSP_LCD_DrawBitmap+0x7e>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800c792:	2301      	movs	r3, #1
 800c794:	465a      	mov	r2, fp
 800c796:	4639      	mov	r1, r7
 800c798:	480b      	ldr	r0, [pc, #44]	@ (800c7c8 <BSP_LCD_DrawBitmap+0x104>)
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	f001 fc47 	bl	800e030 <HAL_DMA2D_Start>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d1cd      	bne.n	800c742 <BSP_LCD_DrawBitmap+0x7e>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800c7a6:	2132      	movs	r1, #50	@ 0x32
 800c7a8:	4807      	ldr	r0, [pc, #28]	@ (800c7c8 <BSP_LCD_DrawBitmap+0x104>)
 800c7aa:	f001 fc9b 	bl	800e0e4 <HAL_DMA2D_PollForTransfer>
 800c7ae:	e7c8      	b.n	800c742 <BSP_LCD_DrawBitmap+0x7e>
}
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	b005      	add	sp, #20
 800c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800c7b8:	f04f 0c00 	mov.w	ip, #0
 800c7bc:	e7ac      	b.n	800c718 <BSP_LCD_DrawBitmap+0x54>
 800c7be:	bf00      	nop
 800c7c0:	24000cfc 	.word	0x24000cfc
 800c7c4:	24000d1c 	.word	0x24000d1c
 800c7c8:	24000dc4 	.word	0x24000dc4
 800c7cc:	52001000 	.word	0x52001000

0800c7d0 <BSP_LCD_DrawVLine>:
{
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c7d6:	4932      	ldr	r1, [pc, #200]	@ (800c8a0 <BSP_LCD_DrawVLine+0xd0>)
{
 800c7d8:	461e      	mov	r6, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c7da:	0144      	lsls	r4, r0, #5
 800c7dc:	eb01 1040 	add.w	r0, r1, r0, lsl #5
{
 800c7e0:	4692      	mov	sl, r2
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800c7e2:	eb02 0c06 	add.w	ip, r2, r6
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c7e6:	4b2f      	ldr	r3, [pc, #188]	@ (800c8a4 <BSP_LCD_DrawVLine+0xd4>)
 800c7e8:	6882      	ldr	r2, [r0, #8]
 800c7ea:	f04f 0e34 	mov.w	lr, #52	@ 0x34
 800c7ee:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
 800c7f2:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c7f4:	fb0e 3302 	mla	r3, lr, r2, r3
 800c7f8:	f851 b004 	ldr.w	fp, [r1, r4]
{
 800c7fc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c7fe:	f8d3 805c 	ldr.w	r8, [r3, #92]	@ 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800c802:	6843      	ldr	r3, [r0, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c804:	1908      	adds	r0, r1, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800c806:	f10b 31ff 	add.w	r1, fp, #4294967295
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800c80a:	459c      	cmp	ip, r3
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c80c:	68c2      	ldr	r2, [r0, #12]
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800c80e:	bf88      	it	hi
 800c810:	eba3 060a 	subhi.w	r6, r3, sl
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c814:	2a02      	cmp	r2, #2
 800c816:	d010      	beq.n	800c83a <BSP_LCD_DrawVLine+0x6a>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800c818:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800c81a:	4c23      	ldr	r4, [pc, #140]	@ (800c8a8 <BSP_LCD_DrawVLine+0xd8>)
  hlcd_dma2d.Instance = DMA2D;
 800c81c:	4b23      	ldr	r3, [pc, #140]	@ (800c8ac <BSP_LCD_DrawVLine+0xdc>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c81e:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800c820:	e9c4 2102 	strd	r2, r1, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800c824:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800c828:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c82c:	f001 fbc2 	bl	800dfb4 <HAL_DMA2D_Init>
 800c830:	b310      	cbz	r0, 800c878 <BSP_LCD_DrawVLine+0xa8>
}
 800c832:	2000      	movs	r0, #0
 800c834:	b003      	add	sp, #12
 800c836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800c83a:	f3c5 1045 	ubfx	r0, r5, #5, #6
 800c83e:	f3c5 24c4 	ubfx	r4, r5, #11, #5
 800c842:	f005 051f 	and.w	r5, r5, #31
 800c846:	eb00 13c0 	add.w	r3, r0, r0, lsl #7
 800c84a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800c84e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c852:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 800c856:	3321      	adds	r3, #33	@ 0x21
 800c858:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800c85c:	3417      	adds	r4, #23
 800c85e:	099b      	lsrs	r3, r3, #6
 800c860:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800c864:	09a4      	lsrs	r4, r4, #6
 800c866:	021b      	lsls	r3, r3, #8
 800c868:	3517      	adds	r5, #23
 800c86a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c86e:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 800c872:	f043 457f 	orr.w	r5, r3, #4278190080	@ 0xff000000
    break;
 800c876:	e7d0      	b.n	800c81a <BSP_LCD_DrawVLine+0x4a>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c878:	fb0a 720b 	mla	r2, sl, fp, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800c87c:	4629      	mov	r1, r5
 800c87e:	4620      	mov	r0, r4
 800c880:	2301      	movs	r3, #1
 800c882:	fb09 8202 	mla	r2, r9, r2, r8
 800c886:	9600      	str	r6, [sp, #0]
 800c888:	f001 fbd2 	bl	800e030 <HAL_DMA2D_Start>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d1d0      	bne.n	800c832 <BSP_LCD_DrawVLine+0x62>
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800c890:	2132      	movs	r1, #50	@ 0x32
 800c892:	4620      	mov	r0, r4
 800c894:	f001 fc26 	bl	800e0e4 <HAL_DMA2D_PollForTransfer>
}
 800c898:	2000      	movs	r0, #0
 800c89a:	b003      	add	sp, #12
 800c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a0:	24000cfc 	.word	0x24000cfc
 800c8a4:	24000d1c 	.word	0x24000d1c
 800c8a8:	24000dc4 	.word	0x24000dc4
 800c8ac:	52001000 	.word	0x52001000

0800c8b0 <BSP_LCD_FillRGBRect>:
{
 800c8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	b083      	sub	sp, #12
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	4696      	mov	lr, r2
 800c8ba:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
  for(i = 0; i < Height; i++)
 800c8be:	b3c2      	cbz	r2, 800c932 <BSP_LCD_FillRGBRect+0x82>
 800c8c0:	b3b9      	cbz	r1, 800c932 <BSP_LCD_FillRGBRect+0x82>
 800c8c2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800c8c6:	eb02 0b0e 	add.w	fp, r2, lr
 800c8ca:	4a22      	ldr	r2, [pc, #136]	@ (800c954 <BSP_LCD_FillRGBRect+0xa4>)
 800c8cc:	4688      	mov	r8, r1
 800c8ce:	f10c 0010 	add.w	r0, ip, #16
 800c8d2:	4e21      	ldr	r6, [pc, #132]	@ (800c958 <BSP_LCD_FillRGBRect+0xa8>)
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c8d4:	4494      	add	ip, r2
 800c8d6:	4402      	add	r2, r0
 800c8d8:	9201      	str	r2, [sp, #4]
    for(j = 0; j < Width; j++)
 800c8da:	2200      	movs	r2, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c8dc:	2534      	movs	r5, #52	@ 0x34
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c8de:	f8dc 0008 	ldr.w	r0, [ip, #8]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c8e2:	f8dc 7000 	ldr.w	r7, [ip]
 800c8e6:	fb05 6000 	mla	r0, r5, r0, r6
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 800c8ea:	6819      	ldr	r1, [r3, #0]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c8ec:	fb07 470e 	mla	r7, r7, lr, r4
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c8f0:	6c85      	ldr	r5, [r0, #72]	@ 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c8f2:	eb07 0a02 	add.w	sl, r7, r2
 800c8f6:	f8d0 905c 	ldr.w	r9, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c8fa:	b1f5      	cbz	r5, 800c93a <BSP_LCD_FillRGBRect+0x8a>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c8fc:	b289      	uxth	r1, r1
    for(j = 0; j < Width; j++)
 800c8fe:	3201      	adds	r2, #1
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c900:	f829 101a 	strh.w	r1, [r9, sl, lsl #1]
    for(j = 0; j < Width; j++)
 800c904:	4542      	cmp	r2, r8
      pdata += Lcd_Ctx[Instance].BppFactor;
 800c906:	f8dc 1010 	ldr.w	r1, [ip, #16]
 800c90a:	440b      	add	r3, r1
    for(j = 0; j < Width; j++)
 800c90c:	d00d      	beq.n	800c92a <BSP_LCD_FillRGBRect+0x7a>
 800c90e:	9901      	ldr	r1, [sp, #4]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c910:	f8d0 a05c 	ldr.w	sl, [r0, #92]	@ 0x5c
 800c914:	f8d1 9000 	ldr.w	r9, [r1]
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 800c918:	6819      	ldr	r1, [r3, #0]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c91a:	18b8      	adds	r0, r7, r2
    for(j = 0; j < Width; j++)
 800c91c:	3201      	adds	r2, #1
      pdata += Lcd_Ctx[Instance].BppFactor;
 800c91e:	444b      	add	r3, r9
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c920:	b289      	uxth	r1, r1
    for(j = 0; j < Width; j++)
 800c922:	4590      	cmp	r8, r2
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800c924:	f82a 1010 	strh.w	r1, [sl, r0, lsl #1]
    for(j = 0; j < Width; j++)
 800c928:	d8f6      	bhi.n	800c918 <BSP_LCD_FillRGBRect+0x68>
  for(i = 0; i < Height; i++)
 800c92a:	f10e 0e01 	add.w	lr, lr, #1
 800c92e:	45de      	cmp	lr, fp
 800c930:	d1d3      	bne.n	800c8da <BSP_LCD_FillRGBRect+0x2a>
}
 800c932:	2000      	movs	r0, #0
 800c934:	b003      	add	sp, #12
 800c936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(j = 0; j < Width; j++)
 800c93a:	3201      	adds	r2, #1
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800c93c:	f849 102a 	str.w	r1, [r9, sl, lsl #2]
      pdata += Lcd_Ctx[Instance].BppFactor;
 800c940:	f8dc 1010 	ldr.w	r1, [ip, #16]
    for(j = 0; j < Width; j++)
 800c944:	4590      	cmp	r8, r2
      pdata += Lcd_Ctx[Instance].BppFactor;
 800c946:	440b      	add	r3, r1
    for(j = 0; j < Width; j++)
 800c948:	d1c8      	bne.n	800c8dc <BSP_LCD_FillRGBRect+0x2c>
  for(i = 0; i < Height; i++)
 800c94a:	f10e 0e01 	add.w	lr, lr, #1
 800c94e:	45de      	cmp	lr, fp
 800c950:	d1c3      	bne.n	800c8da <BSP_LCD_FillRGBRect+0x2a>
 800c952:	e7ee      	b.n	800c932 <BSP_LCD_FillRGBRect+0x82>
 800c954:	24000cfc 	.word	0x24000cfc
 800c958:	24000d1c 	.word	0x24000d1c

0800c95c <BSP_LCD_FillRect>:
{
 800c95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c960:	4690      	mov	r8, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c962:	4a2e      	ldr	r2, [pc, #184]	@ (800ca1c <BSP_LCD_FillRect+0xc0>)
{
 800c964:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c966:	0141      	lsls	r1, r0, #5
 800c968:	eb02 1040 	add.w	r0, r2, r0, lsl #5
{
 800c96c:	461e      	mov	r6, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c96e:	f852 b001 	ldr.w	fp, [r2, r1]
 800c972:	2134      	movs	r1, #52	@ 0x34
 800c974:	6882      	ldr	r2, [r0, #8]
{
 800c976:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c978:	4b29      	ldr	r3, [pc, #164]	@ (800ca20 <BSP_LCD_FillRect+0xc4>)
{
 800c97a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c97c:	fb01 3302 	mla	r3, r1, r2, r3
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800c980:	ebab 0106 	sub.w	r1, fp, r6
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c984:	e9d0 2a03 	ldrd	r2, sl, [r0, #12]
 800c988:	f8d3 905c 	ldr.w	r9, [r3, #92]	@ 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c98c:	2a02      	cmp	r2, #2
 800c98e:	d010      	beq.n	800c9b2 <BSP_LCD_FillRect+0x56>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800c990:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800c992:	4c24      	ldr	r4, [pc, #144]	@ (800ca24 <BSP_LCD_FillRect+0xc8>)
  hlcd_dma2d.Instance = DMA2D;
 800c994:	4b24      	ldr	r3, [pc, #144]	@ (800ca28 <BSP_LCD_FillRect+0xcc>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c996:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800c998:	e9c4 2102 	strd	r2, r1, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800c99c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800c9a0:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c9a4:	f001 fb06 	bl	800dfb4 <HAL_DMA2D_Init>
 800c9a8:	b310      	cbz	r0, 800c9f0 <BSP_LCD_FillRect+0x94>
}
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	b003      	add	sp, #12
 800c9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800c9b2:	f3c5 1045 	ubfx	r0, r5, #5, #6
 800c9b6:	f3c5 24c4 	ubfx	r4, r5, #11, #5
 800c9ba:	f005 051f 	and.w	r5, r5, #31
 800c9be:	eb00 13c0 	add.w	r3, r0, r0, lsl #7
 800c9c2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800c9c6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c9ca:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 800c9ce:	3321      	adds	r3, #33	@ 0x21
 800c9d0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800c9d4:	3417      	adds	r4, #23
 800c9d6:	099b      	lsrs	r3, r3, #6
 800c9d8:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800c9dc:	09a4      	lsrs	r4, r4, #6
 800c9de:	021b      	lsls	r3, r3, #8
 800c9e0:	3517      	adds	r5, #23
 800c9e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c9e6:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 800c9ea:	f043 457f 	orr.w	r5, r3, #4278190080	@ 0xff000000
    break;
 800c9ee:	e7d0      	b.n	800c992 <BSP_LCD_FillRect+0x36>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800c9f0:	fb08 720b 	mla	r2, r8, fp, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800c9f8:	4633      	mov	r3, r6
 800c9fa:	fb0a 9202 	mla	r2, sl, r2, r9
 800c9fe:	4620      	mov	r0, r4
 800ca00:	9500      	str	r5, [sp, #0]
 800ca02:	f001 fb15 	bl	800e030 <HAL_DMA2D_Start>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d1cf      	bne.n	800c9aa <BSP_LCD_FillRect+0x4e>
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800ca0a:	2132      	movs	r1, #50	@ 0x32
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	f001 fb69 	bl	800e0e4 <HAL_DMA2D_PollForTransfer>
}
 800ca12:	2000      	movs	r0, #0
 800ca14:	b003      	add	sp, #12
 800ca16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1a:	bf00      	nop
 800ca1c:	24000cfc 	.word	0x24000cfc
 800ca20:	24000d1c 	.word	0x24000d1c
 800ca24:	24000dc4 	.word	0x24000dc4
 800ca28:	52001000 	.word	0x52001000

0800ca2c <BSP_LCD_DrawHLine>:
{
 800ca2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800ca30:	4c32      	ldr	r4, [pc, #200]	@ (800cafc <BSP_LCD_DrawHLine+0xd0>)
{
 800ca32:	468a      	mov	sl, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800ca34:	0141      	lsls	r1, r0, #5
{
 800ca36:	461e      	mov	r6, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800ca38:	eb04 1040 	add.w	r0, r4, r0, lsl #5
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800ca3c:	eb0a 0c03 	add.w	ip, sl, r3
{
 800ca40:	4617      	mov	r7, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800ca42:	f04f 0e34 	mov.w	lr, #52	@ 0x34
 800ca46:	4a2e      	ldr	r2, [pc, #184]	@ (800cb00 <BSP_LCD_DrawHLine+0xd4>)
{
 800ca48:	b083      	sub	sp, #12
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800ca4a:	6883      	ldr	r3, [r0, #8]
 800ca4c:	f854 b001 	ldr.w	fp, [r4, r1]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca50:	440c      	add	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800ca52:	fb0e 2203 	mla	r2, lr, r3, r2
{
 800ca56:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800ca58:	45e3      	cmp	fp, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800ca5a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800ca5e:	f8d2 805c 	ldr.w	r8, [r2, #92]	@ 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca62:	68e2      	ldr	r2, [r4, #12]
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800ca64:	bf38      	it	cc
 800ca66:	ebab 060a 	subcc.w	r6, fp, sl
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca6a:	2a02      	cmp	r2, #2
 800ca6c:	d011      	beq.n	800ca92 <BSP_LCD_DrawHLine+0x66>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800ca6e:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800ca70:	4c24      	ldr	r4, [pc, #144]	@ (800cb04 <BSP_LCD_DrawHLine+0xd8>)
 800ca72:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800ca76:	6063      	str	r3, [r4, #4]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800ca78:	2300      	movs	r3, #0
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800ca7a:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800ca7c:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800ca7e:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 800ca80:	4b21      	ldr	r3, [pc, #132]	@ (800cb08 <BSP_LCD_DrawHLine+0xdc>)
 800ca82:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800ca84:	f001 fa96 	bl	800dfb4 <HAL_DMA2D_Init>
 800ca88:	b310      	cbz	r0, 800cad0 <BSP_LCD_DrawHLine+0xa4>
}
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	b003      	add	sp, #12
 800ca8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800ca92:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800ca96:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 800ca9a:	f005 051f 	and.w	r5, r5, #31
 800ca9e:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
 800caa2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800caa6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800caaa:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 800caae:	3321      	adds	r3, #33	@ 0x21
 800cab0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800cab4:	3117      	adds	r1, #23
 800cab6:	099b      	lsrs	r3, r3, #6
 800cab8:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800cabc:	0989      	lsrs	r1, r1, #6
 800cabe:	021b      	lsls	r3, r3, #8
 800cac0:	3517      	adds	r5, #23
 800cac2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cac6:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 800caca:	f043 457f 	orr.w	r5, r3, #4278190080	@ 0xff000000
    break;
 800cace:	e7cf      	b.n	800ca70 <BSP_LCD_DrawHLine+0x44>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cad0:	fb07 a20b 	mla	r2, r7, fp, sl
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800cad4:	4629      	mov	r1, r5
 800cad6:	2501      	movs	r5, #1
 800cad8:	4633      	mov	r3, r6
 800cada:	fb09 8202 	mla	r2, r9, r2, r8
 800cade:	4620      	mov	r0, r4
 800cae0:	9500      	str	r5, [sp, #0]
 800cae2:	f001 faa5 	bl	800e030 <HAL_DMA2D_Start>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	d1cf      	bne.n	800ca8a <BSP_LCD_DrawHLine+0x5e>
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800caea:	2132      	movs	r1, #50	@ 0x32
 800caec:	4620      	mov	r0, r4
 800caee:	f001 faf9 	bl	800e0e4 <HAL_DMA2D_PollForTransfer>
}
 800caf2:	2000      	movs	r0, #0
 800caf4:	b003      	add	sp, #12
 800caf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafa:	bf00      	nop
 800cafc:	24000cfc 	.word	0x24000cfc
 800cb00:	24000d1c 	.word	0x24000d1c
 800cb04:	24000dc4 	.word	0x24000dc4
 800cb08:	52001000 	.word	0x52001000

0800cb0c <MX_LTDC_Init>:
{
 800cb0c:	b430      	push	{r4, r5}
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800cb0e:	2400      	movs	r4, #0
 800cb10:	4d0f      	ldr	r5, [pc, #60]	@ (800cb50 <MX_LTDC_Init+0x44>)
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800cb12:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800cb16:	e9c0 5400 	strd	r5, r4, [r0]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800cb1a:	6104      	str	r4, [r0, #16]
  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 800cb1c:	2428      	movs	r4, #40	@ 0x28
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800cb1e:	2509      	movs	r5, #9
  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 800cb20:	6144      	str	r4, [r0, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 800cb22:	242a      	movs	r4, #42	@ 0x2a
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800cb24:	6185      	str	r5, [r0, #24]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 800cb26:	61c4      	str	r4, [r0, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 800cb28:	f101 0435 	add.w	r4, r1, #53	@ 0x35
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 800cb2c:	314a      	adds	r1, #74	@ 0x4a
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 800cb2e:	6244      	str	r4, [r0, #36]	@ 0x24
  hltdc->Init.Backcolor.Blue  = 0xFF;
 800cb30:	f64f 74ff 	movw	r4, #65535	@ 0xffff
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 800cb34:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hltdc->Init.Backcolor.Blue  = 0xFF;
 800cb36:	8684      	strh	r4, [r0, #52]	@ 0x34
  hltdc->Init.Backcolor.Red   = 0xFF;
 800cb38:	f880 4036 	strb.w	r4, [r0, #54]	@ 0x36
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 800cb3c:	240b      	movs	r4, #11
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 800cb3e:	1911      	adds	r1, r2, r4
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 800cb40:	320d      	adds	r2, #13
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 800cb42:	6204      	str	r4, [r0, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 800cb44:	6281      	str	r1, [r0, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 800cb46:	6302      	str	r2, [r0, #48]	@ 0x30
}
 800cb48:	bc30      	pop	{r4, r5}
  return HAL_LTDC_Init(hltdc);
 800cb4a:	f002 bc25 	b.w	800f398 <HAL_LTDC_Init>
 800cb4e:	bf00      	nop
 800cb50:	50001000 	.word	0x50001000

0800cb54 <MX_LTDC_ConfigLayer>:
{
 800cb54:	4613      	mov	r3, r2
 800cb56:	460a      	mov	r2, r1
 800cb58:	b510      	push	{r4, lr}
  pLayerCfg.WindowX1 = Config->X1;
 800cb5a:	e9d3 1400 	ldrd	r1, r4, [r3]
{
 800cb5e:	b08e      	sub	sp, #56	@ 0x38
  pLayerCfg.WindowX0 = Config->X0;
 800cb60:	9101      	str	r1, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800cb62:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowX1 = Config->X1;
 800cb64:	9402      	str	r4, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800cb66:	910b      	str	r1, [sp, #44]	@ 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 800cb68:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
  pLayerCfg.WindowY0 = Config->Y0;
 800cb6c:	9103      	str	r1, [sp, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800cb6e:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 800cb70:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800cb72:	910c      	str	r1, [sp, #48]	@ 0x30
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800cb74:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 800cb76:	e9d3 4304 	ldrd	r4, r3, [r3, #16]
 800cb7a:	930a      	str	r3, [sp, #40]	@ 0x28
  pLayerCfg.Alpha = 255;
 800cb7c:	2300      	movs	r3, #0
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800cb7e:	9405      	str	r4, [sp, #20]
  pLayerCfg.Alpha = 255;
 800cb80:	24ff      	movs	r4, #255	@ 0xff
  pLayerCfg.Backcolor.Blue = 0;
 800cb82:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Red = 0;
 800cb86:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
  pLayerCfg.Alpha = 255;
 800cb8a:	e9cd 4306 	strd	r4, r3, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800cb8e:	2307      	movs	r3, #7
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800cb90:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800cb94:	9309      	str	r3, [sp, #36]	@ 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800cb96:	9408      	str	r4, [sp, #32]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800cb98:	f002 fc6c 	bl	800f474 <HAL_LTDC_ConfigLayer>
}
 800cb9c:	b00e      	add	sp, #56	@ 0x38
 800cb9e:	bd10      	pop	{r4, pc}

0800cba0 <MX_LTDC_ClockConfig>:
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800cba0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800cbd8 <MX_LTDC_ClockConfig+0x38>
{
 800cba4:	b500      	push	{lr}
 800cba6:	b0b1      	sub	sp, #196	@ 0xc4
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 800cba8:	2205      	movs	r2, #5
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800cbaa:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 800cbac:	21a0      	movs	r1, #160	@ 0xa0
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 800cbae:	920a      	str	r2, [sp, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 800cbb0:	2253      	movs	r2, #83	@ 0x53
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800cbb2:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800cbb4:	930c      	str	r3, [sp, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 800cbb6:	910b      	str	r1, [sp, #44]	@ 0x2c
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800cbb8:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 800cbbc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800cbe0 <MX_LTDC_ClockConfig+0x40>
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 800cbc0:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 800cbc4:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800cbc8:	f003 fc98 	bl	80104fc <HAL_RCCEx_PeriphCLKConfig>
}
 800cbcc:	b031      	add	sp, #196	@ 0xc4
 800cbce:	f85d fb04 	ldr.w	pc, [sp], #4
 800cbd2:	bf00      	nop
 800cbd4:	f3af 8000 	nop.w
 800cbd8:	20000000 	.word	0x20000000
	...

0800cbe8 <BSP_LCD_InitEx>:
{
 800cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800cbec:	2901      	cmp	r1, #1
{
 800cbee:	b0a7      	sub	sp, #156	@ 0x9c
 800cbf0:	4698      	mov	r8, r3
  uint32_t ft5336_id = 0;
 800cbf2:	f04f 0300 	mov.w	r3, #0
 800cbf6:	9301      	str	r3, [sp, #4]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800cbf8:	f200 8147 	bhi.w	800ce8a <BSP_LCD_InitEx+0x2a2>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 800cbfc:	f022 0502 	bic.w	r5, r2, #2
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800cc00:	4305      	orrs	r5, r0
 800cc02:	f040 8142 	bne.w	800ce8a <BSP_LCD_InitEx+0x2a2>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800cc06:	2a02      	cmp	r2, #2
 800cc08:	4fa3      	ldr	r7, [pc, #652]	@ (800ce98 <BSP_LCD_InitEx+0x2b0>)
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800cc0a:	4ca4      	ldr	r4, [pc, #656]	@ (800ce9c <BSP_LCD_InitEx+0x2b4>)
    __HAL_RCC_GPIOD_CLK_ENABLE();

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800cc0c:	f04f 0602 	mov.w	r6, #2
      Lcd_Ctx[Instance].BppFactor = 2U;
 800cc10:	bf0a      	itet	eq
 800cc12:	4613      	moveq	r3, r2
 800cc14:	2304      	movne	r3, #4
 800cc16:	4615      	moveq	r5, r2
    Lcd_Ctx[Instance].XSize  = Width;
 800cc18:	f8c7 8000 	str.w	r8, [r7]
    hlcd_dma2d.Instance = DMA2D;
 800cc1c:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 800cecc <BSP_LCD_InitEx+0x2e4>
    gpio_init_structure.Pull      = GPIO_NOPULL;
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800cc20:	f04f 0a0e 	mov.w	sl, #14
    hlcd_dma2d.Instance = DMA2D;
 800cc24:	f8df b2a8 	ldr.w	fp, [pc, #680]	@ 800ced0 <BSP_LCD_InitEx+0x2e8>
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800cc28:	a91c      	add	r1, sp, #112	@ 0x70
 800cc2a:	489d      	ldr	r0, [pc, #628]	@ (800cea0 <BSP_LCD_InitEx+0x2b8>)
    hlcd_dma2d.Instance = DMA2D;
 800cc2c:	f8c9 b000 	str.w	fp, [r9]
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800cc30:	e9c7 2303 	strd	r2, r3, [r7, #12]
    Lcd_Ctx[Instance].YSize  = Height;
 800cc34:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
    hlcd_ltdc.Instance = LTDC;
 800cc36:	4a9b      	ldr	r2, [pc, #620]	@ (800cea4 <BSP_LCD_InitEx+0x2bc>)
    Lcd_Ctx[Instance].YSize  = Height;
 800cc38:	607b      	str	r3, [r7, #4]
    hlcd_ltdc.Instance = LTDC;
 800cc3a:	4b9b      	ldr	r3, [pc, #620]	@ (800cea8 <BSP_LCD_InitEx+0x2c0>)
 800cc3c:	601a      	str	r2, [r3, #0]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800cc3e:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 800cc42:	f042 0208 	orr.w	r2, r2, #8
 800cc46:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
 800cc4a:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 800cc4e:	f002 0208 	and.w	r2, r2, #8
 800cc52:	9203      	str	r2, [sp, #12]
 800cc54:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800cc56:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cc5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cc5e:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800cc62:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cc66:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800cc6a:	9204      	str	r2, [sp, #16]
 800cc6c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800cc6e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cc72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc76:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800cc7a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cc7e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800cc82:	9205      	str	r2, [sp, #20]
 800cc84:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800cc86:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cc8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cc8e:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800cc92:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cc96:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800cc9a:	9206      	str	r2, [sp, #24]
 800cc9c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800cc9e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800cca2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cca6:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800ccaa:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800ccae:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800ccb2:	9207      	str	r2, [sp, #28]
 800ccb4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ccb6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800ccba:	f042 0208 	orr.w	r2, r2, #8
 800ccbe:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800ccc2:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ccc6:	961d      	str	r6, [sp, #116]	@ 0x74
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ccc8:	f002 0208 	and.w	r2, r2, #8
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800cccc:	961f      	str	r6, [sp, #124]	@ 0x7c
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800ccce:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ccd2:	9208      	str	r2, [sp, #32]
 800ccd4:	9a08      	ldr	r2, [sp, #32]
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 800ccd6:	f24d 2203 	movw	r2, #53763	@ 0xd203
 800ccda:	921c      	str	r2, [sp, #112]	@ 0x70
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800ccdc:	2200      	movs	r2, #0
 800ccde:	921e      	str	r2, [sp, #120]	@ 0x78
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800cce0:	f001 fb30 	bl	800e344 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
 800cce4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800cce8:	4870      	ldr	r0, [pc, #448]	@ (800ceac <BSP_LCD_InitEx+0x2c4>)
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800ccea:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
    gpio_init_structure.Pin       = GPIO_PIN_All;
 800ccee:	911c      	str	r1, [sp, #112]	@ 0x70
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800ccf0:	a91c      	add	r1, sp, #112	@ 0x70
 800ccf2:	f001 fb27 	bl	800e344 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800ccf6:	21ff      	movs	r1, #255	@ 0xff
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800ccf8:	486d      	ldr	r0, [pc, #436]	@ (800ceb0 <BSP_LCD_InitEx+0x2c8>)
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800ccfa:	911c      	str	r1, [sp, #112]	@ 0x70
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800ccfc:	a91c      	add	r1, sp, #112	@ 0x70
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800ccfe:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800cd02:	f001 fb1f 	bl	800e344 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800cd06:	2200      	movs	r2, #0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800cd08:	a91c      	add	r1, sp, #112	@ 0x70
 800cd0a:	486a      	ldr	r0, [pc, #424]	@ (800ceb4 <BSP_LCD_InitEx+0x2cc>)
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800cd0c:	921e      	str	r2, [sp, #120]	@ 0x78
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 800cd0e:	f240 2202 	movw	r2, #514	@ 0x202
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800cd12:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 800cd16:	921c      	str	r2, [sp, #112]	@ 0x70
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800cd18:	961d      	str	r6, [sp, #116]	@ 0x74
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800cd1a:	961f      	str	r6, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800cd1c:	f001 fb12 	bl	800e344 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800cd20:	4865      	ldr	r0, [pc, #404]	@ (800ceb8 <BSP_LCD_InitEx+0x2d0>)
 800cd22:	a91c      	add	r1, sp, #112	@ 0x70
    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 800cd24:	ed9f 7b5a 	vldr	d7, [pc, #360]	@ 800ce90 <BSP_LCD_InitEx+0x2a8>
 800cd28:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800cd2c:	f001 fb0a 	bl	800e344 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800cd30:	2201      	movs	r2, #1
 800cd32:	2180      	movs	r1, #128	@ 0x80
 800cd34:	4860      	ldr	r0, [pc, #384]	@ (800ceb8 <BSP_LCD_InitEx+0x2d0>)
 800cd36:	f001 fe3b 	bl	800e9b0 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 800cd3a:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  if(hdma2d->Instance == DMA2D)
 800cd3e:	f8d9 3000 	ldr.w	r3, [r9]
    __HAL_RCC_LTDC_FORCE_RESET();
 800cd42:	f042 0208 	orr.w	r2, r2, #8
  if(hdma2d->Instance == DMA2D)
 800cd46:	455b      	cmp	r3, fp
    __HAL_RCC_LTDC_FORCE_RESET();
 800cd48:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800cd4c:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800cd50:	f022 0208 	bic.w	r2, r2, #8
 800cd54:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  if(hdma2d->Instance == DMA2D)
 800cd58:	d079      	beq.n	800ce4e <BSP_LCD_InitEx+0x266>
      io_comp_ctx.Init    = BSP_I2C4_Init;
 800cd5a:	4b58      	ldr	r3, [pc, #352]	@ (800cebc <BSP_LCD_InitEx+0x2d4>)
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800cd5c:	a910      	add	r1, sp, #64	@ 0x40
      io_comp_ctx.Init    = BSP_I2C4_Init;
 800cd5e:	9310      	str	r3, [sp, #64]	@ 0x40
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 800cd60:	4b57      	ldr	r3, [pc, #348]	@ (800cec0 <BSP_LCD_InitEx+0x2d8>)
 800cd62:	9314      	str	r3, [sp, #80]	@ 0x50
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 800cd64:	2370      	movs	r3, #112	@ 0x70
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800cd66:	eb0d 0003 	add.w	r0, sp, r3
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 800cd6a:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800cd6e:	f7f3 fc73 	bl	8000658 <FT5336_RegisterBusIO>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	f2c0 8086 	blt.w	800ce84 <BSP_LCD_InitEx+0x29c>
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 800cd78:	a81c      	add	r0, sp, #112	@ 0x70
 800cd7a:	a901      	add	r1, sp, #4
 800cd7c:	f7f3 fb62 	bl	8000444 <FT5336_ReadID>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	db7f      	blt.n	800ce84 <BSP_LCD_InitEx+0x29c>
      else if(ft5336_id != FT5336_ID)
 800cd84:	9b01      	ldr	r3, [sp, #4]
 800cd86:	2b51      	cmp	r3, #81	@ 0x51
 800cd88:	d179      	bne.n	800ce7e <BSP_LCD_InitEx+0x296>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800cd8a:	4847      	ldr	r0, [pc, #284]	@ (800cea8 <BSP_LCD_InitEx+0x2c0>)
 800cd8c:	f7ff ff08 	bl	800cba0 <MX_LTDC_ClockConfig>
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d171      	bne.n	800ce78 <BSP_LCD_InitEx+0x290>
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800cd94:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800cd96:	4641      	mov	r1, r8
 800cd98:	4843      	ldr	r0, [pc, #268]	@ (800cea8 <BSP_LCD_InitEx+0x2c0>)
 800cd9a:	f7ff feb7 	bl	800cb0c <MX_LTDC_Init>
 800cd9e:	4606      	mov	r6, r0
 800cda0:	2800      	cmp	r0, #0
 800cda2:	d169      	bne.n	800ce78 <BSP_LCD_InitEx+0x290>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800cda4:	f000 f8c6 	bl	800cf34 <BSP_SDRAM_Init>
 800cda8:	4604      	mov	r4, r0
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d164      	bne.n	800ce78 <BSP_LCD_InitEx+0x290>
      config.Y1          = Height;
 800cdae:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	aa16      	add	r2, sp, #88	@ 0x58
      config.Y0          = 0;
 800cdb4:	9018      	str	r0, [sp, #96]	@ 0x60
      config.Y1          = Height;
 800cdb6:	9319      	str	r3, [sp, #100]	@ 0x64
      config.Address     = LCD_LAYER_0_ADDRESS;
 800cdb8:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
      config.X0          = 0;
 800cdbc:	e9cd 0816 	strd	r0, r8, [sp, #88]	@ 0x58
      config.Address     = LCD_LAYER_0_ADDRESS;
 800cdc0:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800cdc4:	4838      	ldr	r0, [pc, #224]	@ (800cea8 <BSP_LCD_InitEx+0x2c0>)
  LCD_TIMx_CLK_ENABLE();

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800cdc6:	f04f 0801 	mov.w	r8, #1
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 800cdca:	4d3e      	ldr	r5, [pc, #248]	@ (800cec4 <BSP_LCD_InitEx+0x2dc>)
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800cdcc:	f7ff fec2 	bl	800cb54 <MX_LTDC_ConfigLayer>
  htim->Instance = LCD_TIMx;
 800cdd0:	4b3d      	ldr	r3, [pc, #244]	@ (800cec8 <BSP_LCD_InitEx+0x2e0>)
        ret = BSP_ERROR_PERIPH_FAILURE;
 800cdd2:	2800      	cmp	r0, #0
  (void)HAL_TIM_PWM_DeInit(htim);
 800cdd4:	4628      	mov	r0, r5
        ret = BSP_ERROR_PERIPH_FAILURE;
 800cdd6:	bf18      	it	ne
 800cdd8:	f06f 0403 	mvnne.w	r4, #3
  htim->Instance = LCD_TIMx;
 800cddc:	602b      	str	r3, [r5, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 800cdde:	f004 fcd1 	bl	8011784 <HAL_TIM_PWM_DeInit>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800cde2:	4b2e      	ldr	r3, [pc, #184]	@ (800ce9c <BSP_LCD_InitEx+0x2b4>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800cde4:	2102      	movs	r1, #2
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 800cde6:	4832      	ldr	r0, [pc, #200]	@ (800ceb0 <BSP_LCD_InitEx+0x2c8>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800cde8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cdec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cdf0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800cdf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cdf8:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800cdfc:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  LCD_TIMx_CLK_ENABLE();
 800ce00:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800ce04:	430a      	orrs	r2, r1
 800ce06:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800ce0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800ce0e:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  LCD_TIMx_CLK_ENABLE();
 800ce12:	400b      	ands	r3, r1
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 800ce14:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
  LCD_TIMx_CLK_ENABLE();
 800ce18:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 800ce1c:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800ce1e:	e9cd 160c 	strd	r1, r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 800ce22:	a90b      	add	r1, sp, #44	@ 0x2c
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 800ce24:	930f      	str	r3, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 800ce26:	f001 fa8d 	bl	800e344 <HAL_GPIO_Init>

  TIMx_PWM_MspInit(htim);

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 800ce2a:	2304      	movs	r3, #4
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
  htim->Init.ClockDivision     = 0;
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
  htim->Init.RepetitionCounter = 0;
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  (void)HAL_TIM_PWM_Init(htim);
 800ce2c:	4628      	mov	r0, r5
  htim->Init.ClockDivision     = 0;
 800ce2e:	612e      	str	r6, [r5, #16]
  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 800ce30:	606b      	str	r3, [r5, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 800ce32:	f24c 3350 	movw	r3, #50000	@ 0xc350
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 800ce36:	60ae      	str	r6, [r5, #8]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 800ce38:	60eb      	str	r3, [r5, #12]
  htim->Init.RepetitionCounter = 0;
 800ce3a:	e9c5 6605 	strd	r6, r6, [r5, #20]
  (void)HAL_TIM_PWM_Init(htim);
 800ce3e:	f004 fbfd 	bl	801163c <HAL_TIM_PWM_Init>
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 800ce42:	f8c7 8018 	str.w	r8, [r7, #24]
}
 800ce46:	4620      	mov	r0, r4
 800ce48:	b027      	add	sp, #156	@ 0x9c
 800ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800ce4e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800ce52:	f043 0310 	orr.w	r3, r3, #16
 800ce56:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 800ce5a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800ce5e:	f003 0310 	and.w	r3, r3, #16
 800ce62:	9302      	str	r3, [sp, #8]
 800ce64:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800ce66:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800ce68:	f043 0310 	orr.w	r3, r3, #16
 800ce6c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800ce6e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800ce70:	f023 0310 	bic.w	r3, r3, #16
 800ce74:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800ce76:	e770      	b.n	800cd5a <BSP_LCD_InitEx+0x172>
        return BSP_ERROR_PERIPH_FAILURE;
 800ce78:	f06f 0403 	mvn.w	r4, #3
 800ce7c:	e7e3      	b.n	800ce46 <BSP_LCD_InitEx+0x25e>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ce7e:	f06f 0406 	mvn.w	r4, #6
 800ce82:	e7e0      	b.n	800ce46 <BSP_LCD_InitEx+0x25e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ce84:	f06f 0404 	mvn.w	r4, #4
 800ce88:	e7dd      	b.n	800ce46 <BSP_LCD_InitEx+0x25e>
    ret = BSP_ERROR_WRONG_PARAM;
 800ce8a:	f06f 0401 	mvn.w	r4, #1
 800ce8e:	e7da      	b.n	800ce46 <BSP_LCD_InitEx+0x25e>
 800ce90:	00000080 	.word	0x00000080
 800ce94:	00000001 	.word	0x00000001
 800ce98:	24000cfc 	.word	0x24000cfc
 800ce9c:	58024400 	.word	0x58024400
 800cea0:	58022000 	.word	0x58022000
 800cea4:	50001000 	.word	0x50001000
 800cea8:	24000d1c 	.word	0x24000d1c
 800ceac:	58022400 	.word	0x58022400
 800ceb0:	58022800 	.word	0x58022800
 800ceb4:	58021c00 	.word	0x58021c00
 800ceb8:	58020c00 	.word	0x58020c00
 800cebc:	0800be41 	.word	0x0800be41
 800cec0:	0800c5a9 	.word	0x0800c5a9
 800cec4:	24000e30 	.word	0x24000e30
 800cec8:	40010400 	.word	0x40010400
 800cecc:	24000dc4 	.word	0x24000dc4
 800ced0:	52001000 	.word	0x52001000

0800ced4 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800ced4:	b530      	push	{r4, r5, lr}
 800ced6:	b089      	sub	sp, #36	@ 0x24

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800ced8:	6102      	str	r2, [r0, #16]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800ceda:	2200      	movs	r2, #0
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800cedc:	4c13      	ldr	r4, [pc, #76]	@ (800cf2c <MX_SDRAM_BANK2_Init+0x58>)
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800cede:	2540      	movs	r5, #64	@ 0x40
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800cee0:	60c1      	str	r1, [r0, #12]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800cee2:	6082      	str	r2, [r0, #8]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
  sdram_timing.ExitSelfRefreshDelay = 7;
 800cee4:	2307      	movs	r3, #7
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800cee6:	61c2      	str	r2, [r0, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800cee8:	f44f 71c0 	mov.w	r1, #384	@ 0x180
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800ceec:	6282      	str	r2, [r0, #40]	@ 0x28
  sdram_timing.LoadToActiveDelay    = 2;
 800ceee:	2202      	movs	r2, #2
  sdram_timing.ExitSelfRefreshDelay = 7;
 800cef0:	9301      	str	r3, [sp, #4]
  sdram_timing.LoadToActiveDelay    = 2;
 800cef2:	9200      	str	r2, [sp, #0]
  sdram_timing.SelfRefreshTime      = 4;
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 800cef4:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800cef6:	2201      	movs	r2, #1
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800cef8:	6181      	str	r1, [r0, #24]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800cefa:	4669      	mov	r1, sp
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800cefc:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800cefe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800cf02:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800cf04:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800cf08:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
 800cf0c:	2204      	movs	r2, #4
 800cf0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
 800cf12:	2202      	movs	r2, #2
 800cf14:	2302      	movs	r3, #2
 800cf16:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800cf1a:	4b05      	ldr	r3, [pc, #20]	@ (800cf30 <MX_SDRAM_BANK2_Init+0x5c>)
 800cf1c:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800cf1e:	f004 fa33 	bl	8011388 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 800cf22:	3800      	subs	r0, #0
 800cf24:	bf18      	it	ne
 800cf26:	2001      	movne	r0, #1
 800cf28:	b009      	add	sp, #36	@ 0x24
 800cf2a:	bd30      	pop	{r4, r5, pc}
 800cf2c:	24000f0c 	.word	0x24000f0c
 800cf30:	52004140 	.word	0x52004140

0800cf34 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 800cf34:	2800      	cmp	r0, #0
 800cf36:	f040 80cd 	bne.w	800d0d4 <BSP_SDRAM_Init+0x1a0>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800cf3a:	4b69      	ldr	r3, [pc, #420]	@ (800d0e0 <BSP_SDRAM_Init+0x1ac>)
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800cf3c:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 800cf3e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800cf42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
{
 800cf46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf48:	b08d      	sub	sp, #52	@ 0x34
  __HAL_RCC_FMC_CLK_ENABLE();
 800cf4a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800cf4e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800cf52:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800cf54:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf56:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800cf58:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800cf5c:	4c61      	ldr	r4, [pc, #388]	@ (800d0e4 <BSP_SDRAM_Init+0x1b0>)


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800cf5e:	4e62      	ldr	r6, [pc, #392]	@ (800d0e8 <BSP_SDRAM_Init+0x1b4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800cf60:	9200      	str	r2, [sp, #0]
 800cf62:	9a00      	ldr	r2, [sp, #0]
  SDRAM_MDMAx_CLK_ENABLE();
 800cf64:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800cf6e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800cf72:	400a      	ands	r2, r1
 800cf74:	9201      	str	r2, [sp, #4]
 800cf76:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cf78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cf7c:	f042 0208 	orr.w	r2, r2, #8
 800cf80:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800cf84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cf88:	f002 0208 	and.w	r2, r2, #8
 800cf8c:	9202      	str	r2, [sp, #8]
 800cf8e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cf90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cf94:	f042 0210 	orr.w	r2, r2, #16
 800cf98:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800cf9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cfa0:	f002 0210 	and.w	r2, r2, #16
 800cfa4:	9203      	str	r2, [sp, #12]
 800cfa6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800cfa8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cfac:	f042 0220 	orr.w	r2, r2, #32
 800cfb0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800cfb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cfb8:	f002 0220 	and.w	r2, r2, #32
 800cfbc:	9204      	str	r2, [sp, #16]
 800cfbe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cfc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cfc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cfc8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800cfcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cfd0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800cfd4:	9205      	str	r2, [sp, #20]
 800cfd6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cfd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800cfdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cfe0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800cfe4:	220c      	movs	r2, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cfe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800cfea:	9008      	str	r0, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cfec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800cff0:	483e      	ldr	r0, [pc, #248]	@ (800d0ec <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800cff2:	9109      	str	r1, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cff4:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800cff6:	f24c 7303 	movw	r3, #50947	@ 0xc703
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cffa:	9906      	ldr	r1, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800cffc:	a907      	add	r1, sp, #28
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800cffe:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800d000:	e9cd 720a 	strd	r7, r2, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800d004:	f001 f99e 	bl	800e344 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800d008:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800d00c:	a907      	add	r1, sp, #28
 800d00e:	4838      	ldr	r0, [pc, #224]	@ (800d0f0 <BSP_SDRAM_Init+0x1bc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800d010:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800d012:	f001 f997 	bl	800e344 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800d016:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800d01a:	a907      	add	r1, sp, #28
 800d01c:	4835      	ldr	r0, [pc, #212]	@ (800d0f4 <BSP_SDRAM_Init+0x1c0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800d01e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800d020:	f001 f990 	bl	800e344 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800d024:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800d028:	a907      	add	r1, sp, #28
 800d02a:	4833      	ldr	r0, [pc, #204]	@ (800d0f8 <BSP_SDRAM_Init+0x1c4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800d02c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800d02e:	f001 f989 	bl	800e344 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800d032:	23e0      	movs	r3, #224	@ 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800d034:	a907      	add	r1, sp, #28
 800d036:	4831      	ldr	r0, [pc, #196]	@ (800d0fc <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800d038:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800d03a:	f001 f983 	bl	800e344 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800d03e:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800d040:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800d044:	f240 2102 	movw	r1, #514	@ 0x202

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800d048:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800d04a:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
 800d04c:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800d04e:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800d050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800d054:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800d056:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800d058:	4a29      	ldr	r2, [pc, #164]	@ (800d100 <BSP_SDRAM_Init+0x1cc>)
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800d05a:	62e5      	str	r5, [r4, #44]	@ 0x2c
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800d05c:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800d05e:	6325      	str	r5, [r4, #48]	@ 0x30
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800d060:	6334      	str	r4, [r6, #48]	@ 0x30
 800d062:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d064:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800d068:	f640 0308 	movw	r3, #2056	@ 0x808
 800d06c:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800d06e:	2320      	movs	r3, #32
 800d070:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800d072:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800d076:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800d07a:	6263      	str	r3, [r4, #36]	@ 0x24
  HAL_MDMA_DeInit(&mdma_handle);
 800d07c:	f002 fb42 	bl	800f704 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800d080:	4620      	mov	r0, r4
 800d082:	f002 fac5 	bl	800f610 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800d086:	462a      	mov	r2, r5
 800d088:	210f      	movs	r1, #15
 800d08a:	207a      	movs	r0, #122	@ 0x7a
 800d08c:	f000 ff46 	bl	800df1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800d090:	207a      	movs	r0, #122	@ 0x7a
 800d092:	f000 ff7f 	bl	800df94 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800d096:	2210      	movs	r2, #16
 800d098:	2104      	movs	r1, #4
 800d09a:	4630      	mov	r0, r6
 800d09c:	f7ff ff1a 	bl	800ced4 <MX_SDRAM_BANK2_Init>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	b9d0      	cbnz	r0, 800d0da <BSP_SDRAM_Init+0x1a6>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800d0a4:	4917      	ldr	r1, [pc, #92]	@ (800d104 <BSP_SDRAM_Init+0x1d0>)
 800d0a6:	2208      	movs	r2, #8
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800d0a8:	2430      	movs	r4, #48	@ 0x30
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800d0aa:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800d0ac:	600a      	str	r2, [r1, #0]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800d0ae:	f240 6203 	movw	r2, #1539	@ 0x603
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800d0b2:	604f      	str	r7, [r1, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800d0b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800d0b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800d0bc:	e9c1 3404 	strd	r3, r4, [r1, #16]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800d0c0:	e9c1 3206 	strd	r3, r2, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800d0c4:	f7f3 fb76 	bl	80007b4 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	bf18      	it	ne
 800d0cc:	f06f 0004 	mvnne.w	r0, #4
}
 800d0d0:	b00d      	add	sp, #52	@ 0x34
 800d0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800d0d4:	f06f 0001 	mvn.w	r0, #1
}
 800d0d8:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 800d0da:	f04f 30ff 	mov.w	r0, #4294967295
 800d0de:	e7f7      	b.n	800d0d0 <BSP_SDRAM_Init+0x19c>
 800d0e0:	58024400 	.word	0x58024400
 800d0e4:	24000e80 	.word	0x24000e80
 800d0e8:	24000f0c 	.word	0x24000f0c
 800d0ec:	58020c00 	.word	0x58020c00
 800d0f0:	58021000 	.word	0x58021000
 800d0f4:	58021400 	.word	0x58021400
 800d0f8:	58021800 	.word	0x58021800
 800d0fc:	58021c00 	.word	0x58021c00
 800d100:	52000040 	.word	0x52000040
 800d104:	24000eec 	.word	0x24000eec

0800d108 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800d108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d10c:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800d10e:	2800      	cmp	r0, #0
 800d110:	d16b      	bne.n	800d1ea <BSP_TS_Init+0xe2>
 800d112:	680b      	ldr	r3, [r1, #0]
 800d114:	460d      	mov	r5, r1
 800d116:	1e5a      	subs	r2, r3, #1
 800d118:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 800d11c:	d265      	bcs.n	800d1ea <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800d11e:	684a      	ldr	r2, [r1, #4]
 800d120:	1e51      	subs	r1, r2, #1
 800d122:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 800d126:	d260      	bcs.n	800d1ea <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800d128:	4293      	cmp	r3, r2
 800d12a:	bf28      	it	cs
 800d12c:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800d12e:	68ea      	ldr	r2, [r5, #12]
 800d130:	429a      	cmp	r2, r3
 800d132:	d85a      	bhi.n	800d1ea <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800d134:	2270      	movs	r2, #112	@ 0x70
  IOCtx.Init        = BSP_I2C4_Init;
 800d136:	4b31      	ldr	r3, [pc, #196]	@ (800d1fc <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800d138:	4c31      	ldr	r4, [pc, #196]	@ (800d200 <BSP_TS_Init+0xf8>)
 800d13a:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 800d13c:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 800d140:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800d142:	4a30      	ldr	r2, [pc, #192]	@ (800d204 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800d144:	4b30      	ldr	r3, [pc, #192]	@ (800d208 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800d146:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800d148:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800d14a:	4a30      	ldr	r2, [pc, #192]	@ (800d20c <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
 800d14c:	4b30      	ldr	r3, [pc, #192]	@ (800d210 <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
 800d14e:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800d150:	4620      	mov	r0, r4
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800d152:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 800d154:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800d156:	f7f3 fa7f 	bl	8000658 <FT5336_RegisterBusIO>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	d14b      	bne.n	800d1f6 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800d15e:	a901      	add	r1, sp, #4
 800d160:	4620      	mov	r0, r4
 800d162:	f7f3 f96f 	bl	8000444 <FT5336_ReadID>
 800d166:	2800      	cmp	r0, #0
 800d168:	d145      	bne.n	800d1f6 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 800d16a:	9b01      	ldr	r3, [sp, #4]
 800d16c:	2b51      	cmp	r3, #81	@ 0x51
 800d16e:	d142      	bne.n	800d1f6 <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800d170:	4b28      	ldr	r3, [pc, #160]	@ (800d214 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800d172:	4620      	mov	r0, r4
    Ts_CompObj[Instance] = &FT5336Obj;
 800d174:	4f28      	ldr	r7, [pc, #160]	@ (800d218 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800d176:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 800d220 <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
 800d17a:	603c      	str	r4, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800d17c:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4798      	blx	r3
 800d184:	4606      	mov	r6, r0
 800d186:	2800      	cmp	r0, #0
 800d188:	d135      	bne.n	800d1f6 <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d18a:	682a      	ldr	r2, [r5, #0]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d18c:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d18e:	4c23      	ldr	r4, [pc, #140]	@ (800d21c <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d190:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d194:	6022      	str	r2, [r4, #0]
 800d196:	686a      	ldr	r2, [r5, #4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d198:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d19a:	6062      	str	r2, [r4, #4]
 800d19c:	68aa      	ldr	r2, [r5, #8]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d19e:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d1a0:	60a2      	str	r2, [r4, #8]
 800d1a2:	68ea      	ldr	r2, [r5, #12]
 800d1a4:	60e2      	str	r2, [r4, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d1a6:	4798      	blx	r3
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	db18      	blt.n	800d1de <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800d1ac:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d1b0:	e9c4 3204 	strd	r3, r2, [r4, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d1b4:	68eb      	ldr	r3, [r5, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d1b6:	e9d5 2100 	ldrd	r2, r1, [r5]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d1ba:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d1bc:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d1be:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d1c0:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d1c2:	e9c4 2206 	strd	r2, r2, [r4, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d1c6:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d1ca:	e9c4 2208 	strd	r2, r2, [r4, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d1ce:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d1d2:	62a2      	str	r2, [r4, #40]	@ 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d1d4:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	b008      	add	sp, #32
 800d1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d1de:	f06f 0604 	mvn.w	r6, #4
}
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	b008      	add	sp, #32
 800d1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d1ea:	f06f 0601 	mvn.w	r6, #1
}
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	b008      	add	sp, #32
 800d1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
 800d1f6:	f04f 36ff 	mov.w	r6, #4294967295
 800d1fa:	e7ec      	b.n	800d1d6 <BSP_TS_Init+0xce>
 800d1fc:	0800be41 	.word	0x0800be41
 800d200:	24000f40 	.word	0x24000f40
 800d204:	0800bdad 	.word	0x0800bdad
 800d208:	0800c5a9 	.word	0x0800c5a9
 800d20c:	0800c56d 	.word	0x0800c56d
 800d210:	0800c5e5 	.word	0x0800c5e5
 800d214:	24000000 	.word	0x24000000
 800d218:	24000fa8 	.word	0x24000fa8
 800d21c:	24000f68 	.word	0x24000f68
 800d220:	24000fac 	.word	0x24000fac

0800d224 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 800d224:	2800      	cmp	r0, #0
 800d226:	d154      	bne.n	800d2d2 <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800d228:	4b2b      	ldr	r3, [pc, #172]	@ (800d2d8 <BSP_TS_GetState+0xb4>)
 800d22a:	4a2c      	ldr	r2, [pc, #176]	@ (800d2dc <BSP_TS_GetState+0xb8>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	6810      	ldr	r0, [r2, #0]
 800d230:	691b      	ldr	r3, [r3, #16]
{
 800d232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800d23a:	a901      	add	r1, sp, #4
 800d23c:	4798      	blx	r3
 800d23e:	2800      	cmp	r0, #0
 800d240:	db3f      	blt.n	800d2c2 <BSP_TS_GetState+0x9e>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800d242:	4b27      	ldr	r3, [pc, #156]	@ (800d2e0 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 800d244:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800d246:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800d248:	6add      	ldr	r5, [r3, #44]	@ 0x2c
    else if(state.TouchDetected != 0U)
 800d24a:	b930      	cbnz	r0, 800d25a <BSP_TS_GetState+0x36>
      TS_State->TouchDetected = 0U;
 800d24c:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800d24e:	e9c4 6501 	strd	r6, r5, [r4, #4]
  int32_t ret = BSP_ERROR_NONE;
 800d252:	2000      	movs	r0, #0
}
 800d254:	b004      	add	sp, #16
 800d256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800d25a:	689f      	ldr	r7, [r3, #8]
 800d25c:	073a      	lsls	r2, r7, #28
      y_oriented = state.TouchY;
 800d25e:	e9dd c802 	ldrd	ip, r8, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800d262:	d433      	bmi.n	800d2cc <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
 800d264:	4641      	mov	r1, r8
      x_oriented = state.TouchX;
 800d266:	4662      	mov	r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800d268:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800d26c:	f8d3 e010 	ldr.w	lr, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800d270:	d003      	beq.n	800d27a <BSP_TS_GetState+0x56>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800d272:	f10e 32ff 	add.w	r2, lr, #4294967295
 800d276:	eba2 020c 	sub.w	r2, r2, ip
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800d27a:	f8d3 c014 	ldr.w	ip, [r3, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800d27e:	077f      	lsls	r7, r7, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800d280:	681f      	ldr	r7, [r3, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800d282:	bf48      	it	mi
 800d284:	ebac 0108 	submi.w	r1, ip, r8
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800d288:	fb07 f202 	mul.w	r2, r7, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800d28c:	685f      	ldr	r7, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800d28e:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800d290:	fb07 f101 	mul.w	r1, r7, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800d294:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800d298:	fbb1 f1fc 	udiv	r1, r1, ip
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800d29c:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800d29e:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800d2a0:	60a1      	str	r1, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800d2a2:	bf8c      	ite	hi
 800d2a4:	1b90      	subhi	r0, r2, r6
 800d2a6:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800d2a8:	42a9      	cmp	r1, r5
 800d2aa:	bf8c      	ite	hi
 800d2ac:	1b4f      	subhi	r7, r1, r5
 800d2ae:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800d2b0:	42b8      	cmp	r0, r7
 800d2b2:	bf38      	it	cc
 800d2b4:	4638      	movcc	r0, r7
 800d2b6:	68df      	ldr	r7, [r3, #12]
 800d2b8:	4287      	cmp	r7, r0
 800d2ba:	d2c8      	bcs.n	800d24e <BSP_TS_GetState+0x2a>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800d2bc:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800d2be:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800d2c0:	e7c7      	b.n	800d252 <BSP_TS_GetState+0x2e>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800d2c2:	f06f 0004 	mvn.w	r0, #4
}
 800d2c6:	b004      	add	sp, #16
 800d2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        y_oriented = state.TouchX;
 800d2cc:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
 800d2ce:	4642      	mov	r2, r8
 800d2d0:	e7ca      	b.n	800d268 <BSP_TS_GetState+0x44>
    ret = BSP_ERROR_WRONG_PARAM;
 800d2d2:	f06f 0001 	mvn.w	r0, #1
}
 800d2d6:	4770      	bx	lr
 800d2d8:	24000fac 	.word	0x24000fac
 800d2dc:	24000fa8 	.word	0x24000fa8
 800d2e0:	24000f68 	.word	0x24000f68

0800d2e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2e4:	4b07      	ldr	r3, [pc, #28]	@ (800d304 <HAL_MspInit+0x20>)
{
 800d2e6:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2e8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800d2ec:	f042 0202 	orr.w	r2, r2, #2
 800d2f0:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800d2f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2f8:	f003 0302 	and.w	r3, r3, #2
 800d2fc:	9301      	str	r3, [sp, #4]
 800d2fe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d300:	b002      	add	sp, #8
 800d302:	4770      	bx	lr
 800d304:	58024400 	.word	0x58024400

0800d308 <LTDC_IRQHandler>:
/* Private functions ---------------------------------------------------------*/

void LTDC_IRQHandler(void)
{

  if (LTDC->ISR & LTDC_ISR_LIF)
 800d308:	4b04      	ldr	r3, [pc, #16]	@ (800d31c <LTDC_IRQHandler+0x14>)
 800d30a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d30c:	07d2      	lsls	r2, r2, #31
 800d30e:	d504      	bpl.n	800d31a <LTDC_IRQHandler+0x12>
  {
      LTDC->ICR = LTDC_ICR_CLIF;
 800d310:	2001      	movs	r0, #1

      blockRendering = 0;
 800d312:	4a03      	ldr	r2, [pc, #12]	@ (800d320 <LTDC_IRQHandler+0x18>)
 800d314:	2100      	movs	r1, #0
      LTDC->ICR = LTDC_ICR_CLIF;
 800d316:	63d8      	str	r0, [r3, #60]	@ 0x3c
      blockRendering = 0;
 800d318:	6011      	str	r1, [r2, #0]
  }
}
 800d31a:	4770      	bx	lr
 800d31c:	50001000 	.word	0x50001000
 800d320:	240001bc 	.word	0x240001bc

0800d324 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop

0800d328 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800d328:	e7fe      	b.n	800d328 <HardFault_Handler>
 800d32a:	bf00      	nop

0800d32c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800d32c:	e7fe      	b.n	800d32c <MemManage_Handler>
 800d32e:	bf00      	nop

0800d330 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800d330:	e7fe      	b.n	800d330 <BusFault_Handler>
 800d332:	bf00      	nop

0800d334 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800d334:	e7fe      	b.n	800d334 <UsageFault_Handler>
 800d336:	bf00      	nop

0800d338 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop

0800d33c <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop

0800d340 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop

0800d344 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800d344:	f000 bda6 	b.w	800de94 <HAL_IncTick>

0800d348 <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
BSP_PB_IRQHandler(BUTTON_USER);
 800d348:	2000      	movs	r0, #0
 800d34a:	f7fe bd27 	b.w	800bd9c <BSP_PB_IRQHandler>
 800d34e:	bf00      	nop

0800d350 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d350:	490d      	ldr	r1, [pc, #52]	@ (800d388 <_sbrk+0x38>)
{
 800d352:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d354:	4a0d      	ldr	r2, [pc, #52]	@ (800d38c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800d356:	6808      	ldr	r0, [r1, #0]
{
 800d358:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d35a:	4c0d      	ldr	r4, [pc, #52]	@ (800d390 <_sbrk+0x40>)
 800d35c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800d35e:	b120      	cbz	r0, 800d36a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d360:	4403      	add	r3, r0
 800d362:	4293      	cmp	r3, r2
 800d364:	d807      	bhi.n	800d376 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800d366:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800d368:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800d36a:	4c0a      	ldr	r4, [pc, #40]	@ (800d394 <_sbrk+0x44>)
 800d36c:	4620      	mov	r0, r4
 800d36e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800d370:	4403      	add	r3, r0
 800d372:	4293      	cmp	r3, r2
 800d374:	d9f7      	bls.n	800d366 <_sbrk+0x16>
    errno = ENOMEM;
 800d376:	f004 fc1d 	bl	8011bb4 <__errno>
 800d37a:	220c      	movs	r2, #12
 800d37c:	4603      	mov	r3, r0
    return (void *)-1;
 800d37e:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800d382:	601a      	str	r2, [r3, #0]
}
 800d384:	bd10      	pop	{r4, pc}
 800d386:	bf00      	nop
 800d388:	24000fb0 	.word	0x24000fb0
 800d38c:	24080000 	.word	0x24080000
 800d390:	00000400 	.word	0x00000400
 800d394:	24041440 	.word	0x24041440

0800d398 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d398:	4927      	ldr	r1, [pc, #156]	@ (800d438 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d39a:	4a28      	ldr	r2, [pc, #160]	@ (800d43c <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d39c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800d3a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 800d3a4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d3a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d3aa:	6813      	ldr	r3, [r2, #0]
 800d3ac:	f003 030f 	and.w	r3, r3, #15
 800d3b0:	2b06      	cmp	r3, #6
 800d3b2:	d805      	bhi.n	800d3c0 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d3b4:	6813      	ldr	r3, [r2, #0]
 800d3b6:	f023 030f 	bic.w	r3, r3, #15
 800d3ba:	f043 0307 	orr.w	r3, r3, #7
 800d3be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800d3c0:	4b1f      	ldr	r3, [pc, #124]	@ (800d440 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d3c2:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800d3c4:	4a1f      	ldr	r2, [pc, #124]	@ (800d444 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800d3c6:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d3c8:	481c      	ldr	r0, [pc, #112]	@ (800d43c <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800d3ca:	f041 0101 	orr.w	r1, r1, #1
 800d3ce:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800d3d0:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800d3d2:	6819      	ldr	r1, [r3, #0]
 800d3d4:	400a      	ands	r2, r1
 800d3d6:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d3d8:	6803      	ldr	r3, [r0, #0]
 800d3da:	071b      	lsls	r3, r3, #28
 800d3dc:	d505      	bpl.n	800d3ea <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d3de:	6803      	ldr	r3, [r0, #0]
 800d3e0:	f023 030f 	bic.w	r3, r3, #15
 800d3e4:	f043 0307 	orr.w	r3, r3, #7
 800d3e8:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800d3ea:	4b15      	ldr	r3, [pc, #84]	@ (800d440 <SystemInit+0xa8>)
 800d3ec:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800d3ee:	4916      	ldr	r1, [pc, #88]	@ (800d448 <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 800d3f0:	4816      	ldr	r0, [pc, #88]	@ (800d44c <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 800d3f2:	4c17      	ldr	r4, [pc, #92]	@ (800d450 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 800d3f4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800d3f6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800d3f8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800d3fa:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800d3fc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800d3fe:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800d400:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800d402:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800d404:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800d406:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800d408:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d40a:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800d40c:	4811      	ldr	r0, [pc, #68]	@ (800d454 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 800d40e:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800d412:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800d414:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800d416:	6803      	ldr	r3, [r0, #0]
 800d418:	f36f 030f 	bfc	r3, #0, #16
 800d41c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d420:	d203      	bcs.n	800d42a <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800d422:	4b0d      	ldr	r3, [pc, #52]	@ (800d458 <SystemInit+0xc0>)
 800d424:	2201      	movs	r2, #1
 800d426:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800d42a:	4b0c      	ldr	r3, [pc, #48]	@ (800d45c <SystemInit+0xc4>)
 800d42c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800d430:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800d434:	601a      	str	r2, [r3, #0]
}
 800d436:	4770      	bx	lr
 800d438:	e000ed00 	.word	0xe000ed00
 800d43c:	52002000 	.word	0x52002000
 800d440:	58024400 	.word	0x58024400
 800d444:	eaf6ed7f 	.word	0xeaf6ed7f
 800d448:	01010280 	.word	0x01010280
 800d44c:	01ff0000 	.word	0x01ff0000
 800d450:	02020200 	.word	0x02020200
 800d454:	5c001000 	.word	0x5c001000
 800d458:	51008000 	.word	0x51008000
 800d45c:	52004000 	.word	0x52004000

0800d460 <apply_upgrade>:

	}
}

void apply_upgrade (Upgrade* upgrade)
{
 800d460:	b538      	push	{r3, r4, r5, lr}
	Donut.donuts_count -= upgrade -> cost;
 800d462:	4c17      	ldr	r4, [pc, #92]	@ (800d4c0 <apply_upgrade+0x60>)
	
	if (!strcmp (upgrade -> label, "AUTO SPIN"))
 800d464:	4917      	ldr	r1, [pc, #92]	@ (800d4c4 <apply_upgrade+0x64>)
	Donut.donuts_count -= upgrade -> cost;
 800d466:	6823      	ldr	r3, [r4, #0]
	if (!strcmp (upgrade -> label, "AUTO SPIN"))
 800d468:	e9d0 2504 	ldrd	r2, r5, [r0, #16]
	Donut.donuts_count -= upgrade -> cost;
 800d46c:	1a9b      	subs	r3, r3, r2
	if (!strcmp (upgrade -> label, "AUTO SPIN"))
 800d46e:	4628      	mov	r0, r5
	Donut.donuts_count -= upgrade -> cost;
 800d470:	6023      	str	r3, [r4, #0]
	if (!strcmp (upgrade -> label, "AUTO SPIN"))
 800d472:	f7f2 ff35 	bl	80002e0 <strcmp>
 800d476:	b928      	cbnz	r0, 800d484 <apply_upgrade+0x24>
	{
		Donut.Spin_Rate = 100;
		Donut.donuts_passive += 1;
 800d478:	68a3      	ldr	r3, [r4, #8]
		Donut.Spin_Rate = 100;
 800d47a:	2264      	movs	r2, #100	@ 0x64
		Donut.donuts_passive += 1;
 800d47c:	3301      	adds	r3, #1
 800d47e:	e9c4 3202 	strd	r3, r2, [r4, #8]
	else if (!strcmp (upgrade -> label, "EVA-02"))
	{
		//TODO: apply asuka color theme
	}

}
 800d482:	bd38      	pop	{r3, r4, r5, pc}
	else if (!strcmp (upgrade -> label, "FASTER"))
 800d484:	4910      	ldr	r1, [pc, #64]	@ (800d4c8 <apply_upgrade+0x68>)
 800d486:	4628      	mov	r0, r5
 800d488:	f7f2 ff2a 	bl	80002e0 <strcmp>
 800d48c:	b930      	cbnz	r0, 800d49c <apply_upgrade+0x3c>
		Donut.donuts_passive += 1;
 800d48e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
		Donut.Spin_Rate -= 10;
 800d492:	3a0a      	subs	r2, #10
		Donut.donuts_passive += 1;
 800d494:	3301      	adds	r3, #1
 800d496:	e9c4 3202 	strd	r3, r2, [r4, #8]
}
 800d49a:	bd38      	pop	{r3, r4, r5, pc}
	else if (!strcmp (upgrade -> label, "RGB"))
 800d49c:	490b      	ldr	r1, [pc, #44]	@ (800d4cc <apply_upgrade+0x6c>)
 800d49e:	4628      	mov	r0, r5
 800d4a0:	f7f2 ff1e 	bl	80002e0 <strcmp>
 800d4a4:	b140      	cbz	r0, 800d4b8 <apply_upgrade+0x58>
	else if (!strcmp (upgrade -> label, "ASCII"))
 800d4a6:	490a      	ldr	r1, [pc, #40]	@ (800d4d0 <apply_upgrade+0x70>)
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	f7f2 ff19 	bl	80002e0 <strcmp>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d1e7      	bne.n	800d482 <apply_upgrade+0x22>
		Donut.ASCII = true;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	7663      	strb	r3, [r4, #25]
}
 800d4b6:	bd38      	pop	{r3, r4, r5, pc}
		Donut.RGB = true;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	7623      	strb	r3, [r4, #24]
}
 800d4bc:	bd38      	pop	{r3, r4, r5, pc}
 800d4be:	bf00      	nop
 800d4c0:	240000fc 	.word	0x240000fc
 800d4c4:	08013048 	.word	0x08013048
 800d4c8:	08013054 	.word	0x08013054
 800d4cc:	0801305c 	.word	0x0801305c
 800d4d0:	08013060 	.word	0x08013060

0800d4d4 <check_if_upgrade_clicked>:

void check_if_upgrade_clicked (int x, int y)
{
 800d4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4d6:	4c17      	ldr	r4, [pc, #92]	@ (800d534 <check_if_upgrade_clicked+0x60>)
 800d4d8:	b083      	sub	sp, #12
	FLP_Draw_Rectangle(b_1, x-2, y-2, 4, 4, UTIL_LCD_COLOR_BLUE);
 800d4da:	2304      	movs	r3, #4
 800d4dc:	4a16      	ldr	r2, [pc, #88]	@ (800d538 <check_if_upgrade_clicked+0x64>)
 800d4de:	f104 06c4 	add.w	r6, r4, #196	@ 0xc4
{
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	460f      	mov	r7, r1
	FLP_Draw_Rectangle(b_1, x-2, y-2, 4, 4, UTIL_LCD_COLOR_BLUE);
 800d4e6:	e9cd 3200 	strd	r3, r2, [sp]
 800d4ea:	1e8a      	subs	r2, r1, #2
 800d4ec:	1e81      	subs	r1, r0, #2
 800d4ee:	4813      	ldr	r0, [pc, #76]	@ (800d53c <check_if_upgrade_clicked+0x68>)
 800d4f0:	f7f3 f9ba 	bl	8000868 <FLP_Draw_Rectangle>
	for (int i = 0; i < sizeof (upgrades) / sizeof (Upgrade); i++)
	{
		if 
		(
 800d4f4:	7e23      	ldrb	r3, [r4, #24]
 800d4f6:	b993      	cbnz	r3, 800d51e <check_if_upgrade_clicked+0x4a>
			!upgrades[i].purchased && 
			x >= upgrades[i].x && 
 800d4f8:	6823      	ldr	r3, [r4, #0]
			!upgrades[i].purchased && 
 800d4fa:	42ab      	cmp	r3, r5
 800d4fc:	dc0f      	bgt.n	800d51e <check_if_upgrade_clicked+0x4a>
			x < upgrades[i].x + upgrades[i].width &&
 800d4fe:	68a2      	ldr	r2, [r4, #8]
 800d500:	4413      	add	r3, r2
			x >= upgrades[i].x && 
 800d502:	42ab      	cmp	r3, r5
 800d504:	dd0b      	ble.n	800d51e <check_if_upgrade_clicked+0x4a>
			y >= upgrades[i].y && 
 800d506:	6863      	ldr	r3, [r4, #4]
			x < upgrades[i].x + upgrades[i].width &&
 800d508:	42bb      	cmp	r3, r7
 800d50a:	dc08      	bgt.n	800d51e <check_if_upgrade_clicked+0x4a>
			y < upgrades[i].y + upgrades[i].height
 800d50c:	68e2      	ldr	r2, [r4, #12]
		)
        {
			if (Donut.donuts_count >= upgrades[i].cost)
 800d50e:	490c      	ldr	r1, [pc, #48]	@ (800d540 <check_if_upgrade_clicked+0x6c>)
			y < upgrades[i].y + upgrades[i].height
 800d510:	4413      	add	r3, r2
			y >= upgrades[i].y && 
 800d512:	42bb      	cmp	r3, r7
 800d514:	dd03      	ble.n	800d51e <check_if_upgrade_clicked+0x4a>
			if (Donut.donuts_count >= upgrades[i].cost)
 800d516:	680a      	ldr	r2, [r1, #0]
 800d518:	6923      	ldr	r3, [r4, #16]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d204      	bcs.n	800d528 <check_if_upgrade_clicked+0x54>
	for (int i = 0; i < sizeof (upgrades) / sizeof (Upgrade); i++)
 800d51e:	341c      	adds	r4, #28
 800d520:	42b4      	cmp	r4, r6
 800d522:	d1e7      	bne.n	800d4f4 <check_if_upgrade_clicked+0x20>
				upgrades[i].purchased = true;
				apply_upgrade (&upgrades[i]);
			}
		}
	}
}
 800d524:	b003      	add	sp, #12
 800d526:	bdf0      	pop	{r4, r5, r6, r7, pc}
				upgrades[i].purchased = true;
 800d528:	2301      	movs	r3, #1
				apply_upgrade (&upgrades[i]);
 800d52a:	4620      	mov	r0, r4
				upgrades[i].purchased = true;
 800d52c:	7623      	strb	r3, [r4, #24]
				apply_upgrade (&upgrades[i]);
 800d52e:	f7ff ff97 	bl	800d460 <apply_upgrade>
 800d532:	e7f4      	b.n	800d51e <check_if_upgrade_clicked+0x4a>
 800d534:	24000038 	.word	0x24000038
 800d538:	ff0000ff 	.word	0xff0000ff
 800d53c:	240016a8 	.word	0x240016a8
 800d540:	240000fc 	.word	0x240000fc

0800d544 <draw_donut>:
	if (RGB_angle > 2 * PI) RGB_angle -= 2 * PI;
}

void draw_donut ()
{
	hdma2d.Init.Mode = DMA2D_M2M;
 800d544:	481f      	ldr	r0, [pc, #124]	@ (800d5c4 <draw_donut+0x80>)
 800d546:	2300      	movs	r3, #0
{
 800d548:	b510      	push	{r4, lr}
 800d54a:	b082      	sub	sp, #8
	hdma2d.Init.Mode = DMA2D_M2M;
 800d54c:	6043      	str	r3, [r0, #4]
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) Error_Handler ();
 800d54e:	f000 fd31 	bl	800dfb4 <HAL_DMA2D_Init>
 800d552:	bba0      	cbnz	r0, 800d5be <draw_donut+0x7a>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800d554:	481c      	ldr	r0, [pc, #112]	@ (800d5c8 <draw_donut+0x84>)
 800d556:	2300      	movs	r3, #0
 800d558:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d55c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800d560:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d564:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d568:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d56c:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 800d570:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d574:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d578:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d57a:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 800d57e:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d580:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
 800d584:	1c5a      	adds	r2, r3, #1
 800d586:	d1f8      	bne.n	800d57a <draw_donut+0x36>
    } while(sets-- != 0U);
 800d588:	f1ac 0c20 	sub.w	ip, ip, #32
 800d58c:	f11c 0f20 	cmn.w	ip, #32
 800d590:	d1f0      	bne.n	800d574 <draw_donut+0x30>
 800d592:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d596:	f3bf 8f6f 	isb	sy
	SCB_CleanInvalidateDCache ();
	HAL_DMA2D_Start (&hdma2d, (uint32_t) b_1, 0xD0000000, SCREEN_WIDTH, SCREEN_HEIGHT);
 800d59a:	f44f 7488 	mov.w	r4, #272	@ 0x110
 800d59e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800d5a2:	f04f 4250 	mov.w	r2, #3489660928	@ 0xd0000000
 800d5a6:	4909      	ldr	r1, [pc, #36]	@ (800d5cc <draw_donut+0x88>)
 800d5a8:	9400      	str	r4, [sp, #0]
 800d5aa:	4806      	ldr	r0, [pc, #24]	@ (800d5c4 <draw_donut+0x80>)
 800d5ac:	f000 fd40 	bl	800e030 <HAL_DMA2D_Start>
	HAL_DMA2D_PollForTransfer (&hdma2d, 100);
 800d5b0:	2164      	movs	r1, #100	@ 0x64
 800d5b2:	4804      	ldr	r0, [pc, #16]	@ (800d5c4 <draw_donut+0x80>)
}
 800d5b4:	b002      	add	sp, #8
 800d5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA2D_PollForTransfer (&hdma2d, 100);
 800d5ba:	f000 bd93 	b.w	800e0e4 <HAL_DMA2D_PollForTransfer>
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) Error_Handler ();
 800d5be:	f7fe fa45 	bl	800ba4c <Error_Handler>
 800d5c2:	e7c7      	b.n	800d554 <draw_donut+0x10>
 800d5c4:	240001c0 	.word	0x240001c0
 800d5c8:	e000ed00 	.word	0xe000ed00
 800d5cc:	240016a8 	.word	0x240016a8

0800d5d0 <draw_upgrades>:

void draw_upgrades ()
{
 800d5d0:	b570      	push	{r4, r5, r6, lr}
	int n = sizeof (upgrades) / sizeof (Upgrade);
	int y_offset = 0;

	for (int i = 0; i < n; i++)
	{
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d5d2:	4c67      	ldr	r4, [pc, #412]	@ (800d770 <draw_upgrades+0x1a0>)
{
 800d5d4:	b084      	sub	sp, #16
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d5d6:	4d67      	ldr	r5, [pc, #412]	@ (800d774 <draw_upgrades+0x1a4>)
 800d5d8:	6922      	ldr	r2, [r4, #16]
 800d5da:	682b      	ldr	r3, [r5, #0]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	f0c0 80a1 	bcc.w	800d724 <draw_upgrades+0x154>

			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);

			y_offset += 30;
		}
		else if (upgrades[i].cost > Donut.donuts_count) break; // cuz they ascending in price
 800d5e2:	d825      	bhi.n	800d630 <draw_upgrades+0x60>
	int y_offset = 0;
 800d5e4:	2600      	movs	r6, #0
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d5e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d5e8:	682b      	ldr	r3, [r5, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d322      	bcc.n	800d634 <draw_upgrades+0x64>
		else if (upgrades[i].cost > Donut.donuts_count) break; // cuz they ascending in price
 800d5ee:	d81f      	bhi.n	800d630 <draw_upgrades+0x60>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d5f0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800d5f2:	682b      	ldr	r3, [r5, #0]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d334      	bcc.n	800d662 <draw_upgrades+0x92>
		else if (upgrades[i].cost > Donut.donuts_count) break; // cuz they ascending in price
 800d5f8:	d81a      	bhi.n	800d630 <draw_upgrades+0x60>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d5fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d5fc:	682b      	ldr	r3, [r5, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d346      	bcc.n	800d690 <draw_upgrades+0xc0>
		else if (upgrades[i].cost > Donut.donuts_count) break; // cuz they ascending in price
 800d602:	d815      	bhi.n	800d630 <draw_upgrades+0x60>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d604:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d358      	bcc.n	800d6c0 <draw_upgrades+0xf0>
		else if (upgrades[i].cost > Donut.donuts_count) break; // cuz they ascending in price
 800d60e:	d80f      	bhi.n	800d630 <draw_upgrades+0x60>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d610:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	429a      	cmp	r2, r3
 800d618:	d36b      	bcc.n	800d6f2 <draw_upgrades+0x122>
		else if (upgrades[i].cost > Donut.donuts_count) break; // cuz they ascending in price
 800d61a:	d809      	bhi.n	800d630 <draw_upgrades+0x60>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d61c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	d204      	bcs.n	800d630 <draw_upgrades+0x60>
 800d626:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f000 808d 	beq.w	800d74a <draw_upgrades+0x17a>
	}

}
 800d630:	b004      	add	sp, #16
 800d632:	bd70      	pop	{r4, r5, r6, pc}
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d634:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1d9      	bne.n	800d5f0 <draw_upgrades+0x20>
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d63c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d63e:	f04f 32ff 	mov.w	r2, #4294967295
			upgrades[i].y = y_offset;
 800d642:	6226      	str	r6, [r4, #32]
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d644:	484c      	ldr	r0, [pc, #304]	@ (800d778 <draw_upgrades+0x1a8>)
 800d646:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d64a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d64c:	4633      	mov	r3, r6
			y_offset += 30;
 800d64e:	361e      	adds	r6, #30
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d650:	9200      	str	r2, [sp, #0]
 800d652:	69e2      	ldr	r2, [r4, #28]
 800d654:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d656:	f7f3 fde1 	bl	800121c <FLP_Draw_Upgrade>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d65a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800d65c:	682b      	ldr	r3, [r5, #0]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d2ca      	bcs.n	800d5f8 <draw_upgrades+0x28>
 800d662:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1c7      	bne.n	800d5fa <draw_upgrades+0x2a>
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d66a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d66c:	f04f 32ff 	mov.w	r2, #4294967295
			upgrades[i].y = y_offset;
 800d670:	63e6      	str	r6, [r4, #60]	@ 0x3c
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d672:	4841      	ldr	r0, [pc, #260]	@ (800d778 <draw_upgrades+0x1a8>)
 800d674:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d678:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d67a:	4633      	mov	r3, r6
			y_offset += 30;
 800d67c:	361e      	adds	r6, #30
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d67e:	9200      	str	r2, [sp, #0]
 800d680:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d682:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800d684:	f7f3 fdca 	bl	800121c <FLP_Draw_Upgrade>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d688:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d68a:	682b      	ldr	r3, [r5, #0]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d2b8      	bcs.n	800d602 <draw_upgrades+0x32>
 800d690:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1b5      	bne.n	800d604 <draw_upgrades+0x34>
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d698:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800d69a:	f04f 32ff 	mov.w	r2, #4294967295
			upgrades[i].y = y_offset;
 800d69e:	65a6      	str	r6, [r4, #88]	@ 0x58
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d6a0:	4835      	ldr	r0, [pc, #212]	@ (800d778 <draw_upgrades+0x1a8>)
 800d6a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d6a6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800d6a8:	4633      	mov	r3, r6
			y_offset += 30;
 800d6aa:	361e      	adds	r6, #30
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d6ac:	9200      	str	r2, [sp, #0]
 800d6ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6b0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d6b2:	f7f3 fdb3 	bl	800121c <FLP_Draw_Upgrade>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d6b6:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d6ba:	682b      	ldr	r3, [r5, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d2a6      	bcs.n	800d60e <draw_upgrades+0x3e>
 800d6c0:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1a3      	bne.n	800d610 <draw_upgrades+0x40>
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d6c8:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800d6ca:	f04f 32ff 	mov.w	r2, #4294967295
			upgrades[i].y = y_offset;
 800d6ce:	6766      	str	r6, [r4, #116]	@ 0x74
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d6d0:	4829      	ldr	r0, [pc, #164]	@ (800d778 <draw_upgrades+0x1a8>)
 800d6d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d6d6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800d6d8:	4633      	mov	r3, r6
			y_offset += 30;
 800d6da:	361e      	adds	r6, #30
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d6dc:	9200      	str	r2, [sp, #0]
 800d6de:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d6e0:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800d6e4:	f7f3 fd9a 	bl	800121c <FLP_Draw_Upgrade>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d6e8:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800d6ec:	682b      	ldr	r3, [r5, #0]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d293      	bcs.n	800d61a <draw_upgrades+0x4a>
 800d6f2:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d190      	bne.n	800d61c <draw_upgrades+0x4c>
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d6fa:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800d6fe:	f04f 32ff 	mov.w	r2, #4294967295
			upgrades[i].y = y_offset;
 800d702:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d706:	481c      	ldr	r0, [pc, #112]	@ (800d778 <draw_upgrades+0x1a8>)
 800d708:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d70c:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 800d710:	4633      	mov	r3, r6
			y_offset += 30;
 800d712:	361e      	adds	r6, #30
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d714:	9200      	str	r2, [sp, #0]
 800d716:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800d71a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800d71e:	f7f3 fd7d 	bl	800121c <FLP_Draw_Upgrade>
			y_offset += 30;
 800d722:	e77b      	b.n	800d61c <draw_upgrades+0x4c>
		if (upgrades[i].cost < Donut.donuts_count && !upgrades[i].purchased) 
 800d724:	7e23      	ldrb	r3, [r4, #24]
 800d726:	2b00      	cmp	r3, #0
 800d728:	f47f af5c 	bne.w	800d5e4 <draw_upgrades+0x14>
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d72c:	68e2      	ldr	r2, [r4, #12]
 800d72e:	f04f 31ff 	mov.w	r1, #4294967295
			upgrades[i].y = y_offset;
 800d732:	6063      	str	r3, [r4, #4]
			y_offset += 30;
 800d734:	261e      	movs	r6, #30
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d736:	4810      	ldr	r0, [pc, #64]	@ (800d778 <draw_upgrades+0x1a8>)
 800d738:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d73c:	68a1      	ldr	r1, [r4, #8]
 800d73e:	6822      	ldr	r2, [r4, #0]
 800d740:	9100      	str	r1, [sp, #0]
 800d742:	6961      	ldr	r1, [r4, #20]
 800d744:	f7f3 fd6a 	bl	800121c <FLP_Draw_Upgrade>
			y_offset += 30;
 800d748:	e74d      	b.n	800d5e6 <draw_upgrades+0x16>
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d74a:	e9d4 022c 	ldrd	r0, r2, [r4, #176]	@ 0xb0
 800d74e:	f04f 31ff 	mov.w	r1, #4294967295
			upgrades[i].y = y_offset;
 800d752:	f8c4 60ac 	str.w	r6, [r4, #172]	@ 0xac
			FLP_Draw_Upgrade (b_1, upgrades[i].label, upgrades[i].x, upgrades[i].y, upgrades[i].width, upgrades[i].height, UTIL_LCD_COLOR_WHITE);
 800d756:	4633      	mov	r3, r6
 800d758:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d75c:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 800d760:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
 800d764:	9000      	str	r0, [sp, #0]
 800d766:	4804      	ldr	r0, [pc, #16]	@ (800d778 <draw_upgrades+0x1a8>)
 800d768:	f7f3 fd58 	bl	800121c <FLP_Draw_Upgrade>
}
 800d76c:	b004      	add	sp, #16
 800d76e:	bd70      	pop	{r4, r5, r6, pc}
 800d770:	24000038 	.word	0x24000038
 800d774:	240000fc 	.word	0x240000fc
 800d778:	240016a8 	.word	0x240016a8

0800d77c <get_donut_cords>:
	HAL_DMA2D_Start (&hdma2d, 0x0000, (uint32_t) b_1, SCREEN_WIDTH, SCREEN_HEIGHT);
	HAL_DMA2D_PollForTransfer (&hdma2d, 10);
}

void get_donut_cords ()
{
 800d77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int s_i = 0, c_i = 1024;
 800d780:	f44f 6380 	mov.w	r3, #1024	@ 0x400
{
 800d784:	b089      	sub	sp, #36	@ 0x24
	int s_i = 0, c_i = 1024;
 800d786:	2600      	movs	r6, #0

	for (int i = 0; i < 90; i++)
	{
		int s_j = 0, c_j = 1024;
 800d788:	f04f 095a 	mov.w	r9, #90	@ 0x5a
	int s_i = 0, c_i = 1024;
 800d78c:	9306      	str	r3, [sp, #24]
 800d78e:	9604      	str	r6, [sp, #16]
	int x0 = R1 * c_j + R2,
 800d790:	9b06      	ldr	r3, [sp, #24]
		int s_j = 0, c_j = 1024;
 800d792:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800d796:	2500      	movs	r5, #0
		if (Donut.ASCII) FLP_Draw_Symbol (b_1, screen_x_start, screen_y_start, pixel_color, intensity);
 800d798:	f8df b2ec 	ldr.w	fp, [pc, #748]	@ 800da88 <get_donut_cords+0x30c>
	int x0 = R1 * c_j + R2,
 800d79c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7a0:	f8cd 901c 	str.w	r9, [sp, #28]
 800d7a4:	9305      	str	r3, [sp, #20]
 800d7a6:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 800d7aa:	9302      	str	r3, [sp, #8]
 800d7ac:	e019      	b.n	800d7e2 <get_donut_cords+0x66>

		for (int j = 0; j < 324; j++)
		{
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);

			R(5, 8, c_j, s_j);
 800d7ae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800d7b2:	eba4 2323 	sub.w	r3, r4, r3, asr #8
 800d7b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d7ba:	eb05 2424 	add.w	r4, r5, r4, asr #8
 800d7be:	fb03 f503 	mul.w	r5, r3, r3
 800d7c2:	f5c5 1540 	rsb	r5, r5, #3145728	@ 0x300000
 800d7c6:	fb04 5514 	mls	r5, r4, r4, r5
 800d7ca:	12ed      	asrs	r5, r5, #11
 800d7cc:	fb05 f303 	mul.w	r3, r5, r3
 800d7d0:	fb04 f505 	mul.w	r5, r4, r5
 800d7d4:	129c      	asrs	r4, r3, #10
		for (int j = 0; j < 324; j++)
 800d7d6:	9b02      	ldr	r3, [sp, #8]
			R(5, 8, c_j, s_j);
 800d7d8:	12ad      	asrs	r5, r5, #10
		for (int j = 0; j < 324; j++)
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	9302      	str	r3, [sp, #8]
 800d7de:	f000 8121 	beq.w	800da24 <get_donut_cords+0x2a8>
	x3 = s_i * x0 >> 10,
 800d7e2:	9b05      	ldr	r3, [sp, #20]
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d7e4:	4aa2      	ldr	r2, [pc, #648]	@ (800da70 <get_donut_cords+0x2f4>)
	x3 = s_i * x0 >> 10,
 800d7e6:	fb05 f803 	mul.w	r8, r5, r3
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d7ea:	f8d2 c000 	ldr.w	ip, [r2]
	x1 = c_i * x0 >> 10,
 800d7ee:	fb04 f003 	mul.w	r0, r4, r3
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d7f2:	4aa0      	ldr	r2, [pc, #640]	@ (800da74 <get_donut_cords+0x2f8>)
	x3 = s_i * x0 >> 10,
 800d7f4:	ea4f 29a8 	mov.w	r9, r8, asr #10
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d7f8:	4b9f      	ldr	r3, [pc, #636]	@ (800da78 <get_donut_cords+0x2fc>)
	x1 = c_i * x0 >> 10,
 800d7fa:	1280      	asrs	r0, r0, #10
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d7fc:	6816      	ldr	r6, [r2, #0]
    x4 = R1 * x2 - (s_A * x3 >> 10),
 800d7fe:	fb09 fa0c 	mul.w	sl, r9, ip
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d802:	f8d3 e000 	ldr.w	lr, [r3]
	x2 = c_A * s_j >> 10,
 800d806:	9b04      	ldr	r3, [sp, #16]
    x4 = R1 * x2 - (s_A * x3 >> 10),
 800d808:	ea4f 2aaa 	mov.w	sl, sl, asr #10
	x2 = c_A * s_j >> 10,
 800d80c:	fb03 f106 	mul.w	r1, r3, r6
    x5 = s_A * s_j >> 10,
 800d810:	fb03 f20c 	mul.w	r2, r3, ip
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d814:	4b99      	ldr	r3, [pc, #612]	@ (800da7c <get_donut_cords+0x300>)
    x4 = R1 * x2 - (s_A * x3 >> 10),
 800d816:	ebca 2aa1 	rsb	sl, sl, r1, asr #10
			set_pixel (1, 2048, s_j, s_i, c_j, c_i, s_A, s_B, c_A, c_B, K2, z);
 800d81a:	681f      	ldr	r7, [r3, #0]
    x5 = s_A * s_j >> 10,
 800d81c:	1292      	asrs	r2, r2, #10
    x = 40 + 30 * (c_B * x1 - s_B * x4) / x6,
 800d81e:	fb00 f30e 	mul.w	r3, r0, lr
	x2 = c_A * s_j >> 10,
 800d822:	1289      	asrs	r1, r1, #10
    y = 12 + 15 * (c_B * x4 + s_B * x1) / x6,
 800d824:	fb07 f000 	mul.w	r0, r7, r0
    x = 40 + 30 * (c_B * x1 - s_B * x4) / x6,
 800d828:	fb0a 3317 	mls	r3, sl, r7, r3
    y = 12 + 15 * (c_B * x4 + s_B * x1) / x6,
 800d82c:	fb0a 000e 	mla	r0, sl, lr, r0
    x6 = K2 + R1 * 1024 * x5 + c_A * x3,
 800d830:	ea4f 2a82 	mov.w	sl, r2, lsl #10
    x = 40 + 30 * (c_B * x1 - s_B * x4) / x6,
 800d834:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	x2 = c_A * s_j >> 10,
 800d838:	9103      	str	r1, [sp, #12]
    x6 = K2 + R1 * 1024 * x5 + c_A * x3,
 800d83a:	f50a 0aa0 	add.w	sl, sl, #5242880	@ 0x500000
    y = 12 + 15 * (c_B * x4 + s_B * x1) / x6,
 800d83e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    x = 40 + 30 * (c_B * x1 - s_B * x4) / x6,
 800d842:	005b      	lsls	r3, r3, #1
    x6 = K2 + R1 * 1024 * x5 + c_A * x3,
 800d844:	fb09 a906 	mla	r9, r9, r6, sl
    x = 40 + 30 * (c_B * x1 - s_B * x4) / x6,
 800d848:	fb93 f3f9 	sdiv	r3, r3, r9
    y = 12 + 15 * (c_B * x4 + s_B * x1) / x6,
 800d84c:	fb90 f0f9 	sdiv	r0, r0, r9
	if (y < 22 && y >= 0 && x >= 0 && x < 80 && zz < z[pixel_position])
 800d850:	3328      	adds	r3, #40	@ 0x28
    y = 12 + 15 * (c_B * x4 + s_B * x1) / x6,
 800d852:	300c      	adds	r0, #12
	if (y < 22 && y >= 0 && x >= 0 && x < 80 && zz < z[pixel_position])
 800d854:	2b4f      	cmp	r3, #79	@ 0x4f
 800d856:	d8aa      	bhi.n	800d7ae <get_donut_cords+0x32>
 800d858:	2815      	cmp	r0, #21
 800d85a:	d8a8      	bhi.n	800d7ae <get_donut_cords+0x32>
	int8_t zz = (x6 - K2) >> 15;
 800d85c:	f5a9 09a0 	sub.w	r9, r9, #5242880	@ 0x500000
	if (y < 22 && y >= 0 && x >= 0 && x < 80 && zz < z[pixel_position])
 800d860:	4987      	ldr	r1, [pc, #540]	@ (800da80 <get_donut_cords+0x304>)
	int8_t zz = (x6 - K2) >> 15;
 800d862:	f349 3ac7 	sbfx	sl, r9, #15, #8
	int pixel_position = x + y * 80;
 800d866:	eb00 0980 	add.w	r9, r0, r0, lsl #2
 800d86a:	eb03 1909 	add.w	r9, r3, r9, lsl #4
	if (y < 22 && y >= 0 && x >= 0 && x < 80 && zz < z[pixel_position])
 800d86e:	f911 1009 	ldrsb.w	r1, [r1, r9]
 800d872:	4551      	cmp	r1, sl
 800d874:	dd9b      	ble.n	800d7ae <get_donut_cords+0x32>
    x7 = c_j * s_i >> 10,
 800d876:	eba8 28c5 	sub.w	r8, r8, r5, lsl #11
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d87a:	9906      	ldr	r1, [sp, #24]
 800d87c:	f1cc 0c00 	rsb	ip, ip, #0
 800d880:	4276      	negs	r6, r6
    x7 = c_j * s_i >> 10,
 800d882:	ea4f 28a8 	mov.w	r8, r8, asr #10
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d886:	fb01 f707 	mul.w	r7, r1, r7
 800d88a:	9903      	ldr	r1, [sp, #12]
        int screen_x_start = x * char_block_width;
 800d88c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d890:	fb08 fc0c 	mul.w	ip, r8, ip
 800d894:	12bf      	asrs	r7, r7, #10
 800d896:	fb08 f606 	mul.w	r6, r8, r6
 800d89a:	eb01 21ac 	add.w	r1, r1, ip, asr #10
 800d89e:	fb0e 6611 	mls	r6, lr, r1, r6
        int screen_x_start = x * char_block_width;
 800d8a2:	0059      	lsls	r1, r3, #1
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d8a4:	fb04 6617 	mls	r6, r4, r7, r6
        int screen_y_start = y * char_block_height;
 800d8a8:	eb00 0740 	add.w	r7, r0, r0, lsl #1
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d8ac:	ebc2 22a6 	rsb	r2, r2, r6, asr #10
        int screen_y_start = y * char_block_height;
 800d8b0:	00bf      	lsls	r7, r7, #2
    N = (-c_A * x7 - c_B * ((-s_A * x7 >> 10) + x2) - c_i * (c_j * s_B >> 10) >> 10) - x5 >> 7;
 800d8b2:	11d3      	asrs	r3, r2, #7
		uint32_t pixel_color = pick_color (intensity, intensity, intensity, *Donut.Colorway);
 800d8b4:	4a73      	ldr	r2, [pc, #460]	@ (800da84 <get_donut_cords+0x308>)
		uint8_t intensity = N * 21;
 800d8b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d8ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	r *= filter.red;
 800d8be:	b2de      	uxtb	r6, r3
		uint32_t pixel_color = pick_color (intensity, intensity, intensity, *Donut.Colorway);
 800d8c0:	6953      	ldr	r3, [r2, #20]
	r *= filter.red;
 800d8c2:	ee07 6a90 	vmov	s15, r6
	g *= filter.green;
 800d8c6:	edd3 6a01 	vldr	s13, [r3, #4]
	r *= filter.red;
 800d8ca:	ed93 7a00 	vldr	s14, [r3]
 800d8ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	b *= filter.blue;
 800d8d2:	ed93 6a02 	vldr	s12, [r3, #8]
		z[pixel_position] = zz;
 800d8d6:	4b6a      	ldr	r3, [pc, #424]	@ (800da80 <get_donut_cords+0x304>)
	g *= filter.green;
 800d8d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
		z[pixel_position] = zz;
 800d8dc:	f803 a009 	strb.w	sl, [r3, r9]
	r *= filter.red;
 800d8e0:	ee27 7a87 	vmul.f32	s14, s15, s14
	b *= filter.blue;
 800d8e4:	ee67 7a86 	vmul.f32	s15, s15, s12
	g *= filter.green;
 800d8e8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
	r *= filter.red;
 800d8ec:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	b *= filter.blue;
 800d8f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	g *= filter.green;
 800d8f4:	ee16 2a90 	vmov	r2, s13
	r *= filter.red;
 800d8f8:	ee17 3a10 	vmov	r3, s14
	uint16_t green_565 = (g >> 2) << 5;
 800d8fc:	f3c2 0285 	ubfx	r2, r2, #2, #6
	uint16_t red_565   = (r >> 3) << 11;
 800d900:	f3c3 03c4 	ubfx	r3, r3, #3, #5
	uint16_t green_565 = (g >> 2) << 5;
 800d904:	0152      	lsls	r2, r2, #5
	return red_565 | green_565 | blue_565;
 800d906:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
	b *= filter.blue;
 800d90a:	ee17 3a90 	vmov	r3, s15
	uint16_t blue_565  = (b >> 3);
 800d90e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
	return red_565 | green_565 | blue_565;
 800d912:	4313      	orrs	r3, r2
		if (Donut.ASCII) FLP_Draw_Symbol (b_1, screen_x_start, screen_y_start, pixel_color, intensity);
 800d914:	4a5b      	ldr	r2, [pc, #364]	@ (800da84 <get_donut_cords+0x308>)
 800d916:	7e52      	ldrb	r2, [r2, #25]
 800d918:	2a00      	cmp	r2, #0
 800d91a:	d17d      	bne.n	800da18 <get_donut_cords+0x29c>
					b_1[(screen_x_start + c_x) + (screen_y_start + c_y) * SCREEN_WIDTH] = pixel_color;
 800d91c:	f44f 5cb4 	mov.w	ip, #5760	@ 0x1680
 800d920:	f363 020f 	bfi	r2, r3, #0, #16
 800d924:	3701      	adds	r7, #1
 800d926:	fb0c f000 	mul.w	r0, ip, r0
 800d92a:	f101 0c01 	add.w	ip, r1, #1
 800d92e:	f363 421f 	bfi	r2, r3, #16, #16
 800d932:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 800d936:	4484      	add	ip, r0
 800d938:	4408      	add	r0, r1
 800d93a:	017e      	lsls	r6, r7, #5
 800d93c:	f82b 3010 	strh.w	r3, [fp, r0, lsl #1]
 800d940:	3005      	adds	r0, #5
 800d942:	f84b 201c 	str.w	r2, [fp, ip, lsl #1]
 800d946:	eb0b 0c4c 	add.w	ip, fp, ip, lsl #1
 800d94a:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 800d94e:	f8cc 2004 	str.w	r2, [ip, #4]
 800d952:	f82b 3010 	strh.w	r3, [fp, r0, lsl #1]
 800d956:	f506 73f0 	add.w	r3, r6, #480	@ 0x1e0
 800d95a:	f84b 2017 	str.w	r2, [fp, r7, lsl #1]
 800d95e:	eb0b 0747 	add.w	r7, fp, r7, lsl #1
 800d962:	440b      	add	r3, r1
 800d964:	f506 5087 	add.w	r0, r6, #4320	@ 0x10e0
 800d968:	e9c7 2201 	strd	r2, r2, [r7, #4]
 800d96c:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d970:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d974:	4408      	add	r0, r1
 800d976:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d97a:	f506 7370 	add.w	r3, r6, #960	@ 0x3c0
 800d97e:	440b      	add	r3, r1
 800d980:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d984:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d988:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d98c:	f506 63b4 	add.w	r3, r6, #1440	@ 0x5a0
 800d990:	440b      	add	r3, r1
 800d992:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d996:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d99a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d99e:	f506 63f0 	add.w	r3, r6, #1920	@ 0x780
 800d9a2:	440b      	add	r3, r1
 800d9a4:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d9a8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d9ac:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d9b0:	f506 6316 	add.w	r3, r6, #2400	@ 0x960
 800d9b4:	440b      	add	r3, r1
 800d9b6:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d9ba:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d9be:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d9c2:	f506 6334 	add.w	r3, r6, #2880	@ 0xb40
 800d9c6:	440b      	add	r3, r1
 800d9c8:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d9cc:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d9d0:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d9d4:	f506 6352 	add.w	r3, r6, #3360	@ 0xd20
 800d9d8:	440b      	add	r3, r1
 800d9da:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d9de:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d9e2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d9e6:	f506 6370 	add.w	r3, r6, #3840	@ 0xf00
 800d9ea:	440b      	add	r3, r1
 800d9ec:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800d9f0:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800d9f4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d9f8:	f506 5396 	add.w	r3, r6, #4800	@ 0x12c0
 800d9fc:	f84b 2010 	str.w	r2, [fp, r0, lsl #1]
 800da00:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 800da04:	440b      	add	r3, r1
 800da06:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800da0a:	f84b 2013 	str.w	r2, [fp, r3, lsl #1]
 800da0e:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800da12:	e9c3 2201 	strd	r2, r2, [r3, #4]
			for (int c_y = 0; c_y < char_block_height; c_y++)
 800da16:	e6ca      	b.n	800d7ae <get_donut_cords+0x32>
		if (Donut.ASCII) FLP_Draw_Symbol (b_1, screen_x_start, screen_y_start, pixel_color, intensity);
 800da18:	463a      	mov	r2, r7
 800da1a:	4658      	mov	r0, fp
 800da1c:	9600      	str	r6, [sp, #0]
 800da1e:	f7f3 f807 	bl	8000a30 <FLP_Draw_Symbol>
 800da22:	e6c4      	b.n	800d7ae <get_donut_cords+0x32>
		}
		R(9, 7, c_i, s_i);
 800da24:	9b04      	ldr	r3, [sp, #16]
 800da26:	9806      	ldr	r0, [sp, #24]
 800da28:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800da2c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800da30:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 800da34:	eba0 12e2 	sub.w	r2, r0, r2, asr #7
	for (int i = 0; i < 90; i++)
 800da38:	f1b9 0901 	subs.w	r9, r9, #1
		R(9, 7, c_i, s_i);
 800da3c:	eb03 11e1 	add.w	r1, r3, r1, asr #7
 800da40:	fb02 f302 	mul.w	r3, r2, r2
 800da44:	f5c3 1340 	rsb	r3, r3, #3145728	@ 0x300000
 800da48:	fb01 3311 	mls	r3, r1, r1, r3
 800da4c:	ea4f 23e3 	mov.w	r3, r3, asr #11
 800da50:	fb03 f202 	mul.w	r2, r3, r2
 800da54:	fb01 f303 	mul.w	r3, r1, r3
 800da58:	ea4f 22a2 	mov.w	r2, r2, asr #10
 800da5c:	ea4f 23a3 	mov.w	r3, r3, asr #10
 800da60:	9206      	str	r2, [sp, #24]
 800da62:	9304      	str	r3, [sp, #16]
	for (int i = 0; i < 90; i++)
 800da64:	f47f ae94 	bne.w	800d790 <get_donut_cords+0x14>
	}
}
 800da68:	b009      	add	sp, #36	@ 0x24
 800da6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6e:	bf00      	nop
 800da70:	24000128 	.word	0x24000128
 800da74:	24000fc4 	.word	0x24000fc4
 800da78:	24000fc0 	.word	0x24000fc0
 800da7c:	24000124 	.word	0x24000124
 800da80:	24000fc8 	.word	0x24000fc8
 800da84:	240000fc 	.word	0x240000fc
 800da88:	240016a8 	.word	0x240016a8
 800da8c:	00000000 	.word	0x00000000

0800da90 <AppMain>:


void AppMain()
{
 800da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da94:	ed2d 8b0c 	vpush	{d8-d13}
 800da98:	b09d      	sub	sp, #116	@ 0x74
	TS_Init_t ts_init;
    ts_init.Width = SCREEN_WIDTH;
 800da9a:	f44f 74f0 	mov.w	r4, #480	@ 0x1e0
 800da9e:	f44f 7588 	mov.w	r5, #272	@ 0x110
 800daa2:	2201      	movs	r2, #1
 800daa4:	2305      	movs	r3, #5
    ts_init.Height = SCREEN_HEIGHT;
    ts_init.Orientation = LCD_ORIENTATION_LANDSCAPE;
    ts_init.Accuracy = 5;

    if (BSP_TS_Init(0, &ts_init) != BSP_ERROR_NONE) Error_Handler();
 800daa6:	a90a      	add	r1, sp, #40	@ 0x28
 800daa8:	2000      	movs	r0, #0
    ts_init.Width = SCREEN_WIDTH;
 800daaa:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 800daae:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (BSP_TS_Init(0, &ts_init) != BSP_ERROR_NONE) Error_Handler();
 800dab2:	f7ff fb29 	bl	800d108 <BSP_TS_Init>
 800dab6:	2800      	cmp	r0, #0
 800dab8:	f040 8163 	bne.w	800dd82 <AppMain+0x2f2>
	HAL_DMA2D_Start (&hdma2d, 0x0000, (uint32_t) b_1, SCREEN_WIDTH, SCREEN_HEIGHT);
 800dabc:	2300      	movs	r3, #0
 800dabe:	4eba      	ldr	r6, [pc, #744]	@ (800dda8 <AppMain+0x318>)
 800dac0:	4fba      	ldr	r7, [pc, #744]	@ (800ddac <AppMain+0x31c>)
 800dac2:	4dbb      	ldr	r5, [pc, #748]	@ (800ddb0 <AppMain+0x320>)
 800dac4:	f8df b310 	ldr.w	fp, [pc, #784]	@ 800ddd8 <AppMain+0x348>
 800dac8:	f8df a310 	ldr.w	sl, [pc, #784]	@ 800dddc <AppMain+0x34c>
 800dacc:	4cb9      	ldr	r4, [pc, #740]	@ (800ddb4 <AppMain+0x324>)
 800dace:	9305      	str	r3, [sp, #20]
	rgb.green = (sin (RGB_angle + 2.0944) * 0.5) + 0.5;
 800dad0:	ed9f cbad 	vldr	d12, [pc, #692]	@ 800dd88 <AppMain+0x2f8>
	rgb.blue = (sin (RGB_angle + 4.18888) * 0.5) + 0.5;
 800dad4:	ed9f bbae 	vldr	d11, [pc, #696]	@ 800dd90 <AppMain+0x300>
	if (RGB_angle > 2 * PI) RGB_angle -= 2 * PI;
 800dad8:	ed9f 9baf 	vldr	d9, [pc, #700]	@ 800dd98 <AppMain+0x308>
	RGB_angle += 0.05;
 800dadc:	ed9f abb0 	vldr	d10, [pc, #704]	@ 800dda0 <AppMain+0x310>
    uint8_t prev_touch_detected = 0;


    for (;;)
    {
    	BSP_TS_GetState(0, &TS_State);
 800dae0:	a907      	add	r1, sp, #28
 800dae2:	2000      	movs	r0, #0
 800dae4:	f7ff fb9e 	bl	800d224 <BSP_TS_GetState>
	hdma2d.Init.Mode = DMA2D_R2M;
 800dae8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
	if(HAL_DMA2D_Init (&hdma2d) != HAL_OK) Error_Handler();
 800daec:	4638      	mov	r0, r7
	hdma2d.Init.Mode = DMA2D_R2M;
 800daee:	607b      	str	r3, [r7, #4]
	if(HAL_DMA2D_Init (&hdma2d) != HAL_OK) Error_Handler();
 800daf0:	f000 fa60 	bl	800dfb4 <HAL_DMA2D_Init>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	f040 80d2 	bne.w	800dc9e <AppMain+0x20e>
	HAL_DMA2D_Start (&hdma2d, 0x0000, (uint32_t) b_1, SCREEN_WIDTH, SCREEN_HEIGHT);
 800dafa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800dafe:	4632      	mov	r2, r6
 800db00:	2100      	movs	r1, #0
 800db02:	4638      	mov	r0, r7
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800db0a:	f000 fa91 	bl	800e030 <HAL_DMA2D_Start>
	HAL_DMA2D_PollForTransfer (&hdma2d, 10);
 800db0e:	210a      	movs	r1, #10
 800db10:	4638      	mov	r0, r7
 800db12:	f000 fae7 	bl	800e0e4 <HAL_DMA2D_PollForTransfer>

    	reset_frame ();

		if (Donut.RGB) change_RGB ();
 800db16:	7e2b      	ldrb	r3, [r5, #24]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f040 8091 	bne.w	800dc40 <AppMain+0x1b0>
	rgb.red = (sin (RGB_angle) * 0.5) + 0.5;
 800db1e:	4ba6      	ldr	r3, [pc, #664]	@ (800ddb8 <AppMain+0x328>)
 800db20:	ed93 8b00 	vldr	d8, [r3]
	if (RGB_angle > 2 * PI) RGB_angle -= 2 * PI;
 800db24:	eeb4 8bc9 	vcmpe.f64	d8, d9
	RGB_angle += 0.05;
 800db28:	4ba3      	ldr	r3, [pc, #652]	@ (800ddb8 <AppMain+0x328>)
		update_angle ();

		memset (z, 127, 1760);
 800db2a:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 800db2e:	217f      	movs	r1, #127	@ 0x7f
 800db30:	48a2      	ldr	r0, [pc, #648]	@ (800ddbc <AppMain+0x32c>)
	if (RGB_angle > 2 * PI) RGB_angle -= 2 * PI;
 800db32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	RGB_angle += 0.05;
 800db36:	bfd4      	ite	le
 800db38:	ee38 8b0a 	vaddle.f64	d8, d8, d10
	if (RGB_angle > 2 * PI) RGB_angle -= 2 * PI;
 800db3c:	ee38 8b49 	vsubgt.f64	d8, d8, d9
	RGB_angle += 0.05;
 800db40:	ed83 8b00 	vstr	d8, [r3]
		memset (z, 127, 1760);
 800db44:	f004 f82e 	bl	8011ba4 <memset>

		get_donut_cords ();
 800db48:	f7ff fe18 	bl	800d77c <get_donut_cords>


		if (TS_State.TouchDetected && !prev_touch_detected)
 800db4c:	9a05      	ldr	r2, [sp, #20]
 800db4e:	9b07      	ldr	r3, [sp, #28]
 800db50:	b912      	cbnz	r2, 800db58 <AppMain+0xc8>
 800db52:	2b00      	cmp	r3, #0
 800db54:	f040 80a6 	bne.w	800dca4 <AppMain+0x214>

		    // Draw where the system thinks you touched
		    FLP_Draw_Rectangle(b_1, x_corrected-2, y_corrected-2, 4, 4, 0xF800);
		}

		prev_touch_detected = TS_State.TouchDetected;
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	9305      	str	r3, [sp, #20]


        while (blockRendering);
 800db5c:	6823      	ldr	r3, [r4, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d1fc      	bne.n	800db5c <AppMain+0xcc>
        blockRendering = 1;
 800db62:	2301      	movs	r3, #1

		HAL_Delay (16);
 800db64:	2010      	movs	r0, #16
        blockRendering = 1;
 800db66:	6023      	str	r3, [r4, #0]
		HAL_Delay (16);
 800db68:	f000 f9a6 	bl	800deb8 <HAL_Delay>

		if (Donut.Spin_Rate > 0)
 800db6c:	68eb      	ldr	r3, [r5, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	dd3a      	ble.n	800dbe8 <AppMain+0x158>
		{
	        R(5, 7, c_A, s_A);
 800db72:	4b93      	ldr	r3, [pc, #588]	@ (800ddc0 <AppMain+0x330>)
 800db74:	f8db 1000 	ldr.w	r1, [fp]
 800db78:	681a      	ldr	r2, [r3, #0]
	        R(5, 8, c_B, s_B);
 800db7a:	f8da c000 	ldr.w	ip, [sl]
	        R(5, 7, c_A, s_A);
 800db7e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
	        R(5, 8, c_B, s_B);
 800db82:	4b90      	ldr	r3, [pc, #576]	@ (800ddc4 <AppMain+0x334>)
	        R(5, 7, c_A, s_A);
 800db84:	eba1 10e0 	sub.w	r0, r1, r0, asr #7
	        R(5, 8, c_B, s_B);
 800db88:	681b      	ldr	r3, [r3, #0]
	        R(5, 7, c_A, s_A);
 800db8a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800db8e:	eb02 12e1 	add.w	r2, r2, r1, asr #7
	        R(5, 8, c_B, s_B);
 800db92:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800db96:	eba3 2121 	sub.w	r1, r3, r1, asr #8
 800db9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800db9e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
	        R(5, 7, c_A, s_A);
 800dba2:	fb00 fc00 	mul.w	ip, r0, r0
 800dba6:	f5cc 1c40 	rsb	ip, ip, #3145728	@ 0x300000
 800dbaa:	fb02 cc12 	mls	ip, r2, r2, ip
 800dbae:	ea4f 2cec 	mov.w	ip, ip, asr #11
 800dbb2:	fb0c f000 	mul.w	r0, ip, r0
 800dbb6:	fb0c f202 	mul.w	r2, ip, r2
 800dbba:	1280      	asrs	r0, r0, #10
 800dbbc:	1292      	asrs	r2, r2, #10
 800dbbe:	f8cb 0000 	str.w	r0, [fp]
 800dbc2:	487f      	ldr	r0, [pc, #508]	@ (800ddc0 <AppMain+0x330>)
 800dbc4:	6002      	str	r2, [r0, #0]
	        R(5, 8, c_B, s_B);
 800dbc6:	fb01 f201 	mul.w	r2, r1, r1
 800dbca:	f5c2 1240 	rsb	r2, r2, #3145728	@ 0x300000
 800dbce:	fb03 2213 	mls	r2, r3, r3, r2
 800dbd2:	12d2      	asrs	r2, r2, #11
 800dbd4:	fb02 f101 	mul.w	r1, r2, r1
 800dbd8:	fb02 f303 	mul.w	r3, r2, r3
 800dbdc:	4a79      	ldr	r2, [pc, #484]	@ (800ddc4 <AppMain+0x334>)
 800dbde:	1289      	asrs	r1, r1, #10
 800dbe0:	129b      	asrs	r3, r3, #10
 800dbe2:	6011      	str	r1, [r2, #0]
 800dbe4:	f8ca 3000 	str.w	r3, [sl]
		}

		Donut.donuts_count += Donut.donuts_passive;
 800dbe8:	682b      	ldr	r3, [r5, #0]
	FLP_Draw_Box (b_1, 20, 200, 4, 50, 50, UTIL_LCD_COLOR_WHITE);
 800dbea:	f04f 39ff 	mov.w	r9, #4294967295
		Donut.donuts_count += Donut.donuts_passive;
 800dbee:	68aa      	ldr	r2, [r5, #8]
	FLP_Draw_Box (b_1, 20, 200, 4, 50, 50, UTIL_LCD_COLOR_WHITE);
 800dbf0:	f04f 0832 	mov.w	r8, #50	@ 0x32
 800dbf4:	4630      	mov	r0, r6
 800dbf6:	2114      	movs	r1, #20
		Donut.donuts_count += Donut.donuts_passive;
 800dbf8:	4413      	add	r3, r2
	FLP_Draw_Box (b_1, 20, 200, 4, 50, 50, UTIL_LCD_COLOR_WHITE);
 800dbfa:	22c8      	movs	r2, #200	@ 0xc8
		Donut.donuts_count += Donut.donuts_passive;
 800dbfc:	602b      	str	r3, [r5, #0]
	FLP_Draw_Box (b_1, 20, 200, 4, 50, 50, UTIL_LCD_COLOR_WHITE);
 800dbfe:	2304      	movs	r3, #4
 800dc00:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc04:	e9cd 8800 	strd	r8, r8, [sp]
 800dc08:	f7f2 fe84 	bl	8000914 <FLP_Draw_Box>
	FLP_Draw_String (b_1, "DONUT TOUCH ME", 5, 5, UTIL_LCD_COLOR_WHITE);
 800dc0c:	2305      	movs	r3, #5
 800dc0e:	4630      	mov	r0, r6
 800dc10:	496d      	ldr	r1, [pc, #436]	@ (800ddc8 <AppMain+0x338>)
 800dc12:	461a      	mov	r2, r3
 800dc14:	f8cd 9000 	str.w	r9, [sp]
 800dc18:	f7f3 f862 	bl	8000ce0 <FLP_Draw_String>
    sprintf(counter, "%lu DONUTS TOUCHED", Donut.donuts_count);
 800dc1c:	682a      	ldr	r2, [r5, #0]
 800dc1e:	496b      	ldr	r1, [pc, #428]	@ (800ddcc <AppMain+0x33c>)
 800dc20:	a80f      	add	r0, sp, #60	@ 0x3c
 800dc22:	f003 ff9d 	bl	8011b60 <siprintf>
	FLP_Draw_String (b_1, counter, 5, 50, UTIL_LCD_COLOR_WHITE);
 800dc26:	4643      	mov	r3, r8
 800dc28:	2205      	movs	r2, #5
 800dc2a:	a90f      	add	r1, sp, #60	@ 0x3c
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	f8cd 9000 	str.w	r9, [sp]
 800dc32:	f7f3 f855 	bl	8000ce0 <FLP_Draw_String>
	draw_upgrades ();
 800dc36:	f7ff fccb 	bl	800d5d0 <draw_upgrades>
	draw_donut ();
 800dc3a:	f7ff fc83 	bl	800d544 <draw_donut>
}
 800dc3e:	e74f      	b.n	800dae0 <AppMain+0x50>
	rgb.red = (sin (RGB_angle) * 0.5) + 0.5;
 800dc40:	4b5d      	ldr	r3, [pc, #372]	@ (800ddb8 <AppMain+0x328>)
 800dc42:	eeb6 db00 	vmov.f64	d13, #96	@ 0x3f000000  0.5
 800dc46:	ed93 8b00 	vldr	d8, [r3]
 800dc4a:	eeb0 0b48 	vmov.f64	d0, d8
 800dc4e:	f004 fc27 	bl	80124a0 <sin>
 800dc52:	eeb0 7b4d 	vmov.f64	d7, d13
 800dc56:	eeb0 6b40 	vmov.f64	d6, d0
 800dc5a:	4b5d      	ldr	r3, [pc, #372]	@ (800ddd0 <AppMain+0x340>)
	rgb.green = (sin (RGB_angle + 2.0944) * 0.5) + 0.5;
 800dc5c:	ee38 0b0c 	vadd.f64	d0, d8, d12
	rgb.red = (sin (RGB_angle) * 0.5) + 0.5;
 800dc60:	ee06 7b0d 	vmla.f64	d7, d6, d13
 800dc64:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800dc68:	ed83 7a00 	vstr	s14, [r3]
	rgb.green = (sin (RGB_angle + 2.0944) * 0.5) + 0.5;
 800dc6c:	f004 fc18 	bl	80124a0 <sin>
 800dc70:	eeb0 7b4d 	vmov.f64	d7, d13
 800dc74:	4b56      	ldr	r3, [pc, #344]	@ (800ddd0 <AppMain+0x340>)
 800dc76:	eeb0 6b40 	vmov.f64	d6, d0
	rgb.blue = (sin (RGB_angle + 4.18888) * 0.5) + 0.5;
 800dc7a:	ee38 0b0b 	vadd.f64	d0, d8, d11
	rgb.green = (sin (RGB_angle + 2.0944) * 0.5) + 0.5;
 800dc7e:	ee06 7b0d 	vmla.f64	d7, d6, d13
 800dc82:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800dc86:	ed83 7a01 	vstr	s14, [r3, #4]
	rgb.blue = (sin (RGB_angle + 4.18888) * 0.5) + 0.5;
 800dc8a:	f004 fc09 	bl	80124a0 <sin>
 800dc8e:	ee00 db0d 	vmla.f64	d13, d0, d13
 800dc92:	4b4f      	ldr	r3, [pc, #316]	@ (800ddd0 <AppMain+0x340>)
 800dc94:	eeb7 dbcd 	vcvt.f32.f64	s26, d13
 800dc98:	ed83 da02 	vstr	s26, [r3, #8]
}
 800dc9c:	e742      	b.n	800db24 <AppMain+0x94>
	if(HAL_DMA2D_Init (&hdma2d) != HAL_OK) Error_Handler();
 800dc9e:	f7fd fed5 	bl	800ba4c <Error_Handler>
 800dca2:	e72a      	b.n	800dafa <AppMain+0x6a>
			int x_corrected = TS_State.TouchY, y_corrected = TS_State.TouchX;
 800dca4:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
			if (x_corrected > 100 && x_corrected < 380 && y_corrected > 50 && y_corrected < 220)
 800dca8:	f1a8 0365 	sub.w	r3, r8, #101	@ 0x65
 800dcac:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 800dcb0:	d862      	bhi.n	800dd78 <AppMain+0x2e8>
 800dcb2:	f1a9 0333 	sub.w	r3, r9, #51	@ 0x33
 800dcb6:	2ba8      	cmp	r3, #168	@ 0xa8
 800dcb8:	d85e      	bhi.n	800dd78 <AppMain+0x2e8>
				Donut.donuts_count += Donut.donuts_per_tap;
 800dcba:	e9d5 3200 	ldrd	r3, r2, [r5]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	602b      	str	r3, [r5, #0]
				if (!Donut.Spin_Rate)
 800dcc2:	68eb      	ldr	r3, [r5, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d13a      	bne.n	800dd3e <AppMain+0x2ae>
                    R(5, 7, c_A, s_A);
 800dcc8:	4b3d      	ldr	r3, [pc, #244]	@ (800ddc0 <AppMain+0x330>)
 800dcca:	f8db 1000 	ldr.w	r1, [fp]
 800dcce:	681a      	ldr	r2, [r3, #0]
                    R(5, 8, c_B, s_B);
 800dcd0:	f8da c000 	ldr.w	ip, [sl]
                    R(5, 7, c_A, s_A);
 800dcd4:	eb02 0082 	add.w	r0, r2, r2, lsl #2
                    R(5, 8, c_B, s_B);
 800dcd8:	4b3a      	ldr	r3, [pc, #232]	@ (800ddc4 <AppMain+0x334>)
                    R(5, 7, c_A, s_A);
 800dcda:	eba1 10e0 	sub.w	r0, r1, r0, asr #7
                    R(5, 8, c_B, s_B);
 800dcde:	681b      	ldr	r3, [r3, #0]
                    R(5, 7, c_A, s_A);
 800dce0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800dce4:	eb02 12e1 	add.w	r2, r2, r1, asr #7
                    R(5, 8, c_B, s_B);
 800dce8:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800dcec:	eba3 2121 	sub.w	r1, r3, r1, asr #8
 800dcf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dcf4:	eb0c 2323 	add.w	r3, ip, r3, asr #8
                    R(5, 7, c_A, s_A);
 800dcf8:	fb00 fc00 	mul.w	ip, r0, r0
 800dcfc:	f5cc 1c40 	rsb	ip, ip, #3145728	@ 0x300000
 800dd00:	fb02 cc12 	mls	ip, r2, r2, ip
 800dd04:	ea4f 2cec 	mov.w	ip, ip, asr #11
 800dd08:	fb0c f000 	mul.w	r0, ip, r0
 800dd0c:	fb0c f202 	mul.w	r2, ip, r2
 800dd10:	1280      	asrs	r0, r0, #10
 800dd12:	1292      	asrs	r2, r2, #10
 800dd14:	f8cb 0000 	str.w	r0, [fp]
 800dd18:	4829      	ldr	r0, [pc, #164]	@ (800ddc0 <AppMain+0x330>)
 800dd1a:	6002      	str	r2, [r0, #0]
                    R(5, 8, c_B, s_B);
 800dd1c:	fb01 f201 	mul.w	r2, r1, r1
 800dd20:	f5c2 1240 	rsb	r2, r2, #3145728	@ 0x300000
 800dd24:	fb03 2213 	mls	r2, r3, r3, r2
 800dd28:	12d2      	asrs	r2, r2, #11
 800dd2a:	fb02 f101 	mul.w	r1, r2, r1
 800dd2e:	fb02 f303 	mul.w	r3, r2, r3
 800dd32:	4a24      	ldr	r2, [pc, #144]	@ (800ddc4 <AppMain+0x334>)
 800dd34:	1289      	asrs	r1, r1, #10
 800dd36:	129b      	asrs	r3, r3, #10
 800dd38:	6011      	str	r1, [r2, #0]
 800dd3a:	f8ca 3000 	str.w	r3, [sl]
		    sprintf(debug, "X:%d Y:%d", x_corrected, y_corrected);
 800dd3e:	464b      	mov	r3, r9
 800dd40:	4642      	mov	r2, r8
 800dd42:	4924      	ldr	r1, [pc, #144]	@ (800ddd4 <AppMain+0x344>)
 800dd44:	a80f      	add	r0, sp, #60	@ 0x3c
 800dd46:	f003 ff0b 	bl	8011b60 <siprintf>
		    FLP_Draw_String(b_1, debug, 0, 100, 0xFFFF);
 800dd4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd4e:	2200      	movs	r2, #0
 800dd50:	a90f      	add	r1, sp, #60	@ 0x3c
 800dd52:	4630      	mov	r0, r6
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	2364      	movs	r3, #100	@ 0x64
 800dd58:	f7f2 ffc2 	bl	8000ce0 <FLP_Draw_String>
		    FLP_Draw_Rectangle(b_1, x_corrected-2, y_corrected-2, 4, 4, 0xF800);
 800dd5c:	2304      	movs	r3, #4
 800dd5e:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800dd62:	f1a9 0202 	sub.w	r2, r9, #2
 800dd66:	f1a8 0102 	sub.w	r1, r8, #2
 800dd6a:	e9cd 3000 	strd	r3, r0, [sp]
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f7f2 fd7a 	bl	8000868 <FLP_Draw_Rectangle>
		prev_touch_detected = TS_State.TouchDetected;
 800dd74:	9b07      	ldr	r3, [sp, #28]
 800dd76:	e6ef      	b.n	800db58 <AppMain+0xc8>
			else check_if_upgrade_clicked(x_corrected, y_corrected);
 800dd78:	4649      	mov	r1, r9
 800dd7a:	4640      	mov	r0, r8
 800dd7c:	f7ff fbaa 	bl	800d4d4 <check_if_upgrade_clicked>
 800dd80:	e7dd      	b.n	800dd3e <AppMain+0x2ae>
    if (BSP_TS_Init(0, &ts_init) != BSP_ERROR_NONE) Error_Handler();
 800dd82:	f7fd fe63 	bl	800ba4c <Error_Handler>
 800dd86:	e699      	b.n	800dabc <AppMain+0x2c>
 800dd88:	c985f06f 	.word	0xc985f06f
 800dd8c:	4000c154 	.word	0x4000c154
 800dd90:	c23b7953 	.word	0xc23b7953
 800dd94:	4010c169 	.word	0x4010c169
 800dd98:	2110fbb7 	.word	0x2110fbb7
 800dd9c:	4018eec8 	.word	0x4018eec8
 800dda0:	9999999a 	.word	0x9999999a
 800dda4:	3fa99999 	.word	0x3fa99999
 800dda8:	240016a8 	.word	0x240016a8
 800ddac:	240001c0 	.word	0x240001c0
 800ddb0:	240000fc 	.word	0x240000fc
 800ddb4:	240001bc 	.word	0x240001bc
 800ddb8:	24000fb8 	.word	0x24000fb8
 800ddbc:	24000fc8 	.word	0x24000fc8
 800ddc0:	24000128 	.word	0x24000128
 800ddc4:	24000fc0 	.word	0x24000fc0
 800ddc8:	08013068 	.word	0x08013068
 800ddcc:	08013078 	.word	0x08013078
 800ddd0:	24000118 	.word	0x24000118
 800ddd4:	0801308c 	.word	0x0801308c
 800ddd8:	24000fc4 	.word	0x24000fc4
 800dddc:	24000124 	.word	0x24000124

0800dde0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800dde0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800de18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800dde4:	f7ff fad8 	bl	800d398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800dde8:	480c      	ldr	r0, [pc, #48]	@ (800de1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ddea:	490d      	ldr	r1, [pc, #52]	@ (800de20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ddec:	4a0d      	ldr	r2, [pc, #52]	@ (800de24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ddee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ddf0:	e002      	b.n	800ddf8 <LoopCopyDataInit>

0800ddf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ddf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ddf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ddf6:	3304      	adds	r3, #4

0800ddf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ddf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ddfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ddfc:	d3f9      	bcc.n	800ddf2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ddfe:	4a0a      	ldr	r2, [pc, #40]	@ (800de28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800de00:	4c0a      	ldr	r4, [pc, #40]	@ (800de2c <LoopFillZerobss+0x22>)
  movs r3, #0
 800de02:	2300      	movs	r3, #0
  b LoopFillZerobss
 800de04:	e001      	b.n	800de0a <LoopFillZerobss>

0800de06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800de06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800de08:	3204      	adds	r2, #4

0800de0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800de0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800de0c:	d3fb      	bcc.n	800de06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800de0e:	f003 fed7 	bl	8011bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800de12:	f7fd fe21 	bl	800ba58 <main>
  bx  lr
 800de16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800de18:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800de1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800de20:	24000184 	.word	0x24000184
  ldr r2, =_sidata
 800de24:	08013338 	.word	0x08013338
  ldr r2, =_sbss
 800de28:	24000188 	.word	0x24000188
  ldr r4, =_ebss
 800de2c:	24041440 	.word	0x24041440

0800de30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800de30:	e7fe      	b.n	800de30 <ADC3_IRQHandler>
	...

0800de34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800de34:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800de36:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800de38:	4c12      	ldr	r4, [pc, #72]	@ (800de84 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800de3a:	f000 f85d 	bl	800def8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800de3e:	f002 f809 	bl	800fe54 <HAL_RCC_GetSysClockFreq>
 800de42:	4b11      	ldr	r3, [pc, #68]	@ (800de88 <HAL_Init+0x54>)
 800de44:	4911      	ldr	r1, [pc, #68]	@ (800de8c <HAL_Init+0x58>)
 800de46:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800de48:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800de4a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800de4e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800de52:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800de54:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800de56:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800de5a:	490d      	ldr	r1, [pc, #52]	@ (800de90 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800de5c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800de60:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800de62:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800de66:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800de68:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800de6a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800de6c:	f003 fd84 	bl	8011978 <HAL_InitTick>
 800de70:	b110      	cbz	r0, 800de78 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800de72:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800de74:	4620      	mov	r0, r4
 800de76:	bd10      	pop	{r4, pc}
 800de78:	4604      	mov	r4, r0
  HAL_MspInit();
 800de7a:	f7ff fa33 	bl	800d2e4 <HAL_MspInit>
}
 800de7e:	4620      	mov	r0, r4
 800de80:	bd10      	pop	{r4, pc}
 800de82:	bf00      	nop
 800de84:	24000030 	.word	0x24000030
 800de88:	58024400 	.word	0x58024400
 800de8c:	080130ec 	.word	0x080130ec
 800de90:	24000034 	.word	0x24000034

0800de94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800de94:	4a03      	ldr	r2, [pc, #12]	@ (800dea4 <HAL_IncTick+0x10>)
 800de96:	4b04      	ldr	r3, [pc, #16]	@ (800dea8 <HAL_IncTick+0x14>)
 800de98:	6811      	ldr	r1, [r2, #0]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	440b      	add	r3, r1
 800de9e:	6013      	str	r3, [r2, #0]
}
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop
 800dea4:	240412a8 	.word	0x240412a8
 800dea8:	2400012c 	.word	0x2400012c

0800deac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800deac:	4b01      	ldr	r3, [pc, #4]	@ (800deb4 <HAL_GetTick+0x8>)
 800deae:	6818      	ldr	r0, [r3, #0]
}
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	240412a8 	.word	0x240412a8

0800deb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800deb8:	b538      	push	{r3, r4, r5, lr}
 800deba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800debc:	f7ff fff6 	bl	800deac <HAL_GetTick>
 800dec0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800dec2:	1c63      	adds	r3, r4, #1
 800dec4:	d002      	beq.n	800decc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800dec6:	4b04      	ldr	r3, [pc, #16]	@ (800ded8 <HAL_Delay+0x20>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800decc:	f7ff ffee 	bl	800deac <HAL_GetTick>
 800ded0:	1b40      	subs	r0, r0, r5
 800ded2:	42a0      	cmp	r0, r4
 800ded4:	d3fa      	bcc.n	800decc <HAL_Delay+0x14>
  {
  }
}
 800ded6:	bd38      	pop	{r3, r4, r5, pc}
 800ded8:	2400012c 	.word	0x2400012c

0800dedc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800dedc:	4b01      	ldr	r3, [pc, #4]	@ (800dee4 <HAL_GetREVID+0x8>)
 800dede:	6818      	ldr	r0, [r3, #0]
}
 800dee0:	0c00      	lsrs	r0, r0, #16
 800dee2:	4770      	bx	lr
 800dee4:	5c001000 	.word	0x5c001000

0800dee8 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800dee8:	4a02      	ldr	r2, [pc, #8]	@ (800def4 <HAL_EnableCompensationCell+0xc>)
 800deea:	6a13      	ldr	r3, [r2, #32]
 800deec:	f043 0301 	orr.w	r3, r3, #1
 800def0:	6213      	str	r3, [r2, #32]
}
 800def2:	4770      	bx	lr
 800def4:	58000400 	.word	0x58000400

0800def8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800def8:	4906      	ldr	r1, [pc, #24]	@ (800df14 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800defa:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800defe:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800df00:	4b05      	ldr	r3, [pc, #20]	@ (800df18 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800df02:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800df04:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800df08:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800df0c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800df0e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800df10:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800df12:	4770      	bx	lr
 800df14:	e000ed00 	.word	0xe000ed00
 800df18:	05fa0000 	.word	0x05fa0000

0800df1c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800df1c:	4b1a      	ldr	r3, [pc, #104]	@ (800df88 <HAL_NVIC_SetPriority+0x6c>)
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800df24:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800df26:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800df2a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800df2e:	f1be 0f04 	cmp.w	lr, #4
 800df32:	bf28      	it	cs
 800df34:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800df38:	f1bc 0f06 	cmp.w	ip, #6
 800df3c:	d91a      	bls.n	800df74 <HAL_NVIC_SetPriority+0x58>
 800df3e:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800df42:	f04f 33ff 	mov.w	r3, #4294967295
 800df46:	fa03 f30c 	lsl.w	r3, r3, ip
 800df4a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800df4e:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800df52:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800df54:	fa03 f30e 	lsl.w	r3, r3, lr
 800df58:	ea21 0303 	bic.w	r3, r1, r3
 800df5c:	fa03 f30c 	lsl.w	r3, r3, ip
 800df60:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df64:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800df68:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800df6a:	db06      	blt.n	800df7a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df6c:	4a07      	ldr	r2, [pc, #28]	@ (800df8c <HAL_NVIC_SetPriority+0x70>)
 800df6e:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800df70:	f85d fb04 	ldr.w	pc, [sp], #4
 800df74:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800df76:	4694      	mov	ip, r2
 800df78:	e7e9      	b.n	800df4e <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df7a:	f000 000f 	and.w	r0, r0, #15
 800df7e:	4a04      	ldr	r2, [pc, #16]	@ (800df90 <HAL_NVIC_SetPriority+0x74>)
 800df80:	5413      	strb	r3, [r2, r0]
 800df82:	f85d fb04 	ldr.w	pc, [sp], #4
 800df86:	bf00      	nop
 800df88:	e000ed00 	.word	0xe000ed00
 800df8c:	e000e400 	.word	0xe000e400
 800df90:	e000ed14 	.word	0xe000ed14

0800df94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800df94:	2800      	cmp	r0, #0
 800df96:	db07      	blt.n	800dfa8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800df98:	2301      	movs	r3, #1
 800df9a:	f000 011f 	and.w	r1, r0, #31
 800df9e:	4a03      	ldr	r2, [pc, #12]	@ (800dfac <HAL_NVIC_EnableIRQ+0x18>)
 800dfa0:	0940      	lsrs	r0, r0, #5
 800dfa2:	408b      	lsls	r3, r1
 800dfa4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	e000e100 	.word	0xe000e100

0800dfb0 <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop

0800dfb4 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d035      	beq.n	800e024 <HAL_DMA2D_Init+0x70>
{
 800dfb8:	b538      	push	{r3, r4, r5, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800dfba:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800dfc4:	b34b      	cbz	r3, 800e01a <HAL_DMA2D_Init+0x66>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800dfc6:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800dfc8:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800dfca:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800dfcc:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800dfd0:	69e1      	ldr	r1, [r4, #28]
 800dfd2:	681d      	ldr	r5, [r3, #0]
 800dfd4:	4814      	ldr	r0, [pc, #80]	@ (800e028 <HAL_DMA2D_Init+0x74>)
 800dfd6:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800dfd8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800dfda:	4028      	ands	r0, r5
 800dfdc:	4301      	orrs	r1, r0
 800dfde:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800dfe0:	69a1      	ldr	r1, [r4, #24]
 800dfe2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800dfe4:	430a      	orrs	r2, r1
 800dfe6:	4911      	ldr	r1, [pc, #68]	@ (800e02c <HAL_DMA2D_Init+0x78>)
 800dfe8:	4001      	ands	r1, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800dfea:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800dfec:	430a      	orrs	r2, r1
 800dfee:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800dff0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800dff2:	f36f 010f 	bfc	r1, #0, #16
 800dff6:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800dff8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800dffc:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800dffe:	0552      	lsls	r2, r2, #21
 800e000:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e002:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800e006:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800e00a:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800e00c:	430a      	orrs	r2, r1
 800e00e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800e010:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800e012:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800e014:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 800e018:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800e01a:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800e01e:	f7ff ffc7 	bl	800dfb0 <HAL_DMA2D_MspInit>
 800e022:	e7d0      	b.n	800dfc6 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 800e024:	2001      	movs	r0, #1
}
 800e026:	4770      	bx	lr
 800e028:	fff8ffbf 	.word	0xfff8ffbf
 800e02c:	fffffef8 	.word	0xfffffef8

0800e030 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800e030:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800e032:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800e036:	2c01      	cmp	r4, #1
 800e038:	d039      	beq.n	800e0ae <HAL_DMA2D_Start+0x7e>
 800e03a:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800e03c:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 800e03e:	f880 4060 	strb.w	r4, [r0, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800e042:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800e044:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800e048:	f880 4061 	strb.w	r4, [r0, #97]	@ 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800e04c:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800e050:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800e052:	f5b6 3f40 	cmp.w	r6, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800e056:	f005 4c40 	and.w	ip, r5, #3221225472	@ 0xc0000000
 800e05a:	ea43 030c 	orr.w	r3, r3, ip
 800e05e:	6463      	str	r3, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800e060:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800e062:	d00a      	beq.n	800e07a <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800e064:	f5b6 2f80 	cmp.w	r6, #262144	@ 0x40000
 800e068:	d024      	beq.n	800e0b4 <HAL_DMA2D_Start+0x84>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800e06a:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800e06c:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800e06e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800e070:	f043 0301 	orr.w	r3, r3, #1
 800e074:	6023      	str	r3, [r4, #0]
}
 800e076:	bc70      	pop	{r4, r5, r6}
 800e078:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800e07a:	6882      	ldr	r2, [r0, #8]
 800e07c:	f001 467f 	and.w	r6, r1, #4278190080	@ 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800e080:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800e084:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800e088:	b2c8      	uxtb	r0, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800e08a:	2a03      	cmp	r2, #3
 800e08c:	d81f      	bhi.n	800e0ce <HAL_DMA2D_Start+0x9e>
 800e08e:	e8df f002 	tbb	[pc, r2]
 800e092:	1b0c      	.short	0x1b0c
 800e094:	0213      	.short	0x0213
      tmp2 = (tmp2 >> 19U);
 800e096:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800e098:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800e09a:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800e09c:	0ff6      	lsrs	r6, r6, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800e09e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800e0a2:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800e0a6:	ea43 31c6 	orr.w	r1, r3, r6, lsl #15
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800e0aa:	63a1      	str	r1, [r4, #56]	@ 0x38
 800e0ac:	e7de      	b.n	800e06c <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 800e0ae:	2002      	movs	r0, #2
}
 800e0b0:	bc70      	pop	{r4, r5, r6}
 800e0b2:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800e0b4:	6161      	str	r1, [r4, #20]
 800e0b6:	e7d9      	b.n	800e06c <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 800e0b8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 800e0ba:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800e0bc:	02db      	lsls	r3, r3, #11
 800e0be:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800e0c2:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 800e0c6:	e7f0      	b.n	800e0aa <HAL_DMA2D_Start+0x7a>
      tmp = (tmp3 | tmp2 | tmp4);
 800e0c8:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800e0cc:	e7ed      	b.n	800e0aa <HAL_DMA2D_Start+0x7a>
      tmp2 = (tmp2 >> 20U);
 800e0ce:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800e0d0:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800e0d2:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800e0d4:	0f36      	lsrs	r6, r6, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800e0d6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800e0da:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800e0de:	ea43 3106 	orr.w	r1, r3, r6, lsl #12
 800e0e2:	e7e2      	b.n	800e0aa <HAL_DMA2D_Start+0x7a>

0800e0e4 <HAL_DMA2D_PollForTransfer>:
{
 800e0e4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800e0e6:	2300      	movs	r3, #0
{
 800e0e8:	b082      	sub	sp, #8
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 800e0ee:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800e0f0:	6803      	ldr	r3, [r0, #0]
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	07d2      	lsls	r2, r2, #31
 800e0f6:	d420      	bmi.n	800e13a <HAL_DMA2D_PollForTransfer+0x56>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800e0f8:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800e0fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e0fc:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800e0fe:	0696      	lsls	r6, r2, #26
 800e100:	d40a      	bmi.n	800e118 <HAL_DMA2D_PollForTransfer+0x34>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800e102:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800e104:	2201      	movs	r2, #1
  return HAL_OK;
 800e106:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800e108:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800e10a:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
 800e10e:	2300      	movs	r3, #0
 800e110:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 800e114:	b002      	add	sp, #8
 800e116:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800e118:	f7ff fec8 	bl	800deac <HAL_GetTick>
 800e11c:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800e11e:	1c68      	adds	r0, r5, #1
 800e120:	d17a      	bne.n	800e218 <HAL_DMA2D_PollForTransfer+0x134>
 800e122:	6823      	ldr	r3, [r4, #0]
 800e124:	e005      	b.n	800e132 <HAL_DMA2D_PollForTransfer+0x4e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800e126:	685a      	ldr	r2, [r3, #4]
 800e128:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800e12a:	9a01      	ldr	r2, [sp, #4]
 800e12c:	f012 0f29 	tst.w	r2, #41	@ 0x29
 800e130:	d134      	bne.n	800e19c <HAL_DMA2D_PollForTransfer+0xb8>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800e132:	685a      	ldr	r2, [r3, #4]
 800e134:	06d1      	lsls	r1, r2, #27
 800e136:	d4e4      	bmi.n	800e102 <HAL_DMA2D_PollForTransfer+0x1e>
 800e138:	e7f5      	b.n	800e126 <HAL_DMA2D_PollForTransfer+0x42>
    tickstart = HAL_GetTick();
 800e13a:	f7ff feb7 	bl	800deac <HAL_GetTick>
 800e13e:	1c6b      	adds	r3, r5, #1
 800e140:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800e142:	d146      	bne.n	800e1d2 <HAL_DMA2D_PollForTransfer+0xee>
 800e144:	6823      	ldr	r3, [r4, #0]
 800e146:	e005      	b.n	800e154 <HAL_DMA2D_PollForTransfer+0x70>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800e148:	685a      	ldr	r2, [r3, #4]
 800e14a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800e14c:	9a01      	ldr	r2, [sp, #4]
 800e14e:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800e152:	d10a      	bne.n	800e16a <HAL_DMA2D_PollForTransfer+0x86>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800e154:	685a      	ldr	r2, [r3, #4]
 800e156:	0795      	lsls	r5, r2, #30
 800e158:	d5f6      	bpl.n	800e148 <HAL_DMA2D_PollForTransfer+0x64>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800e15a:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800e15c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e15e:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800e160:	0691      	lsls	r1, r2, #26
 800e162:	d5ce      	bpl.n	800e102 <HAL_DMA2D_PollForTransfer+0x1e>
    tickstart = HAL_GetTick();
 800e164:	f7ff fea2 	bl	800deac <HAL_GetTick>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800e168:	e7db      	b.n	800e122 <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800e16a:	9a01      	ldr	r2, [sp, #4]
 800e16c:	0690      	lsls	r0, r2, #26
 800e16e:	d503      	bpl.n	800e178 <HAL_DMA2D_PollForTransfer+0x94>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800e170:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e172:	f042 0202 	orr.w	r2, r2, #2
 800e176:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800e178:	9a01      	ldr	r2, [sp, #4]
 800e17a:	07d1      	lsls	r1, r2, #31
 800e17c:	d503      	bpl.n	800e186 <HAL_DMA2D_PollForTransfer+0xa2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800e17e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e180:	f042 0201 	orr.w	r2, r2, #1
 800e184:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800e186:	2121      	movs	r1, #33	@ 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800e188:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800e18a:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800e18c:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 800e190:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma2d);
 800e192:	2300      	movs	r3, #0
 800e194:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 800e198:	b002      	add	sp, #8
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800e19c:	9a01      	ldr	r2, [sp, #4]
 800e19e:	0712      	lsls	r2, r2, #28
 800e1a0:	d503      	bpl.n	800e1aa <HAL_DMA2D_PollForTransfer+0xc6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800e1a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1a4:	f042 0204 	orr.w	r2, r2, #4
 800e1a8:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800e1aa:	9a01      	ldr	r2, [sp, #4]
 800e1ac:	0696      	lsls	r6, r2, #26
 800e1ae:	d503      	bpl.n	800e1b8 <HAL_DMA2D_PollForTransfer+0xd4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800e1b0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1b2:	f042 0202 	orr.w	r2, r2, #2
 800e1b6:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800e1b8:	9a01      	ldr	r2, [sp, #4]
 800e1ba:	07d5      	lsls	r5, r2, #31
 800e1bc:	d503      	bpl.n	800e1c6 <HAL_DMA2D_PollForTransfer+0xe2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800e1be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1c0:	f042 0201 	orr.w	r2, r2, #1
 800e1c4:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800e1c6:	2129      	movs	r1, #41	@ 0x29
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800e1c8:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800e1ca:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800e1cc:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 800e1d0:	e7de      	b.n	800e190 <HAL_DMA2D_PollForTransfer+0xac>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800e1d2:	6823      	ldr	r3, [r4, #0]
 800e1d4:	685a      	ldr	r2, [r3, #4]
 800e1d6:	0792      	lsls	r2, r2, #30
 800e1d8:	d415      	bmi.n	800e206 <HAL_DMA2D_PollForTransfer+0x122>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800e1da:	685a      	ldr	r2, [r3, #4]
 800e1dc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800e1de:	9a01      	ldr	r2, [sp, #4]
 800e1e0:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800e1e4:	d1c1      	bne.n	800e16a <HAL_DMA2D_PollForTransfer+0x86>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e1e6:	f7ff fe61 	bl	800deac <HAL_GetTick>
 800e1ea:	1b83      	subs	r3, r0, r6
 800e1ec:	42ab      	cmp	r3, r5
 800e1ee:	d801      	bhi.n	800e1f4 <HAL_DMA2D_PollForTransfer+0x110>
 800e1f0:	2d00      	cmp	r5, #0
 800e1f2:	d1ee      	bne.n	800e1d2 <HAL_DMA2D_PollForTransfer+0xee>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800e1f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800e1f6:	2203      	movs	r2, #3
          return HAL_TIMEOUT;
 800e1f8:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800e1fa:	f043 0320 	orr.w	r3, r3, #32
 800e1fe:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800e200:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
 800e204:	e783      	b.n	800e10e <HAL_DMA2D_PollForTransfer+0x2a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800e206:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800e208:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e20a:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800e20c:	0692      	lsls	r2, r2, #26
 800e20e:	f57f af78 	bpl.w	800e102 <HAL_DMA2D_PollForTransfer+0x1e>
    tickstart = HAL_GetTick();
 800e212:	f7ff fe4b 	bl	800deac <HAL_GetTick>
 800e216:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800e218:	6823      	ldr	r3, [r4, #0]
 800e21a:	685a      	ldr	r2, [r3, #4]
 800e21c:	06d0      	lsls	r0, r2, #27
 800e21e:	f53f af70 	bmi.w	800e102 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800e222:	685a      	ldr	r2, [r3, #4]
 800e224:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800e226:	9a01      	ldr	r2, [sp, #4]
 800e228:	f012 0f29 	tst.w	r2, #41	@ 0x29
 800e22c:	d1b6      	bne.n	800e19c <HAL_DMA2D_PollForTransfer+0xb8>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e22e:	f7ff fe3d 	bl	800deac <HAL_GetTick>
 800e232:	1b83      	subs	r3, r0, r6
 800e234:	42ab      	cmp	r3, r5
 800e236:	d8dd      	bhi.n	800e1f4 <HAL_DMA2D_PollForTransfer+0x110>
 800e238:	2d00      	cmp	r5, #0
 800e23a:	d1ed      	bne.n	800e218 <HAL_DMA2D_PollForTransfer+0x134>
 800e23c:	e7da      	b.n	800e1f4 <HAL_DMA2D_PollForTransfer+0x110>
 800e23e:	bf00      	nop

0800e240 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800e240:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 800e244:	2a01      	cmp	r2, #1
 800e246:	d05f      	beq.n	800e308 <HAL_DMA2D_ConfigLayer+0xc8>
 800e248:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e24a:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800e24e:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e250:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800e254:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800e258:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 800e25a:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800e25c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 800e260:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800e264:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e266:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800e268:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800e26a:	0512      	lsls	r2, r2, #20
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800e26c:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e26e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800e272:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800e276:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e278:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800e27a:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800e27e:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e282:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800e284:	d923      	bls.n	800e2ce <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800e286:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800e28a:	b971      	cbnz	r1, 800e2aa <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e28c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e28e:	491f      	ldr	r1, [pc, #124]	@ (800e30c <HAL_DMA2D_ConfigLayer+0xcc>)
 800e290:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800e292:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e294:	4311      	orrs	r1, r2
 800e296:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800e298:	61a0      	str	r0, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 800e29a:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800e29c:	2101      	movs	r1, #1
  return HAL_OK;
 800e29e:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800e2a0:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 800e2a4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 800e2a8:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800e2aa:	2d0b      	cmp	r5, #11
 800e2ac:	d12a      	bne.n	800e304 <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800e2ae:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800e2b0:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800e2b4:	4816      	ldr	r0, [pc, #88]	@ (800e310 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e2b6:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e2ba:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e2bc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e2c0:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e2c2:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e2c6:	430a      	orrs	r2, r1
 800e2c8:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e2ca:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800e2cc:	e7e5      	b.n	800e29a <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800e2ce:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 800e2d2:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800e2d4:	b959      	cbnz	r1, 800e2ee <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e2d6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e2d8:	490c      	ldr	r1, [pc, #48]	@ (800e30c <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800e2da:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e2dc:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800e2de:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e2e0:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800e2e2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800e2e6:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800e2e8:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800e2ea:	62a0      	str	r0, [r4, #40]	@ 0x28
 800e2ec:	e7d5      	b.n	800e29a <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e2ee:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800e2f0:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e2f4:	4905      	ldr	r1, [pc, #20]	@ (800e30c <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e2f6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800e2f8:	4029      	ands	r1, r5
 800e2fa:	4311      	orrs	r1, r2
 800e2fc:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800e2fe:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800e300:	6226      	str	r6, [r4, #32]
 800e302:	e7ca      	b.n	800e29a <HAL_DMA2D_ConfigLayer+0x5a>
 800e304:	4801      	ldr	r0, [pc, #4]	@ (800e30c <HAL_DMA2D_ConfigLayer+0xcc>)
 800e306:	e7d6      	b.n	800e2b6 <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 800e308:	2002      	movs	r0, #2
}
 800e30a:	4770      	bx	lr
 800e30c:	00ccfff0 	.word	0x00ccfff0
 800e310:	00c0fff0 	.word	0x00c0fff0

0800e314 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800e314:	6803      	ldr	r3, [r0, #0]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800e316:	2201      	movs	r2, #1
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800e318:	4909      	ldr	r1, [pc, #36]	@ (800e340 <HAL_EXTI_IRQHandler+0x2c>)
{
 800e31a:	b410      	push	{r4}
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800e31c:	f003 041f 	and.w	r4, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800e320:	f3c3 4301 	ubfx	r3, r3, #16, #2
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800e324:	011b      	lsls	r3, r3, #4
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800e326:	40a2      	lsls	r2, r4
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800e328:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00U)
 800e32a:	4214      	tst	r4, r2
 800e32c:	d005      	beq.n	800e33a <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800e32e:	6840      	ldr	r0, [r0, #4]
    *regaddr = maskline;
 800e330:	505a      	str	r2, [r3, r1]
    if (hexti->PendingCallback != NULL)
 800e332:	b110      	cbz	r0, 800e33a <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 800e334:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 800e338:	4700      	bx	r0
}
 800e33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e33e:	4770      	bx	lr
 800e340:	58000088 	.word	0x58000088

0800e344 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e344:	680b      	ldr	r3, [r1, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	f000 81dc 	beq.w	800e704 <HAL_GPIO_Init+0x3c0>
 800e34c:	4ab4      	ldr	r2, [pc, #720]	@ (800e620 <HAL_GPIO_Init+0x2dc>)
 800e34e:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 800e350:	f04f 0200 	mov.w	r2, #0
{
 800e354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e358:	f04f 0b01 	mov.w	fp, #1
{
 800e35c:	b085      	sub	sp, #20
 800e35e:	f000 8105 	beq.w	800e56c <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e362:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e366:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e368:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 800e36c:	9b00      	ldr	r3, [sp, #0]
 800e36e:	ea1c 0a03 	ands.w	sl, ip, r3
 800e372:	f000 814b 	beq.w	800e60c <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e376:	684d      	ldr	r5, [r1, #4]
 800e378:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e37a:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e37c:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e380:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e384:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e388:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e38a:	f1b8 0f01 	cmp.w	r8, #1
 800e38e:	f240 815d 	bls.w	800e64c <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e392:	2f03      	cmp	r7, #3
 800e394:	f040 81cf 	bne.w	800e736 <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e398:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 800e39c:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e39e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e3a2:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e3a6:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 800e3aa:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e3ac:	f000 812e 	beq.w	800e60c <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e3b0:	4e9c      	ldr	r6, [pc, #624]	@ (800e624 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e3b2:	f002 0703 	and.w	r7, r2, #3
 800e3b6:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e3b8:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e3bc:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e3be:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e3c2:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e3c6:	4b98      	ldr	r3, [pc, #608]	@ (800e628 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e3c8:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 800e3cc:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 800e3d0:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e3d4:	4298      	cmp	r0, r3
 800e3d6:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e3da:	f004 0402 	and.w	r4, r4, #2
 800e3de:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800e3e2:	9403      	str	r4, [sp, #12]
 800e3e4:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800e3e6:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e3e8:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e3ec:	f000 8178 	beq.w	800e6e0 <HAL_GPIO_Init+0x39c>
 800e3f0:	4b8e      	ldr	r3, [pc, #568]	@ (800e62c <HAL_GPIO_Init+0x2e8>)
 800e3f2:	4298      	cmp	r0, r3
 800e3f4:	f000 80de 	beq.w	800e5b4 <HAL_GPIO_Init+0x270>
 800e3f8:	f8df c234 	ldr.w	ip, [pc, #564]	@ 800e630 <HAL_GPIO_Init+0x2ec>
 800e3fc:	4560      	cmp	r0, ip
 800e3fe:	f000 817b 	beq.w	800e6f8 <HAL_GPIO_Init+0x3b4>
 800e402:	f8df c230 	ldr.w	ip, [pc, #560]	@ 800e634 <HAL_GPIO_Init+0x2f0>
 800e406:	4560      	cmp	r0, ip
 800e408:	f000 817d 	beq.w	800e706 <HAL_GPIO_Init+0x3c2>
 800e40c:	f8df c228 	ldr.w	ip, [pc, #552]	@ 800e638 <HAL_GPIO_Init+0x2f4>
 800e410:	4560      	cmp	r0, ip
 800e412:	f000 816b 	beq.w	800e6ec <HAL_GPIO_Init+0x3a8>
 800e416:	f8df c224 	ldr.w	ip, [pc, #548]	@ 800e63c <HAL_GPIO_Init+0x2f8>
 800e41a:	4560      	cmp	r0, ip
 800e41c:	f000 8179 	beq.w	800e712 <HAL_GPIO_Init+0x3ce>
 800e420:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 800e640 <HAL_GPIO_Init+0x2fc>
 800e424:	4560      	cmp	r0, ip
 800e426:	f000 817a 	beq.w	800e71e <HAL_GPIO_Init+0x3da>
 800e42a:	f8df c218 	ldr.w	ip, [pc, #536]	@ 800e644 <HAL_GPIO_Init+0x300>
 800e42e:	4560      	cmp	r0, ip
 800e430:	f000 817b 	beq.w	800e72a <HAL_GPIO_Init+0x3e6>
 800e434:	f8df c210 	ldr.w	ip, [pc, #528]	@ 800e648 <HAL_GPIO_Init+0x304>
 800e438:	4560      	cmp	r0, ip
 800e43a:	bf0c      	ite	eq
 800e43c:	f04f 0c09 	moveq.w	ip, #9
 800e440:	f04f 0c0a 	movne.w	ip, #10
 800e444:	fa0c f707 	lsl.w	r7, ip, r7
 800e448:	433c      	orrs	r4, r7
 800e44a:	e0b8      	b.n	800e5be <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 800e44c:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e450:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e452:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e454:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e458:	fa06 f807 	lsl.w	r8, r6, r7
 800e45c:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800e460:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e464:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800e468:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e46c:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e470:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e474:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 800e478:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 800e47c:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e480:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e482:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e486:	fa06 fe07 	lsl.w	lr, r6, r7
 800e48a:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 800e48e:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e492:	d117      	bne.n	800e4c4 <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e494:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e498:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 800e49a:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e49e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800e4a2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e4a6:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 800e4aa:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e4ae:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e4b0:	260f      	movs	r6, #15
 800e4b2:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e4b6:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e4b8:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e4bc:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 800e4c0:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e4c4:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 800e4c6:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e4c8:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e4cc:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e4d0:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800e4d4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e4d6:	d045      	beq.n	800e564 <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e4d8:	4f52      	ldr	r7, [pc, #328]	@ (800e624 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e4da:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e4dc:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 800e4e0:	f044 0402 	orr.w	r4, r4, #2
 800e4e4:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 800e4e8:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 800e4ec:	f022 0703 	bic.w	r7, r2, #3
 800e4f0:	f004 0402 	and.w	r4, r4, #2
 800e4f4:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 800e4f8:	9403      	str	r4, [sp, #12]
 800e4fa:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800e4fe:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e500:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800e504:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e508:	00a4      	lsls	r4, r4, #2
 800e50a:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e50e:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e510:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e514:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 800e516:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 800e51a:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 800e51e:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e520:	f100 80d2 	bmi.w	800e6c8 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 800e524:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800e526:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 800e52a:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 800e52c:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e52e:	02ae      	lsls	r6, r5, #10
 800e530:	f100 80d3 	bmi.w	800e6da <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 800e534:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800e536:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 800e53a:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e53c:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e540:	03ae      	lsls	r6, r5, #14
 800e542:	f100 80c7 	bmi.w	800e6d4 <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 800e546:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e548:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e54c:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800e54e:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800e552:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e556:	f100 80ba 	bmi.w	800e6ce <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 800e55a:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e55c:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800e560:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 800e564:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e566:	fa33 f402 	lsrs.w	r4, r3, r2
 800e56a:	d055      	beq.n	800e618 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e56c:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 800e570:	ea13 0c0e 	ands.w	ip, r3, lr
 800e574:	d0f6      	beq.n	800e564 <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e576:	684d      	ldr	r5, [r1, #4]
 800e578:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e57a:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e57c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e580:	fa06 f807 	lsl.w	r8, r6, r7
 800e584:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e588:	f104 38ff 	add.w	r8, r4, #4294967295
 800e58c:	f1b8 0f01 	cmp.w	r8, #1
 800e590:	f67f af5c 	bls.w	800e44c <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e594:	2c03      	cmp	r4, #3
 800e596:	d095      	beq.n	800e4c4 <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 800e598:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800e620 <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e59c:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 800e59e:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e5a2:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e5a6:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e5aa:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 800e5ae:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e5b2:	e787      	b.n	800e4c4 <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e5b4:	f04f 0c02 	mov.w	ip, #2
 800e5b8:	fa0c f707 	lsl.w	r7, ip, r7
 800e5bc:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e5be:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e5c0:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 800e5c2:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800e5c6:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 800e5ca:	bf4c      	ite	mi
 800e5cc:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 800e5d0:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e5d2:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 800e5d4:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 800e5d8:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 800e5dc:	bf54      	ite	pl
 800e5de:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800e5e0:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e5e4:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 800e5e6:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800e5ea:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 800e5ee:	bf54      	ite	pl
 800e5f0:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800e5f2:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e5f6:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800e5f8:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800e5fc:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 800e600:	bf54      	ite	pl
 800e602:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800e604:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 800e608:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 800e60c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e60e:	9b00      	ldr	r3, [sp, #0]
 800e610:	fa33 f402 	lsrs.w	r4, r3, r2
 800e614:	f47f aea8 	bne.w	800e368 <HAL_GPIO_Init+0x24>
  }
}
 800e618:	b005      	add	sp, #20
 800e61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e61e:	bf00      	nop
 800e620:	58020000 	.word	0x58020000
 800e624:	58024400 	.word	0x58024400
 800e628:	58020400 	.word	0x58020400
 800e62c:	58020800 	.word	0x58020800
 800e630:	58020c00 	.word	0x58020c00
 800e634:	58021000 	.word	0x58021000
 800e638:	58021400 	.word	0x58021400
 800e63c:	58021800 	.word	0x58021800
 800e640:	58021c00 	.word	0x58021c00
 800e644:	58022000 	.word	0x58022000
 800e648:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 800e64c:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e650:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e652:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e654:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e658:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e65c:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e65e:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800e662:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e666:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800e66a:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e66e:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e672:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e676:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 800e67a:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e67e:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 800e682:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e686:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e68a:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800e68e:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e692:	f47f ae81 	bne.w	800e398 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e696:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e69a:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 800e69c:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e6a0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800e6a4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e6a8:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 800e6ac:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e6b0:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e6b2:	230f      	movs	r3, #15
 800e6b4:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e6b8:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e6ba:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e6be:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 800e6c2:	f8c8 c020 	str.w	ip, [r8, #32]
 800e6c6:	e667      	b.n	800e398 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 800e6c8:	ea44 040c 	orr.w	r4, r4, ip
 800e6cc:	e72b      	b.n	800e526 <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 800e6ce:	ea44 040c 	orr.w	r4, r4, ip
 800e6d2:	e743      	b.n	800e55c <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 800e6d4:	ea4c 0404 	orr.w	r4, ip, r4
 800e6d8:	e736      	b.n	800e548 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 800e6da:	ea44 040c 	orr.w	r4, r4, ip
 800e6de:	e72a      	b.n	800e536 <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e6e0:	f04f 0c01 	mov.w	ip, #1
 800e6e4:	fa0c f707 	lsl.w	r7, ip, r7
 800e6e8:	433c      	orrs	r4, r7
 800e6ea:	e768      	b.n	800e5be <HAL_GPIO_Init+0x27a>
 800e6ec:	f04f 0c05 	mov.w	ip, #5
 800e6f0:	fa0c f707 	lsl.w	r7, ip, r7
 800e6f4:	433c      	orrs	r4, r7
 800e6f6:	e762      	b.n	800e5be <HAL_GPIO_Init+0x27a>
 800e6f8:	f04f 0c03 	mov.w	ip, #3
 800e6fc:	fa0c f707 	lsl.w	r7, ip, r7
 800e700:	433c      	orrs	r4, r7
 800e702:	e75c      	b.n	800e5be <HAL_GPIO_Init+0x27a>
 800e704:	4770      	bx	lr
 800e706:	f04f 0c04 	mov.w	ip, #4
 800e70a:	fa0c f707 	lsl.w	r7, ip, r7
 800e70e:	433c      	orrs	r4, r7
 800e710:	e755      	b.n	800e5be <HAL_GPIO_Init+0x27a>
 800e712:	f04f 0c06 	mov.w	ip, #6
 800e716:	fa0c f707 	lsl.w	r7, ip, r7
 800e71a:	433c      	orrs	r4, r7
 800e71c:	e74f      	b.n	800e5be <HAL_GPIO_Init+0x27a>
 800e71e:	f04f 0c07 	mov.w	ip, #7
 800e722:	fa0c f707 	lsl.w	r7, ip, r7
 800e726:	433c      	orrs	r4, r7
 800e728:	e749      	b.n	800e5be <HAL_GPIO_Init+0x27a>
 800e72a:	f04f 0c08 	mov.w	ip, #8
 800e72e:	fa0c f707 	lsl.w	r7, ip, r7
 800e732:	433c      	orrs	r4, r7
 800e734:	e743      	b.n	800e5be <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 800e736:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e73a:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e73c:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e740:	fa03 fc04 	lsl.w	ip, r3, r4
 800e744:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800e748:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e74c:	e624      	b.n	800e398 <HAL_GPIO_Init+0x54>
 800e74e:	bf00      	nop

0800e750 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800e750:	2900      	cmp	r1, #0
 800e752:	f000 810c 	beq.w	800e96e <HAL_GPIO_DeInit+0x21e>
 800e756:	4b8b      	ldr	r3, [pc, #556]	@ (800e984 <HAL_GPIO_DeInit+0x234>)
 800e758:	4298      	cmp	r0, r3
{
 800e75a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75e:	f000 809a 	beq.w	800e896 <HAL_GPIO_DeInit+0x146>
  uint32_t position = 0x00U;
 800e762:	2300      	movs	r3, #0
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e764:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e768:	f04f 0a03 	mov.w	sl, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800e76c:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
    iocurrent = GPIO_Pin & (1UL << position) ;
 800e770:	2201      	movs	r2, #1
 800e772:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800e774:	ea12 0e01 	ands.w	lr, r2, r1
 800e778:	d077      	beq.n	800e86a <HAL_GPIO_DeInit+0x11a>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800e77a:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e77e:	f003 0403 	and.w	r4, r3, #3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e782:	4f81      	ldr	r7, [pc, #516]	@ (800e988 <HAL_GPIO_DeInit+0x238>)
 800e784:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e788:	00a4      	lsls	r4, r4, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e78a:	42b8      	cmp	r0, r7
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e78c:	fa09 f804 	lsl.w	r8, r9, r4
      tmp = SYSCFG->EXTICR[position >> 2U];
 800e790:	f8d5 c408 	ldr.w	ip, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e794:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800e798:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e79c:	d027      	beq.n	800e7ee <HAL_GPIO_DeInit+0x9e>
 800e79e:	4f7b      	ldr	r7, [pc, #492]	@ (800e98c <HAL_GPIO_DeInit+0x23c>)
 800e7a0:	42b8      	cmp	r0, r7
 800e7a2:	d06e      	beq.n	800e882 <HAL_GPIO_DeInit+0x132>
 800e7a4:	4f7a      	ldr	r7, [pc, #488]	@ (800e990 <HAL_GPIO_DeInit+0x240>)
 800e7a6:	42b8      	cmp	r0, r7
 800e7a8:	d070      	beq.n	800e88c <HAL_GPIO_DeInit+0x13c>
 800e7aa:	4f7a      	ldr	r7, [pc, #488]	@ (800e994 <HAL_GPIO_DeInit+0x244>)
 800e7ac:	42b8      	cmp	r0, r7
 800e7ae:	d063      	beq.n	800e878 <HAL_GPIO_DeInit+0x128>
 800e7b0:	f8df b1e8 	ldr.w	fp, [pc, #488]	@ 800e99c <HAL_GPIO_DeInit+0x24c>
 800e7b4:	4558      	cmp	r0, fp
 800e7b6:	f000 80d5 	beq.w	800e964 <HAL_GPIO_DeInit+0x214>
 800e7ba:	f8df b1e4 	ldr.w	fp, [pc, #484]	@ 800e9a0 <HAL_GPIO_DeInit+0x250>
 800e7be:	4558      	cmp	r0, fp
 800e7c0:	f000 80d6 	beq.w	800e970 <HAL_GPIO_DeInit+0x220>
 800e7c4:	f8df b1dc 	ldr.w	fp, [pc, #476]	@ 800e9a4 <HAL_GPIO_DeInit+0x254>
 800e7c8:	4558      	cmp	r0, fp
 800e7ca:	f000 80c6 	beq.w	800e95a <HAL_GPIO_DeInit+0x20a>
 800e7ce:	f8df b1d8 	ldr.w	fp, [pc, #472]	@ 800e9a8 <HAL_GPIO_DeInit+0x258>
 800e7d2:	4558      	cmp	r0, fp
 800e7d4:	f000 80d1 	beq.w	800e97a <HAL_GPIO_DeInit+0x22a>
 800e7d8:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 800e9ac <HAL_GPIO_DeInit+0x25c>
 800e7dc:	4558      	cmp	r0, fp
 800e7de:	bf0c      	ite	eq
 800e7e0:	f04f 0b09 	moveq.w	fp, #9
 800e7e4:	f04f 0b0a 	movne.w	fp, #10
 800e7e8:	fa0b f404 	lsl.w	r4, fp, r4
 800e7ec:	e002      	b.n	800e7f4 <HAL_GPIO_DeInit+0xa4>
 800e7ee:	2701      	movs	r7, #1
 800e7f0:	fa07 f404 	lsl.w	r4, r7, r4
 800e7f4:	45a4      	cmp	ip, r4
 800e7f6:	d117      	bne.n	800e828 <HAL_GPIO_DeInit+0xd8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800e7f8:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
 800e7fc:	ea24 040e 	bic.w	r4, r4, lr
 800e800:	f8c6 4080 	str.w	r4, [r6, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800e804:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
 800e808:	ea24 040e 	bic.w	r4, r4, lr
 800e80c:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800e810:	6874      	ldr	r4, [r6, #4]
 800e812:	ea24 040e 	bic.w	r4, r4, lr
 800e816:	6074      	str	r4, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800e818:	6834      	ldr	r4, [r6, #0]
 800e81a:	ea24 040e 	bic.w	r4, r4, lr
 800e81e:	6034      	str	r4, [r6, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800e820:	68ac      	ldr	r4, [r5, #8]
 800e822:	ea24 0408 	bic.w	r4, r4, r8
 800e826:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e828:	005d      	lsls	r5, r3, #1
 800e82a:	6804      	ldr	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e82c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e830:	fa0a f505 	lsl.w	r5, sl, r5
 800e834:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800e838:	432c      	orrs	r4, r5
 800e83a:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e83c:	f003 0407 	and.w	r4, r3, #7
 800e840:	f8dc e020 	ldr.w	lr, [ip, #32]
 800e844:	00a4      	lsls	r4, r4, #2
 800e846:	fa09 f404 	lsl.w	r4, r9, r4
 800e84a:	ea2e 0404 	bic.w	r4, lr, r4
 800e84e:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e852:	68c4      	ldr	r4, [r0, #12]
 800e854:	ea24 0405 	bic.w	r4, r4, r5
 800e858:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800e85a:	6844      	ldr	r4, [r0, #4]
 800e85c:	ea24 0202 	bic.w	r2, r4, r2
 800e860:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e862:	6882      	ldr	r2, [r0, #8]
 800e864:	ea22 0205 	bic.w	r2, r2, r5
 800e868:	6082      	str	r2, [r0, #8]
    }

    position++;
 800e86a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800e86c:	fa31 f203 	lsrs.w	r2, r1, r3
 800e870:	f47f af7e 	bne.w	800e770 <HAL_GPIO_DeInit+0x20>
  }
}
 800e874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e878:	f04f 0b04 	mov.w	fp, #4
 800e87c:	fa0b f404 	lsl.w	r4, fp, r4
 800e880:	e7b8      	b.n	800e7f4 <HAL_GPIO_DeInit+0xa4>
 800e882:	f04f 0b02 	mov.w	fp, #2
 800e886:	fa0b f404 	lsl.w	r4, fp, r4
 800e88a:	e7b3      	b.n	800e7f4 <HAL_GPIO_DeInit+0xa4>
 800e88c:	f04f 0b03 	mov.w	fp, #3
 800e890:	fa0b f404 	lsl.w	r4, fp, r4
 800e894:	e7ae      	b.n	800e7f4 <HAL_GPIO_DeInit+0xa4>
  uint32_t position = 0x00U;
 800e896:	2200      	movs	r2, #0
    iocurrent = GPIO_Pin & (1UL << position) ;
 800e898:	f04f 0c01 	mov.w	ip, #1
 800e89c:	4f3e      	ldr	r7, [pc, #248]	@ (800e998 <HAL_GPIO_DeInit+0x248>)
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e89e:	250f      	movs	r5, #15
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800e8a0:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e8a4:	f04f 0e03 	mov.w	lr, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e8a8:	f002 0303 	and.w	r3, r2, #3
    iocurrent = GPIO_Pin & (1UL << position) ;
 800e8ac:	fa0c f402 	lsl.w	r4, ip, r2
    if (iocurrent != 0x00U)
 800e8b0:	f022 0803 	bic.w	r8, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e8b4:	009b      	lsls	r3, r3, #2
    if (iocurrent != 0x00U)
 800e8b6:	ea11 0904 	ands.w	r9, r1, r4
 800e8ba:	44b8      	add	r8, r7
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e8bc:	fa05 f303 	lsl.w	r3, r5, r3
    if (iocurrent != 0x00U)
 800e8c0:	d045      	beq.n	800e94e <HAL_GPIO_DeInit+0x1fe>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800e8c2:	f8d8 a008 	ldr.w	sl, [r8, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e8c6:	ea13 0f0a 	tst.w	r3, sl
 800e8ca:	d11d      	bne.n	800e908 <HAL_GPIO_DeInit+0x1b8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800e8cc:	f8d6 a080 	ldr.w	sl, [r6, #128]	@ 0x80
 800e8d0:	ea2a 0a09 	bic.w	sl, sl, r9
 800e8d4:	f8c6 a080 	str.w	sl, [r6, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800e8d8:	f8d6 a084 	ldr.w	sl, [r6, #132]	@ 0x84
 800e8dc:	ea2a 0a09 	bic.w	sl, sl, r9
 800e8e0:	f8c6 a084 	str.w	sl, [r6, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800e8e4:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800e8e8:	ea2a 0a09 	bic.w	sl, sl, r9
 800e8ec:	f8c6 a004 	str.w	sl, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800e8f0:	f8d6 a000 	ldr.w	sl, [r6]
 800e8f4:	ea2a 0909 	bic.w	r9, sl, r9
 800e8f8:	f8c6 9000 	str.w	r9, [r6]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800e8fc:	f8d8 9008 	ldr.w	r9, [r8, #8]
 800e900:	ea29 0303 	bic.w	r3, r9, r3
 800e904:	f8c8 3008 	str.w	r3, [r8, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e908:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800e90c:	6803      	ldr	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e90e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e912:	fa0e f808 	lsl.w	r8, lr, r8
 800e916:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800e91a:	ea43 0308 	orr.w	r3, r3, r8
 800e91e:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e920:	f002 0307 	and.w	r3, r2, #7
 800e924:	f8d9 a020 	ldr.w	sl, [r9, #32]
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	fa05 f303 	lsl.w	r3, r5, r3
 800e92e:	ea2a 0303 	bic.w	r3, sl, r3
 800e932:	f8c9 3020 	str.w	r3, [r9, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e936:	68c3      	ldr	r3, [r0, #12]
 800e938:	ea23 0308 	bic.w	r3, r3, r8
 800e93c:	60c3      	str	r3, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800e93e:	6843      	ldr	r3, [r0, #4]
 800e940:	ea23 0304 	bic.w	r3, r3, r4
 800e944:	6043      	str	r3, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e946:	6883      	ldr	r3, [r0, #8]
 800e948:	ea23 0308 	bic.w	r3, r3, r8
 800e94c:	6083      	str	r3, [r0, #8]
    position++;
 800e94e:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800e950:	fa31 f302 	lsrs.w	r3, r1, r2
 800e954:	d1a8      	bne.n	800e8a8 <HAL_GPIO_DeInit+0x158>
}
 800e956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e95a:	f04f 0b07 	mov.w	fp, #7
 800e95e:	fa0b f404 	lsl.w	r4, fp, r4
 800e962:	e747      	b.n	800e7f4 <HAL_GPIO_DeInit+0xa4>
 800e964:	f04f 0b05 	mov.w	fp, #5
 800e968:	fa0b f404 	lsl.w	r4, fp, r4
 800e96c:	e742      	b.n	800e7f4 <HAL_GPIO_DeInit+0xa4>
 800e96e:	4770      	bx	lr
 800e970:	f04f 0b06 	mov.w	fp, #6
 800e974:	fa0b f404 	lsl.w	r4, fp, r4
 800e978:	e73c      	b.n	800e7f4 <HAL_GPIO_DeInit+0xa4>
 800e97a:	f04f 0b08 	mov.w	fp, #8
 800e97e:	fa0b f404 	lsl.w	r4, fp, r4
 800e982:	e737      	b.n	800e7f4 <HAL_GPIO_DeInit+0xa4>
 800e984:	58020000 	.word	0x58020000
 800e988:	58020400 	.word	0x58020400
 800e98c:	58020800 	.word	0x58020800
 800e990:	58020c00 	.word	0x58020c00
 800e994:	58021000 	.word	0x58021000
 800e998:	58000400 	.word	0x58000400
 800e99c:	58021400 	.word	0x58021400
 800e9a0:	58021800 	.word	0x58021800
 800e9a4:	58021c00 	.word	0x58021c00
 800e9a8:	58022000 	.word	0x58022000
 800e9ac:	58022400 	.word	0x58022400

0800e9b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e9b0:	b902      	cbnz	r2, 800e9b4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e9b2:	0409      	lsls	r1, r1, #16
 800e9b4:	6181      	str	r1, [r0, #24]
  }
}
 800e9b6:	4770      	bx	lr

0800e9b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e9bc:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9be:	2710      	movs	r7, #16
{
 800e9c0:	4605      	mov	r5, r0
 800e9c2:	460e      	mov	r6, r1
 800e9c4:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e9c6:	699a      	ldr	r2, [r3, #24]
 800e9c8:	f012 0202 	ands.w	r2, r2, #2
 800e9cc:	d168      	bne.n	800eaa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe8>
  uint32_t itflag   = hi2c->Instance->ISR;
 800e9ce:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e9d0:	f011 0c10 	ands.w	ip, r1, #16
 800e9d4:	d062      	beq.n	800ea9c <I2C_WaitOnTXISFlagUntilTimeout+0xe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9d6:	1c74      	adds	r4, r6, #1
 800e9d8:	61df      	str	r7, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e9da:	d166      	bne.n	800eaaa <I2C_WaitOnTXISFlagUntilTimeout+0xf2>
 800e9dc:	699c      	ldr	r4, [r3, #24]
 800e9de:	f014 0420 	ands.w	r4, r4, #32
 800e9e2:	d160      	bne.n	800eaa6 <I2C_WaitOnTXISFlagUntilTimeout+0xee>
 800e9e4:	699a      	ldr	r2, [r3, #24]
 800e9e6:	0691      	lsls	r1, r2, #26
 800e9e8:	d5fc      	bpl.n	800e9e4 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e9ea:	2220      	movs	r2, #32
 800e9ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e9ee:	f044 0c04 	orr.w	ip, r4, #4

    status = HAL_ERROR;
 800e9f2:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e9f4:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e9f6:	05d0      	lsls	r0, r2, #23
 800e9f8:	d532      	bpl.n	800ea60 <I2C_WaitOnTXISFlagUntilTimeout+0xa8>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e9fa:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e9fe:	0554      	lsls	r4, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800ea00:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ea04:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ea06:	d504      	bpl.n	800ea12 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ea08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800ea0c:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ea10:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ea12:	0596      	lsls	r6, r2, #22
 800ea14:	d504      	bpl.n	800ea20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ea16:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800ea1a:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ea1e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ea20:	699a      	ldr	r2, [r3, #24]
 800ea22:	0790      	lsls	r0, r2, #30
 800ea24:	d501      	bpl.n	800ea2a <I2C_WaitOnTXISFlagUntilTimeout+0x72>
    hi2c->Instance->TXDR = 0x00U;
 800ea26:	2200      	movs	r2, #0
 800ea28:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ea2a:	699a      	ldr	r2, [r3, #24]
 800ea2c:	07d1      	lsls	r1, r2, #31
 800ea2e:	d403      	bmi.n	800ea38 <I2C_WaitOnTXISFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ea30:	699a      	ldr	r2, [r3, #24]
 800ea32:	f042 0201 	orr.w	r2, r2, #1
 800ea36:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ea38:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
 800ea3a:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 800ea3c:	4c38      	ldr	r4, [pc, #224]	@ (800eb20 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea3e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800ea40:	4022      	ands	r2, r4
 800ea42:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800ea44:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800ea46:	ea43 030c 	orr.w	r3, r3, ip
 800ea4a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ea4c:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea50:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800ea54:	2300      	movs	r3, #0
      return HAL_ERROR;
 800ea56:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800ea58:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
 800ea5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ea60:	0550      	lsls	r0, r2, #21
 800ea62:	d4d1      	bmi.n	800ea08 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ea64:	0594      	lsls	r4, r2, #22
 800ea66:	d4d6      	bmi.n	800ea16 <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
  if (status != HAL_OK)
 800ea68:	2900      	cmp	r1, #0
 800ea6a:	d1d9      	bne.n	800ea20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    if (Timeout != HAL_MAX_DELAY)
 800ea6c:	1c72      	adds	r2, r6, #1
 800ea6e:	d0aa      	beq.n	800e9c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea70:	f7ff fa1c 	bl	800deac <HAL_GetTick>
 800ea74:	eba0 0308 	sub.w	r3, r0, r8
 800ea78:	42b3      	cmp	r3, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ea7a:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea7c:	d801      	bhi.n	800ea82 <I2C_WaitOnTXISFlagUntilTimeout+0xca>
 800ea7e:	2e00      	cmp	r6, #0
 800ea80:	d1a1      	bne.n	800e9c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ea82:	699a      	ldr	r2, [r3, #24]
 800ea84:	f012 0202 	ands.w	r2, r2, #2
 800ea88:	d19d      	bne.n	800e9c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea8a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ea8c:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea8e:	430b      	orrs	r3, r1
 800ea90:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ea92:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea96:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          return HAL_ERROR;
 800ea9a:	e7db      	b.n	800ea54 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
  HAL_StatusTypeDef status = HAL_OK;
 800ea9c:	4661      	mov	r1, ip
 800ea9e:	e7a9      	b.n	800e9f4 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
  return HAL_OK;
 800eaa0:	2000      	movs	r0, #0
}
 800eaa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800eaa6:	4614      	mov	r4, r2
 800eaa8:	e79f      	b.n	800e9ea <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eaaa:	4614      	mov	r4, r2
 800eaac:	46c1      	mov	r9, r8
 800eaae:	4692      	mov	sl, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800eab0:	699a      	ldr	r2, [r3, #24]
 800eab2:	0692      	lsls	r2, r2, #26
 800eab4:	d40e      	bmi.n	800ead4 <I2C_WaitOnTXISFlagUntilTimeout+0x11c>
 800eab6:	f1ba 0f00 	cmp.w	sl, #0
 800eaba:	d198      	bne.n	800e9ee <I2C_WaitOnTXISFlagUntilTimeout+0x36>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800eabc:	f7ff f9f6 	bl	800deac <HAL_GetTick>
 800eac0:	eba0 0309 	sub.w	r3, r0, r9
 800eac4:	429e      	cmp	r6, r3
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800eac6:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800eac8:	d308      	bcc.n	800eadc <I2C_WaitOnTXISFlagUntilTimeout+0x124>
 800eaca:	b13e      	cbz	r6, 800eadc <I2C_WaitOnTXISFlagUntilTimeout+0x124>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800eacc:	699a      	ldr	r2, [r3, #24]
 800eace:	0690      	lsls	r0, r2, #26
 800ead0:	d5f4      	bpl.n	800eabc <I2C_WaitOnTXISFlagUntilTimeout+0x104>
 800ead2:	e78a      	b.n	800e9ea <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    if (status == HAL_OK)
 800ead4:	f1ba 0f00 	cmp.w	sl, #0
 800ead8:	d189      	bne.n	800e9ee <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800eada:	e786      	b.n	800e9ea <I2C_WaitOnTXISFlagUntilTimeout+0x32>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800eadc:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800eade:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800eae2:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800eae4:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800eae6:	0409      	lsls	r1, r1, #16
 800eae8:	d50b      	bpl.n	800eb02 <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
              (tmp1 != I2C_CR2_STOP) && \
 800eaea:	0441      	lsls	r1, r0, #17
 800eaec:	d409      	bmi.n	800eb02 <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
 800eaee:	2a20      	cmp	r2, #32
 800eaf0:	d007      	beq.n	800eb02 <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800eaf2:	685a      	ldr	r2, [r3, #4]
 800eaf4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eaf8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800eafa:	f7ff f9d7 	bl	800deac <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eafe:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800eb00:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eb02:	699a      	ldr	r2, [r3, #24]
 800eb04:	0690      	lsls	r0, r2, #26
 800eb06:	d4d3      	bmi.n	800eab0 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800eb08:	f7ff f9d0 	bl	800deac <HAL_GetTick>
 800eb0c:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800eb10:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800eb12:	2819      	cmp	r0, #25
 800eb14:	d9f5      	bls.n	800eb02 <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800eb16:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800eb18:	f04f 0a01 	mov.w	sl, #1
 800eb1c:	e7c8      	b.n	800eab0 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
 800eb1e:	bf00      	nop
 800eb20:	fe00e800 	.word	0xfe00e800

0800eb24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eb24:	6803      	ldr	r3, [r0, #0]
{
 800eb26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb2a:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eb2c:	699a      	ldr	r2, [r3, #24]
 800eb2e:	0695      	lsls	r5, r2, #26
 800eb30:	d461      	bmi.n	800ebf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
 800eb32:	4605      	mov	r5, r0
 800eb34:	460e      	mov	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eb36:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 800eb3a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800eb3c:	f012 0c10 	ands.w	ip, r2, #16
 800eb40:	d05c      	beq.n	800ebfc <I2C_WaitOnSTOPFlagUntilTimeout+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eb42:	1c74      	adds	r4, r6, #1
 800eb44:	f8c3 801c 	str.w	r8, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800eb48:	d165      	bne.n	800ec16 <I2C_WaitOnSTOPFlagUntilTimeout+0xf2>
 800eb4a:	699c      	ldr	r4, [r3, #24]
 800eb4c:	f014 0420 	ands.w	r4, r4, #32
 800eb50:	d15f      	bne.n	800ec12 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
 800eb52:	699a      	ldr	r2, [r3, #24]
 800eb54:	0691      	lsls	r1, r2, #26
 800eb56:	d5fc      	bpl.n	800eb52 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb58:	2220      	movs	r2, #32
 800eb5a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800eb5c:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 800eb60:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800eb62:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800eb64:	05d0      	lsls	r0, r2, #23
 800eb66:	d532      	bpl.n	800ebce <I2C_WaitOnSTOPFlagUntilTimeout+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800eb68:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800eb6c:	0554      	lsls	r4, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800eb6e:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800eb72:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800eb74:	d504      	bpl.n	800eb80 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800eb76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800eb7a:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800eb7e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800eb80:	0596      	lsls	r6, r2, #22
 800eb82:	d504      	bpl.n	800eb8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800eb84:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800eb88:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800eb8c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800eb8e:	699a      	ldr	r2, [r3, #24]
 800eb90:	0790      	lsls	r0, r2, #30
 800eb92:	d501      	bpl.n	800eb98 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    hi2c->Instance->TXDR = 0x00U;
 800eb94:	2200      	movs	r2, #0
 800eb96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eb98:	699a      	ldr	r2, [r3, #24]
 800eb9a:	07d1      	lsls	r1, r2, #31
 800eb9c:	d403      	bmi.n	800eba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x82>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800eb9e:	699a      	ldr	r2, [r3, #24]
 800eba0:	f042 0201 	orr.w	r2, r2, #1
 800eba4:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800eba6:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800eba8:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 800ebaa:	4c38      	ldr	r4, [pc, #224]	@ (800ec8c <I2C_WaitOnSTOPFlagUntilTimeout+0x168>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebac:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800ebae:	4022      	ands	r2, r4
 800ebb0:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800ebb2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800ebb4:	ea43 030c 	orr.w	r3, r3, ip
 800ebb8:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ebba:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebbe:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800ebc2:	2300      	movs	r3, #0
      return HAL_ERROR;
 800ebc4:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 800ebc6:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
 800ebca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ebce:	0550      	lsls	r0, r2, #21
 800ebd0:	d4d1      	bmi.n	800eb76 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ebd2:	0594      	lsls	r4, r2, #22
 800ebd4:	d4d6      	bmi.n	800eb84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  if (status != HAL_OK)
 800ebd6:	2900      	cmp	r1, #0
 800ebd8:	d1d9      	bne.n	800eb8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebda:	f7ff f967 	bl	800deac <HAL_GetTick>
 800ebde:	1bc0      	subs	r0, r0, r7
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ebe0:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebe2:	42b0      	cmp	r0, r6
 800ebe4:	d800      	bhi.n	800ebe8 <I2C_WaitOnSTOPFlagUntilTimeout+0xc4>
 800ebe6:	b91e      	cbnz	r6, 800ebf0 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ebe8:	699a      	ldr	r2, [r3, #24]
 800ebea:	f012 0220 	ands.w	r2, r2, #32
 800ebee:	d007      	beq.n	800ec00 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ebf0:	699a      	ldr	r2, [r3, #24]
 800ebf2:	0692      	lsls	r2, r2, #26
 800ebf4:	d5a1      	bpl.n	800eb3a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800ebf6:	2000      	movs	r0, #0
}
 800ebf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800ebfc:	4661      	mov	r1, ip
 800ebfe:	e7b0      	b.n	800eb62 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ec00:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ec02:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ec04:	430b      	orrs	r3, r1
 800ec06:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ec08:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec0c:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 800ec10:	e7d7      	b.n	800ebc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ec12:	2400      	movs	r4, #0
 800ec14:	e7a0      	b.n	800eb58 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec16:	2400      	movs	r4, #0
 800ec18:	46b9      	mov	r9, r7
 800ec1a:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ec1c:	699a      	ldr	r2, [r3, #24]
 800ec1e:	0692      	lsls	r2, r2, #26
 800ec20:	d42f      	bmi.n	800ec82 <I2C_WaitOnSTOPFlagUntilTimeout+0x15e>
 800ec22:	f1ba 0f00 	cmp.w	sl, #0
 800ec26:	d199      	bne.n	800eb5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ec28:	f7ff f940 	bl	800deac <HAL_GetTick>
 800ec2c:	eba0 0309 	sub.w	r3, r0, r9
 800ec30:	429e      	cmp	r6, r3
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ec32:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ec34:	d304      	bcc.n	800ec40 <I2C_WaitOnSTOPFlagUntilTimeout+0x11c>
 800ec36:	b11e      	cbz	r6, 800ec40 <I2C_WaitOnSTOPFlagUntilTimeout+0x11c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ec38:	699a      	ldr	r2, [r3, #24]
 800ec3a:	0690      	lsls	r0, r2, #26
 800ec3c:	d5f4      	bpl.n	800ec28 <I2C_WaitOnSTOPFlagUntilTimeout+0x104>
 800ec3e:	e78b      	b.n	800eb58 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ec40:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800ec42:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ec46:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800ec48:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ec4a:	0409      	lsls	r1, r1, #16
 800ec4c:	d50b      	bpl.n	800ec66 <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
              (tmp1 != I2C_CR2_STOP) && \
 800ec4e:	0441      	lsls	r1, r0, #17
 800ec50:	d409      	bmi.n	800ec66 <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
 800ec52:	2a20      	cmp	r2, #32
 800ec54:	d007      	beq.n	800ec66 <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ec56:	685a      	ldr	r2, [r3, #4]
 800ec58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ec5c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800ec5e:	f7ff f925 	bl	800deac <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ec62:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800ec64:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ec66:	699a      	ldr	r2, [r3, #24]
 800ec68:	0690      	lsls	r0, r2, #26
 800ec6a:	d4d7      	bmi.n	800ec1c <I2C_WaitOnSTOPFlagUntilTimeout+0xf8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ec6c:	f7ff f91e 	bl	800deac <HAL_GetTick>
 800ec70:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ec74:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ec76:	2819      	cmp	r0, #25
 800ec78:	d9f5      	bls.n	800ec66 <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ec7a:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800ec7c:	f04f 0a01 	mov.w	sl, #1
 800ec80:	e7cc      	b.n	800ec1c <I2C_WaitOnSTOPFlagUntilTimeout+0xf8>
    if (status == HAL_OK)
 800ec82:	f1ba 0f00 	cmp.w	sl, #0
 800ec86:	f47f af69 	bne.w	800eb5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ec8a:	e765      	b.n	800eb58 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 800ec8c:	fe00e800 	.word	0xfe00e800

0800ec90 <HAL_I2C_MspInit>:
}
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop

0800ec94 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d04e      	beq.n	800ed36 <HAL_I2C_Init+0xa2>
{
 800ec98:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ec9a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800ec9e:	4604      	mov	r4, r0
 800eca0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d041      	beq.n	800ed2c <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 800eca8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ecaa:	2124      	movs	r1, #36	@ 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ecac:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ecae:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800ecb2:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ecb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ecb8:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800ecba:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ecbe:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800ecc0:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ecc2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ecc4:	689a      	ldr	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ecc6:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ecc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800eccc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ecce:	d029      	beq.n	800ed24 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ecd0:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ecd4:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ecd6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ecd8:	d102      	bne.n	800ece0 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ecda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ecde:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ece0:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800ece2:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ece6:	4915      	ldr	r1, [pc, #84]	@ (800ed3c <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ece8:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ecea:	4301      	orrs	r1, r0
 800ecec:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ecee:	68d9      	ldr	r1, [r3, #12]
 800ecf0:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 800ecf4:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ecf6:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ecfa:	4302      	orrs	r2, r0
 800ecfc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ed00:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ed04:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ed06:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ed08:	4301      	orrs	r1, r0
  return HAL_OK;
 800ed0a:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ed0c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800ed0e:	6819      	ldr	r1, [r3, #0]
 800ed10:	f041 0101 	orr.w	r1, r1, #1
 800ed14:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ed16:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ed18:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ed1c:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed1e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 800ed22:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ed24:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800ed28:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ed2a:	e7d9      	b.n	800ece0 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800ed2c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800ed30:	f7ff ffae 	bl	800ec90 <HAL_I2C_MspInit>
 800ed34:	e7b8      	b.n	800eca8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800ed36:	2001      	movs	r0, #1
}
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	02008000 	.word	0x02008000

0800ed40 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop

0800ed44 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800ed44:	b1b0      	cbz	r0, 800ed74 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 800ed46:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ed48:	2324      	movs	r3, #36	@ 0x24
{
 800ed4a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ed4c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 800ed50:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 800ed52:	6813      	ldr	r3, [r2, #0]
 800ed54:	f023 0301 	bic.w	r3, r3, #1
 800ed58:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800ed5a:	f7ff fff1 	bl	800ed40 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 800ed62:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 800ed64:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hi2c);
 800ed68:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 800ed6c:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed6e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 800ed72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ed74:	2001      	movs	r0, #1
}
 800ed76:	4770      	bx	lr

0800ed78 <HAL_I2C_Mem_Write>:
{
 800ed78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed7c:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed7e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800ed82:	f8bd 9024 	ldrh.w	r9, [sp, #36]	@ 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed86:	2b20      	cmp	r3, #32
 800ed88:	d130      	bne.n	800edec <HAL_I2C_Mem_Write+0x74>
    if ((pData == NULL) || (Size == 0U))
 800ed8a:	9b08      	ldr	r3, [sp, #32]
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	b33b      	cbz	r3, 800ede0 <HAL_I2C_Mem_Write+0x68>
 800ed90:	f1b9 0f00 	cmp.w	r9, #0
 800ed94:	d024      	beq.n	800ede0 <HAL_I2C_Mem_Write+0x68>
    __HAL_LOCK(hi2c);
 800ed96:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d026      	beq.n	800edec <HAL_I2C_Mem_Write+0x74>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	460e      	mov	r6, r1
 800eda2:	4690      	mov	r8, r2
 800eda4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800eda8:	f7ff f880 	bl	800deac <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800edac:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800edae:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800edb0:	699a      	ldr	r2, [r3, #24]
 800edb2:	0411      	lsls	r1, r2, #16
 800edb4:	d51d      	bpl.n	800edf2 <HAL_I2C_Mem_Write+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800edb6:	f7ff f879 	bl	800deac <HAL_GetTick>
 800edba:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800edbc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800edbe:	2819      	cmp	r0, #25
 800edc0:	d9f6      	bls.n	800edb0 <HAL_I2C_Mem_Write+0x38>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800edc2:	699a      	ldr	r2, [r3, #24]
 800edc4:	0412      	lsls	r2, r2, #16
 800edc6:	d5f3      	bpl.n	800edb0 <HAL_I2C_Mem_Write+0x38>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800edc8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800edca:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800edcc:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800edce:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800edd0:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800edd4:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800edd6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800edda:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800edde:	e002      	b.n	800ede6 <HAL_I2C_Mem_Write+0x6e>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ede0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ede4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800ede6:	2001      	movs	r0, #1
}
 800ede8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 800edec:	2002      	movs	r0, #2
}
 800edee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hi2c->pBuffPtr  = pData;
 800edf2:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800edf4:	2121      	movs	r1, #33	@ 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800edf6:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800edfa:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800edfc:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ee00:	2140      	movs	r1, #64	@ 0x40
    hi2c->pBuffPtr  = pData;
 800ee02:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee04:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ee06:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->XferISR   = NULL;
 800ee0a:	6362      	str	r2, [r4, #52]	@ 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee0c:	6462      	str	r2, [r4, #68]	@ 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee0e:	498c      	ldr	r1, [pc, #560]	@ (800f040 <HAL_I2C_Mem_Write+0x2c8>)
    hi2c->XferCount = Size;
 800ee10:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee14:	685a      	ldr	r2, [r3, #4]
 800ee16:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ee18:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee1a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ee1e:	4989      	ldr	r1, [pc, #548]	@ (800f044 <HAL_I2C_Mem_Write+0x2cc>)
 800ee20:	4332      	orrs	r2, r6
 800ee22:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee24:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee26:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee2a:	f7ff fdc5 	bl	800e9b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d16d      	bne.n	800ef0e <HAL_I2C_Mem_Write+0x196>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ee32:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee34:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ee36:	f040 80cf 	bne.w	800efd8 <HAL_I2C_Mem_Write+0x260>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee3a:	fa5f f388 	uxtb.w	r3, r8
 800ee3e:	6293      	str	r3, [r2, #40]	@ 0x28
 800ee40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee42:	3301      	adds	r3, #1
 800ee44:	d14b      	bne.n	800eede <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ee46:	6993      	ldr	r3, [r2, #24]
 800ee48:	0618      	lsls	r0, r3, #24
 800ee4a:	d5fc      	bpl.n	800ee46 <HAL_I2C_Mem_Write+0xce>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee4c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	2bff      	cmp	r3, #255	@ 0xff
 800ee52:	f240 80b3 	bls.w	800efbc <HAL_I2C_Mem_Write+0x244>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee56:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee58:	497b      	ldr	r1, [pc, #492]	@ (800f048 <HAL_I2C_Mem_Write+0x2d0>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee5a:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee5c:	6853      	ldr	r3, [r2, #4]
 800ee5e:	400b      	ands	r3, r1
 800ee60:	497a      	ldr	r1, [pc, #488]	@ (800f04c <HAL_I2C_Mem_Write+0x2d4>)
 800ee62:	4333      	orrs	r3, r6
 800ee64:	4319      	orrs	r1, r3
 800ee66:	6051      	str	r1, [r2, #4]
 800ee68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	d005      	beq.n	800ee7a <HAL_I2C_Mem_Write+0x102>
 800ee6e:	e064      	b.n	800ef3a <HAL_I2C_Mem_Write+0x1c2>
    } while (hi2c->XferCount > 0U);
 800ee70:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f000 80be 	beq.w	800eff6 <HAL_I2C_Mem_Write+0x27e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ee7a:	462a      	mov	r2, r5
 800ee7c:	f04f 31ff 	mov.w	r1, #4294967295
 800ee80:	4620      	mov	r0, r4
 800ee82:	f7ff fd99 	bl	800e9b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d1ad      	bne.n	800ede6 <HAL_I2C_Mem_Write+0x6e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ee8a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ee8c:	6821      	ldr	r1, [r4, #0]
 800ee8e:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800ee92:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ee94:	628a      	str	r2, [r1, #40]	@ 0x28
      hi2c->XferCount--;
 800ee96:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800ee98:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800ee9a:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800ee9c:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800ee9e:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800eea0:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800eea2:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800eea4:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eea6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800eea8:	b292      	uxth	r2, r2
 800eeaa:	2a00      	cmp	r2, #0
 800eeac:	d0e0      	beq.n	800ee70 <HAL_I2C_Mem_Write+0xf8>
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d1de      	bne.n	800ee70 <HAL_I2C_Mem_Write+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eeb2:	698b      	ldr	r3, [r1, #24]
 800eeb4:	061a      	lsls	r2, r3, #24
 800eeb6:	d5fc      	bpl.n	800eeb2 <HAL_I2C_Mem_Write+0x13a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eeb8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	2bff      	cmp	r3, #255	@ 0xff
 800eebe:	d873      	bhi.n	800efa8 <HAL_I2C_Mem_Write+0x230>
          hi2c->XferSize = hi2c->XferCount;
 800eec0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800eec2:	4861      	ldr	r0, [pc, #388]	@ (800f048 <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = hi2c->XferCount;
 800eec4:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800eec6:	684a      	ldr	r2, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 800eec8:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eeca:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800eecc:	4002      	ands	r2, r0
 800eece:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 800eed2:	4313      	orrs	r3, r2
 800eed4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800eed8:	604b      	str	r3, [r1, #4]
 800eeda:	e7c9      	b.n	800ee70 <HAL_I2C_Mem_Write+0xf8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800eedc:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eede:	6993      	ldr	r3, [r2, #24]
 800eee0:	0619      	lsls	r1, r3, #24
 800eee2:	d4b3      	bmi.n	800ee4c <HAL_I2C_Mem_Write+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eee4:	f7fe ffe2 	bl	800deac <HAL_GetTick>
 800eee8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eeea:	1b43      	subs	r3, r0, r5
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d301      	bcc.n	800eef4 <HAL_I2C_Mem_Write+0x17c>
 800eef0:	2a00      	cmp	r2, #0
 800eef2:	d1f3      	bne.n	800eedc <HAL_I2C_Mem_Write+0x164>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800eef4:	6822      	ldr	r2, [r4, #0]
 800eef6:	6991      	ldr	r1, [r2, #24]
 800eef8:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800eefc:	d1ef      	bne.n	800eede <HAL_I2C_Mem_Write+0x166>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eefe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ef00:	2220      	movs	r2, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ef02:	4313      	orrs	r3, r2
 800ef04:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ef06:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ef0a:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800ef0e:	2300      	movs	r3, #0
 800ef10:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800ef14:	e767      	b.n	800ede6 <HAL_I2C_Mem_Write+0x6e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef16:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	2bff      	cmp	r3, #255	@ 0xff
 800ef1c:	f240 8081 	bls.w	800f022 <HAL_I2C_Mem_Write+0x2aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef20:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800ef22:	4a49      	ldr	r2, [pc, #292]	@ (800f048 <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef24:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ef26:	684b      	ldr	r3, [r1, #4]
 800ef28:	4013      	ands	r3, r2
 800ef2a:	4a48      	ldr	r2, [pc, #288]	@ (800f04c <HAL_I2C_Mem_Write+0x2d4>)
 800ef2c:	4333      	orrs	r3, r6
 800ef2e:	431a      	orrs	r2, r3
 800ef30:	604a      	str	r2, [r1, #4]
    } while (hi2c->XferCount > 0U);
 800ef32:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d05d      	beq.n	800eff6 <HAL_I2C_Mem_Write+0x27e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ef3a:	462a      	mov	r2, r5
 800ef3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f7ff fd3a 	bl	800e9b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	f47f af4e 	bne.w	800ede6 <HAL_I2C_Mem_Write+0x6e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ef4a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ef4c:	6821      	ldr	r1, [r4, #0]
 800ef4e:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
 800ef52:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ef54:	6288      	str	r0, [r1, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800ef56:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800ef58:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800ef5a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800ef5c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800ef5e:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800ef60:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800ef62:	b292      	uxth	r2, r2
 800ef64:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef66:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800ef68:	b292      	uxth	r2, r2
 800ef6a:	2a00      	cmp	r2, #0
 800ef6c:	d0e1      	beq.n	800ef32 <HAL_I2C_Mem_Write+0x1ba>
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d1df      	bne.n	800ef32 <HAL_I2C_Mem_Write+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ef72:	698b      	ldr	r3, [r1, #24]
 800ef74:	061b      	lsls	r3, r3, #24
 800ef76:	d4ce      	bmi.n	800ef16 <HAL_I2C_Mem_Write+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef78:	f7fe ff98 	bl	800deac <HAL_GetTick>
 800ef7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef7e:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ef80:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d301      	bcc.n	800ef8a <HAL_I2C_Mem_Write+0x212>
 800ef86:	2a00      	cmp	r2, #0
 800ef88:	d1f3      	bne.n	800ef72 <HAL_I2C_Mem_Write+0x1fa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ef8a:	698b      	ldr	r3, [r1, #24]
 800ef8c:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 800ef90:	d1ef      	bne.n	800ef72 <HAL_I2C_Mem_Write+0x1fa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ef92:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ef94:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 800ef96:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ef9a:	430a      	orrs	r2, r1
 800ef9c:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ef9e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800efa2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800efa6:	e71e      	b.n	800ede6 <HAL_I2C_Mem_Write+0x6e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800efa8:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800efaa:	4a27      	ldr	r2, [pc, #156]	@ (800f048 <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800efac:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800efae:	684b      	ldr	r3, [r1, #4]
 800efb0:	4013      	ands	r3, r2
 800efb2:	4a26      	ldr	r2, [pc, #152]	@ (800f04c <HAL_I2C_Mem_Write+0x2d4>)
 800efb4:	4333      	orrs	r3, r6
 800efb6:	431a      	orrs	r2, r3
 800efb8:	604a      	str	r2, [r1, #4]
 800efba:	e759      	b.n	800ee70 <HAL_I2C_Mem_Write+0xf8>
      hi2c->XferSize = hi2c->XferCount;
 800efbc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800efbe:	4822      	ldr	r0, [pc, #136]	@ (800f048 <HAL_I2C_Mem_Write+0x2d0>)
      hi2c->XferSize = hi2c->XferCount;
 800efc0:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800efc2:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 800efc4:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800efc6:	6853      	ldr	r3, [r2, #4]
 800efc8:	4003      	ands	r3, r0
 800efca:	4333      	orrs	r3, r6
 800efcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800efd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800efd4:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800efd6:	e747      	b.n	800ee68 <HAL_I2C_Mem_Write+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800efd8:	ea4f 2318 	mov.w	r3, r8, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800efdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800efde:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800efe0:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800efe2:	462a      	mov	r2, r5
 800efe4:	f7ff fce8 	bl	800e9b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800efe8:	2800      	cmp	r0, #0
 800efea:	d190      	bne.n	800ef0e <HAL_I2C_Mem_Write+0x196>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800efec:	6822      	ldr	r2, [r4, #0]
 800efee:	fa5f f388 	uxtb.w	r3, r8
 800eff2:	6293      	str	r3, [r2, #40]	@ 0x28
 800eff4:	e724      	b.n	800ee40 <HAL_I2C_Mem_Write+0xc8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eff6:	462a      	mov	r2, r5
 800eff8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800effa:	4620      	mov	r0, r4
 800effc:	f7ff fd92 	bl	800eb24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f000:	2800      	cmp	r0, #0
 800f002:	f47f aef0 	bne.w	800ede6 <HAL_I2C_Mem_Write+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800f00a:	4d11      	ldr	r5, [pc, #68]	@ (800f050 <HAL_I2C_Mem_Write+0x2d8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f00c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800f00e:	685a      	ldr	r2, [r3, #4]
 800f010:	402a      	ands	r2, r5
 800f012:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800f014:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800f018:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f01c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800f020:	e6e2      	b.n	800ede8 <HAL_I2C_Mem_Write+0x70>
          hi2c->XferSize = hi2c->XferCount;
 800f022:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800f024:	4808      	ldr	r0, [pc, #32]	@ (800f048 <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = hi2c->XferCount;
 800f026:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f028:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
 800f02a:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800f02c:	684b      	ldr	r3, [r1, #4]
 800f02e:	4003      	ands	r3, r0
 800f030:	4333      	orrs	r3, r6
 800f032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f036:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800f03a:	604b      	str	r3, [r1, #4]
}
 800f03c:	e779      	b.n	800ef32 <HAL_I2C_Mem_Write+0x1ba>
 800f03e:	bf00      	nop
 800f040:	fc009800 	.word	0xfc009800
 800f044:	01002000 	.word	0x01002000
 800f048:	fc009c00 	.word	0xfc009c00
 800f04c:	01ff0000 	.word	0x01ff0000
 800f050:	fe00e800 	.word	0xfe00e800

0800f054 <HAL_I2C_Mem_Read>:
{
 800f054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f058:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800f05a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800f05e:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800f062:	2b20      	cmp	r3, #32
{
 800f064:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800f068:	d130      	bne.n	800f0cc <HAL_I2C_Mem_Read+0x78>
    if ((pData == NULL) || (Size == 0U))
 800f06a:	9b08      	ldr	r3, [sp, #32]
 800f06c:	4604      	mov	r4, r0
 800f06e:	b33b      	cbz	r3, 800f0c0 <HAL_I2C_Mem_Read+0x6c>
 800f070:	f1ba 0f00 	cmp.w	sl, #0
 800f074:	d024      	beq.n	800f0c0 <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 800f076:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d026      	beq.n	800f0cc <HAL_I2C_Mem_Read+0x78>
 800f07e:	2301      	movs	r3, #1
 800f080:	460e      	mov	r6, r1
 800f082:	4691      	mov	r9, r2
 800f084:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800f088:	f7fe ff10 	bl	800deac <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f08c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800f08e:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f090:	699a      	ldr	r2, [r3, #24]
 800f092:	0410      	lsls	r0, r2, #16
 800f094:	d51d      	bpl.n	800f0d2 <HAL_I2C_Mem_Read+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f096:	f7fe ff09 	bl	800deac <HAL_GetTick>
 800f09a:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f09c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f09e:	2819      	cmp	r0, #25
 800f0a0:	d9f6      	bls.n	800f090 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f0a2:	699a      	ldr	r2, [r3, #24]
 800f0a4:	0411      	lsls	r1, r2, #16
 800f0a6:	d5f3      	bpl.n	800f090 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f0a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800f0aa:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f0ac:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f0ae:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800f0b0:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f0b4:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800f0b6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f0ba:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800f0be:	e002      	b.n	800f0c6 <HAL_I2C_Mem_Read+0x72>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f0c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f0c4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800f0c6:	2001      	movs	r0, #1
}
 800f0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800f0cc:	2002      	movs	r0, #2
}
 800f0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
 800f0d2:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f0d4:	2122      	movs	r1, #34	@ 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f0d6:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f0da:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f0dc:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f0e0:	2140      	movs	r1, #64	@ 0x40
    hi2c->pBuffPtr  = pData;
 800f0e2:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f0e4:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f0e6:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->XferISR   = NULL;
 800f0ea:	6362      	str	r2, [r4, #52]	@ 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f0ec:	6462      	str	r2, [r4, #68]	@ 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
 800f0ee:	4975      	ldr	r1, [pc, #468]	@ (800f2c4 <HAL_I2C_Mem_Read+0x270>)
    hi2c->XferCount = Size;
 800f0f0:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800f0f4:	685a      	ldr	r2, [r3, #4]
 800f0f6:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f0f8:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800f0fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f0fe:	4641      	mov	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 800f100:	4332      	orrs	r2, r6
 800f102:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f106:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f108:	462a      	mov	r2, r5
 800f10a:	f7ff fc55 	bl	800e9b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800f10e:	2800      	cmp	r0, #0
 800f110:	d152      	bne.n	800f1b8 <HAL_I2C_Mem_Read+0x164>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f112:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f114:	6821      	ldr	r1, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f116:	f040 80b0 	bne.w	800f27a <HAL_I2C_Mem_Read+0x226>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f11a:	fa5f f389 	uxtb.w	r3, r9
 800f11e:	628b      	str	r3, [r1, #40]	@ 0x28
 800f120:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f124:	d130      	bne.n	800f188 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f126:	698b      	ldr	r3, [r1, #24]
 800f128:	065a      	lsls	r2, r3, #25
 800f12a:	d5fc      	bpl.n	800f126 <HAL_I2C_Mem_Read+0xd2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f12c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800f12e:	b29b      	uxth	r3, r3
 800f130:	2bff      	cmp	r3, #255	@ 0xff
 800f132:	f240 8094 	bls.w	800f25e <HAL_I2C_Mem_Read+0x20a>
  MODIFY_REG(hi2c->Instance->CR2, \
 800f136:	684b      	ldr	r3, [r1, #4]
 800f138:	4a62      	ldr	r2, [pc, #392]	@ (800f2c4 <HAL_I2C_Mem_Read+0x270>)
 800f13a:	4013      	ands	r3, r2
 800f13c:	4a62      	ldr	r2, [pc, #392]	@ (800f2c8 <HAL_I2C_Mem_Read+0x274>)
 800f13e:	4333      	orrs	r3, r6
 800f140:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f142:	23ff      	movs	r3, #255	@ 0xff
 800f144:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800f146:	604a      	str	r2, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f148:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f14c:	d13f      	bne.n	800f1ce <HAL_I2C_Mem_Read+0x17a>
 800f14e:	698b      	ldr	r3, [r1, #24]
 800f150:	075f      	lsls	r7, r3, #29
 800f152:	d5fc      	bpl.n	800f14e <HAL_I2C_Mem_Read+0xfa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f154:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800f156:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f158:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800f15a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800f15c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800f15e:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800f160:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800f162:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800f164:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800f166:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800f168:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800f16a:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f16c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 800f16e:	6261      	str	r1, [r4, #36]	@ 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f170:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800f172:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f174:	b10a      	cbz	r2, 800f17a <HAL_I2C_Mem_Read+0x126>
 800f176:	2b00      	cmp	r3, #0
 800f178:	d04e      	beq.n	800f218 <HAL_I2C_Mem_Read+0x1c4>
    } while (hi2c->XferCount > 0U);
 800f17a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f000 808a 	beq.w	800f298 <HAL_I2C_Mem_Read+0x244>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f184:	6821      	ldr	r1, [r4, #0]
 800f186:	e7df      	b.n	800f148 <HAL_I2C_Mem_Read+0xf4>
 800f188:	698b      	ldr	r3, [r1, #24]
 800f18a:	065b      	lsls	r3, r3, #25
 800f18c:	d4ce      	bmi.n	800f12c <HAL_I2C_Mem_Read+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f18e:	f7fe fe8d 	bl	800deac <HAL_GetTick>
 800f192:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f194:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f196:	4598      	cmp	r8, r3
 800f198:	d302      	bcc.n	800f1a0 <HAL_I2C_Mem_Read+0x14c>
 800f19a:	f1b8 0f00 	cmp.w	r8, #0
 800f19e:	d1f3      	bne.n	800f188 <HAL_I2C_Mem_Read+0x134>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f1a0:	698b      	ldr	r3, [r1, #24]
 800f1a2:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800f1a6:	d1ef      	bne.n	800f188 <HAL_I2C_Mem_Read+0x134>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f1a8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800f1aa:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f1ac:	430a      	orrs	r2, r1
 800f1ae:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800f1b0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f1b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800f1be:	e782      	b.n	800f0c6 <HAL_I2C_Mem_Read+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1c0:	f1b8 0f00 	cmp.w	r8, #0
 800f1c4:	d103      	bne.n	800f1ce <HAL_I2C_Mem_Read+0x17a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f1c6:	698b      	ldr	r3, [r1, #24]
 800f1c8:	f013 0304 	ands.w	r3, r3, #4
 800f1cc:	d019      	beq.n	800f202 <HAL_I2C_Mem_Read+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f1ce:	698b      	ldr	r3, [r1, #24]
 800f1d0:	0758      	lsls	r0, r3, #29
 800f1d2:	d4bf      	bmi.n	800f154 <HAL_I2C_Mem_Read+0x100>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1d4:	f7fe fe6a 	bl	800deac <HAL_GetTick>
 800f1d8:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f1da:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1dc:	4598      	cmp	r8, r3
 800f1de:	d2ef      	bcs.n	800f1c0 <HAL_I2C_Mem_Read+0x16c>
 800f1e0:	e7f1      	b.n	800f1c6 <HAL_I2C_Mem_Read+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f1e2:	6993      	ldr	r3, [r2, #24]
 800f1e4:	061b      	lsls	r3, r3, #24
 800f1e6:	d41e      	bmi.n	800f226 <HAL_I2C_Mem_Read+0x1d2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1e8:	f7fe fe60 	bl	800deac <HAL_GetTick>
 800f1ec:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f1ee:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1f0:	4598      	cmp	r8, r3
 800f1f2:	d302      	bcc.n	800f1fa <HAL_I2C_Mem_Read+0x1a6>
 800f1f4:	f1b8 0f00 	cmp.w	r8, #0
 800f1f8:	d1f3      	bne.n	800f1e2 <HAL_I2C_Mem_Read+0x18e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f1fa:	6993      	ldr	r3, [r2, #24]
 800f1fc:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 800f200:	d1ef      	bne.n	800f1e2 <HAL_I2C_Mem_Read+0x18e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f202:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800f204:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 800f206:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f20a:	430a      	orrs	r2, r1
 800f20c:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800f20e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f212:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800f216:	e756      	b.n	800f0c6 <HAL_I2C_Mem_Read+0x72>
 800f218:	f1b8 3fff 	cmp.w	r8, #4294967295
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f21c:	6822      	ldr	r2, [r4, #0]
 800f21e:	d1e0      	bne.n	800f1e2 <HAL_I2C_Mem_Read+0x18e>
 800f220:	6993      	ldr	r3, [r2, #24]
 800f222:	0619      	lsls	r1, r3, #24
 800f224:	d5fc      	bpl.n	800f220 <HAL_I2C_Mem_Read+0x1cc>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f226:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800f228:	b29b      	uxth	r3, r3
 800f22a:	2bff      	cmp	r3, #255	@ 0xff
 800f22c:	d909      	bls.n	800f242 <HAL_I2C_Mem_Read+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
 800f22e:	6853      	ldr	r3, [r2, #4]
 800f230:	4926      	ldr	r1, [pc, #152]	@ (800f2cc <HAL_I2C_Mem_Read+0x278>)
 800f232:	400b      	ands	r3, r1
 800f234:	4926      	ldr	r1, [pc, #152]	@ (800f2d0 <HAL_I2C_Mem_Read+0x27c>)
 800f236:	4333      	orrs	r3, r6
 800f238:	4319      	orrs	r1, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f23a:	23ff      	movs	r3, #255	@ 0xff
 800f23c:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800f23e:	6051      	str	r1, [r2, #4]
}
 800f240:	e79b      	b.n	800f17a <HAL_I2C_Mem_Read+0x126>
          hi2c->XferSize = hi2c->XferCount;
 800f242:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800f244:	4821      	ldr	r0, [pc, #132]	@ (800f2cc <HAL_I2C_Mem_Read+0x278>)
          hi2c->XferSize = hi2c->XferCount;
 800f246:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f248:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 800f24a:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800f24c:	6853      	ldr	r3, [r2, #4]
 800f24e:	4003      	ands	r3, r0
 800f250:	4333      	orrs	r3, r6
 800f252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f256:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800f25a:	6053      	str	r3, [r2, #4]
}
 800f25c:	e78d      	b.n	800f17a <HAL_I2C_Mem_Read+0x126>
      hi2c->XferSize = hi2c->XferCount;
 800f25e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800f260:	4818      	ldr	r0, [pc, #96]	@ (800f2c4 <HAL_I2C_Mem_Read+0x270>)
      hi2c->XferSize = hi2c->XferCount;
 800f262:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f264:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
 800f266:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800f268:	684b      	ldr	r3, [r1, #4]
 800f26a:	4003      	ands	r3, r0
 800f26c:	4333      	orrs	r3, r6
 800f26e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f272:	4a18      	ldr	r2, [pc, #96]	@ (800f2d4 <HAL_I2C_Mem_Read+0x280>)
 800f274:	431a      	orrs	r2, r3
 800f276:	604a      	str	r2, [r1, #4]
}
 800f278:	e766      	b.n	800f148 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f27a:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f27e:	462a      	mov	r2, r5
 800f280:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f282:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f284:	4641      	mov	r1, r8
 800f286:	f7ff fb97 	bl	800e9b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d194      	bne.n	800f1b8 <HAL_I2C_Mem_Read+0x164>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f28e:	fa5f f389 	uxtb.w	r3, r9
 800f292:	6821      	ldr	r1, [r4, #0]
 800f294:	628b      	str	r3, [r1, #40]	@ 0x28
 800f296:	e743      	b.n	800f120 <HAL_I2C_Mem_Read+0xcc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f298:	462a      	mov	r2, r5
 800f29a:	4641      	mov	r1, r8
 800f29c:	4620      	mov	r0, r4
 800f29e:	f7ff fc41 	bl	800eb24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	f47f af0f 	bne.w	800f0c6 <HAL_I2C_Mem_Read+0x72>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f2a8:	6823      	ldr	r3, [r4, #0]
 800f2aa:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800f2ac:	4d0a      	ldr	r5, [pc, #40]	@ (800f2d8 <HAL_I2C_Mem_Read+0x284>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f2ae:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800f2b0:	685a      	ldr	r2, [r3, #4]
 800f2b2:	402a      	ands	r2, r5
 800f2b4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800f2b6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800f2ba:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f2be:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800f2c2:	e701      	b.n	800f0c8 <HAL_I2C_Mem_Read+0x74>
 800f2c4:	fc009800 	.word	0xfc009800
 800f2c8:	01ff2400 	.word	0x01ff2400
 800f2cc:	fc009c00 	.word	0xfc009c00
 800f2d0:	01ff0000 	.word	0x01ff0000
 800f2d4:	02002400 	.word	0x02002400
 800f2d8:	fe00e800 	.word	0xfe00e800

0800f2dc <HAL_I2C_GetState>:
  return hi2c->State;
 800f2dc:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop

0800f2e4 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800f2e4:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800f2e6:	4770      	bx	lr

0800f2e8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f2e8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800f2ec:	2a20      	cmp	r2, #32
 800f2ee:	d123      	bne.n	800f338 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800f2f0:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f2f4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2a01      	cmp	r2, #1
 800f2fc:	d01c      	beq.n	800f338 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f2fe:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800f300:	2024      	movs	r0, #36	@ 0x24
{
 800f302:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800f304:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f308:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 800f30c:	6810      	ldr	r0, [r2, #0]
 800f30e:	f020 0001 	bic.w	r0, r0, #1
 800f312:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f314:	6810      	ldr	r0, [r2, #0]
 800f316:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800f31a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800f31c:	6810      	ldr	r0, [r2, #0]
 800f31e:	4301      	orrs	r1, r0

    return HAL_OK;
 800f320:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 800f322:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800f324:	6811      	ldr	r1, [r2, #0]
 800f326:	f041 0101 	orr.w	r1, r1, #1
 800f32a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800f32c:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800f330:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800f334:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800f338:	2002      	movs	r0, #2
}
 800f33a:	4770      	bx	lr

0800f33c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f33c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800f340:	2a20      	cmp	r2, #32
 800f342:	d122      	bne.n	800f38a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 800f344:	4603      	mov	r3, r0
{
 800f346:	b500      	push	{lr}
 800f348:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f34c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800f350:	2a01      	cmp	r2, #1
 800f352:	d01c      	beq.n	800f38e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f354:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800f356:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f358:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800f35c:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800f360:	6810      	ldr	r0, [r2, #0]
 800f362:	f020 0001 	bic.w	r0, r0, #1
 800f366:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800f368:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800f36a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 800f36e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 800f372:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 800f374:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800f376:	6811      	ldr	r1, [r2, #0]
 800f378:	f041 0101 	orr.w	r1, r1, #1
 800f37c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800f37e:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800f382:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800f386:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800f38a:	2002      	movs	r0, #2
}
 800f38c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800f38e:	2002      	movs	r0, #2
}
 800f390:	f85d fb04 	ldr.w	pc, [sp], #4

0800f394 <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop

0800f398 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800f398:	2800      	cmp	r0, #0
 800f39a:	d067      	beq.n	800f46c <HAL_LTDC_Init+0xd4>
{
 800f39c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800f39e:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d05a      	beq.n	800f462 <HAL_LTDC_Init+0xca>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f3ac:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f3ae:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f3b0:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f3b4:	f884 10a1 	strb.w	r1, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f3b8:	4302      	orrs	r2, r0
 800f3ba:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800f3bc:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f3be:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800f3c0:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800f3c2:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800f3c6:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800f3c8:	4929      	ldr	r1, [pc, #164]	@ (800f470 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800f3ca:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f3cc:	6998      	ldr	r0, [r3, #24]
 800f3ce:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800f3d0:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f3d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800f3d4:	689a      	ldr	r2, [r3, #8]
 800f3d6:	400a      	ands	r2, r1
 800f3d8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800f3da:	689a      	ldr	r2, [r3, #8]
 800f3dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f3e0:	69a0      	ldr	r0, [r4, #24]
 800f3e2:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800f3e4:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800f3e6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800f3e8:	68da      	ldr	r2, [r3, #12]
 800f3ea:	400a      	ands	r2, r1
 800f3ec:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800f3ee:	68da      	ldr	r2, [r3, #12]
 800f3f0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f3f4:	6a20      	ldr	r0, [r4, #32]
 800f3f6:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800f3f8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800f3fa:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800f3fc:	691a      	ldr	r2, [r3, #16]
 800f3fe:	400a      	ands	r2, r1
 800f400:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800f402:	691a      	ldr	r2, [r3, #16]
 800f404:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f408:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f40a:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.TotalWidth << 16U);
 800f40c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800f40e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800f410:	695a      	ldr	r2, [r3, #20]
 800f412:	400a      	ands	r2, r1
 800f414:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800f416:	695a      	ldr	r2, [r3, #20]
 800f418:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f41a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f41e:	430a      	orrs	r2, r1
 800f420:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800f422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800f424:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800f428:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800f42c:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800f430:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800f432:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800f434:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800f438:	432a      	orrs	r2, r5
 800f43a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800f43e:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800f440:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800f444:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800f446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f448:	f042 0206 	orr.w	r2, r2, #6
 800f44c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800f44e:	699a      	ldr	r2, [r3, #24]
 800f450:	f042 0201 	orr.w	r2, r2, #1
 800f454:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800f456:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800f458:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800f45c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800f460:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800f462:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800f466:	f7ff ff95 	bl	800f394 <HAL_LTDC_MspInit>
 800f46a:	e79f      	b.n	800f3ac <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800f46c:	2001      	movs	r0, #1
}
 800f46e:	4770      	bx	lr
 800f470:	f000f800 	.word	0xf000f800

0800f474 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800f474:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800f478:	2b01      	cmp	r3, #1
 800f47a:	f000 80c3 	beq.w	800f604 <HAL_LTDC_ConfigLayer+0x190>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f47e:	2302      	movs	r3, #2
{
 800f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f484:	f04f 0e34 	mov.w	lr, #52	@ 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f488:	f8d0 9000 	ldr.w	r9, [r0]
{
 800f48c:	b083      	sub	sp, #12
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f48e:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f492:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f496:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f498:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f49c:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f49e:	f102 0684 	add.w	r6, r2, #132	@ 0x84
 800f4a2:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f4a4:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
 800f4a8:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f4aa:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f4ae:	f10e 0e38 	add.w	lr, lr, #56	@ 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f4b2:	f8df a158 	ldr.w	sl, [pc, #344]	@ 800f60c <HAL_LTDC_ConfigLayer+0x198>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f4b6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f4ba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800f4be:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f4c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f4c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f4c8:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f4ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f4ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f4d4:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f4d6:	44bb      	add	fp, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800f4d8:	682a      	ldr	r2, [r5, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f4da:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f4de:	9b01      	ldr	r3, [sp, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f4e0:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f4e2:	68e8      	ldr	r0, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f4e4:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f4e8:	f8d9 300c 	ldr.w	r3, [r9, #12]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800f4ec:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f4f0:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800f4f4:	440b      	add	r3, r1
 800f4f6:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800f4fa:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f4fe:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f502:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f506:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f50a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f50e:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f510:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800f514:	68ab      	ldr	r3, [r5, #8]
 800f516:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800f51a:	3301      	adds	r3, #1
 800f51c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800f520:	4403      	add	r3, r0
 800f522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800f526:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800f528:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800f52c:	2907      	cmp	r1, #7
 800f52e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800f532:	f023 0307 	bic.w	r3, r3, #7
 800f536:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800f53a:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800f53e:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800f542:	f04f 0300 	mov.w	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800f546:	f895 0032 	ldrb.w	r0, [r5, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800f54a:	f895 4031 	ldrb.w	r4, [r5, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800f54e:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800f552:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800f556:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 800f55a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800f55e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f562:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800f566:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800f56a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f56e:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800f572:	696b      	ldr	r3, [r5, #20]
 800f574:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f578:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f57c:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f57e:	ea00 0a0a 	and.w	sl, r0, sl
 800f582:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f586:	6a28      	ldr	r0, [r5, #32]
 800f588:	ea43 0300 	orr.w	r3, r3, r0
 800f58c:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800f590:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 800f594:	f04f 0300 	mov.w	r3, #0
 800f598:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800f59c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800f59e:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800f5a2:	d82d      	bhi.n	800f600 <HAL_LTDC_ConfigLayer+0x18c>
 800f5a4:	4b18      	ldr	r3, [pc, #96]	@ (800f608 <HAL_LTDC_ConfigLayer+0x194>)
 800f5a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f5aa:	1abf      	subs	r7, r7, r2
 800f5ac:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800f5ae:	fb03 f707 	mul.w	r7, r3, r7
 800f5b2:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f5b6:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f5b8:	3707      	adds	r7, #7
 800f5ba:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800f5be:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 800f5c2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800f5c6:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f5ca:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800f5ce:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
 800f5d2:	f36f 030a 	bfc	r3, #0, #11
 800f5d6:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f5da:	f8cc 2030 	str.w	r2, [ip, #48]	@ 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800f5de:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800f5e0:	f859 3006 	ldr.w	r3, [r9, r6]
 800f5e4:	4313      	orrs	r3, r2
 800f5e6:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 800f5ea:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800f5ec:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
  return HAL_OK;
 800f5f0:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 800f5f2:	f888 20a1 	strb.w	r2, [r8, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800f5f6:	f888 30a0 	strb.w	r3, [r8, #160]	@ 0xa0
}
 800f5fa:	b003      	add	sp, #12
 800f5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800f600:	2301      	movs	r3, #1
 800f602:	e7d2      	b.n	800f5aa <HAL_LTDC_ConfigLayer+0x136>
  __HAL_LOCK(hltdc);
 800f604:	2002      	movs	r0, #2
}
 800f606:	4770      	bx	lr
 800f608:	080130fc 	.word	0x080130fc
 800f60c:	fffff8f8 	.word	0xfffff8f8

0800f610 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800f614:	f7fe fc4a 	bl	800deac <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f618:	2c00      	cmp	r4, #0
 800f61a:	d058      	beq.n	800f6ce <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800f61c:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800f61e:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 800f620:	2100      	movs	r1, #0
 800f622:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800f624:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800f628:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800f62c:	68da      	ldr	r2, [r3, #12]
 800f62e:	f022 0201 	bic.w	r2, r2, #1
 800f632:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f634:	e005      	b.n	800f642 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800f636:	f7fe fc39 	bl	800deac <HAL_GetTick>
 800f63a:	1b43      	subs	r3, r0, r5
 800f63c:	2b05      	cmp	r3, #5
 800f63e:	d841      	bhi.n	800f6c4 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f640:	6823      	ldr	r3, [r4, #0]
 800f642:	68da      	ldr	r2, [r3, #12]
 800f644:	07d2      	lsls	r2, r2, #31
 800f646:	d4f6      	bmi.n	800f636 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f648:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 800f64c:	69e0      	ldr	r0, [r4, #28]
 800f64e:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f650:	68e1      	ldr	r1, [r4, #12]
 800f652:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f654:	4302      	orrs	r2, r0
 800f656:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f658:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f65a:	4302      	orrs	r2, r0
 800f65c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f65e:	4302      	orrs	r2, r0
 800f660:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f662:	4302      	orrs	r2, r0
 800f664:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800f666:	4302      	orrs	r2, r0
 800f668:	68a0      	ldr	r0, [r4, #8]
 800f66a:	4302      	orrs	r2, r0
 800f66c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f66e:	3801      	subs	r0, #1
 800f670:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f674:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f676:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f678:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f67c:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f67e:	d103      	bne.n	800f688 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800f680:	691a      	ldr	r2, [r3, #16]
 800f682:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800f686:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800f688:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f68a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f68c:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 800f68e:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f690:	db1f      	blt.n	800f6d2 <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800f692:	b292      	uxth	r2, r2
 800f694:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f696:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f698:	2a00      	cmp	r2, #0
 800f69a:	db24      	blt.n	800f6e6 <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f69c:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f69e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f6a2:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800f6a6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f6a8:	d029      	beq.n	800f6fe <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800f6aa:	b2c0      	uxtb	r0, r0
 800f6ac:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800f6ae:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800f6b0:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800f6b2:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 800f6b4:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f6b6:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800f6b8:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800f6ba:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f6be:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 800f6c2:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800f6c4:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f6c6:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800f6c8:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f6ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800f6ce:	2001      	movs	r0, #1
}
 800f6d0:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f6d2:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800f6d4:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f6d6:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f6da:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f6dc:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f6de:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f6e0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f6e2:	2a00      	cmp	r2, #0
 800f6e4:	dada      	bge.n	800f69c <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f6e6:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800f6e8:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f6ea:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f6ee:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800f6f2:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f6f4:	6a19      	ldr	r1, [r3, #32]
 800f6f6:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800f6fa:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f6fc:	d1d5      	bne.n	800f6aa <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800f6fe:	2200      	movs	r2, #0
 800f700:	629a      	str	r2, [r3, #40]	@ 0x28
 800f702:	e7d4      	b.n	800f6ae <HAL_MDMA_Init+0x9e>

0800f704 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800f704:	b1f8      	cbz	r0, 800f746 <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
 800f706:	6802      	ldr	r2, [r0, #0]
 800f708:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
 800f70a:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800f70c:	68d0      	ldr	r0, [r2, #12]
{
 800f70e:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
 800f710:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800f714:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
 800f716:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
 800f718:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
 800f71a:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800f71c:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800f71e:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800f720:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800f722:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800f724:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800f726:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800f728:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800f72a:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800f72c:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800f72e:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f730:	668b      	str	r3, [r1, #104]	@ 0x68
  __HAL_UNLOCK(hmdma);
 800f732:	f881 303c 	strb.w	r3, [r1, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 800f736:	f881 303d 	strb.w	r3, [r1, #61]	@ 0x3d
}
 800f73a:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
 800f73e:	664b      	str	r3, [r1, #100]	@ 0x64
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f740:	e9c1 3317 	strd	r3, r3, [r1, #92]	@ 0x5c
}
 800f744:	4770      	bx	lr
    return HAL_ERROR;
 800f746:	2001      	movs	r0, #1
}
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop

0800f74c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800f74c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800f74e:	4c10      	ldr	r4, [pc, #64]	@ (800f790 <HAL_PWREx_ConfigSupply+0x44>)
 800f750:	68e3      	ldr	r3, [r4, #12]
 800f752:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f756:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800f758:	d105      	bne.n	800f766 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f75a:	f003 0307 	and.w	r3, r3, #7
 800f75e:	1a18      	subs	r0, r3, r0
 800f760:	bf18      	it	ne
 800f762:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800f764:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800f766:	f023 0307 	bic.w	r3, r3, #7
 800f76a:	4303      	orrs	r3, r0
 800f76c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800f76e:	f7fe fb9d 	bl	800deac <HAL_GetTick>
 800f772:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f774:	e005      	b.n	800f782 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f776:	f7fe fb99 	bl	800deac <HAL_GetTick>
 800f77a:	1b40      	subs	r0, r0, r5
 800f77c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800f780:	d804      	bhi.n	800f78c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f782:	6863      	ldr	r3, [r4, #4]
 800f784:	049b      	lsls	r3, r3, #18
 800f786:	d5f6      	bpl.n	800f776 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 800f788:	2000      	movs	r0, #0
}
 800f78a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800f78c:	2001      	movs	r0, #1
}
 800f78e:	bd38      	pop	{r3, r4, r5, pc}
 800f790:	58024800 	.word	0x58024800

0800f794 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f794:	4b33      	ldr	r3, [pc, #204]	@ (800f864 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800f796:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f798:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f79a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f79c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800f79e:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f7a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f7a4:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800f7a8:	d036      	beq.n	800f818 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f7aa:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f7ae:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f7b2:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f7b6:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f7ba:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 800f7be:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f7c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f7c4:	ee06 2a90 	vmov	s13, r2
 800f7c8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800f7cc:	d002      	beq.n	800f7d4 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800f7ce:	2902      	cmp	r1, #2
 800f7d0:	d042      	beq.n	800f858 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800f7d2:	b319      	cbz	r1, 800f81c <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f7d4:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800f868 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800f7d8:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800f7dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7e2:	ee07 3a90 	vmov	s15, r3
 800f7e6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800f7ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800f7f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7f6:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800f7fa:	4b1a      	ldr	r3, [pc, #104]	@ (800f864 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 800f7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7fe:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f802:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800f804:	ee07 3a10 	vmov	s14, r3
 800f808:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800f80c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f810:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f814:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800f818:	bc30      	pop	{r4, r5}
 800f81a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	0692      	lsls	r2, r2, #26
 800f820:	d51d      	bpl.n	800f85e <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f822:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f824:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f828:	4a10      	ldr	r2, [pc, #64]	@ (800f86c <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f82a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f82c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f830:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f834:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f836:	ee06 3a10 	vmov	s12, r3
 800f83a:	ee05 2a90 	vmov	s11, r2
 800f83e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800f842:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800f846:	ee36 6a27 	vadd.f32	s12, s12, s15
 800f84a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800f84e:	ee36 7a26 	vadd.f32	s14, s12, s13
 800f852:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f856:	e7d0      	b.n	800f7fa <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f858:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800f870 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 800f85c:	e7bc      	b.n	800f7d8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f85e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800f874 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 800f862:	e7b9      	b.n	800f7d8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800f864:	58024400 	.word	0x58024400
 800f868:	4a742400 	.word	0x4a742400
 800f86c:	03d09000 	.word	0x03d09000
 800f870:	4bbebc20 	.word	0x4bbebc20
 800f874:	4c742400 	.word	0x4c742400

0800f878 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800f878:	2800      	cmp	r0, #0
 800f87a:	f000 82e7 	beq.w	800fe4c <HAL_RCC_OscConfig+0x5d4>
{
 800f87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f880:	6803      	ldr	r3, [r0, #0]
 800f882:	4604      	mov	r4, r0
 800f884:	07d9      	lsls	r1, r3, #31
 800f886:	d52e      	bpl.n	800f8e6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f888:	4997      	ldr	r1, [pc, #604]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
 800f88a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f88c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f88e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f892:	2a10      	cmp	r2, #16
 800f894:	f000 80ee 	beq.w	800fa74 <HAL_RCC_OscConfig+0x1fc>
 800f898:	2a18      	cmp	r2, #24
 800f89a:	f000 80e6 	beq.w	800fa6a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f89e:	6863      	ldr	r3, [r4, #4]
 800f8a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8a4:	f000 8111 	beq.w	800faca <HAL_RCC_OscConfig+0x252>
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 8167 	beq.w	800fb7c <HAL_RCC_OscConfig+0x304>
 800f8ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f8b2:	4b8d      	ldr	r3, [pc, #564]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	f000 8288 	beq.w	800fdca <HAL_RCC_OscConfig+0x552>
 800f8ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f8be:	601a      	str	r2, [r3, #0]
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800f8c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800f8c8:	f7fe faf0 	bl	800deac <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f8cc:	4e86      	ldr	r6, [pc, #536]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800f8ce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f8d0:	e005      	b.n	800f8de <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f8d2:	f7fe faeb 	bl	800deac <HAL_GetTick>
 800f8d6:	1b40      	subs	r0, r0, r5
 800f8d8:	2864      	cmp	r0, #100	@ 0x64
 800f8da:	f200 814d 	bhi.w	800fb78 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f8de:	6833      	ldr	r3, [r6, #0]
 800f8e0:	039b      	lsls	r3, r3, #14
 800f8e2:	d5f6      	bpl.n	800f8d2 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f8e4:	6823      	ldr	r3, [r4, #0]
 800f8e6:	079d      	lsls	r5, r3, #30
 800f8e8:	d470      	bmi.n	800f9cc <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f8ea:	06d9      	lsls	r1, r3, #27
 800f8ec:	d533      	bpl.n	800f956 <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f8ee:	4a7e      	ldr	r2, [pc, #504]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
 800f8f0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f8f2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f8f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f8f8:	2b08      	cmp	r3, #8
 800f8fa:	f000 80cb 	beq.w	800fa94 <HAL_RCC_OscConfig+0x21c>
 800f8fe:	2b18      	cmp	r3, #24
 800f900:	f000 80c3 	beq.w	800fa8a <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f904:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800f906:	4d78      	ldr	r5, [pc, #480]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f908:	2b00      	cmp	r3, #0
 800f90a:	f000 816f 	beq.w	800fbec <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 800f90e:	682b      	ldr	r3, [r5, #0]
 800f910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f914:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f916:	f7fe fac9 	bl	800deac <HAL_GetTick>
 800f91a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f91c:	e005      	b.n	800f92a <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f91e:	f7fe fac5 	bl	800deac <HAL_GetTick>
 800f922:	1b80      	subs	r0, r0, r6
 800f924:	2802      	cmp	r0, #2
 800f926:	f200 8127 	bhi.w	800fb78 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f92a:	682b      	ldr	r3, [r5, #0]
 800f92c:	05db      	lsls	r3, r3, #23
 800f92e:	d5f6      	bpl.n	800f91e <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f930:	f7fe fad4 	bl	800dedc <HAL_GetREVID>
 800f934:	f241 0303 	movw	r3, #4099	@ 0x1003
 800f938:	4298      	cmp	r0, r3
 800f93a:	f200 8267 	bhi.w	800fe0c <HAL_RCC_OscConfig+0x594>
 800f93e:	6a22      	ldr	r2, [r4, #32]
 800f940:	686b      	ldr	r3, [r5, #4]
 800f942:	2a20      	cmp	r2, #32
 800f944:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f948:	bf0c      	ite	eq
 800f94a:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800f94e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800f952:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f954:	6823      	ldr	r3, [r4, #0]
 800f956:	071d      	lsls	r5, r3, #28
 800f958:	d516      	bpl.n	800f988 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f95a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800f95c:	4d62      	ldr	r5, [pc, #392]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f000 8122 	beq.w	800fba8 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 800f964:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f966:	f043 0301 	orr.w	r3, r3, #1
 800f96a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800f96c:	f7fe fa9e 	bl	800deac <HAL_GetTick>
 800f970:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f972:	e005      	b.n	800f980 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f974:	f7fe fa9a 	bl	800deac <HAL_GetTick>
 800f978:	1b80      	subs	r0, r0, r6
 800f97a:	2802      	cmp	r0, #2
 800f97c:	f200 80fc 	bhi.w	800fb78 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f980:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f982:	0798      	lsls	r0, r3, #30
 800f984:	d5f6      	bpl.n	800f974 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f986:	6823      	ldr	r3, [r4, #0]
 800f988:	069a      	lsls	r2, r3, #26
 800f98a:	d516      	bpl.n	800f9ba <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800f98c:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800f98e:	4d56      	ldr	r5, [pc, #344]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800f990:	2b00      	cmp	r3, #0
 800f992:	f000 811a 	beq.w	800fbca <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 800f996:	682b      	ldr	r3, [r5, #0]
 800f998:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f99c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800f99e:	f7fe fa85 	bl	800deac <HAL_GetTick>
 800f9a2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f9a4:	e005      	b.n	800f9b2 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f9a6:	f7fe fa81 	bl	800deac <HAL_GetTick>
 800f9aa:	1b80      	subs	r0, r0, r6
 800f9ac:	2802      	cmp	r0, #2
 800f9ae:	f200 80e3 	bhi.w	800fb78 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f9b2:	682b      	ldr	r3, [r5, #0]
 800f9b4:	049f      	lsls	r7, r3, #18
 800f9b6:	d5f6      	bpl.n	800f9a6 <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f9b8:	6823      	ldr	r3, [r4, #0]
 800f9ba:	0759      	lsls	r1, r3, #29
 800f9bc:	f100 808b 	bmi.w	800fad6 <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f9c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f040 80bf 	bne.w	800fb46 <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 800f9c8:	2000      	movs	r0, #0
}
 800f9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f9cc:	4a46      	ldr	r2, [pc, #280]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
 800f9ce:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f9d0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f9d2:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800f9d6:	d12d      	bne.n	800fa34 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f9d8:	4b43      	ldr	r3, [pc, #268]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f9da:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	0759      	lsls	r1, r3, #29
 800f9e0:	d501      	bpl.n	800f9e6 <HAL_RCC_OscConfig+0x16e>
 800f9e2:	2a00      	cmp	r2, #0
 800f9e4:	d04f      	beq.n	800fa86 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f9e6:	4d40      	ldr	r5, [pc, #256]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	f023 0319 	bic.w	r3, r3, #25
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f9f2:	f7fe fa5b 	bl	800deac <HAL_GetTick>
 800f9f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f9f8:	e005      	b.n	800fa06 <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f9fa:	f7fe fa57 	bl	800deac <HAL_GetTick>
 800f9fe:	1b80      	subs	r0, r0, r6
 800fa00:	2802      	cmp	r0, #2
 800fa02:	f200 80b9 	bhi.w	800fb78 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa06:	682b      	ldr	r3, [r5, #0]
 800fa08:	075b      	lsls	r3, r3, #29
 800fa0a:	d5f6      	bpl.n	800f9fa <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa0c:	f7fe fa66 	bl	800dedc <HAL_GetREVID>
 800fa10:	f241 0303 	movw	r3, #4099	@ 0x1003
 800fa14:	4298      	cmp	r0, r3
 800fa16:	f200 8110 	bhi.w	800fc3a <HAL_RCC_OscConfig+0x3c2>
 800fa1a:	6922      	ldr	r2, [r4, #16]
 800fa1c:	686b      	ldr	r3, [r5, #4]
 800fa1e:	2a40      	cmp	r2, #64	@ 0x40
 800fa20:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800fa24:	bf0c      	ite	eq
 800fa26:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800fa2a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800fa2e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fa30:	6823      	ldr	r3, [r4, #0]
 800fa32:	e75a      	b.n	800f8ea <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800fa34:	2b18      	cmp	r3, #24
 800fa36:	f000 80fc 	beq.w	800fc32 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800fa3a:	4d2b      	ldr	r5, [pc, #172]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800fa3c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800fa3e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800fa40:	2a00      	cmp	r2, #0
 800fa42:	f000 80e5 	beq.w	800fc10 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800fa46:	f023 0319 	bic.w	r3, r3, #25
 800fa4a:	4313      	orrs	r3, r2
 800fa4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fa4e:	f7fe fa2d 	bl	800deac <HAL_GetTick>
 800fa52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa54:	e005      	b.n	800fa62 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fa56:	f7fe fa29 	bl	800deac <HAL_GetTick>
 800fa5a:	1b80      	subs	r0, r0, r6
 800fa5c:	2802      	cmp	r0, #2
 800fa5e:	f200 808b 	bhi.w	800fb78 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa62:	682b      	ldr	r3, [r5, #0]
 800fa64:	075f      	lsls	r7, r3, #29
 800fa66:	d5f6      	bpl.n	800fa56 <HAL_RCC_OscConfig+0x1de>
 800fa68:	e7d0      	b.n	800fa0c <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800fa6a:	f001 0103 	and.w	r1, r1, #3
 800fa6e:	2902      	cmp	r1, #2
 800fa70:	f47f af15 	bne.w	800f89e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa74:	4a1c      	ldr	r2, [pc, #112]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
 800fa76:	6812      	ldr	r2, [r2, #0]
 800fa78:	0392      	lsls	r2, r2, #14
 800fa7a:	f57f af34 	bpl.w	800f8e6 <HAL_RCC_OscConfig+0x6e>
 800fa7e:	6862      	ldr	r2, [r4, #4]
 800fa80:	2a00      	cmp	r2, #0
 800fa82:	f47f af30 	bne.w	800f8e6 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 800fa86:	2001      	movs	r0, #1
}
 800fa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800fa8a:	f002 0203 	and.w	r2, r2, #3
 800fa8e:	2a01      	cmp	r2, #1
 800fa90:	f47f af38 	bne.w	800f904 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800fa94:	4b14      	ldr	r3, [pc, #80]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	05da      	lsls	r2, r3, #23
 800fa9a:	d502      	bpl.n	800faa2 <HAL_RCC_OscConfig+0x22a>
 800fa9c:	69e3      	ldr	r3, [r4, #28]
 800fa9e:	2b80      	cmp	r3, #128	@ 0x80
 800faa0:	d1f1      	bne.n	800fa86 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800faa2:	f7fe fa1b 	bl	800dedc <HAL_GetREVID>
 800faa6:	f241 0303 	movw	r3, #4099	@ 0x1003
 800faaa:	4298      	cmp	r0, r3
 800faac:	f200 80ce 	bhi.w	800fc4c <HAL_RCC_OscConfig+0x3d4>
 800fab0:	6a22      	ldr	r2, [r4, #32]
 800fab2:	2a20      	cmp	r2, #32
 800fab4:	f000 81b9 	beq.w	800fe2a <HAL_RCC_OscConfig+0x5b2>
 800fab8:	490b      	ldr	r1, [pc, #44]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
 800faba:	684b      	ldr	r3, [r1, #4]
 800fabc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800fac0:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800fac4:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fac6:	6823      	ldr	r3, [r4, #0]
 800fac8:	e745      	b.n	800f956 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800faca:	4a07      	ldr	r2, [pc, #28]	@ (800fae8 <HAL_RCC_OscConfig+0x270>)
 800facc:	6813      	ldr	r3, [r2, #0]
 800face:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fad2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fad4:	e6f8      	b.n	800f8c8 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800fad6:	4d05      	ldr	r5, [pc, #20]	@ (800faec <HAL_RCC_OscConfig+0x274>)
 800fad8:	682b      	ldr	r3, [r5, #0]
 800fada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fade:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800fae0:	f7fe f9e4 	bl	800deac <HAL_GetTick>
 800fae4:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fae6:	e008      	b.n	800fafa <HAL_RCC_OscConfig+0x282>
 800fae8:	58024400 	.word	0x58024400
 800faec:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800faf0:	f7fe f9dc 	bl	800deac <HAL_GetTick>
 800faf4:	1b80      	subs	r0, r0, r6
 800faf6:	2864      	cmp	r0, #100	@ 0x64
 800faf8:	d83e      	bhi.n	800fb78 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fafa:	682b      	ldr	r3, [r5, #0]
 800fafc:	05da      	lsls	r2, r3, #23
 800fafe:	d5f7      	bpl.n	800faf0 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fb00:	68a3      	ldr	r3, [r4, #8]
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	f000 818b 	beq.w	800fe1e <HAL_RCC_OscConfig+0x5a6>
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f000 8166 	beq.w	800fdda <HAL_RCC_OscConfig+0x562>
 800fb0e:	2b05      	cmp	r3, #5
 800fb10:	4b85      	ldr	r3, [pc, #532]	@ (800fd28 <HAL_RCC_OscConfig+0x4b0>)
 800fb12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fb14:	f000 8192 	beq.w	800fe3c <HAL_RCC_OscConfig+0x5c4>
 800fb18:	f022 0201 	bic.w	r2, r2, #1
 800fb1c:	671a      	str	r2, [r3, #112]	@ 0x70
 800fb1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fb20:	f022 0204 	bic.w	r2, r2, #4
 800fb24:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800fb26:	f7fe f9c1 	bl	800deac <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fb2a:	4e7f      	ldr	r6, [pc, #508]	@ (800fd28 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb2c:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800fb30:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fb32:	e004      	b.n	800fb3e <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb34:	f7fe f9ba 	bl	800deac <HAL_GetTick>
 800fb38:	1b40      	subs	r0, r0, r5
 800fb3a:	42b8      	cmp	r0, r7
 800fb3c:	d81c      	bhi.n	800fb78 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fb3e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800fb40:	079b      	lsls	r3, r3, #30
 800fb42:	d5f7      	bpl.n	800fb34 <HAL_RCC_OscConfig+0x2bc>
 800fb44:	e73c      	b.n	800f9c0 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800fb46:	4d78      	ldr	r5, [pc, #480]	@ (800fd28 <HAL_RCC_OscConfig+0x4b0>)
 800fb48:	692a      	ldr	r2, [r5, #16]
 800fb4a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800fb4e:	2a18      	cmp	r2, #24
 800fb50:	f000 80ee 	beq.w	800fd30 <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fb54:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800fb56:	682b      	ldr	r3, [r5, #0]
 800fb58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fb5c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fb5e:	d07f      	beq.n	800fc60 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 800fb60:	f7fe f9a4 	bl	800deac <HAL_GetTick>
 800fb64:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fb66:	682b      	ldr	r3, [r5, #0]
 800fb68:	019b      	lsls	r3, r3, #6
 800fb6a:	f57f af2d 	bpl.w	800f9c8 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb6e:	f7fe f99d 	bl	800deac <HAL_GetTick>
 800fb72:	1b00      	subs	r0, r0, r4
 800fb74:	2802      	cmp	r0, #2
 800fb76:	d9f6      	bls.n	800fb66 <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 800fb78:	2003      	movs	r0, #3
}
 800fb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fb7c:	4d6a      	ldr	r5, [pc, #424]	@ (800fd28 <HAL_RCC_OscConfig+0x4b0>)
 800fb7e:	682b      	ldr	r3, [r5, #0]
 800fb80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fb84:	602b      	str	r3, [r5, #0]
 800fb86:	682b      	ldr	r3, [r5, #0]
 800fb88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fb8c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fb8e:	f7fe f98d 	bl	800deac <HAL_GetTick>
 800fb92:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fb94:	e004      	b.n	800fba0 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fb96:	f7fe f989 	bl	800deac <HAL_GetTick>
 800fb9a:	1b80      	subs	r0, r0, r6
 800fb9c:	2864      	cmp	r0, #100	@ 0x64
 800fb9e:	d8eb      	bhi.n	800fb78 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fba0:	682b      	ldr	r3, [r5, #0]
 800fba2:	039f      	lsls	r7, r3, #14
 800fba4:	d4f7      	bmi.n	800fb96 <HAL_RCC_OscConfig+0x31e>
 800fba6:	e69d      	b.n	800f8e4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800fba8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800fbaa:	f023 0301 	bic.w	r3, r3, #1
 800fbae:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800fbb0:	f7fe f97c 	bl	800deac <HAL_GetTick>
 800fbb4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fbb6:	e004      	b.n	800fbc2 <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fbb8:	f7fe f978 	bl	800deac <HAL_GetTick>
 800fbbc:	1b80      	subs	r0, r0, r6
 800fbbe:	2802      	cmp	r0, #2
 800fbc0:	d8da      	bhi.n	800fb78 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fbc2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800fbc4:	0799      	lsls	r1, r3, #30
 800fbc6:	d4f7      	bmi.n	800fbb8 <HAL_RCC_OscConfig+0x340>
 800fbc8:	e6dd      	b.n	800f986 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 800fbca:	682b      	ldr	r3, [r5, #0]
 800fbcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fbd0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800fbd2:	f7fe f96b 	bl	800deac <HAL_GetTick>
 800fbd6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fbd8:	e004      	b.n	800fbe4 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fbda:	f7fe f967 	bl	800deac <HAL_GetTick>
 800fbde:	1b80      	subs	r0, r0, r6
 800fbe0:	2802      	cmp	r0, #2
 800fbe2:	d8c9      	bhi.n	800fb78 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fbe4:	682b      	ldr	r3, [r5, #0]
 800fbe6:	0498      	lsls	r0, r3, #18
 800fbe8:	d4f7      	bmi.n	800fbda <HAL_RCC_OscConfig+0x362>
 800fbea:	e6e5      	b.n	800f9b8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 800fbec:	682b      	ldr	r3, [r5, #0]
 800fbee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fbf2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fbf4:	f7fe f95a 	bl	800deac <HAL_GetTick>
 800fbf8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800fbfa:	e004      	b.n	800fc06 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800fbfc:	f7fe f956 	bl	800deac <HAL_GetTick>
 800fc00:	1b80      	subs	r0, r0, r6
 800fc02:	2802      	cmp	r0, #2
 800fc04:	d8b8      	bhi.n	800fb78 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800fc06:	682b      	ldr	r3, [r5, #0]
 800fc08:	05df      	lsls	r7, r3, #23
 800fc0a:	d4f7      	bmi.n	800fbfc <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc0c:	6823      	ldr	r3, [r4, #0]
 800fc0e:	e6a2      	b.n	800f956 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 800fc10:	f023 0301 	bic.w	r3, r3, #1
 800fc14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fc16:	f7fe f949 	bl	800deac <HAL_GetTick>
 800fc1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fc1c:	e004      	b.n	800fc28 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fc1e:	f7fe f945 	bl	800deac <HAL_GetTick>
 800fc22:	1b80      	subs	r0, r0, r6
 800fc24:	2802      	cmp	r0, #2
 800fc26:	d8a7      	bhi.n	800fb78 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fc28:	682b      	ldr	r3, [r5, #0]
 800fc2a:	0758      	lsls	r0, r3, #29
 800fc2c:	d4f7      	bmi.n	800fc1e <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fc2e:	6823      	ldr	r3, [r4, #0]
 800fc30:	e65b      	b.n	800f8ea <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800fc32:	0790      	lsls	r0, r2, #30
 800fc34:	f47f af01 	bne.w	800fa3a <HAL_RCC_OscConfig+0x1c2>
 800fc38:	e6ce      	b.n	800f9d8 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fc3a:	686b      	ldr	r3, [r5, #4]
 800fc3c:	6922      	ldr	r2, [r4, #16]
 800fc3e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800fc42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fc46:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fc48:	6823      	ldr	r3, [r4, #0]
 800fc4a:	e64e      	b.n	800f8ea <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fc4c:	4a36      	ldr	r2, [pc, #216]	@ (800fd28 <HAL_RCC_OscConfig+0x4b0>)
 800fc4e:	6a21      	ldr	r1, [r4, #32]
 800fc50:	68d3      	ldr	r3, [r2, #12]
 800fc52:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800fc56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800fc5a:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc5c:	6823      	ldr	r3, [r4, #0]
 800fc5e:	e67a      	b.n	800f956 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 800fc60:	f7fe f924 	bl	800deac <HAL_GetTick>
 800fc64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fc66:	e004      	b.n	800fc72 <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fc68:	f7fe f920 	bl	800deac <HAL_GetTick>
 800fc6c:	1b80      	subs	r0, r0, r6
 800fc6e:	2802      	cmp	r0, #2
 800fc70:	d882      	bhi.n	800fb78 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fc72:	682b      	ldr	r3, [r5, #0]
 800fc74:	0199      	lsls	r1, r3, #6
 800fc76:	d4f7      	bmi.n	800fc68 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fc78:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800fc7a:	4b2c      	ldr	r3, [pc, #176]	@ (800fd2c <HAL_RCC_OscConfig+0x4b4>)
 800fc7c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800fc7e:	400b      	ands	r3, r1
 800fc80:	4313      	orrs	r3, r2
 800fc82:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fc84:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800fc88:	62ab      	str	r3, [r5, #40]	@ 0x28
 800fc8a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fc8c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 800fc90:	3901      	subs	r1, #1
 800fc92:	3b01      	subs	r3, #1
 800fc94:	3a01      	subs	r2, #1
 800fc96:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800fc9a:	025b      	lsls	r3, r3, #9
 800fc9c:	0412      	lsls	r2, r2, #16
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800fca4:	4313      	orrs	r3, r2
 800fca6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800fca8:	3a01      	subs	r2, #1
 800fcaa:	430b      	orrs	r3, r1
 800fcac:	0612      	lsls	r2, r2, #24
 800fcae:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800fcb6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fcb8:	f023 0301 	bic.w	r3, r3, #1
 800fcbc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fcbe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800fcc0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800fcc2:	f36f 03cf 	bfc	r3, #3, #13
 800fcc6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fcca:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800fccc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fcce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800fcd0:	f023 030c 	bic.w	r3, r3, #12
 800fcd4:	4313      	orrs	r3, r2
 800fcd6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800fcd8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fcda:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800fcdc:	f023 0302 	bic.w	r3, r3, #2
 800fce0:	4313      	orrs	r3, r2
 800fce2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800fce4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fcea:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fcec:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fcee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fcf2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800fcf4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fcf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800fcfa:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800fcfc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fcfe:	f043 0301 	orr.w	r3, r3, #1
 800fd02:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd0a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fd0c:	f7fe f8ce 	bl	800deac <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fd10:	4d05      	ldr	r5, [pc, #20]	@ (800fd28 <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 800fd12:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fd14:	682b      	ldr	r3, [r5, #0]
 800fd16:	019a      	lsls	r2, r3, #6
 800fd18:	f53f ae56 	bmi.w	800f9c8 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd1c:	f7fe f8c6 	bl	800deac <HAL_GetTick>
 800fd20:	1b00      	subs	r0, r0, r4
 800fd22:	2802      	cmp	r0, #2
 800fd24:	d9f6      	bls.n	800fd14 <HAL_RCC_OscConfig+0x49c>
 800fd26:	e727      	b.n	800fb78 <HAL_RCC_OscConfig+0x300>
 800fd28:	58024400 	.word	0x58024400
 800fd2c:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fd30:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800fd32:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800fd34:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fd36:	f43f aea6 	beq.w	800fa86 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fd3a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fd3e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800fd40:	428b      	cmp	r3, r1
 800fd42:	f47f aea0 	bne.w	800fa86 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fd46:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fd4a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	f47f ae9a 	bne.w	800fa86 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fd52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fd54:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800fd58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	f47f ae93 	bne.w	800fa86 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fd60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fd62:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800fd66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	f47f ae8c 	bne.w	800fa86 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fd6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800fd70:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800fd74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fd76:	429a      	cmp	r2, r3
 800fd78:	f47f ae85 	bne.w	800fa86 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800fd7c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fd7e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800fd82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fd84:	4298      	cmp	r0, r3
 800fd86:	f47f ae7e 	bne.w	800fa86 <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800fd8a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800fd8c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800fd8e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800fd92:	429a      	cmp	r2, r3
 800fd94:	f43f ae18 	beq.w	800f9c8 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 800fd98:	4a2d      	ldr	r2, [pc, #180]	@ (800fe50 <HAL_RCC_OscConfig+0x5d8>)
 800fd9a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800fd9c:	f023 0301 	bic.w	r3, r3, #1
 800fda0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800fda2:	f7fe f883 	bl	800deac <HAL_GetTick>
 800fda6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800fda8:	f7fe f880 	bl	800deac <HAL_GetTick>
 800fdac:	42a8      	cmp	r0, r5
 800fdae:	d0fb      	beq.n	800fda8 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fdb0:	4a27      	ldr	r2, [pc, #156]	@ (800fe50 <HAL_RCC_OscConfig+0x5d8>)
 800fdb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fdb4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800fdb6:	f36f 03cf 	bfc	r3, #3, #13
 800fdba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800fdbe:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800fdc0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800fdc2:	f043 0301 	orr.w	r3, r3, #1
 800fdc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fdc8:	e5fe      	b.n	800f9c8 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fdca:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800fdce:	601a      	str	r2, [r3, #0]
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800fdd6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fdd8:	e576      	b.n	800f8c8 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fdda:	4d1d      	ldr	r5, [pc, #116]	@ (800fe50 <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fddc:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fde0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fde2:	f023 0301 	bic.w	r3, r3, #1
 800fde6:	672b      	str	r3, [r5, #112]	@ 0x70
 800fde8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fdea:	f023 0304 	bic.w	r3, r3, #4
 800fdee:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800fdf0:	f7fe f85c 	bl	800deac <HAL_GetTick>
 800fdf4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fdf6:	e005      	b.n	800fe04 <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fdf8:	f7fe f858 	bl	800deac <HAL_GetTick>
 800fdfc:	1b80      	subs	r0, r0, r6
 800fdfe:	42b8      	cmp	r0, r7
 800fe00:	f63f aeba 	bhi.w	800fb78 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fe04:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fe06:	0798      	lsls	r0, r3, #30
 800fe08:	d4f6      	bmi.n	800fdf8 <HAL_RCC_OscConfig+0x580>
 800fe0a:	e5d9      	b.n	800f9c0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fe0c:	68eb      	ldr	r3, [r5, #12]
 800fe0e:	6a22      	ldr	r2, [r4, #32]
 800fe10:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800fe14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fe18:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fe1a:	6823      	ldr	r3, [r4, #0]
 800fe1c:	e59b      	b.n	800f956 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe1e:	4a0c      	ldr	r2, [pc, #48]	@ (800fe50 <HAL_RCC_OscConfig+0x5d8>)
 800fe20:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800fe22:	f043 0301 	orr.w	r3, r3, #1
 800fe26:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fe28:	e67d      	b.n	800fb26 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fe2a:	4a09      	ldr	r2, [pc, #36]	@ (800fe50 <HAL_RCC_OscConfig+0x5d8>)
 800fe2c:	6853      	ldr	r3, [r2, #4]
 800fe2e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800fe32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fe36:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fe38:	6823      	ldr	r3, [r4, #0]
 800fe3a:	e58c      	b.n	800f956 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe3c:	f042 0204 	orr.w	r2, r2, #4
 800fe40:	671a      	str	r2, [r3, #112]	@ 0x70
 800fe42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fe44:	f042 0201 	orr.w	r2, r2, #1
 800fe48:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fe4a:	e66c      	b.n	800fb26 <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 800fe4c:	2001      	movs	r0, #1
}
 800fe4e:	4770      	bx	lr
 800fe50:	58024400 	.word	0x58024400

0800fe54 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fe54:	4a3f      	ldr	r2, [pc, #252]	@ (800ff54 <HAL_RCC_GetSysClockFreq+0x100>)
 800fe56:	6913      	ldr	r3, [r2, #16]
 800fe58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe5c:	2b10      	cmp	r3, #16
 800fe5e:	d04f      	beq.n	800ff00 <HAL_RCC_GetSysClockFreq+0xac>
 800fe60:	2b18      	cmp	r3, #24
 800fe62:	d00a      	beq.n	800fe7a <HAL_RCC_GetSysClockFreq+0x26>
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d14d      	bne.n	800ff04 <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe68:	6813      	ldr	r3, [r2, #0]
 800fe6a:	0699      	lsls	r1, r3, #26
 800fe6c:	d54c      	bpl.n	800ff08 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe6e:	6813      	ldr	r3, [r2, #0]
 800fe70:	4839      	ldr	r0, [pc, #228]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x104>)
 800fe72:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fe76:	40d8      	lsrs	r0, r3
 800fe78:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fe7a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 800fe7c:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800fe7e:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fe80:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 800fe82:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fe86:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800fe88:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800fe8c:	d036      	beq.n	800fefc <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fe8e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fe92:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fe96:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe9a:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fe9e:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 800fea2:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fea8:	ee06 3a90 	vmov	s13, r3
 800feac:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800feb0:	d002      	beq.n	800feb8 <HAL_RCC_GetSysClockFreq+0x64>
 800feb2:	2902      	cmp	r1, #2
 800feb4:	d048      	beq.n	800ff48 <HAL_RCC_GetSysClockFreq+0xf4>
 800feb6:	b349      	cbz	r1, 800ff0c <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800feb8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800ff5c <HAL_RCC_GetSysClockFreq+0x108>
 800febc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800fec0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800fec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fec6:	ee07 3a10 	vmov	s14, r3
 800feca:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800fece:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fed2:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fed6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800feda:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800fede:	4b1d      	ldr	r3, [pc, #116]	@ (800ff54 <HAL_RCC_GetSysClockFreq+0x100>)
 800fee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fee2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800fee6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800fee8:	ee07 3a90 	vmov	s15, r3
 800feec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fef8:	ee17 0a90 	vmov	r0, s15
}
 800fefc:	bc30      	pop	{r4, r5}
 800fefe:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ff00:	4817      	ldr	r0, [pc, #92]	@ (800ff60 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ff02:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 800ff04:	4817      	ldr	r0, [pc, #92]	@ (800ff64 <HAL_RCC_GetSysClockFreq+0x110>)
 800ff06:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ff08:	4813      	ldr	r0, [pc, #76]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x104>)
}
 800ff0a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff0c:	6813      	ldr	r3, [r2, #0]
 800ff0e:	069b      	lsls	r3, r3, #26
 800ff10:	d51d      	bpl.n	800ff4e <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff12:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff18:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff1a:	490f      	ldr	r1, [pc, #60]	@ (800ff58 <HAL_RCC_GetSysClockFreq+0x104>)
 800ff1c:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff20:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff24:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff26:	ee06 3a10 	vmov	s12, r3
 800ff2a:	ee05 1a90 	vmov	s11, r1
 800ff2e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800ff32:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800ff36:	ee36 6a07 	vadd.f32	s12, s12, s14
 800ff3a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800ff3e:	ee76 7a26 	vadd.f32	s15, s12, s13
 800ff42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff46:	e7ca      	b.n	800fede <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff48:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800ff68 <HAL_RCC_GetSysClockFreq+0x114>
 800ff4c:	e7b6      	b.n	800febc <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff4e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800ff6c <HAL_RCC_GetSysClockFreq+0x118>
 800ff52:	e7b3      	b.n	800febc <HAL_RCC_GetSysClockFreq+0x68>
 800ff54:	58024400 	.word	0x58024400
 800ff58:	03d09000 	.word	0x03d09000
 800ff5c:	4a742400 	.word	0x4a742400
 800ff60:	017d7840 	.word	0x017d7840
 800ff64:	003d0900 	.word	0x003d0900
 800ff68:	4bbebc20 	.word	0x4bbebc20
 800ff6c:	4c742400 	.word	0x4c742400

0800ff70 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800ff70:	2800      	cmp	r0, #0
 800ff72:	f000 810e 	beq.w	8010192 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ff76:	4a8d      	ldr	r2, [pc, #564]	@ (80101ac <HAL_RCC_ClockConfig+0x23c>)
 800ff78:	6813      	ldr	r3, [r2, #0]
 800ff7a:	f003 030f 	and.w	r3, r3, #15
 800ff7e:	428b      	cmp	r3, r1
{
 800ff80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff84:	4604      	mov	r4, r0
 800ff86:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ff88:	d20c      	bcs.n	800ffa4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ff8a:	6813      	ldr	r3, [r2, #0]
 800ff8c:	f023 030f 	bic.w	r3, r3, #15
 800ff90:	430b      	orrs	r3, r1
 800ff92:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ff94:	6813      	ldr	r3, [r2, #0]
 800ff96:	f003 030f 	and.w	r3, r3, #15
 800ff9a:	428b      	cmp	r3, r1
 800ff9c:	d002      	beq.n	800ffa4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800ff9e:	2001      	movs	r0, #1
}
 800ffa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ffa4:	6823      	ldr	r3, [r4, #0]
 800ffa6:	0758      	lsls	r0, r3, #29
 800ffa8:	d50b      	bpl.n	800ffc2 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ffaa:	4981      	ldr	r1, [pc, #516]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 800ffac:	6920      	ldr	r0, [r4, #16]
 800ffae:	698a      	ldr	r2, [r1, #24]
 800ffb0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ffb4:	4290      	cmp	r0, r2
 800ffb6:	d904      	bls.n	800ffc2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ffb8:	698a      	ldr	r2, [r1, #24]
 800ffba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ffbe:	4302      	orrs	r2, r0
 800ffc0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ffc2:	0719      	lsls	r1, r3, #28
 800ffc4:	d50b      	bpl.n	800ffde <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ffc6:	497a      	ldr	r1, [pc, #488]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 800ffc8:	6960      	ldr	r0, [r4, #20]
 800ffca:	69ca      	ldr	r2, [r1, #28]
 800ffcc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ffd0:	4290      	cmp	r0, r2
 800ffd2:	d904      	bls.n	800ffde <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ffd4:	69ca      	ldr	r2, [r1, #28]
 800ffd6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ffda:	4302      	orrs	r2, r0
 800ffdc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ffde:	06da      	lsls	r2, r3, #27
 800ffe0:	d50b      	bpl.n	800fffa <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ffe2:	4973      	ldr	r1, [pc, #460]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 800ffe4:	69a0      	ldr	r0, [r4, #24]
 800ffe6:	69ca      	ldr	r2, [r1, #28]
 800ffe8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800ffec:	4290      	cmp	r0, r2
 800ffee:	d904      	bls.n	800fffa <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fff0:	69ca      	ldr	r2, [r1, #28]
 800fff2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800fff6:	4302      	orrs	r2, r0
 800fff8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fffa:	069f      	lsls	r7, r3, #26
 800fffc:	d50b      	bpl.n	8010016 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fffe:	496c      	ldr	r1, [pc, #432]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 8010000:	69e0      	ldr	r0, [r4, #28]
 8010002:	6a0a      	ldr	r2, [r1, #32]
 8010004:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8010008:	4290      	cmp	r0, r2
 801000a:	d904      	bls.n	8010016 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801000c:	6a0a      	ldr	r2, [r1, #32]
 801000e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8010012:	4302      	orrs	r2, r0
 8010014:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010016:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010018:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801001c:	f140 80ab 	bpl.w	8010176 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010020:	4e63      	ldr	r6, [pc, #396]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 8010022:	68e0      	ldr	r0, [r4, #12]
 8010024:	69b1      	ldr	r1, [r6, #24]
 8010026:	f001 010f 	and.w	r1, r1, #15
 801002a:	4288      	cmp	r0, r1
 801002c:	d904      	bls.n	8010038 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801002e:	69b1      	ldr	r1, [r6, #24]
 8010030:	f021 010f 	bic.w	r1, r1, #15
 8010034:	4301      	orrs	r1, r0
 8010036:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010038:	2a00      	cmp	r2, #0
 801003a:	d030      	beq.n	801009e <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801003c:	4a5c      	ldr	r2, [pc, #368]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 801003e:	68a1      	ldr	r1, [r4, #8]
 8010040:	6993      	ldr	r3, [r2, #24]
 8010042:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010046:	430b      	orrs	r3, r1
 8010048:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801004a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801004c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801004e:	2902      	cmp	r1, #2
 8010050:	f000 80a1 	beq.w	8010196 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010054:	2903      	cmp	r1, #3
 8010056:	f000 8098 	beq.w	801018a <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801005a:	2901      	cmp	r1, #1
 801005c:	f000 80a1 	beq.w	80101a2 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010060:	075f      	lsls	r7, r3, #29
 8010062:	d59c      	bpl.n	800ff9e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010064:	4e52      	ldr	r6, [pc, #328]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010066:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801006a:	6933      	ldr	r3, [r6, #16]
 801006c:	f023 0307 	bic.w	r3, r3, #7
 8010070:	430b      	orrs	r3, r1
 8010072:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8010074:	f7fd ff1a 	bl	800deac <HAL_GetTick>
 8010078:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801007a:	e005      	b.n	8010088 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801007c:	f7fd ff16 	bl	800deac <HAL_GetTick>
 8010080:	1bc0      	subs	r0, r0, r7
 8010082:	4540      	cmp	r0, r8
 8010084:	f200 808b 	bhi.w	801019e <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010088:	6933      	ldr	r3, [r6, #16]
 801008a:	6862      	ldr	r2, [r4, #4]
 801008c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010090:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8010094:	d1f2      	bne.n	801007c <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010096:	6823      	ldr	r3, [r4, #0]
 8010098:	079e      	lsls	r6, r3, #30
 801009a:	d506      	bpl.n	80100aa <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801009c:	68e0      	ldr	r0, [r4, #12]
 801009e:	4944      	ldr	r1, [pc, #272]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 80100a0:	698a      	ldr	r2, [r1, #24]
 80100a2:	f002 020f 	and.w	r2, r2, #15
 80100a6:	4290      	cmp	r0, r2
 80100a8:	d369      	bcc.n	801017e <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80100aa:	4940      	ldr	r1, [pc, #256]	@ (80101ac <HAL_RCC_ClockConfig+0x23c>)
 80100ac:	680a      	ldr	r2, [r1, #0]
 80100ae:	f002 020f 	and.w	r2, r2, #15
 80100b2:	42aa      	cmp	r2, r5
 80100b4:	d90a      	bls.n	80100cc <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100b6:	680a      	ldr	r2, [r1, #0]
 80100b8:	f022 020f 	bic.w	r2, r2, #15
 80100bc:	432a      	orrs	r2, r5
 80100be:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80100c0:	680a      	ldr	r2, [r1, #0]
 80100c2:	f002 020f 	and.w	r2, r2, #15
 80100c6:	42aa      	cmp	r2, r5
 80100c8:	f47f af69 	bne.w	800ff9e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80100cc:	0758      	lsls	r0, r3, #29
 80100ce:	d50b      	bpl.n	80100e8 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80100d0:	4937      	ldr	r1, [pc, #220]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 80100d2:	6920      	ldr	r0, [r4, #16]
 80100d4:	698a      	ldr	r2, [r1, #24]
 80100d6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80100da:	4290      	cmp	r0, r2
 80100dc:	d204      	bcs.n	80100e8 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80100de:	698a      	ldr	r2, [r1, #24]
 80100e0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80100e4:	4302      	orrs	r2, r0
 80100e6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80100e8:	0719      	lsls	r1, r3, #28
 80100ea:	d50b      	bpl.n	8010104 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80100ec:	4930      	ldr	r1, [pc, #192]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 80100ee:	6960      	ldr	r0, [r4, #20]
 80100f0:	69ca      	ldr	r2, [r1, #28]
 80100f2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80100f6:	4290      	cmp	r0, r2
 80100f8:	d204      	bcs.n	8010104 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80100fa:	69ca      	ldr	r2, [r1, #28]
 80100fc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8010100:	4302      	orrs	r2, r0
 8010102:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010104:	06da      	lsls	r2, r3, #27
 8010106:	d50b      	bpl.n	8010120 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010108:	4929      	ldr	r1, [pc, #164]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 801010a:	69a0      	ldr	r0, [r4, #24]
 801010c:	69ca      	ldr	r2, [r1, #28]
 801010e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8010112:	4290      	cmp	r0, r2
 8010114:	d204      	bcs.n	8010120 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010116:	69ca      	ldr	r2, [r1, #28]
 8010118:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 801011c:	4302      	orrs	r2, r0
 801011e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010120:	069b      	lsls	r3, r3, #26
 8010122:	d50b      	bpl.n	801013c <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010124:	4a22      	ldr	r2, [pc, #136]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 8010126:	69e1      	ldr	r1, [r4, #28]
 8010128:	6a13      	ldr	r3, [r2, #32]
 801012a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801012e:	4299      	cmp	r1, r3
 8010130:	d204      	bcs.n	801013c <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010132:	6a13      	ldr	r3, [r2, #32]
 8010134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010138:	430b      	orrs	r3, r1
 801013a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801013c:	f7ff fe8a 	bl	800fe54 <HAL_RCC_GetSysClockFreq>
 8010140:	4a1b      	ldr	r2, [pc, #108]	@ (80101b0 <HAL_RCC_ClockConfig+0x240>)
 8010142:	4603      	mov	r3, r0
 8010144:	481b      	ldr	r0, [pc, #108]	@ (80101b4 <HAL_RCC_ClockConfig+0x244>)
 8010146:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010148:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801014a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 801014e:	4d1a      	ldr	r5, [pc, #104]	@ (80101b8 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010150:	f002 020f 	and.w	r2, r2, #15
 8010154:	4c19      	ldr	r4, [pc, #100]	@ (80101bc <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010156:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010158:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801015a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 801015e:	4818      	ldr	r0, [pc, #96]	@ (80101c0 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010160:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010164:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8010166:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8010168:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801016a:	40d3      	lsrs	r3, r2
 801016c:	6023      	str	r3, [r4, #0]
}
 801016e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8010172:	f001 bc01 	b.w	8011978 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010176:	2a00      	cmp	r2, #0
 8010178:	f47f af60 	bne.w	801003c <HAL_RCC_ClockConfig+0xcc>
 801017c:	e795      	b.n	80100aa <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801017e:	698a      	ldr	r2, [r1, #24]
 8010180:	f022 020f 	bic.w	r2, r2, #15
 8010184:	4302      	orrs	r2, r0
 8010186:	618a      	str	r2, [r1, #24]
 8010188:	e78f      	b.n	80100aa <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801018a:	019a      	lsls	r2, r3, #6
 801018c:	f53f af6a 	bmi.w	8010064 <HAL_RCC_ClockConfig+0xf4>
 8010190:	e705      	b.n	800ff9e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8010192:	2001      	movs	r0, #1
}
 8010194:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010196:	0398      	lsls	r0, r3, #14
 8010198:	f53f af64 	bmi.w	8010064 <HAL_RCC_ClockConfig+0xf4>
 801019c:	e6ff      	b.n	800ff9e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 801019e:	2003      	movs	r0, #3
 80101a0:	e6fe      	b.n	800ffa0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80101a2:	05db      	lsls	r3, r3, #23
 80101a4:	f53f af5e 	bmi.w	8010064 <HAL_RCC_ClockConfig+0xf4>
 80101a8:	e6f9      	b.n	800ff9e <HAL_RCC_ClockConfig+0x2e>
 80101aa:	bf00      	nop
 80101ac:	52002000 	.word	0x52002000
 80101b0:	58024400 	.word	0x58024400
 80101b4:	080130ec 	.word	0x080130ec
 80101b8:	24000034 	.word	0x24000034
 80101bc:	24000030 	.word	0x24000030
 80101c0:	24000130 	.word	0x24000130

080101c4 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80101c4:	4a1c      	ldr	r2, [pc, #112]	@ (8010238 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80101c6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80101c8:	6913      	ldr	r3, [r2, #16]
 80101ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80101ce:	2b10      	cmp	r3, #16
 80101d0:	d02b      	beq.n	801022a <HAL_RCC_GetPCLK1Freq+0x66>
 80101d2:	2b18      	cmp	r3, #24
 80101d4:	d009      	beq.n	80101ea <HAL_RCC_GetPCLK1Freq+0x26>
 80101d6:	bb53      	cbnz	r3, 801022e <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80101d8:	6813      	ldr	r3, [r2, #0]
 80101da:	069b      	lsls	r3, r3, #26
 80101dc:	d529      	bpl.n	8010232 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80101de:	6812      	ldr	r2, [r2, #0]
 80101e0:	4b16      	ldr	r3, [pc, #88]	@ (801023c <HAL_RCC_GetPCLK1Freq+0x78>)
 80101e2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80101e6:	40d3      	lsrs	r3, r2
 80101e8:	e002      	b.n	80101f0 <HAL_RCC_GetPCLK1Freq+0x2c>
 80101ea:	f7ff fad3 	bl	800f794 <HAL_RCC_GetSysClockFreq.part.0>
 80101ee:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80101f0:	4a11      	ldr	r2, [pc, #68]	@ (8010238 <HAL_RCC_GetPCLK1Freq+0x74>)
 80101f2:	4913      	ldr	r1, [pc, #76]	@ (8010240 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80101f4:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 80101f6:	4d13      	ldr	r5, [pc, #76]	@ (8010244 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80101f8:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80101fc:	4c12      	ldr	r4, [pc, #72]	@ (8010248 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80101fe:	5c08      	ldrb	r0, [r1, r0]
 8010200:	f000 001f 	and.w	r0, r0, #31
 8010204:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010206:	6990      	ldr	r0, [r2, #24]
 8010208:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 801020c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801020e:	5c08      	ldrb	r0, [r1, r0]
 8010210:	f000 001f 	and.w	r0, r0, #31
 8010214:	40c3      	lsrs	r3, r0
 8010216:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8010218:	69d2      	ldr	r2, [r2, #28]
 801021a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 801021e:	5c88      	ldrb	r0, [r1, r2]
 8010220:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8010224:	fa23 f000 	lsr.w	r0, r3, r0
 8010228:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801022a:	4b08      	ldr	r3, [pc, #32]	@ (801024c <HAL_RCC_GetPCLK1Freq+0x88>)
 801022c:	e7e0      	b.n	80101f0 <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 801022e:	4b08      	ldr	r3, [pc, #32]	@ (8010250 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8010230:	e7de      	b.n	80101f0 <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010232:	4b02      	ldr	r3, [pc, #8]	@ (801023c <HAL_RCC_GetPCLK1Freq+0x78>)
 8010234:	e7dc      	b.n	80101f0 <HAL_RCC_GetPCLK1Freq+0x2c>
 8010236:	bf00      	nop
 8010238:	58024400 	.word	0x58024400
 801023c:	03d09000 	.word	0x03d09000
 8010240:	080130ec 	.word	0x080130ec
 8010244:	24000034 	.word	0x24000034
 8010248:	24000030 	.word	0x24000030
 801024c:	017d7840 	.word	0x017d7840
 8010250:	003d0900 	.word	0x003d0900

08010254 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010254:	4a1c      	ldr	r2, [pc, #112]	@ (80102c8 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010256:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010258:	6913      	ldr	r3, [r2, #16]
 801025a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801025e:	2b10      	cmp	r3, #16
 8010260:	d02b      	beq.n	80102ba <HAL_RCC_GetPCLK2Freq+0x66>
 8010262:	2b18      	cmp	r3, #24
 8010264:	d009      	beq.n	801027a <HAL_RCC_GetPCLK2Freq+0x26>
 8010266:	bb53      	cbnz	r3, 80102be <HAL_RCC_GetPCLK2Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010268:	6813      	ldr	r3, [r2, #0]
 801026a:	069b      	lsls	r3, r3, #26
 801026c:	d529      	bpl.n	80102c2 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801026e:	6812      	ldr	r2, [r2, #0]
 8010270:	4b16      	ldr	r3, [pc, #88]	@ (80102cc <HAL_RCC_GetPCLK2Freq+0x78>)
 8010272:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8010276:	40d3      	lsrs	r3, r2
 8010278:	e002      	b.n	8010280 <HAL_RCC_GetPCLK2Freq+0x2c>
 801027a:	f7ff fa8b 	bl	800f794 <HAL_RCC_GetSysClockFreq.part.0>
 801027e:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010280:	4a11      	ldr	r2, [pc, #68]	@ (80102c8 <HAL_RCC_GetPCLK2Freq+0x74>)
 8010282:	4913      	ldr	r1, [pc, #76]	@ (80102d0 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8010284:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8010286:	4d13      	ldr	r5, [pc, #76]	@ (80102d4 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010288:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801028c:	4c12      	ldr	r4, [pc, #72]	@ (80102d8 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801028e:	5c08      	ldrb	r0, [r1, r0]
 8010290:	f000 001f 	and.w	r0, r0, #31
 8010294:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010296:	6990      	ldr	r0, [r2, #24]
 8010298:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 801029c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801029e:	5c08      	ldrb	r0, [r1, r0]
 80102a0:	f000 001f 	and.w	r0, r0, #31
 80102a4:	40c3      	lsrs	r3, r0
 80102a6:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80102a8:	69d2      	ldr	r2, [r2, #28]
 80102aa:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80102ae:	5c88      	ldrb	r0, [r1, r2]
 80102b0:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80102b4:	fa23 f000 	lsr.w	r0, r3, r0
 80102b8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80102ba:	4b08      	ldr	r3, [pc, #32]	@ (80102dc <HAL_RCC_GetPCLK2Freq+0x88>)
 80102bc:	e7e0      	b.n	8010280 <HAL_RCC_GetPCLK2Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 80102be:	4b08      	ldr	r3, [pc, #32]	@ (80102e0 <HAL_RCC_GetPCLK2Freq+0x8c>)
 80102c0:	e7de      	b.n	8010280 <HAL_RCC_GetPCLK2Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80102c2:	4b02      	ldr	r3, [pc, #8]	@ (80102cc <HAL_RCC_GetPCLK2Freq+0x78>)
 80102c4:	e7dc      	b.n	8010280 <HAL_RCC_GetPCLK2Freq+0x2c>
 80102c6:	bf00      	nop
 80102c8:	58024400 	.word	0x58024400
 80102cc:	03d09000 	.word	0x03d09000
 80102d0:	080130ec 	.word	0x080130ec
 80102d4:	24000034 	.word	0x24000034
 80102d8:	24000030 	.word	0x24000030
 80102dc:	017d7840 	.word	0x017d7840
 80102e0:	003d0900 	.word	0x003d0900

080102e4 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80102e4:	4b13      	ldr	r3, [pc, #76]	@ (8010334 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80102e6:	223f      	movs	r2, #63	@ 0x3f
{
 80102e8:	b410      	push	{r4}
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80102ea:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80102ec:	691a      	ldr	r2, [r3, #16]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80102ee:	4c12      	ldr	r4, [pc, #72]	@ (8010338 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80102f0:	f002 0207 	and.w	r2, r2, #7
 80102f4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80102f6:	699a      	ldr	r2, [r3, #24]
 80102f8:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80102fc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80102fe:	699a      	ldr	r2, [r3, #24]
 8010300:	f002 020f 	and.w	r2, r2, #15
 8010304:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8010306:	699a      	ldr	r2, [r3, #24]
 8010308:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 801030c:	6102      	str	r2, [r0, #16]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 801030e:	69da      	ldr	r2, [r3, #28]
 8010310:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8010314:	6142      	str	r2, [r0, #20]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8010316:	69da      	ldr	r2, [r3, #28]
 8010318:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 801031c:	6182      	str	r2, [r0, #24]
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801031e:	6a1b      	ldr	r3, [r3, #32]
 8010320:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010324:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010326:	6823      	ldr	r3, [r4, #0]
}
 8010328:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801032c:	f003 030f 	and.w	r3, r3, #15
 8010330:	600b      	str	r3, [r1, #0]
}
 8010332:	4770      	bx	lr
 8010334:	58024400 	.word	0x58024400
 8010338:	52002000 	.word	0x52002000

0801033c <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 801033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801033e:	4c36      	ldr	r4, [pc, #216]	@ (8010418 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8010340:	4606      	mov	r6, r0
 8010342:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801034a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801034c:	f7fd fdae 	bl	800deac <HAL_GetTick>
 8010350:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010352:	e004      	b.n	801035e <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010354:	f7fd fdaa 	bl	800deac <HAL_GetTick>
 8010358:	1b40      	subs	r0, r0, r5
 801035a:	2802      	cmp	r0, #2
 801035c:	d856      	bhi.n	801040c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801035e:	6823      	ldr	r3, [r4, #0]
 8010360:	011a      	lsls	r2, r3, #4
 8010362:	d4f7      	bmi.n	8010354 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010364:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010366:	6832      	ldr	r2, [r6, #0]
 8010368:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801036c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8010370:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010372:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8010376:	3b01      	subs	r3, #1
 8010378:	3a01      	subs	r2, #1
 801037a:	025b      	lsls	r3, r3, #9
 801037c:	0412      	lsls	r2, r2, #16
 801037e:	b29b      	uxth	r3, r3
 8010380:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8010384:	4313      	orrs	r3, r2
 8010386:	6872      	ldr	r2, [r6, #4]
 8010388:	3a01      	subs	r2, #1
 801038a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801038e:	4313      	orrs	r3, r2
 8010390:	6932      	ldr	r2, [r6, #16]
 8010392:	3a01      	subs	r2, #1
 8010394:	0612      	lsls	r2, r2, #24
 8010396:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 801039a:	4313      	orrs	r3, r2
 801039c:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801039e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80103a0:	6972      	ldr	r2, [r6, #20]
 80103a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80103a6:	4313      	orrs	r3, r2
 80103a8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80103aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80103ac:	69b2      	ldr	r2, [r6, #24]
 80103ae:	f023 0320 	bic.w	r3, r3, #32
 80103b2:	4313      	orrs	r3, r2
 80103b4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80103b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80103b8:	f023 0310 	bic.w	r3, r3, #16
 80103bc:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80103be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80103c0:	69f2      	ldr	r2, [r6, #28]
 80103c2:	f36f 03cf 	bfc	r3, #3, #13
 80103c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80103ca:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80103cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80103ce:	f043 0310 	orr.w	r3, r3, #16
 80103d2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80103d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80103d6:	b1df      	cbz	r7, 8010410 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80103d8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80103da:	bf0c      	ite	eq
 80103dc:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80103e0:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80103e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80103e6:	4c0c      	ldr	r4, [pc, #48]	@ (8010418 <RCCEx_PLL2_Config.part.0+0xdc>)
 80103e8:	6823      	ldr	r3, [r4, #0]
 80103ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80103ee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80103f0:	f7fd fd5c 	bl	800deac <HAL_GetTick>
 80103f4:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80103f6:	e004      	b.n	8010402 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80103f8:	f7fd fd58 	bl	800deac <HAL_GetTick>
 80103fc:	1b40      	subs	r0, r0, r5
 80103fe:	2802      	cmp	r0, #2
 8010400:	d804      	bhi.n	801040c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010402:	6823      	ldr	r3, [r4, #0]
 8010404:	011b      	lsls	r3, r3, #4
 8010406:	d5f7      	bpl.n	80103f8 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8010408:	2000      	movs	r0, #0
}
 801040a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 801040c:	2003      	movs	r0, #3
}
 801040e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010410:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010414:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010416:	e7e6      	b.n	80103e6 <RCCEx_PLL2_Config.part.0+0xaa>
 8010418:	58024400 	.word	0x58024400

0801041c <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 801041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801041e:	4c36      	ldr	r4, [pc, #216]	@ (80104f8 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8010420:	4606      	mov	r6, r0
 8010422:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8010424:	6823      	ldr	r3, [r4, #0]
 8010426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801042a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801042c:	f7fd fd3e 	bl	800deac <HAL_GetTick>
 8010430:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010432:	e004      	b.n	801043e <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010434:	f7fd fd3a 	bl	800deac <HAL_GetTick>
 8010438:	1b40      	subs	r0, r0, r5
 801043a:	2802      	cmp	r0, #2
 801043c:	d856      	bhi.n	80104ec <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801043e:	6823      	ldr	r3, [r4, #0]
 8010440:	009a      	lsls	r2, r3, #2
 8010442:	d4f7      	bmi.n	8010434 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010444:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010446:	6832      	ldr	r2, [r6, #0]
 8010448:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 801044c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8010450:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010452:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8010456:	3b01      	subs	r3, #1
 8010458:	3a01      	subs	r2, #1
 801045a:	025b      	lsls	r3, r3, #9
 801045c:	0412      	lsls	r2, r2, #16
 801045e:	b29b      	uxth	r3, r3
 8010460:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8010464:	4313      	orrs	r3, r2
 8010466:	6872      	ldr	r2, [r6, #4]
 8010468:	3a01      	subs	r2, #1
 801046a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801046e:	4313      	orrs	r3, r2
 8010470:	6932      	ldr	r2, [r6, #16]
 8010472:	3a01      	subs	r2, #1
 8010474:	0612      	lsls	r2, r2, #24
 8010476:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 801047a:	4313      	orrs	r3, r2
 801047c:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801047e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010480:	6972      	ldr	r2, [r6, #20]
 8010482:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8010486:	4313      	orrs	r3, r2
 8010488:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801048a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801048c:	69b2      	ldr	r2, [r6, #24]
 801048e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010492:	4313      	orrs	r3, r2
 8010494:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010496:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801049c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801049e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80104a0:	69f2      	ldr	r2, [r6, #28]
 80104a2:	f36f 03cf 	bfc	r3, #3, #13
 80104a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80104aa:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80104ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80104ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80104b2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80104b4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80104b6:	b1df      	cbz	r7, 80104f0 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80104b8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80104ba:	bf0c      	ite	eq
 80104bc:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80104c0:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80104c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80104c6:	4c0c      	ldr	r4, [pc, #48]	@ (80104f8 <RCCEx_PLL3_Config.part.0+0xdc>)
 80104c8:	6823      	ldr	r3, [r4, #0]
 80104ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80104ce:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80104d0:	f7fd fcec 	bl	800deac <HAL_GetTick>
 80104d4:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80104d6:	e004      	b.n	80104e2 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80104d8:	f7fd fce8 	bl	800deac <HAL_GetTick>
 80104dc:	1b40      	subs	r0, r0, r5
 80104de:	2802      	cmp	r0, #2
 80104e0:	d804      	bhi.n	80104ec <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80104e2:	6823      	ldr	r3, [r4, #0]
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	d5f7      	bpl.n	80104d8 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 80104e8:	2000      	movs	r0, #0
}
 80104ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80104ec:	2003      	movs	r0, #3
}
 80104ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80104f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80104f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80104f6:	e7e6      	b.n	80104c6 <RCCEx_PLL3_Config.part.0+0xaa>
 80104f8:	58024400 	.word	0x58024400

080104fc <HAL_RCCEx_PeriphCLKConfig>:
{
 80104fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010500:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8010504:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010506:	011d      	lsls	r5, r3, #4
 8010508:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 801050c:	d524      	bpl.n	8010558 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 801050e:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8010510:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8010514:	f000 85df 	beq.w	80110d6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8010518:	f200 86a8 	bhi.w	801126c <HAL_RCCEx_PeriphCLKConfig+0xd70>
 801051c:	2900      	cmp	r1, #0
 801051e:	f000 85f6 	beq.w	801110e <HAL_RCCEx_PeriphCLKConfig+0xc12>
 8010522:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8010526:	f040 86a5 	bne.w	8011274 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801052a:	49a9      	ldr	r1, [pc, #676]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801052c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801052e:	f001 0103 	and.w	r1, r1, #3
 8010532:	2903      	cmp	r1, #3
 8010534:	f000 869e 	beq.w	8011274 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8010538:	2102      	movs	r1, #2
 801053a:	3008      	adds	r0, #8
 801053c:	f7ff fefe 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8010540:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010542:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010546:	b93e      	cbnz	r6, 8010558 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010548:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 801054a:	4da1      	ldr	r5, [pc, #644]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801054c:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801054e:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8010550:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8010554:	4301      	orrs	r1, r0
 8010556:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010558:	05d8      	lsls	r0, r3, #23
 801055a:	d50a      	bpl.n	8010572 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 801055c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801055e:	2904      	cmp	r1, #4
 8010560:	d806      	bhi.n	8010570 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8010562:	e8df f011 	tbh	[pc, r1, lsl #1]
 8010566:	03ff      	.short	0x03ff
 8010568:	0582056d 	.word	0x0582056d
 801056c:	04040404 	.word	0x04040404
      status = ret;
 8010570:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010572:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010574:	0599      	lsls	r1, r3, #22
 8010576:	d524      	bpl.n	80105c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8010578:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 801057a:	2980      	cmp	r1, #128	@ 0x80
 801057c:	f000 854b 	beq.w	8011016 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8010580:	f200 8687 	bhi.w	8011292 <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8010584:	2900      	cmp	r1, #0
 8010586:	f000 85bb 	beq.w	8011100 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 801058a:	2940      	cmp	r1, #64	@ 0x40
 801058c:	f040 8688 	bne.w	80112a0 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010590:	498f      	ldr	r1, [pc, #572]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010592:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010594:	f001 0103 	and.w	r1, r1, #3
 8010598:	2903      	cmp	r1, #3
 801059a:	f000 8681 	beq.w	80112a0 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 801059e:	2100      	movs	r1, #0
 80105a0:	f104 0008 	add.w	r0, r4, #8
 80105a4:	f7ff feca 	bl	801033c <RCCEx_PLL2_Config.part.0>
 80105a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80105aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80105ae:	2d00      	cmp	r5, #0
 80105b0:	f040 8543 	bne.w	801103a <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80105b4:	4f86      	ldr	r7, [pc, #536]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80105b6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80105b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80105ba:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 80105be:	4301      	orrs	r1, r0
 80105c0:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80105c2:	055f      	lsls	r7, r3, #21
 80105c4:	d528      	bpl.n	8010618 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 80105c6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80105ca:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80105ce:	f000 855c 	beq.w	801108a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80105d2:	f200 8652 	bhi.w	801127a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 80105d6:	2900      	cmp	r1, #0
 80105d8:	f000 858b 	beq.w	80110f2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80105dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80105e0:	f040 8653 	bne.w	801128a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80105e4:	497a      	ldr	r1, [pc, #488]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80105e6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80105e8:	f001 0103 	and.w	r1, r1, #3
 80105ec:	2903      	cmp	r1, #3
 80105ee:	f000 864c 	beq.w	801128a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80105f2:	2100      	movs	r1, #0
 80105f4:	f104 0008 	add.w	r0, r4, #8
 80105f8:	f7ff fea0 	bl	801033c <RCCEx_PLL2_Config.part.0>
 80105fc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80105fe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010602:	2d00      	cmp	r5, #0
 8010604:	f040 8553 	bne.w	80110ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8010608:	4f71      	ldr	r7, [pc, #452]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801060a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 801060e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010610:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8010614:	4301      	orrs	r1, r0
 8010616:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8010618:	0518      	lsls	r0, r3, #20
 801061a:	d528      	bpl.n	801066e <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 801061c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8010620:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8010624:	f000 8546 	beq.w	80110b4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 8010628:	f200 8614 	bhi.w	8011254 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 801062c:	2900      	cmp	r1, #0
 801062e:	f000 84d6 	beq.w	8010fde <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8010632:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8010636:	f040 8615 	bne.w	8011264 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801063a:	4965      	ldr	r1, [pc, #404]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801063c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801063e:	f001 0103 	and.w	r1, r1, #3
 8010642:	2903      	cmp	r1, #3
 8010644:	f000 860e 	beq.w	8011264 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8010648:	2100      	movs	r1, #0
 801064a:	f104 0008 	add.w	r0, r4, #8
 801064e:	f7ff fe75 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8010652:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010654:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010658:	2d00      	cmp	r5, #0
 801065a:	f040 84c8 	bne.w	8010fee <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801065e:	4f5c      	ldr	r7, [pc, #368]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010660:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8010664:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010666:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 801066a:	4301      	orrs	r1, r0
 801066c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801066e:	0199      	lsls	r1, r3, #6
 8010670:	d518      	bpl.n	80106a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 8010672:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8010674:	2920      	cmp	r1, #32
 8010676:	f000 8434 	beq.w	8010ee2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 801067a:	f200 8615 	bhi.w	80112a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 801067e:	b139      	cbz	r1, 8010690 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8010680:	2910      	cmp	r1, #16
 8010682:	f040 8614 	bne.w	80112ae <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010686:	4852      	ldr	r0, [pc, #328]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010688:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801068a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801068e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010690:	2d00      	cmp	r5, #0
 8010692:	f040 83bf 	bne.w	8010e14 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010696:	4f4e      	ldr	r7, [pc, #312]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010698:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801069a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801069c:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 80106a0:	4301      	orrs	r1, r0
 80106a2:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80106a4:	04df      	lsls	r7, r3, #19
 80106a6:	d526      	bpl.n	80106f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 80106a8:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80106aa:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80106ae:	f000 84a1 	beq.w	8010ff4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 80106b2:	f200 85c3 	bhi.w	801123c <HAL_RCCEx_PeriphCLKConfig+0xd40>
 80106b6:	2900      	cmp	r1, #0
 80106b8:	f000 8486 	beq.w	8010fc8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80106bc:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80106c0:	f040 85c4 	bne.w	801124c <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80106c4:	4942      	ldr	r1, [pc, #264]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80106c6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80106c8:	f001 0103 	and.w	r1, r1, #3
 80106cc:	2903      	cmp	r1, #3
 80106ce:	f000 85bd 	beq.w	801124c <HAL_RCCEx_PeriphCLKConfig+0xd50>
 80106d2:	2100      	movs	r1, #0
 80106d4:	f104 0008 	add.w	r0, r4, #8
 80106d8:	f7ff fe30 	bl	801033c <RCCEx_PLL2_Config.part.0>
 80106dc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80106de:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80106e2:	2d00      	cmp	r5, #0
 80106e4:	f040 8478 	bne.w	8010fd8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80106e8:	4f39      	ldr	r7, [pc, #228]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80106ea:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80106ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80106ee:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80106f2:	4301      	orrs	r1, r0
 80106f4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80106f6:	0498      	lsls	r0, r3, #18
 80106f8:	d524      	bpl.n	8010744 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 80106fa:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80106fc:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8010700:	f000 8415 	beq.w	8010f2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8010704:	f200 8556 	bhi.w	80111b4 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8010708:	b191      	cbz	r1, 8010730 <HAL_RCCEx_PeriphCLKConfig+0x234>
 801070a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 801070e:	f040 855b 	bne.w	80111c8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010712:	492f      	ldr	r1, [pc, #188]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010714:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010716:	f001 0103 	and.w	r1, r1, #3
 801071a:	2903      	cmp	r1, #3
 801071c:	f000 8554 	beq.w	80111c8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8010720:	2101      	movs	r1, #1
 8010722:	f104 0008 	add.w	r0, r4, #8
 8010726:	f7ff fe09 	bl	801033c <RCCEx_PLL2_Config.part.0>
 801072a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801072c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010730:	2d00      	cmp	r5, #0
 8010732:	f040 838f 	bne.w	8010e54 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8010736:	4f26      	ldr	r7, [pc, #152]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010738:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801073a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801073c:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8010740:	4301      	orrs	r1, r0
 8010742:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010744:	0459      	lsls	r1, r3, #17
 8010746:	d526      	bpl.n	8010796 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8010748:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 801074c:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8010750:	f000 8426 	beq.w	8010fa0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8010754:	f200 854a 	bhi.w	80111ec <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 8010758:	b191      	cbz	r1, 8010780 <HAL_RCCEx_PeriphCLKConfig+0x284>
 801075a:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 801075e:	f040 854f 	bne.w	8011200 <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010762:	491b      	ldr	r1, [pc, #108]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010764:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010766:	f001 0103 	and.w	r1, r1, #3
 801076a:	2903      	cmp	r1, #3
 801076c:	f000 8548 	beq.w	8011200 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8010770:	2101      	movs	r1, #1
 8010772:	f104 0008 	add.w	r0, r4, #8
 8010776:	f7ff fde1 	bl	801033c <RCCEx_PLL2_Config.part.0>
 801077a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801077c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010780:	2d00      	cmp	r5, #0
 8010782:	f040 835b 	bne.w	8010e3c <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8010786:	4f12      	ldr	r7, [pc, #72]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010788:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 801078c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801078e:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8010792:	4301      	orrs	r1, r0
 8010794:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010796:	041f      	lsls	r7, r3, #16
 8010798:	d50d      	bpl.n	80107b6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 801079a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801079c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80107a0:	f000 8260 	beq.w	8010c64 <HAL_RCCEx_PeriphCLKConfig+0x768>
 80107a4:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80107a8:	f000 8591 	beq.w	80112ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80107ac:	2900      	cmp	r1, #0
 80107ae:	f000 825e 	beq.w	8010c6e <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 80107b2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80107b4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80107b6:	01d8      	lsls	r0, r3, #7
 80107b8:	d515      	bpl.n	80107e6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 80107ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80107bc:	2903      	cmp	r1, #3
 80107be:	f200 85b4 	bhi.w	801132a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80107c2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80107c6:	000c      	.short	0x000c
 80107c8:	03a10007 	.word	0x03a10007
 80107cc:	000c      	.short	0x000c
 80107ce:	bf00      	nop
 80107d0:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80107d4:	4836      	ldr	r0, [pc, #216]	@ (80108b0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80107d6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80107d8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80107dc:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80107de:	2d00      	cmp	r5, #0
 80107e0:	f000 831a 	beq.w	8010e18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 80107e4:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80107e6:	0259      	lsls	r1, r3, #9
 80107e8:	f100 827a 	bmi.w	8010ce0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80107ec:	07df      	lsls	r7, r3, #31
 80107ee:	d52f      	bpl.n	8010850 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 80107f0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80107f2:	2928      	cmp	r1, #40	@ 0x28
 80107f4:	d82a      	bhi.n	801084c <HAL_RCCEx_PeriphCLKConfig+0x350>
 80107f6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80107fa:	0257      	.short	0x0257
 80107fc:	00290029 	.word	0x00290029
 8010800:	00290029 	.word	0x00290029
 8010804:	00290029 	.word	0x00290029
 8010808:	02480029 	.word	0x02480029
 801080c:	00290029 	.word	0x00290029
 8010810:	00290029 	.word	0x00290029
 8010814:	00290029 	.word	0x00290029
 8010818:	04b90029 	.word	0x04b90029
 801081c:	00290029 	.word	0x00290029
 8010820:	00290029 	.word	0x00290029
 8010824:	00290029 	.word	0x00290029
 8010828:	02570029 	.word	0x02570029
 801082c:	00290029 	.word	0x00290029
 8010830:	00290029 	.word	0x00290029
 8010834:	00290029 	.word	0x00290029
 8010838:	02570029 	.word	0x02570029
 801083c:	00290029 	.word	0x00290029
 8010840:	00290029 	.word	0x00290029
 8010844:	00290029 	.word	0x00290029
 8010848:	02570029 	.word	0x02570029
      status = ret;
 801084c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801084e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010850:	0798      	lsls	r0, r3, #30
 8010852:	d51e      	bpl.n	8010892 <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010854:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8010856:	2905      	cmp	r1, #5
 8010858:	f200 8550 	bhi.w	80112fc <HAL_RCCEx_PeriphCLKConfig+0xe00>
 801085c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8010860:	00060015 	.word	0x00060015
 8010864:	00150471 	.word	0x00150471
 8010868:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801086c:	4910      	ldr	r1, [pc, #64]	@ (80108b0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 801086e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010870:	f001 0103 	and.w	r1, r1, #3
 8010874:	2903      	cmp	r1, #3
 8010876:	f000 8541 	beq.w	80112fc <HAL_RCCEx_PeriphCLKConfig+0xe00>
 801087a:	2101      	movs	r1, #1
 801087c:	f104 0008 	add.w	r0, r4, #8
 8010880:	f7ff fd5c 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8010884:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010886:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801088a:	2d00      	cmp	r5, #0
 801088c:	f000 82cc 	beq.w	8010e28 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 8010890:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010892:	0759      	lsls	r1, r3, #29
 8010894:	d521      	bpl.n	80108da <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010896:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 801089a:	2905      	cmp	r1, #5
 801089c:	f200 852a 	bhi.w	80112f4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80108a0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80108a4:	00080017 	.word	0x00080017
 80108a8:	0017043c 	.word	0x0017043c
 80108ac:	00170017 	.word	0x00170017
 80108b0:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80108b4:	49ae      	ldr	r1, [pc, #696]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80108b6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80108b8:	f001 0103 	and.w	r1, r1, #3
 80108bc:	2903      	cmp	r1, #3
 80108be:	f000 8519 	beq.w	80112f4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80108c2:	2101      	movs	r1, #1
 80108c4:	f104 0008 	add.w	r0, r4, #8
 80108c8:	f7ff fd38 	bl	801033c <RCCEx_PLL2_Config.part.0>
 80108cc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80108ce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80108d2:	2d00      	cmp	r5, #0
 80108d4:	f000 82c2 	beq.w	8010e5c <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 80108d8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80108da:	069f      	lsls	r7, r3, #26
 80108dc:	d526      	bpl.n	801092c <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80108de:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80108e2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80108e6:	f000 82c6 	beq.w	8010e76 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80108ea:	f200 8455 	bhi.w	8011198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80108ee:	b191      	cbz	r1, 8010916 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80108f0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80108f4:	f040 845a 	bne.w	80111ac <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80108f8:	499d      	ldr	r1, [pc, #628]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80108fa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80108fc:	f001 0103 	and.w	r1, r1, #3
 8010900:	2903      	cmp	r1, #3
 8010902:	f000 8453 	beq.w	80111ac <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8010906:	2100      	movs	r1, #0
 8010908:	f104 0008 	add.w	r0, r4, #8
 801090c:	f7ff fd16 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8010910:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010912:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010916:	2d00      	cmp	r5, #0
 8010918:	f040 828e 	bne.w	8010e38 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801091c:	4f94      	ldr	r7, [pc, #592]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 801091e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8010922:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010924:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8010928:	4301      	orrs	r1, r0
 801092a:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801092c:	0658      	lsls	r0, r3, #25
 801092e:	d526      	bpl.n	801097e <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8010930:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8010934:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8010938:	f000 82af 	beq.w	8010e9a <HAL_RCCEx_PeriphCLKConfig+0x99e>
 801093c:	f200 8464 	bhi.w	8011208 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8010940:	b191      	cbz	r1, 8010968 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8010942:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010946:	f040 8469 	bne.w	801121c <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801094a:	4989      	ldr	r1, [pc, #548]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 801094c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801094e:	f001 0103 	and.w	r1, r1, #3
 8010952:	2903      	cmp	r1, #3
 8010954:	f000 8462 	beq.w	801121c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8010958:	2100      	movs	r1, #0
 801095a:	f104 0008 	add.w	r0, r4, #8
 801095e:	f7ff fced 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8010962:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010964:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010968:	2d00      	cmp	r5, #0
 801096a:	f040 8269 	bne.w	8010e40 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801096e:	4f80      	ldr	r7, [pc, #512]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010970:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8010974:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010976:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 801097a:	4301      	orrs	r1, r0
 801097c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801097e:	0619      	lsls	r1, r3, #24
 8010980:	d526      	bpl.n	80109d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010982:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8010986:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 801098a:	f000 8298 	beq.w	8010ebe <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 801098e:	f200 841f 	bhi.w	80111d0 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8010992:	b191      	cbz	r1, 80109ba <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8010994:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8010998:	f040 8424 	bne.w	80111e4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801099c:	4974      	ldr	r1, [pc, #464]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 801099e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80109a0:	f001 0103 	and.w	r1, r1, #3
 80109a4:	2903      	cmp	r1, #3
 80109a6:	f000 841d 	beq.w	80111e4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80109aa:	2100      	movs	r1, #0
 80109ac:	f104 0008 	add.w	r0, r4, #8
 80109b0:	f7ff fcc4 	bl	801033c <RCCEx_PLL2_Config.part.0>
 80109b4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80109b6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80109ba:	2d00      	cmp	r5, #0
 80109bc:	f040 8244 	bne.w	8010e48 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80109c0:	4f6b      	ldr	r7, [pc, #428]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80109c2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 80109c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80109c8:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80109cc:	4301      	orrs	r1, r0
 80109ce:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80109d0:	071f      	lsls	r7, r3, #28
 80109d2:	d50b      	bpl.n	80109ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80109d4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80109d8:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80109dc:	f000 81d4 	beq.w	8010d88 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80109e0:	4f63      	ldr	r7, [pc, #396]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80109e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80109e4:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80109e8:	4301      	orrs	r1, r0
 80109ea:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80109ec:	06d8      	lsls	r0, r3, #27
 80109ee:	d50b      	bpl.n	8010a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80109f0:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80109f4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80109f8:	f000 81db 	beq.w	8010db2 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80109fc:	4f5c      	ldr	r7, [pc, #368]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80109fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010a00:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8010a04:	4301      	orrs	r1, r0
 8010a06:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010a08:	0319      	lsls	r1, r3, #12
 8010a0a:	d524      	bpl.n	8010a56 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8010a0c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8010a10:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8010a14:	f000 82b1 	beq.w	8010f7a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8010a18:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8010a1c:	d010      	beq.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8010a1e:	2900      	cmp	r1, #0
 8010a20:	f040 8130 	bne.w	8010c84 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010a24:	4852      	ldr	r0, [pc, #328]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010a26:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8010a28:	f000 0003 	and.w	r0, r0, #3
 8010a2c:	2803      	cmp	r0, #3
 8010a2e:	f000 8129 	beq.w	8010c84 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8010a32:	f104 0008 	add.w	r0, r4, #8
 8010a36:	f7ff fc81 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8010a3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010a3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010a40:	2d00      	cmp	r5, #0
 8010a42:	f040 81ff 	bne.w	8010e44 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010a46:	4f4a      	ldr	r7, [pc, #296]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010a48:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8010a4c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010a4e:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8010a52:	4301      	orrs	r1, r0
 8010a54:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010a56:	035f      	lsls	r7, r3, #13
 8010a58:	d50f      	bpl.n	8010a7a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 8010a5a:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8010a5e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8010a62:	f000 8277 	beq.w	8010f54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8010a66:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8010a6a:	f000 812d 	beq.w	8010cc8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8010a6e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8010a72:	f000 8124 	beq.w	8010cbe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 8010a76:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010a78:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010a7a:	03d8      	lsls	r0, r3, #15
 8010a7c:	d520      	bpl.n	8010ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8010a7e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8010a80:	2900      	cmp	r1, #0
 8010a82:	f000 81aa 	beq.w	8010dda <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8010a86:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8010a8a:	f040 80e8 	bne.w	8010c5e <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010a8e:	4938      	ldr	r1, [pc, #224]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010a90:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010a92:	f001 0103 	and.w	r1, r1, #3
 8010a96:	2903      	cmp	r1, #3
 8010a98:	f000 80e1 	beq.w	8010c5e <HAL_RCCEx_PeriphCLKConfig+0x762>
 8010a9c:	2102      	movs	r1, #2
 8010a9e:	f104 0008 	add.w	r0, r4, #8
 8010aa2:	f7ff fc4b 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8010aa6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010aa8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010aac:	2d00      	cmp	r5, #0
 8010aae:	f040 819c 	bne.w	8010dea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010ab2:	4f2f      	ldr	r7, [pc, #188]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010ab4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8010ab6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010ab8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8010abc:	4301      	orrs	r1, r0
 8010abe:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010ac0:	0099      	lsls	r1, r3, #2
 8010ac2:	d50e      	bpl.n	8010ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010ac4:	492a      	ldr	r1, [pc, #168]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010ac6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010ac8:	f001 0103 	and.w	r1, r1, #3
 8010acc:	2903      	cmp	r1, #3
 8010ace:	d007      	beq.n	8010ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8010ad0:	2102      	movs	r1, #2
 8010ad2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010ad6:	f7ff fca1 	bl	801041c <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8010ada:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010ade:	b100      	cbz	r0, 8010ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 8010ae0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8010ae2:	039f      	lsls	r7, r3, #14
 8010ae4:	f100 80ab 	bmi.w	8010c3e <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 8010ae8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010aea:	02d8      	lsls	r0, r3, #11
 8010aec:	d506      	bpl.n	8010afc <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010aee:	4820      	ldr	r0, [pc, #128]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010af0:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8010af2:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8010af4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010af8:	4331      	orrs	r1, r6
 8010afa:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010afc:	00d9      	lsls	r1, r3, #3
 8010afe:	d507      	bpl.n	8010b10 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8010b00:	481b      	ldr	r0, [pc, #108]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010b02:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8010b06:	6901      	ldr	r1, [r0, #16]
 8010b08:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8010b0c:	4331      	orrs	r1, r6
 8010b0e:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010b10:	029f      	lsls	r7, r3, #10
 8010b12:	d506      	bpl.n	8010b22 <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010b14:	4816      	ldr	r0, [pc, #88]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010b16:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8010b18:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8010b1a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8010b1e:	4331      	orrs	r1, r6
 8010b20:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010b22:	005e      	lsls	r6, r3, #1
 8010b24:	d509      	bpl.n	8010b3a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010b26:	4912      	ldr	r1, [pc, #72]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010b28:	6908      	ldr	r0, [r1, #16]
 8010b2a:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8010b2e:	6108      	str	r0, [r1, #16]
 8010b30:	6908      	ldr	r0, [r1, #16]
 8010b32:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 8010b36:	4330      	orrs	r0, r6
 8010b38:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	da06      	bge.n	8010b4c <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010b3e:	480c      	ldr	r0, [pc, #48]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010b40:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8010b42:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8010b44:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8010b48:	4331      	orrs	r1, r6
 8010b4a:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010b4c:	0218      	lsls	r0, r3, #8
 8010b4e:	d507      	bpl.n	8010b60 <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010b50:	4907      	ldr	r1, [pc, #28]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010b52:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8010b56:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8010b58:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8010b5c:	4303      	orrs	r3, r0
 8010b5e:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8010b60:	07d1      	lsls	r1, r2, #31
 8010b62:	d511      	bpl.n	8010b88 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010b64:	4b02      	ldr	r3, [pc, #8]	@ (8010b70 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8010b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b68:	f003 0303 	and.w	r3, r3, #3
 8010b6c:	2b03      	cmp	r3, #3
 8010b6e:	e001      	b.n	8010b74 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8010b70:	58024400 	.word	0x58024400
 8010b74:	f000 835c 	beq.w	8011230 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8010b78:	2100      	movs	r1, #0
 8010b7a:	f104 0008 	add.w	r0, r4, #8
 8010b7e:	f7ff fbdd 	bl	801033c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8010b82:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8010b84:	b100      	cbz	r0, 8010b88 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8010b86:	4605      	mov	r5, r0
 8010b88:	0793      	lsls	r3, r2, #30
 8010b8a:	d50e      	bpl.n	8010baa <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010b8c:	4baf      	ldr	r3, [pc, #700]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b90:	f003 0303 	and.w	r3, r3, #3
 8010b94:	2b03      	cmp	r3, #3
 8010b96:	f000 834d 	beq.w	8011234 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8010b9a:	2101      	movs	r1, #1
 8010b9c:	f104 0008 	add.w	r0, r4, #8
 8010ba0:	f7ff fbcc 	bl	801033c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8010ba4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8010ba6:	b100      	cbz	r0, 8010baa <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8010ba8:	4605      	mov	r5, r0
 8010baa:	0757      	lsls	r7, r2, #29
 8010bac:	d50e      	bpl.n	8010bcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010bae:	4ba7      	ldr	r3, [pc, #668]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bb2:	f003 0303 	and.w	r3, r3, #3
 8010bb6:	2b03      	cmp	r3, #3
 8010bb8:	f000 833e 	beq.w	8011238 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8010bbc:	2102      	movs	r1, #2
 8010bbe:	f104 0008 	add.w	r0, r4, #8
 8010bc2:	f7ff fbbb 	bl	801033c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010bc6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8010bc8:	b100      	cbz	r0, 8010bcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010bca:	4605      	mov	r5, r0
 8010bcc:	0716      	lsls	r6, r2, #28
 8010bce:	d50e      	bpl.n	8010bee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010bd0:	4b9e      	ldr	r3, [pc, #632]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bd4:	f003 0303 	and.w	r3, r3, #3
 8010bd8:	2b03      	cmp	r3, #3
 8010bda:	f000 8323 	beq.w	8011224 <HAL_RCCEx_PeriphCLKConfig+0xd28>
 8010bde:	2100      	movs	r1, #0
 8010be0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010be4:	f7ff fc1a 	bl	801041c <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8010be8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8010bea:	b100      	cbz	r0, 8010bee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8010bec:	4605      	mov	r5, r0
 8010bee:	06d0      	lsls	r0, r2, #27
 8010bf0:	d50f      	bpl.n	8010c12 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010bf2:	4b96      	ldr	r3, [pc, #600]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bf6:	f003 0303 	and.w	r3, r3, #3
 8010bfa:	2b03      	cmp	r3, #3
 8010bfc:	f000 8314 	beq.w	8011228 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 8010c00:	2101      	movs	r1, #1
 8010c02:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010c06:	f7ff fc09 	bl	801041c <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	f040 8359 	bne.w	80112c2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8010c10:	6862      	ldr	r2, [r4, #4]
 8010c12:	0693      	lsls	r3, r2, #26
 8010c14:	d50e      	bpl.n	8010c34 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010c16:	4b8d      	ldr	r3, [pc, #564]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c1a:	f003 0303 	and.w	r3, r3, #3
 8010c1e:	2b03      	cmp	r3, #3
 8010c20:	f000 82b7 	beq.w	8011192 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8010c24:	2102      	movs	r1, #2
 8010c26:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010c2a:	f7ff fbf7 	bl	801041c <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	f040 82af 	bne.w	8011192 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 8010c34:	1e28      	subs	r0, r5, #0
 8010c36:	bf18      	it	ne
 8010c38:	2001      	movne	r0, #1
}
 8010c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 8010c3e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8010c42:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8010c46:	f000 80d2 	beq.w	8010dee <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8010c4a:	f240 8110 	bls.w	8010e6e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8010c4e:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8010c52:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010c56:	f000 80cf 	beq.w	8010df8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8010c5a:	2501      	movs	r5, #1
 8010c5c:	e745      	b.n	8010aea <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 8010c5e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010c60:	4635      	mov	r5, r6
 8010c62:	e72d      	b.n	8010ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c64:	4879      	ldr	r0, [pc, #484]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010c66:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010c68:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010c6c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010c6e:	2d00      	cmp	r5, #0
 8010c70:	f040 80ce 	bne.w	8010e10 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010c74:	4f75      	ldr	r7, [pc, #468]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010c76:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8010c78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010c7a:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8010c7e:	4301      	orrs	r1, r0
 8010c80:	6539      	str	r1, [r7, #80]	@ 0x50
 8010c82:	e598      	b.n	80107b6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8010c84:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8010c86:	4635      	mov	r5, r6
 8010c88:	e6e5      	b.n	8010a56 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010c8a:	4970      	ldr	r1, [pc, #448]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010c8c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010c8e:	f001 0103 	and.w	r1, r1, #3
 8010c92:	2903      	cmp	r1, #3
 8010c94:	f43f adda 	beq.w	801084c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8010c98:	2101      	movs	r1, #1
 8010c9a:	f104 0008 	add.w	r0, r4, #8
 8010c9e:	f7ff fb4d 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8010ca2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010ca4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010ca8:	2d00      	cmp	r5, #0
 8010caa:	f040 80d5 	bne.w	8010e58 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010cae:	4f67      	ldr	r7, [pc, #412]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010cb0:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8010cb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010cb4:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8010cb8:	4301      	orrs	r1, r0
 8010cba:	6579      	str	r1, [r7, #84]	@ 0x54
 8010cbc:	e5c8      	b.n	8010850 <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010cbe:	4863      	ldr	r0, [pc, #396]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010cc0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010cc2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010cc6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010cc8:	2d00      	cmp	r5, #0
 8010cca:	f040 809f 	bne.w	8010e0c <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010cce:	4f5f      	ldr	r7, [pc, #380]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010cd0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8010cd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010cd6:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8010cda:	4301      	orrs	r1, r0
 8010cdc:	6579      	str	r1, [r7, #84]	@ 0x54
 8010cde:	e6cc      	b.n	8010a7a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010ce0:	4f5b      	ldr	r7, [pc, #364]	@ (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010ce8:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8010cea:	f7fd f8df 	bl	800deac <HAL_GetTick>
 8010cee:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010cf0:	e006      	b.n	8010d00 <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010cf2:	f7fd f8db 	bl	800deac <HAL_GetTick>
 8010cf6:	eba0 0008 	sub.w	r0, r0, r8
 8010cfa:	2864      	cmp	r0, #100	@ 0x64
 8010cfc:	f200 82db 	bhi.w	80112b6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	05da      	lsls	r2, r3, #23
 8010d04:	d5f5      	bpl.n	8010cf2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 8010d06:	2d00      	cmp	r5, #0
 8010d08:	f040 82d6 	bne.w	80112b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010d0e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8010d12:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8010d14:	4059      	eors	r1, r3
 8010d16:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8010d1a:	d00b      	beq.n	8010d34 <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010d1c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8010d1e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010d20:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8010d24:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8010d28:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010d2a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8010d2c:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8010d30:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8010d32:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d38:	f000 82fb 	beq.w	8011332 <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010d3c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8010d40:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8010d44:	f000 8309 	beq.w	801135a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 8010d48:	4940      	ldr	r1, [pc, #256]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010d4a:	690a      	ldr	r2, [r1, #16]
 8010d4c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8010d50:	610a      	str	r2, [r1, #16]
 8010d52:	483e      	ldr	r0, [pc, #248]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010d54:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8010d58:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8010d5a:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010d5c:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010d60:	6701      	str	r1, [r0, #112]	@ 0x70
 8010d62:	e543      	b.n	80107ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010d64:	4839      	ldr	r0, [pc, #228]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010d66:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010d68:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010d6c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010d6e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8010d70:	2d00      	cmp	r5, #0
 8010d72:	f040 8177 	bne.w	8011064 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010d76:	4f35      	ldr	r7, [pc, #212]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010d7c:	f021 0107 	bic.w	r1, r1, #7
 8010d80:	4301      	orrs	r1, r0
 8010d82:	6539      	str	r1, [r7, #80]	@ 0x50
 8010d84:	f7ff bbf6 	b.w	8010574 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010d88:	4930      	ldr	r1, [pc, #192]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010d8a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010d8c:	f001 0103 	and.w	r1, r1, #3
 8010d90:	2903      	cmp	r1, #3
 8010d92:	f000 82ba 	beq.w	801130a <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8010d96:	2102      	movs	r1, #2
 8010d98:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010d9c:	f7ff fb3e 	bl	801041c <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010da0:	2800      	cmp	r0, #0
 8010da2:	f000 82b5 	beq.w	8011310 <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010da6:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 8010daa:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010dac:	e9d4 3200 	ldrd	r3, r2, [r4]
 8010db0:	e616      	b.n	80109e0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010db2:	4926      	ldr	r1, [pc, #152]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010db4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010db6:	f001 0103 	and.w	r1, r1, #3
 8010dba:	2903      	cmp	r1, #3
 8010dbc:	f000 82a2 	beq.w	8011304 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8010dc0:	2102      	movs	r1, #2
 8010dc2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010dc6:	f7ff fb29 	bl	801041c <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	f040 82a6 	bne.w	801131c <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010dd0:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010dd4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8010dd8:	e610      	b.n	80109fc <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010dda:	481c      	ldr	r0, [pc, #112]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010ddc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010dde:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010de2:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010de4:	2d00      	cmp	r5, #0
 8010de6:	f43f ae64 	beq.w	8010ab2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 8010dea:	462e      	mov	r6, r5
 8010dec:	e668      	b.n	8010ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010dee:	4f17      	ldr	r7, [pc, #92]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010df0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010df2:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8010df6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010df8:	2d00      	cmp	r5, #0
 8010dfa:	f47f ae76 	bne.w	8010aea <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010dfe:	4d13      	ldr	r5, [pc, #76]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010e00:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8010e02:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8010e06:	4301      	orrs	r1, r0
 8010e08:	6569      	str	r1, [r5, #84]	@ 0x54
 8010e0a:	e66d      	b.n	8010ae8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 8010e0c:	462e      	mov	r6, r5
 8010e0e:	e634      	b.n	8010a7a <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8010e10:	462e      	mov	r6, r5
 8010e12:	e4d0      	b.n	80107b6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8010e14:	462e      	mov	r6, r5
 8010e16:	e445      	b.n	80106a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8010e18:	4f0c      	ldr	r7, [pc, #48]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010e1a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8010e1c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010e1e:	f021 0103 	bic.w	r1, r1, #3
 8010e22:	4301      	orrs	r1, r0
 8010e24:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8010e26:	e4de      	b.n	80107e6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010e28:	4f08      	ldr	r7, [pc, #32]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8010e2a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8010e2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010e2e:	f021 0107 	bic.w	r1, r1, #7
 8010e32:	4301      	orrs	r1, r0
 8010e34:	6579      	str	r1, [r7, #84]	@ 0x54
 8010e36:	e52c      	b.n	8010892 <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 8010e38:	462e      	mov	r6, r5
 8010e3a:	e577      	b.n	801092c <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 8010e3c:	462e      	mov	r6, r5
 8010e3e:	e4aa      	b.n	8010796 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 8010e40:	462e      	mov	r6, r5
 8010e42:	e59c      	b.n	801097e <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 8010e44:	462e      	mov	r6, r5
 8010e46:	e606      	b.n	8010a56 <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 8010e48:	462e      	mov	r6, r5
 8010e4a:	e5c1      	b.n	80109d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8010e4c:	58024400 	.word	0x58024400
 8010e50:	58024800 	.word	0x58024800
      status = ret;
 8010e54:	462e      	mov	r6, r5
 8010e56:	e475      	b.n	8010744 <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 8010e58:	462e      	mov	r6, r5
 8010e5a:	e4f9      	b.n	8010850 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010e5c:	4fc2      	ldr	r7, [pc, #776]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010e5e:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8010e62:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010e64:	f021 0107 	bic.w	r1, r1, #7
 8010e68:	4301      	orrs	r1, r0
 8010e6a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010e6c:	e535      	b.n	80108da <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 8010e6e:	2900      	cmp	r1, #0
 8010e70:	f47f aef3 	bne.w	8010c5a <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8010e74:	e7c0      	b.n	8010df8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010e76:	49bc      	ldr	r1, [pc, #752]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010e78:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010e7a:	f001 0103 	and.w	r1, r1, #3
 8010e7e:	2903      	cmp	r1, #3
 8010e80:	f000 8194 	beq.w	80111ac <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8010e84:	2102      	movs	r1, #2
 8010e86:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010e8a:	f7ff fac7 	bl	801041c <RCCEx_PLL3_Config.part.0>
 8010e8e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010e90:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010e94:	2d00      	cmp	r5, #0
 8010e96:	d1cf      	bne.n	8010e38 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8010e98:	e540      	b.n	801091c <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010e9a:	49b3      	ldr	r1, [pc, #716]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010e9c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010e9e:	f001 0103 	and.w	r1, r1, #3
 8010ea2:	2903      	cmp	r1, #3
 8010ea4:	f000 81ba 	beq.w	801121c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8010ea8:	2102      	movs	r1, #2
 8010eaa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010eae:	f7ff fab5 	bl	801041c <RCCEx_PLL3_Config.part.0>
 8010eb2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010eb4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010eb8:	2d00      	cmp	r5, #0
 8010eba:	d1c1      	bne.n	8010e40 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8010ebc:	e557      	b.n	801096e <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010ebe:	49aa      	ldr	r1, [pc, #680]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010ec0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010ec2:	f001 0103 	and.w	r1, r1, #3
 8010ec6:	2903      	cmp	r1, #3
 8010ec8:	f000 818c 	beq.w	80111e4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8010ecc:	2102      	movs	r1, #2
 8010ece:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010ed2:	f7ff faa3 	bl	801041c <RCCEx_PLL3_Config.part.0>
 8010ed6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010ed8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010edc:	2d00      	cmp	r5, #0
 8010ede:	d1b3      	bne.n	8010e48 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8010ee0:	e56e      	b.n	80109c0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010ee2:	49a1      	ldr	r1, [pc, #644]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010ee4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010ee6:	f001 0103 	and.w	r1, r1, #3
 8010eea:	2903      	cmp	r1, #3
 8010eec:	f000 81df 	beq.w	80112ae <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 8010ef0:	2102      	movs	r1, #2
 8010ef2:	f104 0008 	add.w	r0, r4, #8
 8010ef6:	f7ff fa21 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8010efa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010efc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010f00:	2d00      	cmp	r5, #0
 8010f02:	d187      	bne.n	8010e14 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8010f04:	f7ff bbc7 	b.w	8010696 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f08:	4997      	ldr	r1, [pc, #604]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010f0a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010f0c:	f001 0103 	and.w	r1, r1, #3
 8010f10:	2903      	cmp	r1, #3
 8010f12:	f000 820a 	beq.w	801132a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8010f16:	2102      	movs	r1, #2
 8010f18:	f104 0008 	add.w	r0, r4, #8
 8010f1c:	f7ff fa0e 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8010f20:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010f22:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010f26:	2d00      	cmp	r5, #0
 8010f28:	f47f ac5c 	bne.w	80107e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8010f2c:	e774      	b.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f2e:	498e      	ldr	r1, [pc, #568]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010f30:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010f32:	f001 0103 	and.w	r1, r1, #3
 8010f36:	2903      	cmp	r1, #3
 8010f38:	f000 8146 	beq.w	80111c8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8010f3c:	2101      	movs	r1, #1
 8010f3e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010f42:	f7ff fa6b 	bl	801041c <RCCEx_PLL3_Config.part.0>
 8010f46:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010f48:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010f4c:	2d00      	cmp	r5, #0
 8010f4e:	d181      	bne.n	8010e54 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8010f50:	f7ff bbf1 	b.w	8010736 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f54:	4984      	ldr	r1, [pc, #528]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010f56:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010f58:	f001 0103 	and.w	r1, r1, #3
 8010f5c:	2903      	cmp	r1, #3
 8010f5e:	f43f ad8a 	beq.w	8010a76 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8010f62:	2101      	movs	r1, #1
 8010f64:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010f68:	f7ff fa58 	bl	801041c <RCCEx_PLL3_Config.part.0>
 8010f6c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010f6e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010f72:	2d00      	cmp	r5, #0
 8010f74:	f47f af4a 	bne.w	8010e0c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8010f78:	e6a9      	b.n	8010cce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f7a:	497b      	ldr	r1, [pc, #492]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010f7c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010f7e:	f001 0103 	and.w	r1, r1, #3
 8010f82:	2903      	cmp	r1, #3
 8010f84:	f43f ae7e 	beq.w	8010c84 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8010f88:	2102      	movs	r1, #2
 8010f8a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010f8e:	f7ff fa45 	bl	801041c <RCCEx_PLL3_Config.part.0>
 8010f92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010f94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010f98:	2d00      	cmp	r5, #0
 8010f9a:	f47f af53 	bne.w	8010e44 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8010f9e:	e552      	b.n	8010a46 <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010fa0:	4971      	ldr	r1, [pc, #452]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010fa2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010fa4:	f001 0103 	and.w	r1, r1, #3
 8010fa8:	2903      	cmp	r1, #3
 8010faa:	f000 8129 	beq.w	8011200 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8010fae:	2101      	movs	r1, #1
 8010fb0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010fb4:	f7ff fa32 	bl	801041c <RCCEx_PLL3_Config.part.0>
 8010fb8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010fba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8010fbe:	2d00      	cmp	r5, #0
 8010fc0:	f47f af3c 	bne.w	8010e3c <HAL_RCCEx_PeriphCLKConfig+0x940>
 8010fc4:	f7ff bbdf 	b.w	8010786 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010fc8:	4867      	ldr	r0, [pc, #412]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010fca:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010fcc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010fd0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010fd2:	2d00      	cmp	r5, #0
 8010fd4:	f43f ab88 	beq.w	80106e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8010fd8:	462e      	mov	r6, r5
 8010fda:	f7ff bb8c 	b.w	80106f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010fde:	4862      	ldr	r0, [pc, #392]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010fe0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010fe2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8010fe6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010fe8:	2d00      	cmp	r5, #0
 8010fea:	f43f ab38 	beq.w	801065e <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 8010fee:	462e      	mov	r6, r5
 8010ff0:	f7ff bb3d 	b.w	801066e <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010ff4:	495c      	ldr	r1, [pc, #368]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8010ff6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8010ff8:	f001 0103 	and.w	r1, r1, #3
 8010ffc:	2903      	cmp	r1, #3
 8010ffe:	f000 8125 	beq.w	801124c <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8011002:	2100      	movs	r1, #0
 8011004:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011008:	f7ff fa08 	bl	801041c <RCCEx_PLL3_Config.part.0>
 801100c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801100e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8011012:	f7ff bb66 	b.w	80106e2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011016:	4954      	ldr	r1, [pc, #336]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8011018:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801101a:	f001 0103 	and.w	r1, r1, #3
 801101e:	2903      	cmp	r1, #3
 8011020:	f000 813e 	beq.w	80112a0 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8011024:	2100      	movs	r1, #0
 8011026:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801102a:	f7ff f9f7 	bl	801041c <RCCEx_PLL3_Config.part.0>
 801102e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8011030:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8011034:	2d00      	cmp	r5, #0
 8011036:	f43f aabd 	beq.w	80105b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 801103a:	462e      	mov	r6, r5
 801103c:	f7ff bac1 	b.w	80105c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011040:	4949      	ldr	r1, [pc, #292]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8011042:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8011044:	f001 0103 	and.w	r1, r1, #3
 8011048:	2903      	cmp	r1, #3
 801104a:	f43f aa91 	beq.w	8010570 <HAL_RCCEx_PeriphCLKConfig+0x74>
 801104e:	2100      	movs	r1, #0
 8011050:	f104 0008 	add.w	r0, r4, #8
 8011054:	f7ff f972 	bl	801033c <RCCEx_PLL2_Config.part.0>
 8011058:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801105a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801105e:	2d00      	cmp	r5, #0
 8011060:	f43f ae89 	beq.w	8010d76 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 8011064:	462e      	mov	r6, r5
 8011066:	f7ff ba85 	b.w	8010574 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801106a:	493f      	ldr	r1, [pc, #252]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 801106c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801106e:	f001 0103 	and.w	r1, r1, #3
 8011072:	2903      	cmp	r1, #3
 8011074:	f43f aa7c 	beq.w	8010570 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8011078:	2100      	movs	r1, #0
 801107a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801107e:	f7ff f9cd 	bl	801041c <RCCEx_PLL3_Config.part.0>
 8011082:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8011084:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8011088:	e672      	b.n	8010d70 <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801108a:	4937      	ldr	r1, [pc, #220]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 801108c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801108e:	f001 0103 	and.w	r1, r1, #3
 8011092:	2903      	cmp	r1, #3
 8011094:	f000 80f9 	beq.w	801128a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8011098:	2100      	movs	r1, #0
 801109a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801109e:	f7ff f9bd 	bl	801041c <RCCEx_PLL3_Config.part.0>
 80110a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80110a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80110a8:	2d00      	cmp	r5, #0
 80110aa:	f43f aaad 	beq.w	8010608 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 80110ae:	462e      	mov	r6, r5
 80110b0:	f7ff bab2 	b.w	8010618 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80110b4:	492c      	ldr	r1, [pc, #176]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80110b6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80110b8:	f001 0103 	and.w	r1, r1, #3
 80110bc:	2903      	cmp	r1, #3
 80110be:	f000 80d1 	beq.w	8011264 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 80110c2:	2100      	movs	r1, #0
 80110c4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80110c8:	f7ff f9a8 	bl	801041c <RCCEx_PLL3_Config.part.0>
 80110cc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80110ce:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80110d2:	f7ff bac1 	b.w	8010658 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80110d6:	4924      	ldr	r1, [pc, #144]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80110d8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80110da:	f001 0103 	and.w	r1, r1, #3
 80110de:	2903      	cmp	r1, #3
 80110e0:	f000 80c8 	beq.w	8011274 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80110e4:	2102      	movs	r1, #2
 80110e6:	3028      	adds	r0, #40	@ 0x28
 80110e8:	f7ff f998 	bl	801041c <RCCEx_PLL3_Config.part.0>
 80110ec:	4606      	mov	r6, r0
        break;
 80110ee:	f7ff ba28 	b.w	8010542 <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80110f2:	481d      	ldr	r0, [pc, #116]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80110f4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80110f6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80110fa:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 80110fc:	f7ff ba81 	b.w	8010602 <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011100:	4819      	ldr	r0, [pc, #100]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8011102:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8011104:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8011108:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 801110a:	f7ff ba50 	b.w	80105ae <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801110e:	4d16      	ldr	r5, [pc, #88]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8011110:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8011112:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8011116:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8011118:	f7ff ba17 	b.w	801054a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801111c:	4912      	ldr	r1, [pc, #72]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 801111e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8011120:	f001 0103 	and.w	r1, r1, #3
 8011124:	2903      	cmp	r1, #3
 8011126:	f000 80e5 	beq.w	80112f4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 801112a:	2101      	movs	r1, #1
 801112c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011130:	f7ff f974 	bl	801041c <RCCEx_PLL3_Config.part.0>
 8011134:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011136:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801113a:	2d00      	cmp	r5, #0
 801113c:	f47f abcc 	bne.w	80108d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8011140:	e68c      	b.n	8010e5c <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011142:	4909      	ldr	r1, [pc, #36]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8011144:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8011146:	f001 0103 	and.w	r1, r1, #3
 801114a:	2903      	cmp	r1, #3
 801114c:	f000 80d6 	beq.w	80112fc <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8011150:	2101      	movs	r1, #1
 8011152:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011156:	f7ff f961 	bl	801041c <RCCEx_PLL3_Config.part.0>
 801115a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801115c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8011160:	2d00      	cmp	r5, #0
 8011162:	f47f ab95 	bne.w	8010890 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8011166:	e65f      	b.n	8010e28 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8011168:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801116c:	4983      	ldr	r1, [pc, #524]	@ (801137c <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 801116e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8011170:	f001 0103 	and.w	r1, r1, #3
 8011174:	2903      	cmp	r1, #3
 8011176:	f43f ab69 	beq.w	801084c <HAL_RCCEx_PeriphCLKConfig+0x350>
 801117a:	2101      	movs	r1, #1
 801117c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011180:	f7ff f94c 	bl	801041c <RCCEx_PLL3_Config.part.0>
 8011184:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011186:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801118a:	2d00      	cmp	r5, #0
 801118c:	f47f ae64 	bne.w	8010e58 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8011190:	e58d      	b.n	8010cae <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 8011192:	2001      	movs	r0, #1
}
 8011194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8011198:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 801119c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80111a0:	f43f abb9 	beq.w	8010916 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80111a4:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 80111a8:	f43f abb5 	beq.w	8010916 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 80111ac:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80111ae:	4635      	mov	r5, r6
 80111b0:	f7ff bbbc 	b.w	801092c <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 80111b4:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 80111b8:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 80111bc:	f43f aab8 	beq.w	8010730 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80111c0:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 80111c4:	f43f aab4 	beq.w	8010730 <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 80111c8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80111ca:	4635      	mov	r5, r6
 80111cc:	f7ff baba 	b.w	8010744 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80111d0:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 80111d4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80111d8:	f43f abef 	beq.w	80109ba <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80111dc:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 80111e0:	f43f abeb 	beq.w	80109ba <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 80111e4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80111e6:	4635      	mov	r5, r6
 80111e8:	f7ff bbf2 	b.w	80109d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 80111ec:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 80111f0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80111f4:	f43f aac4 	beq.w	8010780 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80111f8:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 80111fc:	f43f aac0 	beq.w	8010780 <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 8011200:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8011202:	4635      	mov	r5, r6
 8011204:	f7ff bac7 	b.w	8010796 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8011208:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 801120c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8011210:	f43f abaa 	beq.w	8010968 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8011214:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8011218:	f43f aba6 	beq.w	8010968 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 801121c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801121e:	4635      	mov	r5, r6
 8011220:	f7ff bbad 	b.w	801097e <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 8011224:	2501      	movs	r5, #1
 8011226:	e4e2      	b.n	8010bee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8011228:	0691      	lsls	r1, r2, #26
 801122a:	d5b2      	bpl.n	8011192 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 801122c:	2501      	movs	r5, #1
 801122e:	e4f2      	b.n	8010c16 <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 8011230:	2501      	movs	r5, #1
 8011232:	e4a9      	b.n	8010b88 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8011234:	2501      	movs	r5, #1
 8011236:	e4b8      	b.n	8010baa <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8011238:	2501      	movs	r5, #1
 801123a:	e4c7      	b.n	8010bcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 801123c:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8011240:	f43f aa4f 	beq.w	80106e2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8011244:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8011248:	f43f aa4b 	beq.w	80106e2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 801124c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801124e:	4635      	mov	r5, r6
 8011250:	f7ff ba51 	b.w	80106f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8011254:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8011258:	f43f a9fe 	beq.w	8010658 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 801125c:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8011260:	f43f a9fa 	beq.w	8010658 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8011264:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8011266:	4635      	mov	r5, r6
 8011268:	f7ff ba01 	b.w	801066e <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 801126c:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8011270:	f43f a96b 	beq.w	801054a <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 8011274:	2601      	movs	r6, #1
 8011276:	f7ff b96f 	b.w	8010558 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 801127a:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 801127e:	f43f a9c0 	beq.w	8010602 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8011282:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8011286:	f43f a9bc 	beq.w	8010602 <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 801128a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801128c:	4635      	mov	r5, r6
 801128e:	f7ff b9c3 	b.w	8010618 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 8011292:	29c0      	cmp	r1, #192	@ 0xc0
 8011294:	f43f a98b 	beq.w	80105ae <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8011298:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 801129c:	f43f a987 	beq.w	80105ae <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 80112a0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80112a2:	4635      	mov	r5, r6
 80112a4:	f7ff b98d 	b.w	80105c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 80112a8:	2930      	cmp	r1, #48	@ 0x30
 80112aa:	f43f a9f1 	beq.w	8010690 <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 80112ae:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80112b0:	4635      	mov	r5, r6
 80112b2:	f7ff b9f7 	b.w	80106a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 80112b6:	2503      	movs	r5, #3
      status = ret;
 80112b8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80112ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80112be:	f7ff ba95 	b.w	80107ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80112c2:	6863      	ldr	r3, [r4, #4]
 80112c4:	069a      	lsls	r2, r3, #26
 80112c6:	f57f af64 	bpl.w	8011192 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80112ca:	4605      	mov	r5, r0
 80112cc:	e4a3      	b.n	8010c16 <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80112ce:	492b      	ldr	r1, [pc, #172]	@ (801137c <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 80112d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80112d2:	f001 0103 	and.w	r1, r1, #3
 80112d6:	2903      	cmp	r1, #3
 80112d8:	f43f aa6b 	beq.w	80107b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80112dc:	2101      	movs	r1, #1
 80112de:	f104 0008 	add.w	r0, r4, #8
 80112e2:	f7ff f82b 	bl	801033c <RCCEx_PLL2_Config.part.0>
 80112e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80112e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80112ec:	2d00      	cmp	r5, #0
 80112ee:	f47f ad8f 	bne.w	8010e10 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80112f2:	e4bf      	b.n	8010c74 <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 80112f4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80112f6:	4635      	mov	r5, r6
 80112f8:	f7ff baef 	b.w	80108da <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 80112fc:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80112fe:	4635      	mov	r5, r6
 8011300:	f7ff bac7 	b.w	8010892 <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 8011304:	2601      	movs	r6, #1
 8011306:	f7ff bb79 	b.w	80109fc <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 801130a:	2601      	movs	r6, #1
 801130c:	f7ff bb68 	b.w	80109e0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8011310:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011314:	e9d4 3200 	ldrd	r3, r2, [r4]
 8011318:	f7ff bb62 	b.w	80109e0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801131c:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8011320:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011322:	e9d4 3200 	ldrd	r3, r2, [r4]
 8011326:	f7ff bb69 	b.w	80109fc <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 801132a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801132c:	4635      	mov	r5, r6
 801132e:	f7ff ba5a 	b.w	80107e6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 8011332:	f7fc fdbb 	bl	800deac <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011336:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 801137c <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 801133a:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801133c:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011340:	e004      	b.n	801134c <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011342:	f7fc fdb3 	bl	800deac <HAL_GetTick>
 8011346:	1bc0      	subs	r0, r0, r7
 8011348:	4548      	cmp	r0, r9
 801134a:	d810      	bhi.n	801136e <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801134c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011350:	079b      	lsls	r3, r3, #30
 8011352:	d5f6      	bpl.n	8011342 <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011354:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8011358:	e4f0      	b.n	8010d3c <HAL_RCCEx_PeriphCLKConfig+0x840>
 801135a:	4808      	ldr	r0, [pc, #32]	@ (801137c <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 801135c:	4a08      	ldr	r2, [pc, #32]	@ (8011380 <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 801135e:	6901      	ldr	r1, [r0, #16]
 8011360:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8011364:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8011368:	430a      	orrs	r2, r1
 801136a:	6102      	str	r2, [r0, #16]
 801136c:	e4f1      	b.n	8010d52 <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 801136e:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011370:	e9d4 3200 	ldrd	r3, r2, [r4]
 8011374:	4635      	mov	r5, r6
 8011376:	f7ff ba39 	b.w	80107ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 801137a:	bf00      	nop
 801137c:	58024400 	.word	0x58024400
 8011380:	00ffffcf 	.word	0x00ffffcf

08011384 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8011384:	4770      	bx	lr
 8011386:	bf00      	nop

08011388 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8011388:	b318      	cbz	r0, 80113d2 <HAL_SDRAM_Init+0x4a>
{
 801138a:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 801138c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8011390:	4604      	mov	r4, r0
 8011392:	460d      	mov	r5, r1
 8011394:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8011398:	b1b3      	cbz	r3, 80113c8 <HAL_SDRAM_Init+0x40>
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801139a:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801139c:	2302      	movs	r3, #2
 801139e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80113a2:	f851 0b04 	ldr.w	r0, [r1], #4
 80113a6:	f000 fb43 	bl	8011a30 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80113aa:	6862      	ldr	r2, [r4, #4]
 80113ac:	4629      	mov	r1, r5
 80113ae:	6820      	ldr	r0, [r4, #0]
 80113b0:	f000 fb74 	bl	8011a9c <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 80113b4:	4a08      	ldr	r2, [pc, #32]	@ (80113d8 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 80113b6:	2101      	movs	r1, #1
  return HAL_OK;
 80113b8:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80113ba:	6813      	ldr	r3, [r2, #0]
 80113bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80113c0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80113c2:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
}
 80113c6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80113c8:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80113cc:	f7ff ffda 	bl	8011384 <HAL_SDRAM_MspInit>
 80113d0:	e7e3      	b.n	801139a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 80113d2:	2001      	movs	r0, #1
}
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop
 80113d8:	52004000 	.word	0x52004000

080113dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80113dc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80113de:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80113e2:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80113e4:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80113e6:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80113e8:	d004      	beq.n	80113f4 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80113ea:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 80113ee:	2c01      	cmp	r4, #1
 80113f0:	d001      	beq.n	80113f6 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 80113f2:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80113f4:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80113f6:	2302      	movs	r3, #2
 80113f8:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80113fa:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80113fc:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8011400:	f000 fb8a 	bl	8011b18 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011404:	6833      	ldr	r3, [r6, #0]
 8011406:	2b02      	cmp	r3, #2
 8011408:	d003      	beq.n	8011412 <HAL_SDRAM_SendCommand+0x36>
      hsdram->State = HAL_SDRAM_STATE_READY;
 801140a:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
  return HAL_OK;
 801140e:	2000      	movs	r0, #0
}
 8011410:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8011412:	2305      	movs	r3, #5
 8011414:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 8011418:	e7f9      	b.n	801140e <HAL_SDRAM_SendCommand+0x32>
 801141a:	bf00      	nop

0801141c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801141c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 801141e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8011422:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011424:	2b02      	cmp	r3, #2
 8011426:	b2d8      	uxtb	r0, r3
 8011428:	d005      	beq.n	8011436 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 801142a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801142e:	2b01      	cmp	r3, #1
 8011430:	b2dd      	uxtb	r5, r3
 8011432:	d001      	beq.n	8011438 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8011434:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8011436:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011438:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 801143a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801143c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8011440:	f000 fb84 	bl	8011b4c <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8011444:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011446:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 801144a:	bd38      	pop	{r3, r4, r5, pc}

0801144c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801144c:	4770      	bx	lr
 801144e:	bf00      	nop

08011450 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8011450:	2800      	cmp	r0, #0
 8011452:	f000 8091 	beq.w	8011578 <HAL_TIM_Base_Init+0x128>
{
 8011456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8011458:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801145c:	4604      	mov	r4, r0
 801145e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8011462:	2b00      	cmp	r3, #0
 8011464:	f000 8083 	beq.w	801156e <HAL_TIM_Base_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011468:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801146a:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801146c:	4943      	ldr	r1, [pc, #268]	@ (801157c <HAL_TIM_Base_Init+0x12c>)
 801146e:	4844      	ldr	r0, [pc, #272]	@ (8011580 <HAL_TIM_Base_Init+0x130>)
 8011470:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8011474:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8011478:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801147c:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 8011480:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011482:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011486:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011488:	fabe fe8e 	clz	lr, lr

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801148c:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801148e:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011492:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011494:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8011498:	d020      	beq.n	80114dc <HAL_TIM_Base_Init+0x8c>
 801149a:	b9f9      	cbnz	r1, 80114dc <HAL_TIM_Base_Init+0x8c>
 801149c:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8011590 <HAL_TIM_Base_Init+0x140>
 80114a0:	4562      	cmp	r2, ip
 80114a2:	d04b      	beq.n	801153c <HAL_TIM_Base_Init+0xec>
 80114a4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80114a8:	4562      	cmp	r2, ip
 80114aa:	d047      	beq.n	801153c <HAL_TIM_Base_Init+0xec>
 80114ac:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80114b0:	4562      	cmp	r2, ip
 80114b2:	d013      	beq.n	80114dc <HAL_TIM_Base_Init+0x8c>
 80114b4:	f1be 0f00 	cmp.w	lr, #0
 80114b8:	d110      	bne.n	80114dc <HAL_TIM_Base_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80114ba:	4832      	ldr	r0, [pc, #200]	@ (8011584 <HAL_TIM_Base_Init+0x134>)
 80114bc:	4932      	ldr	r1, [pc, #200]	@ (8011588 <HAL_TIM_Base_Init+0x138>)
 80114be:	428a      	cmp	r2, r1
 80114c0:	bf18      	it	ne
 80114c2:	4282      	cmpne	r2, r0
 80114c4:	d03e      	beq.n	8011544 <HAL_TIM_Base_Init+0xf4>
 80114c6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80114ca:	428a      	cmp	r2, r1
 80114cc:	d03a      	beq.n	8011544 <HAL_TIM_Base_Init+0xf4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80114d2:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80114d4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114d6:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80114d8:	6295      	str	r5, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80114da:	e013      	b.n	8011504 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 80114dc:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80114de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80114e2:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80114e4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80114e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80114ea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80114f0:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80114f2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114f4:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80114f6:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80114f8:	b911      	cbnz	r1, 8011500 <HAL_TIM_Base_Init+0xb0>
 80114fa:	f1be 0f00 	cmp.w	lr, #0
 80114fe:	d02b      	beq.n	8011558 <HAL_TIM_Base_Init+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011500:	6963      	ldr	r3, [r4, #20]
 8011502:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011504:	2301      	movs	r3, #1
  return HAL_OK;
 8011506:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8011508:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801150a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801150e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8011512:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8011516:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801151a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 801151e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011526:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801152a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801152e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8011532:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011536:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 801153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801153c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8011540:	68a1      	ldr	r1, [r4, #8]
 8011542:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011544:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8011546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801154a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801154c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011550:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8011552:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011554:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011556:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011558:	490c      	ldr	r1, [pc, #48]	@ (801158c <HAL_TIM_Base_Init+0x13c>)
 801155a:	4b0a      	ldr	r3, [pc, #40]	@ (8011584 <HAL_TIM_Base_Init+0x134>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801155c:	429a      	cmp	r2, r3
 801155e:	bf18      	it	ne
 8011560:	428a      	cmpne	r2, r1
 8011562:	d0cd      	beq.n	8011500 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011564:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011568:	429a      	cmp	r2, r3
 801156a:	d0c9      	beq.n	8011500 <HAL_TIM_Base_Init+0xb0>
 801156c:	e7ca      	b.n	8011504 <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 801156e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8011572:	f7ff ff6b 	bl	801144c <HAL_TIM_Base_MspInit>
 8011576:	e777      	b.n	8011468 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8011578:	2001      	movs	r0, #1
}
 801157a:	4770      	bx	lr
 801157c:	40010000 	.word	0x40010000
 8011580:	40010400 	.word	0x40010400
 8011584:	40014000 	.word	0x40014000
 8011588:	40014400 	.word	0x40014400
 801158c:	40014800 	.word	0x40014800
 8011590:	40000400 	.word	0x40000400

08011594 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8011594:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8011598:	2b01      	cmp	r3, #1
 801159a:	d13d      	bne.n	8011618 <HAL_TIM_Base_Start_IT+0x84>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801159c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801159e:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115a0:	4b1e      	ldr	r3, [pc, #120]	@ (801161c <HAL_TIM_Base_Start_IT+0x88>)
 80115a2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80115a6:	bf18      	it	ne
 80115a8:	429a      	cmpne	r2, r3
{
 80115aa:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115ac:	bf0c      	ite	eq
 80115ae:	2301      	moveq	r3, #1
 80115b0:	2300      	movne	r3, #0
 80115b2:	4d1b      	ldr	r5, [pc, #108]	@ (8011620 <HAL_TIM_Base_Start_IT+0x8c>)
 80115b4:	4c1b      	ldr	r4, [pc, #108]	@ (8011624 <HAL_TIM_Base_Start_IT+0x90>)
 80115b6:	42aa      	cmp	r2, r5
 80115b8:	bf08      	it	eq
 80115ba:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80115be:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80115c2:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115c4:	42a2      	cmp	r2, r4
 80115c6:	bf08      	it	eq
 80115c8:	f043 0301 	orreq.w	r3, r3, #1
 80115cc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80115d0:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115d4:	4814      	ldr	r0, [pc, #80]	@ (8011628 <HAL_TIM_Base_Start_IT+0x94>)
 80115d6:	42a2      	cmp	r2, r4
 80115d8:	bf08      	it	eq
 80115da:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80115de:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115e0:	4282      	cmp	r2, r0
 80115e2:	bf08      	it	eq
 80115e4:	f043 0301 	orreq.w	r3, r3, #1
 80115e8:	4910      	ldr	r1, [pc, #64]	@ (801162c <HAL_TIM_Base_Start_IT+0x98>)
 80115ea:	428a      	cmp	r2, r1
 80115ec:	bf08      	it	eq
 80115ee:	f043 0301 	orreq.w	r3, r3, #1
 80115f2:	b913      	cbnz	r3, 80115fa <HAL_TIM_Base_Start_IT+0x66>
 80115f4:	4b0e      	ldr	r3, [pc, #56]	@ (8011630 <HAL_TIM_Base_Start_IT+0x9c>)
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d107      	bne.n	801160a <HAL_TIM_Base_Start_IT+0x76>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80115fa:	6891      	ldr	r1, [r2, #8]
 80115fc:	4b0d      	ldr	r3, [pc, #52]	@ (8011634 <HAL_TIM_Base_Start_IT+0xa0>)
 80115fe:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011600:	2b06      	cmp	r3, #6
 8011602:	d006      	beq.n	8011612 <HAL_TIM_Base_Start_IT+0x7e>
 8011604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011608:	d003      	beq.n	8011612 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 801160a:	6813      	ldr	r3, [r2, #0]
 801160c:	f043 0301 	orr.w	r3, r3, #1
 8011610:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8011612:	2000      	movs	r0, #0
}
 8011614:	bc30      	pop	{r4, r5}
 8011616:	4770      	bx	lr
    return HAL_ERROR;
 8011618:	2001      	movs	r0, #1
}
 801161a:	4770      	bx	lr
 801161c:	40010000 	.word	0x40010000
 8011620:	40000400 	.word	0x40000400
 8011624:	40000800 	.word	0x40000800
 8011628:	40010400 	.word	0x40010400
 801162c:	40001800 	.word	0x40001800
 8011630:	40014000 	.word	0x40014000
 8011634:	00010007 	.word	0x00010007

08011638 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8011638:	4770      	bx	lr
 801163a:	bf00      	nop

0801163c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 801163c:	2800      	cmp	r0, #0
 801163e:	f000 8091 	beq.w	8011764 <HAL_TIM_PWM_Init+0x128>
{
 8011642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8011644:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8011648:	4604      	mov	r4, r0
 801164a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801164e:	2b00      	cmp	r3, #0
 8011650:	f000 8083 	beq.w	801175a <HAL_TIM_PWM_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011654:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8011656:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011658:	4943      	ldr	r1, [pc, #268]	@ (8011768 <HAL_TIM_PWM_Init+0x12c>)
 801165a:	4844      	ldr	r0, [pc, #272]	@ (801176c <HAL_TIM_PWM_Init+0x130>)
 801165c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8011660:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8011664:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011668:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 801166c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801166e:	fab1 f181 	clz	r1, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011672:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011674:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011678:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801167a:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->PSC = Structure->Prescaler;
 801167e:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011680:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8011684:	d020      	beq.n	80116c8 <HAL_TIM_PWM_Init+0x8c>
 8011686:	b9f9      	cbnz	r1, 80116c8 <HAL_TIM_PWM_Init+0x8c>
 8011688:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 801177c <HAL_TIM_PWM_Init+0x140>
 801168c:	4562      	cmp	r2, ip
 801168e:	d04b      	beq.n	8011728 <HAL_TIM_PWM_Init+0xec>
 8011690:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8011694:	4562      	cmp	r2, ip
 8011696:	d047      	beq.n	8011728 <HAL_TIM_PWM_Init+0xec>
 8011698:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 801169c:	4562      	cmp	r2, ip
 801169e:	d013      	beq.n	80116c8 <HAL_TIM_PWM_Init+0x8c>
 80116a0:	f1be 0f00 	cmp.w	lr, #0
 80116a4:	d110      	bne.n	80116c8 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80116a6:	4832      	ldr	r0, [pc, #200]	@ (8011770 <HAL_TIM_PWM_Init+0x134>)
 80116a8:	4932      	ldr	r1, [pc, #200]	@ (8011774 <HAL_TIM_PWM_Init+0x138>)
 80116aa:	428a      	cmp	r2, r1
 80116ac:	bf18      	it	ne
 80116ae:	4282      	cmpne	r2, r0
 80116b0:	d03e      	beq.n	8011730 <HAL_TIM_PWM_Init+0xf4>
 80116b2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80116b6:	428a      	cmp	r2, r1
 80116b8:	d03a      	beq.n	8011730 <HAL_TIM_PWM_Init+0xf4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80116ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80116be:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80116c0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80116c2:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80116c4:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80116c6:	e013      	b.n	80116f0 <HAL_TIM_PWM_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 80116c8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80116ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80116ce:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80116d0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80116d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80116d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80116d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80116dc:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80116de:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80116e0:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80116e2:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80116e4:	b911      	cbnz	r1, 80116ec <HAL_TIM_PWM_Init+0xb0>
 80116e6:	f1be 0f00 	cmp.w	lr, #0
 80116ea:	d02b      	beq.n	8011744 <HAL_TIM_PWM_Init+0x108>
    TIMx->RCR = Structure->RepetitionCounter;
 80116ec:	6963      	ldr	r3, [r4, #20]
 80116ee:	6313      	str	r3, [r2, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80116f0:	2301      	movs	r3, #1
  return HAL_OK;
 80116f2:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80116f4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80116f6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80116fe:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8011702:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8011706:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 801170a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801170e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011712:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8011716:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801171a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 801171e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011722:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8011726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 801172c:	68a1      	ldr	r1, [r4, #8]
 801172e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011730:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8011732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011736:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011738:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801173c:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 801173e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011740:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011742:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011744:	490c      	ldr	r1, [pc, #48]	@ (8011778 <HAL_TIM_PWM_Init+0x13c>)
 8011746:	4b0a      	ldr	r3, [pc, #40]	@ (8011770 <HAL_TIM_PWM_Init+0x134>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011748:	429a      	cmp	r2, r3
 801174a:	bf18      	it	ne
 801174c:	428a      	cmpne	r2, r1
 801174e:	d0cd      	beq.n	80116ec <HAL_TIM_PWM_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011754:	429a      	cmp	r2, r3
 8011756:	d0c9      	beq.n	80116ec <HAL_TIM_PWM_Init+0xb0>
 8011758:	e7ca      	b.n	80116f0 <HAL_TIM_PWM_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 801175a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 801175e:	f7ff ff6b 	bl	8011638 <HAL_TIM_PWM_MspInit>
 8011762:	e777      	b.n	8011654 <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 8011764:	2001      	movs	r0, #1
}
 8011766:	4770      	bx	lr
 8011768:	40010000 	.word	0x40010000
 801176c:	40010400 	.word	0x40010400
 8011770:	40014000 	.word	0x40014000
 8011774:	40014400 	.word	0x40014400
 8011778:	40014800 	.word	0x40014800
 801177c:	40000400 	.word	0x40000400

08011780 <HAL_TIM_PWM_MspDeInit>:
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
 8011780:	4770      	bx	lr
 8011782:	bf00      	nop

08011784 <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8011784:	2102      	movs	r1, #2
  __HAL_TIM_DISABLE(htim);
 8011786:	6803      	ldr	r3, [r0, #0]
 8011788:	f241 1211 	movw	r2, #4369	@ 0x1111
{
 801178c:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 801178e:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
{
 8011792:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8011794:	6a19      	ldr	r1, [r3, #32]
 8011796:	4211      	tst	r1, r2
 8011798:	d108      	bne.n	80117ac <HAL_TIM_PWM_DeInit+0x28>
 801179a:	6a19      	ldr	r1, [r3, #32]
 801179c:	f240 4244 	movw	r2, #1092	@ 0x444
 80117a0:	4211      	tst	r1, r2
 80117a2:	d103      	bne.n	80117ac <HAL_TIM_PWM_DeInit+0x28>
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	f022 0201 	bic.w	r2, r2, #1
 80117aa:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 80117ac:	4620      	mov	r0, r4
 80117ae:	f7ff ffe7 	bl	8011780 <HAL_TIM_PWM_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80117b2:	2000      	movs	r0, #0
 80117b4:	f884 0048 	strb.w	r0, [r4, #72]	@ 0x48
  __HAL_UNLOCK(htim);
 80117b8:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80117bc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
 80117c0:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
 80117c4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 80117c8:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
 80117cc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
 80117d0:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80117d4:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 80117d8:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
 80117dc:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
 80117e0:	f884 0047 	strb.w	r0, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_RESET;
 80117e4:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
}
 80117e8:	bd10      	pop	{r4, pc}
 80117ea:	bf00      	nop

080117ec <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80117ec:	4770      	bx	lr
 80117ee:	bf00      	nop

080117f0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop

080117f4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop

080117f8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop

080117fc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80117fc:	6803      	ldr	r3, [r0, #0]
 80117fe:	691a      	ldr	r2, [r3, #16]
 8011800:	0791      	lsls	r1, r2, #30
{
 8011802:	b510      	push	{r4, lr}
 8011804:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011806:	d502      	bpl.n	801180e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011808:	68da      	ldr	r2, [r3, #12]
 801180a:	0792      	lsls	r2, r2, #30
 801180c:	d468      	bmi.n	80118e0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801180e:	691a      	ldr	r2, [r3, #16]
 8011810:	0752      	lsls	r2, r2, #29
 8011812:	d502      	bpl.n	801181a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011814:	68da      	ldr	r2, [r3, #12]
 8011816:	0750      	lsls	r0, r2, #29
 8011818:	d44f      	bmi.n	80118ba <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801181a:	691a      	ldr	r2, [r3, #16]
 801181c:	0711      	lsls	r1, r2, #28
 801181e:	d502      	bpl.n	8011826 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011820:	68da      	ldr	r2, [r3, #12]
 8011822:	0712      	lsls	r2, r2, #28
 8011824:	d437      	bmi.n	8011896 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011826:	691a      	ldr	r2, [r3, #16]
 8011828:	06d0      	lsls	r0, r2, #27
 801182a:	d502      	bpl.n	8011832 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801182c:	68da      	ldr	r2, [r3, #12]
 801182e:	06d1      	lsls	r1, r2, #27
 8011830:	d41e      	bmi.n	8011870 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011832:	691a      	ldr	r2, [r3, #16]
 8011834:	07d2      	lsls	r2, r2, #31
 8011836:	d502      	bpl.n	801183e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011838:	68da      	ldr	r2, [r3, #12]
 801183a:	07d0      	lsls	r0, r2, #31
 801183c:	d469      	bmi.n	8011912 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801183e:	691a      	ldr	r2, [r3, #16]
 8011840:	0611      	lsls	r1, r2, #24
 8011842:	d502      	bpl.n	801184a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011844:	68da      	ldr	r2, [r3, #12]
 8011846:	0612      	lsls	r2, r2, #24
 8011848:	d46b      	bmi.n	8011922 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801184a:	691a      	ldr	r2, [r3, #16]
 801184c:	05d0      	lsls	r0, r2, #23
 801184e:	d502      	bpl.n	8011856 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011850:	68da      	ldr	r2, [r3, #12]
 8011852:	0611      	lsls	r1, r2, #24
 8011854:	d46d      	bmi.n	8011932 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011856:	691a      	ldr	r2, [r3, #16]
 8011858:	0652      	lsls	r2, r2, #25
 801185a:	d502      	bpl.n	8011862 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801185c:	68da      	ldr	r2, [r3, #12]
 801185e:	0650      	lsls	r0, r2, #25
 8011860:	d46f      	bmi.n	8011942 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011862:	691a      	ldr	r2, [r3, #16]
 8011864:	0691      	lsls	r1, r2, #26
 8011866:	d502      	bpl.n	801186e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011868:	68da      	ldr	r2, [r3, #12]
 801186a:	0692      	lsls	r2, r2, #26
 801186c:	d449      	bmi.n	8011902 <HAL_TIM_IRQHandler+0x106>
}
 801186e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011870:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011874:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8011876:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011878:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801187a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801187c:	69db      	ldr	r3, [r3, #28]
 801187e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8011882:	d16f      	bne.n	8011964 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011884:	f7ff ffb2 	bl	80117ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011888:	4620      	mov	r0, r4
 801188a:	f7ff ffb3 	bl	80117f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801188e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011890:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011892:	7722      	strb	r2, [r4, #28]
 8011894:	e7cd      	b.n	8011832 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011896:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801189a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 801189c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801189e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80118a0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80118a2:	69db      	ldr	r3, [r3, #28]
 80118a4:	079b      	lsls	r3, r3, #30
 80118a6:	d15a      	bne.n	801195e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80118a8:	f7ff ffa0 	bl	80117ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80118ac:	4620      	mov	r0, r4
 80118ae:	f7ff ffa1 	bl	80117f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80118b2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80118b4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80118b6:	7722      	strb	r2, [r4, #28]
 80118b8:	e7b5      	b.n	8011826 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80118ba:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80118be:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80118c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80118c2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80118c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80118c6:	699b      	ldr	r3, [r3, #24]
 80118c8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80118cc:	d144      	bne.n	8011958 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80118ce:	f7ff ff8d 	bl	80117ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80118d2:	4620      	mov	r0, r4
 80118d4:	f7ff ff8e 	bl	80117f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80118d8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80118da:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80118dc:	7722      	strb	r2, [r4, #28]
 80118de:	e79c      	b.n	801181a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80118e0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80118e4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80118e6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80118e8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80118ea:	699b      	ldr	r3, [r3, #24]
 80118ec:	0799      	lsls	r1, r3, #30
 80118ee:	d130      	bne.n	8011952 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80118f0:	f7ff ff7c 	bl	80117ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80118f4:	4620      	mov	r0, r4
 80118f6:	f7ff ff7d 	bl	80117f4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80118fa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80118fc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80118fe:	7722      	strb	r2, [r4, #28]
 8011900:	e785      	b.n	801180e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011902:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8011906:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011908:	611a      	str	r2, [r3, #16]
}
 801190a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 801190e:	f000 b82d 	b.w	801196c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011912:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8011916:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011918:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801191a:	f000 f881 	bl	8011a20 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801191e:	6823      	ldr	r3, [r4, #0]
 8011920:	e78d      	b.n	801183e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011922:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8011926:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011928:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801192a:	f000 f821 	bl	8011970 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801192e:	6823      	ldr	r3, [r4, #0]
 8011930:	e78b      	b.n	801184a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011932:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8011936:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011938:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 801193a:	f000 f81b 	bl	8011974 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801193e:	6823      	ldr	r3, [r4, #0]
 8011940:	e789      	b.n	8011856 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011942:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8011946:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011948:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801194a:	f7ff ff55 	bl	80117f8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801194e:	6823      	ldr	r3, [r4, #0]
 8011950:	e787      	b.n	8011862 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8011952:	f7ff ff4d 	bl	80117f0 <HAL_TIM_IC_CaptureCallback>
 8011956:	e7d0      	b.n	80118fa <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8011958:	f7ff ff4a 	bl	80117f0 <HAL_TIM_IC_CaptureCallback>
 801195c:	e7bc      	b.n	80118d8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 801195e:	f7ff ff47 	bl	80117f0 <HAL_TIM_IC_CaptureCallback>
 8011962:	e7a6      	b.n	80118b2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8011964:	f7ff ff44 	bl	80117f0 <HAL_TIM_IC_CaptureCallback>
 8011968:	e791      	b.n	801188e <HAL_TIM_IRQHandler+0x92>
 801196a:	bf00      	nop

0801196c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 801196c:	4770      	bx	lr
 801196e:	bf00      	nop

08011970 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8011970:	4770      	bx	lr
 8011972:	bf00      	nop

08011974 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop

08011978 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8011978:	4b24      	ldr	r3, [pc, #144]	@ (8011a0c <HAL_InitTick+0x94>)
 801197a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 801197e:	f042 0210 	orr.w	r2, r2, #16
{
 8011982:	b570      	push	{r4, r5, r6, lr}
 8011984:	b08a      	sub	sp, #40	@ 0x28
  __HAL_RCC_TIM6_CLK_ENABLE();
 8011986:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 801198a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
{
 801198e:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011990:	4669      	mov	r1, sp
 8011992:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 8011994:	f003 0310 	and.w	r3, r3, #16
 8011998:	9301      	str	r3, [sp, #4]
 801199a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801199c:	f7fe fca2 	bl	80102e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80119a0:	9b07      	ldr	r3, [sp, #28]
 80119a2:	b9cb      	cbnz	r3, 80119d8 <HAL_InitTick+0x60>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80119a4:	f7fe fc0e 	bl	80101c4 <HAL_RCC_GetPCLK1Freq>
 80119a8:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80119aa:	4a19      	ldr	r2, [pc, #100]	@ (8011a10 <HAL_InitTick+0x98>)

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80119ac:	4c19      	ldr	r4, [pc, #100]	@ (8011a14 <HAL_InitTick+0x9c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80119ae:	fba2 2303 	umull	r2, r3, r2, r3
  TimHandle.Instance = TIM6;
 80119b2:	4919      	ldr	r1, [pc, #100]	@ (8011a18 <HAL_InitTick+0xa0>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0U;
 80119b4:	2200      	movs	r2, #0
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  status = HAL_TIM_Base_Init(&TimHandle);
 80119b6:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80119b8:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 80119ba:	6021      	str	r1, [r4, #0]
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80119bc:	f240 31e7 	movw	r1, #999	@ 0x3e7
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80119c0:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80119c2:	3b01      	subs	r3, #1
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80119c4:	e9c4 1203 	strd	r1, r2, [r4, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80119c8:	6063      	str	r3, [r4, #4]
  status = HAL_TIM_Base_Init(&TimHandle);
 80119ca:	f7ff fd41 	bl	8011450 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80119ce:	4606      	mov	r6, r0
 80119d0:	b130      	cbz	r0, 80119e0 <HAL_InitTick+0x68>
   }
}

  /* Return function status */
  return status;
}
 80119d2:	4630      	mov	r0, r6
 80119d4:	b00a      	add	sp, #40	@ 0x28
 80119d6:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80119d8:	f7fe fbf4 	bl	80101c4 <HAL_RCC_GetPCLK1Freq>
 80119dc:	0043      	lsls	r3, r0, #1
 80119de:	e7e4      	b.n	80119aa <HAL_InitTick+0x32>
    status = HAL_TIM_Base_Start_IT(&TimHandle);
 80119e0:	4620      	mov	r0, r4
 80119e2:	f7ff fdd7 	bl	8011594 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80119e6:	4606      	mov	r6, r0
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d1f2      	bne.n	80119d2 <HAL_InitTick+0x5a>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80119ec:	2036      	movs	r0, #54	@ 0x36
 80119ee:	f7fc fad1 	bl	800df94 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80119f2:	2d0f      	cmp	r5, #15
 80119f4:	d901      	bls.n	80119fa <HAL_InitTick+0x82>
        status = HAL_ERROR;
 80119f6:	2601      	movs	r6, #1
 80119f8:	e7eb      	b.n	80119d2 <HAL_InitTick+0x5a>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 80119fa:	4632      	mov	r2, r6
 80119fc:	4629      	mov	r1, r5
 80119fe:	2036      	movs	r0, #54	@ 0x36
 8011a00:	f7fc fa8c 	bl	800df1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011a04:	4b05      	ldr	r3, [pc, #20]	@ (8011a1c <HAL_InitTick+0xa4>)
 8011a06:	601d      	str	r5, [r3, #0]
 8011a08:	e7e3      	b.n	80119d2 <HAL_InitTick+0x5a>
 8011a0a:	bf00      	nop
 8011a0c:	58024400 	.word	0x58024400
 8011a10:	431bde83 	.word	0x431bde83
 8011a14:	240412ac 	.word	0x240412ac
 8011a18:	40001000 	.word	0x40001000
 8011a1c:	24000130 	.word	0x24000130

08011a20 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8011a20:	f7fc ba38 	b.w	800de94 <HAL_IncTick>

08011a24 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8011a24:	4801      	ldr	r0, [pc, #4]	@ (8011a2c <TIM6_DAC_IRQHandler+0x8>)
 8011a26:	f7ff bee9 	b.w	80117fc <HAL_TIM_IRQHandler>
 8011a2a:	bf00      	nop
 8011a2c:	240412ac 	.word	0x240412ac

08011a30 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011a34:	e9d1 3e07 	ldrd	r3, lr, [r1, #28]
 8011a38:	e9d1 8200 	ldrd	r8, r2, [r1]
 8011a3c:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
 8011a3e:	ea43 030e 	orr.w	r3, r3, lr
 8011a42:	e9d1 c602 	ldrd	ip, r6, [r1, #8]
 8011a46:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 8011a4a:	6989      	ldr	r1, [r1, #24]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8011a4c:	f1b8 0f00 	cmp.w	r8, #0
 8011a50:	d10f      	bne.n	8011a72 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011a52:	433b      	orrs	r3, r7
 8011a54:	4313      	orrs	r3, r2
 8011a56:	6802      	ldr	r2, [r0, #0]
 8011a58:	ea43 030c 	orr.w	r3, r3, ip
 8011a5c:	f36f 020e 	bfc	r2, #0, #15
 8011a60:	4333      	orrs	r3, r6
 8011a62:	432b      	orrs	r3, r5
 8011a64:	4323      	orrs	r3, r4
 8011a66:	430b      	orrs	r3, r1
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011a72:	ea42 020c 	orr.w	r2, r2, ip
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011a76:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011a78:	4332      	orrs	r2, r6
 8011a7a:	432a      	orrs	r2, r5
 8011a7c:	4322      	orrs	r2, r4
 8011a7e:	430a      	orrs	r2, r1
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011a80:	6801      	ldr	r1, [r0, #0]
 8011a82:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8011a86:	430b      	orrs	r3, r1
 8011a88:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011a8a:	6843      	ldr	r3, [r0, #4]
 8011a8c:	f36f 030e 	bfc	r3, #0, #15
 8011a90:	4313      	orrs	r3, r2
 8011a92:	6043      	str	r3, [r0, #4]
}
 8011a94:	2000      	movs	r0, #0
 8011a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a9a:	bf00      	nop

08011a9c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011a9e:	68cc      	ldr	r4, [r1, #12]
 8011aa0:	694b      	ldr	r3, [r1, #20]
 8011aa2:	3c01      	subs	r4, #1
 8011aa4:	688d      	ldr	r5, [r1, #8]
 8011aa6:	698f      	ldr	r7, [r1, #24]
 8011aa8:	3b01      	subs	r3, #1
 8011aaa:	ea4f 3e04 	mov.w	lr, r4, lsl #12
 8011aae:	684c      	ldr	r4, [r1, #4]
 8011ab0:	680e      	ldr	r6, [r1, #0]
 8011ab2:	3d01      	subs	r5, #1
 8011ab4:	3c01      	subs	r4, #1
 8011ab6:	051b      	lsls	r3, r3, #20
 8011ab8:	022d      	lsls	r5, r5, #8
 8011aba:	3e01      	subs	r6, #1
 8011abc:	ea4f 1c04 	mov.w	ip, r4, lsl #4
 8011ac0:	690c      	ldr	r4, [r1, #16]
 8011ac2:	1e79      	subs	r1, r7, #1
 8011ac4:	3c01      	subs	r4, #1
 8011ac6:	0609      	lsls	r1, r1, #24
 8011ac8:	0424      	lsls	r4, r4, #16
  if (Bank == FMC_SDRAM_BANK1)
 8011aca:	b972      	cbnz	r2, 8011aea <FMC_SDRAM_Timing_Init+0x4e>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011acc:	ea4e 0303 	orr.w	r3, lr, r3
 8011ad0:	6882      	ldr	r2, [r0, #8]
 8011ad2:	4333      	orrs	r3, r6
 8011ad4:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8011ad8:	ea43 030c 	orr.w	r3, r3, ip
 8011adc:	432b      	orrs	r3, r5
 8011ade:	4323      	orrs	r3, r4
 8011ae0:	430b      	orrs	r3, r1
 8011ae2:	4313      	orrs	r3, r2
 8011ae4:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8011ae6:	2000      	movs	r0, #0
 8011ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011aea:	ea4e 0e03 	orr.w	lr, lr, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011aee:	ea4c 0305 	orr.w	r3, ip, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011af2:	4a08      	ldr	r2, [pc, #32]	@ (8011b14 <FMC_SDRAM_Timing_Init+0x78>)
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011af4:	4333      	orrs	r3, r6
 8011af6:	4323      	orrs	r3, r4
 8011af8:	430b      	orrs	r3, r1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011afa:	6881      	ldr	r1, [r0, #8]
 8011afc:	400a      	ands	r2, r1
 8011afe:	ea4e 0202 	orr.w	r2, lr, r2
 8011b02:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011b04:	68c2      	ldr	r2, [r0, #12]
 8011b06:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8011b0a:	4313      	orrs	r3, r2
 8011b0c:	60c3      	str	r3, [r0, #12]
}
 8011b0e:	2000      	movs	r0, #0
 8011b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b12:	bf00      	nop
 8011b14:	ff0f0fff 	.word	0xff0f0fff

08011b18 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8011b18:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011b1a:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 8011b1e:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011b20:	f8df c024 	ldr.w	ip, [pc, #36]	@ 8011b48 <FMC_SDRAM_SendCommand+0x30>
 8011b24:	6900      	ldr	r0, [r0, #16]
 8011b26:	4323      	orrs	r3, r4
 8011b28:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 8011b2c:	ea00 0c0c 	and.w	ip, r0, ip
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8011b30:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011b32:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8011b36:	3901      	subs	r1, #1
}
 8011b38:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011b3c:	ea43 030c 	orr.w	r3, r3, ip
 8011b40:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8011b44:	6113      	str	r3, [r2, #16]
}
 8011b46:	4770      	bx	lr
 8011b48:	ffc00000 	.word	0xffc00000

08011b4c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011b4c:	4602      	mov	r2, r0

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));

  return HAL_OK;
}
 8011b4e:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8011b50:	6953      	ldr	r3, [r2, #20]
 8011b52:	f36f 034d 	bfc	r3, #1, #13
 8011b56:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8011b5a:	6153      	str	r3, [r2, #20]
}
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop

08011b60 <siprintf>:
 8011b60:	b40e      	push	{r1, r2, r3}
 8011b62:	b510      	push	{r4, lr}
 8011b64:	b09d      	sub	sp, #116	@ 0x74
 8011b66:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011b68:	9002      	str	r0, [sp, #8]
 8011b6a:	9006      	str	r0, [sp, #24]
 8011b6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011b70:	480a      	ldr	r0, [pc, #40]	@ (8011b9c <siprintf+0x3c>)
 8011b72:	9107      	str	r1, [sp, #28]
 8011b74:	9104      	str	r1, [sp, #16]
 8011b76:	490a      	ldr	r1, [pc, #40]	@ (8011ba0 <siprintf+0x40>)
 8011b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b7c:	9105      	str	r1, [sp, #20]
 8011b7e:	2400      	movs	r4, #0
 8011b80:	a902      	add	r1, sp, #8
 8011b82:	6800      	ldr	r0, [r0, #0]
 8011b84:	9301      	str	r3, [sp, #4]
 8011b86:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011b88:	f000 f9a2 	bl	8011ed0 <_svfiprintf_r>
 8011b8c:	9b02      	ldr	r3, [sp, #8]
 8011b8e:	701c      	strb	r4, [r3, #0]
 8011b90:	b01d      	add	sp, #116	@ 0x74
 8011b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b96:	b003      	add	sp, #12
 8011b98:	4770      	bx	lr
 8011b9a:	bf00      	nop
 8011b9c:	24000134 	.word	0x24000134
 8011ba0:	ffff0208 	.word	0xffff0208

08011ba4 <memset>:
 8011ba4:	4402      	add	r2, r0
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d100      	bne.n	8011bae <memset+0xa>
 8011bac:	4770      	bx	lr
 8011bae:	f803 1b01 	strb.w	r1, [r3], #1
 8011bb2:	e7f9      	b.n	8011ba8 <memset+0x4>

08011bb4 <__errno>:
 8011bb4:	4b01      	ldr	r3, [pc, #4]	@ (8011bbc <__errno+0x8>)
 8011bb6:	6818      	ldr	r0, [r3, #0]
 8011bb8:	4770      	bx	lr
 8011bba:	bf00      	nop
 8011bbc:	24000134 	.word	0x24000134

08011bc0 <__libc_init_array>:
 8011bc0:	b570      	push	{r4, r5, r6, lr}
 8011bc2:	4d0d      	ldr	r5, [pc, #52]	@ (8011bf8 <__libc_init_array+0x38>)
 8011bc4:	4c0d      	ldr	r4, [pc, #52]	@ (8011bfc <__libc_init_array+0x3c>)
 8011bc6:	1b64      	subs	r4, r4, r5
 8011bc8:	10a4      	asrs	r4, r4, #2
 8011bca:	2600      	movs	r6, #0
 8011bcc:	42a6      	cmp	r6, r4
 8011bce:	d109      	bne.n	8011be4 <__libc_init_array+0x24>
 8011bd0:	4d0b      	ldr	r5, [pc, #44]	@ (8011c00 <__libc_init_array+0x40>)
 8011bd2:	4c0c      	ldr	r4, [pc, #48]	@ (8011c04 <__libc_init_array+0x44>)
 8011bd4:	f001 fa24 	bl	8013020 <_init>
 8011bd8:	1b64      	subs	r4, r4, r5
 8011bda:	10a4      	asrs	r4, r4, #2
 8011bdc:	2600      	movs	r6, #0
 8011bde:	42a6      	cmp	r6, r4
 8011be0:	d105      	bne.n	8011bee <__libc_init_array+0x2e>
 8011be2:	bd70      	pop	{r4, r5, r6, pc}
 8011be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011be8:	4798      	blx	r3
 8011bea:	3601      	adds	r6, #1
 8011bec:	e7ee      	b.n	8011bcc <__libc_init_array+0xc>
 8011bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bf2:	4798      	blx	r3
 8011bf4:	3601      	adds	r6, #1
 8011bf6:	e7f2      	b.n	8011bde <__libc_init_array+0x1e>
 8011bf8:	08013330 	.word	0x08013330
 8011bfc:	08013330 	.word	0x08013330
 8011c00:	08013330 	.word	0x08013330
 8011c04:	08013334 	.word	0x08013334

08011c08 <__retarget_lock_acquire_recursive>:
 8011c08:	4770      	bx	lr

08011c0a <__retarget_lock_release_recursive>:
 8011c0a:	4770      	bx	lr

08011c0c <memcpy>:
 8011c0c:	440a      	add	r2, r1
 8011c0e:	4291      	cmp	r1, r2
 8011c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c14:	d100      	bne.n	8011c18 <memcpy+0xc>
 8011c16:	4770      	bx	lr
 8011c18:	b510      	push	{r4, lr}
 8011c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c22:	4291      	cmp	r1, r2
 8011c24:	d1f9      	bne.n	8011c1a <memcpy+0xe>
 8011c26:	bd10      	pop	{r4, pc}

08011c28 <_free_r>:
 8011c28:	b538      	push	{r3, r4, r5, lr}
 8011c2a:	4605      	mov	r5, r0
 8011c2c:	2900      	cmp	r1, #0
 8011c2e:	d041      	beq.n	8011cb4 <_free_r+0x8c>
 8011c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c34:	1f0c      	subs	r4, r1, #4
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	bfb8      	it	lt
 8011c3a:	18e4      	addlt	r4, r4, r3
 8011c3c:	f000 f8e0 	bl	8011e00 <__malloc_lock>
 8011c40:	4a1d      	ldr	r2, [pc, #116]	@ (8011cb8 <_free_r+0x90>)
 8011c42:	6813      	ldr	r3, [r2, #0]
 8011c44:	b933      	cbnz	r3, 8011c54 <_free_r+0x2c>
 8011c46:	6063      	str	r3, [r4, #4]
 8011c48:	6014      	str	r4, [r2, #0]
 8011c4a:	4628      	mov	r0, r5
 8011c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c50:	f000 b8dc 	b.w	8011e0c <__malloc_unlock>
 8011c54:	42a3      	cmp	r3, r4
 8011c56:	d908      	bls.n	8011c6a <_free_r+0x42>
 8011c58:	6820      	ldr	r0, [r4, #0]
 8011c5a:	1821      	adds	r1, r4, r0
 8011c5c:	428b      	cmp	r3, r1
 8011c5e:	bf01      	itttt	eq
 8011c60:	6819      	ldreq	r1, [r3, #0]
 8011c62:	685b      	ldreq	r3, [r3, #4]
 8011c64:	1809      	addeq	r1, r1, r0
 8011c66:	6021      	streq	r1, [r4, #0]
 8011c68:	e7ed      	b.n	8011c46 <_free_r+0x1e>
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	b10b      	cbz	r3, 8011c74 <_free_r+0x4c>
 8011c70:	42a3      	cmp	r3, r4
 8011c72:	d9fa      	bls.n	8011c6a <_free_r+0x42>
 8011c74:	6811      	ldr	r1, [r2, #0]
 8011c76:	1850      	adds	r0, r2, r1
 8011c78:	42a0      	cmp	r0, r4
 8011c7a:	d10b      	bne.n	8011c94 <_free_r+0x6c>
 8011c7c:	6820      	ldr	r0, [r4, #0]
 8011c7e:	4401      	add	r1, r0
 8011c80:	1850      	adds	r0, r2, r1
 8011c82:	4283      	cmp	r3, r0
 8011c84:	6011      	str	r1, [r2, #0]
 8011c86:	d1e0      	bne.n	8011c4a <_free_r+0x22>
 8011c88:	6818      	ldr	r0, [r3, #0]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	6053      	str	r3, [r2, #4]
 8011c8e:	4408      	add	r0, r1
 8011c90:	6010      	str	r0, [r2, #0]
 8011c92:	e7da      	b.n	8011c4a <_free_r+0x22>
 8011c94:	d902      	bls.n	8011c9c <_free_r+0x74>
 8011c96:	230c      	movs	r3, #12
 8011c98:	602b      	str	r3, [r5, #0]
 8011c9a:	e7d6      	b.n	8011c4a <_free_r+0x22>
 8011c9c:	6820      	ldr	r0, [r4, #0]
 8011c9e:	1821      	adds	r1, r4, r0
 8011ca0:	428b      	cmp	r3, r1
 8011ca2:	bf04      	itt	eq
 8011ca4:	6819      	ldreq	r1, [r3, #0]
 8011ca6:	685b      	ldreq	r3, [r3, #4]
 8011ca8:	6063      	str	r3, [r4, #4]
 8011caa:	bf04      	itt	eq
 8011cac:	1809      	addeq	r1, r1, r0
 8011cae:	6021      	streq	r1, [r4, #0]
 8011cb0:	6054      	str	r4, [r2, #4]
 8011cb2:	e7ca      	b.n	8011c4a <_free_r+0x22>
 8011cb4:	bd38      	pop	{r3, r4, r5, pc}
 8011cb6:	bf00      	nop
 8011cb8:	2404143c 	.word	0x2404143c

08011cbc <sbrk_aligned>:
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	4e0f      	ldr	r6, [pc, #60]	@ (8011cfc <sbrk_aligned+0x40>)
 8011cc0:	460c      	mov	r4, r1
 8011cc2:	6831      	ldr	r1, [r6, #0]
 8011cc4:	4605      	mov	r5, r0
 8011cc6:	b911      	cbnz	r1, 8011cce <sbrk_aligned+0x12>
 8011cc8:	f000 fba4 	bl	8012414 <_sbrk_r>
 8011ccc:	6030      	str	r0, [r6, #0]
 8011cce:	4621      	mov	r1, r4
 8011cd0:	4628      	mov	r0, r5
 8011cd2:	f000 fb9f 	bl	8012414 <_sbrk_r>
 8011cd6:	1c43      	adds	r3, r0, #1
 8011cd8:	d103      	bne.n	8011ce2 <sbrk_aligned+0x26>
 8011cda:	f04f 34ff 	mov.w	r4, #4294967295
 8011cde:	4620      	mov	r0, r4
 8011ce0:	bd70      	pop	{r4, r5, r6, pc}
 8011ce2:	1cc4      	adds	r4, r0, #3
 8011ce4:	f024 0403 	bic.w	r4, r4, #3
 8011ce8:	42a0      	cmp	r0, r4
 8011cea:	d0f8      	beq.n	8011cde <sbrk_aligned+0x22>
 8011cec:	1a21      	subs	r1, r4, r0
 8011cee:	4628      	mov	r0, r5
 8011cf0:	f000 fb90 	bl	8012414 <_sbrk_r>
 8011cf4:	3001      	adds	r0, #1
 8011cf6:	d1f2      	bne.n	8011cde <sbrk_aligned+0x22>
 8011cf8:	e7ef      	b.n	8011cda <sbrk_aligned+0x1e>
 8011cfa:	bf00      	nop
 8011cfc:	24041438 	.word	0x24041438

08011d00 <_malloc_r>:
 8011d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d04:	1ccd      	adds	r5, r1, #3
 8011d06:	f025 0503 	bic.w	r5, r5, #3
 8011d0a:	3508      	adds	r5, #8
 8011d0c:	2d0c      	cmp	r5, #12
 8011d0e:	bf38      	it	cc
 8011d10:	250c      	movcc	r5, #12
 8011d12:	2d00      	cmp	r5, #0
 8011d14:	4606      	mov	r6, r0
 8011d16:	db01      	blt.n	8011d1c <_malloc_r+0x1c>
 8011d18:	42a9      	cmp	r1, r5
 8011d1a:	d904      	bls.n	8011d26 <_malloc_r+0x26>
 8011d1c:	230c      	movs	r3, #12
 8011d1e:	6033      	str	r3, [r6, #0]
 8011d20:	2000      	movs	r0, #0
 8011d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011dfc <_malloc_r+0xfc>
 8011d2a:	f000 f869 	bl	8011e00 <__malloc_lock>
 8011d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8011d32:	461c      	mov	r4, r3
 8011d34:	bb44      	cbnz	r4, 8011d88 <_malloc_r+0x88>
 8011d36:	4629      	mov	r1, r5
 8011d38:	4630      	mov	r0, r6
 8011d3a:	f7ff ffbf 	bl	8011cbc <sbrk_aligned>
 8011d3e:	1c43      	adds	r3, r0, #1
 8011d40:	4604      	mov	r4, r0
 8011d42:	d158      	bne.n	8011df6 <_malloc_r+0xf6>
 8011d44:	f8d8 4000 	ldr.w	r4, [r8]
 8011d48:	4627      	mov	r7, r4
 8011d4a:	2f00      	cmp	r7, #0
 8011d4c:	d143      	bne.n	8011dd6 <_malloc_r+0xd6>
 8011d4e:	2c00      	cmp	r4, #0
 8011d50:	d04b      	beq.n	8011dea <_malloc_r+0xea>
 8011d52:	6823      	ldr	r3, [r4, #0]
 8011d54:	4639      	mov	r1, r7
 8011d56:	4630      	mov	r0, r6
 8011d58:	eb04 0903 	add.w	r9, r4, r3
 8011d5c:	f000 fb5a 	bl	8012414 <_sbrk_r>
 8011d60:	4581      	cmp	r9, r0
 8011d62:	d142      	bne.n	8011dea <_malloc_r+0xea>
 8011d64:	6821      	ldr	r1, [r4, #0]
 8011d66:	1a6d      	subs	r5, r5, r1
 8011d68:	4629      	mov	r1, r5
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	f7ff ffa6 	bl	8011cbc <sbrk_aligned>
 8011d70:	3001      	adds	r0, #1
 8011d72:	d03a      	beq.n	8011dea <_malloc_r+0xea>
 8011d74:	6823      	ldr	r3, [r4, #0]
 8011d76:	442b      	add	r3, r5
 8011d78:	6023      	str	r3, [r4, #0]
 8011d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8011d7e:	685a      	ldr	r2, [r3, #4]
 8011d80:	bb62      	cbnz	r2, 8011ddc <_malloc_r+0xdc>
 8011d82:	f8c8 7000 	str.w	r7, [r8]
 8011d86:	e00f      	b.n	8011da8 <_malloc_r+0xa8>
 8011d88:	6822      	ldr	r2, [r4, #0]
 8011d8a:	1b52      	subs	r2, r2, r5
 8011d8c:	d420      	bmi.n	8011dd0 <_malloc_r+0xd0>
 8011d8e:	2a0b      	cmp	r2, #11
 8011d90:	d917      	bls.n	8011dc2 <_malloc_r+0xc2>
 8011d92:	1961      	adds	r1, r4, r5
 8011d94:	42a3      	cmp	r3, r4
 8011d96:	6025      	str	r5, [r4, #0]
 8011d98:	bf18      	it	ne
 8011d9a:	6059      	strne	r1, [r3, #4]
 8011d9c:	6863      	ldr	r3, [r4, #4]
 8011d9e:	bf08      	it	eq
 8011da0:	f8c8 1000 	streq.w	r1, [r8]
 8011da4:	5162      	str	r2, [r4, r5]
 8011da6:	604b      	str	r3, [r1, #4]
 8011da8:	4630      	mov	r0, r6
 8011daa:	f000 f82f 	bl	8011e0c <__malloc_unlock>
 8011dae:	f104 000b 	add.w	r0, r4, #11
 8011db2:	1d23      	adds	r3, r4, #4
 8011db4:	f020 0007 	bic.w	r0, r0, #7
 8011db8:	1ac2      	subs	r2, r0, r3
 8011dba:	bf1c      	itt	ne
 8011dbc:	1a1b      	subne	r3, r3, r0
 8011dbe:	50a3      	strne	r3, [r4, r2]
 8011dc0:	e7af      	b.n	8011d22 <_malloc_r+0x22>
 8011dc2:	6862      	ldr	r2, [r4, #4]
 8011dc4:	42a3      	cmp	r3, r4
 8011dc6:	bf0c      	ite	eq
 8011dc8:	f8c8 2000 	streq.w	r2, [r8]
 8011dcc:	605a      	strne	r2, [r3, #4]
 8011dce:	e7eb      	b.n	8011da8 <_malloc_r+0xa8>
 8011dd0:	4623      	mov	r3, r4
 8011dd2:	6864      	ldr	r4, [r4, #4]
 8011dd4:	e7ae      	b.n	8011d34 <_malloc_r+0x34>
 8011dd6:	463c      	mov	r4, r7
 8011dd8:	687f      	ldr	r7, [r7, #4]
 8011dda:	e7b6      	b.n	8011d4a <_malloc_r+0x4a>
 8011ddc:	461a      	mov	r2, r3
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	42a3      	cmp	r3, r4
 8011de2:	d1fb      	bne.n	8011ddc <_malloc_r+0xdc>
 8011de4:	2300      	movs	r3, #0
 8011de6:	6053      	str	r3, [r2, #4]
 8011de8:	e7de      	b.n	8011da8 <_malloc_r+0xa8>
 8011dea:	230c      	movs	r3, #12
 8011dec:	6033      	str	r3, [r6, #0]
 8011dee:	4630      	mov	r0, r6
 8011df0:	f000 f80c 	bl	8011e0c <__malloc_unlock>
 8011df4:	e794      	b.n	8011d20 <_malloc_r+0x20>
 8011df6:	6005      	str	r5, [r0, #0]
 8011df8:	e7d6      	b.n	8011da8 <_malloc_r+0xa8>
 8011dfa:	bf00      	nop
 8011dfc:	2404143c 	.word	0x2404143c

08011e00 <__malloc_lock>:
 8011e00:	4801      	ldr	r0, [pc, #4]	@ (8011e08 <__malloc_lock+0x8>)
 8011e02:	f7ff bf01 	b.w	8011c08 <__retarget_lock_acquire_recursive>
 8011e06:	bf00      	nop
 8011e08:	24041434 	.word	0x24041434

08011e0c <__malloc_unlock>:
 8011e0c:	4801      	ldr	r0, [pc, #4]	@ (8011e14 <__malloc_unlock+0x8>)
 8011e0e:	f7ff befc 	b.w	8011c0a <__retarget_lock_release_recursive>
 8011e12:	bf00      	nop
 8011e14:	24041434 	.word	0x24041434

08011e18 <__ssputs_r>:
 8011e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e1c:	688e      	ldr	r6, [r1, #8]
 8011e1e:	461f      	mov	r7, r3
 8011e20:	42be      	cmp	r6, r7
 8011e22:	680b      	ldr	r3, [r1, #0]
 8011e24:	4682      	mov	sl, r0
 8011e26:	460c      	mov	r4, r1
 8011e28:	4690      	mov	r8, r2
 8011e2a:	d82d      	bhi.n	8011e88 <__ssputs_r+0x70>
 8011e2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011e34:	d026      	beq.n	8011e84 <__ssputs_r+0x6c>
 8011e36:	6965      	ldr	r5, [r4, #20]
 8011e38:	6909      	ldr	r1, [r1, #16]
 8011e3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e3e:	eba3 0901 	sub.w	r9, r3, r1
 8011e42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e46:	1c7b      	adds	r3, r7, #1
 8011e48:	444b      	add	r3, r9
 8011e4a:	106d      	asrs	r5, r5, #1
 8011e4c:	429d      	cmp	r5, r3
 8011e4e:	bf38      	it	cc
 8011e50:	461d      	movcc	r5, r3
 8011e52:	0553      	lsls	r3, r2, #21
 8011e54:	d527      	bpl.n	8011ea6 <__ssputs_r+0x8e>
 8011e56:	4629      	mov	r1, r5
 8011e58:	f7ff ff52 	bl	8011d00 <_malloc_r>
 8011e5c:	4606      	mov	r6, r0
 8011e5e:	b360      	cbz	r0, 8011eba <__ssputs_r+0xa2>
 8011e60:	6921      	ldr	r1, [r4, #16]
 8011e62:	464a      	mov	r2, r9
 8011e64:	f7ff fed2 	bl	8011c0c <memcpy>
 8011e68:	89a3      	ldrh	r3, [r4, #12]
 8011e6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e72:	81a3      	strh	r3, [r4, #12]
 8011e74:	6126      	str	r6, [r4, #16]
 8011e76:	6165      	str	r5, [r4, #20]
 8011e78:	444e      	add	r6, r9
 8011e7a:	eba5 0509 	sub.w	r5, r5, r9
 8011e7e:	6026      	str	r6, [r4, #0]
 8011e80:	60a5      	str	r5, [r4, #8]
 8011e82:	463e      	mov	r6, r7
 8011e84:	42be      	cmp	r6, r7
 8011e86:	d900      	bls.n	8011e8a <__ssputs_r+0x72>
 8011e88:	463e      	mov	r6, r7
 8011e8a:	6820      	ldr	r0, [r4, #0]
 8011e8c:	4632      	mov	r2, r6
 8011e8e:	4641      	mov	r1, r8
 8011e90:	f000 faa6 	bl	80123e0 <memmove>
 8011e94:	68a3      	ldr	r3, [r4, #8]
 8011e96:	1b9b      	subs	r3, r3, r6
 8011e98:	60a3      	str	r3, [r4, #8]
 8011e9a:	6823      	ldr	r3, [r4, #0]
 8011e9c:	4433      	add	r3, r6
 8011e9e:	6023      	str	r3, [r4, #0]
 8011ea0:	2000      	movs	r0, #0
 8011ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ea6:	462a      	mov	r2, r5
 8011ea8:	f000 fac4 	bl	8012434 <_realloc_r>
 8011eac:	4606      	mov	r6, r0
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	d1e0      	bne.n	8011e74 <__ssputs_r+0x5c>
 8011eb2:	6921      	ldr	r1, [r4, #16]
 8011eb4:	4650      	mov	r0, sl
 8011eb6:	f7ff feb7 	bl	8011c28 <_free_r>
 8011eba:	230c      	movs	r3, #12
 8011ebc:	f8ca 3000 	str.w	r3, [sl]
 8011ec0:	89a3      	ldrh	r3, [r4, #12]
 8011ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ec6:	81a3      	strh	r3, [r4, #12]
 8011ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ecc:	e7e9      	b.n	8011ea2 <__ssputs_r+0x8a>
	...

08011ed0 <_svfiprintf_r>:
 8011ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed4:	4698      	mov	r8, r3
 8011ed6:	898b      	ldrh	r3, [r1, #12]
 8011ed8:	061b      	lsls	r3, r3, #24
 8011eda:	b09d      	sub	sp, #116	@ 0x74
 8011edc:	4607      	mov	r7, r0
 8011ede:	460d      	mov	r5, r1
 8011ee0:	4614      	mov	r4, r2
 8011ee2:	d510      	bpl.n	8011f06 <_svfiprintf_r+0x36>
 8011ee4:	690b      	ldr	r3, [r1, #16]
 8011ee6:	b973      	cbnz	r3, 8011f06 <_svfiprintf_r+0x36>
 8011ee8:	2140      	movs	r1, #64	@ 0x40
 8011eea:	f7ff ff09 	bl	8011d00 <_malloc_r>
 8011eee:	6028      	str	r0, [r5, #0]
 8011ef0:	6128      	str	r0, [r5, #16]
 8011ef2:	b930      	cbnz	r0, 8011f02 <_svfiprintf_r+0x32>
 8011ef4:	230c      	movs	r3, #12
 8011ef6:	603b      	str	r3, [r7, #0]
 8011ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8011efc:	b01d      	add	sp, #116	@ 0x74
 8011efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f02:	2340      	movs	r3, #64	@ 0x40
 8011f04:	616b      	str	r3, [r5, #20]
 8011f06:	2300      	movs	r3, #0
 8011f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f0a:	2320      	movs	r3, #32
 8011f0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f14:	2330      	movs	r3, #48	@ 0x30
 8011f16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80120b4 <_svfiprintf_r+0x1e4>
 8011f1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011f1e:	f04f 0901 	mov.w	r9, #1
 8011f22:	4623      	mov	r3, r4
 8011f24:	469a      	mov	sl, r3
 8011f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f2a:	b10a      	cbz	r2, 8011f30 <_svfiprintf_r+0x60>
 8011f2c:	2a25      	cmp	r2, #37	@ 0x25
 8011f2e:	d1f9      	bne.n	8011f24 <_svfiprintf_r+0x54>
 8011f30:	ebba 0b04 	subs.w	fp, sl, r4
 8011f34:	d00b      	beq.n	8011f4e <_svfiprintf_r+0x7e>
 8011f36:	465b      	mov	r3, fp
 8011f38:	4622      	mov	r2, r4
 8011f3a:	4629      	mov	r1, r5
 8011f3c:	4638      	mov	r0, r7
 8011f3e:	f7ff ff6b 	bl	8011e18 <__ssputs_r>
 8011f42:	3001      	adds	r0, #1
 8011f44:	f000 80a7 	beq.w	8012096 <_svfiprintf_r+0x1c6>
 8011f48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f4a:	445a      	add	r2, fp
 8011f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	f000 809f 	beq.w	8012096 <_svfiprintf_r+0x1c6>
 8011f58:	2300      	movs	r3, #0
 8011f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f62:	f10a 0a01 	add.w	sl, sl, #1
 8011f66:	9304      	str	r3, [sp, #16]
 8011f68:	9307      	str	r3, [sp, #28]
 8011f6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f70:	4654      	mov	r4, sl
 8011f72:	2205      	movs	r2, #5
 8011f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f78:	484e      	ldr	r0, [pc, #312]	@ (80120b4 <_svfiprintf_r+0x1e4>)
 8011f7a:	f7ee f9c1 	bl	8000300 <memchr>
 8011f7e:	9a04      	ldr	r2, [sp, #16]
 8011f80:	b9d8      	cbnz	r0, 8011fba <_svfiprintf_r+0xea>
 8011f82:	06d0      	lsls	r0, r2, #27
 8011f84:	bf44      	itt	mi
 8011f86:	2320      	movmi	r3, #32
 8011f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f8c:	0711      	lsls	r1, r2, #28
 8011f8e:	bf44      	itt	mi
 8011f90:	232b      	movmi	r3, #43	@ 0x2b
 8011f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f96:	f89a 3000 	ldrb.w	r3, [sl]
 8011f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f9c:	d015      	beq.n	8011fca <_svfiprintf_r+0xfa>
 8011f9e:	9a07      	ldr	r2, [sp, #28]
 8011fa0:	4654      	mov	r4, sl
 8011fa2:	2000      	movs	r0, #0
 8011fa4:	f04f 0c0a 	mov.w	ip, #10
 8011fa8:	4621      	mov	r1, r4
 8011faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fae:	3b30      	subs	r3, #48	@ 0x30
 8011fb0:	2b09      	cmp	r3, #9
 8011fb2:	d94b      	bls.n	801204c <_svfiprintf_r+0x17c>
 8011fb4:	b1b0      	cbz	r0, 8011fe4 <_svfiprintf_r+0x114>
 8011fb6:	9207      	str	r2, [sp, #28]
 8011fb8:	e014      	b.n	8011fe4 <_svfiprintf_r+0x114>
 8011fba:	eba0 0308 	sub.w	r3, r0, r8
 8011fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8011fc2:	4313      	orrs	r3, r2
 8011fc4:	9304      	str	r3, [sp, #16]
 8011fc6:	46a2      	mov	sl, r4
 8011fc8:	e7d2      	b.n	8011f70 <_svfiprintf_r+0xa0>
 8011fca:	9b03      	ldr	r3, [sp, #12]
 8011fcc:	1d19      	adds	r1, r3, #4
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	9103      	str	r1, [sp, #12]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	bfbb      	ittet	lt
 8011fd6:	425b      	neglt	r3, r3
 8011fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8011fdc:	9307      	strge	r3, [sp, #28]
 8011fde:	9307      	strlt	r3, [sp, #28]
 8011fe0:	bfb8      	it	lt
 8011fe2:	9204      	strlt	r2, [sp, #16]
 8011fe4:	7823      	ldrb	r3, [r4, #0]
 8011fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8011fe8:	d10a      	bne.n	8012000 <_svfiprintf_r+0x130>
 8011fea:	7863      	ldrb	r3, [r4, #1]
 8011fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fee:	d132      	bne.n	8012056 <_svfiprintf_r+0x186>
 8011ff0:	9b03      	ldr	r3, [sp, #12]
 8011ff2:	1d1a      	adds	r2, r3, #4
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	9203      	str	r2, [sp, #12]
 8011ff8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ffc:	3402      	adds	r4, #2
 8011ffe:	9305      	str	r3, [sp, #20]
 8012000:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80120c4 <_svfiprintf_r+0x1f4>
 8012004:	7821      	ldrb	r1, [r4, #0]
 8012006:	2203      	movs	r2, #3
 8012008:	4650      	mov	r0, sl
 801200a:	f7ee f979 	bl	8000300 <memchr>
 801200e:	b138      	cbz	r0, 8012020 <_svfiprintf_r+0x150>
 8012010:	9b04      	ldr	r3, [sp, #16]
 8012012:	eba0 000a 	sub.w	r0, r0, sl
 8012016:	2240      	movs	r2, #64	@ 0x40
 8012018:	4082      	lsls	r2, r0
 801201a:	4313      	orrs	r3, r2
 801201c:	3401      	adds	r4, #1
 801201e:	9304      	str	r3, [sp, #16]
 8012020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012024:	4824      	ldr	r0, [pc, #144]	@ (80120b8 <_svfiprintf_r+0x1e8>)
 8012026:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801202a:	2206      	movs	r2, #6
 801202c:	f7ee f968 	bl	8000300 <memchr>
 8012030:	2800      	cmp	r0, #0
 8012032:	d036      	beq.n	80120a2 <_svfiprintf_r+0x1d2>
 8012034:	4b21      	ldr	r3, [pc, #132]	@ (80120bc <_svfiprintf_r+0x1ec>)
 8012036:	bb1b      	cbnz	r3, 8012080 <_svfiprintf_r+0x1b0>
 8012038:	9b03      	ldr	r3, [sp, #12]
 801203a:	3307      	adds	r3, #7
 801203c:	f023 0307 	bic.w	r3, r3, #7
 8012040:	3308      	adds	r3, #8
 8012042:	9303      	str	r3, [sp, #12]
 8012044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012046:	4433      	add	r3, r6
 8012048:	9309      	str	r3, [sp, #36]	@ 0x24
 801204a:	e76a      	b.n	8011f22 <_svfiprintf_r+0x52>
 801204c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012050:	460c      	mov	r4, r1
 8012052:	2001      	movs	r0, #1
 8012054:	e7a8      	b.n	8011fa8 <_svfiprintf_r+0xd8>
 8012056:	2300      	movs	r3, #0
 8012058:	3401      	adds	r4, #1
 801205a:	9305      	str	r3, [sp, #20]
 801205c:	4619      	mov	r1, r3
 801205e:	f04f 0c0a 	mov.w	ip, #10
 8012062:	4620      	mov	r0, r4
 8012064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012068:	3a30      	subs	r2, #48	@ 0x30
 801206a:	2a09      	cmp	r2, #9
 801206c:	d903      	bls.n	8012076 <_svfiprintf_r+0x1a6>
 801206e:	2b00      	cmp	r3, #0
 8012070:	d0c6      	beq.n	8012000 <_svfiprintf_r+0x130>
 8012072:	9105      	str	r1, [sp, #20]
 8012074:	e7c4      	b.n	8012000 <_svfiprintf_r+0x130>
 8012076:	fb0c 2101 	mla	r1, ip, r1, r2
 801207a:	4604      	mov	r4, r0
 801207c:	2301      	movs	r3, #1
 801207e:	e7f0      	b.n	8012062 <_svfiprintf_r+0x192>
 8012080:	ab03      	add	r3, sp, #12
 8012082:	9300      	str	r3, [sp, #0]
 8012084:	462a      	mov	r2, r5
 8012086:	4b0e      	ldr	r3, [pc, #56]	@ (80120c0 <_svfiprintf_r+0x1f0>)
 8012088:	a904      	add	r1, sp, #16
 801208a:	4638      	mov	r0, r7
 801208c:	f3af 8000 	nop.w
 8012090:	1c42      	adds	r2, r0, #1
 8012092:	4606      	mov	r6, r0
 8012094:	d1d6      	bne.n	8012044 <_svfiprintf_r+0x174>
 8012096:	89ab      	ldrh	r3, [r5, #12]
 8012098:	065b      	lsls	r3, r3, #25
 801209a:	f53f af2d 	bmi.w	8011ef8 <_svfiprintf_r+0x28>
 801209e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120a0:	e72c      	b.n	8011efc <_svfiprintf_r+0x2c>
 80120a2:	ab03      	add	r3, sp, #12
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	462a      	mov	r2, r5
 80120a8:	4b05      	ldr	r3, [pc, #20]	@ (80120c0 <_svfiprintf_r+0x1f0>)
 80120aa:	a904      	add	r1, sp, #16
 80120ac:	4638      	mov	r0, r7
 80120ae:	f000 f879 	bl	80121a4 <_printf_i>
 80120b2:	e7ed      	b.n	8012090 <_svfiprintf_r+0x1c0>
 80120b4:	0801311c 	.word	0x0801311c
 80120b8:	08013126 	.word	0x08013126
 80120bc:	00000000 	.word	0x00000000
 80120c0:	08011e19 	.word	0x08011e19
 80120c4:	08013122 	.word	0x08013122

080120c8 <_printf_common>:
 80120c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120cc:	4616      	mov	r6, r2
 80120ce:	4698      	mov	r8, r3
 80120d0:	688a      	ldr	r2, [r1, #8]
 80120d2:	690b      	ldr	r3, [r1, #16]
 80120d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80120d8:	4293      	cmp	r3, r2
 80120da:	bfb8      	it	lt
 80120dc:	4613      	movlt	r3, r2
 80120de:	6033      	str	r3, [r6, #0]
 80120e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80120e4:	4607      	mov	r7, r0
 80120e6:	460c      	mov	r4, r1
 80120e8:	b10a      	cbz	r2, 80120ee <_printf_common+0x26>
 80120ea:	3301      	adds	r3, #1
 80120ec:	6033      	str	r3, [r6, #0]
 80120ee:	6823      	ldr	r3, [r4, #0]
 80120f0:	0699      	lsls	r1, r3, #26
 80120f2:	bf42      	ittt	mi
 80120f4:	6833      	ldrmi	r3, [r6, #0]
 80120f6:	3302      	addmi	r3, #2
 80120f8:	6033      	strmi	r3, [r6, #0]
 80120fa:	6825      	ldr	r5, [r4, #0]
 80120fc:	f015 0506 	ands.w	r5, r5, #6
 8012100:	d106      	bne.n	8012110 <_printf_common+0x48>
 8012102:	f104 0a19 	add.w	sl, r4, #25
 8012106:	68e3      	ldr	r3, [r4, #12]
 8012108:	6832      	ldr	r2, [r6, #0]
 801210a:	1a9b      	subs	r3, r3, r2
 801210c:	42ab      	cmp	r3, r5
 801210e:	dc26      	bgt.n	801215e <_printf_common+0x96>
 8012110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012114:	6822      	ldr	r2, [r4, #0]
 8012116:	3b00      	subs	r3, #0
 8012118:	bf18      	it	ne
 801211a:	2301      	movne	r3, #1
 801211c:	0692      	lsls	r2, r2, #26
 801211e:	d42b      	bmi.n	8012178 <_printf_common+0xb0>
 8012120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012124:	4641      	mov	r1, r8
 8012126:	4638      	mov	r0, r7
 8012128:	47c8      	blx	r9
 801212a:	3001      	adds	r0, #1
 801212c:	d01e      	beq.n	801216c <_printf_common+0xa4>
 801212e:	6823      	ldr	r3, [r4, #0]
 8012130:	6922      	ldr	r2, [r4, #16]
 8012132:	f003 0306 	and.w	r3, r3, #6
 8012136:	2b04      	cmp	r3, #4
 8012138:	bf02      	ittt	eq
 801213a:	68e5      	ldreq	r5, [r4, #12]
 801213c:	6833      	ldreq	r3, [r6, #0]
 801213e:	1aed      	subeq	r5, r5, r3
 8012140:	68a3      	ldr	r3, [r4, #8]
 8012142:	bf0c      	ite	eq
 8012144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012148:	2500      	movne	r5, #0
 801214a:	4293      	cmp	r3, r2
 801214c:	bfc4      	itt	gt
 801214e:	1a9b      	subgt	r3, r3, r2
 8012150:	18ed      	addgt	r5, r5, r3
 8012152:	2600      	movs	r6, #0
 8012154:	341a      	adds	r4, #26
 8012156:	42b5      	cmp	r5, r6
 8012158:	d11a      	bne.n	8012190 <_printf_common+0xc8>
 801215a:	2000      	movs	r0, #0
 801215c:	e008      	b.n	8012170 <_printf_common+0xa8>
 801215e:	2301      	movs	r3, #1
 8012160:	4652      	mov	r2, sl
 8012162:	4641      	mov	r1, r8
 8012164:	4638      	mov	r0, r7
 8012166:	47c8      	blx	r9
 8012168:	3001      	adds	r0, #1
 801216a:	d103      	bne.n	8012174 <_printf_common+0xac>
 801216c:	f04f 30ff 	mov.w	r0, #4294967295
 8012170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012174:	3501      	adds	r5, #1
 8012176:	e7c6      	b.n	8012106 <_printf_common+0x3e>
 8012178:	18e1      	adds	r1, r4, r3
 801217a:	1c5a      	adds	r2, r3, #1
 801217c:	2030      	movs	r0, #48	@ 0x30
 801217e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012182:	4422      	add	r2, r4
 8012184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801218c:	3302      	adds	r3, #2
 801218e:	e7c7      	b.n	8012120 <_printf_common+0x58>
 8012190:	2301      	movs	r3, #1
 8012192:	4622      	mov	r2, r4
 8012194:	4641      	mov	r1, r8
 8012196:	4638      	mov	r0, r7
 8012198:	47c8      	blx	r9
 801219a:	3001      	adds	r0, #1
 801219c:	d0e6      	beq.n	801216c <_printf_common+0xa4>
 801219e:	3601      	adds	r6, #1
 80121a0:	e7d9      	b.n	8012156 <_printf_common+0x8e>
	...

080121a4 <_printf_i>:
 80121a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80121a8:	7e0f      	ldrb	r7, [r1, #24]
 80121aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80121ac:	2f78      	cmp	r7, #120	@ 0x78
 80121ae:	4691      	mov	r9, r2
 80121b0:	4680      	mov	r8, r0
 80121b2:	460c      	mov	r4, r1
 80121b4:	469a      	mov	sl, r3
 80121b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80121ba:	d807      	bhi.n	80121cc <_printf_i+0x28>
 80121bc:	2f62      	cmp	r7, #98	@ 0x62
 80121be:	d80a      	bhi.n	80121d6 <_printf_i+0x32>
 80121c0:	2f00      	cmp	r7, #0
 80121c2:	f000 80d1 	beq.w	8012368 <_printf_i+0x1c4>
 80121c6:	2f58      	cmp	r7, #88	@ 0x58
 80121c8:	f000 80b8 	beq.w	801233c <_printf_i+0x198>
 80121cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80121d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80121d4:	e03a      	b.n	801224c <_printf_i+0xa8>
 80121d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80121da:	2b15      	cmp	r3, #21
 80121dc:	d8f6      	bhi.n	80121cc <_printf_i+0x28>
 80121de:	a101      	add	r1, pc, #4	@ (adr r1, 80121e4 <_printf_i+0x40>)
 80121e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121e4:	0801223d 	.word	0x0801223d
 80121e8:	08012251 	.word	0x08012251
 80121ec:	080121cd 	.word	0x080121cd
 80121f0:	080121cd 	.word	0x080121cd
 80121f4:	080121cd 	.word	0x080121cd
 80121f8:	080121cd 	.word	0x080121cd
 80121fc:	08012251 	.word	0x08012251
 8012200:	080121cd 	.word	0x080121cd
 8012204:	080121cd 	.word	0x080121cd
 8012208:	080121cd 	.word	0x080121cd
 801220c:	080121cd 	.word	0x080121cd
 8012210:	0801234f 	.word	0x0801234f
 8012214:	0801227b 	.word	0x0801227b
 8012218:	08012309 	.word	0x08012309
 801221c:	080121cd 	.word	0x080121cd
 8012220:	080121cd 	.word	0x080121cd
 8012224:	08012371 	.word	0x08012371
 8012228:	080121cd 	.word	0x080121cd
 801222c:	0801227b 	.word	0x0801227b
 8012230:	080121cd 	.word	0x080121cd
 8012234:	080121cd 	.word	0x080121cd
 8012238:	08012311 	.word	0x08012311
 801223c:	6833      	ldr	r3, [r6, #0]
 801223e:	1d1a      	adds	r2, r3, #4
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	6032      	str	r2, [r6, #0]
 8012244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801224c:	2301      	movs	r3, #1
 801224e:	e09c      	b.n	801238a <_printf_i+0x1e6>
 8012250:	6833      	ldr	r3, [r6, #0]
 8012252:	6820      	ldr	r0, [r4, #0]
 8012254:	1d19      	adds	r1, r3, #4
 8012256:	6031      	str	r1, [r6, #0]
 8012258:	0606      	lsls	r6, r0, #24
 801225a:	d501      	bpl.n	8012260 <_printf_i+0xbc>
 801225c:	681d      	ldr	r5, [r3, #0]
 801225e:	e003      	b.n	8012268 <_printf_i+0xc4>
 8012260:	0645      	lsls	r5, r0, #25
 8012262:	d5fb      	bpl.n	801225c <_printf_i+0xb8>
 8012264:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012268:	2d00      	cmp	r5, #0
 801226a:	da03      	bge.n	8012274 <_printf_i+0xd0>
 801226c:	232d      	movs	r3, #45	@ 0x2d
 801226e:	426d      	negs	r5, r5
 8012270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012274:	4858      	ldr	r0, [pc, #352]	@ (80123d8 <_printf_i+0x234>)
 8012276:	230a      	movs	r3, #10
 8012278:	e011      	b.n	801229e <_printf_i+0xfa>
 801227a:	6821      	ldr	r1, [r4, #0]
 801227c:	6833      	ldr	r3, [r6, #0]
 801227e:	0608      	lsls	r0, r1, #24
 8012280:	f853 5b04 	ldr.w	r5, [r3], #4
 8012284:	d402      	bmi.n	801228c <_printf_i+0xe8>
 8012286:	0649      	lsls	r1, r1, #25
 8012288:	bf48      	it	mi
 801228a:	b2ad      	uxthmi	r5, r5
 801228c:	2f6f      	cmp	r7, #111	@ 0x6f
 801228e:	4852      	ldr	r0, [pc, #328]	@ (80123d8 <_printf_i+0x234>)
 8012290:	6033      	str	r3, [r6, #0]
 8012292:	bf14      	ite	ne
 8012294:	230a      	movne	r3, #10
 8012296:	2308      	moveq	r3, #8
 8012298:	2100      	movs	r1, #0
 801229a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801229e:	6866      	ldr	r6, [r4, #4]
 80122a0:	60a6      	str	r6, [r4, #8]
 80122a2:	2e00      	cmp	r6, #0
 80122a4:	db05      	blt.n	80122b2 <_printf_i+0x10e>
 80122a6:	6821      	ldr	r1, [r4, #0]
 80122a8:	432e      	orrs	r6, r5
 80122aa:	f021 0104 	bic.w	r1, r1, #4
 80122ae:	6021      	str	r1, [r4, #0]
 80122b0:	d04b      	beq.n	801234a <_printf_i+0x1a6>
 80122b2:	4616      	mov	r6, r2
 80122b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80122b8:	fb03 5711 	mls	r7, r3, r1, r5
 80122bc:	5dc7      	ldrb	r7, [r0, r7]
 80122be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80122c2:	462f      	mov	r7, r5
 80122c4:	42bb      	cmp	r3, r7
 80122c6:	460d      	mov	r5, r1
 80122c8:	d9f4      	bls.n	80122b4 <_printf_i+0x110>
 80122ca:	2b08      	cmp	r3, #8
 80122cc:	d10b      	bne.n	80122e6 <_printf_i+0x142>
 80122ce:	6823      	ldr	r3, [r4, #0]
 80122d0:	07df      	lsls	r7, r3, #31
 80122d2:	d508      	bpl.n	80122e6 <_printf_i+0x142>
 80122d4:	6923      	ldr	r3, [r4, #16]
 80122d6:	6861      	ldr	r1, [r4, #4]
 80122d8:	4299      	cmp	r1, r3
 80122da:	bfde      	ittt	le
 80122dc:	2330      	movle	r3, #48	@ 0x30
 80122de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80122e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80122e6:	1b92      	subs	r2, r2, r6
 80122e8:	6122      	str	r2, [r4, #16]
 80122ea:	f8cd a000 	str.w	sl, [sp]
 80122ee:	464b      	mov	r3, r9
 80122f0:	aa03      	add	r2, sp, #12
 80122f2:	4621      	mov	r1, r4
 80122f4:	4640      	mov	r0, r8
 80122f6:	f7ff fee7 	bl	80120c8 <_printf_common>
 80122fa:	3001      	adds	r0, #1
 80122fc:	d14a      	bne.n	8012394 <_printf_i+0x1f0>
 80122fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012302:	b004      	add	sp, #16
 8012304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012308:	6823      	ldr	r3, [r4, #0]
 801230a:	f043 0320 	orr.w	r3, r3, #32
 801230e:	6023      	str	r3, [r4, #0]
 8012310:	4832      	ldr	r0, [pc, #200]	@ (80123dc <_printf_i+0x238>)
 8012312:	2778      	movs	r7, #120	@ 0x78
 8012314:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012318:	6823      	ldr	r3, [r4, #0]
 801231a:	6831      	ldr	r1, [r6, #0]
 801231c:	061f      	lsls	r7, r3, #24
 801231e:	f851 5b04 	ldr.w	r5, [r1], #4
 8012322:	d402      	bmi.n	801232a <_printf_i+0x186>
 8012324:	065f      	lsls	r7, r3, #25
 8012326:	bf48      	it	mi
 8012328:	b2ad      	uxthmi	r5, r5
 801232a:	6031      	str	r1, [r6, #0]
 801232c:	07d9      	lsls	r1, r3, #31
 801232e:	bf44      	itt	mi
 8012330:	f043 0320 	orrmi.w	r3, r3, #32
 8012334:	6023      	strmi	r3, [r4, #0]
 8012336:	b11d      	cbz	r5, 8012340 <_printf_i+0x19c>
 8012338:	2310      	movs	r3, #16
 801233a:	e7ad      	b.n	8012298 <_printf_i+0xf4>
 801233c:	4826      	ldr	r0, [pc, #152]	@ (80123d8 <_printf_i+0x234>)
 801233e:	e7e9      	b.n	8012314 <_printf_i+0x170>
 8012340:	6823      	ldr	r3, [r4, #0]
 8012342:	f023 0320 	bic.w	r3, r3, #32
 8012346:	6023      	str	r3, [r4, #0]
 8012348:	e7f6      	b.n	8012338 <_printf_i+0x194>
 801234a:	4616      	mov	r6, r2
 801234c:	e7bd      	b.n	80122ca <_printf_i+0x126>
 801234e:	6833      	ldr	r3, [r6, #0]
 8012350:	6825      	ldr	r5, [r4, #0]
 8012352:	6961      	ldr	r1, [r4, #20]
 8012354:	1d18      	adds	r0, r3, #4
 8012356:	6030      	str	r0, [r6, #0]
 8012358:	062e      	lsls	r6, r5, #24
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	d501      	bpl.n	8012362 <_printf_i+0x1be>
 801235e:	6019      	str	r1, [r3, #0]
 8012360:	e002      	b.n	8012368 <_printf_i+0x1c4>
 8012362:	0668      	lsls	r0, r5, #25
 8012364:	d5fb      	bpl.n	801235e <_printf_i+0x1ba>
 8012366:	8019      	strh	r1, [r3, #0]
 8012368:	2300      	movs	r3, #0
 801236a:	6123      	str	r3, [r4, #16]
 801236c:	4616      	mov	r6, r2
 801236e:	e7bc      	b.n	80122ea <_printf_i+0x146>
 8012370:	6833      	ldr	r3, [r6, #0]
 8012372:	1d1a      	adds	r2, r3, #4
 8012374:	6032      	str	r2, [r6, #0]
 8012376:	681e      	ldr	r6, [r3, #0]
 8012378:	6862      	ldr	r2, [r4, #4]
 801237a:	2100      	movs	r1, #0
 801237c:	4630      	mov	r0, r6
 801237e:	f7ed ffbf 	bl	8000300 <memchr>
 8012382:	b108      	cbz	r0, 8012388 <_printf_i+0x1e4>
 8012384:	1b80      	subs	r0, r0, r6
 8012386:	6060      	str	r0, [r4, #4]
 8012388:	6863      	ldr	r3, [r4, #4]
 801238a:	6123      	str	r3, [r4, #16]
 801238c:	2300      	movs	r3, #0
 801238e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012392:	e7aa      	b.n	80122ea <_printf_i+0x146>
 8012394:	6923      	ldr	r3, [r4, #16]
 8012396:	4632      	mov	r2, r6
 8012398:	4649      	mov	r1, r9
 801239a:	4640      	mov	r0, r8
 801239c:	47d0      	blx	sl
 801239e:	3001      	adds	r0, #1
 80123a0:	d0ad      	beq.n	80122fe <_printf_i+0x15a>
 80123a2:	6823      	ldr	r3, [r4, #0]
 80123a4:	079b      	lsls	r3, r3, #30
 80123a6:	d413      	bmi.n	80123d0 <_printf_i+0x22c>
 80123a8:	68e0      	ldr	r0, [r4, #12]
 80123aa:	9b03      	ldr	r3, [sp, #12]
 80123ac:	4298      	cmp	r0, r3
 80123ae:	bfb8      	it	lt
 80123b0:	4618      	movlt	r0, r3
 80123b2:	e7a6      	b.n	8012302 <_printf_i+0x15e>
 80123b4:	2301      	movs	r3, #1
 80123b6:	4632      	mov	r2, r6
 80123b8:	4649      	mov	r1, r9
 80123ba:	4640      	mov	r0, r8
 80123bc:	47d0      	blx	sl
 80123be:	3001      	adds	r0, #1
 80123c0:	d09d      	beq.n	80122fe <_printf_i+0x15a>
 80123c2:	3501      	adds	r5, #1
 80123c4:	68e3      	ldr	r3, [r4, #12]
 80123c6:	9903      	ldr	r1, [sp, #12]
 80123c8:	1a5b      	subs	r3, r3, r1
 80123ca:	42ab      	cmp	r3, r5
 80123cc:	dcf2      	bgt.n	80123b4 <_printf_i+0x210>
 80123ce:	e7eb      	b.n	80123a8 <_printf_i+0x204>
 80123d0:	2500      	movs	r5, #0
 80123d2:	f104 0619 	add.w	r6, r4, #25
 80123d6:	e7f5      	b.n	80123c4 <_printf_i+0x220>
 80123d8:	0801312d 	.word	0x0801312d
 80123dc:	0801313e 	.word	0x0801313e

080123e0 <memmove>:
 80123e0:	4288      	cmp	r0, r1
 80123e2:	b510      	push	{r4, lr}
 80123e4:	eb01 0402 	add.w	r4, r1, r2
 80123e8:	d902      	bls.n	80123f0 <memmove+0x10>
 80123ea:	4284      	cmp	r4, r0
 80123ec:	4623      	mov	r3, r4
 80123ee:	d807      	bhi.n	8012400 <memmove+0x20>
 80123f0:	1e43      	subs	r3, r0, #1
 80123f2:	42a1      	cmp	r1, r4
 80123f4:	d008      	beq.n	8012408 <memmove+0x28>
 80123f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123fe:	e7f8      	b.n	80123f2 <memmove+0x12>
 8012400:	4402      	add	r2, r0
 8012402:	4601      	mov	r1, r0
 8012404:	428a      	cmp	r2, r1
 8012406:	d100      	bne.n	801240a <memmove+0x2a>
 8012408:	bd10      	pop	{r4, pc}
 801240a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801240e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012412:	e7f7      	b.n	8012404 <memmove+0x24>

08012414 <_sbrk_r>:
 8012414:	b538      	push	{r3, r4, r5, lr}
 8012416:	4d06      	ldr	r5, [pc, #24]	@ (8012430 <_sbrk_r+0x1c>)
 8012418:	2300      	movs	r3, #0
 801241a:	4604      	mov	r4, r0
 801241c:	4608      	mov	r0, r1
 801241e:	602b      	str	r3, [r5, #0]
 8012420:	f7fa ff96 	bl	800d350 <_sbrk>
 8012424:	1c43      	adds	r3, r0, #1
 8012426:	d102      	bne.n	801242e <_sbrk_r+0x1a>
 8012428:	682b      	ldr	r3, [r5, #0]
 801242a:	b103      	cbz	r3, 801242e <_sbrk_r+0x1a>
 801242c:	6023      	str	r3, [r4, #0]
 801242e:	bd38      	pop	{r3, r4, r5, pc}
 8012430:	24041430 	.word	0x24041430

08012434 <_realloc_r>:
 8012434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012438:	4607      	mov	r7, r0
 801243a:	4614      	mov	r4, r2
 801243c:	460d      	mov	r5, r1
 801243e:	b921      	cbnz	r1, 801244a <_realloc_r+0x16>
 8012440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012444:	4611      	mov	r1, r2
 8012446:	f7ff bc5b 	b.w	8011d00 <_malloc_r>
 801244a:	b92a      	cbnz	r2, 8012458 <_realloc_r+0x24>
 801244c:	f7ff fbec 	bl	8011c28 <_free_r>
 8012450:	4625      	mov	r5, r4
 8012452:	4628      	mov	r0, r5
 8012454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012458:	f000 f81a 	bl	8012490 <_malloc_usable_size_r>
 801245c:	4284      	cmp	r4, r0
 801245e:	4606      	mov	r6, r0
 8012460:	d802      	bhi.n	8012468 <_realloc_r+0x34>
 8012462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012466:	d8f4      	bhi.n	8012452 <_realloc_r+0x1e>
 8012468:	4621      	mov	r1, r4
 801246a:	4638      	mov	r0, r7
 801246c:	f7ff fc48 	bl	8011d00 <_malloc_r>
 8012470:	4680      	mov	r8, r0
 8012472:	b908      	cbnz	r0, 8012478 <_realloc_r+0x44>
 8012474:	4645      	mov	r5, r8
 8012476:	e7ec      	b.n	8012452 <_realloc_r+0x1e>
 8012478:	42b4      	cmp	r4, r6
 801247a:	4622      	mov	r2, r4
 801247c:	4629      	mov	r1, r5
 801247e:	bf28      	it	cs
 8012480:	4632      	movcs	r2, r6
 8012482:	f7ff fbc3 	bl	8011c0c <memcpy>
 8012486:	4629      	mov	r1, r5
 8012488:	4638      	mov	r0, r7
 801248a:	f7ff fbcd 	bl	8011c28 <_free_r>
 801248e:	e7f1      	b.n	8012474 <_realloc_r+0x40>

08012490 <_malloc_usable_size_r>:
 8012490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012494:	1f18      	subs	r0, r3, #4
 8012496:	2b00      	cmp	r3, #0
 8012498:	bfbc      	itt	lt
 801249a:	580b      	ldrlt	r3, [r1, r0]
 801249c:	18c0      	addlt	r0, r0, r3
 801249e:	4770      	bx	lr

080124a0 <sin>:
 80124a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124a2:	eeb0 7b40 	vmov.f64	d7, d0
 80124a6:	ee17 3a90 	vmov	r3, s15
 80124aa:	4a21      	ldr	r2, [pc, #132]	@ (8012530 <sin+0x90>)
 80124ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80124b0:	4293      	cmp	r3, r2
 80124b2:	d807      	bhi.n	80124c4 <sin+0x24>
 80124b4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8012528 <sin+0x88>
 80124b8:	2000      	movs	r0, #0
 80124ba:	b005      	add	sp, #20
 80124bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80124c0:	f000 b8a2 	b.w	8012608 <__kernel_sin>
 80124c4:	4a1b      	ldr	r2, [pc, #108]	@ (8012534 <sin+0x94>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d904      	bls.n	80124d4 <sin+0x34>
 80124ca:	ee30 0b40 	vsub.f64	d0, d0, d0
 80124ce:	b005      	add	sp, #20
 80124d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80124d4:	4668      	mov	r0, sp
 80124d6:	f000 f8ef 	bl	80126b8 <__ieee754_rem_pio2>
 80124da:	f000 0003 	and.w	r0, r0, #3
 80124de:	2801      	cmp	r0, #1
 80124e0:	d00a      	beq.n	80124f8 <sin+0x58>
 80124e2:	2802      	cmp	r0, #2
 80124e4:	d00f      	beq.n	8012506 <sin+0x66>
 80124e6:	b9c0      	cbnz	r0, 801251a <sin+0x7a>
 80124e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124ec:	ed9d 0b00 	vldr	d0, [sp]
 80124f0:	2001      	movs	r0, #1
 80124f2:	f000 f889 	bl	8012608 <__kernel_sin>
 80124f6:	e7ea      	b.n	80124ce <sin+0x2e>
 80124f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124fc:	ed9d 0b00 	vldr	d0, [sp]
 8012500:	f000 f81a 	bl	8012538 <__kernel_cos>
 8012504:	e7e3      	b.n	80124ce <sin+0x2e>
 8012506:	ed9d 1b02 	vldr	d1, [sp, #8]
 801250a:	ed9d 0b00 	vldr	d0, [sp]
 801250e:	2001      	movs	r0, #1
 8012510:	f000 f87a 	bl	8012608 <__kernel_sin>
 8012514:	eeb1 0b40 	vneg.f64	d0, d0
 8012518:	e7d9      	b.n	80124ce <sin+0x2e>
 801251a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801251e:	ed9d 0b00 	vldr	d0, [sp]
 8012522:	f000 f809 	bl	8012538 <__kernel_cos>
 8012526:	e7f5      	b.n	8012514 <sin+0x74>
	...
 8012530:	3fe921fb 	.word	0x3fe921fb
 8012534:	7fefffff 	.word	0x7fefffff

08012538 <__kernel_cos>:
 8012538:	eeb0 5b40 	vmov.f64	d5, d0
 801253c:	ee15 1a90 	vmov	r1, s11
 8012540:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8012548:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801254c:	d204      	bcs.n	8012558 <__kernel_cos+0x20>
 801254e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8012552:	ee17 3a90 	vmov	r3, s15
 8012556:	b343      	cbz	r3, 80125aa <__kernel_cos+0x72>
 8012558:	ee25 6b05 	vmul.f64	d6, d5, d5
 801255c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8012560:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 80125d0 <__kernel_cos+0x98>
 8012564:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80125d8 <__kernel_cos+0xa0>
 8012568:	eea6 4b07 	vfma.f64	d4, d6, d7
 801256c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80125e0 <__kernel_cos+0xa8>
 8012570:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012574:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80125e8 <__kernel_cos+0xb0>
 8012578:	eea7 4b06 	vfma.f64	d4, d7, d6
 801257c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80125f0 <__kernel_cos+0xb8>
 8012580:	4b1f      	ldr	r3, [pc, #124]	@ (8012600 <__kernel_cos+0xc8>)
 8012582:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012586:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80125f8 <__kernel_cos+0xc0>
 801258a:	4299      	cmp	r1, r3
 801258c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012590:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8012594:	ee24 4b06 	vmul.f64	d4, d4, d6
 8012598:	ee26 7b07 	vmul.f64	d7, d6, d7
 801259c:	eea6 1b04 	vfma.f64	d1, d6, d4
 80125a0:	d804      	bhi.n	80125ac <__kernel_cos+0x74>
 80125a2:	ee37 7b41 	vsub.f64	d7, d7, d1
 80125a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80125aa:	4770      	bx	lr
 80125ac:	4b15      	ldr	r3, [pc, #84]	@ (8012604 <__kernel_cos+0xcc>)
 80125ae:	4299      	cmp	r1, r3
 80125b0:	d809      	bhi.n	80125c6 <__kernel_cos+0x8e>
 80125b2:	2200      	movs	r2, #0
 80125b4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 80125b8:	ec43 2b16 	vmov	d6, r2, r3
 80125bc:	ee30 0b46 	vsub.f64	d0, d0, d6
 80125c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80125c4:	e7ed      	b.n	80125a2 <__kernel_cos+0x6a>
 80125c6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 80125ca:	e7f7      	b.n	80125bc <__kernel_cos+0x84>
 80125cc:	f3af 8000 	nop.w
 80125d0:	be8838d4 	.word	0xbe8838d4
 80125d4:	bda8fae9 	.word	0xbda8fae9
 80125d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80125dc:	3e21ee9e 	.word	0x3e21ee9e
 80125e0:	809c52ad 	.word	0x809c52ad
 80125e4:	be927e4f 	.word	0xbe927e4f
 80125e8:	19cb1590 	.word	0x19cb1590
 80125ec:	3efa01a0 	.word	0x3efa01a0
 80125f0:	16c15177 	.word	0x16c15177
 80125f4:	bf56c16c 	.word	0xbf56c16c
 80125f8:	5555554c 	.word	0x5555554c
 80125fc:	3fa55555 	.word	0x3fa55555
 8012600:	3fd33332 	.word	0x3fd33332
 8012604:	3fe90000 	.word	0x3fe90000

08012608 <__kernel_sin>:
 8012608:	ee10 3a90 	vmov	r3, s1
 801260c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012610:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012614:	d204      	bcs.n	8012620 <__kernel_sin+0x18>
 8012616:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801261a:	ee17 3a90 	vmov	r3, s15
 801261e:	b35b      	cbz	r3, 8012678 <__kernel_sin+0x70>
 8012620:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012624:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012628:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8012680 <__kernel_sin+0x78>
 801262c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8012688 <__kernel_sin+0x80>
 8012630:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012634:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012690 <__kernel_sin+0x88>
 8012638:	eea4 7b06 	vfma.f64	d7, d4, d6
 801263c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8012698 <__kernel_sin+0x90>
 8012640:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012644:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80126a0 <__kernel_sin+0x98>
 8012648:	eea4 7b06 	vfma.f64	d7, d4, d6
 801264c:	b930      	cbnz	r0, 801265c <__kernel_sin+0x54>
 801264e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80126a8 <__kernel_sin+0xa0>
 8012652:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012656:	eea4 0b05 	vfma.f64	d0, d4, d5
 801265a:	4770      	bx	lr
 801265c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012660:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8012664:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012668:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801266c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80126b0 <__kernel_sin+0xa8>
 8012670:	eea5 1b07 	vfma.f64	d1, d5, d7
 8012674:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012678:	4770      	bx	lr
 801267a:	bf00      	nop
 801267c:	f3af 8000 	nop.w
 8012680:	5acfd57c 	.word	0x5acfd57c
 8012684:	3de5d93a 	.word	0x3de5d93a
 8012688:	8a2b9ceb 	.word	0x8a2b9ceb
 801268c:	be5ae5e6 	.word	0xbe5ae5e6
 8012690:	57b1fe7d 	.word	0x57b1fe7d
 8012694:	3ec71de3 	.word	0x3ec71de3
 8012698:	19c161d5 	.word	0x19c161d5
 801269c:	bf2a01a0 	.word	0xbf2a01a0
 80126a0:	1110f8a6 	.word	0x1110f8a6
 80126a4:	3f811111 	.word	0x3f811111
 80126a8:	55555549 	.word	0x55555549
 80126ac:	bfc55555 	.word	0xbfc55555
 80126b0:	55555549 	.word	0x55555549
 80126b4:	3fc55555 	.word	0x3fc55555

080126b8 <__ieee754_rem_pio2>:
 80126b8:	b570      	push	{r4, r5, r6, lr}
 80126ba:	eeb0 7b40 	vmov.f64	d7, d0
 80126be:	ee17 5a90 	vmov	r5, s15
 80126c2:	4b99      	ldr	r3, [pc, #612]	@ (8012928 <__ieee754_rem_pio2+0x270>)
 80126c4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80126c8:	429e      	cmp	r6, r3
 80126ca:	b088      	sub	sp, #32
 80126cc:	4604      	mov	r4, r0
 80126ce:	d807      	bhi.n	80126e0 <__ieee754_rem_pio2+0x28>
 80126d0:	2200      	movs	r2, #0
 80126d2:	2300      	movs	r3, #0
 80126d4:	ed84 0b00 	vstr	d0, [r4]
 80126d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80126dc:	2000      	movs	r0, #0
 80126de:	e01b      	b.n	8012718 <__ieee754_rem_pio2+0x60>
 80126e0:	4b92      	ldr	r3, [pc, #584]	@ (801292c <__ieee754_rem_pio2+0x274>)
 80126e2:	429e      	cmp	r6, r3
 80126e4:	d83b      	bhi.n	801275e <__ieee754_rem_pio2+0xa6>
 80126e6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 80126ea:	2d00      	cmp	r5, #0
 80126ec:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 80128e8 <__ieee754_rem_pio2+0x230>
 80126f0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 80126f4:	dd19      	ble.n	801272a <__ieee754_rem_pio2+0x72>
 80126f6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80126fa:	429e      	cmp	r6, r3
 80126fc:	d00e      	beq.n	801271c <__ieee754_rem_pio2+0x64>
 80126fe:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 80128f0 <__ieee754_rem_pio2+0x238>
 8012702:	ee37 6b45 	vsub.f64	d6, d7, d5
 8012706:	ee37 7b46 	vsub.f64	d7, d7, d6
 801270a:	ed84 6b00 	vstr	d6, [r4]
 801270e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012712:	ed84 7b02 	vstr	d7, [r4, #8]
 8012716:	2001      	movs	r0, #1
 8012718:	b008      	add	sp, #32
 801271a:	bd70      	pop	{r4, r5, r6, pc}
 801271c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 80128f8 <__ieee754_rem_pio2+0x240>
 8012720:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8012900 <__ieee754_rem_pio2+0x248>
 8012724:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012728:	e7eb      	b.n	8012702 <__ieee754_rem_pio2+0x4a>
 801272a:	429e      	cmp	r6, r3
 801272c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012730:	d00e      	beq.n	8012750 <__ieee754_rem_pio2+0x98>
 8012732:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 80128f0 <__ieee754_rem_pio2+0x238>
 8012736:	ee37 6b05 	vadd.f64	d6, d7, d5
 801273a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801273e:	ed84 6b00 	vstr	d6, [r4]
 8012742:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012746:	f04f 30ff 	mov.w	r0, #4294967295
 801274a:	ed84 7b02 	vstr	d7, [r4, #8]
 801274e:	e7e3      	b.n	8012718 <__ieee754_rem_pio2+0x60>
 8012750:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 80128f8 <__ieee754_rem_pio2+0x240>
 8012754:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8012900 <__ieee754_rem_pio2+0x248>
 8012758:	ee37 7b06 	vadd.f64	d7, d7, d6
 801275c:	e7eb      	b.n	8012736 <__ieee754_rem_pio2+0x7e>
 801275e:	4b74      	ldr	r3, [pc, #464]	@ (8012930 <__ieee754_rem_pio2+0x278>)
 8012760:	429e      	cmp	r6, r3
 8012762:	d870      	bhi.n	8012846 <__ieee754_rem_pio2+0x18e>
 8012764:	f000 f8ec 	bl	8012940 <fabs>
 8012768:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801276c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012908 <__ieee754_rem_pio2+0x250>
 8012770:	eea0 7b06 	vfma.f64	d7, d0, d6
 8012774:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012778:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801277c:	ee17 0a90 	vmov	r0, s15
 8012780:	eeb1 4b45 	vneg.f64	d4, d5
 8012784:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80128e8 <__ieee754_rem_pio2+0x230>
 8012788:	eea5 0b47 	vfms.f64	d0, d5, d7
 801278c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80128f0 <__ieee754_rem_pio2+0x238>
 8012790:	281f      	cmp	r0, #31
 8012792:	ee25 7b07 	vmul.f64	d7, d5, d7
 8012796:	ee30 6b47 	vsub.f64	d6, d0, d7
 801279a:	dc05      	bgt.n	80127a8 <__ieee754_rem_pio2+0xf0>
 801279c:	4b65      	ldr	r3, [pc, #404]	@ (8012934 <__ieee754_rem_pio2+0x27c>)
 801279e:	1e42      	subs	r2, r0, #1
 80127a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127a4:	42b3      	cmp	r3, r6
 80127a6:	d109      	bne.n	80127bc <__ieee754_rem_pio2+0x104>
 80127a8:	ee16 3a90 	vmov	r3, s13
 80127ac:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80127b0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80127b4:	2b10      	cmp	r3, #16
 80127b6:	ea4f 5226 	mov.w	r2, r6, asr #20
 80127ba:	dc02      	bgt.n	80127c2 <__ieee754_rem_pio2+0x10a>
 80127bc:	ed84 6b00 	vstr	d6, [r4]
 80127c0:	e01a      	b.n	80127f8 <__ieee754_rem_pio2+0x140>
 80127c2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 80128f8 <__ieee754_rem_pio2+0x240>
 80127c6:	eeb0 6b40 	vmov.f64	d6, d0
 80127ca:	eea4 6b03 	vfma.f64	d6, d4, d3
 80127ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 80127d2:	eea4 7b03 	vfma.f64	d7, d4, d3
 80127d6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8012900 <__ieee754_rem_pio2+0x248>
 80127da:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80127de:	ee36 3b47 	vsub.f64	d3, d6, d7
 80127e2:	ee13 3a90 	vmov	r3, s7
 80127e6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	2b31      	cmp	r3, #49	@ 0x31
 80127ee:	dc17      	bgt.n	8012820 <__ieee754_rem_pio2+0x168>
 80127f0:	eeb0 0b46 	vmov.f64	d0, d6
 80127f4:	ed84 3b00 	vstr	d3, [r4]
 80127f8:	ed94 6b00 	vldr	d6, [r4]
 80127fc:	2d00      	cmp	r5, #0
 80127fe:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012802:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012806:	ed84 0b02 	vstr	d0, [r4, #8]
 801280a:	da85      	bge.n	8012718 <__ieee754_rem_pio2+0x60>
 801280c:	eeb1 6b46 	vneg.f64	d6, d6
 8012810:	eeb1 0b40 	vneg.f64	d0, d0
 8012814:	ed84 6b00 	vstr	d6, [r4]
 8012818:	ed84 0b02 	vstr	d0, [r4, #8]
 801281c:	4240      	negs	r0, r0
 801281e:	e77b      	b.n	8012718 <__ieee754_rem_pio2+0x60>
 8012820:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8012910 <__ieee754_rem_pio2+0x258>
 8012824:	eeb0 0b46 	vmov.f64	d0, d6
 8012828:	eea4 0b07 	vfma.f64	d0, d4, d7
 801282c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8012830:	eea4 6b07 	vfma.f64	d6, d4, d7
 8012834:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8012918 <__ieee754_rem_pio2+0x260>
 8012838:	eeb0 7b46 	vmov.f64	d7, d6
 801283c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8012840:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012844:	e7ba      	b.n	80127bc <__ieee754_rem_pio2+0x104>
 8012846:	4b3c      	ldr	r3, [pc, #240]	@ (8012938 <__ieee754_rem_pio2+0x280>)
 8012848:	429e      	cmp	r6, r3
 801284a:	d906      	bls.n	801285a <__ieee754_rem_pio2+0x1a2>
 801284c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8012850:	ed80 7b02 	vstr	d7, [r0, #8]
 8012854:	ed80 7b00 	vstr	d7, [r0]
 8012858:	e740      	b.n	80126dc <__ieee754_rem_pio2+0x24>
 801285a:	ee10 3a10 	vmov	r3, s0
 801285e:	1532      	asrs	r2, r6, #20
 8012860:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8012864:	4618      	mov	r0, r3
 8012866:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801286a:	ec41 0b17 	vmov	d7, r0, r1
 801286e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012872:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8012920 <__ieee754_rem_pio2+0x268>
 8012876:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801287a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801287e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012882:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012886:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801288a:	a808      	add	r0, sp, #32
 801288c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012890:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012894:	ed8d 6b04 	vstr	d6, [sp, #16]
 8012898:	ee27 7b05 	vmul.f64	d7, d7, d5
 801289c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80128a0:	2103      	movs	r1, #3
 80128a2:	ed30 7b02 	vldmdb	r0!, {d7}
 80128a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80128aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ae:	460b      	mov	r3, r1
 80128b0:	f101 31ff 	add.w	r1, r1, #4294967295
 80128b4:	d0f5      	beq.n	80128a2 <__ieee754_rem_pio2+0x1ea>
 80128b6:	4921      	ldr	r1, [pc, #132]	@ (801293c <__ieee754_rem_pio2+0x284>)
 80128b8:	9101      	str	r1, [sp, #4]
 80128ba:	2102      	movs	r1, #2
 80128bc:	9100      	str	r1, [sp, #0]
 80128be:	a802      	add	r0, sp, #8
 80128c0:	4621      	mov	r1, r4
 80128c2:	f000 f845 	bl	8012950 <__kernel_rem_pio2>
 80128c6:	2d00      	cmp	r5, #0
 80128c8:	f6bf af26 	bge.w	8012718 <__ieee754_rem_pio2+0x60>
 80128cc:	ed94 7b00 	vldr	d7, [r4]
 80128d0:	eeb1 7b47 	vneg.f64	d7, d7
 80128d4:	ed84 7b00 	vstr	d7, [r4]
 80128d8:	ed94 7b02 	vldr	d7, [r4, #8]
 80128dc:	eeb1 7b47 	vneg.f64	d7, d7
 80128e0:	ed84 7b02 	vstr	d7, [r4, #8]
 80128e4:	e79a      	b.n	801281c <__ieee754_rem_pio2+0x164>
 80128e6:	bf00      	nop
 80128e8:	54400000 	.word	0x54400000
 80128ec:	3ff921fb 	.word	0x3ff921fb
 80128f0:	1a626331 	.word	0x1a626331
 80128f4:	3dd0b461 	.word	0x3dd0b461
 80128f8:	1a600000 	.word	0x1a600000
 80128fc:	3dd0b461 	.word	0x3dd0b461
 8012900:	2e037073 	.word	0x2e037073
 8012904:	3ba3198a 	.word	0x3ba3198a
 8012908:	6dc9c883 	.word	0x6dc9c883
 801290c:	3fe45f30 	.word	0x3fe45f30
 8012910:	2e000000 	.word	0x2e000000
 8012914:	3ba3198a 	.word	0x3ba3198a
 8012918:	252049c1 	.word	0x252049c1
 801291c:	397b839a 	.word	0x397b839a
 8012920:	00000000 	.word	0x00000000
 8012924:	41700000 	.word	0x41700000
 8012928:	3fe921fb 	.word	0x3fe921fb
 801292c:	4002d97b 	.word	0x4002d97b
 8012930:	413921fb 	.word	0x413921fb
 8012934:	08013150 	.word	0x08013150
 8012938:	7fefffff 	.word	0x7fefffff
 801293c:	080131d0 	.word	0x080131d0

08012940 <fabs>:
 8012940:	ec51 0b10 	vmov	r0, r1, d0
 8012944:	4602      	mov	r2, r0
 8012946:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801294a:	ec43 2b10 	vmov	d0, r2, r3
 801294e:	4770      	bx	lr

08012950 <__kernel_rem_pio2>:
 8012950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012954:	ed2d 8b06 	vpush	{d8-d10}
 8012958:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801295c:	469b      	mov	fp, r3
 801295e:	460f      	mov	r7, r1
 8012960:	4bb9      	ldr	r3, [pc, #740]	@ (8012c48 <__kernel_rem_pio2+0x2f8>)
 8012962:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8012964:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
 8012966:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801296a:	9001      	str	r0, [sp, #4]
 801296c:	f112 0f14 	cmn.w	r2, #20
 8012970:	bfa8      	it	ge
 8012972:	1ed3      	subge	r3, r2, #3
 8012974:	f10b 3aff 	add.w	sl, fp, #4294967295
 8012978:	bfb8      	it	lt
 801297a:	2300      	movlt	r3, #0
 801297c:	f06f 0517 	mvn.w	r5, #23
 8012980:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 8012c30 <__kernel_rem_pio2+0x2e0>
 8012984:	bfa4      	itt	ge
 8012986:	2018      	movge	r0, #24
 8012988:	fb93 f3f0 	sdivge	r3, r3, r0
 801298c:	fb03 5505 	mla	r5, r3, r5, r5
 8012990:	eba3 040a 	sub.w	r4, r3, sl
 8012994:	4415      	add	r5, r2
 8012996:	eb09 0c0a 	add.w	ip, r9, sl
 801299a:	a81a      	add	r0, sp, #104	@ 0x68
 801299c:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 80129a0:	2200      	movs	r2, #0
 80129a2:	4562      	cmp	r2, ip
 80129a4:	dd0e      	ble.n	80129c4 <__kernel_rem_pio2+0x74>
 80129a6:	aa1a      	add	r2, sp, #104	@ 0x68
 80129a8:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80129ac:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
 80129b0:	2400      	movs	r4, #0
 80129b2:	454c      	cmp	r4, r9
 80129b4:	dc23      	bgt.n	80129fe <__kernel_rem_pio2+0xae>
 80129b6:	ed9f 7b9e 	vldr	d7, [pc, #632]	@ 8012c30 <__kernel_rem_pio2+0x2e0>
 80129ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 80129be:	4694      	mov	ip, r2
 80129c0:	2000      	movs	r0, #0
 80129c2:	e015      	b.n	80129f0 <__kernel_rem_pio2+0xa0>
 80129c4:	42d4      	cmn	r4, r2
 80129c6:	d409      	bmi.n	80129dc <__kernel_rem_pio2+0x8c>
 80129c8:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 80129cc:	ee07 1a90 	vmov	s15, r1
 80129d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80129d4:	eca0 7b02 	vstmia	r0!, {d7}
 80129d8:	3201      	adds	r2, #1
 80129da:	e7e2      	b.n	80129a2 <__kernel_rem_pio2+0x52>
 80129dc:	eeb0 7b46 	vmov.f64	d7, d6
 80129e0:	e7f8      	b.n	80129d4 <__kernel_rem_pio2+0x84>
 80129e2:	ecbe 5b02 	vldmia	lr!, {d5}
 80129e6:	ed3c 6b02 	vldmdb	ip!, {d6}
 80129ea:	3001      	adds	r0, #1
 80129ec:	eea5 7b06 	vfma.f64	d7, d5, d6
 80129f0:	4550      	cmp	r0, sl
 80129f2:	ddf6      	ble.n	80129e2 <__kernel_rem_pio2+0x92>
 80129f4:	eca8 7b02 	vstmia	r8!, {d7}
 80129f8:	3401      	adds	r4, #1
 80129fa:	3208      	adds	r2, #8
 80129fc:	e7d9      	b.n	80129b2 <__kernel_rem_pio2+0x62>
 80129fe:	aa06      	add	r2, sp, #24
 8012a00:	ed9f 9b8d 	vldr	d9, [pc, #564]	@ 8012c38 <__kernel_rem_pio2+0x2e8>
 8012a04:	ed9f ab8e 	vldr	d10, [pc, #568]	@ 8012c40 <__kernel_rem_pio2+0x2f0>
 8012a08:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8012a0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012a10:	9203      	str	r2, [sp, #12]
 8012a12:	9302      	str	r3, [sp, #8]
 8012a14:	464c      	mov	r4, r9
 8012a16:	00e3      	lsls	r3, r4, #3
 8012a18:	9304      	str	r3, [sp, #16]
 8012a1a:	ab92      	add	r3, sp, #584	@ 0x248
 8012a1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012a20:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8012a24:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8012a26:	ab06      	add	r3, sp, #24
 8012a28:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012a2c:	461e      	mov	r6, r3
 8012a2e:	4620      	mov	r0, r4
 8012a30:	2800      	cmp	r0, #0
 8012a32:	dc4a      	bgt.n	8012aca <__kernel_rem_pio2+0x17a>
 8012a34:	4628      	mov	r0, r5
 8012a36:	9305      	str	r3, [sp, #20]
 8012a38:	f000 f9fe 	bl	8012e38 <scalbn>
 8012a3c:	eeb0 8b40 	vmov.f64	d8, d0
 8012a40:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8012a44:	ee28 0b00 	vmul.f64	d0, d8, d0
 8012a48:	f000 fa72 	bl	8012f30 <floor>
 8012a4c:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8012a50:	eea0 8b47 	vfms.f64	d8, d0, d7
 8012a54:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8012a58:	2d00      	cmp	r5, #0
 8012a5a:	ee17 8a90 	vmov	r8, s15
 8012a5e:	9b05      	ldr	r3, [sp, #20]
 8012a60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012a64:	ee38 8b47 	vsub.f64	d8, d8, d7
 8012a68:	dd41      	ble.n	8012aee <__kernel_rem_pio2+0x19e>
 8012a6a:	1e60      	subs	r0, r4, #1
 8012a6c:	aa06      	add	r2, sp, #24
 8012a6e:	f1c5 0c18 	rsb	ip, r5, #24
 8012a72:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8012a76:	fa46 f20c 	asr.w	r2, r6, ip
 8012a7a:	4490      	add	r8, r2
 8012a7c:	fa02 f20c 	lsl.w	r2, r2, ip
 8012a80:	1ab6      	subs	r6, r6, r2
 8012a82:	aa06      	add	r2, sp, #24
 8012a84:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8012a88:	f1c5 0217 	rsb	r2, r5, #23
 8012a8c:	4116      	asrs	r6, r2
 8012a8e:	2e00      	cmp	r6, #0
 8012a90:	dd3c      	ble.n	8012b0c <__kernel_rem_pio2+0x1bc>
 8012a92:	f04f 0c00 	mov.w	ip, #0
 8012a96:	f108 0801 	add.w	r8, r8, #1
 8012a9a:	4660      	mov	r0, ip
 8012a9c:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8012aa0:	4564      	cmp	r4, ip
 8012aa2:	dc66      	bgt.n	8012b72 <__kernel_rem_pio2+0x222>
 8012aa4:	2d00      	cmp	r5, #0
 8012aa6:	dd03      	ble.n	8012ab0 <__kernel_rem_pio2+0x160>
 8012aa8:	2d01      	cmp	r5, #1
 8012aaa:	d072      	beq.n	8012b92 <__kernel_rem_pio2+0x242>
 8012aac:	2d02      	cmp	r5, #2
 8012aae:	d07a      	beq.n	8012ba6 <__kernel_rem_pio2+0x256>
 8012ab0:	2e02      	cmp	r6, #2
 8012ab2:	d12b      	bne.n	8012b0c <__kernel_rem_pio2+0x1bc>
 8012ab4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012ab8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8012abc:	b330      	cbz	r0, 8012b0c <__kernel_rem_pio2+0x1bc>
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f000 f9ba 	bl	8012e38 <scalbn>
 8012ac4:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012ac8:	e020      	b.n	8012b0c <__kernel_rem_pio2+0x1bc>
 8012aca:	ee20 7b09 	vmul.f64	d7, d0, d9
 8012ace:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012ad2:	3801      	subs	r0, #1
 8012ad4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8012ad8:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012adc:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012ae0:	eca6 0a01 	vstmia	r6!, {s0}
 8012ae4:	ed32 0b02 	vldmdb	r2!, {d0}
 8012ae8:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012aec:	e7a0      	b.n	8012a30 <__kernel_rem_pio2+0xe0>
 8012aee:	d105      	bne.n	8012afc <__kernel_rem_pio2+0x1ac>
 8012af0:	1e62      	subs	r2, r4, #1
 8012af2:	a906      	add	r1, sp, #24
 8012af4:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8012af8:	15f6      	asrs	r6, r6, #23
 8012afa:	e7c8      	b.n	8012a8e <__kernel_rem_pio2+0x13e>
 8012afc:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8012b00:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b08:	da31      	bge.n	8012b6e <__kernel_rem_pio2+0x21e>
 8012b0a:	2600      	movs	r6, #0
 8012b0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b14:	f040 809c 	bne.w	8012c50 <__kernel_rem_pio2+0x300>
 8012b18:	1e62      	subs	r2, r4, #1
 8012b1a:	2000      	movs	r0, #0
 8012b1c:	454a      	cmp	r2, r9
 8012b1e:	da49      	bge.n	8012bb4 <__kernel_rem_pio2+0x264>
 8012b20:	2800      	cmp	r0, #0
 8012b22:	d062      	beq.n	8012bea <__kernel_rem_pio2+0x29a>
 8012b24:	3c01      	subs	r4, #1
 8012b26:	ab06      	add	r3, sp, #24
 8012b28:	3d18      	subs	r5, #24
 8012b2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d0f8      	beq.n	8012b24 <__kernel_rem_pio2+0x1d4>
 8012b32:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012b36:	4628      	mov	r0, r5
 8012b38:	f000 f97e 	bl	8012e38 <scalbn>
 8012b3c:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8012c38 <__kernel_rem_pio2+0x2e8>
 8012b40:	1c62      	adds	r2, r4, #1
 8012b42:	a96a      	add	r1, sp, #424	@ 0x1a8
 8012b44:	00d3      	lsls	r3, r2, #3
 8012b46:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012b4a:	4622      	mov	r2, r4
 8012b4c:	2a00      	cmp	r2, #0
 8012b4e:	f280 80a9 	bge.w	8012ca4 <__kernel_rem_pio2+0x354>
 8012b52:	4622      	mov	r2, r4
 8012b54:	2a00      	cmp	r2, #0
 8012b56:	f2c0 80c7 	blt.w	8012ce8 <__kernel_rem_pio2+0x398>
 8012b5a:	a96a      	add	r1, sp, #424	@ 0x1a8
 8012b5c:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8012b60:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8012c30 <__kernel_rem_pio2+0x2e0>
 8012b64:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8012c4c <__kernel_rem_pio2+0x2fc>
 8012b68:	2000      	movs	r0, #0
 8012b6a:	1aa1      	subs	r1, r4, r2
 8012b6c:	e0b1      	b.n	8012cd2 <__kernel_rem_pio2+0x382>
 8012b6e:	2602      	movs	r6, #2
 8012b70:	e78f      	b.n	8012a92 <__kernel_rem_pio2+0x142>
 8012b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b76:	b948      	cbnz	r0, 8012b8c <__kernel_rem_pio2+0x23c>
 8012b78:	b122      	cbz	r2, 8012b84 <__kernel_rem_pio2+0x234>
 8012b7a:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8012b7e:	f843 2c04 	str.w	r2, [r3, #-4]
 8012b82:	2201      	movs	r2, #1
 8012b84:	f10c 0c01 	add.w	ip, ip, #1
 8012b88:	4610      	mov	r0, r2
 8012b8a:	e789      	b.n	8012aa0 <__kernel_rem_pio2+0x150>
 8012b8c:	ebae 0202 	sub.w	r2, lr, r2
 8012b90:	e7f5      	b.n	8012b7e <__kernel_rem_pio2+0x22e>
 8012b92:	1e62      	subs	r2, r4, #1
 8012b94:	ab06      	add	r3, sp, #24
 8012b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012b9e:	a906      	add	r1, sp, #24
 8012ba0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012ba4:	e784      	b.n	8012ab0 <__kernel_rem_pio2+0x160>
 8012ba6:	1e62      	subs	r2, r4, #1
 8012ba8:	ab06      	add	r3, sp, #24
 8012baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012bb2:	e7f4      	b.n	8012b9e <__kernel_rem_pio2+0x24e>
 8012bb4:	ab06      	add	r3, sp, #24
 8012bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bba:	3a01      	subs	r2, #1
 8012bbc:	4318      	orrs	r0, r3
 8012bbe:	e7ad      	b.n	8012b1c <__kernel_rem_pio2+0x1cc>
 8012bc0:	3301      	adds	r3, #1
 8012bc2:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8012bc6:	2800      	cmp	r0, #0
 8012bc8:	d0fa      	beq.n	8012bc0 <__kernel_rem_pio2+0x270>
 8012bca:	9a04      	ldr	r2, [sp, #16]
 8012bcc:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8012bd0:	446a      	add	r2, sp
 8012bd2:	eb04 000b 	add.w	r0, r4, fp
 8012bd6:	a91a      	add	r1, sp, #104	@ 0x68
 8012bd8:	1c66      	adds	r6, r4, #1
 8012bda:	3a98      	subs	r2, #152	@ 0x98
 8012bdc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8012be0:	4423      	add	r3, r4
 8012be2:	42b3      	cmp	r3, r6
 8012be4:	da04      	bge.n	8012bf0 <__kernel_rem_pio2+0x2a0>
 8012be6:	461c      	mov	r4, r3
 8012be8:	e715      	b.n	8012a16 <__kernel_rem_pio2+0xc6>
 8012bea:	9a03      	ldr	r2, [sp, #12]
 8012bec:	2301      	movs	r3, #1
 8012bee:	e7e8      	b.n	8012bc2 <__kernel_rem_pio2+0x272>
 8012bf0:	9902      	ldr	r1, [sp, #8]
 8012bf2:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012bf6:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8012bfa:	9104      	str	r1, [sp, #16]
 8012bfc:	ee07 1a90 	vmov	s15, r1
 8012c00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012c04:	2400      	movs	r4, #0
 8012c06:	eca0 7b02 	vstmia	r0!, {d7}
 8012c0a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8012c30 <__kernel_rem_pio2+0x2e0>
 8012c0e:	4686      	mov	lr, r0
 8012c10:	4554      	cmp	r4, sl
 8012c12:	dd03      	ble.n	8012c1c <__kernel_rem_pio2+0x2cc>
 8012c14:	eca2 7b02 	vstmia	r2!, {d7}
 8012c18:	3601      	adds	r6, #1
 8012c1a:	e7e2      	b.n	8012be2 <__kernel_rem_pio2+0x292>
 8012c1c:	ecbc 5b02 	vldmia	ip!, {d5}
 8012c20:	ed3e 6b02 	vldmdb	lr!, {d6}
 8012c24:	3401      	adds	r4, #1
 8012c26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012c2a:	e7f1      	b.n	8012c10 <__kernel_rem_pio2+0x2c0>
 8012c2c:	f3af 8000 	nop.w
	...
 8012c3c:	3e700000 	.word	0x3e700000
 8012c40:	00000000 	.word	0x00000000
 8012c44:	41700000 	.word	0x41700000
 8012c48:	08013318 	.word	0x08013318
 8012c4c:	080132d8 	.word	0x080132d8
 8012c50:	4268      	negs	r0, r5
 8012c52:	eeb0 0b48 	vmov.f64	d0, d8
 8012c56:	f000 f8ef 	bl	8012e38 <scalbn>
 8012c5a:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 8012e20 <__kernel_rem_pio2+0x4d0>
 8012c5e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8012c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c66:	db17      	blt.n	8012c98 <__kernel_rem_pio2+0x348>
 8012c68:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 8012e28 <__kernel_rem_pio2+0x4d8>
 8012c6c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012c70:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012c74:	aa06      	add	r2, sp, #24
 8012c76:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8012c7a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8012c7e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012c82:	3518      	adds	r5, #24
 8012c84:	ee10 3a10 	vmov	r3, s0
 8012c88:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012c8c:	ee17 3a10 	vmov	r3, s14
 8012c90:	3401      	adds	r4, #1
 8012c92:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012c96:	e74c      	b.n	8012b32 <__kernel_rem_pio2+0x1e2>
 8012c98:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012c9c:	aa06      	add	r2, sp, #24
 8012c9e:	ee10 3a10 	vmov	r3, s0
 8012ca2:	e7f6      	b.n	8012c92 <__kernel_rem_pio2+0x342>
 8012ca4:	a806      	add	r0, sp, #24
 8012ca6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8012caa:	9001      	str	r0, [sp, #4]
 8012cac:	ee07 0a90 	vmov	s15, r0
 8012cb0:	3a01      	subs	r2, #1
 8012cb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012cb6:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012cba:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012cbe:	ed21 7b02 	vstmdb	r1!, {d7}
 8012cc2:	e743      	b.n	8012b4c <__kernel_rem_pio2+0x1fc>
 8012cc4:	ecbc 5b02 	vldmia	ip!, {d5}
 8012cc8:	ecb5 6b02 	vldmia	r5!, {d6}
 8012ccc:	3001      	adds	r0, #1
 8012cce:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012cd2:	4548      	cmp	r0, r9
 8012cd4:	dc01      	bgt.n	8012cda <__kernel_rem_pio2+0x38a>
 8012cd6:	4288      	cmp	r0, r1
 8012cd8:	ddf4      	ble.n	8012cc4 <__kernel_rem_pio2+0x374>
 8012cda:	a842      	add	r0, sp, #264	@ 0x108
 8012cdc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012ce0:	ed81 7b00 	vstr	d7, [r1]
 8012ce4:	3a01      	subs	r2, #1
 8012ce6:	e735      	b.n	8012b54 <__kernel_rem_pio2+0x204>
 8012ce8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8012cea:	2a02      	cmp	r2, #2
 8012cec:	dc0a      	bgt.n	8012d04 <__kernel_rem_pio2+0x3b4>
 8012cee:	2a00      	cmp	r2, #0
 8012cf0:	dc29      	bgt.n	8012d46 <__kernel_rem_pio2+0x3f6>
 8012cf2:	d042      	beq.n	8012d7a <__kernel_rem_pio2+0x42a>
 8012cf4:	f008 0007 	and.w	r0, r8, #7
 8012cf8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8012cfc:	ecbd 8b06 	vpop	{d8-d10}
 8012d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d04:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8012d06:	2a03      	cmp	r2, #3
 8012d08:	d1f4      	bne.n	8012cf4 <__kernel_rem_pio2+0x3a4>
 8012d0a:	a942      	add	r1, sp, #264	@ 0x108
 8012d0c:	f1a3 0208 	sub.w	r2, r3, #8
 8012d10:	440a      	add	r2, r1
 8012d12:	4611      	mov	r1, r2
 8012d14:	4620      	mov	r0, r4
 8012d16:	2800      	cmp	r0, #0
 8012d18:	dc50      	bgt.n	8012dbc <__kernel_rem_pio2+0x46c>
 8012d1a:	4621      	mov	r1, r4
 8012d1c:	2901      	cmp	r1, #1
 8012d1e:	dc5d      	bgt.n	8012ddc <__kernel_rem_pio2+0x48c>
 8012d20:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8012e30 <__kernel_rem_pio2+0x4e0>
 8012d24:	aa42      	add	r2, sp, #264	@ 0x108
 8012d26:	4413      	add	r3, r2
 8012d28:	2c01      	cmp	r4, #1
 8012d2a:	dc67      	bgt.n	8012dfc <__kernel_rem_pio2+0x4ac>
 8012d2c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8012d30:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8012d34:	2e00      	cmp	r6, #0
 8012d36:	d167      	bne.n	8012e08 <__kernel_rem_pio2+0x4b8>
 8012d38:	ed87 5b00 	vstr	d5, [r7]
 8012d3c:	ed87 6b02 	vstr	d6, [r7, #8]
 8012d40:	ed87 7b04 	vstr	d7, [r7, #16]
 8012d44:	e7d6      	b.n	8012cf4 <__kernel_rem_pio2+0x3a4>
 8012d46:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8012e30 <__kernel_rem_pio2+0x4e0>
 8012d4a:	aa42      	add	r2, sp, #264	@ 0x108
 8012d4c:	4413      	add	r3, r2
 8012d4e:	4622      	mov	r2, r4
 8012d50:	2a00      	cmp	r2, #0
 8012d52:	da24      	bge.n	8012d9e <__kernel_rem_pio2+0x44e>
 8012d54:	b34e      	cbz	r6, 8012daa <__kernel_rem_pio2+0x45a>
 8012d56:	eeb1 7b46 	vneg.f64	d7, d6
 8012d5a:	ed87 7b00 	vstr	d7, [r7]
 8012d5e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8012d62:	aa44      	add	r2, sp, #272	@ 0x110
 8012d64:	2301      	movs	r3, #1
 8012d66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012d6a:	429c      	cmp	r4, r3
 8012d6c:	da20      	bge.n	8012db0 <__kernel_rem_pio2+0x460>
 8012d6e:	b10e      	cbz	r6, 8012d74 <__kernel_rem_pio2+0x424>
 8012d70:	eeb1 7b47 	vneg.f64	d7, d7
 8012d74:	ed87 7b02 	vstr	d7, [r7, #8]
 8012d78:	e7bc      	b.n	8012cf4 <__kernel_rem_pio2+0x3a4>
 8012d7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8012e30 <__kernel_rem_pio2+0x4e0>
 8012d7e:	aa42      	add	r2, sp, #264	@ 0x108
 8012d80:	4413      	add	r3, r2
 8012d82:	2c00      	cmp	r4, #0
 8012d84:	da05      	bge.n	8012d92 <__kernel_rem_pio2+0x442>
 8012d86:	b10e      	cbz	r6, 8012d8c <__kernel_rem_pio2+0x43c>
 8012d88:	eeb1 7b47 	vneg.f64	d7, d7
 8012d8c:	ed87 7b00 	vstr	d7, [r7]
 8012d90:	e7b0      	b.n	8012cf4 <__kernel_rem_pio2+0x3a4>
 8012d92:	ed33 6b02 	vldmdb	r3!, {d6}
 8012d96:	3c01      	subs	r4, #1
 8012d98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012d9c:	e7f1      	b.n	8012d82 <__kernel_rem_pio2+0x432>
 8012d9e:	ed33 7b02 	vldmdb	r3!, {d7}
 8012da2:	3a01      	subs	r2, #1
 8012da4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012da8:	e7d2      	b.n	8012d50 <__kernel_rem_pio2+0x400>
 8012daa:	eeb0 7b46 	vmov.f64	d7, d6
 8012dae:	e7d4      	b.n	8012d5a <__kernel_rem_pio2+0x40a>
 8012db0:	ecb2 6b02 	vldmia	r2!, {d6}
 8012db4:	3301      	adds	r3, #1
 8012db6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012dba:	e7d6      	b.n	8012d6a <__kernel_rem_pio2+0x41a>
 8012dbc:	ed31 7b02 	vldmdb	r1!, {d7}
 8012dc0:	ed91 5b02 	vldr	d5, [r1, #8]
 8012dc4:	3801      	subs	r0, #1
 8012dc6:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012dca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012dce:	ed81 6b00 	vstr	d6, [r1]
 8012dd2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012dd6:	ed81 7b02 	vstr	d7, [r1, #8]
 8012dda:	e79c      	b.n	8012d16 <__kernel_rem_pio2+0x3c6>
 8012ddc:	ed32 7b02 	vldmdb	r2!, {d7}
 8012de0:	ed92 5b02 	vldr	d5, [r2, #8]
 8012de4:	3901      	subs	r1, #1
 8012de6:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012dea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012dee:	ed82 6b00 	vstr	d6, [r2]
 8012df2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012df6:	ed82 7b02 	vstr	d7, [r2, #8]
 8012dfa:	e78f      	b.n	8012d1c <__kernel_rem_pio2+0x3cc>
 8012dfc:	ed33 6b02 	vldmdb	r3!, {d6}
 8012e00:	3c01      	subs	r4, #1
 8012e02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012e06:	e78f      	b.n	8012d28 <__kernel_rem_pio2+0x3d8>
 8012e08:	eeb1 5b45 	vneg.f64	d5, d5
 8012e0c:	eeb1 6b46 	vneg.f64	d6, d6
 8012e10:	ed87 5b00 	vstr	d5, [r7]
 8012e14:	eeb1 7b47 	vneg.f64	d7, d7
 8012e18:	ed87 6b02 	vstr	d6, [r7, #8]
 8012e1c:	e790      	b.n	8012d40 <__kernel_rem_pio2+0x3f0>
 8012e1e:	bf00      	nop
 8012e20:	00000000 	.word	0x00000000
 8012e24:	41700000 	.word	0x41700000
 8012e28:	00000000 	.word	0x00000000
 8012e2c:	3e700000 	.word	0x3e700000
	...

08012e38 <scalbn>:
 8012e38:	ee10 1a90 	vmov	r1, s1
 8012e3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012e40:	b98b      	cbnz	r3, 8012e66 <scalbn+0x2e>
 8012e42:	ee10 3a10 	vmov	r3, s0
 8012e46:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8012e4a:	4319      	orrs	r1, r3
 8012e4c:	d00a      	beq.n	8012e64 <scalbn+0x2c>
 8012e4e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012ef8 <scalbn+0xc0>
 8012e52:	4b35      	ldr	r3, [pc, #212]	@ (8012f28 <scalbn+0xf0>)
 8012e54:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012e58:	4298      	cmp	r0, r3
 8012e5a:	da0b      	bge.n	8012e74 <scalbn+0x3c>
 8012e5c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8012f00 <scalbn+0xc8>
 8012e60:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012e64:	4770      	bx	lr
 8012e66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012e6a:	4293      	cmp	r3, r2
 8012e6c:	d107      	bne.n	8012e7e <scalbn+0x46>
 8012e6e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012e72:	4770      	bx	lr
 8012e74:	ee10 1a90 	vmov	r1, s1
 8012e78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012e7c:	3b36      	subs	r3, #54	@ 0x36
 8012e7e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012e82:	4290      	cmp	r0, r2
 8012e84:	dd0d      	ble.n	8012ea2 <scalbn+0x6a>
 8012e86:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8012f08 <scalbn+0xd0>
 8012e8a:	ee10 3a90 	vmov	r3, s1
 8012e8e:	eeb0 6b47 	vmov.f64	d6, d7
 8012e92:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8012f10 <scalbn+0xd8>
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012e9c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012ea0:	4770      	bx	lr
 8012ea2:	4418      	add	r0, r3
 8012ea4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8012ea8:	4298      	cmp	r0, r3
 8012eaa:	dcec      	bgt.n	8012e86 <scalbn+0x4e>
 8012eac:	2800      	cmp	r0, #0
 8012eae:	dd08      	ble.n	8012ec2 <scalbn+0x8a>
 8012eb0:	ec53 2b10 	vmov	r2, r3, d0
 8012eb4:	f36f 511e 	bfc	r1, #20, #11
 8012eb8:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8012ebc:	ec43 2b10 	vmov	d0, r2, r3
 8012ec0:	4770      	bx	lr
 8012ec2:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8012ec6:	da09      	bge.n	8012edc <scalbn+0xa4>
 8012ec8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012f00 <scalbn+0xc8>
 8012ecc:	ee10 3a90 	vmov	r3, s1
 8012ed0:	eeb0 6b47 	vmov.f64	d6, d7
 8012ed4:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8012f18 <scalbn+0xe0>
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	e7dd      	b.n	8012e98 <scalbn+0x60>
 8012edc:	ec53 2b10 	vmov	r2, r3, d0
 8012ee0:	3036      	adds	r0, #54	@ 0x36
 8012ee2:	f36f 511e 	bfc	r1, #20, #11
 8012ee6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8012eea:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012f20 <scalbn+0xe8>
 8012eee:	ec43 2b10 	vmov	d0, r2, r3
 8012ef2:	e7b5      	b.n	8012e60 <scalbn+0x28>
 8012ef4:	f3af 8000 	nop.w
 8012ef8:	00000000 	.word	0x00000000
 8012efc:	43500000 	.word	0x43500000
 8012f00:	c2f8f359 	.word	0xc2f8f359
 8012f04:	01a56e1f 	.word	0x01a56e1f
 8012f08:	8800759c 	.word	0x8800759c
 8012f0c:	7e37e43c 	.word	0x7e37e43c
 8012f10:	8800759c 	.word	0x8800759c
 8012f14:	fe37e43c 	.word	0xfe37e43c
 8012f18:	c2f8f359 	.word	0xc2f8f359
 8012f1c:	81a56e1f 	.word	0x81a56e1f
 8012f20:	00000000 	.word	0x00000000
 8012f24:	3c900000 	.word	0x3c900000
 8012f28:	ffff3cb0 	.word	0xffff3cb0
 8012f2c:	00000000 	.word	0x00000000

08012f30 <floor>:
 8012f30:	ee10 3a90 	vmov	r3, s1
 8012f34:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8012f38:	ee10 2a10 	vmov	r2, s0
 8012f3c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8012f40:	2913      	cmp	r1, #19
 8012f42:	b530      	push	{r4, r5, lr}
 8012f44:	4615      	mov	r5, r2
 8012f46:	dc33      	bgt.n	8012fb0 <floor+0x80>
 8012f48:	2900      	cmp	r1, #0
 8012f4a:	da18      	bge.n	8012f7e <floor+0x4e>
 8012f4c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8013010 <floor+0xe0>
 8012f50:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012f54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f5c:	dd0a      	ble.n	8012f74 <floor+0x44>
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	da50      	bge.n	8013004 <floor+0xd4>
 8012f62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012f66:	4313      	orrs	r3, r2
 8012f68:	2200      	movs	r2, #0
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8013018 <floor+0xe8>)
 8012f6e:	bf08      	it	eq
 8012f70:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8012f74:	4619      	mov	r1, r3
 8012f76:	4610      	mov	r0, r2
 8012f78:	ec41 0b10 	vmov	d0, r0, r1
 8012f7c:	e01f      	b.n	8012fbe <floor+0x8e>
 8012f7e:	4827      	ldr	r0, [pc, #156]	@ (801301c <floor+0xec>)
 8012f80:	4108      	asrs	r0, r1
 8012f82:	ea03 0400 	and.w	r4, r3, r0
 8012f86:	4314      	orrs	r4, r2
 8012f88:	d019      	beq.n	8012fbe <floor+0x8e>
 8012f8a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013010 <floor+0xe0>
 8012f8e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012f92:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9a:	ddeb      	ble.n	8012f74 <floor+0x44>
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	bfbe      	ittt	lt
 8012fa0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8012fa4:	410a      	asrlt	r2, r1
 8012fa6:	189b      	addlt	r3, r3, r2
 8012fa8:	ea23 0300 	bic.w	r3, r3, r0
 8012fac:	2200      	movs	r2, #0
 8012fae:	e7e1      	b.n	8012f74 <floor+0x44>
 8012fb0:	2933      	cmp	r1, #51	@ 0x33
 8012fb2:	dd05      	ble.n	8012fc0 <floor+0x90>
 8012fb4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8012fb8:	d101      	bne.n	8012fbe <floor+0x8e>
 8012fba:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012fbe:	bd30      	pop	{r4, r5, pc}
 8012fc0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8012fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fc8:	40e0      	lsrs	r0, r4
 8012fca:	4210      	tst	r0, r2
 8012fcc:	d0f7      	beq.n	8012fbe <floor+0x8e>
 8012fce:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8013010 <floor+0xe0>
 8012fd2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012fd6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fde:	ddc9      	ble.n	8012f74 <floor+0x44>
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	da02      	bge.n	8012fea <floor+0xba>
 8012fe4:	2914      	cmp	r1, #20
 8012fe6:	d103      	bne.n	8012ff0 <floor+0xc0>
 8012fe8:	3301      	adds	r3, #1
 8012fea:	ea22 0200 	bic.w	r2, r2, r0
 8012fee:	e7c1      	b.n	8012f74 <floor+0x44>
 8012ff0:	2401      	movs	r4, #1
 8012ff2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8012ff6:	fa04 f101 	lsl.w	r1, r4, r1
 8012ffa:	440a      	add	r2, r1
 8012ffc:	42aa      	cmp	r2, r5
 8012ffe:	bf38      	it	cc
 8013000:	191b      	addcc	r3, r3, r4
 8013002:	e7f2      	b.n	8012fea <floor+0xba>
 8013004:	2200      	movs	r2, #0
 8013006:	4613      	mov	r3, r2
 8013008:	e7b4      	b.n	8012f74 <floor+0x44>
 801300a:	bf00      	nop
 801300c:	f3af 8000 	nop.w
 8013010:	8800759c 	.word	0x8800759c
 8013014:	7e37e43c 	.word	0x7e37e43c
 8013018:	bff00000 	.word	0xbff00000
 801301c:	000fffff 	.word	0x000fffff

08013020 <_init>:
 8013020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013022:	bf00      	nop
 8013024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013026:	bc08      	pop	{r3}
 8013028:	469e      	mov	lr, r3
 801302a:	4770      	bx	lr

0801302c <_fini>:
 801302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801302e:	bf00      	nop
 8013030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013032:	bc08      	pop	{r3}
 8013034:	469e      	mov	lr, r3
 8013036:	4770      	bx	lr
