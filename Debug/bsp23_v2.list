
bsp23_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0c4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ecfc  0800d364  0800d364  0000e364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c060  0801c060  0001d060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c068  0801c068  0001d068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c06c  0801c06c  0001d06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d0  24000000  0801c070  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000fec  240000d0  0801c140  0001e0d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240010bc  0801c140  0001f0bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001e0d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028c3b  00000000  00000000  0001e0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005af8  00000000  00000000  00046d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020f8  00000000  00000000  0004c838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000191d  00000000  00000000  0004e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b813  00000000  00000000  0005024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b0bc  00000000  00000000  0005ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00195ec0  00000000  00000000  00086b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021c9dc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009130  00000000  00000000  0021ca20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  00225b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d0 	.word	0x240000d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d34c 	.word	0x0800d34c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d4 	.word	0x240000d4
 80002dc:	0800d34c 	.word	0x0800d34c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d103      	bne.n	8000398 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8000390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	e02c      	b.n	80003f2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	891a      	ldrh	r2, [r3, #8]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	68da      	ldr	r2, [r3, #12]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	691a      	ldr	r2, [r3, #16]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	695a      	ldr	r2, [r3, #20]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a0c      	ldr	r2, [pc, #48]	@ (80003fc <FT5336_RegisterBusIO+0x7c>)
 80003cc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000400 <FT5336_RegisterBusIO+0x80>)
 80003d2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d004      	beq.n	80003ec <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4798      	blx	r3
 80003e8:	60f8      	str	r0, [r7, #12]
 80003ea:	e002      	b.n	80003f2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003f0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80003f2:	68fb      	ldr	r3, [r7, #12]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	080007f9 	.word	0x080007f9
 8000400:	0800082d 	.word	0x0800082d

08000404 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	2201      	movs	r2, #1
 8000418:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	2205      	movs	r2, #5
 800041e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000426:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800042e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b084      	sub	sp, #16
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000450:	2b00      	cmp	r3, #0
 8000452:	d10d      	bne.n	8000470 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f000 f987 	bl	800076e <FT5336_DisableIT>
 8000460:	4602      	mov	r2, r0
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	4413      	add	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2201      	movs	r2, #1
 800046c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d002      	beq.n	800047c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8000476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800047a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800047c:	68fb      	ldr	r3, [r7, #12]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8000486:	b480      	push	{r7}
 8000488:	b085      	sub	sp, #20
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000498:	2b01      	cmp	r3, #1
 800049a:	d103      	bne.n	80004a4 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2200      	movs	r2, #0
 80004a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 80004a4:	68fb      	ldr	r3, [r7, #12]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b084      	sub	sp, #16
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f103 0218 	add.w	r2, r3, #24
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4619      	mov	r1, r3
 80004ca:	4610      	mov	r0, r2
 80004cc:	f000 fa25 	bl	800091a <ft5336_radian_value>
 80004d0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f103 0218 	add.w	r2, r3, #24
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	4619      	mov	r1, r3
 80004e0:	4610      	mov	r0, r2
 80004e2:	f000 fa2b 	bl	800093c <ft5336_offset_left_right>
 80004e6:	4602      	mov	r2, r0
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4413      	add	r3, r2
 80004ec:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f103 0218 	add.w	r2, r3, #24
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	4619      	mov	r1, r3
 80004fc:	4610      	mov	r0, r2
 80004fe:	f000 fa2e 	bl	800095e <ft5336_offset_up_down>
 8000502:	4602      	mov	r2, r0
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4413      	add	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f103 0218 	add.w	r2, r3, #24
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4619      	mov	r1, r3
 8000518:	4610      	mov	r0, r2
 800051a:	f000 fa31 	bl	8000980 <ft5336_disatnce_left_right>
 800051e:	4602      	mov	r2, r0
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4413      	add	r3, r2
 8000524:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f103 0218 	add.w	r2, r3, #24
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	4619      	mov	r1, r3
 8000534:	4610      	mov	r0, r2
 8000536:	f000 fa34 	bl	80009a2 <ft5336_distance_up_down>
 800053a:	4602      	mov	r2, r0
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4413      	add	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f103 0218 	add.w	r2, r3, #24
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	4610      	mov	r0, r2
 8000552:	f000 fa37 	bl	80009c4 <ft5336_distance_zoom>
 8000556:	4602      	mov	r2, r0
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	4413      	add	r3, r2
 800055c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8000564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000568:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	3318      	adds	r3, #24
 8000582:	6839      	ldr	r1, [r7, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fa3f 	bl	8000a08 <ft5336_chip_id>
 800058a:	4603      	mov	r3, r0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 f908 	bl	80007b8 <FT5336_DetectTouch>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 0018 	add.w	r0, r3, #24
 80005b6:	f107 0208 	add.w	r2, r7, #8
 80005ba:	2304      	movs	r3, #4
 80005bc:	2103      	movs	r1, #3
 80005be:	f000 f94f 	bl	8000860 <ft5336_read_reg>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d003      	beq.n	80005d0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	e00f      	b.n	80005f0 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80005d0:	7a3b      	ldrb	r3, [r7, #8]
 80005d2:	021b      	lsls	r3, r3, #8
 80005d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80005d8:	7a7a      	ldrb	r2, [r7, #9]
 80005da:	431a      	orrs	r2, r3
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80005e0:	7abb      	ldrb	r3, [r7, #10]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80005e8:	7afa      	ldrb	r2, [r7, #11]
 80005ea:	431a      	orrs	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b08c      	sub	sp, #48	@ 0x30
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8000604:	2300      	movs	r3, #0
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f8d5 	bl	80007b8 <FT5336_DetectTouch>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f103 0018 	add.w	r0, r3, #24
 800061c:	f107 0208 	add.w	r2, r7, #8
 8000620:	231e      	movs	r3, #30
 8000622:	2103      	movs	r1, #3
 8000624:	f000 f91c 	bl	8000860 <ft5336_read_reg>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d003      	beq.n	8000636 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800062e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000634:	e077      	b.n	8000726 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800063a:	e071      	b.n	8000720 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800063c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	3330      	adds	r3, #48	@ 0x30
 8000648:	443b      	add	r3, r7
 800064a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800064e:	021b      	lsls	r3, r3, #8
 8000650:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 8000654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	3301      	adds	r3, #1
 8000660:	3330      	adds	r3, #48	@ 0x30
 8000662:	443b      	add	r3, r7
 8000664:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000668:	ea41 0203 	orr.w	r2, r1, r3
 800066c:	6839      	ldr	r1, [r7, #0]
 800066e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	440b      	add	r3, r1
 8000674:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000678:	4613      	mov	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	3302      	adds	r3, #2
 8000682:	3330      	adds	r3, #48	@ 0x30
 8000684:	443b      	add	r3, r7
 8000686:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 8000690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000692:	4613      	mov	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	3303      	adds	r3, #3
 800069c:	3330      	adds	r3, #48	@ 0x30
 800069e:	443b      	add	r3, r7
 80006a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80006a4:	4319      	orrs	r1, r3
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006aa:	3206      	adds	r2, #6
 80006ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80006b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	3330      	adds	r3, #48	@ 0x30
 80006bc:	443b      	add	r3, r7
 80006be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80006c2:	099b      	lsrs	r3, r3, #6
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006cc:	3210      	adds	r2, #16
 80006ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80006d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	3304      	adds	r3, #4
 80006de:	3330      	adds	r3, #48	@ 0x30
 80006e0:	443b      	add	r3, r7
 80006e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80006e6:	4619      	mov	r1, r3
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ec:	330a      	adds	r3, #10
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80006f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	3305      	adds	r3, #5
 8000700:	3330      	adds	r3, #48	@ 0x30
 8000702:	443b      	add	r3, r7
 8000704:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000708:	091b      	lsrs	r3, r3, #4
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4619      	mov	r1, r3
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000712:	3314      	adds	r3, #20
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800071a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800071c:	3301      	adds	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000722:	2b04      	cmp	r3, #4
 8000724:	d98a      	bls.n	800063c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8000726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000728:	4618      	mov	r0, r3
 800072a:	3730      	adds	r7, #48	@ 0x30
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3318      	adds	r3, #24
 800073e:	6839      	ldr	r1, [r7, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f8bb 	bl	80008bc <ft5336_gest_id>
 8000746:	4603      	mov	r3, r0
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3318      	adds	r3, #24
 800075c:	2101      	movs	r1, #1
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f941 	bl	80009e6 <ft5336_g_mode>
 8000764:	4603      	mov	r3, r0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3318      	adds	r3, #24
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f932 	bl	80009e6 <ft5336_g_mode>
 8000782:	4603      	mov	r3, r0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3318      	adds	r3, #24
 80007c4:	f107 020b 	add.w	r2, r7, #11
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f886 	bl	80008dc <ft5336_td_status>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d003      	beq.n	80007de <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e007      	b.n	80007ee <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80007de:	7afb      	ldrb	r3, [r7, #11]
 80007e0:	2b05      	cmp	r3, #5
 80007e2:	d902      	bls.n	80007ea <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e001      	b.n	80007ee <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80007ea:	7afb      	ldrb	r3, [r7, #11]
 80007ec:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	461a      	mov	r2, r3
 8000804:	460b      	mov	r3, r1
 8000806:	72fb      	strb	r3, [r7, #11]
 8000808:	4613      	mov	r3, r2
 800080a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	691c      	ldr	r4, [r3, #16]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	8918      	ldrh	r0, [r3, #8]
 8000818:	7afb      	ldrb	r3, [r7, #11]
 800081a:	b299      	uxth	r1, r3
 800081c:	893b      	ldrh	r3, [r7, #8]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	47a0      	blx	r4
 8000822:	4603      	mov	r3, r0
}
 8000824:	4618      	mov	r0, r3
 8000826:	371c      	adds	r7, #28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd90      	pop	{r4, r7, pc}

0800082c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b087      	sub	sp, #28
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	461a      	mov	r2, r3
 8000838:	460b      	mov	r3, r1
 800083a:	72fb      	strb	r3, [r7, #11]
 800083c:	4613      	mov	r3, r2
 800083e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	68dc      	ldr	r4, [r3, #12]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	8918      	ldrh	r0, [r3, #8]
 800084c:	7afb      	ldrb	r3, [r7, #11]
 800084e:	b299      	uxth	r1, r3
 8000850:	893b      	ldrh	r3, [r7, #8]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	47a0      	blx	r4
 8000856:	4603      	mov	r3, r0
}
 8000858:	4618      	mov	r0, r3
 800085a:	371c      	adds	r7, #28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd90      	pop	{r4, r7, pc}

08000860 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	461a      	mov	r2, r3
 800086c:	460b      	mov	r3, r1
 800086e:	72fb      	strb	r3, [r7, #11]
 8000870:	4613      	mov	r3, r2
 8000872:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	685c      	ldr	r4, [r3, #4]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6898      	ldr	r0, [r3, #8]
 800087c:	893b      	ldrh	r3, [r7, #8]
 800087e:	7af9      	ldrb	r1, [r7, #11]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	47a0      	blx	r4
 8000884:	4603      	mov	r3, r0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}

0800088e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800088e:	b590      	push	{r4, r7, lr}
 8000890:	b085      	sub	sp, #20
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	461a      	mov	r2, r3
 800089a:	460b      	mov	r3, r1
 800089c:	72fb      	strb	r3, [r7, #11]
 800089e:	4613      	mov	r3, r2
 80008a0:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	681c      	ldr	r4, [r3, #0]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6898      	ldr	r0, [r3, #8]
 80008aa:	893b      	ldrh	r3, [r7, #8]
 80008ac:	7af9      	ldrb	r1, [r7, #11]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	47a0      	blx	r4
 80008b2:	4603      	mov	r3, r0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}

080008bc <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80008c6:	2301      	movs	r3, #1
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	2101      	movs	r1, #1
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ffc7 	bl	8000860 <ft5336_read_reg>
 80008d2:	4603      	mov	r3, r0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80008e6:	2301      	movs	r3, #1
 80008e8:	683a      	ldr	r2, [r7, #0]
 80008ea:	2102      	movs	r1, #2
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ffb7 	bl	8000860 <ft5336_read_reg>
 80008f2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10a      	bne.n	8000910 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	b2da      	uxtb	r2, r3
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000910:	68fb      	ldr	r3, [r7, #12]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8000926:	1cfa      	adds	r2, r7, #3
 8000928:	2301      	movs	r3, #1
 800092a:	2191      	movs	r1, #145	@ 0x91
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ffae 	bl	800088e <ft5336_write_reg>
 8000932:	4603      	mov	r3, r0
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8000948:	1cfa      	adds	r2, r7, #3
 800094a:	2301      	movs	r3, #1
 800094c:	2192      	movs	r1, #146	@ 0x92
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ff9d 	bl	800088e <ft5336_write_reg>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800096a:	1cfa      	adds	r2, r7, #3
 800096c:	2301      	movs	r3, #1
 800096e:	2193      	movs	r1, #147	@ 0x93
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff8c 	bl	800088e <ft5336_write_reg>
 8000976:	4603      	mov	r3, r0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800098c:	1cfa      	adds	r2, r7, #3
 800098e:	2301      	movs	r3, #1
 8000990:	2194      	movs	r1, #148	@ 0x94
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ff7b 	bl	800088e <ft5336_write_reg>
 8000998:	4603      	mov	r3, r0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80009ae:	1cfa      	adds	r2, r7, #3
 80009b0:	2301      	movs	r3, #1
 80009b2:	2195      	movs	r1, #149	@ 0x95
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff6a 	bl	800088e <ft5336_write_reg>
 80009ba:	4603      	mov	r3, r0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80009d0:	1cfa      	adds	r2, r7, #3
 80009d2:	2301      	movs	r3, #1
 80009d4:	2196      	movs	r1, #150	@ 0x96
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ff59 	bl	800088e <ft5336_write_reg>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80009f2:	1cfa      	adds	r2, r7, #3
 80009f4:	2301      	movs	r3, #1
 80009f6:	21a4      	movs	r1, #164	@ 0xa4
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff ff48 	bl	800088e <ft5336_write_reg>
 80009fe:	4603      	mov	r3, r0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8000a12:	2301      	movs	r3, #1
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	21a8      	movs	r1, #168	@ 0xa8
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff21 	bl	8000860 <ft5336_read_reg>
 8000a1e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d107      	bne.n	8000a36 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a4e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f832 	bl	8000ac0 <MT48LC4M32B2_ClockEnable>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d128      	bne.n	8000ab4 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f000 f8e2 	bl	8000c2c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f84a 	bl	8000b08 <MT48LC4M32B2_Precharge>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d11c      	bne.n	8000ab4 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	6819      	ldr	r1, [r3, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	461a      	mov	r2, r3
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f897 	bl	8000bb8 <MT48LC4M32B2_RefreshMode>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d111      	bne.n	8000ab4 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8000a90:	6839      	ldr	r1, [r7, #0]
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f85c 	bl	8000b50 <MT48LC4M32B2_ModeRegConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10a      	bne.n	8000ab4 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 f8ad 	bl	8000c04 <MT48LC4M32B2_RefreshRate>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d101      	bne.n	8000ab4 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MT48LC4M32B2_ClockEnable+0x44>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b04 <MT48LC4M32B2_ClockEnable+0x44>)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <MT48LC4M32B2_ClockEnable+0x44>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MT48LC4M32B2_ClockEnable+0x44>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000ae2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae6:	4907      	ldr	r1, [pc, #28]	@ (8000b04 <MT48LC4M32B2_ClockEnable+0x44>)
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f00a fda1 	bl	800b630 <HAL_SDRAM_SendCommand>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000af8:	e000      	b.n	8000afc <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000afa:	2300      	movs	r3, #0
  }
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	240000ec 	.word	0x240000ec

08000b08 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MT48LC4M32B2_Precharge+0x44>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000b18:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <MT48LC4M32B2_Precharge+0x44>)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MT48LC4M32B2_Precharge+0x44>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MT48LC4M32B2_Precharge+0x44>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000b2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b2e:	4907      	ldr	r1, [pc, #28]	@ (8000b4c <MT48LC4M32B2_Precharge+0x44>)
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f00a fd7d 	bl	800b630 <HAL_SDRAM_SendCommand>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b40:	e000      	b.n	8000b44 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000b42:	2300      	movs	r3, #0
  }
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	240000ec 	.word	0x240000ec

08000b50 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000b62:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000b68:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000b6e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000b84:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000b8c:	4a09      	ldr	r2, [pc, #36]	@ (8000bb4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000b92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b96:	4907      	ldr	r1, [pc, #28]	@ (8000bb4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f00a fd49 	bl	800b630 <HAL_SDRAM_SendCommand>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ba8:	e000      	b.n	8000bac <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000baa:	2300      	movs	r3, #0
  }
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	240000ec 	.word	0x240000ec

08000bb8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <MT48LC4M32B2_RefreshMode+0x48>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000bca:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <MT48LC4M32B2_RefreshMode+0x48>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <MT48LC4M32B2_RefreshMode+0x48>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <MT48LC4M32B2_RefreshMode+0x48>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000bdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000be0:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <MT48LC4M32B2_RefreshMode+0x48>)
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f00a fd24 	bl	800b630 <HAL_SDRAM_SendCommand>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bf2:	e000      	b.n	8000bf6 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000bf4:	2300      	movs	r3, #0
  }
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	240000ec 	.word	0x240000ec

08000c04 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000c0e:	6839      	ldr	r1, [r7, #0]
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f00a fd42 	bl	800b69a <HAL_SDRAM_ProgramRefreshRate>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c20:	e000      	b.n	8000c24 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000c22:	2300      	movs	r3, #0
  }
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000c34:	f005 fd1a 	bl	800666c <HAL_GetTick>
 8000c38:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000c3a:	bf00      	nop
 8000c3c:	f005 fd16 	bl	800666c <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c5c:	af02      	add	r7, sp, #8
    /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7)
       in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
    */

    /* Enable the CPU Cache */
    CPU_CACHE_Enable();
 8000c5e:	f000 f961 	bl	8000f24 <CPU_CACHE_Enable>
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
       */
    HAL_Init();
 8000c62:	f005 fcb3 	bl	80065cc <HAL_Init>

    /* Configure the system clock to 400 MHz */
    SystemClock_Config();
 8000c66:	f000 f8bf 	bl	8000de8 <SystemClock_Config>

    BSP_LCD_InitEx(0, LCD_ORIENTATION_LANDSCAPE, LCD_PIXEL_FORMAT_RGB565, 480, 272);
 8000c6a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c74:	2202      	movs	r2, #2
 8000c76:	2101      	movs	r1, #1
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f001 fcfb 	bl	8002674 <BSP_LCD_InitEx>

    UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000c7e:	4853      	ldr	r0, [pc, #332]	@ (8000dcc <main+0x174>)
 8000c80:	f000 f9be 	bl	8001000 <UTIL_LCD_SetFuncDriver>

    // Real and true and real and true
    {
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
        RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	463b      	mov	r3, r7
 8000c96:	22c0      	movs	r2, #192	@ 0xc0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00b fb87 	bl	800c3ae <memset>

        __HAL_RCC_I2C4_CLK_ENABLE();
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd0 <main+0x178>)
 8000ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd0 <main+0x178>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cb0:	4b47      	ldr	r3, [pc, #284]	@ (8000dd0 <main+0x178>)
 8000cb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	4b43      	ldr	r3, [pc, #268]	@ (8000dd0 <main+0x178>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	4a41      	ldr	r2, [pc, #260]	@ (8000dd0 <main+0x178>)
 8000cca:	f043 0308 	orr.w	r3, r3, #8
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd0 <main+0x178>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000ce4:	f04f 0210 	mov.w	r2, #16
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e9c7 2300 	strd	r2, r3, [r7]
        PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_HSI;
 8000cf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f009 f8e4 	bl	8009ec8 <HAL_RCCEx_PeriphCLKConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <main+0xb2>
        {
            Error_Handler();
 8000d06:	f000 f905 	bl	8000f14 <Error_Handler>
        }

        GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8000d0a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d12:	2312      	movs	r3, #18
 8000d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4828      	ldr	r0, [pc, #160]	@ (8000dd4 <main+0x17c>)
 8000d32:	f006 f8cd 	bl	8006ed0 <HAL_GPIO_Init>

        hi2c4.Instance = I2C4;
 8000d36:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <main+0x180>)
 8000d38:	4a28      	ldr	r2, [pc, #160]	@ (8000ddc <main+0x184>)
 8000d3a:	601a      	str	r2, [r3, #0]
        hi2c4.Init.Timing = 0x10707DBC;
 8000d3c:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <main+0x180>)
 8000d3e:	4a28      	ldr	r2, [pc, #160]	@ (8000de0 <main+0x188>)
 8000d40:	605a      	str	r2, [r3, #4]
        hi2c4.Init.OwnAddress1 = 0;
 8000d42:	4b25      	ldr	r3, [pc, #148]	@ (8000dd8 <main+0x180>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
        hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d48:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <main+0x180>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	60da      	str	r2, [r3, #12]
        hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <main+0x180>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
        hi2c4.Init.OwnAddress2 = 0;
 8000d54:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <main+0x180>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
        hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <main+0x180>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
        hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <main+0x180>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
        hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <main+0x180>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
        if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d6c:	481a      	ldr	r0, [pc, #104]	@ (8000dd8 <main+0x180>)
 8000d6e:	f006 fb83 	bl	8007478 <HAL_I2C_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <main+0x124>
        {
            Error_Handler();
 8000d78:	f000 f8cc 	bl	8000f14 <Error_Handler>
        }

        if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4816      	ldr	r0, [pc, #88]	@ (8000dd8 <main+0x180>)
 8000d80:	f007 fbba 	bl	80084f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <main+0x136>
        {
            Error_Handler();
 8000d8a:	f000 f8c3 	bl	8000f14 <Error_Handler>
        }

        if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <main+0x180>)
 8000d92:	f007 fbfc 	bl	800858e <HAL_I2CEx_ConfigDigitalFilter>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <main+0x148>
        {
            Error_Handler();
 8000d9c:	f000 f8ba 	bl	8000f14 <Error_Handler>
        }
    }
    // Real and true and real and true
    LTDC->LIPCR = 284;
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <main+0x18c>)
 8000da2:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 8000da6:	641a      	str	r2, [r3, #64]	@ 0x40
    SET_BIT(LTDC->IER, LTDC_IER_LIE);
 8000da8:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <main+0x18c>)
 8000daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <main+0x18c>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6353      	str	r3, [r2, #52]	@ 0x34
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2058      	movs	r0, #88	@ 0x58
 8000dba:	f005 fd5b 	bl	8006874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000dbe:	2058      	movs	r0, #88	@ 0x58
 8000dc0:	f005 fd72 	bl	80068a8 <HAL_NVIC_EnableIRQ>

    AppMain();
 8000dc4:	f003 fefe 	bl	8004bc4 <AppMain>
    /* Wait For User inputs */
    while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <main+0x170>
 8000dcc:	0800dae0 	.word	0x0800dae0
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020c00 	.word	0x58020c00
 8000dd8:	240000fc 	.word	0x240000fc
 8000ddc:	58001c00 	.word	0x58001c00
 8000de0:	10707dbc 	.word	0x10707dbc
 8000de4:	50001000 	.word	0x50001000

08000de8 <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09e      	sub	sp, #120	@ 0x78
 8000dec:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;
    HAL_StatusTypeDef ret = HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    /*!< Supply configuration update enable */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000df4:	2002      	movs	r0, #2
 8000df6:	f008 f805 	bl	8008e04 <HAL_PWREx_ConfigSupply>

    /* The voltage scaling allows optimizing the power consumption when the device is
       clocked below the maximum system frequency, to update the voltage scaling value
       regarding system frequency refer to product datasheet.  */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b42      	ldr	r3, [pc, #264]	@ (8000f08 <SystemClock_Config+0x120>)
 8000e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e02:	4a41      	ldr	r2, [pc, #260]	@ (8000f08 <SystemClock_Config+0x120>)
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f08 <SystemClock_Config+0x120>)
 8000e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	4b3d      	ldr	r3, [pc, #244]	@ (8000f0c <SystemClock_Config+0x124>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a3c      	ldr	r2, [pc, #240]	@ (8000f0c <SystemClock_Config+0x124>)
 8000e1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b3a      	ldr	r3, [pc, #232]	@ (8000f0c <SystemClock_Config+0x124>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000e2c:	bf00      	nop
 8000e2e:	4b37      	ldr	r3, [pc, #220]	@ (8000f0c <SystemClock_Config+0x124>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e3a:	d1f8      	bne.n	8000e2e <SystemClock_Config+0x46>
    {
    }

    /* Enable HSE Oscillator and activate PLL with HSE as source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e44:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e52:	2302      	movs	r3, #2
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30

    RCC_OscInitStruct.PLL.PLLM = 5;
 8000e56:	2305      	movs	r3, #5
 8000e58:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLN = 160;
 8000e5a:	23a0      	movs	r3, #160	@ 0xa0
 8000e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLP = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	643b      	str	r3, [r7, #64]	@ 0x40

    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e72:	2308      	movs	r3, #8
 8000e74:	64bb      	str	r3, [r7, #72]	@ 0x48
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f007 fffc 	bl	8008e78 <HAL_RCC_OscConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 8000e86:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xaa>
    {
        Error_Handler();
 8000e8e:	f000 f841 	bl	8000f14 <Error_Handler>
    }

    /* Select PLL as system clock source and configure  bus clocks dividers */
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8000e92:	233f      	movs	r3, #63	@ 0x3f
 8000e94:	657b      	str	r3, [r7, #84]	@ 0x54
                                   RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1);

    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e96:	2303      	movs	r3, #3
 8000e98:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ea2:	2340      	movs	r3, #64	@ 0x40
 8000ea4:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ea6:	2340      	movs	r3, #64	@ 0x40
 8000ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eb0:	2340      	movs	r3, #64	@ 0x40
 8000eb2:	673b      	str	r3, [r7, #112]	@ 0x70
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000eb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f008 fc36 	bl	800972c <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 8000ec6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0xea>
    {
        Error_Handler();
 8000ece:	f000 f821 	bl	8000f14 <Error_Handler>
           - The activation of the SYSCFG clock
           - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
    */

    /*activate CSI clock mondatory for I/O Compensation Cell*/
    __HAL_RCC_CSI_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <SystemClock_Config+0x128>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f10 <SystemClock_Config+0x128>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000edc:	6013      	str	r3, [r2, #0]

    /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <SystemClock_Config+0x128>)
 8000ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <SystemClock_Config+0x128>)
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000eee:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <SystemClock_Config+0x128>)
 8000ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]

    /* Enables the I/O Compensation Cell */
    HAL_EnableCompensationCell();
 8000efc:	f005 fbf2 	bl	80066e4 <HAL_EnableCompensationCell>
}
 8000f00:	bf00      	nop
 8000f02:	3778      	adds	r7, #120	@ 0x78
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	58000400 	.word	0x58000400
 8000f0c:	58024800 	.word	0x58024800
 8000f10:	58024400 	.word	0x58024400

08000f14 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    /* Turn LED REDon */
    BSP_LED_On(LED_RED);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f000 ff25 	bl	8001d68 <BSP_LED_On>
    while (1)
 8000f1e:	bf00      	nop
 8000f20:	e7fd      	b.n	8000f1e <Error_Handler+0xa>
	...

08000f24 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2a:	4b34      	ldr	r3, [pc, #208]	@ (8000ffc <CPU_CACHE_Enable+0xd8>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d11b      	bne.n	8000f6e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f36:	f3bf 8f4f 	dsb	sy
}
 8000f3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3c:	f3bf 8f6f 	isb	sy
}
 8000f40:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f42:	4b2e      	ldr	r3, [pc, #184]	@ (8000ffc <CPU_CACHE_Enable+0xd8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4a:	f3bf 8f4f 	dsb	sy
}
 8000f4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f50:	f3bf 8f6f 	isb	sy
}
 8000f54:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f56:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <CPU_CACHE_Enable+0xd8>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a28      	ldr	r2, [pc, #160]	@ (8000ffc <CPU_CACHE_Enable+0xd8>)
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f62:	f3bf 8f4f 	dsb	sy
}
 8000f66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f68:	f3bf 8f6f 	isb	sy
}
 8000f6c:	e000      	b.n	8000f70 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f6e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f70:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <CPU_CACHE_Enable+0xd8>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d138      	bne.n	8000fee <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <CPU_CACHE_Enable+0xd8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f84:	f3bf 8f4f 	dsb	sy
}
 8000f88:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <CPU_CACHE_Enable+0xd8>)
 8000f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f90:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	0b5b      	lsrs	r3, r3, #13
 8000f96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f9a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	08db      	lsrs	r3, r3, #3
 8000fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fa4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	015a      	lsls	r2, r3, #5
 8000faa:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000fae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fb4:	4911      	ldr	r1, [pc, #68]	@ (8000ffc <CPU_CACHE_Enable+0xd8>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	1e5a      	subs	r2, r3, #1
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1ef      	bne.n	8000fa6 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	60ba      	str	r2, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1e5      	bne.n	8000f9c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd0:	f3bf 8f4f 	dsb	sy
}
 8000fd4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <CPU_CACHE_Enable+0xd8>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <CPU_CACHE_Enable+0xd8>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	e000      	b.n	8000ff0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000fee:	bf00      	nop
    /* Enable I-Cache */
    SCB_EnableICache();

    /* Enable D-Cache */
    SCB_EnableDCache();
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a22      	ldr	r2, [pc, #136]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 800100e:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4a20      	ldr	r2, [pc, #128]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 8001016:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4a1e      	ldr	r2, [pc, #120]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 800101e:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 8001026:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	4a1a      	ldr	r2, [pc, #104]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 800102e:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a18      	ldr	r2, [pc, #96]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 8001036:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a16      	ldr	r2, [pc, #88]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 800103e:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 8001046:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 800104e:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001054:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 8001056:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105c:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 800105e:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <UTIL_LCD_SetFuncDriver+0x9c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <UTIL_LCD_SetFuncDriver+0x9c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	4a0b      	ldr	r2, [pc, #44]	@ (80010a0 <UTIL_LCD_SetFuncDriver+0xa0>)
 8001072:	4611      	mov	r1, r2
 8001074:	2000      	movs	r0, #0
 8001076:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <UTIL_LCD_SetFuncDriver+0xa4>)
 800107e:	4611      	mov	r1, r2
 8001080:	2000      	movs	r0, #0
 8001082:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <UTIL_LCD_SetFuncDriver+0x98>)
 8001086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001088:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <UTIL_LCD_SetFuncDriver+0xa8>)
 800108a:	4611      	mov	r1, r2
 800108c:	2000      	movs	r0, #0
 800108e:	4798      	blx	r3
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	24000190 	.word	0x24000190
 800109c:	24000150 	.word	0x24000150
 80010a0:	24000164 	.word	0x24000164
 80010a4:	24000168 	.word	0x24000168
 80010a8:	2400016c 	.word	0x2400016c

080010ac <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <UTIL_LCD_SetTextColor+0x24>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <UTIL_LCD_SetTextColor+0x24>)
 80010ba:	015b      	lsls	r3, r3, #5
 80010bc:	4413      	add	r3, r2
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	24000150 	.word	0x24000150

080010d4 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <UTIL_LCD_SetBackColor+0x24>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <UTIL_LCD_SetBackColor+0x24>)
 80010e2:	015b      	lsls	r3, r3, #5
 80010e4:	4413      	add	r3, r2
 80010e6:	3304      	adds	r3, #4
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	24000150 	.word	0x24000150

080010fc <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <UTIL_LCD_SetFont+0x24>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <UTIL_LCD_SetFont+0x24>)
 800110a:	015b      	lsls	r3, r3, #5
 800110c:	4413      	add	r3, r2
 800110e:	3308      	adds	r3, #8
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	24000150 	.word	0x24000150

08001124 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b087      	sub	sp, #28
 8001128:	af02      	add	r7, sp, #8
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <UTIL_LCD_FillRGBRect+0x30>)
 8001134:	685c      	ldr	r4, [r3, #4]
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <UTIL_LCD_FillRGBRect+0x34>)
 8001138:	6918      	ldr	r0, [r3, #16]
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	47a0      	blx	r4
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	bf00      	nop
 8001154:	24000190 	.word	0x24000190
 8001158:	24000150 	.word	0x24000150

0800115c <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b087      	sub	sp, #28
 8001160:	af02      	add	r7, sp, #8
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <UTIL_LCD_DrawHLine+0x64>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d118      	bne.n	80011a4 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <UTIL_LCD_DrawHLine+0x68>)
 8001174:	689c      	ldr	r4, [r3, #8]
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <UTIL_LCD_DrawHLine+0x64>)
 8001178:	6918      	ldr	r0, [r3, #16]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	f003 021f 	and.w	r2, r3, #31
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	0a9b      	lsrs	r3, r3, #10
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800118c:	431a      	orrs	r2, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	0cdb      	lsrs	r3, r3, #19
 8001192:	02db      	lsls	r3, r3, #11
 8001194:	b29b      	uxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	68f9      	ldr	r1, [r7, #12]
 80011a0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80011a2:	e009      	b.n	80011b8 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <UTIL_LCD_DrawHLine+0x68>)
 80011a6:	689c      	ldr	r4, [r3, #8]
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <UTIL_LCD_DrawHLine+0x64>)
 80011aa:	6918      	ldr	r0, [r3, #16]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	68f9      	ldr	r1, [r7, #12]
 80011b6:	47a0      	blx	r4
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	24000150 	.word	0x24000150
 80011c4:	24000190 	.word	0x24000190

080011c8 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <UTIL_LCD_DrawVLine+0x64>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d118      	bne.n	8001210 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <UTIL_LCD_DrawVLine+0x68>)
 80011e0:	68dc      	ldr	r4, [r3, #12]
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <UTIL_LCD_DrawVLine+0x64>)
 80011e4:	6918      	ldr	r0, [r3, #16]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	f003 021f 	and.w	r2, r3, #31
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	0a9b      	lsrs	r3, r3, #10
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80011f8:	431a      	orrs	r2, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	0cdb      	lsrs	r3, r3, #19
 80011fe:	02db      	lsls	r3, r3, #11
 8001200:	b29b      	uxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 800120e:	e009      	b.n	8001224 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <UTIL_LCD_DrawVLine+0x68>)
 8001212:	68dc      	ldr	r4, [r3, #12]
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <UTIL_LCD_DrawVLine+0x64>)
 8001216:	6918      	ldr	r0, [r3, #16]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	68f9      	ldr	r1, [r7, #12]
 8001222:	47a0      	blx	r4
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	24000150 	.word	0x24000150
 8001230:	24000190 	.word	0x24000190

08001234 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8001234:	b5b0      	push	{r4, r5, r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	603a      	str	r2, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
 8001240:	460b      	mov	r3, r1
 8001242:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <UTIL_LCD_SetPixel+0x60>)
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d117      	bne.n	800127c <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <UTIL_LCD_SetPixel+0x64>)
 800124e:	699c      	ldr	r4, [r3, #24]
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <UTIL_LCD_SetPixel+0x60>)
 8001252:	6918      	ldr	r0, [r3, #16]
 8001254:	88f9      	ldrh	r1, [r7, #6]
 8001256:	88bd      	ldrh	r5, [r7, #4]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	08db      	lsrs	r3, r3, #3
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	0a9b      	lsrs	r3, r3, #10
 8001264:	015b      	lsls	r3, r3, #5
 8001266:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800126a:	431a      	orrs	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	0cdb      	lsrs	r3, r3, #19
 8001270:	02db      	lsls	r3, r3, #11
 8001272:	b29b      	uxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	462a      	mov	r2, r5
 8001278:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 800127a:	e007      	b.n	800128c <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <UTIL_LCD_SetPixel+0x64>)
 800127e:	699c      	ldr	r4, [r3, #24]
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <UTIL_LCD_SetPixel+0x60>)
 8001282:	6918      	ldr	r0, [r3, #16]
 8001284:	88f9      	ldrh	r1, [r7, #6]
 8001286:	88ba      	ldrh	r2, [r7, #4]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	47a0      	blx	r4
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bdb0      	pop	{r4, r5, r7, pc}
 8001294:	24000150 	.word	0x24000150
 8001298:	24000190 	.word	0x24000190

0800129c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <UTIL_LCD_Clear+0x28>)
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <UTIL_LCD_Clear+0x28>)
 80012aa:	6999      	ldr	r1, [r3, #24]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	460b      	mov	r3, r1
 80012b2:	2100      	movs	r1, #0
 80012b4:	2000      	movs	r0, #0
 80012b6:	f000 f9d1 	bl	800165c <UTIL_LCD_FillRect>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	24000150 	.word	0x24000150

080012c8 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	4613      	mov	r3, r2
 80012d4:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80012d6:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <UTIL_LCD_DisplayChar+0x68>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	4a15      	ldr	r2, [pc, #84]	@ (8001330 <UTIL_LCD_DisplayChar+0x68>)
 80012dc:	015b      	lsls	r3, r3, #5
 80012de:	4413      	add	r3, r2
 80012e0:	3308      	adds	r3, #8
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80012ea:	4911      	ldr	r1, [pc, #68]	@ (8001330 <UTIL_LCD_DisplayChar+0x68>)
 80012ec:	68c9      	ldr	r1, [r1, #12]
 80012ee:	4810      	ldr	r0, [pc, #64]	@ (8001330 <UTIL_LCD_DisplayChar+0x68>)
 80012f0:	0149      	lsls	r1, r1, #5
 80012f2:	4401      	add	r1, r0
 80012f4:	3108      	adds	r1, #8
 80012f6:	6809      	ldr	r1, [r1, #0]
 80012f8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80012fa:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <UTIL_LCD_DisplayChar+0x68>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	480b      	ldr	r0, [pc, #44]	@ (8001330 <UTIL_LCD_DisplayChar+0x68>)
 8001304:	015b      	lsls	r3, r3, #5
 8001306:	4403      	add	r3, r0
 8001308:	3308      	adds	r3, #8
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	889b      	ldrh	r3, [r3, #4]
 800130e:	3307      	adds	r3, #7
 8001310:	2b00      	cmp	r3, #0
 8001312:	da00      	bge.n	8001316 <UTIL_LCD_DisplayChar+0x4e>
 8001314:	3307      	adds	r3, #7
 8001316:	10db      	asrs	r3, r3, #3
 8001318:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800131c:	4413      	add	r3, r2
 800131e:	461a      	mov	r2, r3
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 fafa 	bl	800191c <DrawChar>
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	24000150 	.word	0x24000150

08001334 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8001342:	2301      	movs	r3, #1
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001356:	e002      	b.n	800135e <UTIL_LCD_DisplayStringAt+0x2a>
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	3301      	adds	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	61ba      	str	r2, [r7, #24]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f6      	bne.n	8001358 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800136a:	4b48      	ldr	r3, [pc, #288]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a47      	ldr	r2, [pc, #284]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 8001370:	68d2      	ldr	r2, [r2, #12]
 8001372:	4946      	ldr	r1, [pc, #280]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 8001374:	0152      	lsls	r2, r2, #5
 8001376:	440a      	add	r2, r1
 8001378:	3208      	adds	r2, #8
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	8892      	ldrh	r2, [r2, #4]
 800137e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d018      	beq.n	80013bc <UTIL_LCD_DisplayStringAt+0x88>
 800138a:	2b03      	cmp	r3, #3
 800138c:	dc2a      	bgt.n	80013e4 <UTIL_LCD_DisplayStringAt+0xb0>
 800138e:	2b01      	cmp	r3, #1
 8001390:	d002      	beq.n	8001398 <UTIL_LCD_DisplayStringAt+0x64>
 8001392:	2b02      	cmp	r3, #2
 8001394:	d015      	beq.n	80013c2 <UTIL_LCD_DisplayStringAt+0x8e>
 8001396:	e025      	b.n	80013e4 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4a3b      	ldr	r2, [pc, #236]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 80013a0:	68d2      	ldr	r2, [r2, #12]
 80013a2:	493a      	ldr	r1, [pc, #232]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 80013a4:	0152      	lsls	r2, r2, #5
 80013a6:	440a      	add	r2, r1
 80013a8:	3208      	adds	r2, #8
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	8892      	ldrh	r2, [r2, #4]
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	085b      	lsrs	r3, r3, #1
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80013ba:	e016      	b.n	80013ea <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80013c0:	e013      	b.n	80013ea <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a30      	ldr	r2, [pc, #192]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 80013ca:	68d2      	ldr	r2, [r2, #12]
 80013cc:	492f      	ldr	r1, [pc, #188]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 80013ce:	0152      	lsls	r2, r2, #5
 80013d0:	440a      	add	r2, r1
 80013d2:	3208      	adds	r2, #8
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	8892      	ldrh	r2, [r2, #4]
 80013d8:	fb03 f202 	mul.w	r2, r3, r2
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80013e2:	e002      	b.n	80013ea <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80013e8:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <UTIL_LCD_DisplayStringAt+0xc4>
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80013f6:	d31b      	bcc.n	8001430 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80013fc:	e018      	b.n	8001430 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001408:	f7ff ff5e 	bl	80012c8 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 800140c:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 8001412:	015b      	lsls	r3, r3, #5
 8001414:	4413      	add	r3, r2
 8001416:	3308      	adds	r3, #8
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	889b      	ldrh	r3, [r3, #4]
 800141c:	461a      	mov	r2, r3
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	4413      	add	r3, r2
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3301      	adds	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
    i++;
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	3301      	adds	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 8001440:	6959      	ldr	r1, [r3, #20]
 8001442:	4b12      	ldr	r3, [pc, #72]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	4811      	ldr	r0, [pc, #68]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 8001448:	015b      	lsls	r3, r3, #5
 800144a:	4403      	add	r3, r0
 800144c:	3308      	adds	r3, #8
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	889b      	ldrh	r3, [r3, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	fb00 f303 	mul.w	r3, r0, r3
 800145a:	1acb      	subs	r3, r1, r3
 800145c:	b29b      	uxth	r3, r3
 800145e:	490b      	ldr	r1, [pc, #44]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 8001460:	68c9      	ldr	r1, [r1, #12]
 8001462:	480a      	ldr	r0, [pc, #40]	@ (800148c <UTIL_LCD_DisplayStringAt+0x158>)
 8001464:	0149      	lsls	r1, r1, #5
 8001466:	4401      	add	r1, r0
 8001468:	3108      	adds	r1, #8
 800146a:	6809      	ldr	r1, [r1, #0]
 800146c:	8889      	ldrh	r1, [r1, #4]
 800146e:	428b      	cmp	r3, r1
 8001470:	bf2c      	ite	cs
 8001472:	2301      	movcs	r3, #1
 8001474:	2300      	movcc	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4013      	ands	r3, r2
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1be      	bne.n	80013fe <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	@ 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	24000150 	.word	0x24000150

08001490 <UTIL_LCD_DrawLine>:
  * @param  Xpos2 Point 2 X position
  * @param  Ypos2 Point 2 Y position
  * @param  Color Draw color
  */
void UTIL_LCD_DrawLine(uint32_t Xpos1, uint32_t Ypos1, uint32_t Xpos2, uint32_t Ypos2, uint32_t Color)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08e      	sub	sp, #56	@ 0x38
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 800149e:	2300      	movs	r3, #0
 80014a0:	843b      	strh	r3, [r7, #32]
 80014a2:	2300      	movs	r3, #0
 80014a4:	83fb      	strh	r3, [r7, #30]
 80014a6:	2300      	movs	r3, #0
 80014a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80014aa:	2300      	movs	r3, #0
 80014ac:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80014ae:	2300      	movs	r3, #0
 80014b0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80014b2:	2300      	movs	r3, #0
 80014b4:	863b      	strh	r3, [r7, #48]	@ 0x30
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 80014b6:	2300      	movs	r3, #0
 80014b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80014ba:	2300      	movs	r3, #0
 80014bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80014be:	2300      	movs	r3, #0
 80014c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80014c2:	2300      	movs	r3, #0
 80014c4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80014c6:	2300      	movs	r3, #0
 80014c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80014ca:	2300      	movs	r3, #0
 80014cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  curpixel = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	847b      	strh	r3, [r7, #34]	@ 0x22
  int32_t x_diff, y_diff;

  x_diff = Xpos2 - Xpos1;
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	61bb      	str	r3, [r7, #24]
  y_diff = Ypos2 - Ypos1;
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	617b      	str	r3, [r7, #20]

  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bfb8      	it	lt
 80014e8:	425b      	neglt	r3, r3
 80014ea:	843b      	strh	r3, [r7, #32]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	bfb8      	it	lt
 80014f2:	425b      	neglt	r3, r3
 80014f4:	83fb      	strh	r3, [r7, #30]
  x = Xpos1;                       /* Start x off at the first pixel */
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
  y = Ypos1;                       /* Start y off at the first pixel */
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	86bb      	strh	r3, [r7, #52]	@ 0x34

  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	429a      	cmp	r2, r3
 8001504:	d304      	bcc.n	8001510 <UTIL_LCD_DrawLine+0x80>
  {
    xinc1 = 1;
 8001506:	2301      	movs	r3, #1
 8001508:	867b      	strh	r3, [r7, #50]	@ 0x32
    xinc2 = 1;
 800150a:	2301      	movs	r3, #1
 800150c:	863b      	strh	r3, [r7, #48]	@ 0x30
 800150e:	e005      	b.n	800151c <UTIL_LCD_DrawLine+0x8c>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8001510:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001514:	867b      	strh	r3, [r7, #50]	@ 0x32
    xinc2 = -1;
 8001516:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800151a:	863b      	strh	r3, [r7, #48]	@ 0x30
  }

  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	429a      	cmp	r2, r3
 8001522:	d304      	bcc.n	800152e <UTIL_LCD_DrawLine+0x9e>
  {
    yinc1 = 1;
 8001524:	2301      	movs	r3, #1
 8001526:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    yinc2 = 1;
 8001528:	2301      	movs	r3, #1
 800152a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800152c:	e005      	b.n	800153a <UTIL_LCD_DrawLine+0xaa>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800152e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001532:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    yinc2 = -1;
 8001534:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001538:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800153a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800153e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001542:	429a      	cmp	r2, r3
 8001544:	db11      	blt.n	800156a <UTIL_LCD_DrawLine+0xda>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8001546:	2300      	movs	r3, #0
 8001548:	867b      	strh	r3, [r7, #50]	@ 0x32
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800154a:	2300      	movs	r3, #0
 800154c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    den = deltax;
 800154e:	8c3b      	ldrh	r3, [r7, #32]
 8001550:	857b      	strh	r3, [r7, #42]	@ 0x2a
    num = deltax / 2;
 8001552:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001556:	2b00      	cmp	r3, #0
 8001558:	da00      	bge.n	800155c <UTIL_LCD_DrawLine+0xcc>
 800155a:	3301      	adds	r3, #1
 800155c:	105b      	asrs	r3, r3, #1
 800155e:	853b      	strh	r3, [r7, #40]	@ 0x28
    numadd = deltay;
 8001560:	8bfb      	ldrh	r3, [r7, #30]
 8001562:	84fb      	strh	r3, [r7, #38]	@ 0x26
    numpixels = deltax;         /* There are more x-values than y-values */
 8001564:	8c3b      	ldrh	r3, [r7, #32]
 8001566:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001568:	e010      	b.n	800158c <UTIL_LCD_DrawLine+0xfc>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800156a:	2300      	movs	r3, #0
 800156c:	863b      	strh	r3, [r7, #48]	@ 0x30
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800156e:	2300      	movs	r3, #0
 8001570:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    den = deltay;
 8001572:	8bfb      	ldrh	r3, [r7, #30]
 8001574:	857b      	strh	r3, [r7, #42]	@ 0x2a
    num = deltay / 2;
 8001576:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800157a:	2b00      	cmp	r3, #0
 800157c:	da00      	bge.n	8001580 <UTIL_LCD_DrawLine+0xf0>
 800157e:	3301      	adds	r3, #1
 8001580:	105b      	asrs	r3, r3, #1
 8001582:	853b      	strh	r3, [r7, #40]	@ 0x28
    numadd = deltax;
 8001584:	8c3b      	ldrh	r3, [r7, #32]
 8001586:	84fb      	strh	r3, [r7, #38]	@ 0x26
    numpixels = deltay;         /* There are more y-values than x-values */
 8001588:	8bfb      	ldrh	r3, [r7, #30]
 800158a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800158c:	2300      	movs	r3, #0
 800158e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001590:	e02f      	b.n	80015f2 <UTIL_LCD_DrawLine+0x162>
  {
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 8001592:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001594:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8001596:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fe4b 	bl	8001234 <UTIL_LCD_SetPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800159e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80015a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015a2:	4413      	add	r3, r2
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	853b      	strh	r3, [r7, #40]	@ 0x28
    if (num >= den)                           /* Check if numerator >= denominator */
 80015a8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80015ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80015b0:	429a      	cmp	r2, r3
 80015b2:	db0e      	blt.n	80015d2 <UTIL_LCD_DrawLine+0x142>
    {
      num -= den;                             /* Calculate the new numerator value */
 80015b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80015b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	853b      	strh	r3, [r7, #40]	@ 0x28
      x += xinc1;                             /* Change the x as appropriate */
 80015be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80015c0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80015c2:	4413      	add	r3, r2
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
      y += yinc1;                             /* Change the y as appropriate */
 80015c8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80015ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80015cc:	4413      	add	r3, r2
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    x += xinc2;                               /* Change the x as appropriate */
 80015d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80015d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015d6:	4413      	add	r3, r2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	86fb      	strh	r3, [r7, #54]	@ 0x36
    y += yinc2;                               /* Change the y as appropriate */
 80015dc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80015de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80015e0:	4413      	add	r3, r2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	86bb      	strh	r3, [r7, #52]	@ 0x34
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80015e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80015f2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80015f6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015fa:	429a      	cmp	r2, r3
 80015fc:	ddc9      	ble.n	8001592 <UTIL_LCD_DrawLine+0x102>
  }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3738      	adds	r7, #56	@ 0x38
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff fd9d 	bl	800115c <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	4413      	add	r3, r2
 8001628:	1e59      	subs	r1, r3, #1
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f7ff fd94 	bl	800115c <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff fdc4 	bl	80011c8 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	1e58      	subs	r0, r3, #1
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	f7ff fdbb 	bl	80011c8 <UTIL_LCD_DrawVLine>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b087      	sub	sp, #28
 8001660:	af02      	add	r7, sp, #8
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <UTIL_LCD_FillRect+0x6c>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d11a      	bne.n	80016a8 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <UTIL_LCD_FillRect+0x70>)
 8001674:	691c      	ldr	r4, [r3, #16]
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <UTIL_LCD_FillRect+0x6c>)
 8001678:	6918      	ldr	r0, [r3, #16]
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	f003 021f 	and.w	r2, r3, #31
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	0a9b      	lsrs	r3, r3, #10
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800168c:	431a      	orrs	r2, r3
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	0cdb      	lsrs	r3, r3, #19
 8001692:	02db      	lsls	r3, r3, #11
 8001694:	b29b      	uxth	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80016a6:	e00b      	b.n	80016c0 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <UTIL_LCD_FillRect+0x70>)
 80016aa:	691c      	ldr	r4, [r3, #16]
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <UTIL_LCD_FillRect+0x6c>)
 80016ae:	6918      	ldr	r0, [r3, #16]
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	68f9      	ldr	r1, [r7, #12]
 80016be:	47a0      	blx	r4
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	24000150 	.word	0x24000150
 80016cc:	24000190 	.word	0x24000190

080016d0 <UTIL_LCD_FillPolygon>:
  * @param  Points     Pointer to the points array
  * @param  PointCount Number of points
  * @param  Color      Draw color
  */
void UTIL_LCD_FillPolygon(pPoint Points, uint32_t PointCount, uint32_t Color)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	@ 0x50
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, x_center = 0, y_center = 0, x_first = 0, y_first = 0, pixel_x = 0, pixel_y = 0, counter = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80016e0:	2300      	movs	r3, #0
 80016e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80016f0:	2300      	movs	r3, #0
 80016f2:	867b      	strh	r3, [r7, #50]	@ 0x32
 80016f4:	2300      	movs	r3, #0
 80016f6:	863b      	strh	r3, [r7, #48]	@ 0x30
 80016f8:	2300      	movs	r3, #0
 80016fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80016fc:	2300      	movs	r3, #0
 80016fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001700:	2300      	movs	r3, #0
 8001702:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001704:	2300      	movs	r3, #0
 8001706:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001708:	2300      	movs	r3, #0
 800170a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  uint32_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	647b      	str	r3, [r7, #68]	@ 0x44
 8001712:	2300      	movs	r3, #0
 8001714:	643b      	str	r3, [r7, #64]	@ 0x40
 8001716:	2300      	movs	r3, #0
 8001718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800171a:	2300      	movs	r3, #0
 800171c:	63bb      	str	r3, [r7, #56]	@ 0x38
  Triangle_Positions_t positions;

  image_left = image_right = Points->X;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	643b      	str	r3, [r7, #64]	@ 0x40
 8001726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001728:	647b      	str	r3, [r7, #68]	@ 0x44
  image_top= image_bottom = Points->Y;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001734:	63fb      	str	r3, [r7, #60]	@ 0x3c

  for(counter = 1; counter < PointCount; counter++)
 8001736:	2301      	movs	r3, #1
 8001738:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800173c:	e034      	b.n	80017a8 <UTIL_LCD_FillPolygon+0xd8>
  {
    pixel_x = POLY_X(counter);
 800173e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if(pixel_x < image_left)
 800174c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001752:	429a      	cmp	r2, r3
 8001754:	d902      	bls.n	800175c <UTIL_LCD_FillPolygon+0x8c>
    {
      image_left = pixel_x;
 8001756:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800175a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if(pixel_x > image_right)
 800175c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001760:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001762:	429a      	cmp	r2, r3
 8001764:	d202      	bcs.n	800176c <UTIL_LCD_FillPolygon+0x9c>
    {
      image_right = pixel_x;
 8001766:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800176a:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    pixel_y = POLY_Y(counter);
 800176c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	885b      	ldrh	r3, [r3, #2]
 8001778:	853b      	strh	r3, [r7, #40]	@ 0x28
    if(pixel_y < image_top)
 800177a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800177e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001780:	429a      	cmp	r2, r3
 8001782:	d902      	bls.n	800178a <UTIL_LCD_FillPolygon+0xba>
    {
      image_top = pixel_y;
 8001784:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001788:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    if(pixel_y > image_bottom)
 800178a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800178e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001790:	429a      	cmp	r2, r3
 8001792:	d202      	bcs.n	800179a <UTIL_LCD_FillPolygon+0xca>
    {
      image_bottom = pixel_y;
 8001794:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001798:	63bb      	str	r3, [r7, #56]	@ 0x38
  for(counter = 1; counter < PointCount; counter++)
 800179a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80017a8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d8c5      	bhi.n	800173e <UTIL_LCD_FillPolygon+0x6e>
    }
  }

  if(PointCount < 2)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	f240 80ad 	bls.w	8001914 <UTIL_LCD_FillPolygon+0x244>
  {
    return;
  }

  x_center = (image_left + image_right)/2;
 80017ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80017bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017be:	4413      	add	r3, r2
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	867b      	strh	r3, [r7, #50]	@ 0x32
  y_center = (image_bottom + image_top)/2;
 80017c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017c8:	4413      	add	r3, r2
 80017ca:	085b      	lsrs	r3, r3, #1
 80017cc:	863b      	strh	r3, [r7, #48]	@ 0x30

  x_first = Points->X;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  y_first = Points->Y;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	885b      	ldrh	r3, [r3, #2]
 80017d8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  while(--PointCount)
 80017da:	e052      	b.n	8001882 <UTIL_LCD_FillPolygon+0x1b2>
  {
    X = Points->X;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    Y = Points->Y;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	885b      	ldrh	r3, [r3, #2]
 80017e6:	86bb      	strh	r3, [r7, #52]	@ 0x34
    Points++;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3304      	adds	r3, #4
 80017ec:	60fb      	str	r3, [r7, #12]
    X2 = Points->X;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    Y2 = Points->Y;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	885b      	ldrh	r3, [r3, #2]
 80017fa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    positions.x1 = X;
 80017fe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001802:	613b      	str	r3, [r7, #16]
    positions.y1 = Y;
 8001804:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001808:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 800180a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800180e:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 8001810:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001814:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_center;
 8001816:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800181a:	623b      	str	r3, [r7, #32]
    positions.y3 = y_center;
 800181c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f9d1 	bl	8001bd0 <FillTriangle>

    positions.x2 = x_center;
 800182e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001832:	61bb      	str	r3, [r7, #24]
    positions.y2 = y_center;
 8001834:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001838:	61fb      	str	r3, [r7, #28]
    positions.x3 = X2;
 800183a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800183e:	623b      	str	r3, [r7, #32]
    positions.y3 = Y2;
 8001840:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f9bf 	bl	8001bd0 <FillTriangle>

    positions.x1 = x_center;
 8001852:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001856:	613b      	str	r3, [r7, #16]
    positions.y1 = y_center;
 8001858:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800185c:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 800185e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8001862:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 8001864:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001868:	61fb      	str	r3, [r7, #28]
    positions.x3 = X;
 800186a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800186e:	623b      	str	r3, [r7, #32]
    positions.y3 = Y;
 8001870:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 f9a7 	bl	8001bd0 <FillTriangle>
  while(--PointCount)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3b01      	subs	r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1a6      	bne.n	80017dc <UTIL_LCD_FillPolygon+0x10c>
  }

    positions.x1 = x_first;
 800188e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001892:	613b      	str	r3, [r7, #16]
    positions.y1 = y_first;
 8001894:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001898:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 800189a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800189e:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 80018a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80018a4:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_center;
 80018a6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80018aa:	623b      	str	r3, [r7, #32]
    positions.y3 = y_center;
 80018ac:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80018b0:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f989 	bl	8001bd0 <FillTriangle>

    positions.x2 = x_center;
 80018be:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80018c2:	61bb      	str	r3, [r7, #24]
    positions.y2 = y_center;
 80018c4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80018c8:	61fb      	str	r3, [r7, #28]
    positions.x3 = X2;
 80018ca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80018ce:	623b      	str	r3, [r7, #32]
    positions.y3 = Y2;
 80018d0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 80018d6:	f107 0310 	add.w	r3, r7, #16
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f977 	bl	8001bd0 <FillTriangle>

    positions.x1 = x_center;
 80018e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80018e6:	613b      	str	r3, [r7, #16]
    positions.y1 = y_center;
 80018e8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80018ec:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 80018ee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80018f2:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 80018f4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80018f8:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_first;
 80018fa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80018fe:	623b      	str	r3, [r7, #32]
    positions.y3 = y_first;
 8001900:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 8001906:	f107 0310 	add.w	r3, r7, #16
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f95f 	bl	8001bd0 <FillTriangle>
 8001912:	e000      	b.n	8001916 <UTIL_LCD_FillPolygon+0x246>
    return;
 8001914:	bf00      	nop
}
 8001916:	3750      	adds	r7, #80	@ 0x50
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0b2      	sub	sp, #200	@ 0xc8
 8001920:	af02      	add	r7, sp, #8
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001934:	4ba5      	ldr	r3, [pc, #660]	@ (8001bcc <DrawChar+0x2b0>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4aa4      	ldr	r2, [pc, #656]	@ (8001bcc <DrawChar+0x2b0>)
 800193a:	015b      	lsls	r3, r3, #5
 800193c:	4413      	add	r3, r2
 800193e:	3308      	adds	r3, #8
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	88db      	ldrh	r3, [r3, #6]
 8001944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001948:	4ba0      	ldr	r3, [pc, #640]	@ (8001bcc <DrawChar+0x2b0>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a9f      	ldr	r2, [pc, #636]	@ (8001bcc <DrawChar+0x2b0>)
 800194e:	015b      	lsls	r3, r3, #5
 8001950:	4413      	add	r3, r2
 8001952:	3308      	adds	r3, #8
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	889b      	ldrh	r3, [r3, #4]
 8001958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 800195c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001960:	3307      	adds	r3, #7
 8001962:	f023 0207 	bic.w	r2, r3, #7
 8001966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001976:	e11c      	b.n	8001bb2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8001978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800197c:	3307      	adds	r3, #7
 800197e:	08db      	lsrs	r3, r3, #3
 8001980:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001984:	fb02 f303 	mul.w	r3, r2, r3
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 8001990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001994:	3307      	adds	r3, #7
 8001996:	08db      	lsrs	r3, r3, #3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d002      	beq.n	80019a2 <DrawChar+0x86>
 800199c:	2b02      	cmp	r3, #2
 800199e:	d006      	beq.n	80019ae <DrawChar+0x92>
 80019a0:	e011      	b.n	80019c6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 80019a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80019ac:	e01d      	b.n	80019ea <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80019ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80019ba:	3201      	adds	r2, #1
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80019c4:	e011      	b.n	80019ea <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80019c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	041a      	lsls	r2, r3, #16
 80019ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019d2:	3301      	adds	r3, #1
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	4313      	orrs	r3, r2
 80019da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80019de:	3202      	adds	r2, #2
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80019e8:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80019ea:	4b78      	ldr	r3, [pc, #480]	@ (8001bcc <DrawChar+0x2b0>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	4a77      	ldr	r2, [pc, #476]	@ (8001bcc <DrawChar+0x2b0>)
 80019f0:	015b      	lsls	r3, r3, #5
 80019f2:	4413      	add	r3, r2
 80019f4:	331c      	adds	r3, #28
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	f040 808c 	bne.w	8001b16 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a04:	e074      	b.n	8001af0 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001a06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001a0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a0e:	1ad2      	subs	r2, r2, r3
 8001a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a14:	4413      	add	r3, r2
 8001a16:	3b01      	subs	r3, #1
 8001a18:	2201      	movs	r2, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d02d      	beq.n	8001a86 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8001a2a:	4b68      	ldr	r3, [pc, #416]	@ (8001bcc <DrawChar+0x2b0>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4a67      	ldr	r2, [pc, #412]	@ (8001bcc <DrawChar+0x2b0>)
 8001a30:	015b      	lsls	r3, r3, #5
 8001a32:	4413      	add	r3, r2
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	08db      	lsrs	r3, r3, #3
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b62      	ldr	r3, [pc, #392]	@ (8001bcc <DrawChar+0x2b0>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4961      	ldr	r1, [pc, #388]	@ (8001bcc <DrawChar+0x2b0>)
 8001a46:	015b      	lsls	r3, r3, #5
 8001a48:	440b      	add	r3, r1
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0a9b      	lsrs	r3, r3, #10
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	015b      	lsls	r3, r3, #5
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bcc <DrawChar+0x2b0>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	495a      	ldr	r1, [pc, #360]	@ (8001bcc <DrawChar+0x2b0>)
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	440b      	add	r3, r1
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0cdb      	lsrs	r3, r3, #19
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	02db      	lsls	r3, r3, #11
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	33c0      	adds	r3, #192	@ 0xc0
 8001a7e:	443b      	add	r3, r7
 8001a80:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8001a84:	e02f      	b.n	8001ae6 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8001a86:	4b51      	ldr	r3, [pc, #324]	@ (8001bcc <DrawChar+0x2b0>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4a50      	ldr	r2, [pc, #320]	@ (8001bcc <DrawChar+0x2b0>)
 8001a8c:	015b      	lsls	r3, r3, #5
 8001a8e:	4413      	add	r3, r2
 8001a90:	3304      	adds	r3, #4
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001bcc <DrawChar+0x2b0>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	494a      	ldr	r1, [pc, #296]	@ (8001bcc <DrawChar+0x2b0>)
 8001aa4:	015b      	lsls	r3, r3, #5
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0a9b      	lsrs	r3, r3, #10
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	015b      	lsls	r3, r3, #5
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	4b43      	ldr	r3, [pc, #268]	@ (8001bcc <DrawChar+0x2b0>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4942      	ldr	r1, [pc, #264]	@ (8001bcc <DrawChar+0x2b0>)
 8001ac4:	015b      	lsls	r3, r3, #5
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3304      	adds	r3, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0cdb      	lsrs	r3, r3, #19
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	02db      	lsls	r3, r3, #11
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	33c0      	adds	r3, #192	@ 0xc0
 8001ae0:	443b      	add	r3, r7
 8001ae2:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8001ae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001aea:	3301      	adds	r3, #1
 8001aec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001af0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d384      	bcc.n	8001a06 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	1c4b      	adds	r3, r1, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001b06:	2301      	movs	r3, #1
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff fb08 	bl	8001124 <UTIL_LCD_FillRGBRect>
 8001b14:	e048      	b.n	8001ba8 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001b1c:	e032      	b.n	8001b84 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001b1e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b26:	1ad2      	subs	r2, r2, r3
 8001b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	2201      	movs	r2, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00d      	beq.n	8001b5e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8001b42:	4b22      	ldr	r3, [pc, #136]	@ (8001bcc <DrawChar+0x2b0>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	4a21      	ldr	r2, [pc, #132]	@ (8001bcc <DrawChar+0x2b0>)
 8001b48:	015b      	lsls	r3, r3, #5
 8001b4a:	4413      	add	r3, r2
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	33c0      	adds	r3, #192	@ 0xc0
 8001b56:	443b      	add	r3, r7
 8001b58:	f843 2cac 	str.w	r2, [r3, #-172]
 8001b5c:	e00d      	b.n	8001b7a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <DrawChar+0x2b0>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	4a1a      	ldr	r2, [pc, #104]	@ (8001bcc <DrawChar+0x2b0>)
 8001b64:	015b      	lsls	r3, r3, #5
 8001b66:	4413      	add	r3, r2
 8001b68:	3304      	adds	r3, #4
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	33c0      	adds	r3, #192	@ 0xc0
 8001b74:	443b      	add	r3, r7
 8001b76:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8001b7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001b84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d3c6      	bcc.n	8001b1e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	1c4b      	adds	r3, r1, #1
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	f107 0214 	add.w	r2, r7, #20
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7ff fabe 	bl	8001124 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8001ba8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bac:	3301      	adds	r3, #1
 8001bae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001bb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	f4ff aedc 	bcc.w	8001978 <DrawChar+0x5c>
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	37c0      	adds	r7, #192	@ 0xc0
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	24000150 	.word	0x24000150

08001bd0 <FillTriangle>:
  * @brief  Fills a triangle (between 3 points).
  * @param  Positions  pointer to riangle coordinates
  * @param  Color      Draw color
  */
static void FillTriangle(Triangle_Positions_t *Positions, uint32_t Color)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b08f      	sub	sp, #60	@ 0x3c
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8001bda:	2300      	movs	r3, #0
 8001bdc:	833b      	strh	r3, [r7, #24]
 8001bde:	2300      	movs	r3, #0
 8001be0:	82fb      	strh	r3, [r7, #22]
 8001be2:	2300      	movs	r3, #0
 8001be4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001be6:	2300      	movs	r3, #0
 8001be8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001bea:	2300      	movs	r3, #0
 8001bec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001bee:	2300      	movs	r3, #0
 8001bf0:	853b      	strh	r3, [r7, #40]	@ 0x28
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001bfe:	2300      	movs	r3, #0
 8001c00:	843b      	strh	r3, [r7, #32]
 8001c02:	2300      	movs	r3, #0
 8001c04:	83fb      	strh	r3, [r7, #30]
 8001c06:	2300      	movs	r3, #0
 8001c08:	83bb      	strh	r3, [r7, #28]
  curpixel = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	837b      	strh	r3, [r7, #26]
  int32_t x_diff, y_diff;

  x_diff = Positions->x2 - Positions->x1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	613b      	str	r3, [r7, #16]
  y_diff = Positions->y2 - Positions->y1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	60fb      	str	r3, [r7, #12]

  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bfb8      	it	lt
 8001c2c:	425b      	neglt	r3, r3
 8001c2e:	833b      	strh	r3, [r7, #24]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bfb8      	it	lt
 8001c36:	425b      	neglt	r3, r3
 8001c38:	82fb      	strh	r3, [r7, #22]
  x = Positions->x1;                       /* Start x off at the first pixel */
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  y = Positions->y1;                       /* Start y off at the first pixel */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  if (Positions->x2 >= Positions->x1)                 /* The x-values are increasing */
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d304      	bcc.n	8001c5c <FillTriangle+0x8c>
  {
    xinc1 = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	857b      	strh	r3, [r7, #42]	@ 0x2a
    xinc2 = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001c5a:	e005      	b.n	8001c68 <FillTriangle+0x98>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8001c5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c60:	857b      	strh	r3, [r7, #42]	@ 0x2a
    xinc2 = -1;
 8001c62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c66:	853b      	strh	r3, [r7, #40]	@ 0x28
  }

  if (Positions->y2 >= Positions->y1)                 /* The y-values are increasing */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d304      	bcc.n	8001c7e <FillTriangle+0xae>
  {
    yinc1 = 1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	84fb      	strh	r3, [r7, #38]	@ 0x26
    yinc2 = 1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c7c:	e005      	b.n	8001c8a <FillTriangle+0xba>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8001c7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c82:	84fb      	strh	r3, [r7, #38]	@ 0x26
    yinc2 = -1;
 8001c84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c88:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8001c8a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	db11      	blt.n	8001cba <FillTriangle+0xea>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8001c96:	2300      	movs	r3, #0
 8001c98:	857b      	strh	r3, [r7, #42]	@ 0x2a
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    den = deltax;
 8001c9e:	8b3b      	ldrh	r3, [r7, #24]
 8001ca0:	847b      	strh	r3, [r7, #34]	@ 0x22
    num = deltax / 2;
 8001ca2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da00      	bge.n	8001cac <FillTriangle+0xdc>
 8001caa:	3301      	adds	r3, #1
 8001cac:	105b      	asrs	r3, r3, #1
 8001cae:	843b      	strh	r3, [r7, #32]
    numadd = deltay;
 8001cb0:	8afb      	ldrh	r3, [r7, #22]
 8001cb2:	83fb      	strh	r3, [r7, #30]
    numpixels = deltax;         /* There are more x-values than y-values */
 8001cb4:	8b3b      	ldrh	r3, [r7, #24]
 8001cb6:	83bb      	strh	r3, [r7, #28]
 8001cb8:	e010      	b.n	8001cdc <FillTriangle+0x10c>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8001cba:	2300      	movs	r3, #0
 8001cbc:	853b      	strh	r3, [r7, #40]	@ 0x28
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    den = deltay;
 8001cc2:	8afb      	ldrh	r3, [r7, #22]
 8001cc4:	847b      	strh	r3, [r7, #34]	@ 0x22
    num = deltay / 2;
 8001cc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da00      	bge.n	8001cd0 <FillTriangle+0x100>
 8001cce:	3301      	adds	r3, #1
 8001cd0:	105b      	asrs	r3, r3, #1
 8001cd2:	843b      	strh	r3, [r7, #32]
    numadd = deltax;
 8001cd4:	8b3b      	ldrh	r3, [r7, #24]
 8001cd6:	83fb      	strh	r3, [r7, #30]
    numpixels = deltay;         /* There are more y-values than x-values */
 8001cd8:	8afb      	ldrh	r3, [r7, #22]
 8001cda:	83bb      	strh	r3, [r7, #28]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	837b      	strh	r3, [r7, #26]
 8001ce0:	e036      	b.n	8001d50 <FillTriangle+0x180>
  {
    UTIL_LCD_DrawLine(x, y, Positions->x3, Positions->y3, Color);
 8001ce2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8001ce6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695c      	ldr	r4, [r3, #20]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	f7ff fbca 	bl	8001490 <UTIL_LCD_DrawLine>

    num += numadd;              /* Increase the numerator by the top of the fraction */
 8001cfc:	8c3a      	ldrh	r2, [r7, #32]
 8001cfe:	8bfb      	ldrh	r3, [r7, #30]
 8001d00:	4413      	add	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	843b      	strh	r3, [r7, #32]
    if (num >= den)             /* Check if numerator >= denominator */
 8001d06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001d0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	db0e      	blt.n	8001d30 <FillTriangle+0x160>
    {
      num -= den;               /* Calculate the new numerator value */
 8001d12:	8c3a      	ldrh	r2, [r7, #32]
 8001d14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	843b      	strh	r3, [r7, #32]
      x += xinc1;               /* Change the x as appropriate */
 8001d1c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001d1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d20:	4413      	add	r3, r2
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      y += yinc1;               /* Change the y as appropriate */
 8001d26:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001d28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }
    x += xinc2;                 /* Change the x as appropriate */
 8001d30:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001d32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d34:	4413      	add	r3, r2
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    y += yinc2;                 /* Change the y as appropriate */
 8001d3a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001d3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d3e:	4413      	add	r3, r2
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8001d44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	837b      	strh	r3, [r7, #26]
 8001d50:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001d54:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	ddc2      	ble.n	8001ce2 <FillTriangle+0x112>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3734      	adds	r7, #52	@ 0x34
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
	...

08001d68 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4a08      	ldr	r2, [pc, #32]	@ (8001d9c <BSP_LED_On+0x34>)
 8001d7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	4a07      	ldr	r2, [pc, #28]	@ (8001da0 <BSP_LED_On+0x38>)
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f005 fb5a 	bl	8007444 <HAL_GPIO_WritePin>
  return ret;
 8001d90:	68fb      	ldr	r3, [r7, #12]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	24000038 	.word	0x24000038
 8001da0:	0800da54 	.word	0x0800da54

08001da4 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <BSP_PB_IRQHandler+0x20>)
 8001db4:	4413      	add	r3, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f005 f85a 	bl	8006e70 <HAL_EXTI_IRQHandler>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	240001bc 	.word	0x240001bc

08001dc8 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8001dd2:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <BSP_I2C4_Init+0x64>)
 8001dd4:	4a16      	ldr	r2, [pc, #88]	@ (8001e30 <BSP_I2C4_Init+0x68>)
 8001dd6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8001dd8:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <BSP_I2C4_Init+0x6c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d11f      	bne.n	8001e20 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <BSP_I2C4_Init+0x6c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	4a13      	ldr	r2, [pc, #76]	@ (8001e34 <BSP_I2C4_Init+0x6c>)
 8001de8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8001dea:	4810      	ldr	r0, [pc, #64]	@ (8001e2c <BSP_I2C4_Init+0x64>)
 8001dec:	f006 f830 	bl	8007e50 <HAL_I2C_GetState>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d114      	bne.n	8001e20 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8001df6:	480d      	ldr	r0, [pc, #52]	@ (8001e2c <BSP_I2C4_Init+0x64>)
 8001df8:	f000 fb60 	bl	80024bc <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8001dfc:	f008 f80c 	bl	8009e18 <HAL_RCC_GetPCLK2Freq>
 8001e00:	4603      	mov	r3, r0
 8001e02:	490d      	ldr	r1, [pc, #52]	@ (8001e38 <BSP_I2C4_Init+0x70>)
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f8e3 	bl	8001fd0 <I2C_GetTiming>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4807      	ldr	r0, [pc, #28]	@ (8001e2c <BSP_I2C4_Init+0x64>)
 8001e10:	f000 f838 	bl	8001e84 <MX_I2C4_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001e1a:	f06f 0307 	mvn.w	r3, #7
 8001e1e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8001e20:	687b      	ldr	r3, [r7, #4]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	24000bcc 	.word	0x24000bcc
 8001e30:	58001c00 	.word	0x58001c00
 8001e34:	240001c4 	.word	0x240001c4
 8001e38:	00061a80 	.word	0x00061a80

08001e3c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <BSP_I2C4_DeInit+0x40>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e7c <BSP_I2C4_DeInit+0x40>)
 8001e4e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8001e50:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <BSP_I2C4_DeInit+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10b      	bne.n	8001e70 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8001e58:	4809      	ldr	r0, [pc, #36]	@ (8001e80 <BSP_I2C4_DeInit+0x44>)
 8001e5a:	f000 fb9b 	bl	8002594 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8001e5e:	4808      	ldr	r0, [pc, #32]	@ (8001e80 <BSP_I2C4_DeInit+0x44>)
 8001e60:	f005 fb9a 	bl	8007598 <HAL_I2C_DeInit>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8001e6a:	f06f 0307 	mvn.w	r3, #7
 8001e6e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	240001c4 	.word	0x240001c4
 8001e80:	24000bcc 	.word	0x24000bcc

08001e84 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f005 fad8 	bl	8007478 <HAL_I2C_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	e014      	b.n	8001efe <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f006 fb0c 	bl	80084f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e008      	b.n	8001efe <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8001eec:	2100      	movs	r1, #0
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f006 fb4d 	bl	800858e <HAL_I2CEx_ConfigDigitalFilter>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60ba      	str	r2, [r7, #8]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	81fb      	strh	r3, [r7, #14]
 8001f16:	460b      	mov	r3, r1
 8001f18:	81bb      	strh	r3, [r7, #12]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001f1e:	89b9      	ldrh	r1, [r7, #12]
 8001f20:	89f8      	ldrh	r0, [r7, #14]
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f000 fb57 	bl	80025dc <I2C4_WriteReg>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e00c      	b.n	8001f54 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8001f3a:	4809      	ldr	r0, [pc, #36]	@ (8001f60 <BSP_I2C4_WriteReg+0x58>)
 8001f3c:	f005 ff96 	bl	8007e6c <HAL_I2C_GetError>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d103      	bne.n	8001f4e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001f46:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e002      	b.n	8001f54 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001f4e:	f06f 0303 	mvn.w	r3, #3
 8001f52:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001f54:	697b      	ldr	r3, [r7, #20]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	24000bcc 	.word	0x24000bcc

08001f64 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60ba      	str	r2, [r7, #8]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	81fb      	strh	r3, [r7, #14]
 8001f72:	460b      	mov	r3, r1
 8001f74:	81bb      	strh	r3, [r7, #12]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001f7a:	89b9      	ldrh	r1, [r7, #12]
 8001f7c:	89f8      	ldrh	r0, [r7, #14]
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f000 fb4f 	bl	8002628 <I2C4_ReadReg>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e00c      	b.n	8001fb0 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8001f96:	4809      	ldr	r0, [pc, #36]	@ (8001fbc <BSP_I2C4_ReadReg+0x58>)
 8001f98:	f005 ff68 	bl	8007e6c <HAL_I2C_GetError>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d103      	bne.n	8001faa <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001fa2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	e002      	b.n	8001fb0 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001faa:	f06f 0303 	mvn.w	r3, #3
 8001fae:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001fb0:	697b      	ldr	r3, [r7, #20]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	24000bcc 	.word	0x24000bcc

08001fc0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8001fc4:	f004 fb52 	bl	800666c <HAL_GetTick>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d06b      	beq.n	80020bc <I2C_GetTiming+0xec>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d068      	beq.n	80020bc <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	e060      	b.n	80020b2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001ff0:	4a35      	ldr	r2, [pc, #212]	@ (80020c8 <I2C_GetTiming+0xf8>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	212c      	movs	r1, #44	@ 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d352      	bcc.n	80020ac <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002006:	4a30      	ldr	r2, [pc, #192]	@ (80020c8 <I2C_GetTiming+0xf8>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	212c      	movs	r1, #44	@ 0x2c
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3308      	adds	r3, #8
 8002014:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d847      	bhi.n	80020ac <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800201c:	6939      	ldr	r1, [r7, #16]
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f856 	bl	80020d0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002024:	6939      	ldr	r1, [r7, #16]
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f940 	bl	80022ac <I2C_Compute_SCLL_SCLH>
 800202c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b7f      	cmp	r3, #127	@ 0x7f
 8002032:	d842      	bhi.n	80020ba <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002034:	4925      	ldr	r1, [pc, #148]	@ (80020cc <I2C_GetTiming+0xfc>)
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002046:	4821      	ldr	r0, [pc, #132]	@ (80020cc <I2C_GetTiming+0xfc>)
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4403      	add	r3, r0
 8002054:	3304      	adds	r3, #4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	051b      	lsls	r3, r3, #20
 800205a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800205e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002060:	481a      	ldr	r0, [pc, #104]	@ (80020cc <I2C_GetTiming+0xfc>)
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4403      	add	r3, r0
 800206e:	3308      	adds	r3, #8
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	041b      	lsls	r3, r3, #16
 8002074:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002078:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800207a:	4814      	ldr	r0, [pc, #80]	@ (80020cc <I2C_GetTiming+0xfc>)
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4403      	add	r3, r0
 8002088:	330c      	adds	r3, #12
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002090:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002092:	480e      	ldr	r0, [pc, #56]	@ (80020cc <I2C_GetTiming+0xfc>)
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4403      	add	r3, r0
 80020a0:	3310      	adds	r3, #16
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80020a6:	430b      	orrs	r3, r1
 80020a8:	617b      	str	r3, [r7, #20]
        }
        break;
 80020aa:	e006      	b.n	80020ba <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	3301      	adds	r3, #1
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d99b      	bls.n	8001ff0 <I2C_GetTiming+0x20>
 80020b8:	e000      	b.n	80020bc <I2C_GetTiming+0xec>
        break;
 80020ba:	bf00      	nop
      }
    }
  }

  return ret;
 80020bc:	697b      	ldr	r3, [r7, #20]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	0800da5c 	.word	0x0800da5c
 80020cc:	240001c8 	.word	0x240001c8

080020d0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b08f      	sub	sp, #60	@ 0x3c
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80020da:	2310      	movs	r3, #16
 80020dc:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	085a      	lsrs	r2, r3, #1
 80020e2:	4b6e      	ldr	r3, [pc, #440]	@ (800229c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80020e4:	4413      	add	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ec:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80020ee:	2332      	movs	r3, #50	@ 0x32
 80020f0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80020f2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80020f6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80020f8:	4a69      	ldr	r2, [pc, #420]	@ (80022a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	212c      	movs	r1, #44	@ 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3324      	adds	r3, #36	@ 0x24
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	4a65      	ldr	r2, [pc, #404]	@ (80022a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	212c      	movs	r1, #44	@ 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	330c      	adds	r3, #12
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800211c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800211e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002120:	495f      	ldr	r1, [pc, #380]	@ (80022a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	202c      	movs	r0, #44	@ 0x2c
 8002126:	fb00 f303 	mul.w	r3, r0, r3
 800212a:	440b      	add	r3, r1
 800212c:	3328      	adds	r3, #40	@ 0x28
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3303      	adds	r3, #3
 8002132:	69f9      	ldr	r1, [r7, #28]
 8002134:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800213c:	4a58      	ldr	r2, [pc, #352]	@ (80022a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	212c      	movs	r1, #44	@ 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	3310      	adds	r3, #16
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	4a54      	ldr	r2, [pc, #336]	@ (80022a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	212c      	movs	r1, #44	@ 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3320      	adds	r3, #32
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002160:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002162:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002164:	494e      	ldr	r1, [pc, #312]	@ (80022a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	202c      	movs	r0, #44	@ 0x2c
 800216a:	fb00 f303 	mul.w	r3, r0, r3
 800216e:	440b      	add	r3, r1
 8002170:	3328      	adds	r3, #40	@ 0x28
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3304      	adds	r3, #4
 8002176:	69f9      	ldr	r1, [r7, #28]
 8002178:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002180:	4a47      	ldr	r2, [pc, #284]	@ (80022a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	212c      	movs	r1, #44	@ 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3320      	adds	r3, #32
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	4a43      	ldr	r2, [pc, #268]	@ (80022a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	212c      	movs	r1, #44	@ 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3314      	adds	r3, #20
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4403      	add	r3, r0
 80021a4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80021a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	dc01      	bgt.n	80021b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 80021b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	dc01      	bgt.n	80021ba <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021be:	e062      	b.n	8002286 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c4:	e059      	b.n	800227a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	3301      	adds	r3, #1
 80021ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021cc:	3201      	adds	r2, #1
 80021ce:	fb03 f202 	mul.w	r2, r3, r2
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d348      	bcc.n	8002274 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
 80021e6:	e042      	b.n	800226e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80021e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ea:	3301      	adds	r3, #1
 80021ec:	6a3a      	ldr	r2, [r7, #32]
 80021ee:	fb03 f202 	mul.w	r2, r3, r2
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80021fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d332      	bcc.n	8002268 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	429a      	cmp	r2, r3
 8002208:	d82e      	bhi.n	8002268 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800220a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800220c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800220e:	429a      	cmp	r2, r3
 8002210:	d02a      	beq.n	8002268 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002212:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4924      	ldr	r1, [pc, #144]	@ (80022a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002224:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002226:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	491f      	ldr	r1, [pc, #124]	@ (80022a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3304      	adds	r3, #4
 8002238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800223a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800223c:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4919      	ldr	r1, [pc, #100]	@ (80022a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	3308      	adds	r3, #8
 800224e:	6a3a      	ldr	r2, [r7, #32]
 8002250:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8002252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002254:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8002256:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	4a11      	ldr	r2, [pc, #68]	@ (80022a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800225e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002260:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b7f      	cmp	r3, #127	@ 0x7f
 8002266:	d812      	bhi.n	800228e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	3301      	adds	r3, #1
 800226c:	623b      	str	r3, [r7, #32]
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	2b0f      	cmp	r3, #15
 8002272:	d9b9      	bls.n	80021e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	3301      	adds	r3, #1
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	2b0f      	cmp	r3, #15
 800227e:	d9a2      	bls.n	80021c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	3301      	adds	r3, #1
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d999      	bls.n	80021c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800228c:	e000      	b.n	8002290 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800228e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002290:	373c      	adds	r7, #60	@ 0x3c
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	3b9aca00 	.word	0x3b9aca00
 80022a0:	0800da5c 	.word	0x0800da5c
 80022a4:	24000bc8 	.word	0x24000bc8
 80022a8:	240001c8 	.word	0x240001c8

080022ac <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b093      	sub	sp, #76	@ 0x4c
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	085a      	lsrs	r2, r3, #1
 80022c0:	4b7a      	ldr	r3, [pc, #488]	@ (80024ac <I2C_Compute_SCLL_SCLH+0x200>)
 80022c2:	4413      	add	r3, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80022cc:	4a78      	ldr	r2, [pc, #480]	@ (80024b0 <I2C_Compute_SCLL_SCLH+0x204>)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	212c      	movs	r1, #44	@ 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	085a      	lsrs	r2, r3, #1
 80022dc:	4b73      	ldr	r3, [pc, #460]	@ (80024ac <I2C_Compute_SCLL_SCLH+0x200>)
 80022de:	4413      	add	r3, r2
 80022e0:	4973      	ldr	r1, [pc, #460]	@ (80024b0 <I2C_Compute_SCLL_SCLH+0x204>)
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	202c      	movs	r0, #44	@ 0x2c
 80022e6:	fb00 f202 	mul.w	r2, r0, r2
 80022ea:	440a      	add	r2, r1
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80022f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80022f4:	2332      	movs	r3, #50	@ 0x32
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80022f8:	4a6d      	ldr	r2, [pc, #436]	@ (80024b0 <I2C_Compute_SCLL_SCLH+0x204>)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	212c      	movs	r1, #44	@ 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	3328      	adds	r3, #40	@ 0x28
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002310:	4a67      	ldr	r2, [pc, #412]	@ (80024b0 <I2C_Compute_SCLL_SCLH+0x204>)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	212c      	movs	r1, #44	@ 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3304      	adds	r3, #4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a62      	ldr	r2, [pc, #392]	@ (80024ac <I2C_Compute_SCLL_SCLH+0x200>)
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002328:	4a61      	ldr	r2, [pc, #388]	@ (80024b0 <I2C_Compute_SCLL_SCLH+0x204>)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	212c      	movs	r1, #44	@ 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3308      	adds	r3, #8
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a5c      	ldr	r2, [pc, #368]	@ (80024ac <I2C_Compute_SCLL_SCLH+0x200>)
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
 800233e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002342:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002344:	2300      	movs	r3, #0
 8002346:	637b      	str	r3, [r7, #52]	@ 0x34
 8002348:	e0a3      	b.n	8002492 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800234a:	495a      	ldr	r1, [pc, #360]	@ (80024b4 <I2C_Compute_SCLL_SCLH+0x208>)
 800234c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002364:	2300      	movs	r3, #0
 8002366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002368:	e08c      	b.n	8002484 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800236a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	441a      	add	r2, r3
 8002370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002372:	3301      	adds	r3, #1
 8002374:	6979      	ldr	r1, [r7, #20]
 8002376:	fb03 f101 	mul.w	r1, r3, r1
 800237a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	440b      	add	r3, r1
 8002380:	4413      	add	r3, r2
 8002382:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002384:	4a4a      	ldr	r2, [pc, #296]	@ (80024b0 <I2C_Compute_SCLL_SCLH+0x204>)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	212c      	movs	r1, #44	@ 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3318      	adds	r3, #24
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	429a      	cmp	r2, r3
 8002398:	d971      	bls.n	800247e <I2C_Compute_SCLL_SCLH+0x1d2>
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	1ad2      	subs	r2, r2, r3
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d268      	bcs.n	800247e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023b0:	e062      	b.n	8002478 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80023b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	441a      	add	r2, r3
 80023b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ba:	3301      	adds	r3, #1
 80023bc:	6979      	ldr	r1, [r7, #20]
 80023be:	fb03 f101 	mul.w	r1, r3, r1
 80023c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	4413      	add	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	441a      	add	r2, r3
 80023d2:	4937      	ldr	r1, [pc, #220]	@ (80024b0 <I2C_Compute_SCLL_SCLH+0x204>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	202c      	movs	r0, #44	@ 0x2c
 80023d8:	fb00 f303 	mul.w	r3, r0, r3
 80023dc:	440b      	add	r3, r1
 80023de:	3320      	adds	r3, #32
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	441a      	add	r2, r3
 80023e4:	4932      	ldr	r1, [pc, #200]	@ (80024b0 <I2C_Compute_SCLL_SCLH+0x204>)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	202c      	movs	r0, #44	@ 0x2c
 80023ea:	fb00 f303 	mul.w	r3, r0, r3
 80023ee:	440b      	add	r3, r1
 80023f0:	3324      	adds	r3, #36	@ 0x24
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d338      	bcc.n	8002472 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	429a      	cmp	r2, r3
 8002406:	d834      	bhi.n	8002472 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002408:	4a29      	ldr	r2, [pc, #164]	@ (80024b0 <I2C_Compute_SCLL_SCLH+0x204>)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	212c      	movs	r1, #44	@ 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	331c      	adds	r3, #28
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	429a      	cmp	r2, r3
 800241c:	d329      	bcc.n	8002472 <I2C_Compute_SCLL_SCLH+0x1c6>
 800241e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	429a      	cmp	r2, r3
 8002424:	d225      	bcs.n	8002472 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	2b00      	cmp	r3, #0
 8002432:	da02      	bge.n	800243a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002436:	425b      	negs	r3, r3
 8002438:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800243e:	429a      	cmp	r2, r3
 8002440:	d917      	bls.n	8002472 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8002442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002444:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8002446:	491b      	ldr	r1, [pc, #108]	@ (80024b4 <I2C_Compute_SCLL_SCLH+0x208>)
 8002448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3310      	adds	r3, #16
 8002456:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002458:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800245a:	4916      	ldr	r1, [pc, #88]	@ (80024b4 <I2C_Compute_SCLL_SCLH+0x208>)
 800245c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	330c      	adds	r3, #12
 800246a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800246c:	601a      	str	r2, [r3, #0]
              ret = count;
 800246e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002470:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002474:	3301      	adds	r3, #1
 8002476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247a:	2bff      	cmp	r3, #255	@ 0xff
 800247c:	d999      	bls.n	80023b2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800247e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002480:	3301      	adds	r3, #1
 8002482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002486:	2bff      	cmp	r3, #255	@ 0xff
 8002488:	f67f af6f 	bls.w	800236a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800248c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248e:	3301      	adds	r3, #1
 8002490:	637b      	str	r3, [r7, #52]	@ 0x34
 8002492:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <I2C_Compute_SCLL_SCLH+0x20c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002498:	429a      	cmp	r2, r3
 800249a:	f4ff af56 	bcc.w	800234a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800249e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	374c      	adds	r7, #76	@ 0x4c
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	3b9aca00 	.word	0x3b9aca00
 80024b0:	0800da5c 	.word	0x0800da5c
 80024b4:	240001c8 	.word	0x240001c8
 80024b8:	24000bc8 	.word	0x24000bc8

080024bc <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	@ 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80024c4:	4b31      	ldr	r3, [pc, #196]	@ (800258c <I2C4_MspInit+0xd0>)
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ca:	4a30      	ldr	r2, [pc, #192]	@ (800258c <I2C4_MspInit+0xd0>)
 80024cc:	f043 0308 	orr.w	r3, r3, #8
 80024d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d4:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <I2C4_MspInit+0xd0>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80024e2:	4b2a      	ldr	r3, [pc, #168]	@ (800258c <I2C4_MspInit+0xd0>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e8:	4a28      	ldr	r2, [pc, #160]	@ (800258c <I2C4_MspInit+0xd0>)
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f2:	4b26      	ldr	r3, [pc, #152]	@ (800258c <I2C4_MspInit+0xd0>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002500:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002504:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002506:	2312      	movs	r3, #18
 8002508:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800250e:	2302      	movs	r3, #2
 8002510:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8002512:	2304      	movs	r3, #4
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	481c      	ldr	r0, [pc, #112]	@ (8002590 <I2C4_MspInit+0xd4>)
 800251e:	f004 fcd7 	bl	8006ed0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8002522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002526:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002528:	2312      	movs	r3, #18
 800252a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002530:	2302      	movs	r3, #2
 8002532:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002534:	2304      	movs	r3, #4
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4814      	ldr	r0, [pc, #80]	@ (8002590 <I2C4_MspInit+0xd4>)
 8002540:	f004 fcc6 	bl	8006ed0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8002544:	4b11      	ldr	r3, [pc, #68]	@ (800258c <I2C4_MspInit+0xd0>)
 8002546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800254a:	4a10      	ldr	r2, [pc, #64]	@ (800258c <I2C4_MspInit+0xd0>)
 800254c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002550:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002554:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <I2C4_MspInit+0xd0>)
 8002556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800255a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <I2C4_MspInit+0xd0>)
 8002564:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002568:	4a08      	ldr	r2, [pc, #32]	@ (800258c <I2C4_MspInit+0xd0>)
 800256a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <I2C4_MspInit+0xd0>)
 8002574:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002578:	4a04      	ldr	r2, [pc, #16]	@ (800258c <I2C4_MspInit+0xd0>)
 800257a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800257e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 8002582:	bf00      	nop
 8002584:	3728      	adds	r7, #40	@ 0x28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	58024400 	.word	0x58024400
 8002590:	58020c00 	.word	0x58020c00

08002594 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800259c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4619      	mov	r1, r3
 80025a6:	480b      	ldr	r0, [pc, #44]	@ (80025d4 <I2C4_MspDeInit+0x40>)
 80025a8:	f004 fe42 	bl	8007230 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80025ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4619      	mov	r1, r3
 80025b6:	4807      	ldr	r0, [pc, #28]	@ (80025d4 <I2C4_MspDeInit+0x40>)
 80025b8:	f004 fe3a 	bl	8007230 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <I2C4_MspDeInit+0x44>)
 80025be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80025c2:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <I2C4_MspDeInit+0x44>)
 80025c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 80025cc:	bf00      	nop
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	58020c00 	.word	0x58020c00
 80025d8:	58024400 	.word	0x58024400

080025dc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af04      	add	r7, sp, #16
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	4603      	mov	r3, r0
 80025e6:	81fb      	strh	r3, [r7, #14]
 80025e8:	460b      	mov	r3, r1
 80025ea:	81bb      	strh	r3, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80025f0:	8978      	ldrh	r0, [r7, #10]
 80025f2:	89ba      	ldrh	r2, [r7, #12]
 80025f4:	89f9      	ldrh	r1, [r7, #14]
 80025f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025fa:	9302      	str	r3, [sp, #8]
 80025fc:	8b3b      	ldrh	r3, [r7, #24]
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	4603      	mov	r3, r0
 8002606:	4807      	ldr	r0, [pc, #28]	@ (8002624 <I2C4_WriteReg+0x48>)
 8002608:	f005 f9f4 	bl	80079f4 <HAL_I2C_Mem_Write>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002612:	2300      	movs	r3, #0
 8002614:	e001      	b.n	800261a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002616:	f06f 0307 	mvn.w	r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	24000bcc 	.word	0x24000bcc

08002628 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af04      	add	r7, sp, #16
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	4603      	mov	r3, r0
 8002632:	81fb      	strh	r3, [r7, #14]
 8002634:	460b      	mov	r3, r1
 8002636:	81bb      	strh	r3, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800263c:	8978      	ldrh	r0, [r7, #10]
 800263e:	89ba      	ldrh	r2, [r7, #12]
 8002640:	89f9      	ldrh	r1, [r7, #14]
 8002642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	8b3b      	ldrh	r3, [r7, #24]
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	4603      	mov	r3, r0
 8002652:	4807      	ldr	r0, [pc, #28]	@ (8002670 <I2C4_ReadReg+0x48>)
 8002654:	f005 fae2 	bl	8007c1c <HAL_I2C_Mem_Read>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800265e:	2300      	movs	r3, #0
 8002660:	e001      	b.n	8002666 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002662:	f06f 0307 	mvn.w	r3, #7
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	24000bcc 	.word	0x24000bcc

08002674 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b09e      	sub	sp, #120	@ 0x78
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002682:	2300      	movs	r3, #0
 8002684:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d808      	bhi.n	80026a2 <BSP_LCD_InitEx+0x2e>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <BSP_LCD_InitEx+0x2e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d006      	beq.n	80026aa <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80026a2:	f06f 0301 	mvn.w	r3, #1
 80026a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80026a8:	e0a8      	b.n	80027fc <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d109      	bne.n	80026c4 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80026b0:	2302      	movs	r3, #2
 80026b2:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 80026b4:	4a54      	ldr	r2, [pc, #336]	@ (8002808 <BSP_LCD_InitEx+0x194>)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015b      	lsls	r3, r3, #5
 80026ba:	4413      	add	r3, r2
 80026bc:	3310      	adds	r3, #16
 80026be:	2202      	movs	r2, #2
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e008      	b.n	80026d6 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 80026c4:	2300      	movs	r3, #0
 80026c6:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 80026c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002808 <BSP_LCD_InitEx+0x194>)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015b      	lsls	r3, r3, #5
 80026ce:	4413      	add	r3, r2
 80026d0:	3310      	adds	r3, #16
 80026d2:	2204      	movs	r2, #4
 80026d4:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80026d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002808 <BSP_LCD_InitEx+0x194>)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	015b      	lsls	r3, r3, #5
 80026dc:	4413      	add	r3, r2
 80026de:	330c      	adds	r3, #12
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80026e4:	4a48      	ldr	r2, [pc, #288]	@ (8002808 <BSP_LCD_InitEx+0x194>)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015b      	lsls	r3, r3, #5
 80026ea:	4413      	add	r3, r2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80026f0:	4a45      	ldr	r2, [pc, #276]	@ (8002808 <BSP_LCD_InitEx+0x194>)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	015b      	lsls	r3, r3, #5
 80026f6:	4413      	add	r3, r2
 80026f8:	3304      	adds	r3, #4
 80026fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80026fe:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8002700:	4b42      	ldr	r3, [pc, #264]	@ (800280c <BSP_LCD_InitEx+0x198>)
 8002702:	4a43      	ldr	r2, [pc, #268]	@ (8002810 <BSP_LCD_InitEx+0x19c>)
 8002704:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8002706:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <BSP_LCD_InitEx+0x1a0>)
 8002708:	4a43      	ldr	r2, [pc, #268]	@ (8002818 <BSP_LCD_InitEx+0x1a4>)
 800270a:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 800270c:	483f      	ldr	r0, [pc, #252]	@ (800280c <BSP_LCD_InitEx+0x198>)
 800270e:	f000 fd1b 	bl	8003148 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8002712:	4840      	ldr	r0, [pc, #256]	@ (8002814 <BSP_LCD_InitEx+0x1a0>)
 8002714:	f000 fde4 	bl	80032e0 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8002718:	4b40      	ldr	r3, [pc, #256]	@ (800281c <BSP_LCD_InitEx+0x1a8>)
 800271a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 800271c:	4b40      	ldr	r3, [pc, #256]	@ (8002820 <BSP_LCD_InitEx+0x1ac>)
 800271e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 8002720:	2370      	movs	r3, #112	@ 0x70
 8002722:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8002724:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002728:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fe26 	bl	8000380 <FT5336_RegisterBusIO>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	da03      	bge.n	8002742 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800273a:	f06f 0304 	mvn.w	r3, #4
 800273e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002740:	e02b      	b.n	800279a <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 8002742:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002746:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd ff11 	bl	8000574 <FT5336_ReadID>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	da03      	bge.n	8002760 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002758:	f06f 0304 	mvn.w	r3, #4
 800275c:	677b      	str	r3, [r7, #116]	@ 0x74
 800275e:	e01c      	b.n	800279a <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8002760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002762:	2b51      	cmp	r3, #81	@ 0x51
 8002764:	d003      	beq.n	800276e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002766:	f06f 0306 	mvn.w	r3, #6
 800276a:	677b      	str	r3, [r7, #116]	@ 0x74
 800276c:	e015      	b.n	800279a <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800276e:	4827      	ldr	r0, [pc, #156]	@ (800280c <BSP_LCD_InitEx+0x198>)
 8002770:	f000 f8e8 	bl	8002944 <MX_LTDC_ClockConfig>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800277a:	f06f 0303 	mvn.w	r3, #3
 800277e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002780:	e00b      	b.n	800279a <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8002782:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002786:	6839      	ldr	r1, [r7, #0]
 8002788:	4820      	ldr	r0, [pc, #128]	@ (800280c <BSP_LCD_InitEx+0x198>)
 800278a:	f000 f84d 	bl	8002828 <MX_LTDC_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002794:	f06f 0303 	mvn.w	r3, #3
 8002798:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 800279a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800279c:	2b00      	cmp	r3, #0
 800279e:	d12d      	bne.n	80027fc <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80027a0:	2000      	movs	r0, #0
 80027a2:	f000 fe2f 	bl	8003404 <BSP_SDRAM_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80027ac:	f06f 0303 	mvn.w	r3, #3
 80027b0:	e025      	b.n	80027fe <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 80027be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027c2:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 80027c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 80027c8:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	461a      	mov	r2, r3
 80027d4:	2100      	movs	r1, #0
 80027d6:	480d      	ldr	r0, [pc, #52]	@ (800280c <BSP_LCD_InitEx+0x198>)
 80027d8:	f000 f872 	bl	80028c0 <MX_LTDC_ConfigLayer>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80027e2:	f06f 0303 	mvn.w	r3, #3
 80027e6:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 80027e8:	480e      	ldr	r0, [pc, #56]	@ (8002824 <BSP_LCD_InitEx+0x1b0>)
 80027ea:	f000 fde1 	bl	80033b0 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 80027ee:	4a06      	ldr	r2, [pc, #24]	@ (8002808 <BSP_LCD_InitEx+0x194>)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015b      	lsls	r3, r3, #5
 80027f4:	4413      	add	r3, r2
 80027f6:	3318      	adds	r3, #24
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80027fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3778      	adds	r7, #120	@ 0x78
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	24000d7c 	.word	0x24000d7c
 800280c:	24000cd4 	.word	0x24000cd4
 8002810:	50001000 	.word	0x50001000
 8002814:	24000c6c 	.word	0x24000c6c
 8002818:	52001000 	.word	0x52001000
 800281c:	08001dc9 	.word	0x08001dc9
 8002820:	08001f65 	.word	0x08001f65
 8002824:	24000c20 	.word	0x24000c20

08002828 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a21      	ldr	r2, [pc, #132]	@ (80028bc <MX_LTDC_Init+0x94>)
 8002838:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2228      	movs	r2, #40	@ 0x28
 8002856:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	222a      	movs	r2, #42	@ 0x2a
 800285c:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f103 0235 	add.w	r2, r3, #53	@ 0x35
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2209      	movs	r2, #9
 8002876:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	220b      	movs	r2, #11
 800287c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f103 020b 	add.w	r2, r3, #11
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f103 020d 	add.w	r2, r3, #13
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	22ff      	movs	r2, #255	@ 0xff
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	22ff      	movs	r2, #255	@ 0xff
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	22ff      	movs	r2, #255	@ 0xff
 80028a6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f005 febc 	bl	8008628 <HAL_LTDC_Init>
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	50001000 	.word	0x50001000

080028c0 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b092      	sub	sp, #72	@ 0x48
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 80028ea:	23ff      	movs	r3, #255	@ 0xff
 80028ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80028f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028f6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80028f8:	2307      	movs	r3, #7
 80028fa:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	4619      	mov	r1, r3
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f005 ff51 	bl	80087dc <HAL_LTDC_ConfigLayer>
 800293a:	4603      	mov	r3, r0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3748      	adds	r7, #72	@ 0x48
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b0b2      	sub	sp, #200	@ 0xc8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800294c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002958:	2305      	movs	r3, #5
 800295a:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 800295c:	23a0      	movs	r3, #160	@ 0xa0
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002960:	2302      	movs	r3, #2
 8002962:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002964:	2302      	movs	r3, #2
 8002966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002968:	2353      	movs	r3, #83	@ 0x53
 800296a:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	64fb      	str	r3, [r7, #76]	@ 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002974:	f107 0308 	add.w	r3, r7, #8
 8002978:	4618      	mov	r0, r3
 800297a:	f007 faa5 	bl	8009ec8 <HAL_RCCEx_PeriphCLKConfig>
 800297e:	4603      	mov	r3, r0
}
 8002980:	4618      	mov	r0, r3
 8002982:	37c8      	adds	r7, #200	@ 0xc8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800299c:	f06f 0301 	mvn.w	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e007      	b.n	80029b4 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80029a4:	4a07      	ldr	r2, [pc, #28]	@ (80029c4 <BSP_LCD_GetPixelFormat+0x3c>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	015b      	lsls	r3, r3, #5
 80029aa:	4413      	add	r3, r2
 80029ac:	330c      	adds	r3, #12
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80029b4:	68fb      	ldr	r3, [r7, #12]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	24000d7c 	.word	0x24000d7c

080029c8 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029dc:	f06f 0301 	mvn.w	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	e006      	b.n	80029f2 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80029e4:	4a06      	ldr	r2, [pc, #24]	@ (8002a00 <BSP_LCD_SetActiveLayer+0x38>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	015b      	lsls	r3, r3, #5
 80029ea:	4413      	add	r3, r2
 80029ec:	3308      	adds	r3, #8
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	24000d7c 	.word	0x24000d7c

08002a04 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a18:	f06f 0301 	mvn.w	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e006      	b.n	8002a2e <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002a20:	4a06      	ldr	r2, [pc, #24]	@ (8002a3c <BSP_LCD_GetXSize+0x38>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	015b      	lsls	r3, r3, #5
 8002a26:	4413      	add	r3, r2
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	24000d7c 	.word	0x24000d7c

08002a40 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a54:	f06f 0301 	mvn.w	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e007      	b.n	8002a6c <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002a5c:	4a07      	ldr	r2, [pc, #28]	@ (8002a7c <BSP_LCD_GetYSize+0x3c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	015b      	lsls	r3, r3, #5
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	24000d7c 	.word	0x24000d7c

08002a80 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	@ 0x38
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	330a      	adds	r3, #10
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	330b      	adds	r3, #11
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	441a      	add	r2, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	041b      	lsls	r3, r3, #16
 8002aac:	441a      	add	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	330d      	adds	r3, #13
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	4413      	add	r3, r2
 8002ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	3312      	adds	r3, #18
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	3313      	adds	r3, #19
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	441a      	add	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	441a      	add	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	3315      	adds	r3, #21
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	4413      	add	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	3316      	adds	r3, #22
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	3317      	adds	r3, #23
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	441a      	add	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	3318      	adds	r3, #24
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	441a      	add	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	3319      	adds	r3, #25
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	4413      	add	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	331c      	adds	r3, #28
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	331d      	adds	r3, #29
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	4413      	add	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8002b1e:	4a37      	ldr	r2, [pc, #220]	@ (8002bfc <BSP_LCD_DrawBitmap+0x17c>)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	015b      	lsls	r3, r3, #5
 8002b24:	4413      	add	r3, r2
 8002b26:	3308      	adds	r3, #8
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a35      	ldr	r2, [pc, #212]	@ (8002c00 <BSP_LCD_DrawBitmap+0x180>)
 8002b2c:	2134      	movs	r1, #52	@ 0x34
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	335c      	adds	r3, #92	@ 0x5c
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4930      	ldr	r1, [pc, #192]	@ (8002bfc <BSP_LCD_DrawBitmap+0x17c>)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015b      	lsls	r3, r3, #5
 8002b3e:	440b      	add	r3, r1
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	fb03 f101 	mul.w	r1, r3, r1
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	440b      	add	r3, r1
 8002b4c:	482b      	ldr	r0, [pc, #172]	@ (8002bfc <BSP_LCD_DrawBitmap+0x17c>)
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	0149      	lsls	r1, r1, #5
 8002b52:	4401      	add	r1, r0
 8002b54:	3110      	adds	r1, #16
 8002b56:	6809      	ldr	r1, [r1, #0]
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	3b20      	subs	r3, #32
 8002b64:	2b07      	cmp	r3, #7
 8002b66:	d802      	bhi.n	8002b6e <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6c:	e008      	b.n	8002b80 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	3b10      	subs	r3, #16
 8002b72:	2b07      	cmp	r3, #7
 8002b74:	d802      	bhi.n	8002b7c <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8002b76:	2302      	movs	r3, #2
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b7a:	e001      	b.n	8002b80 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	08d2      	lsrs	r2, r2, #3
 8002b8e:	fb03 f202 	mul.w	r2, r3, r2
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	4413      	add	r3, r2
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	4413      	add	r3, r2
 8002b9a:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ba0:	e023      	b.n	8002bea <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6a39      	ldr	r1, [r7, #32]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fa77 	bl	80030a0 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002bb2:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <BSP_LCD_DrawBitmap+0x17c>)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	015b      	lsls	r3, r3, #5
 8002bb8:	4413      	add	r3, r2
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	490f      	ldr	r1, [pc, #60]	@ (8002bfc <BSP_LCD_DrawBitmap+0x17c>)
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	0152      	lsls	r2, r2, #5
 8002bc2:	440a      	add	r2, r1
 8002bc4:	3210      	adds	r2, #16
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bce:	4413      	add	r3, r2
 8002bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	08db      	lsrs	r3, r3, #3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	425b      	negs	r3, r3
 8002bde:	6a3a      	ldr	r2, [r7, #32]
 8002be0:	4413      	add	r3, r2
 8002be2:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8002be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be6:	3301      	adds	r3, #1
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3d7      	bcc.n	8002ba2 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3730      	adds	r7, #48	@ 0x30
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	24000d7c 	.word	0x24000d7c
 8002c00:	24000cd4 	.word	0x24000cd4

08002c04 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e032      	b.n	8002c82 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e028      	b.n	8002c74 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	431a      	orrs	r2, r3
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	3302      	adds	r3, #2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	3303      	adds	r3, #3
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	18d1      	adds	r1, r2, r3
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	441a      	add	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f95e 	bl	8002f18 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c94 <BSP_LCD_FillRGBRect+0x90>)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	015b      	lsls	r3, r3, #5
 8002c62:	4413      	add	r3, r2
 8002c64:	3310      	adds	r3, #16
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3d2      	bcc.n	8002c22 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d3c8      	bcc.n	8002c1c <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	24000d7c 	.word	0x24000d7c

08002c98 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002ca6:	4a21      	ldr	r2, [pc, #132]	@ (8002d2c <BSP_LCD_DrawHLine+0x94>)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	015b      	lsls	r3, r3, #5
 8002cac:	4413      	add	r3, r2
 8002cae:	3308      	adds	r3, #8
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d30 <BSP_LCD_DrawHLine+0x98>)
 8002cb4:	2134      	movs	r1, #52	@ 0x34
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	335c      	adds	r3, #92	@ 0x5c
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	491a      	ldr	r1, [pc, #104]	@ (8002d2c <BSP_LCD_DrawHLine+0x94>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	015b      	lsls	r3, r3, #5
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3310      	adds	r3, #16
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4817      	ldr	r0, [pc, #92]	@ (8002d2c <BSP_LCD_DrawHLine+0x94>)
 8002cce:	68f9      	ldr	r1, [r7, #12]
 8002cd0:	0149      	lsls	r1, r1, #5
 8002cd2:	4401      	add	r1, r0
 8002cd4:	6809      	ldr	r1, [r1, #0]
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	fb01 f000 	mul.w	r0, r1, r0
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	4401      	add	r1, r0
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	441a      	add	r2, r3
 8002cee:	490f      	ldr	r1, [pc, #60]	@ (8002d2c <BSP_LCD_DrawHLine+0x94>)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	015b      	lsls	r3, r3, #5
 8002cf4:	440b      	add	r3, r1
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d907      	bls.n	8002d0c <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8002cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8002d2c <BSP_LCD_DrawHLine+0x94>)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	015b      	lsls	r3, r3, #5
 8002d02:	4413      	add	r3, r2
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002d0c:	6979      	ldr	r1, [r7, #20]
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2301      	movs	r3, #1
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f956 	bl	8002fcc <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	24000d7c 	.word	0x24000d7c
 8002d30:	24000cd4 	.word	0x24000cd4

08002d34 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002d42:	4a24      	ldr	r2, [pc, #144]	@ (8002dd4 <BSP_LCD_DrawVLine+0xa0>)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	015b      	lsls	r3, r3, #5
 8002d48:	4413      	add	r3, r2
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a22      	ldr	r2, [pc, #136]	@ (8002dd8 <BSP_LCD_DrawVLine+0xa4>)
 8002d50:	2134      	movs	r1, #52	@ 0x34
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	335c      	adds	r3, #92	@ 0x5c
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	491d      	ldr	r1, [pc, #116]	@ (8002dd4 <BSP_LCD_DrawVLine+0xa0>)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	015b      	lsls	r3, r3, #5
 8002d62:	440b      	add	r3, r1
 8002d64:	3310      	adds	r3, #16
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	481a      	ldr	r0, [pc, #104]	@ (8002dd4 <BSP_LCD_DrawVLine+0xa0>)
 8002d6a:	68f9      	ldr	r1, [r7, #12]
 8002d6c:	0149      	lsls	r1, r1, #5
 8002d6e:	4401      	add	r1, r0
 8002d70:	6809      	ldr	r1, [r1, #0]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	fb01 f000 	mul.w	r0, r1, r0
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	4401      	add	r1, r0
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	441a      	add	r2, r3
 8002d8a:	4912      	ldr	r1, [pc, #72]	@ (8002dd4 <BSP_LCD_DrawVLine+0xa0>)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015b      	lsls	r3, r3, #5
 8002d90:	440b      	add	r3, r1
 8002d92:	3304      	adds	r3, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d908      	bls.n	8002dac <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd4 <BSP_LCD_DrawVLine+0xa0>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	015b      	lsls	r3, r3, #5
 8002da0:	4413      	add	r3, r2
 8002da2:	3304      	adds	r3, #4
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002dac:	6979      	ldr	r1, [r7, #20]
 8002dae:	4a09      	ldr	r2, [pc, #36]	@ (8002dd4 <BSP_LCD_DrawVLine+0xa0>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	015b      	lsls	r3, r3, #5
 8002db4:	4413      	add	r3, r2
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	6a3a      	ldr	r2, [r7, #32]
 8002dbc:	9201      	str	r2, [sp, #4]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f901 	bl	8002fcc <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	24000d7c 	.word	0x24000d7c
 8002dd8:	24000cd4 	.word	0x24000cd4

08002ddc <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002dea:	4a1b      	ldr	r2, [pc, #108]	@ (8002e58 <BSP_LCD_FillRect+0x7c>)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	015b      	lsls	r3, r3, #5
 8002df0:	4413      	add	r3, r2
 8002df2:	3308      	adds	r3, #8
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a19      	ldr	r2, [pc, #100]	@ (8002e5c <BSP_LCD_FillRect+0x80>)
 8002df8:	2134      	movs	r1, #52	@ 0x34
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	335c      	adds	r3, #92	@ 0x5c
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4914      	ldr	r1, [pc, #80]	@ (8002e58 <BSP_LCD_FillRect+0x7c>)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	015b      	lsls	r3, r3, #5
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3310      	adds	r3, #16
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4811      	ldr	r0, [pc, #68]	@ (8002e58 <BSP_LCD_FillRect+0x7c>)
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	0149      	lsls	r1, r1, #5
 8002e16:	4401      	add	r1, r0
 8002e18:	6809      	ldr	r1, [r1, #0]
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	fb01 f000 	mul.w	r0, r1, r0
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	4401      	add	r1, r0
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002e2c:	6979      	ldr	r1, [r7, #20]
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <BSP_LCD_FillRect+0x7c>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	015b      	lsls	r3, r3, #5
 8002e34:	4413      	add	r3, r2
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3e:	9201      	str	r2, [sp, #4]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f8c0 	bl	8002fcc <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	24000d7c 	.word	0x24000d7c
 8002e5c:	24000cd4 	.word	0x24000cd4

08002e60 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002e6e:	4a28      	ldr	r2, [pc, #160]	@ (8002f10 <BSP_LCD_ReadPixel+0xb0>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	015b      	lsls	r3, r3, #5
 8002e74:	4413      	add	r3, r2
 8002e76:	3308      	adds	r3, #8
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a26      	ldr	r2, [pc, #152]	@ (8002f14 <BSP_LCD_ReadPixel+0xb4>)
 8002e7c:	2134      	movs	r1, #52	@ 0x34
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3348      	adds	r3, #72	@ 0x48
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11c      	bne.n	8002ec6 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002e8c:	4a20      	ldr	r2, [pc, #128]	@ (8002f10 <BSP_LCD_ReadPixel+0xb0>)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	015b      	lsls	r3, r3, #5
 8002e92:	4413      	add	r3, r2
 8002e94:	3308      	adds	r3, #8
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1e      	ldr	r2, [pc, #120]	@ (8002f14 <BSP_LCD_ReadPixel+0xb4>)
 8002e9a:	2134      	movs	r1, #52	@ 0x34
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	335c      	adds	r3, #92	@ 0x5c
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	491a      	ldr	r1, [pc, #104]	@ (8002f10 <BSP_LCD_ReadPixel+0xb0>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	015b      	lsls	r3, r3, #5
 8002eac:	440b      	add	r3, r1
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	fb03 f101 	mul.w	r1, r3, r1
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	440b      	add	r3, r1
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e01d      	b.n	8002f02 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002ec6:	4a12      	ldr	r2, [pc, #72]	@ (8002f10 <BSP_LCD_ReadPixel+0xb0>)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	015b      	lsls	r3, r3, #5
 8002ecc:	4413      	add	r3, r2
 8002ece:	3308      	adds	r3, #8
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a10      	ldr	r2, [pc, #64]	@ (8002f14 <BSP_LCD_ReadPixel+0xb4>)
 8002ed4:	2134      	movs	r1, #52	@ 0x34
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	335c      	adds	r3, #92	@ 0x5c
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	490b      	ldr	r1, [pc, #44]	@ (8002f10 <BSP_LCD_ReadPixel+0xb0>)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	015b      	lsls	r3, r3, #5
 8002ee6:	440b      	add	r3, r1
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	fb03 f101 	mul.w	r1, r3, r1
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	440b      	add	r3, r1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	24000d7c 	.word	0x24000d7c
 8002f14:	24000cd4 	.word	0x24000cd4

08002f18 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002f26:	4a27      	ldr	r2, [pc, #156]	@ (8002fc4 <BSP_LCD_WritePixel+0xac>)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	015b      	lsls	r3, r3, #5
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3308      	adds	r3, #8
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a25      	ldr	r2, [pc, #148]	@ (8002fc8 <BSP_LCD_WritePixel+0xb0>)
 8002f34:	2134      	movs	r1, #52	@ 0x34
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3348      	adds	r3, #72	@ 0x48
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11c      	bne.n	8002f7e <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8002f44:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc4 <BSP_LCD_WritePixel+0xac>)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	015b      	lsls	r3, r3, #5
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3308      	adds	r3, #8
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc8 <BSP_LCD_WritePixel+0xb0>)
 8002f52:	2134      	movs	r1, #52	@ 0x34
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	335c      	adds	r3, #92	@ 0x5c
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4919      	ldr	r1, [pc, #100]	@ (8002fc4 <BSP_LCD_WritePixel+0xac>)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015b      	lsls	r3, r3, #5
 8002f64:	440b      	add	r3, r1
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	fb03 f101 	mul.w	r1, r3, r1
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	440b      	add	r3, r1
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	461a      	mov	r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	e01b      	b.n	8002fb6 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8002f7e:	4a11      	ldr	r2, [pc, #68]	@ (8002fc4 <BSP_LCD_WritePixel+0xac>)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015b      	lsls	r3, r3, #5
 8002f84:	4413      	add	r3, r2
 8002f86:	3308      	adds	r3, #8
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc8 <BSP_LCD_WritePixel+0xb0>)
 8002f8c:	2134      	movs	r1, #52	@ 0x34
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	335c      	adds	r3, #92	@ 0x5c
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	490a      	ldr	r1, [pc, #40]	@ (8002fc4 <BSP_LCD_WritePixel+0xac>)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	015b      	lsls	r3, r3, #5
 8002f9e:	440b      	add	r3, r1
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	fb03 f101 	mul.w	r1, r3, r1
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	440b      	add	r3, r1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	24000d7c 	.word	0x24000d7c
 8002fc8:	24000cd4 	.word	0x24000cd4

08002fcc <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002fde:	4a2d      	ldr	r2, [pc, #180]	@ (8003094 <LL_FillBuffer+0xc8>)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	015b      	lsls	r3, r3, #5
 8002fe4:	4413      	add	r3, r2
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d129      	bne.n	8003042 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002fee:	2302      	movs	r3, #2
 8002ff0:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	0adb      	lsrs	r3, r3, #11
 8002ff6:	f003 021f 	and.w	r2, r3, #31
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	3317      	adds	r3, #23
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	0419      	lsls	r1, r3, #16
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003012:	4613      	mov	r3, r2
 8003014:	01db      	lsls	r3, r3, #7
 8003016:	4413      	add	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	3321      	adds	r3, #33	@ 0x21
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	4319      	orrs	r1, r3
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	4413      	add	r3, r2
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	3317      	adds	r3, #23
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	430b      	orrs	r3, r1
 800303a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800303e:	613b      	str	r3, [r7, #16]
    break;
 8003040:	e002      	b.n	8003048 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
    break;
 8003046:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8003048:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <LL_FillBuffer+0xcc>)
 800304a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800304e:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003050:	4a11      	ldr	r2, [pc, #68]	@ (8003098 <LL_FillBuffer+0xcc>)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8003056:	4a10      	ldr	r2, [pc, #64]	@ (8003098 <LL_FillBuffer+0xcc>)
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 800305c:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <LL_FillBuffer+0xcc>)
 800305e:	4a0f      	ldr	r2, [pc, #60]	@ (800309c <LL_FillBuffer+0xd0>)
 8003060:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003062:	480d      	ldr	r0, [pc, #52]	@ (8003098 <LL_FillBuffer+0xcc>)
 8003064:	f003 fc2e 	bl	80068c4 <HAL_DMA2D_Init>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10e      	bne.n	800308c <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6939      	ldr	r1, [r7, #16]
 8003078:	4807      	ldr	r0, [pc, #28]	@ (8003098 <LL_FillBuffer+0xcc>)
 800307a:	f003 fc91 	bl	80069a0 <HAL_DMA2D_Start>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003084:	2132      	movs	r1, #50	@ 0x32
 8003086:	4804      	ldr	r0, [pc, #16]	@ (8003098 <LL_FillBuffer+0xcc>)
 8003088:	f003 fcb5 	bl	80069f6 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 800308c:	bf00      	nop
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	24000d7c 	.word	0x24000d7c
 8003098:	24000c6c 	.word	0x24000c6c
 800309c:	52001000 	.word	0x52001000

080030a0 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 80030ae:	4a23      	ldr	r2, [pc, #140]	@ (800313c <LL_ConvertLineToRGB+0x9c>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	015b      	lsls	r3, r3, #5
 80030b4:	4413      	add	r3, r2
 80030b6:	330c      	adds	r3, #12
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d102      	bne.n	80030c4 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80030be:	2302      	movs	r3, #2
 80030c0:	617b      	str	r3, [r7, #20]
    break;
 80030c2:	e002      	b.n	80030ca <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
    break;
 80030c8:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80030ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 80030cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030d0:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80030d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 80030d8:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80030de:	4b18      	ldr	r3, [pc, #96]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80030e4:	4b16      	ldr	r3, [pc, #88]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 80030e6:	22ff      	movs	r2, #255	@ 0xff
 80030e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80030ea:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80030f0:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 80030f6:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 80030f8:	4a12      	ldr	r2, [pc, #72]	@ (8003144 <LL_ConvertLineToRGB+0xa4>)
 80030fa:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80030fc:	4810      	ldr	r0, [pc, #64]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 80030fe:	f003 fbe1 	bl	80068c4 <HAL_DMA2D_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d115      	bne.n	8003134 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8003108:	2101      	movs	r1, #1
 800310a:	480d      	ldr	r0, [pc, #52]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 800310c:	f003 fd5c 	bl	8006bc8 <HAL_DMA2D_ConfigLayer>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10e      	bne.n	8003134 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	2301      	movs	r3, #1
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	4807      	ldr	r0, [pc, #28]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 8003122:	f003 fc3d 	bl	80069a0 <HAL_DMA2D_Start>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800312c:	2132      	movs	r1, #50	@ 0x32
 800312e:	4804      	ldr	r0, [pc, #16]	@ (8003140 <LL_ConvertLineToRGB+0xa0>)
 8003130:	f003 fc61 	bl	80069f6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003134:	bf00      	nop
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	24000d7c 	.word	0x24000d7c
 8003140:	24000c6c 	.word	0x24000c6c
 8003144:	52001000 	.word	0x52001000

08003148 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08e      	sub	sp, #56	@ 0x38
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5b      	ldr	r2, [pc, #364]	@ (80032c4 <LTDC_MspInit+0x17c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	f040 80b0 	bne.w	80032bc <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800315c:	4b5a      	ldr	r3, [pc, #360]	@ (80032c8 <LTDC_MspInit+0x180>)
 800315e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003162:	4a59      	ldr	r2, [pc, #356]	@ (80032c8 <LTDC_MspInit+0x180>)
 8003164:	f043 0308 	orr.w	r3, r3, #8
 8003168:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800316c:	4b56      	ldr	r3, [pc, #344]	@ (80032c8 <LTDC_MspInit+0x180>)
 800316e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	623b      	str	r3, [r7, #32]
 8003178:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800317a:	4b53      	ldr	r3, [pc, #332]	@ (80032c8 <LTDC_MspInit+0x180>)
 800317c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003180:	4a51      	ldr	r2, [pc, #324]	@ (80032c8 <LTDC_MspInit+0x180>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800318a:	4b4f      	ldr	r3, [pc, #316]	@ (80032c8 <LTDC_MspInit+0x180>)
 800318c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003198:	4b4b      	ldr	r3, [pc, #300]	@ (80032c8 <LTDC_MspInit+0x180>)
 800319a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800319e:	4a4a      	ldr	r2, [pc, #296]	@ (80032c8 <LTDC_MspInit+0x180>)
 80031a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031a8:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <LTDC_MspInit+0x180>)
 80031aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80031b6:	4b44      	ldr	r3, [pc, #272]	@ (80032c8 <LTDC_MspInit+0x180>)
 80031b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031bc:	4a42      	ldr	r2, [pc, #264]	@ (80032c8 <LTDC_MspInit+0x180>)
 80031be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031c6:	4b40      	ldr	r3, [pc, #256]	@ (80032c8 <LTDC_MspInit+0x180>)
 80031c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80031d4:	4b3c      	ldr	r3, [pc, #240]	@ (80032c8 <LTDC_MspInit+0x180>)
 80031d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031da:	4a3b      	ldr	r2, [pc, #236]	@ (80032c8 <LTDC_MspInit+0x180>)
 80031dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031e4:	4b38      	ldr	r3, [pc, #224]	@ (80032c8 <LTDC_MspInit+0x180>)
 80031e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031f2:	4b35      	ldr	r3, [pc, #212]	@ (80032c8 <LTDC_MspInit+0x180>)
 80031f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f8:	4a33      	ldr	r2, [pc, #204]	@ (80032c8 <LTDC_MspInit+0x180>)
 80031fa:	f043 0308 	orr.w	r3, r3, #8
 80031fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003202:	4b31      	ldr	r3, [pc, #196]	@ (80032c8 <LTDC_MspInit+0x180>)
 8003204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8003210:	f24d 2303 	movw	r3, #53763	@ 0xd203
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003216:	2302      	movs	r3, #2
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800321e:	2302      	movs	r3, #2
 8003220:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003222:	230e      	movs	r3, #14
 8003224:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800322a:	4619      	mov	r1, r3
 800322c:	4827      	ldr	r0, [pc, #156]	@ (80032cc <LTDC_MspInit+0x184>)
 800322e:	f003 fe4f 	bl	8006ed0 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
 8003232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003238:	230e      	movs	r3, #14
 800323a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800323c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003240:	4619      	mov	r1, r3
 8003242:	4823      	ldr	r0, [pc, #140]	@ (80032d0 <LTDC_MspInit+0x188>)
 8003244:	f003 fe44 	bl	8006ed0 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003248:	23ff      	movs	r3, #255	@ 0xff
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800324c:	230e      	movs	r3, #14
 800324e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003254:	4619      	mov	r1, r3
 8003256:	481f      	ldr	r0, [pc, #124]	@ (80032d4 <LTDC_MspInit+0x18c>)
 8003258:	f003 fe3a 	bl	8006ed0 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 800325c:	f240 2302 	movw	r3, #514	@ 0x202
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800326a:	2302      	movs	r3, #2
 800326c:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800326e:	230e      	movs	r3, #14
 8003270:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003276:	4619      	mov	r1, r3
 8003278:	4817      	ldr	r0, [pc, #92]	@ (80032d8 <LTDC_MspInit+0x190>)
 800327a:	f003 fe29 	bl	8006ed0 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 800327e:	2380      	movs	r3, #128	@ 0x80
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003282:	2301      	movs	r3, #1
 8003284:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800328a:	4619      	mov	r1, r3
 800328c:	4813      	ldr	r0, [pc, #76]	@ (80032dc <LTDC_MspInit+0x194>)
 800328e:	f003 fe1f 	bl	8006ed0 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8003292:	2201      	movs	r2, #1
 8003294:	2180      	movs	r1, #128	@ 0x80
 8003296:	4811      	ldr	r0, [pc, #68]	@ (80032dc <LTDC_MspInit+0x194>)
 8003298:	f004 f8d4 	bl	8007444 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 800329c:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <LTDC_MspInit+0x180>)
 800329e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032a2:	4a09      	ldr	r2, [pc, #36]	@ (80032c8 <LTDC_MspInit+0x180>)
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <LTDC_MspInit+0x180>)
 80032ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032b2:	4a05      	ldr	r2, [pc, #20]	@ (80032c8 <LTDC_MspInit+0x180>)
 80032b4:	f023 0308 	bic.w	r3, r3, #8
 80032b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 80032bc:	bf00      	nop
 80032be:	3738      	adds	r7, #56	@ 0x38
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	50001000 	.word	0x50001000
 80032c8:	58024400 	.word	0x58024400
 80032cc:	58022000 	.word	0x58022000
 80032d0:	58022400 	.word	0x58022400
 80032d4:	58022800 	.word	0x58022800
 80032d8:	58021c00 	.word	0x58021c00
 80032dc:	58020c00 	.word	0x58020c00

080032e0 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a11      	ldr	r2, [pc, #68]	@ (8003334 <DMA2D_MspInit+0x54>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d11a      	bne.n	8003328 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80032f2:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <DMA2D_MspInit+0x58>)
 80032f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003338 <DMA2D_MspInit+0x58>)
 80032fa:	f043 0310 	orr.w	r3, r3, #16
 80032fe:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <DMA2D_MspInit+0x58>)
 8003304:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003310:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <DMA2D_MspInit+0x58>)
 8003312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003314:	4a08      	ldr	r2, [pc, #32]	@ (8003338 <DMA2D_MspInit+0x58>)
 8003316:	f043 0310 	orr.w	r3, r3, #16
 800331a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <DMA2D_MspInit+0x58>)
 800331e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003320:	4a05      	ldr	r2, [pc, #20]	@ (8003338 <DMA2D_MspInit+0x58>)
 8003322:	f023 0310 	bic.w	r3, r3, #16
 8003326:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	52001000 	.word	0x52001000
 8003338:	58024400 	.word	0x58024400

0800333c <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	@ 0x28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003344:	4b18      	ldr	r3, [pc, #96]	@ (80033a8 <TIMx_PWM_MspInit+0x6c>)
 8003346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800334a:	4a17      	ldr	r2, [pc, #92]	@ (80033a8 <TIMx_PWM_MspInit+0x6c>)
 800334c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003354:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <TIMx_PWM_MspInit+0x6c>)
 8003356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800335a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8003362:	4b11      	ldr	r3, [pc, #68]	@ (80033a8 <TIMx_PWM_MspInit+0x6c>)
 8003364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003368:	4a0f      	ldr	r2, [pc, #60]	@ (80033a8 <TIMx_PWM_MspInit+0x6c>)
 800336a:	f043 0302 	orr.w	r3, r3, #2
 800336e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003372:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <TIMx_PWM_MspInit+0x6c>)
 8003374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003388:	2301      	movs	r3, #1
 800338a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 800338c:	2303      	movs	r3, #3
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8003390:	2301      	movs	r3, #1
 8003392:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4619      	mov	r1, r3
 800339a:	4804      	ldr	r0, [pc, #16]	@ (80033ac <TIMx_PWM_MspInit+0x70>)
 800339c:	f003 fd98 	bl	8006ed0 <HAL_GPIO_Init>
}
 80033a0:	bf00      	nop
 80033a2:	3728      	adds	r7, #40	@ 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	58024400 	.word	0x58024400
 80033ac:	58022800 	.word	0x58022800

080033b0 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a11      	ldr	r2, [pc, #68]	@ (8003400 <TIMx_PWM_Init+0x50>)
 80033bc:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f008 fac3 	bl	800b94a <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ffb9 	bl	800333c <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2204      	movs	r2, #4
 80033ce:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80033d6:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f008 fa53 	bl	800b89c <HAL_TIM_PWM_Init>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40010400 	.word	0x40010400

08003404 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8003416:	f06f 0301 	mvn.w	r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e044      	b.n	80034a8 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2234      	movs	r2, #52	@ 0x34
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	4a23      	ldr	r2, [pc, #140]	@ (80034b4 <BSP_SDRAM_Init+0xb0>)
 8003428:	4413      	add	r3, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f892 	bl	8003554 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2234      	movs	r2, #52	@ 0x34
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	4a1e      	ldr	r2, [pc, #120]	@ (80034b4 <BSP_SDRAM_Init+0xb0>)
 800343a:	4413      	add	r3, r2
 800343c:	2210      	movs	r2, #16
 800343e:	2104      	movs	r1, #4
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f83b 	bl	80034bc <MX_SDRAM_BANK2_Init>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e029      	b.n	80034a8 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8003454:	4b18      	ldr	r3, [pc, #96]	@ (80034b8 <BSP_SDRAM_Init+0xb4>)
 8003456:	2208      	movs	r2, #8
 8003458:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800345a:	4b17      	ldr	r3, [pc, #92]	@ (80034b8 <BSP_SDRAM_Init+0xb4>)
 800345c:	2203      	movs	r2, #3
 800345e:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8003460:	4b15      	ldr	r3, [pc, #84]	@ (80034b8 <BSP_SDRAM_Init+0xb4>)
 8003462:	f240 6203 	movw	r2, #1539	@ 0x603
 8003466:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8003468:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <BSP_SDRAM_Init+0xb4>)
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800346e:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <BSP_SDRAM_Init+0xb4>)
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8003474:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <BSP_SDRAM_Init+0xb4>)
 8003476:	2230      	movs	r2, #48	@ 0x30
 8003478:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800347a:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <BSP_SDRAM_Init+0xb4>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8003480:	4b0d      	ldr	r3, [pc, #52]	@ (80034b8 <BSP_SDRAM_Init+0xb4>)
 8003482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003486:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2234      	movs	r2, #52	@ 0x34
 800348c:	fb02 f303 	mul.w	r3, r2, r3
 8003490:	4a08      	ldr	r2, [pc, #32]	@ (80034b4 <BSP_SDRAM_Init+0xb0>)
 8003492:	4413      	add	r3, r2
 8003494:	4908      	ldr	r1, [pc, #32]	@ (80034b8 <BSP_SDRAM_Init+0xb4>)
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd fad2 	bl	8000a40 <MT48LC4M32B2_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80034a2:	f06f 0304 	mvn.w	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80034a8:	68fb      	ldr	r3, [r7, #12]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	24000d9c 	.word	0x24000d9c
 80034b8:	24000dd0 	.word	0x24000dd0

080034bc <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	@ 0x30
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 80034c8:	4b20      	ldr	r3, [pc, #128]	@ (800354c <MX_SDRAM_BANK2_Init+0x90>)
 80034ca:	4a21      	ldr	r2, [pc, #132]	@ (8003550 <MX_SDRAM_BANK2_Init+0x94>)
 80034cc:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80034e6:	4b19      	ldr	r3, [pc, #100]	@ (800354c <MX_SDRAM_BANK2_Init+0x90>)
 80034e8:	2240      	movs	r2, #64	@ 0x40
 80034ea:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80034f2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003500:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003508:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8003510:	2302      	movs	r3, #2
 8003512:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003514:	2307      	movs	r3, #7
 8003516:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8003518:	2304      	movs	r3, #4
 800351a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800351c:	2307      	movs	r3, #7
 800351e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8003520:	2302      	movs	r3, #2
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
 8003524:	2302      	movs	r3, #2
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
 8003528:	2302      	movs	r3, #2
 800352a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f008 f836 	bl	800b5a4 <HAL_SDRAM_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3730      	adds	r7, #48	@ 0x30
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	24000d9c 	.word	0x24000d9c
 8003550:	52004140 	.word	0x52004140

08003554 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08e      	sub	sp, #56	@ 0x38
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800355c:	4b73      	ldr	r3, [pc, #460]	@ (800372c <SDRAM_MspInit+0x1d8>)
 800355e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003562:	4a72      	ldr	r2, [pc, #456]	@ (800372c <SDRAM_MspInit+0x1d8>)
 8003564:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003568:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800356c:	4b6f      	ldr	r3, [pc, #444]	@ (800372c <SDRAM_MspInit+0x1d8>)
 800356e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800357a:	4b6c      	ldr	r3, [pc, #432]	@ (800372c <SDRAM_MspInit+0x1d8>)
 800357c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003580:	4a6a      	ldr	r2, [pc, #424]	@ (800372c <SDRAM_MspInit+0x1d8>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800358a:	4b68      	ldr	r3, [pc, #416]	@ (800372c <SDRAM_MspInit+0x1d8>)
 800358c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003598:	4b64      	ldr	r3, [pc, #400]	@ (800372c <SDRAM_MspInit+0x1d8>)
 800359a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800359e:	4a63      	ldr	r2, [pc, #396]	@ (800372c <SDRAM_MspInit+0x1d8>)
 80035a0:	f043 0308 	orr.w	r3, r3, #8
 80035a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035a8:	4b60      	ldr	r3, [pc, #384]	@ (800372c <SDRAM_MspInit+0x1d8>)
 80035aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035b6:	4b5d      	ldr	r3, [pc, #372]	@ (800372c <SDRAM_MspInit+0x1d8>)
 80035b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035bc:	4a5b      	ldr	r2, [pc, #364]	@ (800372c <SDRAM_MspInit+0x1d8>)
 80035be:	f043 0310 	orr.w	r3, r3, #16
 80035c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035c6:	4b59      	ldr	r3, [pc, #356]	@ (800372c <SDRAM_MspInit+0x1d8>)
 80035c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035d4:	4b55      	ldr	r3, [pc, #340]	@ (800372c <SDRAM_MspInit+0x1d8>)
 80035d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035da:	4a54      	ldr	r2, [pc, #336]	@ (800372c <SDRAM_MspInit+0x1d8>)
 80035dc:	f043 0320 	orr.w	r3, r3, #32
 80035e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035e4:	4b51      	ldr	r3, [pc, #324]	@ (800372c <SDRAM_MspInit+0x1d8>)
 80035e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035f2:	4b4e      	ldr	r3, [pc, #312]	@ (800372c <SDRAM_MspInit+0x1d8>)
 80035f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035f8:	4a4c      	ldr	r2, [pc, #304]	@ (800372c <SDRAM_MspInit+0x1d8>)
 80035fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003602:	4b4a      	ldr	r3, [pc, #296]	@ (800372c <SDRAM_MspInit+0x1d8>)
 8003604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003610:	4b46      	ldr	r3, [pc, #280]	@ (800372c <SDRAM_MspInit+0x1d8>)
 8003612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003616:	4a45      	ldr	r2, [pc, #276]	@ (800372c <SDRAM_MspInit+0x1d8>)
 8003618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800361c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003620:	4b42      	ldr	r3, [pc, #264]	@ (800372c <SDRAM_MspInit+0x1d8>)
 8003622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800362e:	2302      	movs	r3, #2
 8003630:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003632:	2301      	movs	r3, #1
 8003634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003636:	2303      	movs	r3, #3
 8003638:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800363a:	230c      	movs	r3, #12
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800363e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003648:	4619      	mov	r1, r3
 800364a:	4839      	ldr	r0, [pc, #228]	@ (8003730 <SDRAM_MspInit+0x1dc>)
 800364c:	f003 fc40 	bl	8006ed0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003650:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800365a:	4619      	mov	r1, r3
 800365c:	4835      	ldr	r0, [pc, #212]	@ (8003734 <SDRAM_MspInit+0x1e0>)
 800365e:	f003 fc37 	bl	8006ed0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003662:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003666:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800366c:	4619      	mov	r1, r3
 800366e:	4832      	ldr	r0, [pc, #200]	@ (8003738 <SDRAM_MspInit+0x1e4>)
 8003670:	f003 fc2e 	bl	8006ed0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8003674:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800367a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800367e:	4619      	mov	r1, r3
 8003680:	482e      	ldr	r0, [pc, #184]	@ (800373c <SDRAM_MspInit+0x1e8>)
 8003682:	f003 fc25 	bl	8006ed0 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8003686:	23e0      	movs	r3, #224	@ 0xe0
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800368a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800368e:	4619      	mov	r1, r3
 8003690:	482b      	ldr	r0, [pc, #172]	@ (8003740 <SDRAM_MspInit+0x1ec>)
 8003692:	f003 fc1d 	bl	8006ed0 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8003696:	4b2b      	ldr	r3, [pc, #172]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 8003698:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800369c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800369e:	4b29      	ldr	r3, [pc, #164]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036a4:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80036a6:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036a8:	2280      	movs	r2, #128	@ 0x80
 80036aa:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80036ac:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80036b2:	4b24      	ldr	r3, [pc, #144]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036b4:	f240 2202 	movw	r2, #514	@ 0x202
 80036b8:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80036ba:	4b22      	ldr	r3, [pc, #136]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036bc:	f640 0208 	movw	r2, #2056	@ 0x808
 80036c0:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80036c2:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036c4:	2220      	movs	r2, #32
 80036c6:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80036c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036ca:	2280      	movs	r2, #128	@ 0x80
 80036cc:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80036ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036d4:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80036d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80036dc:	4b19      	ldr	r3, [pc, #100]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 80036e2:	4b18      	ldr	r3, [pc, #96]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036e4:	2280      	movs	r2, #128	@ 0x80
 80036e6:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 80036e8:	4b16      	ldr	r3, [pc, #88]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 80036ee:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80036f4:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036f6:	4a14      	ldr	r2, [pc, #80]	@ (8003748 <SDRAM_MspInit+0x1f4>)
 80036f8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80036fa:	4b14      	ldr	r3, [pc, #80]	@ (800374c <SDRAM_MspInit+0x1f8>)
 80036fc:	4a11      	ldr	r2, [pc, #68]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003700:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 8003702:	4a12      	ldr	r2, [pc, #72]	@ (800374c <SDRAM_MspInit+0x1f8>)
 8003704:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8003706:	480f      	ldr	r0, [pc, #60]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 8003708:	f005 fa8c 	bl	8008c24 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800370c:	480d      	ldr	r0, [pc, #52]	@ (8003744 <SDRAM_MspInit+0x1f0>)
 800370e:	f005 fa3d 	bl	8008b8c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	210f      	movs	r1, #15
 8003716:	207a      	movs	r0, #122	@ 0x7a
 8003718:	f003 f8ac 	bl	8006874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800371c:	207a      	movs	r0, #122	@ 0x7a
 800371e:	f003 f8c3 	bl	80068a8 <HAL_NVIC_EnableIRQ>
}
 8003722:	bf00      	nop
 8003724:	3738      	adds	r7, #56	@ 0x38
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	58024400 	.word	0x58024400
 8003730:	58020c00 	.word	0x58020c00
 8003734:	58021000 	.word	0x58021000
 8003738:	58021400 	.word	0x58021400
 800373c:	58021800 	.word	0x58021800
 8003740:	58021c00 	.word	0x58021c00
 8003744:	24000df0 	.word	0x24000df0
 8003748:	52000040 	.word	0x52000040
 800374c:	24000d9c 	.word	0x24000d9c

08003750 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11c      	bne.n	800379e <BSP_TS_Init+0x4e>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d018      	beq.n	800379e <BSP_TS_Init+0x4e>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8003774:	d813      	bhi.n	800379e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00f      	beq.n	800379e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003786:	d80a      	bhi.n	800379e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	428b      	cmp	r3, r1
 8003796:	bf28      	it	cs
 8003798:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800379a:	429a      	cmp	r2, r3
 800379c:	d903      	bls.n	80037a6 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800379e:	f06f 0301 	mvn.w	r3, #1
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e06e      	b.n	8003884 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f98c 	bl	8003ac4 <FT5336_Probe>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	e064      	b.n	8003884 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4934      	ldr	r1, [pc, #208]	@ (8003890 <BSP_TS_Init+0x140>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	019b      	lsls	r3, r3, #6
 80037c4:	440b      	add	r3, r1
 80037c6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	4930      	ldr	r1, [pc, #192]	@ (8003890 <BSP_TS_Init+0x140>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	019b      	lsls	r3, r3, #6
 80037d2:	440b      	add	r3, r1
 80037d4:	3304      	adds	r3, #4
 80037d6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	492c      	ldr	r1, [pc, #176]	@ (8003890 <BSP_TS_Init+0x140>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	440b      	add	r3, r1
 80037e4:	3308      	adds	r3, #8
 80037e6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	4928      	ldr	r1, [pc, #160]	@ (8003890 <BSP_TS_Init+0x140>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	019b      	lsls	r3, r3, #6
 80037f2:	440b      	add	r3, r1
 80037f4:	330c      	adds	r3, #12
 80037f6:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80037f8:	4b26      	ldr	r3, [pc, #152]	@ (8003894 <BSP_TS_Init+0x144>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	4926      	ldr	r1, [pc, #152]	@ (8003898 <BSP_TS_Init+0x148>)
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003806:	f107 010c 	add.w	r1, r7, #12
 800380a:	4610      	mov	r0, r2
 800380c:	4798      	blx	r3
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	da03      	bge.n	800381c <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003814:	f06f 0304 	mvn.w	r3, #4
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	e033      	b.n	8003884 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	491c      	ldr	r1, [pc, #112]	@ (8003890 <BSP_TS_Init+0x140>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	019b      	lsls	r3, r3, #6
 8003824:	440b      	add	r3, r1
 8003826:	3310      	adds	r3, #16
 8003828:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4918      	ldr	r1, [pc, #96]	@ (8003890 <BSP_TS_Init+0x140>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	019b      	lsls	r3, r3, #6
 8003832:	440b      	add	r3, r1
 8003834:	3314      	adds	r3, #20
 8003836:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	e01f      	b.n	800387e <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4413      	add	r3, r2
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	4811      	ldr	r0, [pc, #68]	@ (8003890 <BSP_TS_Init+0x140>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	0119      	lsls	r1, r3, #4
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	440b      	add	r3, r1
 8003854:	3306      	adds	r3, #6
 8003856:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	4413      	add	r3, r2
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	480a      	ldr	r0, [pc, #40]	@ (8003890 <BSP_TS_Init+0x140>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	0119      	lsls	r1, r3, #4
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	440b      	add	r3, r1
 8003870:	330a      	adds	r3, #10
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4403      	add	r3, r0
 8003876:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	3301      	adds	r3, #1
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d9dc      	bls.n	800383e <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8003884:	69fb      	ldr	r3, [r7, #28]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	24000e64 	.word	0x24000e64
 8003894:	24000e5c 	.word	0x24000e5c
 8003898:	24000e60 	.word	0x24000e60

0800389c <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	@ 0x28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80038b0:	f06f 0301 	mvn.w	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b6:	e0f9      	b.n	8003aac <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80038b8:	4b7f      	ldr	r3, [pc, #508]	@ (8003ab8 <BSP_TS_GetState+0x21c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	497f      	ldr	r1, [pc, #508]	@ (8003abc <BSP_TS_GetState+0x220>)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80038c6:	f107 0108 	add.w	r1, r7, #8
 80038ca:	4610      	mov	r0, r2
 80038cc:	4798      	blx	r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da03      	bge.n	80038dc <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80038d4:	f06f 0304 	mvn.w	r3, #4
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038da:	e0e7      	b.n	8003aac <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80d1 	beq.w	8003a86 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80038ec:	4a74      	ldr	r2, [pc, #464]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	019b      	lsls	r3, r3, #6
 80038f2:	4413      	add	r3, r2
 80038f4:	3308      	adds	r3, #8
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8003908:	4a6d      	ldr	r2, [pc, #436]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	4413      	add	r3, r2
 8003910:	3308      	adds	r3, #8
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800391c:	4a68      	ldr	r2, [pc, #416]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	019b      	lsls	r3, r3, #6
 8003922:	4413      	add	r3, r2
 8003924:	3310      	adds	r3, #16
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8003930:	4a63      	ldr	r2, [pc, #396]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	4413      	add	r3, r2
 8003938:	3308      	adds	r3, #8
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8003944:	4a5e      	ldr	r2, [pc, #376]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	019b      	lsls	r3, r3, #6
 800394a:	4413      	add	r3, r2
 800394c:	3314      	adds	r3, #20
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8003956:	4a5a      	ldr	r2, [pc, #360]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	019b      	lsls	r3, r3, #6
 800395c:	4413      	add	r3, r2
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	fb03 f202 	mul.w	r2, r3, r2
 8003966:	4956      	ldr	r1, [pc, #344]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	019b      	lsls	r3, r3, #6
 800396c:	440b      	add	r3, r1
 800396e:	3310      	adds	r3, #16
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	fbb2 f2f3 	udiv	r2, r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800397a:	4a51      	ldr	r2, [pc, #324]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	019b      	lsls	r3, r3, #6
 8003980:	4413      	add	r3, r2
 8003982:	3304      	adds	r3, #4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	fb03 f202 	mul.w	r2, r3, r2
 800398c:	494c      	ldr	r1, [pc, #304]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	019b      	lsls	r3, r3, #6
 8003992:	440b      	add	r3, r1
 8003994:	3314      	adds	r3, #20
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fbb2 f2f3 	udiv	r2, r2, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	4945      	ldr	r1, [pc, #276]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	019b      	lsls	r3, r3, #6
 80039b0:	440b      	add	r3, r1
 80039b2:	3318      	adds	r3, #24
 80039b4:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d909      	bls.n	80039ce <BSP_TS_GetState+0x132>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	4940      	ldr	r1, [pc, #256]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	019b      	lsls	r3, r3, #6
 80039c4:	440b      	add	r3, r1
 80039c6:	3318      	adds	r3, #24
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	e008      	b.n	80039e0 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80039ce:	4a3c      	ldr	r2, [pc, #240]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	019b      	lsls	r3, r3, #6
 80039d4:	4413      	add	r3, r2
 80039d6:	3318      	adds	r3, #24
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80039de:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80039e0:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	4936      	ldr	r1, [pc, #216]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	019b      	lsls	r3, r3, #6
 80039ec:	440b      	add	r3, r1
 80039ee:	332c      	adds	r3, #44	@ 0x2c
 80039f0:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d909      	bls.n	8003a0a <BSP_TS_GetState+0x16e>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	4931      	ldr	r1, [pc, #196]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	019b      	lsls	r3, r3, #6
 8003a00:	440b      	add	r3, r1
 8003a02:	332c      	adds	r3, #44	@ 0x2c
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	e008      	b.n	8003a1c <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8003a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	019b      	lsls	r3, r3, #6
 8003a10:	4413      	add	r3, r2
 8003a12:	332c      	adds	r3, #44	@ 0x2c
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003a1a:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003a1c:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8003a1e:	4a28      	ldr	r2, [pc, #160]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	019b      	lsls	r3, r3, #6
 8003a24:	4413      	add	r3, r2
 8003a26:	330c      	adds	r3, #12
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d808      	bhi.n	8003a42 <BSP_TS_GetState+0x1a6>
 8003a30:	4a23      	ldr	r2, [pc, #140]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	4413      	add	r3, r2
 8003a38:	330c      	adds	r3, #12
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d910      	bls.n	8003a64 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	491e      	ldr	r1, [pc, #120]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	019b      	lsls	r3, r3, #6
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3318      	adds	r3, #24
 8003a50:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	491a      	ldr	r1, [pc, #104]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	019b      	lsls	r3, r3, #6
 8003a5c:	440b      	add	r3, r1
 8003a5e:	332c      	adds	r3, #44	@ 0x2c
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e023      	b.n	8003aac <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003a64:	4a16      	ldr	r2, [pc, #88]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3318      	adds	r3, #24
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003a74:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	4413      	add	r3, r2
 8003a7c:	332c      	adds	r3, #44	@ 0x2c
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	e012      	b.n	8003aac <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	4413      	add	r3, r2
 8003a94:	3318      	adds	r3, #24
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003a9c:	4a08      	ldr	r2, [pc, #32]	@ (8003ac0 <BSP_TS_GetState+0x224>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	019b      	lsls	r3, r3, #6
 8003aa2:	4413      	add	r3, r2
 8003aa4:	332c      	adds	r3, #44	@ 0x2c
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3728      	adds	r7, #40	@ 0x28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	24000e5c 	.word	0x24000e5c
 8003abc:	24000e60 	.word	0x24000e60
 8003ac0:	24000e64 	.word	0x24000e64

08003ac4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	@ 0x28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8003ad4:	2370      	movs	r3, #112	@ 0x70
 8003ad6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003ad8:	4b23      	ldr	r3, [pc, #140]	@ (8003b68 <FT5336_Probe+0xa4>)
 8003ada:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003adc:	4b23      	ldr	r3, [pc, #140]	@ (8003b6c <FT5336_Probe+0xa8>)
 8003ade:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8003ae0:	4b23      	ldr	r3, [pc, #140]	@ (8003b70 <FT5336_Probe+0xac>)
 8003ae2:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8003ae4:	4b23      	ldr	r3, [pc, #140]	@ (8003b74 <FT5336_Probe+0xb0>)
 8003ae6:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003ae8:	4b23      	ldr	r3, [pc, #140]	@ (8003b78 <FT5336_Probe+0xb4>)
 8003aea:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003aec:	f107 030c 	add.w	r3, r7, #12
 8003af0:	4619      	mov	r1, r3
 8003af2:	4822      	ldr	r0, [pc, #136]	@ (8003b7c <FT5336_Probe+0xb8>)
 8003af4:	f7fc fc44 	bl	8000380 <FT5336_RegisterBusIO>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8003afe:	f06f 0307 	mvn.w	r3, #7
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b04:	e02a      	b.n	8003b5c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	481b      	ldr	r0, [pc, #108]	@ (8003b7c <FT5336_Probe+0xb8>)
 8003b0e:	f7fc fd31 	bl	8000574 <FT5336_ReadID>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b18:	f06f 0304 	mvn.w	r3, #4
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b1e:	e01d      	b.n	8003b5c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b51      	cmp	r3, #81	@ 0x51
 8003b24:	d003      	beq.n	8003b2e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b26:	f06f 0306 	mvn.w	r3, #6
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b2c:	e016      	b.n	8003b5c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8003b2e:	4a14      	ldr	r2, [pc, #80]	@ (8003b80 <FT5336_Probe+0xbc>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4912      	ldr	r1, [pc, #72]	@ (8003b7c <FT5336_Probe+0xb8>)
 8003b34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003b38:	4b12      	ldr	r3, [pc, #72]	@ (8003b84 <FT5336_Probe+0xc0>)
 8003b3a:	4a13      	ldr	r2, [pc, #76]	@ (8003b88 <FT5336_Probe+0xc4>)
 8003b3c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8003b3e:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <FT5336_Probe+0xc0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	490e      	ldr	r1, [pc, #56]	@ (8003b80 <FT5336_Probe+0xbc>)
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4798      	blx	r3
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b56:	f06f 0304 	mvn.w	r3, #4
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3728      	adds	r7, #40	@ 0x28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	08001dc9 	.word	0x08001dc9
 8003b6c:	08001e3d 	.word	0x08001e3d
 8003b70:	08001f65 	.word	0x08001f65
 8003b74:	08001f09 	.word	0x08001f09
 8003b78:	08001fc1 	.word	0x08001fc1
 8003b7c:	24000ea4 	.word	0x24000ea4
 8003b80:	24000e60 	.word	0x24000e60
 8003b84:	24000e5c 	.word	0x24000e5c
 8003b88:	24000000 	.word	0x24000000

08003b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b92:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <HAL_MspInit+0x30>)
 8003b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b98:	4a08      	ldr	r2, [pc, #32]	@ (8003bbc <HAL_MspInit+0x30>)
 8003b9a:	f043 0302 	orr.w	r3, r3, #2
 8003b9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ba2:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <HAL_MspInit+0x30>)
 8003ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	58024400 	.word	0x58024400

08003bc0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003bd2:	bf00      	nop
 8003bd4:	e7fd      	b.n	8003bd2 <HardFault_Handler+0x4>

08003bd6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003bda:	bf00      	nop
 8003bdc:	e7fd      	b.n	8003bda <MemManage_Handler+0x4>

08003bde <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003be2:	bf00      	nop
 8003be4:	e7fd      	b.n	8003be2 <BusFault_Handler+0x4>

08003be6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003bea:	bf00      	nop
 8003bec:	e7fd      	b.n	8003bea <UsageFault_Handler+0x4>

08003bee <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0
}
 8003c0e:	bf00      	nop
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003c1c:	f002 fd12 	bl	8006644 <HAL_IncTick>
}
 8003c20:	bf00      	nop
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f7fe f8bb 	bl	8001da4 <BSP_PB_IRQHandler>
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	e00a      	b.n	8003c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c44:	f3af 8000 	nop.w
 8003c48:	4601      	mov	r1, r0
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	60ba      	str	r2, [r7, #8]
 8003c50:	b2ca      	uxtb	r2, r1
 8003c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3301      	adds	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	dbf0      	blt.n	8003c44 <_read+0x12>
  }

  return len;
 8003c62:	687b      	ldr	r3, [r7, #4]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e009      	b.n	8003c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	60ba      	str	r2, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	dbf1      	blt.n	8003c7e <_write+0x12>
  }
  return len;
 8003c9a:	687b      	ldr	r3, [r7, #4]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <_close>:

int _close(int file)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ccc:	605a      	str	r2, [r3, #4]
  return 0;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <_isatty>:

int _isatty(int file)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ce4:	2301      	movs	r3, #1
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d14:	4a14      	ldr	r2, [pc, #80]	@ (8003d68 <_sbrk+0x5c>)
 8003d16:	4b15      	ldr	r3, [pc, #84]	@ (8003d6c <_sbrk+0x60>)
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d20:	4b13      	ldr	r3, [pc, #76]	@ (8003d70 <_sbrk+0x64>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d28:	4b11      	ldr	r3, [pc, #68]	@ (8003d70 <_sbrk+0x64>)
 8003d2a:	4a12      	ldr	r2, [pc, #72]	@ (8003d74 <_sbrk+0x68>)
 8003d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d2e:	4b10      	ldr	r3, [pc, #64]	@ (8003d70 <_sbrk+0x64>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d207      	bcs.n	8003d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d3c:	f008 fb86 	bl	800c44c <__errno>
 8003d40:	4603      	mov	r3, r0
 8003d42:	220c      	movs	r2, #12
 8003d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d4a:	e009      	b.n	8003d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d4c:	4b08      	ldr	r3, [pc, #32]	@ (8003d70 <_sbrk+0x64>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d52:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <_sbrk+0x64>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	4a05      	ldr	r2, [pc, #20]	@ (8003d70 <_sbrk+0x64>)
 8003d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	24080000 	.word	0x24080000
 8003d6c:	00000400 	.word	0x00000400
 8003d70:	24000ecc 	.word	0x24000ecc
 8003d74:	240010c0 	.word	0x240010c0

08003d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d7c:	4b37      	ldr	r3, [pc, #220]	@ (8003e5c <SystemInit+0xe4>)
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d82:	4a36      	ldr	r2, [pc, #216]	@ (8003e5c <SystemInit+0xe4>)
 8003d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d8c:	4b34      	ldr	r3, [pc, #208]	@ (8003e60 <SystemInit+0xe8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	2b06      	cmp	r3, #6
 8003d96:	d807      	bhi.n	8003da8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d98:	4b31      	ldr	r3, [pc, #196]	@ (8003e60 <SystemInit+0xe8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 030f 	bic.w	r3, r3, #15
 8003da0:	4a2f      	ldr	r2, [pc, #188]	@ (8003e60 <SystemInit+0xe8>)
 8003da2:	f043 0307 	orr.w	r3, r3, #7
 8003da6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003da8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e64 <SystemInit+0xec>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2d      	ldr	r2, [pc, #180]	@ (8003e64 <SystemInit+0xec>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003db4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e64 <SystemInit+0xec>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003dba:	4b2a      	ldr	r3, [pc, #168]	@ (8003e64 <SystemInit+0xec>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4929      	ldr	r1, [pc, #164]	@ (8003e64 <SystemInit+0xec>)
 8003dc0:	4b29      	ldr	r3, [pc, #164]	@ (8003e68 <SystemInit+0xf0>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003dc6:	4b26      	ldr	r3, [pc, #152]	@ (8003e60 <SystemInit+0xe8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003dd2:	4b23      	ldr	r3, [pc, #140]	@ (8003e60 <SystemInit+0xe8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 030f 	bic.w	r3, r3, #15
 8003dda:	4a21      	ldr	r2, [pc, #132]	@ (8003e60 <SystemInit+0xe8>)
 8003ddc:	f043 0307 	orr.w	r3, r3, #7
 8003de0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003de2:	4b20      	ldr	r3, [pc, #128]	@ (8003e64 <SystemInit+0xec>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003de8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e64 <SystemInit+0xec>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003dee:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <SystemInit+0xec>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003df4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e64 <SystemInit+0xec>)
 8003df6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e6c <SystemInit+0xf4>)
 8003df8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8003e64 <SystemInit+0xec>)
 8003dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e70 <SystemInit+0xf8>)
 8003dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e00:	4b18      	ldr	r3, [pc, #96]	@ (8003e64 <SystemInit+0xec>)
 8003e02:	4a1c      	ldr	r2, [pc, #112]	@ (8003e74 <SystemInit+0xfc>)
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e06:	4b17      	ldr	r3, [pc, #92]	@ (8003e64 <SystemInit+0xec>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e0c:	4b15      	ldr	r3, [pc, #84]	@ (8003e64 <SystemInit+0xec>)
 8003e0e:	4a19      	ldr	r2, [pc, #100]	@ (8003e74 <SystemInit+0xfc>)
 8003e10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e12:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <SystemInit+0xec>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e18:	4b12      	ldr	r3, [pc, #72]	@ (8003e64 <SystemInit+0xec>)
 8003e1a:	4a16      	ldr	r2, [pc, #88]	@ (8003e74 <SystemInit+0xfc>)
 8003e1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e1e:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <SystemInit+0xec>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e24:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <SystemInit+0xec>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a0e      	ldr	r2, [pc, #56]	@ (8003e64 <SystemInit+0xec>)
 8003e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e30:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <SystemInit+0xec>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003e36:	4b10      	ldr	r3, [pc, #64]	@ (8003e78 <SystemInit+0x100>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b10      	ldr	r3, [pc, #64]	@ (8003e7c <SystemInit+0x104>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e42:	d202      	bcs.n	8003e4a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003e44:	4b0e      	ldr	r3, [pc, #56]	@ (8003e80 <SystemInit+0x108>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e84 <SystemInit+0x10c>)
 8003e4c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003e50:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	e000ed00 	.word	0xe000ed00
 8003e60:	52002000 	.word	0x52002000
 8003e64:	58024400 	.word	0x58024400
 8003e68:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e6c:	02020200 	.word	0x02020200
 8003e70:	01ff0000 	.word	0x01ff0000
 8003e74:	01010280 	.word	0x01010280
 8003e78:	5c001000 	.word	0x5c001000
 8003e7c:	ffff0000 	.word	0xffff0000
 8003e80:	51008108 	.word	0x51008108
 8003e84:	52004000 	.word	0x52004000

08003e88 <clamp_u8>:
// i2c real and true
extern I2C_HandleTypeDef hi2c4;

uint8_t
clamp_u8(int x)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
    if (x > 255)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2bff      	cmp	r3, #255	@ 0xff
 8003e94:	dd01      	ble.n	8003e9a <clamp_u8+0x12>
        return 255;
 8003e96:	23ff      	movs	r3, #255	@ 0xff
 8003e98:	e006      	b.n	8003ea8 <clamp_u8+0x20>
    if (x < 0)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	da01      	bge.n	8003ea4 <clamp_u8+0x1c>
        return 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e001      	b.n	8003ea8 <clamp_u8+0x20>
    return x;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	b2db      	uxtb	r3, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <clamp_int>:

int clamp_int(int x, int min, int max)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
    if (x > max)
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	dd01      	ble.n	8003ecc <clamp_int+0x18>
        return max;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	e006      	b.n	8003eda <clamp_int+0x26>
    if (x < min)
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	da01      	bge.n	8003ed8 <clamp_int+0x24>
        return min;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	e000      	b.n	8003eda <clamp_int+0x26>
    return x;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <pixel_callback_black_on_white>:

TS_State_t TS_State;
TS_Init_t hTS;

static void pixel_callback_black_on_white(int16_t x, int16_t y, uint8_t count, uint8_t alpha, void *state)
{
 8003ee6:	b590      	push	{r4, r7, lr}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	4604      	mov	r4, r0
 8003eee:	4608      	mov	r0, r1
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	80fb      	strh	r3, [r7, #6]
 8003ef8:	4603      	mov	r3, r0
 8003efa:	80bb      	strh	r3, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
 8003f00:	4613      	mov	r3, r2
 8003f02:	70bb      	strb	r3, [r7, #2]
    uint8_t c = 255 - alpha;
 8003f04:	78bb      	ldrb	r3, [r7, #2]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	73fb      	strb	r3, [r7, #15]
    UTIL_LCD_DrawHLine(x, y, count, (0xff << 24) | (c << 16) | (c << 8) | c);
 8003f0a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003f0e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003f12:	78fc      	ldrb	r4, [r7, #3]
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	431a      	orrs	r2, r3
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	4622      	mov	r2, r4
 8003f28:	f7fd f918 	bl	800115c <UTIL_LCD_DrawHLine>
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd90      	pop	{r4, r7, pc}

08003f34 <pixel_callback_blend>:
    const struct mf_font_s *font;
} TextBlendInfo;

static void pixel_callback_blend(
    int16_t x, int16_t y, uint8_t count, uint8_t alpha, void *state)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4623      	mov	r3, r4
 8003f44:	80fb      	strh	r3, [r7, #6]
 8003f46:	4603      	mov	r3, r0
 8003f48:	80bb      	strh	r3, [r7, #4]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	70fb      	strb	r3, [r7, #3]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	70bb      	strb	r3, [r7, #2]
    TextBlendInfo *blend_info = (TextBlendInfo *)state;
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	617b      	str	r3, [r7, #20]
    Color back = blend_info->back;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	613b      	str	r3, [r7, #16]
    Color fore = blend_info->fore;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
    Color output;

    output.argb.r = (fore.argb.r * alpha + back.argb.r * (255 - alpha)) / 255;
 8003f62:	7bbb      	ldrb	r3, [r7, #14]
 8003f64:	461a      	mov	r2, r3
 8003f66:	78bb      	ldrb	r3, [r7, #2]
 8003f68:	fb03 f202 	mul.w	r2, r3, r2
 8003f6c:	7cbb      	ldrb	r3, [r7, #18]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	78bb      	ldrb	r3, [r7, #2]
 8003f72:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4a21      	ldr	r2, [pc, #132]	@ (8004004 <pixel_callback_blend+0xd0>)
 8003f7e:	fb82 1203 	smull	r1, r2, r2, r3
 8003f82:	441a      	add	r2, r3
 8003f84:	11d2      	asrs	r2, r2, #7
 8003f86:	17db      	asrs	r3, r3, #31
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	72bb      	strb	r3, [r7, #10]
    output.argb.g = (fore.argb.g * alpha + back.argb.g * (255 - alpha)) / 255;
 8003f8e:	7b7b      	ldrb	r3, [r7, #13]
 8003f90:	461a      	mov	r2, r3
 8003f92:	78bb      	ldrb	r3, [r7, #2]
 8003f94:	fb03 f202 	mul.w	r2, r3, r2
 8003f98:	7c7b      	ldrb	r3, [r7, #17]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	78bb      	ldrb	r3, [r7, #2]
 8003f9e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a16      	ldr	r2, [pc, #88]	@ (8004004 <pixel_callback_blend+0xd0>)
 8003faa:	fb82 1203 	smull	r1, r2, r2, r3
 8003fae:	441a      	add	r2, r3
 8003fb0:	11d2      	asrs	r2, r2, #7
 8003fb2:	17db      	asrs	r3, r3, #31
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	727b      	strb	r3, [r7, #9]
    output.argb.b = (fore.argb.b * alpha + back.argb.b * (255 - alpha)) / 255;
 8003fba:	7b3b      	ldrb	r3, [r7, #12]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	78bb      	ldrb	r3, [r7, #2]
 8003fc0:	fb03 f202 	mul.w	r2, r3, r2
 8003fc4:	7c3b      	ldrb	r3, [r7, #16]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	78bb      	ldrb	r3, [r7, #2]
 8003fca:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004004 <pixel_callback_blend+0xd0>)
 8003fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8003fda:	441a      	add	r2, r3
 8003fdc:	11d2      	asrs	r2, r2, #7
 8003fde:	17db      	asrs	r3, r3, #31
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	723b      	strb	r3, [r7, #8]
    output.argb.a = 255;
 8003fe6:	23ff      	movs	r3, #255	@ 0xff
 8003fe8:	72fb      	strb	r3, [r7, #11]

    UTIL_LCD_DrawHLine(x, y, count, output.c);
 8003fea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003fee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f7fd f8b1 	bl	800115c <UTIL_LCD_DrawHLine>
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd90      	pop	{r4, r7, pc}
 8004002:	bf00      	nop
 8004004:	80808081 	.word	0x80808081

08004008 <pixel_callback_color_on_white>:

static void pixel_callback_color_on_white(int16_t x, int16_t y, uint8_t count, uint8_t alpha, void *state)
{
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	4604      	mov	r4, r0
 8004010:	4608      	mov	r0, r1
 8004012:	4611      	mov	r1, r2
 8004014:	461a      	mov	r2, r3
 8004016:	4623      	mov	r3, r4
 8004018:	80fb      	strh	r3, [r7, #6]
 800401a:	4603      	mov	r3, r0
 800401c:	80bb      	strh	r3, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	70fb      	strb	r3, [r7, #3]
 8004022:	4613      	mov	r3, r2
 8004024:	70bb      	strb	r3, [r7, #2]
    Color c;
    c.c = (uintptr_t)state;
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	60fb      	str	r3, [r7, #12]
    c.argb.r = (c.argb.r * alpha + 255 * (255 - alpha)) >> 8;
 800402a:	7bbb      	ldrb	r3, [r7, #14]
 800402c:	461a      	mov	r2, r3
 800402e:	78bb      	ldrb	r3, [r7, #2]
 8004030:	fb03 f102 	mul.w	r1, r3, r2
 8004034:	78bb      	ldrb	r3, [r7, #2]
 8004036:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 800403a:	4613      	mov	r3, r2
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	440b      	add	r3, r1
 8004042:	121b      	asrs	r3, r3, #8
 8004044:	b2db      	uxtb	r3, r3
 8004046:	73bb      	strb	r3, [r7, #14]
    c.argb.g = (c.argb.g * alpha + 255 * (255 - alpha)) >> 8;
 8004048:	7b7b      	ldrb	r3, [r7, #13]
 800404a:	461a      	mov	r2, r3
 800404c:	78bb      	ldrb	r3, [r7, #2]
 800404e:	fb03 f102 	mul.w	r1, r3, r2
 8004052:	78bb      	ldrb	r3, [r7, #2]
 8004054:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8004058:	4613      	mov	r3, r2
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	440b      	add	r3, r1
 8004060:	121b      	asrs	r3, r3, #8
 8004062:	b2db      	uxtb	r3, r3
 8004064:	737b      	strb	r3, [r7, #13]
    c.argb.b = (c.argb.b * alpha + 255 * (255 - alpha)) >> 8;
 8004066:	7b3b      	ldrb	r3, [r7, #12]
 8004068:	461a      	mov	r2, r3
 800406a:	78bb      	ldrb	r3, [r7, #2]
 800406c:	fb03 f102 	mul.w	r1, r3, r2
 8004070:	78bb      	ldrb	r3, [r7, #2]
 8004072:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8004076:	4613      	mov	r3, r2
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	440b      	add	r3, r1
 800407e:	121b      	asrs	r3, r3, #8
 8004080:	b2db      	uxtb	r3, r3
 8004082:	733b      	strb	r3, [r7, #12]
    UTIL_LCD_DrawHLine(x, y, count, c.c);
 8004084:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004088:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f7fd f864 	bl	800115c <UTIL_LCD_DrawHLine>
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	bd90      	pop	{r4, r7, pc}

0800409c <char_callback_black_on_white>:

int lastx = 0, lasty = 0;
static uint8_t char_callback_black_on_white(int16_t x0, int16_t y0, mf_char character, void *state)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	607b      	str	r3, [r7, #4]
 80040a4:	4603      	mov	r3, r0
 80040a6:	81fb      	strh	r3, [r7, #14]
 80040a8:	460b      	mov	r3, r1
 80040aa:	81bb      	strh	r3, [r7, #12]
 80040ac:	4613      	mov	r3, r2
 80040ae:	72fb      	strb	r3, [r7, #11]
    lastx = x0;
 80040b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040b4:	4a0e      	ldr	r2, [pc, #56]	@ (80040f0 <char_callback_black_on_white+0x54>)
 80040b6:	6013      	str	r3, [r2, #0]
    lasty = y0;
 80040b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040bc:	4a0d      	ldr	r2, [pc, #52]	@ (80040f4 <char_callback_black_on_white+0x58>)
 80040be:	6013      	str	r3, [r2, #0]
    if (character == 0x7f)
 80040c0:	7afb      	ldrb	r3, [r7, #11]
 80040c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80040c4:	d00d      	beq.n	80040e2 <char_callback_black_on_white+0x46>
        return;
    return mf_render_character((const struct mf_font_s *)state, x0, y0, character, &pixel_callback_black_on_white, NULL);
 80040c6:	7afb      	ldrb	r3, [r7, #11]
 80040c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80040cc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80040d0:	2000      	movs	r0, #0
 80040d2:	9001      	str	r0, [sp, #4]
 80040d4:	4808      	ldr	r0, [pc, #32]	@ (80040f8 <char_callback_black_on_white+0x5c>)
 80040d6:	9000      	str	r0, [sp, #0]
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fe87 	bl	8004dec <mf_render_character>
 80040de:	4603      	mov	r3, r0
 80040e0:	e001      	b.n	80040e6 <char_callback_black_on_white+0x4a>
        return;
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	24000eec 	.word	0x24000eec
 80040f4:	24000ef0 	.word	0x24000ef0
 80040f8:	08003ee7 	.word	0x08003ee7

080040fc <char_callback_blend>:

static uint8_t char_callback_blend(int16_t x0, int16_t y0, mf_char character, void *state)
{
 80040fc:	b590      	push	{r4, r7, lr}
 80040fe:	b089      	sub	sp, #36	@ 0x24
 8004100:	af02      	add	r7, sp, #8
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	4603      	mov	r3, r0
 8004106:	81fb      	strh	r3, [r7, #14]
 8004108:	460b      	mov	r3, r1
 800410a:	81bb      	strh	r3, [r7, #12]
 800410c:	4613      	mov	r3, r2
 800410e:	72fb      	strb	r3, [r7, #11]
    lastx = x0;
 8004110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004114:	4a10      	ldr	r2, [pc, #64]	@ (8004158 <char_callback_blend+0x5c>)
 8004116:	6013      	str	r3, [r2, #0]
    lasty = y0;
 8004118:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800411c:	4a0f      	ldr	r2, [pc, #60]	@ (800415c <char_callback_blend+0x60>)
 800411e:	6013      	str	r3, [r2, #0]
    if (character == 0x7f)
 8004120:	7afb      	ldrb	r3, [r7, #11]
 8004122:	2b7f      	cmp	r3, #127	@ 0x7f
 8004124:	d011      	beq.n	800414a <char_callback_blend+0x4e>
        return;

    TextBlendInfo *blend_info = (TextBlendInfo *)state;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	617b      	str	r3, [r7, #20]
    return mf_render_character(blend_info->font, x0, y0, character, &pixel_callback_blend, state);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	6898      	ldr	r0, [r3, #8]
 800412e:	7afc      	ldrb	r4, [r7, #11]
 8004130:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004134:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	4b08      	ldr	r3, [pc, #32]	@ (8004160 <char_callback_blend+0x64>)
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	4623      	mov	r3, r4
 8004142:	f000 fe53 	bl	8004dec <mf_render_character>
 8004146:	4603      	mov	r3, r0
 8004148:	e001      	b.n	800414e <char_callback_blend+0x52>
        return;
 800414a:	bf00      	nop
 800414c:	bf00      	nop
}
 800414e:	4618      	mov	r0, r3
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd90      	pop	{r4, r7, pc}
 8004156:	bf00      	nop
 8004158:	24000eec 	.word	0x24000eec
 800415c:	24000ef0 	.word	0x24000ef0
 8004160:	08003f35 	.word	0x08003f35

08004164 <drawTemperatureSelector>:

/**
 * @param value - (in centi-degrees)
 */
void drawTemperatureSelector(int value)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b096      	sub	sp, #88	@ 0x58
 8004168:	af02      	add	r7, sp, #8
 800416a:	6078      	str	r0, [r7, #4]
    const int topOfBar = 272 - 50;
 800416c:	23de      	movs	r3, #222	@ 0xde
 800416e:	647b      	str	r3, [r7, #68]	@ 0x44
    const int barHeight = 50;
 8004170:	2332      	movs	r3, #50	@ 0x32
 8004172:	643b      	str	r3, [r7, #64]	@ 0x40
    const int screenWidth = 480;
 8004174:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004178:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const int screen_center_x = screenWidth / 2;
 800417a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800417c:	2b00      	cmp	r3, #0
 800417e:	da00      	bge.n	8004182 <drawTemperatureSelector+0x1e>
 8004180:	3301      	adds	r3, #1
 8004182:	105b      	asrs	r3, r3, #1
 8004184:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Clear the selector area
    UTIL_LCD_FillRect(0, topOfBar, screenWidth, barHeight, COMPONENT_CLEAR_COLOR);
 8004186:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004188:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800418a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800418c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004190:	9000      	str	r0, [sp, #0]
 8004192:	2000      	movs	r0, #0
 8004194:	f7fd fa62 	bl	800165c <UTIL_LCD_FillRect>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8004198:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800419c:	f7fc ff9a 	bl	80010d4 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetFont(&Font12);
 80041a0:	4850      	ldr	r0, [pc, #320]	@ (80042e4 <drawTemperatureSelector+0x180>)
 80041a2:	f7fc ffab 	bl	80010fc <UTIL_LCD_SetFont>

    int leftmostValue = value - screen_center_x;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	637b      	str	r3, [r7, #52]	@ 0x34
    int firstTickAt = 9 - (leftmostValue % 10);
 80041ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80041b0:	4b4d      	ldr	r3, [pc, #308]	@ (80042e8 <drawTemperatureSelector+0x184>)
 80041b2:	fb83 2301 	smull	r2, r3, r3, r1
 80041b6:	109a      	asrs	r2, r3, #2
 80041b8:	17cb      	asrs	r3, r1, #31
 80041ba:	1ad2      	subs	r2, r2, r3
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	1aca      	subs	r2, r1, r3
 80041c6:	f1c2 0309 	rsb	r3, r2, #9
 80041ca:	633b      	str	r3, [r7, #48]	@ 0x30

    for (
        int x = firstTickAt, v = leftmostValue;
 80041cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (
 80041d4:	e071      	b.n	80042ba <drawTemperatureSelector+0x156>
        x < screenWidth;
        x += 10, v += 10)
    {

        int tick = v / 10;
 80041d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041d8:	4a43      	ldr	r2, [pc, #268]	@ (80042e8 <drawTemperatureSelector+0x184>)
 80041da:	fb82 1203 	smull	r1, r2, r2, r3
 80041de:	1092      	asrs	r2, r2, #2
 80041e0:	17db      	asrs	r3, r3, #31
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int degrees = tick / 10;
 80041e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e8:	4a3f      	ldr	r2, [pc, #252]	@ (80042e8 <drawTemperatureSelector+0x184>)
 80041ea:	fb82 1203 	smull	r1, r2, r2, r3
 80041ee:	1092      	asrs	r2, r2, #2
 80041f0:	17db      	asrs	r3, r3, #31
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	62bb      	str	r3, [r7, #40]	@ 0x28
        bool isBig = (tick % 10 == 0);
 80041f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f8:	4b3b      	ldr	r3, [pc, #236]	@ (80042e8 <drawTemperatureSelector+0x184>)
 80041fa:	fb83 2301 	smull	r2, r3, r3, r1
 80041fe:	109a      	asrs	r2, r3, #2
 8004200:	17cb      	asrs	r3, r1, #31
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	1aca      	subs	r2, r1, r3
 800420e:	2a00      	cmp	r2, #0
 8004210:	bf0c      	ite	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	2300      	movne	r3, #0
 8004216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        uint8_t c = clamp_u8(abs(480 - 2 * x) - 225);
 800421a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800421c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	bfb8      	it	lt
 8004226:	425b      	neglt	r3, r3
 8004228:	3be1      	subs	r3, #225	@ 0xe1
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fe2c 	bl	8003e88 <clamp_u8>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        int color = (0xff << 24) | (c << 16) | (c << 8) | c;
 8004236:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8004240:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	431a      	orrs	r2, r3
 8004248:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800424c:	4313      	orrs	r3, r2
 800424e:	623b      	str	r3, [r7, #32]

        UTIL_LCD_DrawVLine(x, topOfBar + (isBig ? 0 : 5), isBig ? 30 : 20, color);
 8004250:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004252:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <drawTemperatureSelector+0xfa>
 800425a:	2200      	movs	r2, #0
 800425c:	e000      	b.n	8004260 <drawTemperatureSelector+0xfc>
 800425e:	2205      	movs	r2, #5
 8004260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004262:	4413      	add	r3, r2
 8004264:	4619      	mov	r1, r3
 8004266:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <drawTemperatureSelector+0x10e>
 800426e:	221e      	movs	r2, #30
 8004270:	e000      	b.n	8004274 <drawTemperatureSelector+0x110>
 8004272:	2214      	movs	r2, #20
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f7fc ffa7 	bl	80011c8 <UTIL_LCD_DrawVLine>

        if (isBig)
 800427a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800427e:	2b00      	cmp	r3, #0
 8004280:	d015      	beq.n	80042ae <drawTemperatureSelector+0x14a>
        {
            char str[5];
            sprintf(str, "%d", degrees);
 8004282:	f107 030c 	add.w	r3, r7, #12
 8004286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004288:	4918      	ldr	r1, [pc, #96]	@ (80042ec <drawTemperatureSelector+0x188>)
 800428a:	4618      	mov	r0, r3
 800428c:	f008 f82c 	bl	800c2e8 <siprintf>
            UTIL_LCD_SetTextColor(color);
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fc ff0a 	bl	80010ac <UTIL_LCD_SetTextColor>
            UTIL_LCD_DisplayStringAt(x - 7, topOfBar + 30, str, LEFT_MODE);
 8004298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800429a:	3b07      	subs	r3, #7
 800429c:	4618      	mov	r0, r3
 800429e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a0:	331e      	adds	r3, #30
 80042a2:	4619      	mov	r1, r3
 80042a4:	f107 020c 	add.w	r2, r7, #12
 80042a8:	2303      	movs	r3, #3
 80042aa:	f7fd f843 	bl	8001334 <UTIL_LCD_DisplayStringAt>
        x += 10, v += 10)
 80042ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b0:	330a      	adds	r3, #10
 80042b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b6:	330a      	adds	r3, #10
 80042b8:	64bb      	str	r3, [r7, #72]	@ 0x48
        x < screenWidth;
 80042ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042be:	429a      	cmp	r2, r3
 80042c0:	db89      	blt.n	80041d6 <drawTemperatureSelector+0x72>
        }
    }

    // arrow
    Point p[] = {
 80042c2:	4a0b      	ldr	r2, [pc, #44]	@ (80042f0 <drawTemperatureSelector+0x18c>)
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80042ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        {.X = 235, .Y = 272},
        {.X = 240, .Y = 267},
        {.X = 245, .Y = 272}};
    UTIL_LCD_FillPolygon(p, 3, 0xffff0000);
 80042ce:	f107 0314 	add.w	r3, r7, #20
 80042d2:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <drawTemperatureSelector+0x190>)
 80042d4:	2103      	movs	r1, #3
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd f9fa 	bl	80016d0 <UTIL_LCD_FillPolygon>
}
 80042dc:	bf00      	nop
 80042de:	3750      	adds	r7, #80	@ 0x50
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	24000030 	.word	0x24000030
 80042e8:	66666667 	.word	0x66666667
 80042ec:	0800d364 	.word	0x0800d364
 80042f0:	0800d368 	.word	0x0800d368
 80042f4:	ffff0000 	.word	0xffff0000

080042f8 <drawBigStats>:

void drawBigStats(int temperature, int humidity)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b094      	sub	sp, #80	@ 0x50
 80042fc:	af04      	add	r7, sp, #16
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
    const bpx = 40, bpy = 50;
 8004302:	2328      	movs	r3, #40	@ 0x28
 8004304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004306:	2332      	movs	r3, #50	@ 0x32
 8004308:	63bb      	str	r3, [r7, #56]	@ 0x38

    char text[32];
    int a = temperature / 10, b = temperature % 10;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a40      	ldr	r2, [pc, #256]	@ (8004410 <drawBigStats+0x118>)
 800430e:	fb82 1203 	smull	r1, r2, r2, r3
 8004312:	1092      	asrs	r2, r2, #2
 8004314:	17db      	asrs	r3, r3, #31
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	637b      	str	r3, [r7, #52]	@ 0x34
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4b3c      	ldr	r3, [pc, #240]	@ (8004410 <drawBigStats+0x118>)
 800431e:	fb83 1302 	smull	r1, r3, r3, r2
 8004322:	1099      	asrs	r1, r3, #2
 8004324:	17d3      	asrs	r3, r2, #31
 8004326:	1ac9      	subs	r1, r1, r3
 8004328:	460b      	mov	r3, r1
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	633b      	str	r3, [r7, #48]	@ 0x30
    UTIL_LCD_FillRect(bpx, bpy, 200, 110, COMPONENT_CLEAR_COLOR);
 8004334:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004336:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004338:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	236e      	movs	r3, #110	@ 0x6e
 8004340:	22c8      	movs	r2, #200	@ 0xc8
 8004342:	f7fd f98b 	bl	800165c <UTIL_LCD_FillRect>

    // temperature
    auto font = &mf_rlefont_Inter_Regular72.font;
 8004346:	4b33      	ldr	r3, [pc, #204]	@ (8004414 <drawBigStats+0x11c>)
 8004348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sprintf(text, "%d.%d\x7f", a, b); //  7f is a special measure char
 800434a:	f107 0008 	add.w	r0, r7, #8
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004352:	4931      	ldr	r1, [pc, #196]	@ (8004418 <drawBigStats+0x120>)
 8004354:	f007 ffc8 	bl	800c2e8 <siprintf>
    mf_render_aligned(font, bpx, bpy, MF_ALIGN_LEFT, text, 0, char_callback_black_on_white, font);
 8004358:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800435a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435c:	b219      	sxth	r1, r3
 800435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004360:	b21a      	sxth	r2, r3
 8004362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	4b2d      	ldr	r3, [pc, #180]	@ (800441c <drawBigStats+0x124>)
 8004368:	9302      	str	r3, [sp, #8]
 800436a:	2300      	movs	r3, #0
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	f107 0308 	add.w	r3, r7, #8
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2300      	movs	r3, #0
 8004376:	f000 ff72 	bl	800525e <mf_render_aligned>

    // deg C
    font = &mf_rlefont_Inter_Regular24.font;
 800437a:	4b29      	ldr	r3, [pc, #164]	@ (8004420 <drawBigStats+0x128>)
 800437c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int basex = lastx;
 800437e:	4b29      	ldr	r3, [pc, #164]	@ (8004424 <drawBigStats+0x12c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	62bb      	str	r3, [r7, #40]	@ 0x28
    mf_render_character(font, basex, bpy + 10, DEGREE_SYMBOL, &pixel_callback_black_on_white, NULL);
 8004384:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	b219      	sxth	r1, r3
 800438a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438c:	b29b      	uxth	r3, r3
 800438e:	330a      	adds	r3, #10
 8004390:	b29b      	uxth	r3, r3
 8004392:	b21a      	sxth	r2, r3
 8004394:	2300      	movs	r3, #0
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	4b23      	ldr	r3, [pc, #140]	@ (8004428 <drawBigStats+0x130>)
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	23b0      	movs	r3, #176	@ 0xb0
 800439e:	f000 fd25 	bl	8004dec <mf_render_character>
    mf_render_character(font, basex + 12, bpy + 10, 'C', &pixel_callback_black_on_white, NULL);
 80043a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	330c      	adds	r3, #12
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	b219      	sxth	r1, r3
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	330a      	adds	r3, #10
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b21a      	sxth	r2, r3
 80043b8:	2300      	movs	r3, #0
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004428 <drawBigStats+0x130>)
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2343      	movs	r3, #67	@ 0x43
 80043c2:	f000 fd13 	bl	8004dec <mf_render_character>

    // Humidity
    font = &mf_rlefont_Inter_Regular15.font;
 80043c6:	4b19      	ldr	r3, [pc, #100]	@ (800442c <drawBigStats+0x134>)
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sprintf(text, "Humidity: %d%% ", humidity);
 80043ca:	f107 0308 	add.w	r3, r7, #8
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	4917      	ldr	r1, [pc, #92]	@ (8004430 <drawBigStats+0x138>)
 80043d2:	4618      	mov	r0, r3
 80043d4:	f007 ff88 	bl	800c2e8 <siprintf>
    mf_render_aligned(font, bpx + 6, bpy + 92, MF_ALIGN_LEFT, text, 0, char_callback_black_on_white, font);
 80043d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3306      	adds	r3, #6
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	b219      	sxth	r1, r3
 80043e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	335c      	adds	r3, #92	@ 0x5c
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	b21a      	sxth	r2, r3
 80043ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f0:	9303      	str	r3, [sp, #12]
 80043f2:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <drawBigStats+0x124>)
 80043f4:	9302      	str	r3, [sp, #8]
 80043f6:	2300      	movs	r3, #0
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	f107 0308 	add.w	r3, r7, #8
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	2300      	movs	r3, #0
 8004402:	f000 ff2c 	bl	800525e <mf_render_aligned>
}
 8004406:	bf00      	nop
 8004408:	3740      	adds	r7, #64	@ 0x40
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	66666667 	.word	0x66666667
 8004414:	0801bff4 	.word	0x0801bff4
 8004418:	0800d374 	.word	0x0800d374
 800441c:	0800409d 	.word	0x0800409d
 8004420:	08012d38 	.word	0x08012d38
 8004424:	24000eec 	.word	0x24000eec
 8004428:	08003ee7 	.word	0x08003ee7
 800442c:	08010150 	.word	0x08010150
 8004430:	0800d37c 	.word	0x0800d37c

08004434 <drawSetTemperature>:

void drawSetTemperature(int settemp)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b094      	sub	sp, #80	@ 0x50
 8004438:	af04      	add	r7, sp, #16
 800443a:	6078      	str	r0, [r7, #4]
    const bpx = 44, bpy = 168;
 800443c:	232c      	movs	r3, #44	@ 0x2c
 800443e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004440:	23a8      	movs	r3, #168	@ 0xa8
 8004442:	63bb      	str	r3, [r7, #56]	@ 0x38

    char text[32];
    settemp = settemp / 10;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a30      	ldr	r2, [pc, #192]	@ (8004508 <drawSetTemperature+0xd4>)
 8004448:	fb82 1203 	smull	r1, r2, r2, r3
 800444c:	1092      	asrs	r2, r2, #2
 800444e:	17db      	asrs	r3, r3, #31
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	607b      	str	r3, [r7, #4]
    int a = settemp / 10, b = settemp % 10;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a2c      	ldr	r2, [pc, #176]	@ (8004508 <drawSetTemperature+0xd4>)
 8004458:	fb82 1203 	smull	r1, r2, r2, r3
 800445c:	1092      	asrs	r2, r2, #2
 800445e:	17db      	asrs	r3, r3, #31
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4b28      	ldr	r3, [pc, #160]	@ (8004508 <drawSetTemperature+0xd4>)
 8004468:	fb83 1302 	smull	r1, r3, r3, r2
 800446c:	1099      	asrs	r1, r3, #2
 800446e:	17d3      	asrs	r3, r2, #31
 8004470:	1ac9      	subs	r1, r1, r3
 8004472:	460b      	mov	r3, r1
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	633b      	str	r3, [r7, #48]	@ 0x30

    UTIL_LCD_FillRect(bpx, bpy, 160, 25, COMPONENT_CLEAR_COLOR);
 800447e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004480:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004482:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	2319      	movs	r3, #25
 800448a:	22a0      	movs	r2, #160	@ 0xa0
 800448c:	f7fd f8e6 	bl	800165c <UTIL_LCD_FillRect>

    auto font = &mf_rlefont_Inter_Regular24.font;
 8004490:	4b1e      	ldr	r3, [pc, #120]	@ (800450c <drawSetTemperature+0xd8>)
 8004492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sprintf(text, "Set: %d.%d\x7f", a, b);
 8004494:	f107 0008 	add.w	r0, r7, #8
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800449c:	491c      	ldr	r1, [pc, #112]	@ (8004510 <drawSetTemperature+0xdc>)
 800449e:	f007 ff23 	bl	800c2e8 <siprintf>
    mf_render_aligned(font, bpx, bpy, MF_ALIGN_LEFT, text, 0, char_callback_black_on_white, font);
 80044a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a6:	b219      	sxth	r1, r3
 80044a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044aa:	b21a      	sxth	r2, r3
 80044ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ae:	9303      	str	r3, [sp, #12]
 80044b0:	4b18      	ldr	r3, [pc, #96]	@ (8004514 <drawSetTemperature+0xe0>)
 80044b2:	9302      	str	r3, [sp, #8]
 80044b4:	2300      	movs	r3, #0
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	f107 0308 	add.w	r3, r7, #8
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	f000 fecd 	bl	800525e <mf_render_aligned>
    int basex = lastx;
 80044c4:	4b14      	ldr	r3, [pc, #80]	@ (8004518 <drawSetTemperature+0xe4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    mf_render_character(font, basex, bpy, DEGREE_SYMBOL, &pixel_callback_black_on_white, NULL);
 80044ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	b219      	sxth	r1, r3
 80044d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d2:	b21a      	sxth	r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	9301      	str	r3, [sp, #4]
 80044d8:	4b10      	ldr	r3, [pc, #64]	@ (800451c <drawSetTemperature+0xe8>)
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	23b0      	movs	r3, #176	@ 0xb0
 80044de:	f000 fc85 	bl	8004dec <mf_render_character>
    mf_render_character(font, basex + 12, bpy, 'C', &pixel_callback_black_on_white, NULL);
 80044e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	330c      	adds	r3, #12
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	b219      	sxth	r1, r3
 80044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f0:	b21a      	sxth	r2, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	4b09      	ldr	r3, [pc, #36]	@ (800451c <drawSetTemperature+0xe8>)
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2343      	movs	r3, #67	@ 0x43
 80044fc:	f000 fc76 	bl	8004dec <mf_render_character>
}
 8004500:	bf00      	nop
 8004502:	3740      	adds	r7, #64	@ 0x40
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	66666667 	.word	0x66666667
 800450c:	08012d38 	.word	0x08012d38
 8004510:	0800d38c 	.word	0x0800d38c
 8004514:	0800409d 	.word	0x0800409d
 8004518:	24000eec 	.word	0x24000eec
 800451c:	08003ee7 	.word	0x08003ee7

08004520 <drawStatusIcon>:

void drawStatusIcon(int mode)
{
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b089      	sub	sp, #36	@ 0x24
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]
    const bpx = 280, bpy = 60;
 8004528:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	233c      	movs	r3, #60	@ 0x3c
 8004530:	613b      	str	r3, [r7, #16]

    auto font = &mf_rlefont_Iconfont84.font;
 8004532:	4b15      	ldr	r3, [pc, #84]	@ (8004588 <drawStatusIcon+0x68>)
 8004534:	60fb      	str	r3, [r7, #12]

    uint32_t color = mode == 0 ? 0xfff05c00 : mode == 2 ? 0xff9dd9ff
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d006      	beq.n	800454a <drawStatusIcon+0x2a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d101      	bne.n	8004546 <drawStatusIcon+0x26>
 8004542:	4b12      	ldr	r3, [pc, #72]	@ (800458c <drawStatusIcon+0x6c>)
 8004544:	e002      	b.n	800454c <drawStatusIcon+0x2c>
 8004546:	4b12      	ldr	r3, [pc, #72]	@ (8004590 <drawStatusIcon+0x70>)
 8004548:	e000      	b.n	800454c <drawStatusIcon+0x2c>
 800454a:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <drawStatusIcon+0x74>)
 800454c:	60bb      	str	r3, [r7, #8]
                                                        : 0xff444444;

    UTIL_LCD_FillRect(bpx, bpy, 84, 84, COMPONENT_CLEAR_COLOR);
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	6939      	ldr	r1, [r7, #16]
 8004552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2354      	movs	r3, #84	@ 0x54
 800455a:	2254      	movs	r2, #84	@ 0x54
 800455c:	f7fd f87e 	bl	800165c <UTIL_LCD_FillRect>
    mf_render_character(font, bpx, bpy, (mf_char)(mode + 'A'), &pixel_callback_color_on_white, (void *)color);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	b219      	sxth	r1, r3
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	b21a      	sxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	3341      	adds	r3, #65	@ 0x41
 8004570:	b2dc      	uxtb	r4, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <drawStatusIcon+0x78>)
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	4623      	mov	r3, r4
 800457c:	f000 fc36 	bl	8004dec <mf_render_character>
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd90      	pop	{r4, r7, pc}
 8004588:	0800e710 	.word	0x0800e710
 800458c:	ff9dd9ff 	.word	0xff9dd9ff
 8004590:	ff444444 	.word	0xff444444
 8004594:	fff05c00 	.word	0xfff05c00
 8004598:	08004009 	.word	0x08004009

0800459c <drawLockIcon>:

void drawLockIcon(int locked)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	6078      	str	r0, [r7, #4]
    const bpx = 440, bpy = 10;
 80045a4:	f44f 73dc 	mov.w	r3, #440	@ 0x1b8
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	230a      	movs	r3, #10
 80045ac:	613b      	str	r3, [r7, #16]

    auto font = &mf_rlefont_Iconfont24.font;
 80045ae:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <drawLockIcon+0x54>)
 80045b0:	60fb      	str	r3, [r7, #12]

    uint32_t color = 0xff888888;
 80045b2:	4b10      	ldr	r3, [pc, #64]	@ (80045f4 <drawLockIcon+0x58>)
 80045b4:	60bb      	str	r3, [r7, #8]

    UTIL_LCD_FillRect(bpx, bpy, 24, 24, COMPONENT_CLEAR_COLOR);
 80045b6:	6978      	ldr	r0, [r7, #20]
 80045b8:	6939      	ldr	r1, [r7, #16]
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2318      	movs	r3, #24
 80045c2:	2218      	movs	r2, #24
 80045c4:	f7fd f84a 	bl	800165c <UTIL_LCD_FillRect>
    if (locked)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <drawLockIcon+0x4a>
        mf_render_character(font, bpx, bpy, 'E', &pixel_callback_color_on_white, (void *)color);
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	b219      	sxth	r1, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	b21a      	sxth	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <drawLockIcon+0x5c>)
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2345      	movs	r3, #69	@ 0x45
 80045e2:	f000 fc03 	bl	8004dec <mf_render_character>
}
 80045e6:	bf00      	nop
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	0800db84 	.word	0x0800db84
 80045f4:	ff888888 	.word	0xff888888
 80045f8:	08004009 	.word	0x08004009

080045fc <drawStatusBar>:

void drawStatusBar(int8_t value)
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b089      	sub	sp, #36	@ 0x24
 8004600:	af02      	add	r7, sp, #8
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
    const bpx = 400, bpy = 60;
 8004606:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	233c      	movs	r3, #60	@ 0x3c
 800460e:	613b      	str	r3, [r7, #16]
    const sw = 22, sh = 66;
 8004610:	2316      	movs	r3, #22
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	2342      	movs	r3, #66	@ 0x42
 8004616:	60bb      	str	r3, [r7, #8]

    UTIL_LCD_DrawRect(bpx, bpy, sw, sh, 0xfff05c00);
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	6939      	ldr	r1, [r7, #16]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4c38      	ldr	r4, [pc, #224]	@ (8004704 <drawStatusBar+0x108>)
 8004622:	9400      	str	r4, [sp, #0]
 8004624:	f7fc fff0 	bl	8001608 <UTIL_LCD_DrawRect>
    UTIL_LCD_FillRect(bpx + 1, bpy + 1, sw - 2, sh - 1, 0xffffbd94);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3301      	adds	r3, #1
 800462c:	4618      	mov	r0, r3
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	3301      	adds	r3, #1
 8004632:	4619      	mov	r1, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3b02      	subs	r3, #2
 8004638:	461a      	mov	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3b01      	subs	r3, #1
 800463e:	461c      	mov	r4, r3
 8004640:	4b31      	ldr	r3, [pc, #196]	@ (8004708 <drawStatusBar+0x10c>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	4623      	mov	r3, r4
 8004646:	f7fd f809 	bl	800165c <UTIL_LCD_FillRect>

    UTIL_LCD_DrawRect(bpx, bpy + sh, sw, sh, 0xff0095ff);
 800464a:	6978      	ldr	r0, [r7, #20]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4413      	add	r3, r2
 8004652:	461c      	mov	r4, r3
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	492c      	ldr	r1, [pc, #176]	@ (800470c <drawStatusBar+0x110>)
 800465a:	9100      	str	r1, [sp, #0]
 800465c:	4621      	mov	r1, r4
 800465e:	f7fc ffd3 	bl	8001608 <UTIL_LCD_DrawRect>
    UTIL_LCD_FillRect(bpx + 1, bpy + sh, sw - 2, sh - 1, 0xffc8eaff);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	3301      	adds	r3, #1
 8004666:	4618      	mov	r0, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4413      	add	r3, r2
 800466e:	4619      	mov	r1, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3b02      	subs	r3, #2
 8004674:	461a      	mov	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	3b01      	subs	r3, #1
 800467a:	461c      	mov	r4, r3
 800467c:	4b24      	ldr	r3, [pc, #144]	@ (8004710 <drawStatusBar+0x114>)
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	4623      	mov	r3, r4
 8004682:	f7fc ffeb 	bl	800165c <UTIL_LCD_FillRect>

    if (value > 0)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	2b00      	cmp	r3, #0
 800468c:	dd1a      	ble.n	80046c4 <drawStatusBar+0xc8>
    {
        if (value > 60)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	2b3c      	cmp	r3, #60	@ 0x3c
 8004694:	dd01      	ble.n	800469a <drawStatusBar+0x9e>
            value = 60;
 8004696:	233c      	movs	r3, #60	@ 0x3c
 8004698:	71fb      	strb	r3, [r7, #7]

        UTIL_LCD_FillRect(bpx + 3, bpy + sh - value, sw - 6, value, 0xfff05c00);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	3303      	adds	r3, #3
 800469e:	4618      	mov	r0, r3
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	441a      	add	r2, r3
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	4619      	mov	r1, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3b06      	subs	r3, #6
 80046b2:	461c      	mov	r4, r3
 80046b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b8:	4a12      	ldr	r2, [pc, #72]	@ (8004704 <drawStatusBar+0x108>)
 80046ba:	9200      	str	r2, [sp, #0]
 80046bc:	4622      	mov	r2, r4
 80046be:	f7fc ffcd 	bl	800165c <UTIL_LCD_FillRect>
        if (value > 60)
            value = 60;

        UTIL_LCD_FillRect(bpx + 3, bpy + sh, sw - 6, value, 0xff0095ff);
    }
}
 80046c2:	e01a      	b.n	80046fa <drawStatusBar+0xfe>
        value = -value;
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	425b      	negs	r3, r3
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	71fb      	strb	r3, [r7, #7]
        if (value > 60)
 80046cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d0:	2b3c      	cmp	r3, #60	@ 0x3c
 80046d2:	dd01      	ble.n	80046d8 <drawStatusBar+0xdc>
            value = 60;
 80046d4:	233c      	movs	r3, #60	@ 0x3c
 80046d6:	71fb      	strb	r3, [r7, #7]
        UTIL_LCD_FillRect(bpx + 3, bpy + sh, sw - 6, value, 0xff0095ff);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	3303      	adds	r3, #3
 80046dc:	4618      	mov	r0, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4413      	add	r3, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3b06      	subs	r3, #6
 80046ea:	461c      	mov	r4, r3
 80046ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f0:	4a06      	ldr	r2, [pc, #24]	@ (800470c <drawStatusBar+0x110>)
 80046f2:	9200      	str	r2, [sp, #0]
 80046f4:	4622      	mov	r2, r4
 80046f6:	f7fc ffb1 	bl	800165c <UTIL_LCD_FillRect>
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd90      	pop	{r4, r7, pc}
 8004702:	bf00      	nop
 8004704:	fff05c00 	.word	0xfff05c00
 8004708:	ffffbd94 	.word	0xffffbd94
 800470c:	ff0095ff 	.word	0xff0095ff
 8004710:	ffc8eaff 	.word	0xffc8eaff

08004714 <drawEnableButton>:

const enable_x = 283, enable_y = 168;
const enable_x2 = 283 + 64, enable_y2 = 168 + 28;

void drawEnableButton(int enabled)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b093      	sub	sp, #76	@ 0x4c
 8004718:	af04      	add	r7, sp, #16
 800471a:	6078      	str	r0, [r7, #4]
    const bpx = 283, bpy = 168;
 800471c:	f240 131b 	movw	r3, #283	@ 0x11b
 8004720:	637b      	str	r3, [r7, #52]	@ 0x34
 8004722:	23a8      	movs	r3, #168	@ 0xa8
 8004724:	633b      	str	r3, [r7, #48]	@ 0x30
    const w = 64, h = 28;
 8004726:	2340      	movs	r3, #64	@ 0x40
 8004728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800472a:	231c      	movs	r3, #28
 800472c:	62bb      	str	r3, [r7, #40]	@ 0x28
    const knobOffset = 6;
 800472e:	2306      	movs	r3, #6
 8004730:	627b      	str	r3, [r7, #36]	@ 0x24
    const knobSize = 16;
 8004732:	2310      	movs	r3, #16
 8004734:	623b      	str	r3, [r7, #32]

    int backColor = enabled ? 0xff0095ff : 0xff888888;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <drawEnableButton+0x2c>
 800473c:	4b30      	ldr	r3, [pc, #192]	@ (8004800 <drawEnableButton+0xec>)
 800473e:	e000      	b.n	8004742 <drawEnableButton+0x2e>
 8004740:	4b30      	ldr	r3, [pc, #192]	@ (8004804 <drawEnableButton+0xf0>)
 8004742:	61fb      	str	r3, [r7, #28]

    UTIL_LCD_FillRect(bpx, bpy, w, h, backColor);
 8004744:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004746:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800474a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	4623      	mov	r3, r4
 8004752:	f7fc ff83 	bl	800165c <UTIL_LCD_FillRect>

    auto font = &mf_rlefont_Inter_Regular15.font;
 8004756:	4b2c      	ldr	r3, [pc, #176]	@ (8004808 <drawEnableButton+0xf4>)
 8004758:	61bb      	str	r3, [r7, #24]
    TextBlendInfo tb;
    tb.font = font;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	617b      	str	r3, [r7, #20]
    tb.fore.c = 0xffffffff;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004762:	613b      	str	r3, [r7, #16]
    tb.back.c = backColor;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	60fb      	str	r3, [r7, #12]

    mf_render_aligned(
 8004768:	69b8      	ldr	r0, [r7, #24]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <drawEnableButton+0x6c>
        font,
        enabled ? bpx + knobOffset : bpx + 2 * knobOffset + knobSize,
 8004770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004772:	b29a      	uxth	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	b29b      	uxth	r3, r3
 8004778:	4413      	add	r3, r2
 800477a:	b29b      	uxth	r3, r3
    mf_render_aligned(
 800477c:	b219      	sxth	r1, r3
 800477e:	e00c      	b.n	800479a <drawEnableButton+0x86>
        enabled ? bpx + knobOffset : bpx + 2 * knobOffset + knobSize,
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	b29b      	uxth	r3, r3
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478a:	b29b      	uxth	r3, r3
 800478c:	4413      	add	r3, r2
 800478e:	b29a      	uxth	r2, r3
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	b29b      	uxth	r3, r3
 8004794:	4413      	add	r3, r2
 8004796:	b29b      	uxth	r3, r3
    mf_render_aligned(
 8004798:	b219      	sxth	r1, r3
        bpy + 5,
 800479a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479c:	b29b      	uxth	r3, r3
 800479e:	3305      	adds	r3, #5
 80047a0:	b29b      	uxth	r3, r3
    mf_render_aligned(
 80047a2:	b21c      	sxth	r4, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <drawEnableButton+0x9a>
 80047aa:	4b18      	ldr	r3, [pc, #96]	@ (800480c <drawEnableButton+0xf8>)
 80047ac:	e000      	b.n	80047b0 <drawEnableButton+0x9c>
 80047ae:	4b18      	ldr	r3, [pc, #96]	@ (8004810 <drawEnableButton+0xfc>)
 80047b0:	f107 020c 	add.w	r2, r7, #12
 80047b4:	9203      	str	r2, [sp, #12]
 80047b6:	4a17      	ldr	r2, [pc, #92]	@ (8004814 <drawEnableButton+0x100>)
 80047b8:	9202      	str	r2, [sp, #8]
 80047ba:	2200      	movs	r2, #0
 80047bc:	9201      	str	r2, [sp, #4]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	2300      	movs	r3, #0
 80047c2:	4622      	mov	r2, r4
 80047c4:	f000 fd4b 	bl	800525e <mf_render_aligned>
        char_callback_blend,
        &tb);

    // moved this to end cuz it wasn't working consistently!? idk why
    UTIL_LCD_FillRect(
        bpx + knobOffset + (enabled ? 36 : 0),
 80047c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	4413      	add	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	2a00      	cmp	r2, #0
 80047d2:	d001      	beq.n	80047d8 <drawEnableButton+0xc4>
 80047d4:	2224      	movs	r2, #36	@ 0x24
 80047d6:	e000      	b.n	80047da <drawEnableButton+0xc6>
 80047d8:	2200      	movs	r2, #0
 80047da:	4413      	add	r3, r2
    UTIL_LCD_FillRect(
 80047dc:	4618      	mov	r0, r3
        bpy + knobOffset,
 80047de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	4413      	add	r3, r2
    UTIL_LCD_FillRect(
 80047e4:	461c      	mov	r4, r3
 80047e6:	6a3a      	ldr	r2, [r7, #32]
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80047ee:	9100      	str	r1, [sp, #0]
 80047f0:	4621      	mov	r1, r4
 80047f2:	f7fc ff33 	bl	800165c <UTIL_LCD_FillRect>
        knobSize,
        knobSize,
        0xffffffff);
}
 80047f6:	bf00      	nop
 80047f8:	373c      	adds	r7, #60	@ 0x3c
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd90      	pop	{r4, r7, pc}
 80047fe:	bf00      	nop
 8004800:	ff0095ff 	.word	0xff0095ff
 8004804:	ff888888 	.word	0xff888888
 8004808:	08010150 	.word	0x08010150
 800480c:	0800d398 	.word	0x0800d398
 8004810:	0800d39c 	.word	0x0800d39c
 8004814:	080040fd 	.word	0x080040fd

08004818 <LTDC_IRQHandler>:

// basic dumb vsync aproach; basically prevents redrawing untill frame was displayed
// the Line interrupt gets set up somewhere in main()
volatile uint32_t blockRendering = 0;
void LTDC_IRQHandler()
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
    LTDC->ICR = LTDC_ICR_CLIF;
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <LTDC_IRQHandler+0x1c>)
 800481e:	2201      	movs	r2, #1
 8004820:	63da      	str	r2, [r3, #60]	@ 0x3c
    blockRendering = 0;
 8004822:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <LTDC_IRQHandler+0x20>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	50001000 	.word	0x50001000
 8004838:	24000ef4 	.word	0x24000ef4
 800483c:	00000000 	.word	0x00000000

08004840 <measure_tempearature>:
    .valueDirty = true,
    .enabledDirty = true,
    .lockedDirty = true};

void measure_tempearature()
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8
    float temperature, humidity;
    uint8_t cmd;
    uint8_t data[4];

    cmd = 0xE3;
 8004846:	23e3      	movs	r3, #227	@ 0xe3
 8004848:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c4, 0x80, &cmd, 1, HAL_MAX_DELAY);
 800484a:	1dfa      	adds	r2, r7, #7
 800484c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	2301      	movs	r3, #1
 8004854:	2180      	movs	r1, #128	@ 0x80
 8004856:	4846      	ldr	r0, [pc, #280]	@ (8004970 <measure_tempearature+0x130>)
 8004858:	f002 fee2 	bl	8007620 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c4, 0x80, data, 3, HAL_MAX_DELAY);
 800485c:	463a      	mov	r2, r7
 800485e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	2303      	movs	r3, #3
 8004866:	2180      	movs	r1, #128	@ 0x80
 8004868:	4841      	ldr	r0, [pc, #260]	@ (8004970 <measure_tempearature+0x130>)
 800486a:	f002 ffcd 	bl	8007808 <HAL_I2C_Master_Receive>
    uint16_t raw_temp = (data[0] << 8) | data[1];
 800486e:	783b      	ldrb	r3, [r7, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	b21a      	sxth	r2, r3
 8004874:	787b      	ldrb	r3, [r7, #1]
 8004876:	b21b      	sxth	r3, r3
 8004878:	4313      	orrs	r3, r2
 800487a:	b21b      	sxth	r3, r3
 800487c:	82fb      	strh	r3, [r7, #22]
    raw_temp &= 0xFFFC;
 800487e:	8afb      	ldrh	r3, [r7, #22]
 8004880:	f023 0303 	bic.w	r3, r3, #3
 8004884:	82fb      	strh	r3, [r7, #22]
    temperature = -46.85 + 175.72 * raw_temp / 65536.0;
 8004886:	8afb      	ldrh	r3, [r7, #22]
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004890:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8004950 <measure_tempearature+0x110>
 8004894:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004898:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 8004958 <measure_tempearature+0x118>
 800489c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048a0:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8004960 <measure_tempearature+0x120>
 80048a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80048ac:	edc7 7a04 	vstr	s15, [r7, #16]

    cmd = 0xE5;
 80048b0:	23e5      	movs	r3, #229	@ 0xe5
 80048b2:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c4, 0x40 << 1, &cmd, 1, HAL_MAX_DELAY);
 80048b4:	1dfa      	adds	r2, r7, #7
 80048b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2301      	movs	r3, #1
 80048be:	2180      	movs	r1, #128	@ 0x80
 80048c0:	482b      	ldr	r0, [pc, #172]	@ (8004970 <measure_tempearature+0x130>)
 80048c2:	f002 fead 	bl	8007620 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c4, 0x40 << 1, data, 3, HAL_MAX_DELAY);
 80048c6:	463a      	mov	r2, r7
 80048c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	2303      	movs	r3, #3
 80048d0:	2180      	movs	r1, #128	@ 0x80
 80048d2:	4827      	ldr	r0, [pc, #156]	@ (8004970 <measure_tempearature+0x130>)
 80048d4:	f002 ff98 	bl	8007808 <HAL_I2C_Master_Receive>
    uint16_t raw_rh = (data[0] << 8) | data[1];
 80048d8:	783b      	ldrb	r3, [r7, #0]
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	b21a      	sxth	r2, r3
 80048de:	787b      	ldrb	r3, [r7, #1]
 80048e0:	b21b      	sxth	r3, r3
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b21b      	sxth	r3, r3
 80048e6:	81fb      	strh	r3, [r7, #14]
    raw_rh &= 0xFFFC;
 80048e8:	89fb      	ldrh	r3, [r7, #14]
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	81fb      	strh	r3, [r7, #14]
    humidity = -6.0 + 125.0 * raw_rh / 65536.0;
 80048f0:	89fb      	ldrh	r3, [r7, #14]
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80048fa:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 8004968 <measure_tempearature+0x128>
 80048fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004902:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 8004958 <measure_tempearature+0x118>
 8004906:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800490a:	eeb1 6b08 	vmov.f64	d6, #24	@ 0x40c00000  6.0
 800490e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004912:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004916:	edc7 7a02 	vstr	s15, [r7, #8]

    state.realTemp = temperature * 100;
 800491a:	edd7 7a04 	vldr	s15, [r7, #16]
 800491e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004974 <measure_tempearature+0x134>
 8004922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800492a:	ee17 2a90 	vmov	r2, s15
 800492e:	4b12      	ldr	r3, [pc, #72]	@ (8004978 <measure_tempearature+0x138>)
 8004930:	605a      	str	r2, [r3, #4]
    state.realHumidity = humidity;
 8004932:	edd7 7a02 	vldr	s15, [r7, #8]
 8004936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800493a:	ee17 2a90 	vmov	r2, s15
 800493e:	4b0e      	ldr	r3, [pc, #56]	@ (8004978 <measure_tempearature+0x138>)
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	bf00      	nop
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	f3af 8000 	nop.w
 8004950:	3d70a3d7 	.word	0x3d70a3d7
 8004954:	4065f70a 	.word	0x4065f70a
 8004958:	00000000 	.word	0x00000000
 800495c:	40f00000 	.word	0x40f00000
 8004960:	cccccccd 	.word	0xcccccccd
 8004964:	40476ccc 	.word	0x40476ccc
 8004968:	00000000 	.word	0x00000000
 800496c:	405f4000 	.word	0x405f4000
 8004970:	240000fc 	.word	0x240000fc
 8004974:	42c80000 	.word	0x42c80000
 8004978:	24000048 	.word	0x24000048

0800497c <heating_tick>:

void heating_tick()
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
    measure_tempearature();
 8004982:	f7ff ff5d 	bl	8004840 <measure_tempearature>

    if (state.enabled)
 8004986:	4b2d      	ldr	r3, [pc, #180]	@ (8004a3c <heating_tick+0xc0>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d03e      	beq.n	8004a0c <heating_tick+0x90>
    {
        int newState = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
        int newValue = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]

        int deltaT = state.setTemp - state.realTemp;
 8004996:	4b29      	ldr	r3, [pc, #164]	@ (8004a3c <heating_tick+0xc0>)
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	4b28      	ldr	r3, [pc, #160]	@ (8004a3c <heating_tick+0xc0>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	607b      	str	r3, [r7, #4]

        if (deltaT < 20 && deltaT > -20)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b13      	cmp	r3, #19
 80049a6:	dc06      	bgt.n	80049b6 <heating_tick+0x3a>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f113 0f13 	cmn.w	r3, #19
 80049ae:	db02      	blt.n	80049b6 <heating_tick+0x3a>
        {
            newState = 1;
 80049b0:	2301      	movs	r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e00d      	b.n	80049d2 <heating_tick+0x56>
        }
        else
        {
            newValue = clamp_int(deltaT, -60, 60);
 80049b6:	223c      	movs	r2, #60	@ 0x3c
 80049b8:	f06f 013b 	mvn.w	r1, #59	@ 0x3b
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff fa79 	bl	8003eb4 <clamp_int>
 80049c2:	60b8      	str	r0, [r7, #8]
            newState = deltaT > 0 ? 0 : 2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	dd01      	ble.n	80049ce <heating_tick+0x52>
 80049ca:	2300      	movs	r3, #0
 80049cc:	e000      	b.n	80049d0 <heating_tick+0x54>
 80049ce:	2302      	movs	r3, #2
 80049d0:	60fb      	str	r3, [r7, #12]
        }

        if (newValue != state.output)
 80049d2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a3c <heating_tick+0xc0>)
 80049d4:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4293      	cmp	r3, r2
 80049de:	d002      	beq.n	80049e6 <heating_tick+0x6a>
            uiState.valueDirty = true;
 80049e0:	4b17      	ldr	r3, [pc, #92]	@ (8004a40 <heating_tick+0xc4>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	711a      	strb	r2, [r3, #4]
        if (newState != state.state)
 80049e6:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <heating_tick+0xc0>)
 80049e8:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80049ec:	461a      	mov	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d002      	beq.n	80049fa <heating_tick+0x7e>
            uiState.stateDirty = true;
 80049f4:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <heating_tick+0xc4>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	70da      	strb	r2, [r3, #3]

        state.state = newState;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	b25a      	sxtb	r2, r3
 80049fe:	4b0f      	ldr	r3, [pc, #60]	@ (8004a3c <heating_tick+0xc0>)
 8004a00:	741a      	strb	r2, [r3, #16]
        state.output = newValue;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	b25a      	sxtb	r2, r3
 8004a06:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <heating_tick+0xc0>)
 8004a08:	745a      	strb	r2, [r3, #17]
 8004a0a:	e010      	b.n	8004a2e <heating_tick+0xb2>
    }
    else
    {
        if (state.state != 3)
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <heating_tick+0xc0>)
 8004a0e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d005      	beq.n	8004a22 <heating_tick+0xa6>
        {
            uiState.stateDirty = true;
 8004a16:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <heating_tick+0xc4>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	70da      	strb	r2, [r3, #3]
            uiState.valueDirty = true;
 8004a1c:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <heating_tick+0xc4>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	711a      	strb	r2, [r3, #4]
        }
        state.output = 0;
 8004a22:	4b06      	ldr	r3, [pc, #24]	@ (8004a3c <heating_tick+0xc0>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	745a      	strb	r2, [r3, #17]
        state.state = 3;
 8004a28:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <heating_tick+0xc0>)
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	741a      	strb	r2, [r3, #16]
    }

    uiState.realTempDirty = true;
 8004a2e:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <heating_tick+0xc4>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	709a      	strb	r2, [r3, #2]
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	24000048 	.word	0x24000048
 8004a40:	24000060 	.word	0x24000060

08004a44 <lock_tick>:
const int expected_size = 4;
uint8_t expected_badge[4] = {0x96, 0xf1, 0x36, 0x00};
uint8_t pnidbuf[16];

void lock_tick(bool touched)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	71fb      	strb	r3, [r7, #7]
    if (state.locked)
 8004a4e:	4b23      	ldr	r3, [pc, #140]	@ (8004adc <lock_tick+0x98>)
 8004a50:	7c9b      	ldrb	r3, [r3, #18]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d028      	beq.n	8004aa8 <lock_tick+0x64>
    {
        int l = PN532_ReadPassiveTarget(&pn, &pnidbuf, PN532_MIFARE_ISO14443A, 100);
 8004a56:	2364      	movs	r3, #100	@ 0x64
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4921      	ldr	r1, [pc, #132]	@ (8004ae0 <lock_tick+0x9c>)
 8004a5c:	4821      	ldr	r0, [pc, #132]	@ (8004ae4 <lock_tick+0xa0>)
 8004a5e:	f001 fbfd 	bl	800625c <PN532_ReadPassiveTarget>
 8004a62:	60b8      	str	r0, [r7, #8]
        if (l == expected_size)
 8004a64:	2204      	movs	r2, #4
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d134      	bne.n	8004ad6 <lock_tick+0x92>
        {
            for (int i = 0; i < expected_size; i++) {
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e00c      	b.n	8004a8c <lock_tick+0x48>
                if (pnidbuf[i] != expected_badge[i]) return;
 8004a72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae0 <lock_tick+0x9c>)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	491b      	ldr	r1, [pc, #108]	@ (8004ae8 <lock_tick+0xa4>)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	440b      	add	r3, r1
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d126      	bne.n	8004ad4 <lock_tick+0x90>
            for (int i = 0; i < expected_size; i++) {
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4293      	cmp	r3, r2
 8004a92:	dbee      	blt.n	8004a72 <lock_tick+0x2e>
            }            

            state.locked = 0;
 8004a94:	4b11      	ldr	r3, [pc, #68]	@ (8004adc <lock_tick+0x98>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	749a      	strb	r2, [r3, #18]
            uiState.lockedDirty = 1;
 8004a9a:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <lock_tick+0xa8>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	719a      	strb	r2, [r3, #6]
            state.ticksWithoutInput = 0;
 8004aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8004adc <lock_tick+0x98>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	615a      	str	r2, [r3, #20]
 8004aa6:	e016      	b.n	8004ad6 <lock_tick+0x92>
        }
    }
    else
    {
        state.ticksWithoutInput = touched ? 0 : state.ticksWithoutInput + 1;
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <lock_tick+0x6e>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e002      	b.n	8004ab8 <lock_tick+0x74>
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <lock_tick+0x98>)
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	4a08      	ldr	r2, [pc, #32]	@ (8004adc <lock_tick+0x98>)
 8004aba:	6153      	str	r3, [r2, #20]
        if (state.ticksWithoutInput > 333)
 8004abc:	4b07      	ldr	r3, [pc, #28]	@ (8004adc <lock_tick+0x98>)
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8004ac4:	db07      	blt.n	8004ad6 <lock_tick+0x92>
        {
            state.locked = true;
 8004ac6:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <lock_tick+0x98>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	749a      	strb	r2, [r3, #18]
            uiState.lockedDirty = true;
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <lock_tick+0xa8>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	719a      	strb	r2, [r3, #6]
 8004ad2:	e000      	b.n	8004ad6 <lock_tick+0x92>
                if (pnidbuf[i] != expected_badge[i]) return;
 8004ad4:	bf00      	nop
        }
    }
}
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	24000048 	.word	0x24000048
 8004ae0:	24000f10 	.word	0x24000f10
 8004ae4:	24000ef8 	.word	0x24000ef8
 8004ae8:	24000068 	.word	0x24000068
 8004aec:	24000060 	.word	0x24000060

08004af0 <drawUi>:

void drawUi()
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
    if (uiState.tempSliderDirty)
 8004af4:	4b30      	ldr	r3, [pc, #192]	@ (8004bb8 <drawUi+0xc8>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <drawUi+0x1e>
    {
        drawTemperatureSelector(state.setTemp);
 8004afc:	4b2f      	ldr	r3, [pc, #188]	@ (8004bbc <drawUi+0xcc>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fb2f 	bl	8004164 <drawTemperatureSelector>
        uiState.tempSliderDirty = false;
 8004b06:	4b2c      	ldr	r3, [pc, #176]	@ (8004bb8 <drawUi+0xc8>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
        return; // only redraw slider to increase responsivness
 8004b0c:	e052      	b.n	8004bb4 <drawUi+0xc4>
    }

    if (uiState.lockedDirty)
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb8 <drawUi+0xc8>)
 8004b10:	799b      	ldrb	r3, [r3, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <drawUi+0x36>
    {
        drawLockIcon(state.locked);
 8004b16:	4b29      	ldr	r3, [pc, #164]	@ (8004bbc <drawUi+0xcc>)
 8004b18:	7c9b      	ldrb	r3, [r3, #18]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fd3e 	bl	800459c <drawLockIcon>
        uiState.lockedDirty = false;
 8004b20:	4b25      	ldr	r3, [pc, #148]	@ (8004bb8 <drawUi+0xc8>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	719a      	strb	r2, [r3, #6]
    }

    if (uiState.realTempDirty)
 8004b26:	4b24      	ldr	r3, [pc, #144]	@ (8004bb8 <drawUi+0xc8>)
 8004b28:	789b      	ldrb	r3, [r3, #2]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d010      	beq.n	8004b50 <drawUi+0x60>
    {
        drawBigStats(state.realTemp / 10, state.realHumidity);
 8004b2e:	4b23      	ldr	r3, [pc, #140]	@ (8004bbc <drawUi+0xcc>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4a23      	ldr	r2, [pc, #140]	@ (8004bc0 <drawUi+0xd0>)
 8004b34:	fb82 1203 	smull	r1, r2, r2, r3
 8004b38:	1092      	asrs	r2, r2, #2
 8004b3a:	17db      	asrs	r3, r3, #31
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bbc <drawUi+0xcc>)
 8004b40:	6892      	ldr	r2, [r2, #8]
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fbd7 	bl	80042f8 <drawBigStats>
        uiState.realTempDirty = false;
 8004b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <drawUi+0xc8>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	709a      	strb	r2, [r3, #2]
    }

    if (uiState.setTempTextDirty)
 8004b50:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <drawUi+0xc8>)
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <drawUi+0x78>
    {
        drawSetTemperature(state.setTemp);
 8004b58:	4b18      	ldr	r3, [pc, #96]	@ (8004bbc <drawUi+0xcc>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fc69 	bl	8004434 <drawSetTemperature>
        uiState.setTempTextDirty = false;
 8004b62:	4b15      	ldr	r3, [pc, #84]	@ (8004bb8 <drawUi+0xc8>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	705a      	strb	r2, [r3, #1]
    }

    if (uiState.stateDirty)
 8004b68:	4b13      	ldr	r3, [pc, #76]	@ (8004bb8 <drawUi+0xc8>)
 8004b6a:	78db      	ldrb	r3, [r3, #3]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <drawUi+0x92>
    {
        drawStatusIcon(state.state);
 8004b70:	4b12      	ldr	r3, [pc, #72]	@ (8004bbc <drawUi+0xcc>)
 8004b72:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff fcd2 	bl	8004520 <drawStatusIcon>
        uiState.stateDirty = false;
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb8 <drawUi+0xc8>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	70da      	strb	r2, [r3, #3]
    }

    if (uiState.valueDirty)
 8004b82:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <drawUi+0xc8>)
 8004b84:	791b      	ldrb	r3, [r3, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <drawUi+0xac>
    {
        drawStatusBar(state.output);
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bbc <drawUi+0xcc>)
 8004b8c:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fd33 	bl	80045fc <drawStatusBar>
        uiState.valueDirty = false;
 8004b96:	4b08      	ldr	r3, [pc, #32]	@ (8004bb8 <drawUi+0xc8>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	711a      	strb	r2, [r3, #4]
    }

    if (uiState.enabledDirty)
 8004b9c:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <drawUi+0xc8>)
 8004b9e:	795b      	ldrb	r3, [r3, #5]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <drawUi+0xc4>
    {
        drawEnableButton(state.enabled);
 8004ba4:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <drawUi+0xcc>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fdb3 	bl	8004714 <drawEnableButton>
        uiState.enabledDirty = false;
 8004bae:	4b02      	ldr	r3, [pc, #8]	@ (8004bb8 <drawUi+0xc8>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	715a      	strb	r2, [r3, #5]
    }
}
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	24000060 	.word	0x24000060
 8004bbc:	24000048 	.word	0x24000048
 8004bc0:	66666667 	.word	0x66666667

08004bc4 <AppMain>:

void AppMain()
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
    PN532_I2C_Init(&pn);
 8004bca:	486e      	ldr	r0, [pc, #440]	@ (8004d84 <AppMain+0x1c0>)
 8004bcc:	f001 fcaa 	bl	8006524 <PN532_I2C_Init>
    PN532_SamConfiguration(&pn);
 8004bd0:	486c      	ldr	r0, [pc, #432]	@ (8004d84 <AppMain+0x1c0>)
 8004bd2:	f001 fb21 	bl	8006218 <PN532_SamConfiguration>

    uint32_t ts_status = BSP_ERROR_NONE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	613b      	str	r3, [r7, #16]
    uint32_t x_size, y_size;
    bool touchPrev = false;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	77fb      	strb	r3, [r7, #31]
    int dragX = -1;
 8004bde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004be2:	61bb      	str	r3, [r7, #24]
    int heatingTickCounter = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]

    BSP_LCD_GetXSize(0, &x_size);
 8004be8:	f107 0308 	add.w	r3, r7, #8
 8004bec:	4619      	mov	r1, r3
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f7fd ff08 	bl	8002a04 <BSP_LCD_GetXSize>
    BSP_LCD_GetYSize(0, &y_size);
 8004bf4:	1d3b      	adds	r3, r7, #4
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f7fd ff21 	bl	8002a40 <BSP_LCD_GetYSize>

    hTS.Width = x_size;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4a61      	ldr	r2, [pc, #388]	@ (8004d88 <AppMain+0x1c4>)
 8004c02:	6013      	str	r3, [r2, #0]
    hTS.Height = y_size;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a60      	ldr	r2, [pc, #384]	@ (8004d88 <AppMain+0x1c4>)
 8004c08:	6053      	str	r3, [r2, #4]
    hTS.Orientation = TS_SWAP_XY;
 8004c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d88 <AppMain+0x1c4>)
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	609a      	str	r2, [r3, #8]
    hTS.Accuracy = 5;
 8004c10:	4b5d      	ldr	r3, [pc, #372]	@ (8004d88 <AppMain+0x1c4>)
 8004c12:	2205      	movs	r2, #5
 8004c14:	60da      	str	r2, [r3, #12]
    ts_status = BSP_TS_Init(0, &hTS);
 8004c16:	495c      	ldr	r1, [pc, #368]	@ (8004d88 <AppMain+0x1c4>)
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f7fe fd99 	bl	8003750 <BSP_TS_Init>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	613b      	str	r3, [r7, #16]
    while (ts_status != BSP_ERROR_NONE)
 8004c22:	bf00      	nop
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f040 80a8 	bne.w	8004d7c <AppMain+0x1b8>
        return;

    UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8004c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c30:	f7fc fb34 	bl	800129c <UTIL_LCD_Clear>

    while (1)
    {
        if (!heatingTickCounter)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <AppMain+0x7a>
            heating_tick();
 8004c3a:	f7ff fe9f 	bl	800497c <heating_tick>
        heatingTickCounter = (heatingTickCounter + 1) % 30;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	4b52      	ldr	r3, [pc, #328]	@ (8004d8c <AppMain+0x1c8>)
 8004c44:	fb83 1302 	smull	r1, r3, r3, r2
 8004c48:	4413      	add	r3, r2
 8004c4a:	1119      	asrs	r1, r3, #4
 8004c4c:	17d3      	asrs	r3, r2, #31
 8004c4e:	1ac9      	subs	r1, r1, r3
 8004c50:	460b      	mov	r3, r1
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	1a5b      	subs	r3, r3, r1
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	617b      	str	r3, [r7, #20]

        ts_status = BSP_TS_GetState(0, &TS_State);
 8004c5c:	494c      	ldr	r1, [pc, #304]	@ (8004d90 <AppMain+0x1cc>)
 8004c5e:	2000      	movs	r0, #0
 8004c60:	f7fe fe1c 	bl	800389c <BSP_TS_GetState>
 8004c64:	4603      	mov	r3, r0
 8004c66:	613b      	str	r3, [r7, #16]

        if (TS_State.TouchDetected && !state.locked)
 8004c68:	4b49      	ldr	r3, [pc, #292]	@ (8004d90 <AppMain+0x1cc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d063      	beq.n	8004d38 <AppMain+0x174>
 8004c70:	4b48      	ldr	r3, [pc, #288]	@ (8004d94 <AppMain+0x1d0>)
 8004c72:	7c9b      	ldrb	r3, [r3, #18]
 8004c74:	f083 0301 	eor.w	r3, r3, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d05c      	beq.n	8004d38 <AppMain+0x174>
        {
            if (!touchPrev)
 8004c7e:	7ffb      	ldrb	r3, [r7, #31]
 8004c80:	f083 0301 	eor.w	r3, r3, #1
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d027      	beq.n	8004cda <AppMain+0x116>
            {
                if (
                    enable_x <= TS_State.TouchX && enable_x2 >= TS_State.TouchX &&
 8004c8a:	4b41      	ldr	r3, [pc, #260]	@ (8004d90 <AppMain+0x1cc>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f240 121b 	movw	r2, #283	@ 0x11b
                if (
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d321      	bcc.n	8004cda <AppMain+0x116>
                    enable_x <= TS_State.TouchX && enable_x2 >= TS_State.TouchX &&
 8004c96:	4b3e      	ldr	r3, [pc, #248]	@ (8004d90 <AppMain+0x1cc>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f240 125b 	movw	r2, #347	@ 0x15b
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d81b      	bhi.n	8004cda <AppMain+0x116>
                    enable_y <= TS_State.TouchY && enable_y2 >= TS_State.TouchY)
 8004ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8004d90 <AppMain+0x1cc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	22a8      	movs	r2, #168	@ 0xa8
                    enable_x <= TS_State.TouchX && enable_x2 >= TS_State.TouchX &&
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d316      	bcc.n	8004cda <AppMain+0x116>
                    enable_y <= TS_State.TouchY && enable_y2 >= TS_State.TouchY)
 8004cac:	4b38      	ldr	r3, [pc, #224]	@ (8004d90 <AppMain+0x1cc>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	22c4      	movs	r2, #196	@ 0xc4
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d811      	bhi.n	8004cda <AppMain+0x116>
                {
                    state.enabled = !state.enabled;
 8004cb6:	4b37      	ldr	r3, [pc, #220]	@ (8004d94 <AppMain+0x1d0>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bf14      	ite	ne
 8004cbe:	2301      	movne	r3, #1
 8004cc0:	2300      	moveq	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f083 0301 	eor.w	r3, r3, #1
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	4b30      	ldr	r3, [pc, #192]	@ (8004d94 <AppMain+0x1d0>)
 8004cd2:	701a      	strb	r2, [r3, #0]
                    uiState.enabledDirty = true;
 8004cd4:	4b30      	ldr	r3, [pc, #192]	@ (8004d98 <AppMain+0x1d4>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	715a      	strb	r2, [r3, #5]
                }
            }

            if (dragX < 0 && TS_State.TouchY > 222)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	da07      	bge.n	8004cf0 <AppMain+0x12c>
 8004ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d90 <AppMain+0x1cc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2bde      	cmp	r3, #222	@ 0xde
 8004ce6:	d903      	bls.n	8004cf0 <AppMain+0x12c>
            {
                dragX = TS_State.TouchX;
 8004ce8:	4b29      	ldr	r3, [pc, #164]	@ (8004d90 <AppMain+0x1cc>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	61bb      	str	r3, [r7, #24]
            if (dragX < 0 && TS_State.TouchY > 222)
 8004cee:	e02d      	b.n	8004d4c <AppMain+0x188>
            }
            else if (dragX > 0)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dd2a      	ble.n	8004d4c <AppMain+0x188>
            {
                int ot = state.setTemp;
 8004cf6:	4b27      	ldr	r3, [pc, #156]	@ (8004d94 <AppMain+0x1d0>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	60fb      	str	r3, [r7, #12]
                state.setTemp += (dragX - TS_State.TouchX);
 8004cfc:	4b25      	ldr	r3, [pc, #148]	@ (8004d94 <AppMain+0x1d0>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4619      	mov	r1, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4b22      	ldr	r3, [pc, #136]	@ (8004d90 <AppMain+0x1cc>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	440b      	add	r3, r1
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4b21      	ldr	r3, [pc, #132]	@ (8004d94 <AppMain+0x1d0>)
 8004d10:	60da      	str	r2, [r3, #12]
                state.setTemp = clamp_int(state.setTemp, 1500, 3000);
 8004d12:	4b20      	ldr	r3, [pc, #128]	@ (8004d94 <AppMain+0x1d0>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004d1a:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff f8c8 	bl	8003eb4 <clamp_int>
 8004d24:	4603      	mov	r3, r0
 8004d26:	4a1b      	ldr	r2, [pc, #108]	@ (8004d94 <AppMain+0x1d0>)
 8004d28:	60d3      	str	r3, [r2, #12]
                dragX = TS_State.TouchX;
 8004d2a:	4b19      	ldr	r3, [pc, #100]	@ (8004d90 <AppMain+0x1cc>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	61bb      	str	r3, [r7, #24]
                uiState.tempSliderDirty = true;
 8004d30:	4b19      	ldr	r3, [pc, #100]	@ (8004d98 <AppMain+0x1d4>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
            if (dragX < 0 && TS_State.TouchY > 222)
 8004d36:	e009      	b.n	8004d4c <AppMain+0x188>
            }
        }
        else
        {
            if (dragX >= 0)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	db02      	blt.n	8004d44 <AppMain+0x180>
                uiState.setTempTextDirty = true;
 8004d3e:	4b16      	ldr	r3, [pc, #88]	@ (8004d98 <AppMain+0x1d4>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	705a      	strb	r2, [r3, #1]
            dragX = -1;
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	e000      	b.n	8004d4e <AppMain+0x18a>
            if (dragX < 0 && TS_State.TouchY > 222)
 8004d4c:	bf00      	nop
        }
        touchPrev = TS_State.TouchDetected;
 8004d4e:	4b10      	ldr	r3, [pc, #64]	@ (8004d90 <AppMain+0x1cc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf14      	ite	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	2300      	moveq	r3, #0
 8004d5a:	77fb      	strb	r3, [r7, #31]
        lock_tick(touchPrev);
 8004d5c:	7ffb      	ldrb	r3, [r7, #31]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fe70 	bl	8004a44 <lock_tick>

        blockRendering = 1;
 8004d64:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <AppMain+0x1d8>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
        while (blockRendering)
 8004d6a:	bf00      	nop
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <AppMain+0x1d8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1fb      	bne.n	8004d6c <AppMain+0x1a8>
        {
            // SHE VSYNC ON MY LTDC TILL I PRESENT (:
        }
        drawUi();
 8004d74:	f7ff febc 	bl	8004af0 <drawUi>
        continue;
 8004d78:	bf00      	nop
        if (!heatingTickCounter)
 8004d7a:	e75b      	b.n	8004c34 <AppMain+0x70>
        return;
 8004d7c:	bf00      	nop
    }
}
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	24000ef8 	.word	0x24000ef8
 8004d88:	24000edc 	.word	0x24000edc
 8004d8c:	88888889 	.word	0x88888889
 8004d90:	24000ed0 	.word	0x24000ed0
 8004d94:	24000048 	.word	0x24000048
 8004d98:	24000060 	.word	0x24000060
 8004d9c:	24000ef4 	.word	0x24000ef4

08004da0 <mf_getchar>:
}

#else

mf_char mf_getchar(mf_str *str)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
    if (!(**str))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <mf_getchar+0x16>
        return 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e005      	b.n	8004dc2 <mf_getchar+0x22>
    else
        return *(*str)++;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6011      	str	r1, [r2, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <mf_rewind>:

void mf_rewind(mf_str *str)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
    (*str)--;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	1e5a      	subs	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	601a      	str	r2, [r3, #0]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <mf_render_character>:
uint8_t mf_render_character(const struct mf_font_s *font,
                            int16_t x0, int16_t y0,
                            mf_char character,
                            mf_pixel_callback_t callback,
                            void *state)
{
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b089      	sub	sp, #36	@ 0x24
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	817b      	strh	r3, [r7, #10]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	813b      	strh	r3, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	71fb      	strb	r3, [r7, #7]
    uint8_t width;
    width = font->render_character(font, x0, y0, character, callback, state);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699c      	ldr	r4, [r3, #24]
 8004e0a:	79f8      	ldrb	r0, [r7, #7]
 8004e0c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004e10:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	47a0      	blx	r4
 8004e22:	4603      	mov	r3, r0
 8004e24:	75fb      	strb	r3, [r7, #23]

    if (!width)
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d110      	bne.n	8004e4e <mf_render_character+0x62>
    {
        width = font->render_character(font, x0, y0, font->fallback_character,
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	699c      	ldr	r4, [r3, #24]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	7c18      	ldrb	r0, [r3, #16]
 8004e34:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004e38:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	47a0      	blx	r4
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	75fb      	strb	r3, [r7, #23]
                                       callback, state);
    }

    return width;
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd90      	pop	{r4, r7, pc}

08004e58 <mf_character_width>:

uint8_t mf_character_width(const struct mf_font_s *font,
                           mf_char character)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
    uint8_t width;
    width = font->character_width(font, character);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]

    if (!width)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d108      	bne.n	8004e8c <mf_character_width+0x34>
    {
        width = font->character_width(font, font->fallback_character);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	7c12      	ldrb	r2, [r2, #16]
 8004e82:	4611      	mov	r1, r2
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
 8004e88:	4603      	mov	r3, r0
 8004e8a:	73fb      	strb	r3, [r7, #15]
    }

    return width;
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <mf_round_to_tab>:

#if MF_USE_TABS
/* Round the X coordinate up to the nearest tab stop. */
static int16_t mf_round_to_tab(const struct mf_font_s *font,
                               int16_t x0, int16_t x)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	807b      	strh	r3, [r7, #2]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	803b      	strh	r3, [r7, #0]
    int16_t tabw, dx;

    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
 8004ea6:	216d      	movs	r1, #109	@ 0x6d
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ffd5 	bl	8004e58 <mf_character_width>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	81fb      	strh	r3, [r7, #14]

    /* Always atleast 1 space */
    x += mf_character_width(font, ' ');
 8004eb6:	2120      	movs	r1, #32
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff ffcd 	bl	8004e58 <mf_character_width>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	883b      	ldrh	r3, [r7, #0]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	803b      	strh	r3, [r7, #0]

    /* Round to next tab stop */
    dx = x - x0 + font->baseline_x;
 8004eca:	883a      	ldrh	r2, [r7, #0]
 8004ecc:	887b      	ldrh	r3, [r7, #2]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	81bb      	strh	r3, [r7, #12]
    x += tabw - (dx % tabw);
 8004ee0:	89f9      	ldrh	r1, [r7, #14]
 8004ee2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ee6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004eea:	fb93 f0f2 	sdiv	r0, r3, r2
 8004eee:	fb00 f202 	mul.w	r2, r0, r2
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	1acb      	subs	r3, r1, r3
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	883b      	ldrh	r3, [r7, #0]
 8004efc:	4413      	add	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	803b      	strh	r3, [r7, #0]

    return x;
 8004f02:	f9b7 3000 	ldrsh.w	r3, [r7]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <mf_round_to_prev_tab>:

/* Round the X coordinate down to the nearest tab stop. */
static int16_t mf_round_to_prev_tab(const struct mf_font_s *font,
                                    int16_t x0, int16_t x)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	807b      	strh	r3, [r7, #2]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	803b      	strh	r3, [r7, #0]
    int16_t tabw, dx;

    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
 8004f1e:	216d      	movs	r1, #109	@ 0x6d
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff99 	bl	8004e58 <mf_character_width>
 8004f26:	4603      	mov	r3, r0
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	81fb      	strh	r3, [r7, #14]

    /* Always atleast 1 space */
    x -= mf_character_width(font, ' ');
 8004f2e:	2120      	movs	r1, #32
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ff91 	bl	8004e58 <mf_character_width>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461a      	mov	r2, r3
 8004f3a:	883b      	ldrh	r3, [r7, #0]
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	803b      	strh	r3, [r7, #0]

    /* Round to previous tab stop */
    dx = x0 - x + font->baseline_x;
 8004f42:	887a      	ldrh	r2, [r7, #2]
 8004f44:	883b      	ldrh	r3, [r7, #0]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	81bb      	strh	r3, [r7, #12]
    x -= tabw - (dx % tabw);
 8004f58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f5c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004f60:	fb93 f1f2 	sdiv	r1, r3, r2
 8004f64:	fb01 f202 	mul.w	r2, r1, r2
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	89fb      	ldrh	r3, [r7, #14]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	883b      	ldrh	r3, [r7, #0]
 8004f74:	4413      	add	r3, r2
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	803b      	strh	r3, [r7, #0]

    return x;
 8004f7a:	f9b7 3000 	ldrsh.w	r3, [r7]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <mf_get_string_width>:
#endif

int16_t mf_get_string_width(const struct mf_font_s *font, mf_str text,
                            uint16_t count, bool kern)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b086      	sub	sp, #24
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	4611      	mov	r1, r2
 8004f92:	461a      	mov	r2, r3
 8004f94:	460b      	mov	r3, r1
 8004f96:	80fb      	strh	r3, [r7, #6]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	717b      	strb	r3, [r7, #5]
    int16_t result = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	82fb      	strh	r3, [r7, #22]
    uint16_t c1 = 0, c2;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	82bb      	strh	r3, [r7, #20]

    if (!count)
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d13b      	bne.n	8005022 <mf_get_string_width+0x9c>
        count = 0xFFFF;
 8004faa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004fae:	80fb      	strh	r3, [r7, #6]

    while (count-- && *text)
 8004fb0:	e037      	b.n	8005022 <mf_get_string_width+0x9c>
    {
        c2 = mf_getchar(&text);
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fef2 	bl	8004da0 <mf_getchar>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	827b      	strh	r3, [r7, #18]

        if (c2 == '\t')
 8004fc0:	8a7b      	ldrh	r3, [r7, #18]
 8004fc2:	2b09      	cmp	r3, #9
 8004fc4:	d10b      	bne.n	8004fde <mf_get_string_width+0x58>
        {
#if MF_USE_TABS
            result = mf_round_to_tab(font, 0, result);
 8004fc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2100      	movs	r1, #0
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff ff61 	bl	8004e96 <mf_round_to_tab>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	82fb      	strh	r3, [r7, #22]
            c1 = ' ';
 8004fd8:	2320      	movs	r3, #32
 8004fda:	82bb      	strh	r3, [r7, #20]
            continue;
 8004fdc:	e021      	b.n	8005022 <mf_get_string_width+0x9c>
#else
            c2 = ' ';
#endif
        }

        if (kern && c1 != 0)
 8004fde:	797b      	ldrb	r3, [r7, #5]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d010      	beq.n	8005006 <mf_get_string_width+0x80>
 8004fe4:	8abb      	ldrh	r3, [r7, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00d      	beq.n	8005006 <mf_get_string_width+0x80>
            result += mf_compute_kerning(font, c1, c2);
 8004fea:	8abb      	ldrh	r3, [r7, #20]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	8a7a      	ldrh	r2, [r7, #18]
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fa43 	bl	8005480 <mf_compute_kerning>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	8afb      	ldrh	r3, [r7, #22]
 8005000:	4413      	add	r3, r2
 8005002:	b29b      	uxth	r3, r3
 8005004:	82fb      	strh	r3, [r7, #22]

        result += mf_character_width(font, c2);
 8005006:	8a7b      	ldrh	r3, [r7, #18]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	4619      	mov	r1, r3
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7ff ff23 	bl	8004e58 <mf_character_width>
 8005012:	4603      	mov	r3, r0
 8005014:	461a      	mov	r2, r3
 8005016:	8afb      	ldrh	r3, [r7, #22]
 8005018:	4413      	add	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	82fb      	strh	r3, [r7, #22]
        c1 = c2;
 800501e:	8a7b      	ldrh	r3, [r7, #18]
 8005020:	82bb      	strh	r3, [r7, #20]
    while (count-- && *text)
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	1e5a      	subs	r2, r3, #1
 8005026:	80fa      	strh	r2, [r7, #6]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <mf_get_string_width+0xae>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1be      	bne.n	8004fb2 <mf_get_string_width+0x2c>
    }

    return result;
 8005034:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <strip_spaces>:

/* Return the length of the string without trailing spaces. */
static uint16_t strip_spaces(mf_str text, uint16_t count, mf_char *last_char)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	460b      	mov	r3, r1
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	817b      	strh	r3, [r7, #10]
    uint16_t i = 0, result = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	82fb      	strh	r3, [r7, #22]
 8005052:	2300      	movs	r3, #0
 8005054:	82bb      	strh	r3, [r7, #20]
    mf_char tmp = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	74fb      	strb	r3, [r7, #19]

    if (!count)
 800505a:	897b      	ldrh	r3, [r7, #10]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d11e      	bne.n	800509e <strip_spaces+0x5e>
        count = 0xFFFF;
 8005060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005064:	817b      	strh	r3, [r7, #10]

    while (count-- && *text)
 8005066:	e01a      	b.n	800509e <strip_spaces+0x5e>
    {
        i++;
 8005068:	8afb      	ldrh	r3, [r7, #22]
 800506a:	3301      	adds	r3, #1
 800506c:	82fb      	strh	r3, [r7, #22]
        tmp = mf_getchar(&text);
 800506e:	f107 030c 	add.w	r3, r7, #12
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fe94 	bl	8004da0 <mf_getchar>
 8005078:	4603      	mov	r3, r0
 800507a:	74fb      	strb	r3, [r7, #19]
        if (tmp != ' ' && tmp != 0xA0 && tmp != '\n' &&
 800507c:	7cfb      	ldrb	r3, [r7, #19]
 800507e:	2b20      	cmp	r3, #32
 8005080:	d00d      	beq.n	800509e <strip_spaces+0x5e>
 8005082:	7cfb      	ldrb	r3, [r7, #19]
 8005084:	2ba0      	cmp	r3, #160	@ 0xa0
 8005086:	d00a      	beq.n	800509e <strip_spaces+0x5e>
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	2b0a      	cmp	r3, #10
 800508c:	d007      	beq.n	800509e <strip_spaces+0x5e>
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	2b0d      	cmp	r3, #13
 8005092:	d004      	beq.n	800509e <strip_spaces+0x5e>
            tmp != '\r' && tmp != '\t')
 8005094:	7cfb      	ldrb	r3, [r7, #19]
 8005096:	2b09      	cmp	r3, #9
 8005098:	d001      	beq.n	800509e <strip_spaces+0x5e>
        {
            result = i;
 800509a:	8afb      	ldrh	r3, [r7, #22]
 800509c:	82bb      	strh	r3, [r7, #20]
    while (count-- && *text)
 800509e:	897b      	ldrh	r3, [r7, #10]
 80050a0:	1e5a      	subs	r2, r3, #1
 80050a2:	817a      	strh	r2, [r7, #10]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <strip_spaces+0x70>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1db      	bne.n	8005068 <strip_spaces+0x28>
        }
    }

    if (last_char)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <strip_spaces+0x8c>
    {
        if (!*text)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <strip_spaces+0x86>
            *last_char = 0;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e002      	b.n	80050cc <strip_spaces+0x8c>
        else
            *last_char = tmp;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	7cfa      	ldrb	r2, [r7, #19]
 80050ca:	701a      	strb	r2, [r3, #0]
    }

    return result;
 80050cc:	8abb      	ldrh	r3, [r7, #20]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <render_left>:
static void render_left(const struct mf_font_s *font,
                        int16_t x0, int16_t y0,
                        mf_str text, uint16_t count,
                        mf_character_callback_t callback,
                        void *state)
{
 80050d6:	b590      	push	{r4, r7, lr}
 80050d8:	b087      	sub	sp, #28
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	607b      	str	r3, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	817b      	strh	r3, [r7, #10]
 80050e4:	4613      	mov	r3, r2
 80050e6:	813b      	strh	r3, [r7, #8]
    int16_t x;
    mf_char c1 = 0, c2;
 80050e8:	2300      	movs	r3, #0
 80050ea:	757b      	strb	r3, [r7, #21]

    x = x0 - font->baseline_x;
 80050ec:	897a      	ldrh	r2, [r7, #10]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	82fb      	strh	r3, [r7, #22]
    while (count--)
 80050fc:	e034      	b.n	8005168 <render_left+0x92>
    {
        c2 = mf_getchar(&text);
 80050fe:	1d3b      	adds	r3, r7, #4
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fe4d 	bl	8004da0 <mf_getchar>
 8005106:	4603      	mov	r3, r0
 8005108:	753b      	strb	r3, [r7, #20]

        if (c2 == '\t')
 800510a:	7d3b      	ldrb	r3, [r7, #20]
 800510c:	2b09      	cmp	r3, #9
 800510e:	d10c      	bne.n	800512a <render_left+0x54>
        {
#if MF_USE_TABS
            x = mf_round_to_tab(font, x0, x);
 8005110:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005114:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005118:	4619      	mov	r1, r3
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7ff febb 	bl	8004e96 <mf_round_to_tab>
 8005120:	4603      	mov	r3, r0
 8005122:	82fb      	strh	r3, [r7, #22]
            c1 = ' ';
 8005124:	2320      	movs	r3, #32
 8005126:	757b      	strb	r3, [r7, #21]
            continue;
 8005128:	e01e      	b.n	8005168 <render_left+0x92>
#else
            c2 = ' ';
#endif
        }

        if (c1 != 0)
 800512a:	7d7b      	ldrb	r3, [r7, #21]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <render_left+0x72>
            x += mf_compute_kerning(font, c1, c2);
 8005130:	7d3a      	ldrb	r2, [r7, #20]
 8005132:	7d7b      	ldrb	r3, [r7, #21]
 8005134:	4619      	mov	r1, r3
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f9a2 	bl	8005480 <mf_compute_kerning>
 800513c:	4603      	mov	r3, r0
 800513e:	b29a      	uxth	r2, r3
 8005140:	8afb      	ldrh	r3, [r7, #22]
 8005142:	4413      	add	r3, r2
 8005144:	b29b      	uxth	r3, r3
 8005146:	82fb      	strh	r3, [r7, #22]

        x += callback(x, y0, c2, state);
 8005148:	7d3a      	ldrb	r2, [r7, #20]
 800514a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800514e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8005152:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8005154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005156:	47a0      	blx	r4
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	8afb      	ldrh	r3, [r7, #22]
 800515e:	4413      	add	r3, r2
 8005160:	b29b      	uxth	r3, r3
 8005162:	82fb      	strh	r3, [r7, #22]
        c1 = c2;
 8005164:	7d3b      	ldrb	r3, [r7, #20]
 8005166:	757b      	strb	r3, [r7, #21]
    while (count--)
 8005168:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800516a:	1e5a      	subs	r2, r3, #1
 800516c:	853a      	strh	r2, [r7, #40]	@ 0x28
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1c5      	bne.n	80050fe <render_left+0x28>
    }
}
 8005172:	bf00      	nop
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd90      	pop	{r4, r7, pc}

0800517c <render_right>:
static void render_right(const struct mf_font_s *font,
                         int16_t x0, int16_t y0,
                         mf_str text, uint16_t count,
                         mf_character_callback_t callback,
                         void *state)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b089      	sub	sp, #36	@ 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	607b      	str	r3, [r7, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	817b      	strh	r3, [r7, #10]
 800518a:	4613      	mov	r3, r2
 800518c:	813b      	strh	r3, [r7, #8]
    int16_t x;
    uint16_t i;
    mf_char c1, c2 = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	76fb      	strb	r3, [r7, #27]
    mf_str tmp;

    /* Go to the end of the line. */
    for (i = 0; i < count; i++)
 8005192:	2300      	movs	r3, #0
 8005194:	83bb      	strh	r3, [r7, #28]
 8005196:	e006      	b.n	80051a6 <render_right+0x2a>
        mf_getchar(&text);
 8005198:	1d3b      	adds	r3, r7, #4
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fe00 	bl	8004da0 <mf_getchar>
    for (i = 0; i < count; i++)
 80051a0:	8bbb      	ldrh	r3, [r7, #28]
 80051a2:	3301      	adds	r3, #1
 80051a4:	83bb      	strh	r3, [r7, #28]
 80051a6:	8bba      	ldrh	r2, [r7, #28]
 80051a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d3f4      	bcc.n	8005198 <render_right+0x1c>

    x = x0 - font->baseline_x;
 80051ae:	897a      	ldrh	r2, [r7, #10]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	83fb      	strh	r3, [r7, #30]
    for (i = 0; i < count; i++)
 80051be:	2300      	movs	r3, #0
 80051c0:	83bb      	strh	r3, [r7, #28]
 80051c2:	e043      	b.n	800524c <render_right+0xd0>
    {
        mf_rewind(&text);
 80051c4:	1d3b      	adds	r3, r7, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fe01 	bl	8004dce <mf_rewind>
        tmp = text;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	617b      	str	r3, [r7, #20]
        c1 = mf_getchar(&tmp);
 80051d0:	f107 0314 	add.w	r3, r7, #20
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fde3 	bl	8004da0 <mf_getchar>
 80051da:	4603      	mov	r3, r0
 80051dc:	76bb      	strb	r3, [r7, #26]

        /* Perform tab alignment */
        if (c1 == '\t')
 80051de:	7ebb      	ldrb	r3, [r7, #26]
 80051e0:	2b09      	cmp	r3, #9
 80051e2:	d10c      	bne.n	80051fe <render_right+0x82>
        {
#if MF_USE_TABS
            x = mf_round_to_prev_tab(font, x0, x);
 80051e4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80051e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051ec:	4619      	mov	r1, r3
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff fe8d 	bl	8004f0e <mf_round_to_prev_tab>
 80051f4:	4603      	mov	r3, r0
 80051f6:	83fb      	strh	r3, [r7, #30]
            c2 = ' ';
 80051f8:	2320      	movs	r3, #32
 80051fa:	76fb      	strb	r3, [r7, #27]
            continue;
 80051fc:	e023      	b.n	8005246 <render_right+0xca>
            c1 = ' ';
#endif
        }

        /* Apply the nominal character width */
        x -= mf_character_width(font, c1);
 80051fe:	7ebb      	ldrb	r3, [r7, #26]
 8005200:	4619      	mov	r1, r3
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff fe28 	bl	8004e58 <mf_character_width>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	8bfb      	ldrh	r3, [r7, #30]
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	b29b      	uxth	r3, r3
 8005212:	83fb      	strh	r3, [r7, #30]

        /* Apply kerning */
        if (c2 != 0)
 8005214:	7efb      	ldrb	r3, [r7, #27]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <render_right+0xb6>
            x -= mf_compute_kerning(font, c1, c2);
 800521a:	7efa      	ldrb	r2, [r7, #27]
 800521c:	7ebb      	ldrb	r3, [r7, #26]
 800521e:	4619      	mov	r1, r3
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f92d 	bl	8005480 <mf_compute_kerning>
 8005226:	4603      	mov	r3, r0
 8005228:	8bfa      	ldrh	r2, [r7, #30]
 800522a:	b29b      	uxth	r3, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	b29b      	uxth	r3, r3
 8005230:	83fb      	strh	r3, [r7, #30]

        callback(x, y0, c1, state);
 8005232:	7eba      	ldrb	r2, [r7, #26]
 8005234:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8005238:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 800523c:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800523e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005240:	47a0      	blx	r4
        c2 = c1;
 8005242:	7ebb      	ldrb	r3, [r7, #26]
 8005244:	76fb      	strb	r3, [r7, #27]
    for (i = 0; i < count; i++)
 8005246:	8bbb      	ldrh	r3, [r7, #28]
 8005248:	3301      	adds	r3, #1
 800524a:	83bb      	strh	r3, [r7, #28]
 800524c:	8bba      	ldrh	r2, [r7, #28]
 800524e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005250:	429a      	cmp	r2, r3
 8005252:	d3b7      	bcc.n	80051c4 <render_right+0x48>
    }
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	3724      	adds	r7, #36	@ 0x24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd90      	pop	{r4, r7, pc}

0800525e <mf_render_aligned>:
                       int16_t x0, int16_t y0,
                       enum mf_align_t align,
                       mf_str text, uint16_t count,
                       mf_character_callback_t callback,
                       void *state)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b08a      	sub	sp, #40	@ 0x28
 8005262:	af04      	add	r7, sp, #16
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	4608      	mov	r0, r1
 8005268:	4611      	mov	r1, r2
 800526a:	461a      	mov	r2, r3
 800526c:	4603      	mov	r3, r0
 800526e:	817b      	strh	r3, [r7, #10]
 8005270:	460b      	mov	r3, r1
 8005272:	813b      	strh	r3, [r7, #8]
 8005274:	4613      	mov	r3, r2
 8005276:	71fb      	strb	r3, [r7, #7]
    int16_t string_width;
    count = strip_spaces(text, count, 0);
 8005278:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800527a:	2200      	movs	r2, #0
 800527c:	4619      	mov	r1, r3
 800527e:	6a38      	ldr	r0, [r7, #32]
 8005280:	f7ff fede 	bl	8005040 <strip_spaces>
 8005284:	4603      	mov	r3, r0
 8005286:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (align == MF_ALIGN_LEFT)
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10d      	bne.n	80052aa <mf_render_aligned+0x4c>
    {
        render_left(font, x0, y0, text, count, callback, state);
 800528e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005292:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	9302      	str	r3, [sp, #8]
 800529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff ff16 	bl	80050d6 <render_left>
    }
    if (align == MF_ALIGN_CENTER)
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d122      	bne.n	80052f6 <mf_render_aligned+0x98>
    {
        string_width = mf_get_string_width(font, text, count, false);
 80052b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052b2:	2300      	movs	r3, #0
 80052b4:	6a39      	ldr	r1, [r7, #32]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7ff fe65 	bl	8004f86 <mf_get_string_width>
 80052bc:	4603      	mov	r3, r0
 80052be:	82fb      	strh	r3, [r7, #22]
        x0 -= string_width / 2;
 80052c0:	897a      	ldrh	r2, [r7, #10]
 80052c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	da00      	bge.n	80052cc <mf_render_aligned+0x6e>
 80052ca:	3301      	adds	r3, #1
 80052cc:	105b      	asrs	r3, r3, #1
 80052ce:	b21b      	sxth	r3, r3
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	817b      	strh	r3, [r7, #10]
        render_left(font, x0, y0, text, count, callback, state);
 80052d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80052dc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80052e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e2:	9302      	str	r3, [sp, #8]
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff fef1 	bl	80050d6 <render_left>
    }
    else if (align == MF_ALIGN_RIGHT)
    {
        render_right(font, x0, y0, text, count, callback, state);
    }
}
 80052f4:	e010      	b.n	8005318 <mf_render_aligned+0xba>
    else if (align == MF_ALIGN_RIGHT)
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d10d      	bne.n	8005318 <mf_render_aligned+0xba>
        render_right(font, x0, y0, text, count, callback, state);
 80052fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005300:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8005304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005306:	9302      	str	r3, [sp, #8]
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7ff ff32 	bl	800517c <render_right>
}
 8005318:	bf00      	nop
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <fit_leftedge>:
};

/* Pixel callback for analyzing the left edge of a glyph. */
static void fit_leftedge(int16_t x, int16_t y, uint8_t count, uint8_t alpha,
                         void *state)
{
 8005320:	b490      	push	{r4, r7}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	4604      	mov	r4, r0
 8005328:	4608      	mov	r0, r1
 800532a:	4611      	mov	r1, r2
 800532c:	461a      	mov	r2, r3
 800532e:	4623      	mov	r3, r4
 8005330:	80fb      	strh	r3, [r7, #6]
 8005332:	4603      	mov	r3, r0
 8005334:	80bb      	strh	r3, [r7, #4]
 8005336:	460b      	mov	r3, r1
 8005338:	70fb      	strb	r3, [r7, #3]
 800533a:	4613      	mov	r3, r2
 800533c:	70bb      	strb	r3, [r7, #2]
    (void)count;
    struct kerning_state_s *s = state;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	60fb      	str	r3, [r7, #12]

    if (alpha > 7)
 8005342:	78bb      	ldrb	r3, [r7, #2]
 8005344:	2b07      	cmp	r3, #7
 8005346:	d912      	bls.n	800536e <fit_leftedge+0x4e>
    {
        uint8_t zone = y / s->zoneheight;
 8005348:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	7c12      	ldrb	r2, [r2, #16]
 8005350:	fb93 f3f2 	sdiv	r3, r3, r2
 8005354:	72fb      	strb	r3, [r7, #11]
        if (x < s->edgepos[zone])
 8005356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800535a:	7afa      	ldrb	r2, [r7, #11]
 800535c:	68f9      	ldr	r1, [r7, #12]
 800535e:	5c8a      	ldrb	r2, [r1, r2]
 8005360:	4293      	cmp	r3, r2
 8005362:	da04      	bge.n	800536e <fit_leftedge+0x4e>
            s->edgepos[zone] = x;
 8005364:	7afb      	ldrb	r3, [r7, #11]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	b2d1      	uxtb	r1, r2
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	54d1      	strb	r1, [r2, r3]
    }
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bc90      	pop	{r4, r7}
 8005376:	4770      	bx	lr

08005378 <fit_rightedge>:

/* Pixel callback for analyzing the right edge of a glyph. */
static void fit_rightedge(int16_t x, int16_t y, uint8_t count, uint8_t alpha,
                         void *state)
{
 8005378:	b490      	push	{r4, r7}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	4604      	mov	r4, r0
 8005380:	4608      	mov	r0, r1
 8005382:	4611      	mov	r1, r2
 8005384:	461a      	mov	r2, r3
 8005386:	4623      	mov	r3, r4
 8005388:	80fb      	strh	r3, [r7, #6]
 800538a:	4603      	mov	r3, r0
 800538c:	80bb      	strh	r3, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]
 8005392:	4613      	mov	r3, r2
 8005394:	70bb      	strb	r3, [r7, #2]
    struct kerning_state_s *s = state;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	60fb      	str	r3, [r7, #12]

    if (alpha > 7)
 800539a:	78bb      	ldrb	r3, [r7, #2]
 800539c:	2b07      	cmp	r3, #7
 800539e:	d91a      	bls.n	80053d6 <fit_rightedge+0x5e>
    {
        uint8_t zone = y / s->zoneheight;
 80053a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	7c12      	ldrb	r2, [r2, #16]
 80053a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80053ac:	72fb      	strb	r3, [r7, #11]
        x += count - 1;
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	4413      	add	r3, r2
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	80fb      	strh	r3, [r7, #6]
        if (x > s->edgepos[zone])
 80053be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053c2:	7afa      	ldrb	r2, [r7, #11]
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	5c8a      	ldrb	r2, [r1, r2]
 80053c8:	4293      	cmp	r3, r2
 80053ca:	dd04      	ble.n	80053d6 <fit_rightedge+0x5e>
            s->edgepos[zone] = x;
 80053cc:	7afb      	ldrb	r3, [r7, #11]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	b2d1      	uxtb	r1, r2
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	54d1      	strb	r1, [r2, r3]
    }
}
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc90      	pop	{r4, r7}
 80053de:	4770      	bx	lr

080053e0 <do_kerning>:

/* Should kerning be done against this character? */
static bool do_kerning(mf_char c)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	71fb      	strb	r3, [r7, #7]
    /* Just a speed optimization, spaces would be ignored anyway. */
    if (c == ' ' || c == '\n' || c == '\r' || c == '\t')
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d008      	beq.n	8005402 <do_kerning+0x22>
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	2b0a      	cmp	r3, #10
 80053f4:	d005      	beq.n	8005402 <do_kerning+0x22>
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	2b0d      	cmp	r3, #13
 80053fa:	d002      	beq.n	8005402 <do_kerning+0x22>
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	2b09      	cmp	r3, #9
 8005400:	d101      	bne.n	8005406 <do_kerning+0x26>
        return false;
 8005402:	2300      	movs	r3, #0
 8005404:	e008      	b.n	8005418 <do_kerning+0x38>

    /* Do not kern against digits, in order to keep values in tables nicely
     * aligned. Most fonts have constant width for digits. */
    if (c >= '0' && c <= '9')
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	2b2f      	cmp	r3, #47	@ 0x2f
 800540a:	d904      	bls.n	8005416 <do_kerning+0x36>
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	2b39      	cmp	r3, #57	@ 0x39
 8005410:	d801      	bhi.n	8005416 <do_kerning+0x36>
        return false;
 8005412:	2300      	movs	r3, #0
 8005414:	e000      	b.n	8005418 <do_kerning+0x38>

    return true;
 8005416:	2301      	movs	r3, #1
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <max16>:

/*static int16_t min16(int16_t a, int16_t b) { return (a < b) ? a : b; }*/
static int16_t max16(int16_t a, int16_t b) { return (a > b) ? a : b; }
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	460a      	mov	r2, r1
 800542e:	80fb      	strh	r3, [r7, #6]
 8005430:	4613      	mov	r3, r2
 8005432:	80bb      	strh	r3, [r7, #4]
 8005434:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800543c:	4293      	cmp	r3, r2
 800543e:	bfb8      	it	lt
 8005440:	4613      	movlt	r3, r2
 8005442:	b21b      	sxth	r3, r3
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <avg16>:
static int16_t avg16(int16_t a, int16_t b) { return (a + b) / 2; }
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	460a      	mov	r2, r1
 800545a:	80fb      	strh	r3, [r7, #6]
 800545c:	4613      	mov	r3, r2
 800545e:	80bb      	strh	r3, [r7, #4]
 8005460:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005464:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005468:	4413      	add	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	da00      	bge.n	8005470 <avg16+0x20>
 800546e:	3301      	adds	r3, #1
 8005470:	105b      	asrs	r3, r3, #1
 8005472:	b21b      	sxth	r3, r3
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <mf_compute_kerning>:

int8_t mf_compute_kerning(const struct mf_font_s *font,
                          mf_char c1, mf_char c2)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b090      	sub	sp, #64	@ 0x40
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	70fb      	strb	r3, [r7, #3]
 800548c:	4613      	mov	r3, r2
 800548e:	70bb      	strb	r3, [r7, #2]
    struct kerning_state_s leftedge, rightedge;
    uint8_t w1, w2, i, min_space;
    int16_t normal_space, adjust, max_adjust;

    if (font->flags & MF_FONT_FLAG_MONOSPACE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	7bdb      	ldrb	r3, [r3, #15]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <mf_compute_kerning+0x20>
        return 0; /* No kerning for monospace fonts */
 800549c:	2300      	movs	r3, #0
 800549e:	e0ec      	b.n	800567a <mf_compute_kerning+0x1fa>

    if (!do_kerning(c1) || !do_kerning(c2))
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff ff9c 	bl	80053e0 <do_kerning>
 80054a8:	4603      	mov	r3, r0
 80054aa:	f083 0301 	eor.w	r3, r3, #1
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d109      	bne.n	80054c8 <mf_compute_kerning+0x48>
 80054b4:	78bb      	ldrb	r3, [r7, #2]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff ff92 	bl	80053e0 <do_kerning>
 80054bc:	4603      	mov	r3, r0
 80054be:	f083 0301 	eor.w	r3, r3, #1
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <mf_compute_kerning+0x4c>
        return 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e0d6      	b.n	800567a <mf_compute_kerning+0x1fa>

    /* Compute the height of one kerning zone in pixels */
    i = (font->height + MF_KERNING_ZONES - 1) / MF_KERNING_ZONES;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	7a5b      	ldrb	r3, [r3, #9]
 80054d0:	330f      	adds	r3, #15
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da00      	bge.n	80054d8 <mf_compute_kerning+0x58>
 80054d6:	330f      	adds	r3, #15
 80054d8:	111b      	asrs	r3, r3, #4
 80054da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (i < 1) i = 1;
 80054de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <mf_compute_kerning+0x6c>
 80054e6:	2301      	movs	r3, #1
 80054e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* Initialize structures */
    leftedge.zoneheight = rightedge.zoneheight = i;
 80054ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054f0:	763b      	strb	r3, [r7, #24]
 80054f2:	7e3b      	ldrb	r3, [r7, #24]
 80054f4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (i = 0; i < MF_KERNING_ZONES; i++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80054fe:	e012      	b.n	8005526 <mf_compute_kerning+0xa6>
    {
        leftedge.edgepos[i] = 255;
 8005500:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005504:	3338      	adds	r3, #56	@ 0x38
 8005506:	443b      	add	r3, r7
 8005508:	22ff      	movs	r2, #255	@ 0xff
 800550a:	f803 2c1c 	strb.w	r2, [r3, #-28]
        rightedge.edgepos[i] = 0;
 800550e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005512:	3338      	adds	r3, #56	@ 0x38
 8005514:	443b      	add	r3, r7
 8005516:	2200      	movs	r2, #0
 8005518:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < MF_KERNING_ZONES; i++)
 800551c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005520:	3301      	adds	r3, #1
 8005522:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005526:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800552a:	2b0f      	cmp	r3, #15
 800552c:	d9e8      	bls.n	8005500 <mf_compute_kerning+0x80>
    }

    /* Analyze the edges of both glyphs. */
    w1 = mf_render_character(font, 0, 0, c1, fit_rightedge, &rightedge);
 800552e:	78fa      	ldrb	r2, [r7, #3]
 8005530:	f107 0308 	add.w	r3, r7, #8
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	4b53      	ldr	r3, [pc, #332]	@ (8005684 <mf_compute_kerning+0x204>)
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	4613      	mov	r3, r2
 800553c:	2200      	movs	r2, #0
 800553e:	2100      	movs	r1, #0
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fc53 	bl	8004dec <mf_render_character>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    w2 = mf_render_character(font, 0, 0, c2, fit_leftedge, &leftedge);
 800554c:	78ba      	ldrb	r2, [r7, #2]
 800554e:	f107 031c 	add.w	r3, r7, #28
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	4b4c      	ldr	r3, [pc, #304]	@ (8005688 <mf_compute_kerning+0x208>)
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	2200      	movs	r2, #0
 800555c:	2100      	movs	r1, #0
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff fc44 	bl	8004dec <mf_render_character>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    /* Find the minimum horizontal space between the glyphs. */
    min_space = 255;
 800556a:	23ff      	movs	r3, #255	@ 0xff
 800556c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    for (i = 0; i < MF_KERNING_ZONES; i++)
 8005570:	2300      	movs	r3, #0
 8005572:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005576:	e033      	b.n	80055e0 <mf_compute_kerning+0x160>
    {
        uint8_t space;
        if (leftedge.edgepos[i] == 255 || rightedge.edgepos[i] == 0)
 8005578:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800557c:	3338      	adds	r3, #56	@ 0x38
 800557e:	443b      	add	r3, r7
 8005580:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005584:	2bff      	cmp	r3, #255	@ 0xff
 8005586:	d025      	beq.n	80055d4 <mf_compute_kerning+0x154>
 8005588:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800558c:	3338      	adds	r3, #56	@ 0x38
 800558e:	443b      	add	r3, r7
 8005590:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01d      	beq.n	80055d4 <mf_compute_kerning+0x154>
            continue; /* Outside glyph area. */

        space = w1 - rightedge.edgepos[i] + leftedge.edgepos[i];
 8005598:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800559c:	3338      	adds	r3, #56	@ 0x38
 800559e:	443b      	add	r3, r7
 80055a0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80055a4:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055b0:	3338      	adds	r3, #56	@ 0x38
 80055b2:	443b      	add	r3, r7
 80055b4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (space < min_space)
 80055be:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80055c2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d205      	bcs.n	80055d6 <mf_compute_kerning+0x156>
            min_space = space;
 80055ca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80055ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80055d2:	e000      	b.n	80055d6 <mf_compute_kerning+0x156>
            continue; /* Outside glyph area. */
 80055d4:	bf00      	nop
    for (i = 0; i < MF_KERNING_ZONES; i++)
 80055d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055da:	3301      	adds	r3, #1
 80055dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80055e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055e4:	2b0f      	cmp	r3, #15
 80055e6:	d9c7      	bls.n	8005578 <mf_compute_kerning+0xf8>
    }

    if (min_space == 255)
 80055e8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80055ec:	2bff      	cmp	r3, #255	@ 0xff
 80055ee:	d101      	bne.n	80055f4 <mf_compute_kerning+0x174>
        return 0; /* One of the characters is space, or both are punctuation. */
 80055f0:	2300      	movs	r3, #0
 80055f2:	e042      	b.n	800567a <mf_compute_kerning+0x1fa>

    /* Compute the adjustment of the glyph position. */
    normal_space = avg16(w1, w2) * MF_KERNING_SPACE_PERCENT / 100;
 80055f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80055f8:	b21b      	sxth	r3, r3
 80055fa:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80055fe:	b212      	sxth	r2, r2
 8005600:	4611      	mov	r1, r2
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff ff24 	bl	8005450 <avg16>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	4613      	mov	r3, r2
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	4a1e      	ldr	r2, [pc, #120]	@ (800568c <mf_compute_kerning+0x20c>)
 8005614:	fb82 1203 	smull	r1, r2, r2, r3
 8005618:	1152      	asrs	r2, r2, #5
 800561a:	17db      	asrs	r3, r3, #31
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	863b      	strh	r3, [r7, #48]	@ 0x30
    normal_space += MF_KERNING_SPACE_PIXELS;
 8005620:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005622:	3303      	adds	r3, #3
 8005624:	b29b      	uxth	r3, r3
 8005626:	863b      	strh	r3, [r7, #48]	@ 0x30
    adjust = normal_space - min_space;
 8005628:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800562a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800562e:	b29b      	uxth	r3, r3
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	b29b      	uxth	r3, r3
 8005634:	86bb      	strh	r3, [r7, #52]	@ 0x34
    max_adjust = -max16(w1, w2) * MF_KERNING_LIMIT / 100;
 8005636:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800563a:	b21b      	sxth	r3, r3
 800563c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8005640:	b212      	sxth	r2, r2
 8005642:	4611      	mov	r1, r2
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff feed 	bl	8005424 <max16>
 800564a:	4603      	mov	r3, r0
 800564c:	4a10      	ldr	r2, [pc, #64]	@ (8005690 <mf_compute_kerning+0x210>)
 800564e:	fb82 1203 	smull	r1, r2, r2, r3
 8005652:	1052      	asrs	r2, r2, #1
 8005654:	17db      	asrs	r3, r3, #31
 8005656:	1a9b      	subs	r3, r3, r2
 8005658:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    if (adjust > 0) adjust = 0;
 800565a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800565e:	2b00      	cmp	r3, #0
 8005660:	dd01      	ble.n	8005666 <mf_compute_kerning+0x1e6>
 8005662:	2300      	movs	r3, #0
 8005664:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (adjust < max_adjust) adjust = max_adjust;
 8005666:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 800566a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800566e:	429a      	cmp	r2, r3
 8005670:	da01      	bge.n	8005676 <mf_compute_kerning+0x1f6>
 8005672:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005674:	86bb      	strh	r3, [r7, #52]	@ 0x34

    return adjust;
 8005676:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005678:	b25b      	sxtb	r3, r3
}
 800567a:	4618      	mov	r0, r3
 800567c:	3738      	adds	r7, #56	@ 0x38
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	08005379 	.word	0x08005379
 8005688:	08005321 	.word	0x08005321
 800568c:	51eb851f 	.word	0x51eb851f
 8005690:	66666667 	.word	0x66666667

08005694 <find_glyph>:
 * through the character ranges. If the character is not found, return
 * pointer to the default glyph.
 */
static const uint8_t *find_glyph(const struct mf_rlefont_s *font,
                                 uint16_t character)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	807b      	strh	r3, [r7, #2]
   unsigned i, index;
   const struct mf_rlefont_char_range_s *range;
   for (i = 0; i < font->char_range_count; i++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e027      	b.n	80056f6 <find_glyph+0x62>
   {
       range = &font->char_ranges[i];
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4613      	mov	r3, r2
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	613b      	str	r3, [r7, #16]
       index = character - range->first_char;
 80056b8:	887b      	ldrh	r3, [r7, #2]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	8812      	ldrh	r2, [r2, #0]
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
       if (character >= range->first_char && index < range->char_count)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	887a      	ldrh	r2, [r7, #2]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d311      	bcc.n	80056f0 <find_glyph+0x5c>
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	885b      	ldrh	r3, [r3, #2]
 80056d0:	461a      	mov	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d20b      	bcs.n	80056f0 <find_glyph+0x5c>
       {
           uint16_t offset = pgm_read_word(range->glyph_offsets + index);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4413      	add	r3, r2
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	817b      	strh	r3, [r7, #10]
           return &range->glyph_data[offset];
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	897b      	ldrh	r3, [r7, #10]
 80056ec:	4413      	add	r3, r2
 80056ee:	e00a      	b.n	8005706 <find_glyph+0x72>
   for (i = 0; i < font->char_range_count; i++)
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	3301      	adds	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80056fc:	461a      	mov	r2, r3
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4293      	cmp	r3, r2
 8005702:	d3d0      	bcc.n	80056a6 <find_glyph+0x12>
       }
   }

   return 0;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <write_pixels>:

/* Call the callback to write one pixel to screen, and advance to next
 * pixel position. */
static void write_pixels(struct renderstate_r *rstate, uint16_t count,
                         uint8_t alpha)
{
 8005712:	b5b0      	push	{r4, r5, r7, lr}
 8005714:	b086      	sub	sp, #24
 8005716:	af02      	add	r7, sp, #8
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	807b      	strh	r3, [r7, #2]
 800571e:	4613      	mov	r3, r2
 8005720:	707b      	strb	r3, [r7, #1]
    uint8_t rowlen;

    /* Write row-by-row if the run spans multiple rows. */
    while ((int32_t)rstate->x + count >= rstate->x_end)
 8005722:	e02b      	b.n	800577c <write_pixels+0x6a>
    {
        rowlen = rstate->x_end - rstate->x;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800572a:	b2da      	uxtb	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	73fb      	strb	r3, [r7, #15]
        rstate->callback(rstate->x, rstate->y, rowlen, alpha, rstate->state);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68dc      	ldr	r4, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	787d      	ldrb	r5, [r7, #1]
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	462b      	mov	r3, r5
 8005754:	47a0      	blx	r4
        count -= rowlen;
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	b29b      	uxth	r3, r3
 800575a:	887a      	ldrh	r2, [r7, #2]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	807b      	strh	r3, [r7, #2]
        rstate->x = rstate->x_begin;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	809a      	strh	r2, [r3, #4]
        rstate->y++;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005770:	b29b      	uxth	r3, r3
 8005772:	3301      	adds	r3, #1
 8005774:	b29b      	uxth	r3, r3
 8005776:	b21a      	sxth	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	80da      	strh	r2, [r3, #6]
    while ((int32_t)rstate->x + count >= rstate->x_end)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005782:	461a      	mov	r2, r3
 8005784:	887b      	ldrh	r3, [r7, #2]
 8005786:	4413      	add	r3, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800578e:	4293      	cmp	r3, r2
 8005790:	dac8      	bge.n	8005724 <write_pixels+0x12>
    }

    /* Write the remaining part */
    if (count)
 8005792:	887b      	ldrh	r3, [r7, #2]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d019      	beq.n	80057cc <write_pixels+0xba>
    {
        rstate->callback(rstate->x, rstate->y, count, alpha, rstate->state);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68dc      	ldr	r4, [r3, #12]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80057a8:	887b      	ldrh	r3, [r7, #2]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	787d      	ldrb	r5, [r7, #1]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	462b      	mov	r3, r5
 80057b6:	47a0      	blx	r4
        rstate->x += count;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80057be:	b29a      	uxth	r2, r3
 80057c0:	887b      	ldrh	r3, [r7, #2]
 80057c2:	4413      	add	r3, r2
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	b21a      	sxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	809a      	strh	r2, [r3, #4]
    }
}
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bdb0      	pop	{r4, r5, r7, pc}

080057d4 <skip_pixels>:

/* Skip the given number of pixels (0 alpha) */
static void skip_pixels(struct renderstate_r *rstate, uint16_t count)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	807b      	strh	r3, [r7, #2]
    rstate->x += count;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	887b      	ldrh	r3, [r7, #2]
 80057ea:	4413      	add	r3, r2
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	b21a      	sxth	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	809a      	strh	r2, [r3, #4]
    while (rstate->x >= rstate->x_end)
 80057f4:	e01b      	b.n	800582e <skip_pixels+0x5a>
    {
        rstate->x -= rstate->x_end - rstate->x_begin;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005804:	b299      	uxth	r1, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800580c:	b29b      	uxth	r3, r3
 800580e:	1acb      	subs	r3, r1, r3
 8005810:	b29b      	uxth	r3, r3
 8005812:	4413      	add	r3, r2
 8005814:	b29b      	uxth	r3, r3
 8005816:	b21a      	sxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	809a      	strh	r2, [r3, #4]
        rstate->y++;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005822:	b29b      	uxth	r3, r3
 8005824:	3301      	adds	r3, #1
 8005826:	b29b      	uxth	r3, r3
 8005828:	b21a      	sxth	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	80da      	strh	r2, [r3, #6]
    while (rstate->x >= rstate->x_end)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800583a:	429a      	cmp	r2, r3
 800583c:	dadb      	bge.n	80057f6 <skip_pixels+0x22>
    }
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <write_rle_dictentry>:

/* Decode and write out a RLE-encoded dictionary entry. */
static void write_rle_dictentry(const struct mf_rlefont_s *font,
                                struct renderstate_r *rstate,
                                uint8_t index)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	4613      	mov	r3, r2
 8005858:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = pgm_read_word(font->dictionary_offsets + index);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	83bb      	strh	r3, [r7, #28]
    uint16_t length = pgm_read_word(font->dictionary_offsets + index + 1) - offset;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	3301      	adds	r3, #1
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	4413      	add	r3, r2
 8005874:	881a      	ldrh	r2, [r3, #0]
 8005876:	8bbb      	ldrh	r3, [r7, #28]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	837b      	strh	r3, [r7, #26]
    uint16_t i;

    for (i = 0; i < length; i++)
 800587c:	2300      	movs	r3, #0
 800587e:	83fb      	strh	r3, [r7, #30]
 8005880:	e058      	b.n	8005934 <write_rle_dictentry+0xe8>
    {
        uint8_t code = pgm_read_byte(font->dictionary_data + offset + i);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	8bb9      	ldrh	r1, [r7, #28]
 8005888:	8bfb      	ldrh	r3, [r7, #30]
 800588a:	440b      	add	r3, r1
 800588c:	4413      	add	r3, r2
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	767b      	strb	r3, [r7, #25]
        if ((code & RLE_CODEMASK) == RLE_ZEROS)
 8005892:	7e7b      	ldrb	r3, [r7, #25]
 8005894:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <write_rle_dictentry+0x64>
        {
            skip_pixels(rstate, code & RLE_VALMASK);
 800589c:	7e7b      	ldrb	r3, [r7, #25]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	4619      	mov	r1, r3
 80058a8:	68b8      	ldr	r0, [r7, #8]
 80058aa:	f7ff ff93 	bl	80057d4 <skip_pixels>
 80058ae:	e03e      	b.n	800592e <write_rle_dictentry+0xe2>
        }
        else if ((code & RLE_CODEMASK) == RLE_64ZEROS)
 80058b0:	7e7b      	ldrb	r3, [r7, #25]
 80058b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058b6:	2b40      	cmp	r3, #64	@ 0x40
 80058b8:	d10b      	bne.n	80058d2 <write_rle_dictentry+0x86>
        {
            skip_pixels(rstate, ((code & RLE_VALMASK) + 1) * 64);
 80058ba:	7e7b      	ldrb	r3, [r7, #25]
 80058bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058c0:	3301      	adds	r3, #1
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	019b      	lsls	r3, r3, #6
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	4619      	mov	r1, r3
 80058ca:	68b8      	ldr	r0, [r7, #8]
 80058cc:	f7ff ff82 	bl	80057d4 <skip_pixels>
 80058d0:	e02d      	b.n	800592e <write_rle_dictentry+0xe2>
        }
        else if ((code & RLE_CODEMASK) == RLE_ONES)
 80058d2:	7e7b      	ldrb	r3, [r7, #25]
 80058d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058d8:	2b80      	cmp	r3, #128	@ 0x80
 80058da:	d10c      	bne.n	80058f6 <write_rle_dictentry+0xaa>
        {
            write_pixels(rstate, (code & RLE_VALMASK) + 1, 255);
 80058dc:	7e7b      	ldrb	r3, [r7, #25]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3301      	adds	r3, #1
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	22ff      	movs	r2, #255	@ 0xff
 80058ec:	4619      	mov	r1, r3
 80058ee:	68b8      	ldr	r0, [r7, #8]
 80058f0:	f7ff ff0f 	bl	8005712 <write_pixels>
 80058f4:	e01b      	b.n	800592e <write_rle_dictentry+0xe2>
        }
        else if ((code & RLE_CODEMASK) == RLE_SHADE)
 80058f6:	7e7b      	ldrb	r3, [r7, #25]
 80058f8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058fc:	2bc0      	cmp	r3, #192	@ 0xc0
 80058fe:	d116      	bne.n	800592e <write_rle_dictentry+0xe2>
        {
            uint8_t count, alpha;
            count = ((code & RLE_VALMASK) >> 4) + 1;
 8005900:	7e7b      	ldrb	r3, [r7, #25]
 8005902:	111b      	asrs	r3, r3, #4
 8005904:	b2db      	uxtb	r3, r3
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	b2db      	uxtb	r3, r3
 800590c:	3301      	adds	r3, #1
 800590e:	763b      	strb	r3, [r7, #24]
            alpha = ((code & RLE_VALMASK) & 0xF) * 0x11;
 8005910:	7e7b      	ldrb	r3, [r7, #25]
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	b2db      	uxtb	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	0112      	lsls	r2, r2, #4
 800591c:	4413      	add	r3, r2
 800591e:	75fb      	strb	r3, [r7, #23]
            write_pixels(rstate, count, alpha);
 8005920:	7e3b      	ldrb	r3, [r7, #24]
 8005922:	b29b      	uxth	r3, r3
 8005924:	7dfa      	ldrb	r2, [r7, #23]
 8005926:	4619      	mov	r1, r3
 8005928:	68b8      	ldr	r0, [r7, #8]
 800592a:	f7ff fef2 	bl	8005712 <write_pixels>
    for (i = 0; i < length; i++)
 800592e:	8bfb      	ldrh	r3, [r7, #30]
 8005930:	3301      	adds	r3, #1
 8005932:	83fb      	strh	r3, [r7, #30]
 8005934:	8bfa      	ldrh	r2, [r7, #30]
 8005936:	8b7b      	ldrh	r3, [r7, #26]
 8005938:	429a      	cmp	r2, r3
 800593a:	d3a2      	bcc.n	8005882 <write_rle_dictentry+0x36>
        }
    }
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	3720      	adds	r7, #32
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <fillentry_bitcount>:

/* Get bit count for the "fill entries" */
static uint8_t fillentry_bitcount(uint8_t index)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	4603      	mov	r3, r0
 800594e:	71fb      	strb	r3, [r7, #7]
    if (index >= DICT_START2BIT)
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	2bfb      	cmp	r3, #251	@ 0xfb
 8005954:	d901      	bls.n	800595a <fillentry_bitcount+0x14>
        return 2;
 8005956:	2302      	movs	r3, #2
 8005958:	e014      	b.n	8005984 <fillentry_bitcount+0x3e>
    else if (index >= DICT_START3BIT)
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	2bf3      	cmp	r3, #243	@ 0xf3
 800595e:	d901      	bls.n	8005964 <fillentry_bitcount+0x1e>
        return 3;
 8005960:	2303      	movs	r3, #3
 8005962:	e00f      	b.n	8005984 <fillentry_bitcount+0x3e>
    else if (index >= DICT_START4BIT)
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	2be3      	cmp	r3, #227	@ 0xe3
 8005968:	d901      	bls.n	800596e <fillentry_bitcount+0x28>
        return 4;
 800596a:	2304      	movs	r3, #4
 800596c:	e00a      	b.n	8005984 <fillentry_bitcount+0x3e>
    else if (index >= DICT_START5BIT)
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	2bc3      	cmp	r3, #195	@ 0xc3
 8005972:	d901      	bls.n	8005978 <fillentry_bitcount+0x32>
        return 5;
 8005974:	2305      	movs	r3, #5
 8005976:	e005      	b.n	8005984 <fillentry_bitcount+0x3e>
    else if (index >= DICT_START6BIT)
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	2b83      	cmp	r3, #131	@ 0x83
 800597c:	d901      	bls.n	8005982 <fillentry_bitcount+0x3c>
        return 6;
 800597e:	2306      	movs	r3, #6
 8005980:	e000      	b.n	8005984 <fillentry_bitcount+0x3e>
    else
        return 7;
 8005982:	2307      	movs	r3, #7
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <write_bin_codeword>:

/* Decode and write out a direct binary codeword */
static void write_bin_codeword(const struct mf_rlefont_s *font,
                                struct renderstate_r *rstate,
                                uint8_t code)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	4613      	mov	r3, r2
 800599c:	71fb      	strb	r3, [r7, #7]
    (void)font;
    uint8_t bitcount = fillentry_bitcount(code);
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff ffd0 	bl	8005946 <fillentry_bitcount>
 80059a6:	4603      	mov	r3, r0
 80059a8:	75fb      	strb	r3, [r7, #23]
    uint8_t byte = code - DICT_START7BIT;
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	3b04      	subs	r3, #4
 80059ae:	75bb      	strb	r3, [r7, #22]
    uint8_t runlen = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	757b      	strb	r3, [r7, #21]

    while (bitcount--)
 80059b4:	e01b      	b.n	80059ee <write_bin_codeword+0x5e>
    {
        if (byte & 1)
 80059b6:	7dbb      	ldrb	r3, [r7, #22]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <write_bin_codeword+0x38>
        {
            runlen++;
 80059c0:	7d7b      	ldrb	r3, [r7, #21]
 80059c2:	3301      	adds	r3, #1
 80059c4:	757b      	strb	r3, [r7, #21]
 80059c6:	e00f      	b.n	80059e8 <write_bin_codeword+0x58>
        }
        else
        {
            if (runlen)
 80059c8:	7d7b      	ldrb	r3, [r7, #21]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d008      	beq.n	80059e0 <write_bin_codeword+0x50>
            {
                write_pixels(rstate, runlen, 255);
 80059ce:	7d7b      	ldrb	r3, [r7, #21]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	22ff      	movs	r2, #255	@ 0xff
 80059d4:	4619      	mov	r1, r3
 80059d6:	68b8      	ldr	r0, [r7, #8]
 80059d8:	f7ff fe9b 	bl	8005712 <write_pixels>
                runlen = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	757b      	strb	r3, [r7, #21]
            }

            skip_pixels(rstate, 1);
 80059e0:	2101      	movs	r1, #1
 80059e2:	68b8      	ldr	r0, [r7, #8]
 80059e4:	f7ff fef6 	bl	80057d4 <skip_pixels>
        }

        byte >>= 1;
 80059e8:	7dbb      	ldrb	r3, [r7, #22]
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	75bb      	strb	r3, [r7, #22]
    while (bitcount--)
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	1e5a      	subs	r2, r3, #1
 80059f2:	75fa      	strb	r2, [r7, #23]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1de      	bne.n	80059b6 <write_bin_codeword+0x26>
    }

    if (runlen)
 80059f8:	7d7b      	ldrb	r3, [r7, #21]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d006      	beq.n	8005a0c <write_bin_codeword+0x7c>
        write_pixels(rstate, runlen, 255);
 80059fe:	7d7b      	ldrb	r3, [r7, #21]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	22ff      	movs	r2, #255	@ 0xff
 8005a04:	4619      	mov	r1, r3
 8005a06:	68b8      	ldr	r0, [r7, #8]
 8005a08:	f7ff fe83 	bl	8005712 <write_pixels>
}
 8005a0c:	bf00      	nop
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <write_ref_codeword>:

/* Decode and write out a reference codeword */
static void write_ref_codeword(const struct mf_rlefont_s *font,
                                struct renderstate_r *rstate,
                                uint8_t code)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	71fb      	strb	r3, [r7, #7]
    if (code == 0)
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <write_ref_codeword+0x1e>
    {
        skip_pixels(rstate, 1);
 8005a28:	2101      	movs	r1, #1
 8005a2a:	68b8      	ldr	r0, [r7, #8]
 8005a2c:	f7ff fed2 	bl	80057d4 <skip_pixels>
    }
    else
    {
        write_bin_codeword(font, rstate, code);
    }
}
 8005a30:	e030      	b.n	8005a94 <write_ref_codeword+0x80>
    else if (code <= 15)
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	2b0f      	cmp	r3, #15
 8005a36:	d80a      	bhi.n	8005a4e <write_ref_codeword+0x3a>
        write_pixels(rstate, 1, 0x11 * code);
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	0112      	lsls	r2, r2, #4
 8005a3e:	4413      	add	r3, r2
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	2101      	movs	r1, #1
 8005a46:	68b8      	ldr	r0, [r7, #8]
 8005a48:	f7ff fe63 	bl	8005712 <write_pixels>
}
 8005a4c:	e022      	b.n	8005a94 <write_ref_codeword+0x80>
    else if (code == REF_FILLZEROS)
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	2b10      	cmp	r3, #16
 8005a52:	d105      	bne.n	8005a60 <write_ref_codeword+0x4c>
        rstate->y = rstate->y_end;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	80da      	strh	r2, [r3, #6]
}
 8005a5e:	e019      	b.n	8005a94 <write_ref_codeword+0x80>
    else if (code < DICT_START)
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	2b17      	cmp	r3, #23
 8005a64:	d916      	bls.n	8005a94 <write_ref_codeword+0x80>
    else if (code < DICT_START + font->rle_entry_count)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a6c:	f103 0217 	add.w	r2, r3, #23
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	db08      	blt.n	8005a88 <write_ref_codeword+0x74>
        write_rle_dictentry(font, rstate, code - DICT_START);
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	3b18      	subs	r3, #24
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f7ff fee3 	bl	800584c <write_rle_dictentry>
}
 8005a86:	e005      	b.n	8005a94 <write_ref_codeword+0x80>
        write_bin_codeword(font, rstate, code);
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff ff7e 	bl	8005990 <write_bin_codeword>
}
 8005a94:	bf00      	nop
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <write_ref_dictentry>:

/* Decode and write out a reference encoded dictionary entry. */
static void write_ref_dictentry(const struct mf_rlefont_s *font,
                                struct renderstate_r *rstate,
                                uint8_t index)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = pgm_read_word(font->dictionary_offsets + index);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	4413      	add	r3, r2
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	82bb      	strh	r3, [r7, #20]
    uint16_t length = pgm_read_word(font->dictionary_offsets + index + 1) - offset;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	4413      	add	r3, r2
 8005ac4:	881a      	ldrh	r2, [r3, #0]
 8005ac6:	8abb      	ldrh	r3, [r7, #20]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	827b      	strh	r3, [r7, #18]
    uint16_t i;

    for (i = 0; i < length; i++)
 8005acc:	2300      	movs	r3, #0
 8005ace:	82fb      	strh	r3, [r7, #22]
 8005ad0:	e010      	b.n	8005af4 <write_ref_dictentry+0x58>
    {
        uint8_t code = pgm_read_byte(font->dictionary_data + offset + i);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1a      	ldr	r2, [r3, #32]
 8005ad6:	8ab9      	ldrh	r1, [r7, #20]
 8005ad8:	8afb      	ldrh	r3, [r7, #22]
 8005ada:	440b      	add	r3, r1
 8005adc:	4413      	add	r3, r2
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	747b      	strb	r3, [r7, #17]
        write_ref_codeword(font, rstate, code);
 8005ae2:	7c7b      	ldrb	r3, [r7, #17]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff ff93 	bl	8005a14 <write_ref_codeword>
    for (i = 0; i < length; i++)
 8005aee:	8afb      	ldrh	r3, [r7, #22]
 8005af0:	3301      	adds	r3, #1
 8005af2:	82fb      	strh	r3, [r7, #22]
 8005af4:	8afa      	ldrh	r2, [r7, #22]
 8005af6:	8a7b      	ldrh	r3, [r7, #18]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d3ea      	bcc.n	8005ad2 <write_ref_dictentry+0x36>
    }
}
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <write_glyph_codeword>:

/* Decode and write out an arbitrary glyph codeword */
static void write_glyph_codeword(const struct mf_rlefont_s *font,
                                struct renderstate_r *rstate,
                                uint8_t code)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	4613      	mov	r3, r2
 8005b12:	71fb      	strb	r3, [r7, #7]
    if (code >= DICT_START + font->rle_entry_count &&
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b1a:	f103 0217 	add.w	r2, r3, #23
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	da10      	bge.n	8005b46 <write_glyph_codeword+0x40>
        code < DICT_START + font->dict_entry_count)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8005b2a:	f103 0217 	add.w	r2, r3, #23
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
    if (code >= DICT_START + font->rle_entry_count &&
 8005b30:	429a      	cmp	r2, r3
 8005b32:	db08      	blt.n	8005b46 <write_glyph_codeword+0x40>
    {
        write_ref_dictentry(font, rstate, code - DICT_START);
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	3b18      	subs	r3, #24
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff ffac 	bl	8005a9c <write_ref_dictentry>
 8005b44:	e006      	b.n	8005b54 <write_glyph_codeword+0x4e>
    }
    else
    {
        write_ref_codeword(font, rstate, code);
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff ff61 	bl	8005a14 <write_ref_codeword>
    }
}
 8005b52:	bf00      	nop
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <mf_rlefont_render_character>:
uint8_t mf_rlefont_render_character(const struct mf_font_s *font,
                                    int16_t x0, int16_t y0,
                                    uint16_t character,
                                    mf_pixel_callback_t callback,
                                    void *state)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08c      	sub	sp, #48	@ 0x30
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	4608      	mov	r0, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	817b      	strh	r3, [r7, #10]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	813b      	strh	r3, [r7, #8]
 8005b72:	4613      	mov	r3, r2
 8005b74:	80fb      	strh	r3, [r7, #6]
    const uint8_t *p;
    uint8_t width;

    struct renderstate_r rstate;
    rstate.x_begin = x0;
 8005b76:	897b      	ldrh	r3, [r7, #10]
 8005b78:	82bb      	strh	r3, [r7, #20]
    rstate.x_end = x0 + font->width;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	7a1b      	ldrb	r3, [r3, #8]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	897b      	ldrh	r3, [r7, #10]
 8005b82:	4413      	add	r3, r2
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	b21b      	sxth	r3, r3
 8005b88:	82fb      	strh	r3, [r7, #22]
    rstate.x = x0;
 8005b8a:	897b      	ldrh	r3, [r7, #10]
 8005b8c:	833b      	strh	r3, [r7, #24]
    rstate.y = y0;
 8005b8e:	893b      	ldrh	r3, [r7, #8]
 8005b90:	837b      	strh	r3, [r7, #26]
    rstate.y_end = y0 + font->height;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	7a5b      	ldrb	r3, [r3, #9]
 8005b96:	461a      	mov	r2, r3
 8005b98:	893b      	ldrh	r3, [r7, #8]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	b21b      	sxth	r3, r3
 8005ba0:	83bb      	strh	r3, [r7, #28]
    rstate.callback = callback;
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	623b      	str	r3, [r7, #32]
    rstate.state = state;
 8005ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba8:	627b      	str	r3, [r7, #36]	@ 0x24

    p = find_glyph((struct mf_rlefont_s*)font, character);
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	4619      	mov	r1, r3
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fd70 	bl	8005694 <find_glyph>
 8005bb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (!p)
 8005bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <mf_rlefont_render_character+0x64>
        return 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e018      	b.n	8005bf2 <mf_rlefont_render_character+0x96>

    width = pgm_read_byte(p++);
 8005bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    while (rstate.y < rstate.y_end)
 8005bcc:	e009      	b.n	8005be2 <mf_rlefont_render_character+0x86>
    {
        write_glyph_codeword((struct mf_rlefont_s*)font, &rstate, pgm_read_byte(p++));
 8005bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bd4:	781a      	ldrb	r2, [r3, #0]
 8005bd6:	f107 0314 	add.w	r3, r7, #20
 8005bda:	4619      	mov	r1, r3
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f7ff ff92 	bl	8005b06 <write_glyph_codeword>
    while (rstate.y < rstate.y_end)
 8005be2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005be6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	dbef      	blt.n	8005bce <mf_rlefont_render_character+0x72>
    }

    return width;
 8005bee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3730      	adds	r7, #48	@ 0x30
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <mf_rlefont_character_width>:

uint8_t mf_rlefont_character_width(const struct mf_font_s *font,
                                   uint16_t character)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	460b      	mov	r3, r1
 8005c04:	807b      	strh	r3, [r7, #2]
    const uint8_t *p;
    p = find_glyph((struct mf_rlefont_s*)font, character);
 8005c06:	887b      	ldrh	r3, [r7, #2]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fd42 	bl	8005694 <find_glyph>
 8005c10:	60f8      	str	r0, [r7, #12]
    if (!p)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <mf_rlefont_character_width+0x22>
        return 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e001      	b.n	8005c20 <mf_rlefont_character_width+0x26>

    return pgm_read_byte(p);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b0c8      	sub	sp, #288	@ 0x120
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005c36:	6018      	str	r0, [r3, #0]
 8005c38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005c40:	6019      	str	r1, [r3, #0]
 8005c42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c46:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005c4a:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8005c4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c50:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	2bff      	cmp	r3, #255	@ 0xff
 8005c58:	d806      	bhi.n	8005c68 <PN532_WriteFrame+0x40>
 8005c5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c5e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8005c68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c6c:	e0aa      	b.n	8005dc4 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 8005c74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8005c80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005c88:	2200      	movs	r2, #0
 8005c8a:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8005c8c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005c94:	22ff      	movs	r2, #255	@ 0xff
 8005c96:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005c9e:	e010      	b.n	8005cc2 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8005ca0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005ca4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005ca8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005cac:	5cd2      	ldrb	r2, [r2, r3]
 8005cae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8005cb8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005cc2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d9ea      	bls.n	8005ca0 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 8005cca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005cce:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005cda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005cde:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8005ce0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ce4:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	425b      	negs	r3, r3
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005cf4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005cf8:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8005d00:	e023      	b.n	8005d4a <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8005d02:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8005d06:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005d0a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	441a      	add	r2, r3
 8005d12:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8005d16:	3305      	adds	r3, #5
 8005d18:	7811      	ldrb	r1, [r2, #0]
 8005d1a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005d1e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005d22:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8005d24:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8005d28:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005d2c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	4413      	add	r3, r2
 8005d34:	781a      	ldrb	r2, [r3, #0]
 8005d36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8005d40:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8005d44:	3301      	adds	r3, #1
 8005d46:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8005d4a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005d54:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8005d58:	8812      	ldrh	r2, [r2, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d8d1      	bhi.n	8005d02 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8005d5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d62:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	3305      	adds	r3, #5
 8005d6a:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8005d6e:	43d2      	mvns	r2, r2
 8005d70:	b2d1      	uxtb	r1, r2
 8005d72:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005d76:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005d7a:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8005d7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d80:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	3306      	adds	r3, #6
 8005d88:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005d8c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005d90:	2100      	movs	r1, #0
 8005d92:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8005d94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d98:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005da4:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8005da8:	8812      	ldrh	r2, [r2, #0]
 8005daa:	3207      	adds	r2, #7
 8005dac:	b291      	uxth	r1, r2
 8005dae:	f107 0214 	add.w	r2, r7, #20
 8005db2:	4610      	mov	r0, r2
 8005db4:	4798      	blx	r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8005dbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dc0:	e000      	b.n	8005dc4 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b0c8      	sub	sp, #288	@ 0x120
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005dda:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005dde:	6018      	str	r0, [r3, #0]
 8005de0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005de4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005de8:	6019      	str	r1, [r3, #0]
 8005dea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005dee:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005df2:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8005dfa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005dfe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005e0a:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8005e0e:	8812      	ldrh	r2, [r2, #0]
 8005e10:	3207      	adds	r2, #7
 8005e12:	b291      	uxth	r1, r2
 8005e14:	f107 0214 	add.w	r2, r7, #20
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8005e22:	e019      	b.n	8005e58 <PN532_ReadFrame+0x88>
        offset += 1;
 8005e24:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005e28:	3301      	adds	r3, #1
 8005e2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 8005e2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e32:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	1dda      	adds	r2, r3, #7
 8005e3a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	da0a      	bge.n	8005e58 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8005e42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	485b      	ldr	r0, [pc, #364]	@ (8005fbc <PN532_ReadFrame+0x1ec>)
 8005e50:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8005e52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e56:	e0ab      	b.n	8005fb0 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8005e58:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005e5c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005e60:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005e64:	5cd3      	ldrb	r3, [r2, r3]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0dc      	beq.n	8005e24 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8005e6a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005e6e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005e72:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005e76:	5cd3      	ldrb	r3, [r2, r3]
 8005e78:	2bff      	cmp	r3, #255	@ 0xff
 8005e7a:	d00a      	beq.n	8005e92 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8005e7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e80:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	484c      	ldr	r0, [pc, #304]	@ (8005fbc <PN532_ReadFrame+0x1ec>)
 8005e8a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8005e8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e90:	e08e      	b.n	8005fb0 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8005e92:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005e96:	3301      	adds	r3, #1
 8005e98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8005e9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ea0:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	1dda      	adds	r2, r3, #7
 8005ea8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005eac:	429a      	cmp	r2, r3
 8005eae:	da0a      	bge.n	8005ec6 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8005eb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005eb4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	4840      	ldr	r0, [pc, #256]	@ (8005fc0 <PN532_ReadFrame+0x1f0>)
 8005ebe:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ec4:	e074      	b.n	8005fb0 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8005ec6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005eca:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005ece:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005ed2:	5cd3      	ldrb	r3, [r2, r3]
 8005ed4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8005ed8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005edc:	3301      	adds	r3, #1
 8005ede:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005ee2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005ee6:	5cd2      	ldrb	r2, [r2, r3]
 8005ee8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005eec:	4413      	add	r3, r2
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8005ef4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ef8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	4830      	ldr	r0, [pc, #192]	@ (8005fc4 <PN532_ReadFrame+0x1f4>)
 8005f02:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f08:	e052      	b.n	8005fb0 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8005f10:	e014      	b.n	8005f3c <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8005f12:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005f16:	1c9a      	adds	r2, r3, #2
 8005f18:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005f22:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005f26:	5cd2      	ldrb	r2, [r2, r3]
 8005f28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8005f32:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8005f36:	3301      	adds	r3, #1
 8005f38:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8005f3c:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8005f40:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d2e4      	bcs.n	8005f12 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8005f48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8005f50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005f54:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	481a      	ldr	r0, [pc, #104]	@ (8005fc8 <PN532_ReadFrame+0x1f8>)
 8005f5e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8005f60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f64:	e024      	b.n	8005fb0 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8005f66:	2300      	movs	r3, #0
 8005f68:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8005f6c:	e018      	b.n	8005fa0 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8005f6e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005f72:	1c9a      	adds	r2, r3, #2
 8005f74:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8005f78:	441a      	add	r2, r3
 8005f7a:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8005f7e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8005f82:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8005f86:	6809      	ldr	r1, [r1, #0]
 8005f88:	440b      	add	r3, r1
 8005f8a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8005f8e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8005f92:	5c8a      	ldrb	r2, [r1, r2]
 8005f94:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8005f96:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8005fa0:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8005fa4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d3e0      	bcc.n	8005f6e <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8005fac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	0800d454 	.word	0x0800d454
 8005fc0:	0800d488 	.word	0x0800d488
 8005fc4:	0800d4a4 	.word	0x0800d4a4
 8005fc8:	0800d4d4 	.word	0x0800d4d4

08005fcc <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b0c7      	sub	sp, #284	@ 0x11c
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8005fd6:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8005fda:	6020      	str	r0, [r4, #0]
 8005fdc:	4608      	mov	r0, r1
 8005fde:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8005fe2:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8005fe6:	600a      	str	r2, [r1, #0]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005fee:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005ffa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005ffe:	460a      	mov	r2, r1
 8006000:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8006002:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600a:	22d4      	movs	r2, #212	@ 0xd4
 800600c:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 800600e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006016:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800601a:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 800601e:	7812      	ldrb	r2, [r2, #0]
 8006020:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8006022:	2300      	movs	r3, #0
 8006024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8006028:	e012      	b.n	8006050 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 800602a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800602e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006032:	441a      	add	r2, r3
 8006034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006038:	3302      	adds	r3, #2
 800603a:	7811      	ldrb	r1, [r2, #0]
 800603c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8006040:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8006044:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8006046:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800604a:	3301      	adds	r3, #1
 800604c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8006050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006054:	b29b      	uxth	r3, r3
 8006056:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 800605a:	429a      	cmp	r2, r3
 800605c:	d8e5      	bhi.n	800602a <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 800605e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8006062:	3302      	adds	r3, #2
 8006064:	b29a      	uxth	r2, r3
 8006066:	f107 0110 	add.w	r1, r7, #16
 800606a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800606e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	f7ff fdd8 	bl	8005c28 <PN532_WriteFrame>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d011      	beq.n	80060a2 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 800607e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006082:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 800608c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006090:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	485b      	ldr	r0, [pc, #364]	@ (8006208 <PN532_CallFunction+0x23c>)
 800609a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800609c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060a0:	e0ac      	b.n	80061fc <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 80060a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80060a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80060b2:	4798      	blx	r3
 80060b4:	4603      	mov	r3, r0
 80060b6:	f083 0301 	eor.w	r3, r3, #1
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 80060c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060c4:	e09a      	b.n	80061fc <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 80060c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80060ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f107 0210 	add.w	r2, r7, #16
 80060d6:	2106      	movs	r1, #6
 80060d8:	4610      	mov	r0, r2
 80060da:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80060dc:	2300      	movs	r3, #0
 80060de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80060e2:	e01c      	b.n	800611e <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 80060e4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80060e8:	4a48      	ldr	r2, [pc, #288]	@ (800620c <PN532_CallFunction+0x240>)
 80060ea:	5cd2      	ldrb	r2, [r2, r3]
 80060ec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80060f0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80060f4:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80060f8:	5ccb      	ldrb	r3, [r1, r3]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d00a      	beq.n	8006114 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 80060fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006102:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	4841      	ldr	r0, [pc, #260]	@ (8006210 <PN532_CallFunction+0x244>)
 800610c:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 800610e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006112:	e073      	b.n	80061fc <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8006114:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006118:	3301      	adds	r3, #1
 800611a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800611e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006122:	2b05      	cmp	r3, #5
 8006124:	d9de      	bls.n	80060e4 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8006126:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800612a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8006136:	4798      	blx	r3
 8006138:	4603      	mov	r3, r0
 800613a:	f083 0301 	eor.w	r3, r3, #1
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8006144:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006148:	e058      	b.n	80061fc <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 800614a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800614e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	3302      	adds	r3, #2
 8006156:	b29a      	uxth	r2, r3
 8006158:	f107 0110 	add.w	r1, r7, #16
 800615c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006160:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	f7ff fe33 	bl	8005dd0 <PN532_ReadFrame>
 800616a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 800616e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2bd5      	cmp	r3, #213	@ 0xd5
 800617a:	d10d      	bne.n	8006198 <PN532_CallFunction+0x1cc>
 800617c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	461a      	mov	r2, r3
 8006188:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800618c:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	429a      	cmp	r2, r3
 8006196:	d00a      	beq.n	80061ae <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8006198:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800619c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	481b      	ldr	r0, [pc, #108]	@ (8006214 <PN532_CallFunction+0x248>)
 80061a6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061ac:	e026      	b.n	80061fc <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 80061ae:	2300      	movs	r3, #0
 80061b0:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 80061b4:	e015      	b.n	80061e2 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 80061b6:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80061ba:	1c9a      	adds	r2, r3, #2
 80061bc:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80061c0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80061c4:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 80061c8:	6809      	ldr	r1, [r1, #0]
 80061ca:	440b      	add	r3, r1
 80061cc:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80061d0:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80061d4:	5c8a      	ldrb	r2, [r1, r2]
 80061d6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 80061d8:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80061dc:	3301      	adds	r3, #1
 80061de:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 80061e2:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80061ec:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80061f0:	8812      	ldrh	r2, [r2, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d8df      	bhi.n	80061b6 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 80061f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80061fa:	3b02      	subs	r3, #2
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8006202:	46bd      	mov	sp, r7
 8006204:	bd90      	pop	{r4, r7, pc}
 8006206:	bf00      	nop
 8006208:	0800d508 	.word	0x0800d508
 800620c:	0801c024 	.word	0x0801c024
 8006210:	0800d51c 	.word	0x0800d51c
 8006214:	0800d548 	.word	0x0800d548

08006218 <PN532_SamConfiguration>:
}

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af04      	add	r7, sp, #16
 800621e:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8006220:	4a0d      	ldr	r2, [pc, #52]	@ (8006258 <PN532_SamConfiguration+0x40>)
 8006222:	f107 030c 	add.w	r3, r7, #12
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	4611      	mov	r1, r2
 800622a:	8019      	strh	r1, [r3, #0]
 800622c:	3302      	adds	r3, #2
 800622e:	0c12      	lsrs	r2, r2, #16
 8006230:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8006232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	2303      	movs	r3, #3
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	f107 030c 	add.w	r3, r7, #12
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	2300      	movs	r3, #0
 8006244:	2200      	movs	r2, #0
 8006246:	2114      	movs	r1, #20
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff febf 	bl	8005fcc <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	0800d58c 	.word	0x0800d58c

0800625c <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b090      	sub	sp, #64	@ 0x40
 8006260:	af04      	add	r7, sp, #16
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 800626c:	2301      	movs	r3, #1
 800626e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8006278:	f107 0210 	add.w	r2, r7, #16
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	9302      	str	r3, [sp, #8]
 8006280:	2302      	movs	r3, #2
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	2313      	movs	r3, #19
 800628c:	214a      	movs	r1, #74	@ 0x4a
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fe9c 	bl	8005fcc <PN532_CallFunction>
 8006294:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8006296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	da02      	bge.n	80062a2 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 800629c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062a0:	e02e      	b.n	8006300 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 80062a2:	7c3b      	ldrb	r3, [r7, #16]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d006      	beq.n	80062b6 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	4816      	ldr	r0, [pc, #88]	@ (8006308 <PN532_ReadPassiveTarget+0xac>)
 80062ae:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80062b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062b4:	e024      	b.n	8006300 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 80062b6:	7d7b      	ldrb	r3, [r7, #21]
 80062b8:	2b07      	cmp	r3, #7
 80062ba:	d906      	bls.n	80062ca <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	4812      	ldr	r0, [pc, #72]	@ (800630c <PN532_ReadPassiveTarget+0xb0>)
 80062c2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80062c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062c8:	e01a      	b.n	8006300 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 80062ca:	2300      	movs	r3, #0
 80062cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80062d0:	e010      	b.n	80062f4 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 80062d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062d6:	1d9a      	adds	r2, r3, #6
 80062d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	440b      	add	r3, r1
 80062e0:	3230      	adds	r2, #48	@ 0x30
 80062e2:	443a      	add	r2, r7
 80062e4:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80062e8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 80062ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062ee:	3301      	adds	r3, #1
 80062f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80062f4:	7d7b      	ldrb	r3, [r7, #21]
 80062f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d3e9      	bcc.n	80062d2 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 80062fe:	7d7b      	ldrb	r3, [r7, #21]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3730      	adds	r7, #48	@ 0x30
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	0800d590 	.word	0x0800d590
 800630c:	0800d5b0 	.word	0x0800d5b0

08006310 <PN532_Reset>:

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006316:	1d3b      	adds	r3, r7, #4
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	605a      	str	r2, [r3, #4]
 800631e:	609a      	str	r2, [r3, #8]
 8006320:	60da      	str	r2, [r3, #12]
 8006322:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PN_RST_Pin;
 8006324:	2308      	movs	r3, #8
 8006326:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006328:	2301      	movs	r3, #1
 800632a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006330:	2300      	movs	r3, #0
 8006332:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PN_RST_GPIO_Port, &GPIO_InitStruct);
 8006334:	1d3b      	adds	r3, r7, #4
 8006336:	4619      	mov	r1, r3
 8006338:	4810      	ldr	r0, [pc, #64]	@ (800637c <PN532_Reset+0x6c>)
 800633a:	f000 fdc9 	bl	8006ed0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(PN_RST_GPIO_Port, PN_RST_Pin, 1);
 800633e:	2201      	movs	r2, #1
 8006340:	2108      	movs	r1, #8
 8006342:	480e      	ldr	r0, [pc, #56]	@ (800637c <PN532_Reset+0x6c>)
 8006344:	f001 f87e 	bl	8007444 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8006348:	2064      	movs	r0, #100	@ 0x64
 800634a:	f000 f99b 	bl	8006684 <HAL_Delay>
    HAL_GPIO_WritePin(PN_RST_GPIO_Port, PN_RST_Pin, 0);
 800634e:	2200      	movs	r2, #0
 8006350:	2108      	movs	r1, #8
 8006352:	480a      	ldr	r0, [pc, #40]	@ (800637c <PN532_Reset+0x6c>)
 8006354:	f001 f876 	bl	8007444 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8006358:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800635c:	f000 f992 	bl	8006684 <HAL_Delay>
    HAL_GPIO_WritePin(PN_RST_GPIO_Port, PN_RST_Pin, 1);
 8006360:	2201      	movs	r2, #1
 8006362:	2108      	movs	r1, #8
 8006364:	4805      	ldr	r0, [pc, #20]	@ (800637c <PN532_Reset+0x6c>)
 8006366:	f001 f86d 	bl	8007444 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800636a:	2064      	movs	r0, #100	@ 0x64
 800636c:	f000 f98a 	bl	8006684 <HAL_Delay>
    return PN532_STATUS_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	58020000 	.word	0x58020000

08006380 <PN532_Log>:

void PN532_Log(const char *log)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4803      	ldr	r0, [pc, #12]	@ (8006398 <PN532_Log+0x18>)
 800638c:	f005 ff9a 	bl	800c2c4 <iprintf>
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	0800d5d8 	.word	0x0800d5d8

0800639c <i2c_read>:
 **************************************************************************/
/**************************************************************************
 * I2C
 **************************************************************************/
void i2c_read(uint8_t *data, uint16_t count)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c4, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 80063a8:	887b      	ldrh	r3, [r7, #2]
 80063aa:	220a      	movs	r2, #10
 80063ac:	9200      	str	r2, [sp, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	2148      	movs	r1, #72	@ 0x48
 80063b2:	4803      	ldr	r0, [pc, #12]	@ (80063c0 <i2c_read+0x24>)
 80063b4:	f001 fa28 	bl	8007808 <HAL_I2C_Master_Receive>
}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	240000fc 	.word	0x240000fc

080063c4 <i2c_write>:

void i2c_write(uint8_t *data, uint16_t count)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c4, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 80063d0:	887b      	ldrh	r3, [r7, #2]
 80063d2:	220a      	movs	r2, #10
 80063d4:	9200      	str	r2, [sp, #0]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	2148      	movs	r1, #72	@ 0x48
 80063da:	4803      	ldr	r0, [pc, #12]	@ (80063e8 <i2c_write+0x24>)
 80063dc:	f001 f920 	bl	8007620 <HAL_I2C_Master_Transmit>
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	240000fc 	.word	0x240000fc

080063ec <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t *data, uint16_t count)
{
 80063ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063f0:	b087      	sub	sp, #28
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	807b      	strh	r3, [r7, #2]
 80063fa:	466b      	mov	r3, sp
 80063fc:	461e      	mov	r6, r3
    uint8_t status[] = {0x00};
 80063fe:	2300      	movs	r3, #0
 8006400:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 8006402:	887b      	ldrh	r3, [r7, #2]
 8006404:	1c59      	adds	r1, r3, #1
 8006406:	1e4b      	subs	r3, r1, #1
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	460a      	mov	r2, r1
 800640c:	2300      	movs	r3, #0
 800640e:	4690      	mov	r8, r2
 8006410:	4699      	mov	r9, r3
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800641e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006426:	460a      	mov	r2, r1
 8006428:	2300      	movs	r3, #0
 800642a:	4614      	mov	r4, r2
 800642c:	461d      	mov	r5, r3
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	00eb      	lsls	r3, r5, #3
 8006438:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800643c:	00e2      	lsls	r2, r4, #3
 800643e:	460b      	mov	r3, r1
 8006440:	3307      	adds	r3, #7
 8006442:	08db      	lsrs	r3, r3, #3
 8006444:	00db      	lsls	r3, r3, #3
 8006446:	ebad 0d03 	sub.w	sp, sp, r3
 800644a:	466b      	mov	r3, sp
 800644c:	3300      	adds	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 8006450:	f107 0308 	add.w	r3, r7, #8
 8006454:	2101      	movs	r1, #1
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff ffa0 	bl	800639c <i2c_read>
    if (status[0] != PN532_I2C_READY)
 800645c:	7a3b      	ldrb	r3, [r7, #8]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d002      	beq.n	8006468 <PN532_I2C_ReadData+0x7c>
    {
        return PN532_STATUS_ERROR;
 8006462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006466:	e01a      	b.n	800649e <PN532_I2C_ReadData+0xb2>
    }
    i2c_read(frame, count + 1);
 8006468:	887b      	ldrh	r3, [r7, #2]
 800646a:	3301      	adds	r3, #1
 800646c:	b29b      	uxth	r3, r3
 800646e:	4619      	mov	r1, r3
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f7ff ff93 	bl	800639c <i2c_read>
    for (uint8_t i = 0; i < count; i++)
 8006476:	2300      	movs	r3, #0
 8006478:	75fb      	strb	r3, [r7, #23]
 800647a:	e00a      	b.n	8006492 <PN532_I2C_ReadData+0xa6>
    {
        data[i] = frame[i + 1];
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	7dfb      	ldrb	r3, [r7, #23]
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	440b      	add	r3, r1
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	5c8a      	ldrb	r2, [r1, r2]
 800648a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++)
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	3301      	adds	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	b29b      	uxth	r3, r3
 8006496:	887a      	ldrh	r2, [r7, #2]
 8006498:	429a      	cmp	r2, r3
 800649a:	d8ef      	bhi.n	800647c <PN532_I2C_ReadData+0x90>
    }
    return PN532_STATUS_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	46b5      	mov	sp, r6
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080064aa <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 80064b6:	887b      	ldrh	r3, [r7, #2]
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff ff82 	bl	80063c4 <i2c_write>
    return PN532_STATUS_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 80064d2:	2300      	movs	r3, #0
 80064d4:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 80064d6:	f000 f8c9 	bl	800666c <HAL_GetTick>
 80064da:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout)
 80064dc:	e00d      	b.n	80064fa <PN532_I2C_WaitReady+0x30>
    {
        i2c_read(status, sizeof(status));
 80064de:	f107 0308 	add.w	r3, r7, #8
 80064e2:	2101      	movs	r1, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff ff59 	bl	800639c <i2c_read>
        if (status[0] == PN532_I2C_READY)
 80064ea:	7a3b      	ldrb	r3, [r7, #8]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <PN532_I2C_WaitReady+0x2a>
        {
            return true;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e00b      	b.n	800650c <PN532_I2C_WaitReady+0x42>
        }
        else
        {
            HAL_Delay(5);
 80064f4:	2005      	movs	r0, #5
 80064f6:	f000 f8c5 	bl	8006684 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout)
 80064fa:	f000 f8b7 	bl	800666c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d8e9      	bhi.n	80064de <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
    return PN532_STATUS_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <PN532_I2C_Init>:

void PN532_I2C_Init(PN532 *pn532)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset = PN532_Reset;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a0c      	ldr	r2, [pc, #48]	@ (8006560 <PN532_I2C_Init+0x3c>)
 8006530:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a0b      	ldr	r2, [pc, #44]	@ (8006564 <PN532_I2C_Init+0x40>)
 8006536:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a0b      	ldr	r2, [pc, #44]	@ (8006568 <PN532_I2C_Init+0x44>)
 800653c:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a0a      	ldr	r2, [pc, #40]	@ (800656c <PN532_I2C_Init+0x48>)
 8006542:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a0a      	ldr	r2, [pc, #40]	@ (8006570 <PN532_I2C_Init+0x4c>)
 8006548:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a09      	ldr	r2, [pc, #36]	@ (8006574 <PN532_I2C_Init+0x50>)
 800654e:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	4798      	blx	r3
}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	08006311 	.word	0x08006311
 8006564:	080063ed 	.word	0x080063ed
 8006568:	080064ab 	.word	0x080064ab
 800656c:	080064cb 	.word	0x080064cb
 8006570:	08006515 	.word	0x08006515
 8006574:	08006381 	.word	0x08006381

08006578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006578:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80065b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800657c:	f7fd fbfc 	bl	8003d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006580:	480c      	ldr	r0, [pc, #48]	@ (80065b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006582:	490d      	ldr	r1, [pc, #52]	@ (80065b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006584:	4a0d      	ldr	r2, [pc, #52]	@ (80065bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006588:	e002      	b.n	8006590 <LoopCopyDataInit>

0800658a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800658a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800658c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800658e:	3304      	adds	r3, #4

08006590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006594:	d3f9      	bcc.n	800658a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006596:	4a0a      	ldr	r2, [pc, #40]	@ (80065c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006598:	4c0a      	ldr	r4, [pc, #40]	@ (80065c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800659a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800659c:	e001      	b.n	80065a2 <LoopFillZerobss>

0800659e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800659e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80065a0:	3204      	adds	r2, #4

080065a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80065a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80065a4:	d3fb      	bcc.n	800659e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80065a6:	f005 ff57 	bl	800c458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065aa:	f7fa fb55 	bl	8000c58 <main>
  bx  lr
 80065ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80065b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80065b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80065b8:	240000d0 	.word	0x240000d0
  ldr r2, =_sidata
 80065bc:	0801c070 	.word	0x0801c070
  ldr r2, =_sbss
 80065c0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80065c4:	240010bc 	.word	0x240010bc

080065c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065c8:	e7fe      	b.n	80065c8 <ADC3_IRQHandler>
	...

080065cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065d2:	2003      	movs	r0, #3
 80065d4:	f000 f943 	bl	800685e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065d8:	f003 fa5e 	bl	8009a98 <HAL_RCC_GetSysClockFreq>
 80065dc:	4602      	mov	r2, r0
 80065de:	4b15      	ldr	r3, [pc, #84]	@ (8006634 <HAL_Init+0x68>)
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	4913      	ldr	r1, [pc, #76]	@ (8006638 <HAL_Init+0x6c>)
 80065ea:	5ccb      	ldrb	r3, [r1, r3]
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	fa22 f303 	lsr.w	r3, r2, r3
 80065f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006634 <HAL_Init+0x68>)
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006638 <HAL_Init+0x6c>)
 8006600:	5cd3      	ldrb	r3, [r2, r3]
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	fa22 f303 	lsr.w	r3, r2, r3
 800660c:	4a0b      	ldr	r2, [pc, #44]	@ (800663c <HAL_Init+0x70>)
 800660e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006610:	4a0b      	ldr	r2, [pc, #44]	@ (8006640 <HAL_Init+0x74>)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006616:	200f      	movs	r0, #15
 8006618:	f005 fc06 	bl	800be28 <HAL_InitTick>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e002      	b.n	800662c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006626:	f7fd fab1 	bl	8003b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	58024400 	.word	0x58024400
 8006638:	0800db0c 	.word	0x0800db0c
 800663c:	24000044 	.word	0x24000044
 8006640:	24000040 	.word	0x24000040

08006644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006648:	4b06      	ldr	r3, [pc, #24]	@ (8006664 <HAL_IncTick+0x20>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	4b06      	ldr	r3, [pc, #24]	@ (8006668 <HAL_IncTick+0x24>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4413      	add	r3, r2
 8006654:	4a04      	ldr	r2, [pc, #16]	@ (8006668 <HAL_IncTick+0x24>)
 8006656:	6013      	str	r3, [r2, #0]
}
 8006658:	bf00      	nop
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	24000070 	.word	0x24000070
 8006668:	24000f20 	.word	0x24000f20

0800666c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
  return uwTick;
 8006670:	4b03      	ldr	r3, [pc, #12]	@ (8006680 <HAL_GetTick+0x14>)
 8006672:	681b      	ldr	r3, [r3, #0]
}
 8006674:	4618      	mov	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	24000f20 	.word	0x24000f20

08006684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800668c:	f7ff ffee 	bl	800666c <HAL_GetTick>
 8006690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800669c:	d005      	beq.n	80066aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800669e:	4b0a      	ldr	r3, [pc, #40]	@ (80066c8 <HAL_Delay+0x44>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80066aa:	bf00      	nop
 80066ac:	f7ff ffde 	bl	800666c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d8f7      	bhi.n	80066ac <HAL_Delay+0x28>
  {
  }
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	24000070 	.word	0x24000070

080066cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80066d0:	4b03      	ldr	r3, [pc, #12]	@ (80066e0 <HAL_GetREVID+0x14>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	0c1b      	lsrs	r3, r3, #16
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	5c001000 	.word	0x5c001000

080066e4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80066e8:	4b05      	ldr	r3, [pc, #20]	@ (8006700 <HAL_EnableCompensationCell+0x1c>)
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	4a04      	ldr	r2, [pc, #16]	@ (8006700 <HAL_EnableCompensationCell+0x1c>)
 80066ee:	f043 0301 	orr.w	r3, r3, #1
 80066f2:	6213      	str	r3, [r2, #32]
}
 80066f4:	bf00      	nop
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	58000400 	.word	0x58000400

08006704 <__NVIC_SetPriorityGrouping>:
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006714:	4b0b      	ldr	r3, [pc, #44]	@ (8006744 <__NVIC_SetPriorityGrouping+0x40>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006720:	4013      	ands	r3, r2
 8006722:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800672c:	4b06      	ldr	r3, [pc, #24]	@ (8006748 <__NVIC_SetPriorityGrouping+0x44>)
 800672e:	4313      	orrs	r3, r2
 8006730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006732:	4a04      	ldr	r2, [pc, #16]	@ (8006744 <__NVIC_SetPriorityGrouping+0x40>)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	60d3      	str	r3, [r2, #12]
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	e000ed00 	.word	0xe000ed00
 8006748:	05fa0000 	.word	0x05fa0000

0800674c <__NVIC_GetPriorityGrouping>:
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006750:	4b04      	ldr	r3, [pc, #16]	@ (8006764 <__NVIC_GetPriorityGrouping+0x18>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	0a1b      	lsrs	r3, r3, #8
 8006756:	f003 0307 	and.w	r3, r3, #7
}
 800675a:	4618      	mov	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	e000ed00 	.word	0xe000ed00

08006768 <__NVIC_EnableIRQ>:
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006776:	2b00      	cmp	r3, #0
 8006778:	db0b      	blt.n	8006792 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	f003 021f 	and.w	r2, r3, #31
 8006780:	4907      	ldr	r1, [pc, #28]	@ (80067a0 <__NVIC_EnableIRQ+0x38>)
 8006782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	2001      	movs	r0, #1
 800678a:	fa00 f202 	lsl.w	r2, r0, r2
 800678e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	e000e100 	.word	0xe000e100

080067a4 <__NVIC_SetPriority>:
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	6039      	str	r1, [r7, #0]
 80067ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	db0a      	blt.n	80067ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	490c      	ldr	r1, [pc, #48]	@ (80067f0 <__NVIC_SetPriority+0x4c>)
 80067be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067c2:	0112      	lsls	r2, r2, #4
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	440b      	add	r3, r1
 80067c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80067cc:	e00a      	b.n	80067e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	4908      	ldr	r1, [pc, #32]	@ (80067f4 <__NVIC_SetPriority+0x50>)
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	3b04      	subs	r3, #4
 80067dc:	0112      	lsls	r2, r2, #4
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	440b      	add	r3, r1
 80067e2:	761a      	strb	r2, [r3, #24]
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	e000e100 	.word	0xe000e100
 80067f4:	e000ed00 	.word	0xe000ed00

080067f8 <NVIC_EncodePriority>:
{
 80067f8:	b480      	push	{r7}
 80067fa:	b089      	sub	sp, #36	@ 0x24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f1c3 0307 	rsb	r3, r3, #7
 8006812:	2b04      	cmp	r3, #4
 8006814:	bf28      	it	cs
 8006816:	2304      	movcs	r3, #4
 8006818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3304      	adds	r3, #4
 800681e:	2b06      	cmp	r3, #6
 8006820:	d902      	bls.n	8006828 <NVIC_EncodePriority+0x30>
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	3b03      	subs	r3, #3
 8006826:	e000      	b.n	800682a <NVIC_EncodePriority+0x32>
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800682c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	43da      	mvns	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	401a      	ands	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006840:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	fa01 f303 	lsl.w	r3, r1, r3
 800684a:	43d9      	mvns	r1, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006850:	4313      	orrs	r3, r2
}
 8006852:	4618      	mov	r0, r3
 8006854:	3724      	adds	r7, #36	@ 0x24
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff ff4c 	bl	8006704 <__NVIC_SetPriorityGrouping>
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006882:	f7ff ff63 	bl	800674c <__NVIC_GetPriorityGrouping>
 8006886:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	6978      	ldr	r0, [r7, #20]
 800688e:	f7ff ffb3 	bl	80067f8 <NVIC_EncodePriority>
 8006892:	4602      	mov	r2, r0
 8006894:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006898:	4611      	mov	r1, r2
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff ff82 	bl	80067a4 <__NVIC_SetPriority>
}
 80068a0:	bf00      	nop
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff ff56 	bl	8006768 <__NVIC_EnableIRQ>
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e04f      	b.n	8006976 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f84e 	bl	800698c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b20      	ldr	r3, [pc, #128]	@ (8006980 <HAL_DMA2D_Init+0xbc>)
 8006900:	4013      	ands	r3, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6851      	ldr	r1, [r2, #4]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	69d2      	ldr	r2, [r2, #28]
 800690a:	4311      	orrs	r1, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	430b      	orrs	r3, r1
 8006912:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800691a:	4b1a      	ldr	r3, [pc, #104]	@ (8006984 <HAL_DMA2D_Init+0xc0>)
 800691c:	4013      	ands	r3, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6891      	ldr	r1, [r2, #8]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6992      	ldr	r2, [r2, #24]
 8006926:	4311      	orrs	r1, r2
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	430b      	orrs	r3, r1
 800692e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006936:	4b14      	ldr	r3, [pc, #80]	@ (8006988 <HAL_DMA2D_Init+0xc4>)
 8006938:	4013      	ands	r3, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68d1      	ldr	r1, [r2, #12]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	430b      	orrs	r3, r1
 8006944:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	051a      	lsls	r2, r3, #20
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	055b      	lsls	r3, r3, #21
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	fff8ffbf 	.word	0xfff8ffbf
 8006984:	fffffef8 	.word	0xfffffef8
 8006988:	ffff0000 	.word	0xffff0000

0800698c <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_DMA2D_Start+0x1c>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e018      	b.n	80069ee <HAL_DMA2D_Start+0x4e>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 f9a4 	bl	8006d24 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d056      	beq.n	8006ac0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a12:	f7ff fe2b 	bl	800666c <HAL_GetTick>
 8006a16:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006a18:	e04b      	b.n	8006ab2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d023      	beq.n	8006a74 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a3a:	f043 0202 	orr.w	r2, r3, #2
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a50:	f043 0201 	orr.w	r2, r3, #1
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2221      	movs	r2, #33	@ 0x21
 8006a5e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2204      	movs	r2, #4
 8006a64:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0a5      	b.n	8006bc0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a7a:	d01a      	beq.n	8006ab2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a7c:	f7ff fdf6 	bl	800666c <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d302      	bcc.n	8006a92 <HAL_DMA2D_PollForTransfer+0x9c>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10f      	bne.n	8006ab2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a96:	f043 0220 	orr.w	r2, r3, #32
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2203      	movs	r2, #3
 8006aa2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e086      	b.n	8006bc0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0ac      	beq.n	8006a1a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d061      	beq.n	8006ba6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ae2:	f7ff fdc3 	bl	800666c <HAL_GetTick>
 8006ae6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006ae8:	e056      	b.n	8006b98 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d02e      	beq.n	8006b5a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b0a:	f043 0204 	orr.w	r2, r3, #4
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b20:	f043 0202 	orr.w	r2, r3, #2
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b36:	f043 0201 	orr.w	r2, r3, #1
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2229      	movs	r2, #41	@ 0x29
 8006b44:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2204      	movs	r2, #4
 8006b4a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e032      	b.n	8006bc0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b60:	d01a      	beq.n	8006b98 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b62:	f7ff fd83 	bl	800666c <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d302      	bcc.n	8006b78 <HAL_DMA2D_PollForTransfer+0x182>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10f      	bne.n	8006b98 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2203      	movs	r2, #3
 8006b88:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e013      	b.n	8006bc0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f003 0310 	and.w	r3, r3, #16
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0a1      	beq.n	8006aea <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2212      	movs	r2, #18
 8006bac:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d101      	bne.n	8006bec <HAL_DMA2D_ConfigLayer+0x24>
 8006be8:	2302      	movs	r3, #2
 8006bea:	e092      	b.n	8006d12 <HAL_DMA2D_ConfigLayer+0x14a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	3328      	adds	r3, #40	@ 0x28
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	041b      	lsls	r3, r3, #16
 8006c18:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c20:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8006d20 <HAL_DMA2D_ConfigLayer+0x158>)
 8006c2e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b0a      	cmp	r3, #10
 8006c36:	d003      	beq.n	8006c40 <HAL_DMA2D_ConfigLayer+0x78>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b09      	cmp	r3, #9
 8006c3e:	d107      	bne.n	8006c50 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	e005      	b.n	8006c5c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d120      	bne.n	8006ca4 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	ea02 0103 	and.w	r1, r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b0a      	cmp	r3, #10
 8006c8a:	d003      	beq.n	8006c94 <HAL_DMA2D_ConfigLayer+0xcc>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b09      	cmp	r3, #9
 8006c92:	d135      	bne.n	8006d00 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006ca0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ca2:	e02d      	b.n	8006d00 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2b0b      	cmp	r3, #11
 8006caa:	d109      	bne.n	8006cc0 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	049b      	lsls	r3, r3, #18
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006cbe:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69da      	ldr	r2, [r3, #28]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	ea02 0103 	and.w	r1, r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	6812      	ldr	r2, [r2, #0]
 8006ce0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b0a      	cmp	r3, #10
 8006ce8:	d003      	beq.n	8006cf2 <HAL_DMA2D_ConfigLayer+0x12a>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b09      	cmp	r3, #9
 8006cf0:	d106      	bne.n	8006d00 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006cfe:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	ff33000f 	.word	0xff33000f

08006d24 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b08b      	sub	sp, #44	@ 0x2c
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d38:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	041a      	lsls	r2, r3, #16
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	431a      	orrs	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d5c:	d174      	bne.n	8006e48 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006d64:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d6c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006d74:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d108      	bne.n	8006d96 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d94:	e053      	b.n	8006e3e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d106      	bne.n	8006dac <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006daa:	e048      	b.n	8006e3e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d111      	bne.n	8006dd8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	0cdb      	lsrs	r3, r3, #19
 8006db8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	0a9b      	lsrs	r3, r3, #10
 8006dbe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	08db      	lsrs	r3, r3, #3
 8006dc4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	02db      	lsls	r3, r3, #11
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dd6:	e032      	b.n	8006e3e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d117      	bne.n	8006e10 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	0fdb      	lsrs	r3, r3, #31
 8006de4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	0cdb      	lsrs	r3, r3, #19
 8006dea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	0adb      	lsrs	r3, r3, #11
 8006df0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	08db      	lsrs	r3, r3, #3
 8006df6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	029b      	lsls	r3, r3, #10
 8006e00:	431a      	orrs	r2, r3
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	03db      	lsls	r3, r3, #15
 8006e06:	4313      	orrs	r3, r2
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e0e:	e016      	b.n	8006e3e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	0f1b      	lsrs	r3, r3, #28
 8006e14:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	0d1b      	lsrs	r3, r3, #20
 8006e1a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	0b1b      	lsrs	r3, r3, #12
 8006e20:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	091b      	lsrs	r3, r3, #4
 8006e26:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	011a      	lsls	r2, r3, #4
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	431a      	orrs	r2, r3
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	031b      	lsls	r3, r3, #12
 8006e36:	4313      	orrs	r3, r2
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e44:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006e46:	e00d      	b.n	8006e64 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e50:	d104      	bne.n	8006e5c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	615a      	str	r2, [r3, #20]
}
 8006e5a:	e003      	b.n	8006e64 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	60da      	str	r2, [r3, #12]
}
 8006e64:	bf00      	nop
 8006e66:	372c      	adds	r7, #44	@ 0x2c
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	011a      	lsls	r2, r3, #4
 8006e98:	4b0c      	ldr	r3, [pc, #48]	@ (8006ecc <HAL_EXTI_IRQHandler+0x5c>)
 8006e9a:	4413      	add	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	4798      	blx	r3
    }
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	58000088 	.word	0x58000088

08006ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b089      	sub	sp, #36	@ 0x24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006ede:	4b89      	ldr	r3, [pc, #548]	@ (8007104 <HAL_GPIO_Init+0x234>)
 8006ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ee2:	e194      	b.n	800720e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	2101      	movs	r1, #1
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 8186 	beq.w	8007208 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d005      	beq.n	8006f14 <HAL_GPIO_Init+0x44>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f003 0303 	and.w	r3, r3, #3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d130      	bne.n	8006f76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	2203      	movs	r2, #3
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	43db      	mvns	r3, r3
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43db      	mvns	r3, r3
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	4013      	ands	r3, r2
 8006f58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	091b      	lsrs	r3, r3, #4
 8006f60:	f003 0201 	and.w	r2, r3, #1
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d017      	beq.n	8006fb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	43db      	mvns	r3, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4013      	ands	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d123      	bne.n	8007006 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	08da      	lsrs	r2, r3, #3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3208      	adds	r2, #8
 8006fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	220f      	movs	r2, #15
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	691a      	ldr	r2, [r3, #16]
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	f003 0307 	and.w	r3, r3, #7
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	08da      	lsrs	r2, r3, #3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3208      	adds	r2, #8
 8007000:	69b9      	ldr	r1, [r7, #24]
 8007002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	2203      	movs	r2, #3
 8007012:	fa02 f303 	lsl.w	r3, r2, r3
 8007016:	43db      	mvns	r3, r3
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	4013      	ands	r3, r2
 800701c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f003 0203 	and.w	r2, r3, #3
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	fa02 f303 	lsl.w	r3, r2, r3
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	4313      	orrs	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80e0 	beq.w	8007208 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007048:	4b2f      	ldr	r3, [pc, #188]	@ (8007108 <HAL_GPIO_Init+0x238>)
 800704a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800704e:	4a2e      	ldr	r2, [pc, #184]	@ (8007108 <HAL_GPIO_Init+0x238>)
 8007050:	f043 0302 	orr.w	r3, r3, #2
 8007054:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007058:	4b2b      	ldr	r3, [pc, #172]	@ (8007108 <HAL_GPIO_Init+0x238>)
 800705a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007066:	4a29      	ldr	r2, [pc, #164]	@ (800710c <HAL_GPIO_Init+0x23c>)
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	089b      	lsrs	r3, r3, #2
 800706c:	3302      	adds	r3, #2
 800706e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	220f      	movs	r2, #15
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	43db      	mvns	r3, r3
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	4013      	ands	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a20      	ldr	r2, [pc, #128]	@ (8007110 <HAL_GPIO_Init+0x240>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d052      	beq.n	8007138 <HAL_GPIO_Init+0x268>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a1f      	ldr	r2, [pc, #124]	@ (8007114 <HAL_GPIO_Init+0x244>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d031      	beq.n	80070fe <HAL_GPIO_Init+0x22e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a1e      	ldr	r2, [pc, #120]	@ (8007118 <HAL_GPIO_Init+0x248>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d02b      	beq.n	80070fa <HAL_GPIO_Init+0x22a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a1d      	ldr	r2, [pc, #116]	@ (800711c <HAL_GPIO_Init+0x24c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d025      	beq.n	80070f6 <HAL_GPIO_Init+0x226>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007120 <HAL_GPIO_Init+0x250>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01f      	beq.n	80070f2 <HAL_GPIO_Init+0x222>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007124 <HAL_GPIO_Init+0x254>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d019      	beq.n	80070ee <HAL_GPIO_Init+0x21e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a1a      	ldr	r2, [pc, #104]	@ (8007128 <HAL_GPIO_Init+0x258>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <HAL_GPIO_Init+0x21a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a19      	ldr	r2, [pc, #100]	@ (800712c <HAL_GPIO_Init+0x25c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00d      	beq.n	80070e6 <HAL_GPIO_Init+0x216>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a18      	ldr	r2, [pc, #96]	@ (8007130 <HAL_GPIO_Init+0x260>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d007      	beq.n	80070e2 <HAL_GPIO_Init+0x212>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a17      	ldr	r2, [pc, #92]	@ (8007134 <HAL_GPIO_Init+0x264>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d101      	bne.n	80070de <HAL_GPIO_Init+0x20e>
 80070da:	2309      	movs	r3, #9
 80070dc:	e02d      	b.n	800713a <HAL_GPIO_Init+0x26a>
 80070de:	230a      	movs	r3, #10
 80070e0:	e02b      	b.n	800713a <HAL_GPIO_Init+0x26a>
 80070e2:	2308      	movs	r3, #8
 80070e4:	e029      	b.n	800713a <HAL_GPIO_Init+0x26a>
 80070e6:	2307      	movs	r3, #7
 80070e8:	e027      	b.n	800713a <HAL_GPIO_Init+0x26a>
 80070ea:	2306      	movs	r3, #6
 80070ec:	e025      	b.n	800713a <HAL_GPIO_Init+0x26a>
 80070ee:	2305      	movs	r3, #5
 80070f0:	e023      	b.n	800713a <HAL_GPIO_Init+0x26a>
 80070f2:	2304      	movs	r3, #4
 80070f4:	e021      	b.n	800713a <HAL_GPIO_Init+0x26a>
 80070f6:	2303      	movs	r3, #3
 80070f8:	e01f      	b.n	800713a <HAL_GPIO_Init+0x26a>
 80070fa:	2302      	movs	r3, #2
 80070fc:	e01d      	b.n	800713a <HAL_GPIO_Init+0x26a>
 80070fe:	2301      	movs	r3, #1
 8007100:	e01b      	b.n	800713a <HAL_GPIO_Init+0x26a>
 8007102:	bf00      	nop
 8007104:	58000080 	.word	0x58000080
 8007108:	58024400 	.word	0x58024400
 800710c:	58000400 	.word	0x58000400
 8007110:	58020000 	.word	0x58020000
 8007114:	58020400 	.word	0x58020400
 8007118:	58020800 	.word	0x58020800
 800711c:	58020c00 	.word	0x58020c00
 8007120:	58021000 	.word	0x58021000
 8007124:	58021400 	.word	0x58021400
 8007128:	58021800 	.word	0x58021800
 800712c:	58021c00 	.word	0x58021c00
 8007130:	58022000 	.word	0x58022000
 8007134:	58022400 	.word	0x58022400
 8007138:	2300      	movs	r3, #0
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	f002 0203 	and.w	r2, r2, #3
 8007140:	0092      	lsls	r2, r2, #2
 8007142:	4093      	lsls	r3, r2
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	4313      	orrs	r3, r2
 8007148:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800714a:	4938      	ldr	r1, [pc, #224]	@ (800722c <HAL_GPIO_Init+0x35c>)
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	089b      	lsrs	r3, r3, #2
 8007150:	3302      	adds	r3, #2
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	43db      	mvns	r3, r3
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	4013      	ands	r3, r2
 8007168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800717e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	43db      	mvns	r3, r3
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	4013      	ands	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80071ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	43db      	mvns	r3, r3
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	4013      	ands	r3, r2
 80071c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	43db      	mvns	r3, r3
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	4013      	ands	r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	3301      	adds	r3, #1
 800720c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	f47f ae63 	bne.w	8006ee4 <HAL_GPIO_Init+0x14>
  }
}
 800721e:	bf00      	nop
 8007220:	bf00      	nop
 8007222:	3724      	adds	r7, #36	@ 0x24
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	58000400 	.word	0x58000400

08007230 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800723a:	2300      	movs	r3, #0
 800723c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800723e:	4b75      	ldr	r3, [pc, #468]	@ (8007414 <HAL_GPIO_DeInit+0x1e4>)
 8007240:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007242:	e0d9      	b.n	80073f8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007244:	2201      	movs	r2, #1
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	fa02 f303 	lsl.w	r3, r2, r3
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	4013      	ands	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80cc 	beq.w	80073f2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800725a:	4a6f      	ldr	r2, [pc, #444]	@ (8007418 <HAL_GPIO_DeInit+0x1e8>)
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	089b      	lsrs	r3, r3, #2
 8007260:	3302      	adds	r3, #2
 8007262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007266:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	220f      	movs	r2, #15
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	4013      	ands	r3, r2
 800727a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a67      	ldr	r2, [pc, #412]	@ (800741c <HAL_GPIO_DeInit+0x1ec>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d037      	beq.n	80072f4 <HAL_GPIO_DeInit+0xc4>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a66      	ldr	r2, [pc, #408]	@ (8007420 <HAL_GPIO_DeInit+0x1f0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d031      	beq.n	80072f0 <HAL_GPIO_DeInit+0xc0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a65      	ldr	r2, [pc, #404]	@ (8007424 <HAL_GPIO_DeInit+0x1f4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d02b      	beq.n	80072ec <HAL_GPIO_DeInit+0xbc>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a64      	ldr	r2, [pc, #400]	@ (8007428 <HAL_GPIO_DeInit+0x1f8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d025      	beq.n	80072e8 <HAL_GPIO_DeInit+0xb8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a63      	ldr	r2, [pc, #396]	@ (800742c <HAL_GPIO_DeInit+0x1fc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d01f      	beq.n	80072e4 <HAL_GPIO_DeInit+0xb4>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a62      	ldr	r2, [pc, #392]	@ (8007430 <HAL_GPIO_DeInit+0x200>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d019      	beq.n	80072e0 <HAL_GPIO_DeInit+0xb0>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a61      	ldr	r2, [pc, #388]	@ (8007434 <HAL_GPIO_DeInit+0x204>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d013      	beq.n	80072dc <HAL_GPIO_DeInit+0xac>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a60      	ldr	r2, [pc, #384]	@ (8007438 <HAL_GPIO_DeInit+0x208>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00d      	beq.n	80072d8 <HAL_GPIO_DeInit+0xa8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a5f      	ldr	r2, [pc, #380]	@ (800743c <HAL_GPIO_DeInit+0x20c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d007      	beq.n	80072d4 <HAL_GPIO_DeInit+0xa4>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a5e      	ldr	r2, [pc, #376]	@ (8007440 <HAL_GPIO_DeInit+0x210>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d101      	bne.n	80072d0 <HAL_GPIO_DeInit+0xa0>
 80072cc:	2309      	movs	r3, #9
 80072ce:	e012      	b.n	80072f6 <HAL_GPIO_DeInit+0xc6>
 80072d0:	230a      	movs	r3, #10
 80072d2:	e010      	b.n	80072f6 <HAL_GPIO_DeInit+0xc6>
 80072d4:	2308      	movs	r3, #8
 80072d6:	e00e      	b.n	80072f6 <HAL_GPIO_DeInit+0xc6>
 80072d8:	2307      	movs	r3, #7
 80072da:	e00c      	b.n	80072f6 <HAL_GPIO_DeInit+0xc6>
 80072dc:	2306      	movs	r3, #6
 80072de:	e00a      	b.n	80072f6 <HAL_GPIO_DeInit+0xc6>
 80072e0:	2305      	movs	r3, #5
 80072e2:	e008      	b.n	80072f6 <HAL_GPIO_DeInit+0xc6>
 80072e4:	2304      	movs	r3, #4
 80072e6:	e006      	b.n	80072f6 <HAL_GPIO_DeInit+0xc6>
 80072e8:	2303      	movs	r3, #3
 80072ea:	e004      	b.n	80072f6 <HAL_GPIO_DeInit+0xc6>
 80072ec:	2302      	movs	r3, #2
 80072ee:	e002      	b.n	80072f6 <HAL_GPIO_DeInit+0xc6>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <HAL_GPIO_DeInit+0xc6>
 80072f4:	2300      	movs	r3, #0
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	f002 0203 	and.w	r2, r2, #3
 80072fc:	0092      	lsls	r2, r2, #2
 80072fe:	4093      	lsls	r3, r2
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	429a      	cmp	r2, r3
 8007304:	d136      	bne.n	8007374 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	43db      	mvns	r3, r3
 800730e:	401a      	ands	r2, r3
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	43db      	mvns	r3, r3
 800731c:	401a      	ands	r2, r3
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	43db      	mvns	r3, r3
 800732c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007330:	4013      	ands	r3, r2
 8007332:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	43db      	mvns	r3, r3
 800733e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007342:	4013      	ands	r3, r2
 8007344:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	220f      	movs	r2, #15
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007356:	4a30      	ldr	r2, [pc, #192]	@ (8007418 <HAL_GPIO_DeInit+0x1e8>)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	089b      	lsrs	r3, r3, #2
 800735c:	3302      	adds	r3, #2
 800735e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	43da      	mvns	r2, r3
 8007366:	482c      	ldr	r0, [pc, #176]	@ (8007418 <HAL_GPIO_DeInit+0x1e8>)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	089b      	lsrs	r3, r3, #2
 800736c:	400a      	ands	r2, r1
 800736e:	3302      	adds	r3, #2
 8007370:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	2103      	movs	r1, #3
 800737e:	fa01 f303 	lsl.w	r3, r1, r3
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	08da      	lsrs	r2, r3, #3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3208      	adds	r2, #8
 8007390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	220f      	movs	r2, #15
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	43db      	mvns	r3, r3
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	08d2      	lsrs	r2, r2, #3
 80073a8:	4019      	ands	r1, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3208      	adds	r2, #8
 80073ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	2103      	movs	r1, #3
 80073bc:	fa01 f303 	lsl.w	r3, r1, r3
 80073c0:	43db      	mvns	r3, r3
 80073c2:	401a      	ands	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	2101      	movs	r1, #1
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	fa01 f303 	lsl.w	r3, r1, r3
 80073d4:	43db      	mvns	r3, r3
 80073d6:	401a      	ands	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	2103      	movs	r1, #3
 80073e6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ea:	43db      	mvns	r3, r3
 80073ec:	401a      	ands	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	3301      	adds	r3, #1
 80073f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	f47f af1f 	bne.w	8007244 <HAL_GPIO_DeInit+0x14>
  }
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	58000080 	.word	0x58000080
 8007418:	58000400 	.word	0x58000400
 800741c:	58020000 	.word	0x58020000
 8007420:	58020400 	.word	0x58020400
 8007424:	58020800 	.word	0x58020800
 8007428:	58020c00 	.word	0x58020c00
 800742c:	58021000 	.word	0x58021000
 8007430:	58021400 	.word	0x58021400
 8007434:	58021800 	.word	0x58021800
 8007438:	58021c00 	.word	0x58021c00
 800743c:	58022000 	.word	0x58022000
 8007440:	58022400 	.word	0x58022400

08007444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	807b      	strh	r3, [r7, #2]
 8007450:	4613      	mov	r3, r2
 8007452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007454:	787b      	ldrb	r3, [r7, #1]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800745a:	887a      	ldrh	r2, [r7, #2]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007460:	e003      	b.n	800746a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007462:	887b      	ldrh	r3, [r7, #2]
 8007464:	041a      	lsls	r2, r3, #16
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	619a      	str	r2, [r3, #24]
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
	...

08007478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e07f      	b.n	800758a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8a9 	bl	80075f6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2224      	movs	r2, #36	@ 0x24
 80074a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80074c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d107      	bne.n	80074f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ee:	609a      	str	r2, [r3, #8]
 80074f0:	e006      	b.n	8007500 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80074fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d104      	bne.n	8007512 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007510:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6859      	ldr	r1, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4b1d      	ldr	r3, [pc, #116]	@ (8007594 <HAL_I2C_Init+0x11c>)
 800751e:	430b      	orrs	r3, r1
 8007520:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007530:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69d9      	ldr	r1, [r3, #28]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	02008000 	.word	0x02008000

08007598 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e021      	b.n	80075ee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2224      	movs	r2, #36	@ 0x24
 80075ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0201 	bic.w	r2, r2, #1
 80075c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f821 	bl	800760a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
	...

08007620 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	461a      	mov	r2, r3
 800762c:	460b      	mov	r3, r1
 800762e:	817b      	strh	r3, [r7, #10]
 8007630:	4613      	mov	r3, r2
 8007632:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b20      	cmp	r3, #32
 800763e:	f040 80da 	bne.w	80077f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_I2C_Master_Transmit+0x30>
 800764c:	2302      	movs	r3, #2
 800764e:	e0d3      	b.n	80077f8 <HAL_I2C_Master_Transmit+0x1d8>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007658:	f7ff f808 	bl	800666c <HAL_GetTick>
 800765c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	2319      	movs	r3, #25
 8007664:	2201      	movs	r2, #1
 8007666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fcd6 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e0be      	b.n	80077f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2221      	movs	r2, #33	@ 0x21
 800767e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2210      	movs	r2, #16
 8007686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	893a      	ldrh	r2, [r7, #8]
 800769a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2bff      	cmp	r3, #255	@ 0xff
 80076aa:	d90e      	bls.n	80076ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	22ff      	movs	r2, #255	@ 0xff
 80076b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	8979      	ldrh	r1, [r7, #10]
 80076ba:	4b51      	ldr	r3, [pc, #324]	@ (8007800 <HAL_I2C_Master_Transmit+0x1e0>)
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 fee6 	bl	8008494 <I2C_TransferConfig>
 80076c8:	e06c      	b.n	80077a4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	8979      	ldrh	r1, [r7, #10]
 80076dc:	4b48      	ldr	r3, [pc, #288]	@ (8007800 <HAL_I2C_Master_Transmit+0x1e0>)
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fed5 	bl	8008494 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80076ea:	e05b      	b.n	80077a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	6a39      	ldr	r1, [r7, #32]
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fce2 	bl	80080ba <I2C_WaitOnTXISFlagUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e07b      	b.n	80077f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007734:	b29b      	uxth	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d034      	beq.n	80077a4 <HAL_I2C_Master_Transmit+0x184>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800773e:	2b00      	cmp	r3, #0
 8007740:	d130      	bne.n	80077a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	2200      	movs	r2, #0
 800774a:	2180      	movs	r1, #128	@ 0x80
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 fc65 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e04d      	b.n	80077f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007760:	b29b      	uxth	r3, r3
 8007762:	2bff      	cmp	r3, #255	@ 0xff
 8007764:	d90e      	bls.n	8007784 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	22ff      	movs	r2, #255	@ 0xff
 800776a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007770:	b2da      	uxtb	r2, r3
 8007772:	8979      	ldrh	r1, [r7, #10]
 8007774:	2300      	movs	r3, #0
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 fe89 	bl	8008494 <I2C_TransferConfig>
 8007782:	e00f      	b.n	80077a4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007792:	b2da      	uxtb	r2, r3
 8007794:	8979      	ldrh	r1, [r7, #10]
 8007796:	2300      	movs	r3, #0
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 fe78 	bl	8008494 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d19e      	bne.n	80076ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	6a39      	ldr	r1, [r7, #32]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fcc8 	bl	8008148 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e01a      	b.n	80077f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2220      	movs	r2, #32
 80077c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6859      	ldr	r1, [r3, #4]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007804 <HAL_I2C_Master_Transmit+0x1e4>)
 80077d6:	400b      	ands	r3, r1
 80077d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2220      	movs	r2, #32
 80077de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e000      	b.n	80077f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80077f6:	2302      	movs	r3, #2
  }
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	80002000 	.word	0x80002000
 8007804:	fe00e800 	.word	0xfe00e800

08007808 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af02      	add	r7, sp, #8
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	461a      	mov	r2, r3
 8007814:	460b      	mov	r3, r1
 8007816:	817b      	strh	r3, [r7, #10]
 8007818:	4613      	mov	r3, r2
 800781a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b20      	cmp	r3, #32
 8007826:	f040 80db 	bne.w	80079e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_I2C_Master_Receive+0x30>
 8007834:	2302      	movs	r3, #2
 8007836:	e0d4      	b.n	80079e2 <HAL_I2C_Master_Receive+0x1da>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007840:	f7fe ff14 	bl	800666c <HAL_GetTick>
 8007844:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	2319      	movs	r3, #25
 800784c:	2201      	movs	r2, #1
 800784e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fbe2 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e0bf      	b.n	80079e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2222      	movs	r2, #34	@ 0x22
 8007866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2210      	movs	r2, #16
 800786e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	893a      	ldrh	r2, [r7, #8]
 8007882:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800788e:	b29b      	uxth	r3, r3
 8007890:	2bff      	cmp	r3, #255	@ 0xff
 8007892:	d90e      	bls.n	80078b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	22ff      	movs	r2, #255	@ 0xff
 8007898:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	8979      	ldrh	r1, [r7, #10]
 80078a2:	4b52      	ldr	r3, [pc, #328]	@ (80079ec <HAL_I2C_Master_Receive+0x1e4>)
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fdf2 	bl	8008494 <I2C_TransferConfig>
 80078b0:	e06d      	b.n	800798e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	8979      	ldrh	r1, [r7, #10]
 80078c4:	4b49      	ldr	r3, [pc, #292]	@ (80079ec <HAL_I2C_Master_Receive+0x1e4>)
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 fde1 	bl	8008494 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80078d2:	e05c      	b.n	800798e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	6a39      	ldr	r1, [r7, #32]
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 fc79 	bl	80081d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e07c      	b.n	80079e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007910:	b29b      	uxth	r3, r3
 8007912:	3b01      	subs	r3, #1
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d034      	beq.n	800798e <HAL_I2C_Master_Receive+0x186>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007928:	2b00      	cmp	r3, #0
 800792a:	d130      	bne.n	800798e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	2200      	movs	r2, #0
 8007934:	2180      	movs	r1, #128	@ 0x80
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 fb70 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e04d      	b.n	80079e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800794a:	b29b      	uxth	r3, r3
 800794c:	2bff      	cmp	r3, #255	@ 0xff
 800794e:	d90e      	bls.n	800796e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	22ff      	movs	r2, #255	@ 0xff
 8007954:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800795a:	b2da      	uxtb	r2, r3
 800795c:	8979      	ldrh	r1, [r7, #10]
 800795e:	2300      	movs	r3, #0
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 fd94 	bl	8008494 <I2C_TransferConfig>
 800796c:	e00f      	b.n	800798e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007972:	b29a      	uxth	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800797c:	b2da      	uxtb	r2, r3
 800797e:	8979      	ldrh	r1, [r7, #10]
 8007980:	2300      	movs	r3, #0
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fd83 	bl	8008494 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d19d      	bne.n	80078d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	6a39      	ldr	r1, [r7, #32]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 fbd3 	bl	8008148 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e01a      	b.n	80079e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2220      	movs	r2, #32
 80079b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6859      	ldr	r1, [r3, #4]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	4b0c      	ldr	r3, [pc, #48]	@ (80079f0 <HAL_I2C_Master_Receive+0x1e8>)
 80079c0:	400b      	ands	r3, r1
 80079c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	e000      	b.n	80079e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
  }
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	80002400 	.word	0x80002400
 80079f0:	fe00e800 	.word	0xfe00e800

080079f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b088      	sub	sp, #32
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	4608      	mov	r0, r1
 80079fe:	4611      	mov	r1, r2
 8007a00:	461a      	mov	r2, r3
 8007a02:	4603      	mov	r3, r0
 8007a04:	817b      	strh	r3, [r7, #10]
 8007a06:	460b      	mov	r3, r1
 8007a08:	813b      	strh	r3, [r7, #8]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	f040 80f9 	bne.w	8007c0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_I2C_Mem_Write+0x34>
 8007a22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d105      	bne.n	8007a34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e0ed      	b.n	8007c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d101      	bne.n	8007a42 <HAL_I2C_Mem_Write+0x4e>
 8007a3e:	2302      	movs	r3, #2
 8007a40:	e0e6      	b.n	8007c10 <HAL_I2C_Mem_Write+0x21c>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a4a:	f7fe fe0f 	bl	800666c <HAL_GetTick>
 8007a4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	2319      	movs	r3, #25
 8007a56:	2201      	movs	r2, #1
 8007a58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fadd 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0d1      	b.n	8007c10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2221      	movs	r2, #33	@ 0x21
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2240      	movs	r2, #64	@ 0x40
 8007a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a3a      	ldr	r2, [r7, #32]
 8007a86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a94:	88f8      	ldrh	r0, [r7, #6]
 8007a96:	893a      	ldrh	r2, [r7, #8]
 8007a98:	8979      	ldrh	r1, [r7, #10]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f9ed 	bl	8007e84 <I2C_RequestMemoryWrite>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0a9      	b.n	8007c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2bff      	cmp	r3, #255	@ 0xff
 8007ac4:	d90e      	bls.n	8007ae4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	22ff      	movs	r2, #255	@ 0xff
 8007aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	8979      	ldrh	r1, [r7, #10]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fcd9 	bl	8008494 <I2C_TransferConfig>
 8007ae2:	e00f      	b.n	8007b04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	8979      	ldrh	r1, [r7, #10]
 8007af6:	2300      	movs	r3, #0
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 fcc8 	bl	8008494 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fad6 	bl	80080ba <I2C_WaitOnTXISFlagUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e07b      	b.n	8007c10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1c:	781a      	ldrb	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	3b01      	subs	r3, #1
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d034      	beq.n	8007bbc <HAL_I2C_Mem_Write+0x1c8>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d130      	bne.n	8007bbc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b60:	2200      	movs	r2, #0
 8007b62:	2180      	movs	r1, #128	@ 0x80
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fa59 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e04d      	b.n	8007c10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2bff      	cmp	r3, #255	@ 0xff
 8007b7c:	d90e      	bls.n	8007b9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	22ff      	movs	r2, #255	@ 0xff
 8007b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	8979      	ldrh	r1, [r7, #10]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 fc7d 	bl	8008494 <I2C_TransferConfig>
 8007b9a:	e00f      	b.n	8007bbc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	8979      	ldrh	r1, [r7, #10]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 fc6c 	bl	8008494 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d19e      	bne.n	8007b04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fabc 	bl	8008148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e01a      	b.n	8007c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2220      	movs	r2, #32
 8007be0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6859      	ldr	r1, [r3, #4]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	4b0a      	ldr	r3, [pc, #40]	@ (8007c18 <HAL_I2C_Mem_Write+0x224>)
 8007bee:	400b      	ands	r3, r1
 8007bf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e000      	b.n	8007c10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007c0e:	2302      	movs	r3, #2
  }
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	fe00e800 	.word	0xfe00e800

08007c1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	4608      	mov	r0, r1
 8007c26:	4611      	mov	r1, r2
 8007c28:	461a      	mov	r2, r3
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	817b      	strh	r3, [r7, #10]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	813b      	strh	r3, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	f040 80fd 	bne.w	8007e3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_I2C_Mem_Read+0x34>
 8007c4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d105      	bne.n	8007c5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0f1      	b.n	8007e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_I2C_Mem_Read+0x4e>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e0ea      	b.n	8007e40 <HAL_I2C_Mem_Read+0x224>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c72:	f7fe fcfb 	bl	800666c <HAL_GetTick>
 8007c76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	2319      	movs	r3, #25
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f9c9 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0d5      	b.n	8007e40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2222      	movs	r2, #34	@ 0x22
 8007c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2240      	movs	r2, #64	@ 0x40
 8007ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a3a      	ldr	r2, [r7, #32]
 8007cae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cbc:	88f8      	ldrh	r0, [r7, #6]
 8007cbe:	893a      	ldrh	r2, [r7, #8]
 8007cc0:	8979      	ldrh	r1, [r7, #10]
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4603      	mov	r3, r0
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 f92d 	bl	8007f2c <I2C_RequestMemoryRead>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e0ad      	b.n	8007e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2bff      	cmp	r3, #255	@ 0xff
 8007cec:	d90e      	bls.n	8007d0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	22ff      	movs	r2, #255	@ 0xff
 8007cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	8979      	ldrh	r1, [r7, #10]
 8007cfc:	4b52      	ldr	r3, [pc, #328]	@ (8007e48 <HAL_I2C_Mem_Read+0x22c>)
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 fbc5 	bl	8008494 <I2C_TransferConfig>
 8007d0a:	e00f      	b.n	8007d2c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	8979      	ldrh	r1, [r7, #10]
 8007d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8007e48 <HAL_I2C_Mem_Read+0x22c>)
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fbb4 	bl	8008494 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d32:	2200      	movs	r2, #0
 8007d34:	2104      	movs	r1, #4
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f970 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e07c      	b.n	8007e40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d034      	beq.n	8007dec <HAL_I2C_Mem_Read+0x1d0>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d130      	bne.n	8007dec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	2200      	movs	r2, #0
 8007d92:	2180      	movs	r1, #128	@ 0x80
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f941 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e04d      	b.n	8007e40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2bff      	cmp	r3, #255	@ 0xff
 8007dac:	d90e      	bls.n	8007dcc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	22ff      	movs	r2, #255	@ 0xff
 8007db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	8979      	ldrh	r1, [r7, #10]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fb65 	bl	8008494 <I2C_TransferConfig>
 8007dca:	e00f      	b.n	8007dec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	8979      	ldrh	r1, [r7, #10]
 8007dde:	2300      	movs	r3, #0
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 fb54 	bl	8008494 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d19a      	bne.n	8007d2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 f9a4 	bl	8008148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e01a      	b.n	8007e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6859      	ldr	r1, [r3, #4]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e4c <HAL_I2C_Mem_Read+0x230>)
 8007e1e:	400b      	ands	r3, r1
 8007e20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e000      	b.n	8007e40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007e3e:	2302      	movs	r3, #2
  }
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	80002400 	.word	0x80002400
 8007e4c:	fe00e800 	.word	0xfe00e800

08007e50 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e5e:	b2db      	uxtb	r3, r3
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	4611      	mov	r1, r2
 8007e90:	461a      	mov	r2, r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	817b      	strh	r3, [r7, #10]
 8007e96:	460b      	mov	r3, r1
 8007e98:	813b      	strh	r3, [r7, #8]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e9e:	88fb      	ldrh	r3, [r7, #6]
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	8979      	ldrh	r1, [r7, #10]
 8007ea4:	4b20      	ldr	r3, [pc, #128]	@ (8007f28 <I2C_RequestMemoryWrite+0xa4>)
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 faf1 	bl	8008494 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	69b9      	ldr	r1, [r7, #24]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f8ff 	bl	80080ba <I2C_WaitOnTXISFlagUntilTimeout>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e02c      	b.n	8007f20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ec6:	88fb      	ldrh	r3, [r7, #6]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d105      	bne.n	8007ed8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ecc:	893b      	ldrh	r3, [r7, #8]
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ed6:	e015      	b.n	8007f04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ed8:	893b      	ldrh	r3, [r7, #8]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	69b9      	ldr	r1, [r7, #24]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 f8e5 	bl	80080ba <I2C_WaitOnTXISFlagUntilTimeout>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e012      	b.n	8007f20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007efa:	893b      	ldrh	r3, [r7, #8]
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2180      	movs	r1, #128	@ 0x80
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f884 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	80002000 	.word	0x80002000

08007f2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	461a      	mov	r2, r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	817b      	strh	r3, [r7, #10]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	813b      	strh	r3, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007f46:	88fb      	ldrh	r3, [r7, #6]
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	8979      	ldrh	r1, [r7, #10]
 8007f4c:	4b20      	ldr	r3, [pc, #128]	@ (8007fd0 <I2C_RequestMemoryRead+0xa4>)
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2300      	movs	r3, #0
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fa9e 	bl	8008494 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	69b9      	ldr	r1, [r7, #24]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 f8ac 	bl	80080ba <I2C_WaitOnTXISFlagUntilTimeout>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e02c      	b.n	8007fc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d105      	bne.n	8007f7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f72:	893b      	ldrh	r3, [r7, #8]
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f7c:	e015      	b.n	8007faa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f7e:	893b      	ldrh	r3, [r7, #8]
 8007f80:	0a1b      	lsrs	r3, r3, #8
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	69b9      	ldr	r1, [r7, #24]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f892 	bl	80080ba <I2C_WaitOnTXISFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e012      	b.n	8007fc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fa0:	893b      	ldrh	r3, [r7, #8]
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2140      	movs	r1, #64	@ 0x40
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 f831 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	80002000 	.word	0x80002000

08007fd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d103      	bne.n	8007ff2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d007      	beq.n	8008010 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699a      	ldr	r2, [r3, #24]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f042 0201 	orr.w	r2, r2, #1
 800800e:	619a      	str	r2, [r3, #24]
  }
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	4613      	mov	r3, r2
 800802a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800802c:	e031      	b.n	8008092 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008034:	d02d      	beq.n	8008092 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008036:	f7fe fb19 	bl	800666c <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d302      	bcc.n	800804c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d122      	bne.n	8008092 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699a      	ldr	r2, [r3, #24]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4013      	ands	r3, r2
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	429a      	cmp	r2, r3
 800805a:	bf0c      	ite	eq
 800805c:	2301      	moveq	r3, #1
 800805e:	2300      	movne	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	429a      	cmp	r2, r3
 8008068:	d113      	bne.n	8008092 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800806e:	f043 0220 	orr.w	r2, r3, #32
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2220      	movs	r2, #32
 800807a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e00f      	b.n	80080b2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	699a      	ldr	r2, [r3, #24]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4013      	ands	r3, r2
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	429a      	cmp	r2, r3
 80080a0:	bf0c      	ite	eq
 80080a2:	2301      	moveq	r3, #1
 80080a4:	2300      	movne	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d0be      	beq.n	800802e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080c6:	e033      	b.n	8008130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f901 	bl	80082d4 <I2C_IsErrorOccurred>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e031      	b.n	8008140 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080e2:	d025      	beq.n	8008130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080e4:	f7fe fac2 	bl	800666c <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d302      	bcc.n	80080fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d11a      	bne.n	8008130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b02      	cmp	r3, #2
 8008106:	d013      	beq.n	8008130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800810c:	f043 0220 	orr.w	r2, r3, #32
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e007      	b.n	8008140 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b02      	cmp	r3, #2
 800813c:	d1c4      	bne.n	80080c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008154:	e02f      	b.n	80081b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	68b9      	ldr	r1, [r7, #8]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f8ba 	bl	80082d4 <I2C_IsErrorOccurred>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e02d      	b.n	80081c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800816a:	f7fe fa7f 	bl	800666c <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	429a      	cmp	r2, r3
 8008178:	d302      	bcc.n	8008180 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d11a      	bne.n	80081b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b20      	cmp	r3, #32
 800818c:	d013      	beq.n	80081b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008192:	f043 0220 	orr.w	r2, r3, #32
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2220      	movs	r2, #32
 800819e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e007      	b.n	80081c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	d1c8      	bne.n	8008156 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081dc:	e06b      	b.n	80082b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f000 f876 	bl	80082d4 <I2C_IsErrorOccurred>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e069      	b.n	80082c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d138      	bne.n	8008272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b04      	cmp	r3, #4
 800820c:	d105      	bne.n	800821a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	e055      	b.n	80082c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b10      	cmp	r3, #16
 8008226:	d107      	bne.n	8008238 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2210      	movs	r2, #16
 800822e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2204      	movs	r2, #4
 8008234:	645a      	str	r2, [r3, #68]	@ 0x44
 8008236:	e002      	b.n	800823e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2220      	movs	r2, #32
 8008244:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6859      	ldr	r1, [r3, #4]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	4b1f      	ldr	r3, [pc, #124]	@ (80082d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008252:	400b      	ands	r3, r1
 8008254:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2220      	movs	r2, #32
 800825a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e029      	b.n	80082c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008272:	f7fe f9fb 	bl	800666c <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	429a      	cmp	r2, r3
 8008280:	d302      	bcc.n	8008288 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d116      	bne.n	80082b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b04      	cmp	r3, #4
 8008294:	d00f      	beq.n	80082b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800829a:	f043 0220 	orr.w	r2, r3, #32
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e007      	b.n	80082c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d18c      	bne.n	80081de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	fe00e800 	.word	0xfe00e800

080082d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	@ 0x28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d068      	beq.n	80083d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2210      	movs	r2, #16
 8008306:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008308:	e049      	b.n	800839e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008310:	d045      	beq.n	800839e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008312:	f7fe f9ab 	bl	800666c <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	429a      	cmp	r2, r3
 8008320:	d302      	bcc.n	8008328 <I2C_IsErrorOccurred+0x54>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d13a      	bne.n	800839e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008332:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800833a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800834a:	d121      	bne.n	8008390 <I2C_IsErrorOccurred+0xbc>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008352:	d01d      	beq.n	8008390 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008354:	7cfb      	ldrb	r3, [r7, #19]
 8008356:	2b20      	cmp	r3, #32
 8008358:	d01a      	beq.n	8008390 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008368:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800836a:	f7fe f97f 	bl	800666c <HAL_GetTick>
 800836e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008370:	e00e      	b.n	8008390 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008372:	f7fe f97b 	bl	800666c <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b19      	cmp	r3, #25
 800837e:	d907      	bls.n	8008390 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	f043 0320 	orr.w	r3, r3, #32
 8008386:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800838e:	e006      	b.n	800839e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b20      	cmp	r3, #32
 800839c:	d1e9      	bne.n	8008372 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	2b20      	cmp	r3, #32
 80083aa:	d003      	beq.n	80083b4 <I2C_IsErrorOccurred+0xe0>
 80083ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0aa      	beq.n	800830a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d103      	bne.n	80083c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2220      	movs	r2, #32
 80083c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	f043 0304 	orr.w	r3, r3, #4
 80083ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00b      	beq.n	800841e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	f043 0308 	orr.w	r3, r3, #8
 800840c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008416:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	f043 0302 	orr.w	r3, r3, #2
 800842e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008438:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01c      	beq.n	8008482 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f7ff fdc3 	bl	8007fd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6859      	ldr	r1, [r3, #4]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4b0d      	ldr	r3, [pc, #52]	@ (8008490 <I2C_IsErrorOccurred+0x1bc>)
 800845a:	400b      	ands	r3, r1
 800845c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	431a      	orrs	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2220      	movs	r2, #32
 800846e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008482:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008486:	4618      	mov	r0, r3
 8008488:	3728      	adds	r7, #40	@ 0x28
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	fe00e800 	.word	0xfe00e800

08008494 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	607b      	str	r3, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	817b      	strh	r3, [r7, #10]
 80084a2:	4613      	mov	r3, r2
 80084a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084a6:	897b      	ldrh	r3, [r7, #10]
 80084a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084ac:	7a7b      	ldrb	r3, [r7, #9]
 80084ae:	041b      	lsls	r3, r3, #16
 80084b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	4313      	orrs	r3, r2
 80084be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	0d5b      	lsrs	r3, r3, #21
 80084ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80084d2:	4b08      	ldr	r3, [pc, #32]	@ (80084f4 <I2C_TransferConfig+0x60>)
 80084d4:	430b      	orrs	r3, r1
 80084d6:	43db      	mvns	r3, r3
 80084d8:	ea02 0103 	and.w	r1, r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80084e6:	bf00      	nop
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	03ff63ff 	.word	0x03ff63ff

080084f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b20      	cmp	r3, #32
 800850c:	d138      	bne.n	8008580 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008518:	2302      	movs	r3, #2
 800851a:	e032      	b.n	8008582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2224      	movs	r2, #36	@ 0x24
 8008528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0201 	bic.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800854a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6819      	ldr	r1, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0201 	orr.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	e000      	b.n	8008582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008580:	2302      	movs	r3, #2
  }
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d139      	bne.n	8008618 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e033      	b.n	800861a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2224      	movs	r2, #36	@ 0x24
 80085be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0201 	bic.w	r2, r2, #1
 80085d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80085e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0201 	orr.w	r2, r2, #1
 8008602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e000      	b.n	800861a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008618:	2302      	movs	r3, #2
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
	...

08008628 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e0bf      	b.n	80087ba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d106      	bne.n	8008654 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f8ba 	bl	80087c8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699a      	ldr	r2, [r3, #24]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800866a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6999      	ldr	r1, [r3, #24]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008680:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6899      	ldr	r1, [r3, #8]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	4b4a      	ldr	r3, [pc, #296]	@ (80087c4 <HAL_LTDC_Init+0x19c>)
 800869c:	400b      	ands	r3, r1
 800869e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	041b      	lsls	r3, r3, #16
 80086a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6899      	ldr	r1, [r3, #8]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699a      	ldr	r2, [r3, #24]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68d9      	ldr	r1, [r3, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	4b3e      	ldr	r3, [pc, #248]	@ (80087c4 <HAL_LTDC_Init+0x19c>)
 80086ca:	400b      	ands	r3, r1
 80086cc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68d9      	ldr	r1, [r3, #12]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a1a      	ldr	r2, [r3, #32]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6919      	ldr	r1, [r3, #16]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	4b33      	ldr	r3, [pc, #204]	@ (80087c4 <HAL_LTDC_Init+0x19c>)
 80086f8:	400b      	ands	r3, r1
 80086fa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008700:	041b      	lsls	r3, r3, #16
 8008702:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6919      	ldr	r1, [r3, #16]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	431a      	orrs	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6959      	ldr	r1, [r3, #20]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	4b27      	ldr	r3, [pc, #156]	@ (80087c4 <HAL_LTDC_Init+0x19c>)
 8008726:	400b      	ands	r3, r1
 8008728:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872e:	041b      	lsls	r3, r3, #16
 8008730:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6959      	ldr	r1, [r3, #20]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008758:	041b      	lsls	r3, r3, #16
 800875a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800876a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0206 	orr.w	r2, r2, #6
 8008796:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0201 	orr.w	r2, r2, #1
 80087a6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	f000f800 	.word	0xf000f800

080087c8 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80087dc:	b5b0      	push	{r4, r5, r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d101      	bne.n	80087f6 <HAL_LTDC_ConfigLayer+0x1a>
 80087f2:	2302      	movs	r3, #2
 80087f4:	e02c      	b.n	8008850 <HAL_LTDC_ConfigLayer+0x74>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2202      	movs	r2, #2
 8008802:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2134      	movs	r1, #52	@ 0x34
 800880c:	fb01 f303 	mul.w	r3, r1, r3
 8008810:	4413      	add	r3, r2
 8008812:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	4614      	mov	r4, r2
 800881a:	461d      	mov	r5, r3
 800881c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800881e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 f811 	bl	8008858 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2201      	movs	r2, #1
 800883c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bdb0      	pop	{r4, r5, r7, pc}

08008858 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008858:	b480      	push	{r7}
 800885a:	b089      	sub	sp, #36	@ 0x24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008874:	4413      	add	r3, r2
 8008876:	041b      	lsls	r3, r3, #16
 8008878:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	01db      	lsls	r3, r3, #7
 8008884:	4413      	add	r3, r2
 8008886:	3384      	adds	r3, #132	@ 0x84
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	6812      	ldr	r2, [r2, #0]
 800888e:	4611      	mov	r1, r2
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	01d2      	lsls	r2, r2, #7
 8008894:	440a      	add	r2, r1
 8008896:	3284      	adds	r2, #132	@ 0x84
 8008898:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800889c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	0c1b      	lsrs	r3, r3, #16
 80088aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80088ae:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80088b0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4619      	mov	r1, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	01db      	lsls	r3, r3, #7
 80088bc:	440b      	add	r3, r1
 80088be:	3384      	adds	r3, #132	@ 0x84
 80088c0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80088c6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088d6:	4413      	add	r3, r2
 80088d8:	041b      	lsls	r3, r3, #16
 80088da:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	01db      	lsls	r3, r3, #7
 80088e6:	4413      	add	r3, r2
 80088e8:	3384      	adds	r3, #132	@ 0x84
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	4611      	mov	r1, r2
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	01d2      	lsls	r2, r2, #7
 80088f6:	440a      	add	r2, r1
 80088f8:	3284      	adds	r2, #132	@ 0x84
 80088fa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80088fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800890e:	4413      	add	r3, r2
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4619      	mov	r1, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	01db      	lsls	r3, r3, #7
 800891c:	440b      	add	r3, r1
 800891e:	3384      	adds	r3, #132	@ 0x84
 8008920:	4619      	mov	r1, r3
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	4313      	orrs	r3, r2
 8008926:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	461a      	mov	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	01db      	lsls	r3, r3, #7
 8008932:	4413      	add	r3, r2
 8008934:	3384      	adds	r3, #132	@ 0x84
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	6812      	ldr	r2, [r2, #0]
 800893c:	4611      	mov	r1, r2
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	01d2      	lsls	r2, r2, #7
 8008942:	440a      	add	r2, r1
 8008944:	3284      	adds	r2, #132	@ 0x84
 8008946:	f023 0307 	bic.w	r3, r3, #7
 800894a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	461a      	mov	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	01db      	lsls	r3, r3, #7
 8008956:	4413      	add	r3, r2
 8008958:	3384      	adds	r3, #132	@ 0x84
 800895a:	461a      	mov	r2, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008968:	021b      	lsls	r3, r3, #8
 800896a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008972:	041b      	lsls	r3, r3, #16
 8008974:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	061b      	lsls	r3, r3, #24
 800897c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	01db      	lsls	r3, r3, #7
 8008988:	4413      	add	r3, r2
 800898a:	3384      	adds	r3, #132	@ 0x84
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	01db      	lsls	r3, r3, #7
 8008998:	4413      	add	r3, r2
 800899a:	3384      	adds	r3, #132	@ 0x84
 800899c:	461a      	mov	r2, r3
 800899e:	2300      	movs	r3, #0
 80089a0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80089a8:	461a      	mov	r2, r3
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	431a      	orrs	r2, r3
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	431a      	orrs	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4619      	mov	r1, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	01db      	lsls	r3, r3, #7
 80089bc:	440b      	add	r3, r1
 80089be:	3384      	adds	r3, #132	@ 0x84
 80089c0:	4619      	mov	r1, r3
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	461a      	mov	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	01db      	lsls	r3, r3, #7
 80089d2:	4413      	add	r3, r2
 80089d4:	3384      	adds	r3, #132	@ 0x84
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	6812      	ldr	r2, [r2, #0]
 80089dc:	4611      	mov	r1, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	01d2      	lsls	r2, r2, #7
 80089e2:	440a      	add	r2, r1
 80089e4:	3284      	adds	r2, #132	@ 0x84
 80089e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80089ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	01db      	lsls	r3, r3, #7
 80089f6:	4413      	add	r3, r2
 80089f8:	3384      	adds	r3, #132	@ 0x84
 80089fa:	461a      	mov	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	01db      	lsls	r3, r3, #7
 8008a0c:	4413      	add	r3, r2
 8008a0e:	3384      	adds	r3, #132	@ 0x84
 8008a10:	69da      	ldr	r2, [r3, #28]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4619      	mov	r1, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	01db      	lsls	r3, r3, #7
 8008a1c:	440b      	add	r3, r1
 8008a1e:	3384      	adds	r3, #132	@ 0x84
 8008a20:	4619      	mov	r1, r3
 8008a22:	4b58      	ldr	r3, [pc, #352]	@ (8008b84 <LTDC_SetConfig+0x32c>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	69da      	ldr	r2, [r3, #28]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	68f9      	ldr	r1, [r7, #12]
 8008a32:	6809      	ldr	r1, [r1, #0]
 8008a34:	4608      	mov	r0, r1
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	01c9      	lsls	r1, r1, #7
 8008a3a:	4401      	add	r1, r0
 8008a3c:	3184      	adds	r1, #132	@ 0x84
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	01db      	lsls	r3, r3, #7
 8008a4c:	4413      	add	r3, r2
 8008a4e:	3384      	adds	r3, #132	@ 0x84
 8008a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	01db      	lsls	r3, r3, #7
 8008a5c:	4413      	add	r3, r2
 8008a5e:	3384      	adds	r3, #132	@ 0x84
 8008a60:	461a      	mov	r2, r3
 8008a62:	2300      	movs	r3, #0
 8008a64:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	01db      	lsls	r3, r3, #7
 8008a70:	4413      	add	r3, r2
 8008a72:	3384      	adds	r3, #132	@ 0x84
 8008a74:	461a      	mov	r2, r3
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d102      	bne.n	8008a8a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008a84:	2304      	movs	r3, #4
 8008a86:	61fb      	str	r3, [r7, #28]
 8008a88:	e01b      	b.n	8008ac2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d102      	bne.n	8008a98 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008a92:	2303      	movs	r3, #3
 8008a94:	61fb      	str	r3, [r7, #28]
 8008a96:	e014      	b.n	8008ac2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	2b04      	cmp	r3, #4
 8008a9e:	d00b      	beq.n	8008ab8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d007      	beq.n	8008ab8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d003      	beq.n	8008ab8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008ab4:	2b07      	cmp	r3, #7
 8008ab6:	d102      	bne.n	8008abe <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008ab8:	2302      	movs	r3, #2
 8008aba:	61fb      	str	r3, [r7, #28]
 8008abc:	e001      	b.n	8008ac2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	01db      	lsls	r3, r3, #7
 8008acc:	4413      	add	r3, r2
 8008ace:	3384      	adds	r3, #132	@ 0x84
 8008ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	6812      	ldr	r2, [r2, #0]
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	01d2      	lsls	r2, r2, #7
 8008adc:	440a      	add	r2, r1
 8008ade:	3284      	adds	r2, #132	@ 0x84
 8008ae0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	fb02 f303 	mul.w	r3, r2, r3
 8008af0:	041a      	lsls	r2, r3, #16
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6859      	ldr	r1, [r3, #4]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	1acb      	subs	r3, r1, r3
 8008afc:	69f9      	ldr	r1, [r7, #28]
 8008afe:	fb01 f303 	mul.w	r3, r1, r3
 8008b02:	3307      	adds	r3, #7
 8008b04:	68f9      	ldr	r1, [r7, #12]
 8008b06:	6809      	ldr	r1, [r1, #0]
 8008b08:	4608      	mov	r0, r1
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	01c9      	lsls	r1, r1, #7
 8008b0e:	4401      	add	r1, r0
 8008b10:	3184      	adds	r1, #132	@ 0x84
 8008b12:	4313      	orrs	r3, r2
 8008b14:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	01db      	lsls	r3, r3, #7
 8008b20:	4413      	add	r3, r2
 8008b22:	3384      	adds	r3, #132	@ 0x84
 8008b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	01db      	lsls	r3, r3, #7
 8008b30:	440b      	add	r3, r1
 8008b32:	3384      	adds	r3, #132	@ 0x84
 8008b34:	4619      	mov	r1, r3
 8008b36:	4b14      	ldr	r3, [pc, #80]	@ (8008b88 <LTDC_SetConfig+0x330>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	01db      	lsls	r3, r3, #7
 8008b46:	4413      	add	r3, r2
 8008b48:	3384      	adds	r3, #132	@ 0x84
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b50:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	01db      	lsls	r3, r3, #7
 8008b5c:	4413      	add	r3, r2
 8008b5e:	3384      	adds	r3, #132	@ 0x84
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	6812      	ldr	r2, [r2, #0]
 8008b66:	4611      	mov	r1, r2
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	01d2      	lsls	r2, r2, #7
 8008b6c:	440a      	add	r2, r1
 8008b6e:	3284      	adds	r2, #132	@ 0x84
 8008b70:	f043 0301 	orr.w	r3, r3, #1
 8008b74:	6013      	str	r3, [r2, #0]
}
 8008b76:	bf00      	nop
 8008b78:	3724      	adds	r7, #36	@ 0x24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	fffff8f8 	.word	0xfffff8f8
 8008b88:	fffff800 	.word	0xfffff800

08008b8c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b94:	f7fd fd6a 	bl	800666c <HAL_GetTick>
 8008b98:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e03b      	b.n	8008c1c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0201 	bic.w	r2, r2, #1
 8008bc2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008bc4:	e00f      	b.n	8008be6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008bc6:	f7fd fd51 	bl	800666c <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	2b05      	cmp	r3, #5
 8008bd2:	d908      	bls.n	8008be6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2240      	movs	r2, #64	@ 0x40
 8008bd8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2203      	movs	r2, #3
 8008bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e01a      	b.n	8008c1c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e8      	bne.n	8008bc6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f86d 	bl	8008cd4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e048      	b.n	8008cc8 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 0201 	bic.w	r2, r2, #1
 8008c44:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2200      	movs	r2, #0
 8008c54:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2200      	movs	r2, #0
 8008c64:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2200      	movs	r2, #0
 8008c74:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2200      	movs	r2, #0
 8008c84:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2200      	movs	r2, #0
 8008c94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	221f      	movs	r2, #31
 8008c9c:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68d9      	ldr	r1, [r3, #12]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	691a      	ldr	r2, [r3, #16]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	695a      	ldr	r2, [r3, #20]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008cfa:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a1b      	ldr	r3, [r3, #32]
 8008d00:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008d06:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008d12:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8008d1c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008d28:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008d2a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d34:	d107      	bne.n	8008d46 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	691a      	ldr	r2, [r3, #16]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8008d44:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	da11      	bge.n	8008d7a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	695a      	ldr	r2, [r3, #20]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008d64:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d6a:	425b      	negs	r3, r3
 8008d6c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	b292      	uxth	r2, r2
 8008d76:	621a      	str	r2, [r3, #32]
 8008d78:	e006      	b.n	8008d88 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d7e:	461a      	mov	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	b292      	uxth	r2, r2
 8008d86:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	da15      	bge.n	8008dbc <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	695a      	ldr	r2, [r3, #20]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8008d9e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da4:	425b      	negs	r3, r3
 8008da6:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6a19      	ldr	r1, [r3, #32]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	041a      	lsls	r2, r3, #16
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	621a      	str	r2, [r3, #32]
 8008dba:	e009      	b.n	8008dd0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6a19      	ldr	r1, [r3, #32]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc6:	041a      	lsls	r2, r3, #16
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dd8:	d006      	beq.n	8008de8 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	b2d2      	uxtb	r2, r2
 8008de4:	629a      	str	r2, [r3, #40]	@ 0x28
 8008de6:	e003      	b.n	8008df0 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2200      	movs	r2, #0
 8008dee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2200      	movs	r2, #0
 8008df6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008df8:	bf00      	nop
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008e0c:	4b19      	ldr	r3, [pc, #100]	@ (8008e74 <HAL_PWREx_ConfigSupply+0x70>)
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d00a      	beq.n	8008e2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e18:	4b16      	ldr	r3, [pc, #88]	@ (8008e74 <HAL_PWREx_ConfigSupply+0x70>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d001      	beq.n	8008e2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e01f      	b.n	8008e6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e01d      	b.n	8008e6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e2e:	4b11      	ldr	r3, [pc, #68]	@ (8008e74 <HAL_PWREx_ConfigSupply+0x70>)
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	f023 0207 	bic.w	r2, r3, #7
 8008e36:	490f      	ldr	r1, [pc, #60]	@ (8008e74 <HAL_PWREx_ConfigSupply+0x70>)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008e3e:	f7fd fc15 	bl	800666c <HAL_GetTick>
 8008e42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e44:	e009      	b.n	8008e5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e46:	f7fd fc11 	bl	800666c <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e54:	d901      	bls.n	8008e5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e007      	b.n	8008e6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e5a:	4b06      	ldr	r3, [pc, #24]	@ (8008e74 <HAL_PWREx_ConfigSupply+0x70>)
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e66:	d1ee      	bne.n	8008e46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	58024800 	.word	0x58024800

08008e78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08c      	sub	sp, #48	@ 0x30
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d102      	bne.n	8008e8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	f000 bc48 	b.w	800971c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 8088 	beq.w	8008faa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e9a:	4b99      	ldr	r3, [pc, #612]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ea4:	4b96      	ldr	r3, [pc, #600]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eac:	2b10      	cmp	r3, #16
 8008eae:	d007      	beq.n	8008ec0 <HAL_RCC_OscConfig+0x48>
 8008eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb2:	2b18      	cmp	r3, #24
 8008eb4:	d111      	bne.n	8008eda <HAL_RCC_OscConfig+0x62>
 8008eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb8:	f003 0303 	and.w	r3, r3, #3
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d10c      	bne.n	8008eda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ec0:	4b8f      	ldr	r3, [pc, #572]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d06d      	beq.n	8008fa8 <HAL_RCC_OscConfig+0x130>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d169      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	f000 bc21 	b.w	800971c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ee2:	d106      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x7a>
 8008ee4:	4b86      	ldr	r3, [pc, #536]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a85      	ldr	r2, [pc, #532]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	e02e      	b.n	8008f50 <HAL_RCC_OscConfig+0xd8>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10c      	bne.n	8008f14 <HAL_RCC_OscConfig+0x9c>
 8008efa:	4b81      	ldr	r3, [pc, #516]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a80      	ldr	r2, [pc, #512]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	4b7e      	ldr	r3, [pc, #504]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a7d      	ldr	r2, [pc, #500]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	e01d      	b.n	8008f50 <HAL_RCC_OscConfig+0xd8>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f1c:	d10c      	bne.n	8008f38 <HAL_RCC_OscConfig+0xc0>
 8008f1e:	4b78      	ldr	r3, [pc, #480]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a77      	ldr	r2, [pc, #476]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	4b75      	ldr	r3, [pc, #468]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a74      	ldr	r2, [pc, #464]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	e00b      	b.n	8008f50 <HAL_RCC_OscConfig+0xd8>
 8008f38:	4b71      	ldr	r3, [pc, #452]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a70      	ldr	r2, [pc, #448]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	4b6e      	ldr	r3, [pc, #440]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a6d      	ldr	r2, [pc, #436]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d013      	beq.n	8008f80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f58:	f7fd fb88 	bl	800666c <HAL_GetTick>
 8008f5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f5e:	e008      	b.n	8008f72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f60:	f7fd fb84 	bl	800666c <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b64      	cmp	r3, #100	@ 0x64
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e3d4      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f72:	4b63      	ldr	r3, [pc, #396]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0f0      	beq.n	8008f60 <HAL_RCC_OscConfig+0xe8>
 8008f7e:	e014      	b.n	8008faa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f80:	f7fd fb74 	bl	800666c <HAL_GetTick>
 8008f84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f86:	e008      	b.n	8008f9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f88:	f7fd fb70 	bl	800666c <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	2b64      	cmp	r3, #100	@ 0x64
 8008f94:	d901      	bls.n	8008f9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e3c0      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f9a:	4b59      	ldr	r3, [pc, #356]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1f0      	bne.n	8008f88 <HAL_RCC_OscConfig+0x110>
 8008fa6:	e000      	b.n	8008faa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 80ca 	beq.w	800914c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fb8:	4b51      	ldr	r3, [pc, #324]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <HAL_RCC_OscConfig+0x166>
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	2b18      	cmp	r3, #24
 8008fd2:	d156      	bne.n	8009082 <HAL_RCC_OscConfig+0x20a>
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d151      	bne.n	8009082 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fde:	4b48      	ldr	r3, [pc, #288]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d005      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x17e>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e392      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ff6:	4b42      	ldr	r3, [pc, #264]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f023 0219 	bic.w	r2, r3, #25
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	493f      	ldr	r1, [pc, #252]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8009004:	4313      	orrs	r3, r2
 8009006:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009008:	f7fd fb30 	bl	800666c <HAL_GetTick>
 800900c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800900e:	e008      	b.n	8009022 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009010:	f7fd fb2c 	bl	800666c <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	2b02      	cmp	r3, #2
 800901c:	d901      	bls.n	8009022 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e37c      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009022:	4b37      	ldr	r3, [pc, #220]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f0      	beq.n	8009010 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800902e:	f7fd fb4d 	bl	80066cc <HAL_GetREVID>
 8009032:	4603      	mov	r3, r0
 8009034:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009038:	4293      	cmp	r3, r2
 800903a:	d817      	bhi.n	800906c <HAL_RCC_OscConfig+0x1f4>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	2b40      	cmp	r3, #64	@ 0x40
 8009042:	d108      	bne.n	8009056 <HAL_RCC_OscConfig+0x1de>
 8009044:	4b2e      	ldr	r3, [pc, #184]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800904c:	4a2c      	ldr	r2, [pc, #176]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 800904e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009052:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009054:	e07a      	b.n	800914c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009056:	4b2a      	ldr	r3, [pc, #168]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	031b      	lsls	r3, r3, #12
 8009064:	4926      	ldr	r1, [pc, #152]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8009066:	4313      	orrs	r3, r2
 8009068:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800906a:	e06f      	b.n	800914c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800906c:	4b24      	ldr	r3, [pc, #144]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	061b      	lsls	r3, r3, #24
 800907a:	4921      	ldr	r1, [pc, #132]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 800907c:	4313      	orrs	r3, r2
 800907e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009080:	e064      	b.n	800914c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d047      	beq.n	800911a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800908a:	4b1d      	ldr	r3, [pc, #116]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f023 0219 	bic.w	r2, r3, #25
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	491a      	ldr	r1, [pc, #104]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 8009098:	4313      	orrs	r3, r2
 800909a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800909c:	f7fd fae6 	bl	800666c <HAL_GetTick>
 80090a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090a2:	e008      	b.n	80090b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090a4:	f7fd fae2 	bl	800666c <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d901      	bls.n	80090b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e332      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090b6:	4b12      	ldr	r3, [pc, #72]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0304 	and.w	r3, r3, #4
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d0f0      	beq.n	80090a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090c2:	f7fd fb03 	bl	80066cc <HAL_GetREVID>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d819      	bhi.n	8009104 <HAL_RCC_OscConfig+0x28c>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	2b40      	cmp	r3, #64	@ 0x40
 80090d6:	d108      	bne.n	80090ea <HAL_RCC_OscConfig+0x272>
 80090d8:	4b09      	ldr	r3, [pc, #36]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80090e0:	4a07      	ldr	r2, [pc, #28]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 80090e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090e6:	6053      	str	r3, [r2, #4]
 80090e8:	e030      	b.n	800914c <HAL_RCC_OscConfig+0x2d4>
 80090ea:	4b05      	ldr	r3, [pc, #20]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	031b      	lsls	r3, r3, #12
 80090f8:	4901      	ldr	r1, [pc, #4]	@ (8009100 <HAL_RCC_OscConfig+0x288>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	604b      	str	r3, [r1, #4]
 80090fe:	e025      	b.n	800914c <HAL_RCC_OscConfig+0x2d4>
 8009100:	58024400 	.word	0x58024400
 8009104:	4b9a      	ldr	r3, [pc, #616]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	061b      	lsls	r3, r3, #24
 8009112:	4997      	ldr	r1, [pc, #604]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009114:	4313      	orrs	r3, r2
 8009116:	604b      	str	r3, [r1, #4]
 8009118:	e018      	b.n	800914c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800911a:	4b95      	ldr	r3, [pc, #596]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a94      	ldr	r2, [pc, #592]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009120:	f023 0301 	bic.w	r3, r3, #1
 8009124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009126:	f7fd faa1 	bl	800666c <HAL_GetTick>
 800912a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800912c:	e008      	b.n	8009140 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800912e:	f7fd fa9d 	bl	800666c <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d901      	bls.n	8009140 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e2ed      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009140:	4b8b      	ldr	r3, [pc, #556]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0304 	and.w	r3, r3, #4
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1f0      	bne.n	800912e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0310 	and.w	r3, r3, #16
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 80a9 	beq.w	80092ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800915a:	4b85      	ldr	r3, [pc, #532]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009162:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009164:	4b82      	ldr	r3, [pc, #520]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009168:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2b08      	cmp	r3, #8
 800916e:	d007      	beq.n	8009180 <HAL_RCC_OscConfig+0x308>
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	2b18      	cmp	r3, #24
 8009174:	d13a      	bne.n	80091ec <HAL_RCC_OscConfig+0x374>
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	2b01      	cmp	r3, #1
 800917e:	d135      	bne.n	80091ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009180:	4b7b      	ldr	r3, [pc, #492]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <HAL_RCC_OscConfig+0x320>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	2b80      	cmp	r3, #128	@ 0x80
 8009192:	d001      	beq.n	8009198 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e2c1      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009198:	f7fd fa98 	bl	80066cc <HAL_GetREVID>
 800919c:	4603      	mov	r3, r0
 800919e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d817      	bhi.n	80091d6 <HAL_RCC_OscConfig+0x35e>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d108      	bne.n	80091c0 <HAL_RCC_OscConfig+0x348>
 80091ae:	4b70      	ldr	r3, [pc, #448]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80091b6:	4a6e      	ldr	r2, [pc, #440]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80091b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091be:	e075      	b.n	80092ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091c0:	4b6b      	ldr	r3, [pc, #428]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	069b      	lsls	r3, r3, #26
 80091ce:	4968      	ldr	r1, [pc, #416]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091d4:	e06a      	b.n	80092ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091d6:	4b66      	ldr	r3, [pc, #408]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	061b      	lsls	r3, r3, #24
 80091e4:	4962      	ldr	r1, [pc, #392]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091ea:	e05f      	b.n	80092ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d042      	beq.n	800927a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80091f4:	4b5e      	ldr	r3, [pc, #376]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a5d      	ldr	r2, [pc, #372]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80091fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009200:	f7fd fa34 	bl	800666c <HAL_GetTick>
 8009204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009206:	e008      	b.n	800921a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009208:	f7fd fa30 	bl	800666c <HAL_GetTick>
 800920c:	4602      	mov	r2, r0
 800920e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	2b02      	cmp	r3, #2
 8009214:	d901      	bls.n	800921a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e280      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800921a:	4b55      	ldr	r3, [pc, #340]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0f0      	beq.n	8009208 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009226:	f7fd fa51 	bl	80066cc <HAL_GetREVID>
 800922a:	4603      	mov	r3, r0
 800922c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009230:	4293      	cmp	r3, r2
 8009232:	d817      	bhi.n	8009264 <HAL_RCC_OscConfig+0x3ec>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	2b20      	cmp	r3, #32
 800923a:	d108      	bne.n	800924e <HAL_RCC_OscConfig+0x3d6>
 800923c:	4b4c      	ldr	r3, [pc, #304]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009244:	4a4a      	ldr	r2, [pc, #296]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009246:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800924a:	6053      	str	r3, [r2, #4]
 800924c:	e02e      	b.n	80092ac <HAL_RCC_OscConfig+0x434>
 800924e:	4b48      	ldr	r3, [pc, #288]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	069b      	lsls	r3, r3, #26
 800925c:	4944      	ldr	r1, [pc, #272]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 800925e:	4313      	orrs	r3, r2
 8009260:	604b      	str	r3, [r1, #4]
 8009262:	e023      	b.n	80092ac <HAL_RCC_OscConfig+0x434>
 8009264:	4b42      	ldr	r3, [pc, #264]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	061b      	lsls	r3, r3, #24
 8009272:	493f      	ldr	r1, [pc, #252]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009274:	4313      	orrs	r3, r2
 8009276:	60cb      	str	r3, [r1, #12]
 8009278:	e018      	b.n	80092ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800927a:	4b3d      	ldr	r3, [pc, #244]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a3c      	ldr	r2, [pc, #240]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009286:	f7fd f9f1 	bl	800666c <HAL_GetTick>
 800928a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800928c:	e008      	b.n	80092a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800928e:	f7fd f9ed 	bl	800666c <HAL_GetTick>
 8009292:	4602      	mov	r2, r0
 8009294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	2b02      	cmp	r3, #2
 800929a:	d901      	bls.n	80092a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e23d      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80092a0:	4b33      	ldr	r3, [pc, #204]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1f0      	bne.n	800928e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0308 	and.w	r3, r3, #8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d036      	beq.n	8009326 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d019      	beq.n	80092f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092c0:	4b2b      	ldr	r3, [pc, #172]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80092c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092c4:	4a2a      	ldr	r2, [pc, #168]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80092c6:	f043 0301 	orr.w	r3, r3, #1
 80092ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092cc:	f7fd f9ce 	bl	800666c <HAL_GetTick>
 80092d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092d2:	e008      	b.n	80092e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092d4:	f7fd f9ca 	bl	800666c <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d901      	bls.n	80092e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e21a      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092e6:	4b22      	ldr	r3, [pc, #136]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80092e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0f0      	beq.n	80092d4 <HAL_RCC_OscConfig+0x45c>
 80092f2:	e018      	b.n	8009326 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092f4:	4b1e      	ldr	r3, [pc, #120]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80092f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 80092fa:	f023 0301 	bic.w	r3, r3, #1
 80092fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009300:	f7fd f9b4 	bl	800666c <HAL_GetTick>
 8009304:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009306:	e008      	b.n	800931a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009308:	f7fd f9b0 	bl	800666c <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d901      	bls.n	800931a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e200      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800931a:	4b15      	ldr	r3, [pc, #84]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 800931c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1f0      	bne.n	8009308 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0320 	and.w	r3, r3, #32
 800932e:	2b00      	cmp	r3, #0
 8009330:	d039      	beq.n	80093a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d01c      	beq.n	8009374 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800933a:	4b0d      	ldr	r3, [pc, #52]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a0c      	ldr	r2, [pc, #48]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009340:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009344:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009346:	f7fd f991 	bl	800666c <HAL_GetTick>
 800934a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800934c:	e008      	b.n	8009360 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800934e:	f7fd f98d 	bl	800666c <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	2b02      	cmp	r3, #2
 800935a:	d901      	bls.n	8009360 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e1dd      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009360:	4b03      	ldr	r3, [pc, #12]	@ (8009370 <HAL_RCC_OscConfig+0x4f8>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0f0      	beq.n	800934e <HAL_RCC_OscConfig+0x4d6>
 800936c:	e01b      	b.n	80093a6 <HAL_RCC_OscConfig+0x52e>
 800936e:	bf00      	nop
 8009370:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009374:	4b9b      	ldr	r3, [pc, #620]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a9a      	ldr	r2, [pc, #616]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 800937a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800937e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009380:	f7fd f974 	bl	800666c <HAL_GetTick>
 8009384:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009386:	e008      	b.n	800939a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009388:	f7fd f970 	bl	800666c <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	2b02      	cmp	r3, #2
 8009394:	d901      	bls.n	800939a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e1c0      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800939a:	4b92      	ldr	r3, [pc, #584]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1f0      	bne.n	8009388 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 8081 	beq.w	80094b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80093b4:	4b8c      	ldr	r3, [pc, #560]	@ (80095e8 <HAL_RCC_OscConfig+0x770>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a8b      	ldr	r2, [pc, #556]	@ (80095e8 <HAL_RCC_OscConfig+0x770>)
 80093ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093c0:	f7fd f954 	bl	800666c <HAL_GetTick>
 80093c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093c6:	e008      	b.n	80093da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093c8:	f7fd f950 	bl	800666c <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	2b64      	cmp	r3, #100	@ 0x64
 80093d4:	d901      	bls.n	80093da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e1a0      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093da:	4b83      	ldr	r3, [pc, #524]	@ (80095e8 <HAL_RCC_OscConfig+0x770>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0f0      	beq.n	80093c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d106      	bne.n	80093fc <HAL_RCC_OscConfig+0x584>
 80093ee:	4b7d      	ldr	r3, [pc, #500]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80093f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093f2:	4a7c      	ldr	r2, [pc, #496]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80093f4:	f043 0301 	orr.w	r3, r3, #1
 80093f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80093fa:	e02d      	b.n	8009458 <HAL_RCC_OscConfig+0x5e0>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10c      	bne.n	800941e <HAL_RCC_OscConfig+0x5a6>
 8009404:	4b77      	ldr	r3, [pc, #476]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009408:	4a76      	ldr	r2, [pc, #472]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 800940a:	f023 0301 	bic.w	r3, r3, #1
 800940e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009410:	4b74      	ldr	r3, [pc, #464]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009414:	4a73      	ldr	r2, [pc, #460]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009416:	f023 0304 	bic.w	r3, r3, #4
 800941a:	6713      	str	r3, [r2, #112]	@ 0x70
 800941c:	e01c      	b.n	8009458 <HAL_RCC_OscConfig+0x5e0>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	2b05      	cmp	r3, #5
 8009424:	d10c      	bne.n	8009440 <HAL_RCC_OscConfig+0x5c8>
 8009426:	4b6f      	ldr	r3, [pc, #444]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800942a:	4a6e      	ldr	r2, [pc, #440]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 800942c:	f043 0304 	orr.w	r3, r3, #4
 8009430:	6713      	str	r3, [r2, #112]	@ 0x70
 8009432:	4b6c      	ldr	r3, [pc, #432]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009436:	4a6b      	ldr	r2, [pc, #428]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009438:	f043 0301 	orr.w	r3, r3, #1
 800943c:	6713      	str	r3, [r2, #112]	@ 0x70
 800943e:	e00b      	b.n	8009458 <HAL_RCC_OscConfig+0x5e0>
 8009440:	4b68      	ldr	r3, [pc, #416]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009444:	4a67      	ldr	r2, [pc, #412]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009446:	f023 0301 	bic.w	r3, r3, #1
 800944a:	6713      	str	r3, [r2, #112]	@ 0x70
 800944c:	4b65      	ldr	r3, [pc, #404]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 800944e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009450:	4a64      	ldr	r2, [pc, #400]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009452:	f023 0304 	bic.w	r3, r3, #4
 8009456:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d015      	beq.n	800948c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009460:	f7fd f904 	bl	800666c <HAL_GetTick>
 8009464:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009466:	e00a      	b.n	800947e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009468:	f7fd f900 	bl	800666c <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009476:	4293      	cmp	r3, r2
 8009478:	d901      	bls.n	800947e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e14e      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800947e:	4b59      	ldr	r3, [pc, #356]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009482:	f003 0302 	and.w	r3, r3, #2
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0ee      	beq.n	8009468 <HAL_RCC_OscConfig+0x5f0>
 800948a:	e014      	b.n	80094b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800948c:	f7fd f8ee 	bl	800666c <HAL_GetTick>
 8009490:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009492:	e00a      	b.n	80094aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009494:	f7fd f8ea 	bl	800666c <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d901      	bls.n	80094aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e138      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094aa:	4b4e      	ldr	r3, [pc, #312]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80094ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1ee      	bne.n	8009494 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 812d 	beq.w	800971a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80094c0:	4b48      	ldr	r3, [pc, #288]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094c8:	2b18      	cmp	r3, #24
 80094ca:	f000 80bd 	beq.w	8009648 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	f040 809e 	bne.w	8009614 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094d8:	4b42      	ldr	r3, [pc, #264]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a41      	ldr	r2, [pc, #260]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80094de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e4:	f7fd f8c2 	bl	800666c <HAL_GetTick>
 80094e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094ea:	e008      	b.n	80094fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094ec:	f7fd f8be 	bl	800666c <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d901      	bls.n	80094fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e10e      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094fe:	4b39      	ldr	r3, [pc, #228]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1f0      	bne.n	80094ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800950a:	4b36      	ldr	r3, [pc, #216]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 800950c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800950e:	4b37      	ldr	r3, [pc, #220]	@ (80095ec <HAL_RCC_OscConfig+0x774>)
 8009510:	4013      	ands	r3, r2
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800951a:	0112      	lsls	r2, r2, #4
 800951c:	430a      	orrs	r2, r1
 800951e:	4931      	ldr	r1, [pc, #196]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009520:	4313      	orrs	r3, r2
 8009522:	628b      	str	r3, [r1, #40]	@ 0x28
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009528:	3b01      	subs	r3, #1
 800952a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009532:	3b01      	subs	r3, #1
 8009534:	025b      	lsls	r3, r3, #9
 8009536:	b29b      	uxth	r3, r3
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953e:	3b01      	subs	r3, #1
 8009540:	041b      	lsls	r3, r3, #16
 8009542:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800954c:	3b01      	subs	r3, #1
 800954e:	061b      	lsls	r3, r3, #24
 8009550:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009554:	4923      	ldr	r1, [pc, #140]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009556:	4313      	orrs	r3, r2
 8009558:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800955a:	4b22      	ldr	r3, [pc, #136]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 800955c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955e:	4a21      	ldr	r2, [pc, #132]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009560:	f023 0301 	bic.w	r3, r3, #1
 8009564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009566:	4b1f      	ldr	r3, [pc, #124]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800956a:	4b21      	ldr	r3, [pc, #132]	@ (80095f0 <HAL_RCC_OscConfig+0x778>)
 800956c:	4013      	ands	r3, r2
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009572:	00d2      	lsls	r2, r2, #3
 8009574:	491b      	ldr	r1, [pc, #108]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009576:	4313      	orrs	r3, r2
 8009578:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800957a:	4b1a      	ldr	r3, [pc, #104]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 800957c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957e:	f023 020c 	bic.w	r2, r3, #12
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009586:	4917      	ldr	r1, [pc, #92]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 8009588:	4313      	orrs	r3, r2
 800958a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800958c:	4b15      	ldr	r3, [pc, #84]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 800958e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009590:	f023 0202 	bic.w	r2, r3, #2
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009598:	4912      	ldr	r1, [pc, #72]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 800959a:	4313      	orrs	r3, r2
 800959c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800959e:	4b11      	ldr	r3, [pc, #68]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80095a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a2:	4a10      	ldr	r2, [pc, #64]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80095a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095aa:	4b0e      	ldr	r3, [pc, #56]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80095ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ae:	4a0d      	ldr	r2, [pc, #52]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80095b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80095b6:	4b0b      	ldr	r3, [pc, #44]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	4a0a      	ldr	r2, [pc, #40]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80095bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80095c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80095c2:	4b08      	ldr	r3, [pc, #32]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80095c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c6:	4a07      	ldr	r2, [pc, #28]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80095c8:	f043 0301 	orr.w	r3, r3, #1
 80095cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095ce:	4b05      	ldr	r3, [pc, #20]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a04      	ldr	r2, [pc, #16]	@ (80095e4 <HAL_RCC_OscConfig+0x76c>)
 80095d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80095d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095da:	f7fd f847 	bl	800666c <HAL_GetTick>
 80095de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095e0:	e011      	b.n	8009606 <HAL_RCC_OscConfig+0x78e>
 80095e2:	bf00      	nop
 80095e4:	58024400 	.word	0x58024400
 80095e8:	58024800 	.word	0x58024800
 80095ec:	fffffc0c 	.word	0xfffffc0c
 80095f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095f4:	f7fd f83a 	bl	800666c <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d901      	bls.n	8009606 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e08a      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009606:	4b47      	ldr	r3, [pc, #284]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0f0      	beq.n	80095f4 <HAL_RCC_OscConfig+0x77c>
 8009612:	e082      	b.n	800971a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009614:	4b43      	ldr	r3, [pc, #268]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a42      	ldr	r2, [pc, #264]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 800961a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800961e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009620:	f7fd f824 	bl	800666c <HAL_GetTick>
 8009624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009626:	e008      	b.n	800963a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009628:	f7fd f820 	bl	800666c <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	2b02      	cmp	r3, #2
 8009634:	d901      	bls.n	800963a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e070      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800963a:	4b3a      	ldr	r3, [pc, #232]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1f0      	bne.n	8009628 <HAL_RCC_OscConfig+0x7b0>
 8009646:	e068      	b.n	800971a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009648:	4b36      	ldr	r3, [pc, #216]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 800964a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800964e:	4b35      	ldr	r3, [pc, #212]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 8009650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009652:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009658:	2b01      	cmp	r3, #1
 800965a:	d031      	beq.n	80096c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f003 0203 	and.w	r2, r3, #3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009666:	429a      	cmp	r2, r3
 8009668:	d12a      	bne.n	80096c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	091b      	lsrs	r3, r3, #4
 800966e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009676:	429a      	cmp	r2, r3
 8009678:	d122      	bne.n	80096c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009684:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009686:	429a      	cmp	r2, r3
 8009688:	d11a      	bne.n	80096c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	0a5b      	lsrs	r3, r3, #9
 800968e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009696:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009698:	429a      	cmp	r2, r3
 800969a:	d111      	bne.n	80096c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	0c1b      	lsrs	r3, r3, #16
 80096a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d108      	bne.n	80096c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	0e1b      	lsrs	r3, r3, #24
 80096b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096bc:	429a      	cmp	r2, r3
 80096be:	d001      	beq.n	80096c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e02b      	b.n	800971c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80096c4:	4b17      	ldr	r3, [pc, #92]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 80096c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096c8:	08db      	lsrs	r3, r3, #3
 80096ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d01f      	beq.n	800971a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80096da:	4b12      	ldr	r3, [pc, #72]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 80096dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096de:	4a11      	ldr	r2, [pc, #68]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 80096e0:	f023 0301 	bic.w	r3, r3, #1
 80096e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80096e6:	f7fc ffc1 	bl	800666c <HAL_GetTick>
 80096ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80096ec:	bf00      	nop
 80096ee:	f7fc ffbd 	bl	800666c <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d0f9      	beq.n	80096ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80096fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 80096fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <HAL_RCC_OscConfig+0x8b0>)
 8009700:	4013      	ands	r3, r2
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009706:	00d2      	lsls	r2, r2, #3
 8009708:	4906      	ldr	r1, [pc, #24]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 800970a:	4313      	orrs	r3, r2
 800970c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800970e:	4b05      	ldr	r3, [pc, #20]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 8009710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009712:	4a04      	ldr	r2, [pc, #16]	@ (8009724 <HAL_RCC_OscConfig+0x8ac>)
 8009714:	f043 0301 	orr.w	r3, r3, #1
 8009718:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3730      	adds	r7, #48	@ 0x30
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	58024400 	.word	0x58024400
 8009728:	ffff0007 	.word	0xffff0007

0800972c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e19c      	b.n	8009a7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009740:	4b8a      	ldr	r3, [pc, #552]	@ (800996c <HAL_RCC_ClockConfig+0x240>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 030f 	and.w	r3, r3, #15
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d910      	bls.n	8009770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800974e:	4b87      	ldr	r3, [pc, #540]	@ (800996c <HAL_RCC_ClockConfig+0x240>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f023 020f 	bic.w	r2, r3, #15
 8009756:	4985      	ldr	r1, [pc, #532]	@ (800996c <HAL_RCC_ClockConfig+0x240>)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	4313      	orrs	r3, r2
 800975c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800975e:	4b83      	ldr	r3, [pc, #524]	@ (800996c <HAL_RCC_ClockConfig+0x240>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 030f 	and.w	r3, r3, #15
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d001      	beq.n	8009770 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e184      	b.n	8009a7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d010      	beq.n	800979e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691a      	ldr	r2, [r3, #16]
 8009780:	4b7b      	ldr	r3, [pc, #492]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009788:	429a      	cmp	r2, r3
 800978a:	d908      	bls.n	800979e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800978c:	4b78      	ldr	r3, [pc, #480]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	4975      	ldr	r1, [pc, #468]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 800979a:	4313      	orrs	r3, r2
 800979c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d010      	beq.n	80097cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695a      	ldr	r2, [r3, #20]
 80097ae:	4b70      	ldr	r3, [pc, #448]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d908      	bls.n	80097cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	496a      	ldr	r1, [pc, #424]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d010      	beq.n	80097fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	699a      	ldr	r2, [r3, #24]
 80097dc:	4b64      	ldr	r3, [pc, #400]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80097de:	69db      	ldr	r3, [r3, #28]
 80097e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d908      	bls.n	80097fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097e8:	4b61      	ldr	r3, [pc, #388]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	495e      	ldr	r1, [pc, #376]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b00      	cmp	r3, #0
 8009804:	d010      	beq.n	8009828 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69da      	ldr	r2, [r3, #28]
 800980a:	4b59      	ldr	r3, [pc, #356]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009812:	429a      	cmp	r2, r3
 8009814:	d908      	bls.n	8009828 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009816:	4b56      	ldr	r3, [pc, #344]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	4953      	ldr	r1, [pc, #332]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 8009824:	4313      	orrs	r3, r2
 8009826:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0302 	and.w	r3, r3, #2
 8009830:	2b00      	cmp	r3, #0
 8009832:	d010      	beq.n	8009856 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68da      	ldr	r2, [r3, #12]
 8009838:	4b4d      	ldr	r3, [pc, #308]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	f003 030f 	and.w	r3, r3, #15
 8009840:	429a      	cmp	r2, r3
 8009842:	d908      	bls.n	8009856 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009844:	4b4a      	ldr	r3, [pc, #296]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	f023 020f 	bic.w	r2, r3, #15
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	4947      	ldr	r1, [pc, #284]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 8009852:	4313      	orrs	r3, r2
 8009854:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d055      	beq.n	800990e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009862:	4b43      	ldr	r3, [pc, #268]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	4940      	ldr	r1, [pc, #256]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 8009870:	4313      	orrs	r3, r2
 8009872:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	2b02      	cmp	r3, #2
 800987a:	d107      	bne.n	800988c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800987c:	4b3c      	ldr	r3, [pc, #240]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d121      	bne.n	80098cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e0f6      	b.n	8009a7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	2b03      	cmp	r3, #3
 8009892:	d107      	bne.n	80098a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009894:	4b36      	ldr	r3, [pc, #216]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d115      	bne.n	80098cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e0ea      	b.n	8009a7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d107      	bne.n	80098bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098ac:	4b30      	ldr	r3, [pc, #192]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d109      	bne.n	80098cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e0de      	b.n	8009a7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098bc:	4b2c      	ldr	r3, [pc, #176]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0304 	and.w	r3, r3, #4
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e0d6      	b.n	8009a7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80098cc:	4b28      	ldr	r3, [pc, #160]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	f023 0207 	bic.w	r2, r3, #7
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	4925      	ldr	r1, [pc, #148]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098de:	f7fc fec5 	bl	800666c <HAL_GetTick>
 80098e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098e4:	e00a      	b.n	80098fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098e6:	f7fc fec1 	bl	800666c <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d901      	bls.n	80098fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e0be      	b.n	8009a7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	00db      	lsls	r3, r3, #3
 800990a:	429a      	cmp	r2, r3
 800990c:	d1eb      	bne.n	80098e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d010      	beq.n	800993c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	4b14      	ldr	r3, [pc, #80]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	f003 030f 	and.w	r3, r3, #15
 8009926:	429a      	cmp	r2, r3
 8009928:	d208      	bcs.n	800993c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800992a:	4b11      	ldr	r3, [pc, #68]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	f023 020f 	bic.w	r2, r3, #15
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	490e      	ldr	r1, [pc, #56]	@ (8009970 <HAL_RCC_ClockConfig+0x244>)
 8009938:	4313      	orrs	r3, r2
 800993a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800993c:	4b0b      	ldr	r3, [pc, #44]	@ (800996c <HAL_RCC_ClockConfig+0x240>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 030f 	and.w	r3, r3, #15
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d214      	bcs.n	8009974 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800994a:	4b08      	ldr	r3, [pc, #32]	@ (800996c <HAL_RCC_ClockConfig+0x240>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f023 020f 	bic.w	r2, r3, #15
 8009952:	4906      	ldr	r1, [pc, #24]	@ (800996c <HAL_RCC_ClockConfig+0x240>)
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	4313      	orrs	r3, r2
 8009958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800995a:	4b04      	ldr	r3, [pc, #16]	@ (800996c <HAL_RCC_ClockConfig+0x240>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 030f 	and.w	r3, r3, #15
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	429a      	cmp	r2, r3
 8009966:	d005      	beq.n	8009974 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e086      	b.n	8009a7a <HAL_RCC_ClockConfig+0x34e>
 800996c:	52002000 	.word	0x52002000
 8009970:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0304 	and.w	r3, r3, #4
 800997c:	2b00      	cmp	r3, #0
 800997e:	d010      	beq.n	80099a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691a      	ldr	r2, [r3, #16]
 8009984:	4b3f      	ldr	r3, [pc, #252]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800998c:	429a      	cmp	r2, r3
 800998e:	d208      	bcs.n	80099a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009990:	4b3c      	ldr	r3, [pc, #240]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	4939      	ldr	r1, [pc, #228]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 0308 	and.w	r3, r3, #8
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d010      	beq.n	80099d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	695a      	ldr	r2, [r3, #20]
 80099b2:	4b34      	ldr	r3, [pc, #208]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d208      	bcs.n	80099d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80099be:	4b31      	ldr	r3, [pc, #196]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	492e      	ldr	r1, [pc, #184]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0310 	and.w	r3, r3, #16
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d010      	beq.n	80099fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	4b28      	ldr	r3, [pc, #160]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d208      	bcs.n	80099fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80099ec:	4b25      	ldr	r3, [pc, #148]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	4922      	ldr	r1, [pc, #136]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d010      	beq.n	8009a2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	69da      	ldr	r2, [r3, #28]
 8009a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d208      	bcs.n	8009a2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	4917      	ldr	r1, [pc, #92]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009a2c:	f000 f834 	bl	8009a98 <HAL_RCC_GetSysClockFreq>
 8009a30:	4602      	mov	r2, r0
 8009a32:	4b14      	ldr	r3, [pc, #80]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	0a1b      	lsrs	r3, r3, #8
 8009a38:	f003 030f 	and.w	r3, r3, #15
 8009a3c:	4912      	ldr	r1, [pc, #72]	@ (8009a88 <HAL_RCC_ClockConfig+0x35c>)
 8009a3e:	5ccb      	ldrb	r3, [r1, r3]
 8009a40:	f003 031f 	and.w	r3, r3, #31
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
 8009a48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a84 <HAL_RCC_ClockConfig+0x358>)
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	f003 030f 	and.w	r3, r3, #15
 8009a52:	4a0d      	ldr	r2, [pc, #52]	@ (8009a88 <HAL_RCC_ClockConfig+0x35c>)
 8009a54:	5cd3      	ldrb	r3, [r2, r3]
 8009a56:	f003 031f 	and.w	r3, r3, #31
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a60:	4a0a      	ldr	r2, [pc, #40]	@ (8009a8c <HAL_RCC_ClockConfig+0x360>)
 8009a62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a64:	4a0a      	ldr	r2, [pc, #40]	@ (8009a90 <HAL_RCC_ClockConfig+0x364>)
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a94 <HAL_RCC_ClockConfig+0x368>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f002 f9da 	bl	800be28 <HAL_InitTick>
 8009a74:	4603      	mov	r3, r0
 8009a76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	58024400 	.word	0x58024400
 8009a88:	0800db0c 	.word	0x0800db0c
 8009a8c:	24000044 	.word	0x24000044
 8009a90:	24000040 	.word	0x24000040
 8009a94:	2400006c 	.word	0x2400006c

08009a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b089      	sub	sp, #36	@ 0x24
 8009a9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a9e:	4bb3      	ldr	r3, [pc, #716]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009aa6:	2b18      	cmp	r3, #24
 8009aa8:	f200 8155 	bhi.w	8009d56 <HAL_RCC_GetSysClockFreq+0x2be>
 8009aac:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009b19 	.word	0x08009b19
 8009ab8:	08009d57 	.word	0x08009d57
 8009abc:	08009d57 	.word	0x08009d57
 8009ac0:	08009d57 	.word	0x08009d57
 8009ac4:	08009d57 	.word	0x08009d57
 8009ac8:	08009d57 	.word	0x08009d57
 8009acc:	08009d57 	.word	0x08009d57
 8009ad0:	08009d57 	.word	0x08009d57
 8009ad4:	08009b3f 	.word	0x08009b3f
 8009ad8:	08009d57 	.word	0x08009d57
 8009adc:	08009d57 	.word	0x08009d57
 8009ae0:	08009d57 	.word	0x08009d57
 8009ae4:	08009d57 	.word	0x08009d57
 8009ae8:	08009d57 	.word	0x08009d57
 8009aec:	08009d57 	.word	0x08009d57
 8009af0:	08009d57 	.word	0x08009d57
 8009af4:	08009b45 	.word	0x08009b45
 8009af8:	08009d57 	.word	0x08009d57
 8009afc:	08009d57 	.word	0x08009d57
 8009b00:	08009d57 	.word	0x08009d57
 8009b04:	08009d57 	.word	0x08009d57
 8009b08:	08009d57 	.word	0x08009d57
 8009b0c:	08009d57 	.word	0x08009d57
 8009b10:	08009d57 	.word	0x08009d57
 8009b14:	08009b4b 	.word	0x08009b4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b18:	4b94      	ldr	r3, [pc, #592]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d009      	beq.n	8009b38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b24:	4b91      	ldr	r3, [pc, #580]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	08db      	lsrs	r3, r3, #3
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	4a90      	ldr	r2, [pc, #576]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b30:	fa22 f303 	lsr.w	r3, r2, r3
 8009b34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009b36:	e111      	b.n	8009d5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009b38:	4b8d      	ldr	r3, [pc, #564]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b3a:	61bb      	str	r3, [r7, #24]
      break;
 8009b3c:	e10e      	b.n	8009d5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009b3e:	4b8d      	ldr	r3, [pc, #564]	@ (8009d74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b40:	61bb      	str	r3, [r7, #24]
      break;
 8009b42:	e10b      	b.n	8009d5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009b44:	4b8c      	ldr	r3, [pc, #560]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009b46:	61bb      	str	r3, [r7, #24]
      break;
 8009b48:	e108      	b.n	8009d5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b4a:	4b88      	ldr	r3, [pc, #544]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009b54:	4b85      	ldr	r3, [pc, #532]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b58:	091b      	lsrs	r3, r3, #4
 8009b5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b60:	4b82      	ldr	r3, [pc, #520]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b6a:	4b80      	ldr	r3, [pc, #512]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b6e:	08db      	lsrs	r3, r3, #3
 8009b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	fb02 f303 	mul.w	r3, r2, r3
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 80e1 	beq.w	8009d50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	f000 8083 	beq.w	8009c9c <HAL_RCC_GetSysClockFreq+0x204>
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	f200 80a1 	bhi.w	8009ce0 <HAL_RCC_GetSysClockFreq+0x248>
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <HAL_RCC_GetSysClockFreq+0x114>
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d056      	beq.n	8009c58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009baa:	e099      	b.n	8009ce0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bac:	4b6f      	ldr	r3, [pc, #444]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0320 	and.w	r3, r3, #32
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d02d      	beq.n	8009c14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	08db      	lsrs	r3, r3, #3
 8009bbe:	f003 0303 	and.w	r3, r3, #3
 8009bc2:	4a6b      	ldr	r2, [pc, #428]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	ee07 3a90 	vmov	s15, r3
 8009bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be2:	4b62      	ldr	r3, [pc, #392]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bf6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009c12:	e087      	b.n	8009d24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009d80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c26:	4b51      	ldr	r3, [pc, #324]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c56:	e065      	b.n	8009d24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009d84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c6a:	4b40      	ldr	r3, [pc, #256]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c72:	ee07 3a90 	vmov	s15, r3
 8009c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c9a:	e043      	b.n	8009d24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009d88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cae:	4b2f      	ldr	r3, [pc, #188]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009cde:	e021      	b.n	8009d24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009d84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009d24:	4b11      	ldr	r3, [pc, #68]	@ (8009d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d28:	0a5b      	lsrs	r3, r3, #9
 8009d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d2e:	3301      	adds	r3, #1
 8009d30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	ee07 3a90 	vmov	s15, r3
 8009d38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d48:	ee17 3a90 	vmov	r3, s15
 8009d4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009d4e:	e005      	b.n	8009d5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009d50:	2300      	movs	r3, #0
 8009d52:	61bb      	str	r3, [r7, #24]
      break;
 8009d54:	e002      	b.n	8009d5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009d56:	4b07      	ldr	r3, [pc, #28]	@ (8009d74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d58:	61bb      	str	r3, [r7, #24]
      break;
 8009d5a:	bf00      	nop
  }

  return sysclockfreq;
 8009d5c:	69bb      	ldr	r3, [r7, #24]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3724      	adds	r7, #36	@ 0x24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	58024400 	.word	0x58024400
 8009d70:	03d09000 	.word	0x03d09000
 8009d74:	003d0900 	.word	0x003d0900
 8009d78:	017d7840 	.word	0x017d7840
 8009d7c:	46000000 	.word	0x46000000
 8009d80:	4c742400 	.word	0x4c742400
 8009d84:	4a742400 	.word	0x4a742400
 8009d88:	4bbebc20 	.word	0x4bbebc20

08009d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d92:	f7ff fe81 	bl	8009a98 <HAL_RCC_GetSysClockFreq>
 8009d96:	4602      	mov	r2, r0
 8009d98:	4b10      	ldr	r3, [pc, #64]	@ (8009ddc <HAL_RCC_GetHCLKFreq+0x50>)
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	0a1b      	lsrs	r3, r3, #8
 8009d9e:	f003 030f 	and.w	r3, r3, #15
 8009da2:	490f      	ldr	r1, [pc, #60]	@ (8009de0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009da4:	5ccb      	ldrb	r3, [r1, r3]
 8009da6:	f003 031f 	and.w	r3, r3, #31
 8009daa:	fa22 f303 	lsr.w	r3, r2, r3
 8009dae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009db0:	4b0a      	ldr	r3, [pc, #40]	@ (8009ddc <HAL_RCC_GetHCLKFreq+0x50>)
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	4a09      	ldr	r2, [pc, #36]	@ (8009de0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009dba:	5cd3      	ldrb	r3, [r2, r3]
 8009dbc:	f003 031f 	and.w	r3, r3, #31
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc6:	4a07      	ldr	r2, [pc, #28]	@ (8009de4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009dc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009dca:	4a07      	ldr	r2, [pc, #28]	@ (8009de8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009dd0:	4b04      	ldr	r3, [pc, #16]	@ (8009de4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	58024400 	.word	0x58024400
 8009de0:	0800db0c 	.word	0x0800db0c
 8009de4:	24000044 	.word	0x24000044
 8009de8:	24000040 	.word	0x24000040

08009dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009df0:	f7ff ffcc 	bl	8009d8c <HAL_RCC_GetHCLKFreq>
 8009df4:	4602      	mov	r2, r0
 8009df6:	4b06      	ldr	r3, [pc, #24]	@ (8009e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	091b      	lsrs	r3, r3, #4
 8009dfc:	f003 0307 	and.w	r3, r3, #7
 8009e00:	4904      	ldr	r1, [pc, #16]	@ (8009e14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e02:	5ccb      	ldrb	r3, [r1, r3]
 8009e04:	f003 031f 	and.w	r3, r3, #31
 8009e08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	58024400 	.word	0x58024400
 8009e14:	0800db0c 	.word	0x0800db0c

08009e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009e1c:	f7ff ffb6 	bl	8009d8c <HAL_RCC_GetHCLKFreq>
 8009e20:	4602      	mov	r2, r0
 8009e22:	4b06      	ldr	r3, [pc, #24]	@ (8009e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e24:	69db      	ldr	r3, [r3, #28]
 8009e26:	0a1b      	lsrs	r3, r3, #8
 8009e28:	f003 0307 	and.w	r3, r3, #7
 8009e2c:	4904      	ldr	r1, [pc, #16]	@ (8009e40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e2e:	5ccb      	ldrb	r3, [r1, r3]
 8009e30:	f003 031f 	and.w	r3, r3, #31
 8009e34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	58024400 	.word	0x58024400
 8009e40:	0800db0c 	.word	0x0800db0c

08009e44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	223f      	movs	r2, #63	@ 0x3f
 8009e52:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009e54:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec0 <HAL_RCC_GetClockConfig+0x7c>)
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	f003 0207 	and.w	r2, r3, #7
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009e60:	4b17      	ldr	r3, [pc, #92]	@ (8009ec0 <HAL_RCC_GetClockConfig+0x7c>)
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009e6c:	4b14      	ldr	r3, [pc, #80]	@ (8009ec0 <HAL_RCC_GetClockConfig+0x7c>)
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	f003 020f 	and.w	r2, r3, #15
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009e78:	4b11      	ldr	r3, [pc, #68]	@ (8009ec0 <HAL_RCC_GetClockConfig+0x7c>)
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009e84:	4b0e      	ldr	r3, [pc, #56]	@ (8009ec0 <HAL_RCC_GetClockConfig+0x7c>)
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009e90:	4b0b      	ldr	r3, [pc, #44]	@ (8009ec0 <HAL_RCC_GetClockConfig+0x7c>)
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009e9c:	4b08      	ldr	r3, [pc, #32]	@ (8009ec0 <HAL_RCC_GetClockConfig+0x7c>)
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ea8:	4b06      	ldr	r3, [pc, #24]	@ (8009ec4 <HAL_RCC_GetClockConfig+0x80>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 020f 	and.w	r2, r3, #15
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	601a      	str	r2, [r3, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	58024400 	.word	0x58024400
 8009ec4:	52002000 	.word	0x52002000

08009ec8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ecc:	b0ca      	sub	sp, #296	@ 0x128
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009eda:	2300      	movs	r3, #0
 8009edc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009eec:	2500      	movs	r5, #0
 8009eee:	ea54 0305 	orrs.w	r3, r4, r5
 8009ef2:	d049      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009efa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009efe:	d02f      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009f00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f04:	d828      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009f06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f0a:	d01a      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009f0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f10:	d822      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f1a:	d007      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009f1c:	e01c      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f1e:	4bb8      	ldr	r3, [pc, #736]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f22:	4ab7      	ldr	r2, [pc, #732]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f2a:	e01a      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f30:	3308      	adds	r3, #8
 8009f32:	2102      	movs	r1, #2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f001 f9d1 	bl	800b2dc <RCCEx_PLL2_Config>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f40:	e00f      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f46:	3328      	adds	r3, #40	@ 0x28
 8009f48:	2102      	movs	r1, #2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f001 fa78 	bl	800b440 <RCCEx_PLL3_Config>
 8009f50:	4603      	mov	r3, r0
 8009f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f56:	e004      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f5e:	e000      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10a      	bne.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009f6a:	4ba5      	ldr	r3, [pc, #660]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f78:	4aa1      	ldr	r2, [pc, #644]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f7a:	430b      	orrs	r3, r1
 8009f7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f7e:	e003      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009f94:	f04f 0900 	mov.w	r9, #0
 8009f98:	ea58 0309 	orrs.w	r3, r8, r9
 8009f9c:	d047      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d82a      	bhi.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fae:	bf00      	nop
 8009fb0:	08009fc5 	.word	0x08009fc5
 8009fb4:	08009fd3 	.word	0x08009fd3
 8009fb8:	08009fe9 	.word	0x08009fe9
 8009fbc:	0800a007 	.word	0x0800a007
 8009fc0:	0800a007 	.word	0x0800a007
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc4:	4b8e      	ldr	r3, [pc, #568]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc8:	4a8d      	ldr	r2, [pc, #564]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fd0:	e01a      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 f97e 	bl	800b2dc <RCCEx_PLL2_Config>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fe6:	e00f      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fec:	3328      	adds	r3, #40	@ 0x28
 8009fee:	2100      	movs	r1, #0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 fa25 	bl	800b440 <RCCEx_PLL3_Config>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ffc:	e004      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a004:	e000      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a006:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a010:	4b7b      	ldr	r3, [pc, #492]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a014:	f023 0107 	bic.w	r1, r3, #7
 800a018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a01c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a01e:	4a78      	ldr	r2, [pc, #480]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a020:	430b      	orrs	r3, r1
 800a022:	6513      	str	r3, [r2, #80]	@ 0x50
 800a024:	e003      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a02a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a03a:	f04f 0b00 	mov.w	fp, #0
 800a03e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a042:	d04c      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a04a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a04e:	d030      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a054:	d829      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a056:	2bc0      	cmp	r3, #192	@ 0xc0
 800a058:	d02d      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a05a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a05c:	d825      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a05e:	2b80      	cmp	r3, #128	@ 0x80
 800a060:	d018      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a062:	2b80      	cmp	r3, #128	@ 0x80
 800a064:	d821      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a06a:	2b40      	cmp	r3, #64	@ 0x40
 800a06c:	d007      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a06e:	e01c      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a070:	4b63      	ldr	r3, [pc, #396]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a074:	4a62      	ldr	r2, [pc, #392]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a07a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a07c:	e01c      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a082:	3308      	adds	r3, #8
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f001 f928 	bl	800b2dc <RCCEx_PLL2_Config>
 800a08c:	4603      	mov	r3, r0
 800a08e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a092:	e011      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a098:	3328      	adds	r3, #40	@ 0x28
 800a09a:	2100      	movs	r1, #0
 800a09c:	4618      	mov	r0, r3
 800a09e:	f001 f9cf 	bl	800b440 <RCCEx_PLL3_Config>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a0a8:	e006      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0b0:	e002      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a0b2:	bf00      	nop
 800a0b4:	e000      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a0b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10a      	bne.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a0c0:	4b4f      	ldr	r3, [pc, #316]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0ce:	4a4c      	ldr	r2, [pc, #304]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0d0:	430b      	orrs	r3, r1
 800a0d2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a0d4:	e003      	b.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a0ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a0f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	d053      	beq.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a102:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a106:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a10a:	d035      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a10c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a110:	d82e      	bhi.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a112:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a116:	d031      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a118:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a11c:	d828      	bhi.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a11e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a122:	d01a      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a128:	d822      	bhi.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a12e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a132:	d007      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a134:	e01c      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a136:	4b32      	ldr	r3, [pc, #200]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a13a:	4a31      	ldr	r2, [pc, #196]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a13c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a142:	e01c      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a148:	3308      	adds	r3, #8
 800a14a:	2100      	movs	r1, #0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f001 f8c5 	bl	800b2dc <RCCEx_PLL2_Config>
 800a152:	4603      	mov	r3, r0
 800a154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a158:	e011      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a15e:	3328      	adds	r3, #40	@ 0x28
 800a160:	2100      	movs	r1, #0
 800a162:	4618      	mov	r0, r3
 800a164:	f001 f96c 	bl	800b440 <RCCEx_PLL3_Config>
 800a168:	4603      	mov	r3, r0
 800a16a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a16e:	e006      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a176:	e002      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a178:	bf00      	nop
 800a17a:	e000      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a17c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a17e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10b      	bne.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a186:	4b1e      	ldr	r3, [pc, #120]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a18a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a192:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a196:	4a1a      	ldr	r2, [pc, #104]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a198:	430b      	orrs	r3, r1
 800a19a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a19c:	e003      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a19e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a1b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a1bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	d056      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a1ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a1d2:	d038      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a1d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a1d8:	d831      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a1da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a1de:	d034      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a1e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a1e4:	d82b      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a1e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1ea:	d01d      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a1ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1f0:	d825      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d006      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a1f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1fa:	d00a      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a1fc:	e01f      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a1fe:	bf00      	nop
 800a200:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a204:	4ba2      	ldr	r3, [pc, #648]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a208:	4aa1      	ldr	r2, [pc, #644]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a20a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a20e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a210:	e01c      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a216:	3308      	adds	r3, #8
 800a218:	2100      	movs	r1, #0
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 f85e 	bl	800b2dc <RCCEx_PLL2_Config>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a226:	e011      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22c:	3328      	adds	r3, #40	@ 0x28
 800a22e:	2100      	movs	r1, #0
 800a230:	4618      	mov	r0, r3
 800a232:	f001 f905 	bl	800b440 <RCCEx_PLL3_Config>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a23c:	e006      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a244:	e002      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a246:	bf00      	nop
 800a248:	e000      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a24a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a24c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10b      	bne.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a254:	4b8e      	ldr	r3, [pc, #568]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a258:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a260:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a264:	4a8a      	ldr	r2, [pc, #552]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a266:	430b      	orrs	r3, r1
 800a268:	6593      	str	r3, [r2, #88]	@ 0x58
 800a26a:	e003      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a270:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a280:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a284:	2300      	movs	r3, #0
 800a286:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a28a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a28e:	460b      	mov	r3, r1
 800a290:	4313      	orrs	r3, r2
 800a292:	d03a      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a29a:	2b30      	cmp	r3, #48	@ 0x30
 800a29c:	d01f      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a29e:	2b30      	cmp	r3, #48	@ 0x30
 800a2a0:	d819      	bhi.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a2a2:	2b20      	cmp	r3, #32
 800a2a4:	d00c      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d815      	bhi.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d019      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a2ae:	2b10      	cmp	r3, #16
 800a2b0:	d111      	bne.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2b2:	4b77      	ldr	r3, [pc, #476]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b6:	4a76      	ldr	r2, [pc, #472]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a2be:	e011      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c4:	3308      	adds	r3, #8
 800a2c6:	2102      	movs	r1, #2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f001 f807 	bl	800b2dc <RCCEx_PLL2_Config>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a2d4:	e006      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2dc:	e002      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a2e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10a      	bne.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a2ec:	4b68      	ldr	r3, [pc, #416]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2fa:	4a65      	ldr	r2, [pc, #404]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a300:	e003      	b.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a316:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a31a:	2300      	movs	r3, #0
 800a31c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a320:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a324:	460b      	mov	r3, r1
 800a326:	4313      	orrs	r3, r2
 800a328:	d051      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a32e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a334:	d035      	beq.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a33a:	d82e      	bhi.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a33c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a340:	d031      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a342:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a346:	d828      	bhi.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a34c:	d01a      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a34e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a352:	d822      	bhi.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d003      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a35c:	d007      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a35e:	e01c      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a360:	4b4b      	ldr	r3, [pc, #300]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a364:	4a4a      	ldr	r2, [pc, #296]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a36a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a36c:	e01c      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a372:	3308      	adds	r3, #8
 800a374:	2100      	movs	r1, #0
 800a376:	4618      	mov	r0, r3
 800a378:	f000 ffb0 	bl	800b2dc <RCCEx_PLL2_Config>
 800a37c:	4603      	mov	r3, r0
 800a37e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a382:	e011      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a388:	3328      	adds	r3, #40	@ 0x28
 800a38a:	2100      	movs	r1, #0
 800a38c:	4618      	mov	r0, r3
 800a38e:	f001 f857 	bl	800b440 <RCCEx_PLL3_Config>
 800a392:	4603      	mov	r3, r0
 800a394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a398:	e006      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3a0:	e002      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a3a2:	bf00      	nop
 800a3a4:	e000      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a3a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10a      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a3b0:	4b37      	ldr	r3, [pc, #220]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a3b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3be:	4a34      	ldr	r2, [pc, #208]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a3c4:	e003      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a3da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a3e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	d056      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3f8:	d033      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a3fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3fe:	d82c      	bhi.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a400:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a404:	d02f      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a406:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a40a:	d826      	bhi.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a40c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a410:	d02b      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a412:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a416:	d820      	bhi.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a41c:	d012      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a41e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a422:	d81a      	bhi.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a424:	2b00      	cmp	r3, #0
 800a426:	d022      	beq.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a42c:	d115      	bne.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a432:	3308      	adds	r3, #8
 800a434:	2101      	movs	r1, #1
 800a436:	4618      	mov	r0, r3
 800a438:	f000 ff50 	bl	800b2dc <RCCEx_PLL2_Config>
 800a43c:	4603      	mov	r3, r0
 800a43e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a442:	e015      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a448:	3328      	adds	r3, #40	@ 0x28
 800a44a:	2101      	movs	r1, #1
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fff7 	bl	800b440 <RCCEx_PLL3_Config>
 800a452:	4603      	mov	r3, r0
 800a454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a458:	e00a      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a460:	e006      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a462:	bf00      	nop
 800a464:	e004      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a466:	bf00      	nop
 800a468:	e002      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a46a:	bf00      	nop
 800a46c:	e000      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a46e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10d      	bne.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a478:	4b05      	ldr	r3, [pc, #20]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a47a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a47c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a486:	4a02      	ldr	r2, [pc, #8]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a488:	430b      	orrs	r3, r1
 800a48a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a48c:	e006      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a48e:	bf00      	nop
 800a490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a4a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a4b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	d055      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4c8:	d033      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a4ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4ce:	d82c      	bhi.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4d4:	d02f      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4da:	d826      	bhi.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a4dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4e0:	d02b      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a4e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4e6:	d820      	bhi.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a4e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4ec:	d012      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a4ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f2:	d81a      	bhi.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d022      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a4f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4fc:	d115      	bne.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a502:	3308      	adds	r3, #8
 800a504:	2101      	movs	r1, #1
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fee8 	bl	800b2dc <RCCEx_PLL2_Config>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a512:	e015      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a518:	3328      	adds	r3, #40	@ 0x28
 800a51a:	2101      	movs	r1, #1
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 ff8f 	bl	800b440 <RCCEx_PLL3_Config>
 800a522:	4603      	mov	r3, r0
 800a524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a528:	e00a      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a530:	e006      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a532:	bf00      	nop
 800a534:	e004      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a536:	bf00      	nop
 800a538:	e002      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a53a:	bf00      	nop
 800a53c:	e000      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a53e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10b      	bne.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a548:	4ba3      	ldr	r3, [pc, #652]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a54a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a54c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a558:	4a9f      	ldr	r2, [pc, #636]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a55a:	430b      	orrs	r3, r1
 800a55c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a55e:	e003      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a564:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a574:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a578:	2300      	movs	r3, #0
 800a57a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a57e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a582:	460b      	mov	r3, r1
 800a584:	4313      	orrs	r3, r2
 800a586:	d037      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a58c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a58e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a592:	d00e      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a598:	d816      	bhi.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d018      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a59e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5a2:	d111      	bne.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5a4:	4b8c      	ldr	r3, [pc, #560]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a8:	4a8b      	ldr	r2, [pc, #556]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a5b0:	e00f      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fe8e 	bl	800b2dc <RCCEx_PLL2_Config>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a5c6:	e004      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a5ce:	e000      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a5d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10a      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a5da:	4b7f      	ldr	r3, [pc, #508]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5e8:	4a7b      	ldr	r2, [pc, #492]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	6513      	str	r3, [r2, #80]	@ 0x50
 800a5ee:	e003      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a608:	2300      	movs	r3, #0
 800a60a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a60e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a612:	460b      	mov	r3, r1
 800a614:	4313      	orrs	r3, r2
 800a616:	d039      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a61c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d81c      	bhi.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a622:	a201      	add	r2, pc, #4	@ (adr r2, 800a628 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a628:	0800a665 	.word	0x0800a665
 800a62c:	0800a639 	.word	0x0800a639
 800a630:	0800a647 	.word	0x0800a647
 800a634:	0800a665 	.word	0x0800a665
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a638:	4b67      	ldr	r3, [pc, #412]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63c:	4a66      	ldr	r2, [pc, #408]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a63e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a644:	e00f      	b.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a64a:	3308      	adds	r3, #8
 800a64c:	2102      	movs	r1, #2
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 fe44 	bl	800b2dc <RCCEx_PLL2_Config>
 800a654:	4603      	mov	r3, r0
 800a656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a65a:	e004      	b.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a662:	e000      	b.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a664:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10a      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a66e:	4b5a      	ldr	r3, [pc, #360]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a672:	f023 0103 	bic.w	r1, r3, #3
 800a676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a67a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a67c:	4a56      	ldr	r2, [pc, #344]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a67e:	430b      	orrs	r3, r1
 800a680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a682:	e003      	b.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a698:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a69c:	2300      	movs	r3, #0
 800a69e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a6a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	f000 809f 	beq.w	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a6ae:	4b4b      	ldr	r3, [pc, #300]	@ (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a4a      	ldr	r2, [pc, #296]	@ (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a6b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a6ba:	f7fb ffd7 	bl	800666c <HAL_GetTick>
 800a6be:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6c2:	e00b      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6c4:	f7fb ffd2 	bl	800666c <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	2b64      	cmp	r3, #100	@ 0x64
 800a6d2:	d903      	bls.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a6da:	e005      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6dc:	4b3f      	ldr	r3, [pc, #252]	@ (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d0ed      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a6e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d179      	bne.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a6f0:	4b39      	ldr	r3, [pc, #228]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a6fc:	4053      	eors	r3, r2
 800a6fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a702:	2b00      	cmp	r3, #0
 800a704:	d015      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a706:	4b34      	ldr	r3, [pc, #208]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a70a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a70e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a712:	4b31      	ldr	r3, [pc, #196]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a716:	4a30      	ldr	r2, [pc, #192]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a71c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a71e:	4b2e      	ldr	r3, [pc, #184]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a722:	4a2d      	ldr	r2, [pc, #180]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a728:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a72a:	4a2b      	ldr	r2, [pc, #172]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a72c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a730:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a736:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a73a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a73e:	d118      	bne.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a740:	f7fb ff94 	bl	800666c <HAL_GetTick>
 800a744:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a748:	e00d      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a74a:	f7fb ff8f 	bl	800666c <HAL_GetTick>
 800a74e:	4602      	mov	r2, r0
 800a750:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a754:	1ad2      	subs	r2, r2, r3
 800a756:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d903      	bls.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a764:	e005      	b.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a766:	4b1c      	ldr	r3, [pc, #112]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0eb      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a776:	2b00      	cmp	r3, #0
 800a778:	d129      	bne.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a77e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a78a:	d10e      	bne.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a78c:	4b12      	ldr	r3, [pc, #72]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a798:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a79c:	091a      	lsrs	r2, r3, #4
 800a79e:	4b10      	ldr	r3, [pc, #64]	@ (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	4a0d      	ldr	r2, [pc, #52]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a7a4:	430b      	orrs	r3, r1
 800a7a6:	6113      	str	r3, [r2, #16]
 800a7a8:	e005      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a7aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	4a0a      	ldr	r2, [pc, #40]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a7b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a7b4:	6113      	str	r3, [r2, #16]
 800a7b6:	4b08      	ldr	r3, [pc, #32]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a7b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a7c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7c6:	4a04      	ldr	r2, [pc, #16]	@ (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7cc:	e00e      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a7ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a7d6:	e009      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a7d8:	58024400 	.word	0x58024400
 800a7dc:	58024800 	.word	0x58024800
 800a7e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f002 0301 	and.w	r3, r2, #1
 800a7f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a802:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a806:	460b      	mov	r3, r1
 800a808:	4313      	orrs	r3, r2
 800a80a:	f000 8089 	beq.w	800a920 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a814:	2b28      	cmp	r3, #40	@ 0x28
 800a816:	d86b      	bhi.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a818:	a201      	add	r2, pc, #4	@ (adr r2, 800a820 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81e:	bf00      	nop
 800a820:	0800a8f9 	.word	0x0800a8f9
 800a824:	0800a8f1 	.word	0x0800a8f1
 800a828:	0800a8f1 	.word	0x0800a8f1
 800a82c:	0800a8f1 	.word	0x0800a8f1
 800a830:	0800a8f1 	.word	0x0800a8f1
 800a834:	0800a8f1 	.word	0x0800a8f1
 800a838:	0800a8f1 	.word	0x0800a8f1
 800a83c:	0800a8f1 	.word	0x0800a8f1
 800a840:	0800a8c5 	.word	0x0800a8c5
 800a844:	0800a8f1 	.word	0x0800a8f1
 800a848:	0800a8f1 	.word	0x0800a8f1
 800a84c:	0800a8f1 	.word	0x0800a8f1
 800a850:	0800a8f1 	.word	0x0800a8f1
 800a854:	0800a8f1 	.word	0x0800a8f1
 800a858:	0800a8f1 	.word	0x0800a8f1
 800a85c:	0800a8f1 	.word	0x0800a8f1
 800a860:	0800a8db 	.word	0x0800a8db
 800a864:	0800a8f1 	.word	0x0800a8f1
 800a868:	0800a8f1 	.word	0x0800a8f1
 800a86c:	0800a8f1 	.word	0x0800a8f1
 800a870:	0800a8f1 	.word	0x0800a8f1
 800a874:	0800a8f1 	.word	0x0800a8f1
 800a878:	0800a8f1 	.word	0x0800a8f1
 800a87c:	0800a8f1 	.word	0x0800a8f1
 800a880:	0800a8f9 	.word	0x0800a8f9
 800a884:	0800a8f1 	.word	0x0800a8f1
 800a888:	0800a8f1 	.word	0x0800a8f1
 800a88c:	0800a8f1 	.word	0x0800a8f1
 800a890:	0800a8f1 	.word	0x0800a8f1
 800a894:	0800a8f1 	.word	0x0800a8f1
 800a898:	0800a8f1 	.word	0x0800a8f1
 800a89c:	0800a8f1 	.word	0x0800a8f1
 800a8a0:	0800a8f9 	.word	0x0800a8f9
 800a8a4:	0800a8f1 	.word	0x0800a8f1
 800a8a8:	0800a8f1 	.word	0x0800a8f1
 800a8ac:	0800a8f1 	.word	0x0800a8f1
 800a8b0:	0800a8f1 	.word	0x0800a8f1
 800a8b4:	0800a8f1 	.word	0x0800a8f1
 800a8b8:	0800a8f1 	.word	0x0800a8f1
 800a8bc:	0800a8f1 	.word	0x0800a8f1
 800a8c0:	0800a8f9 	.word	0x0800a8f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fd05 	bl	800b2dc <RCCEx_PLL2_Config>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a8d8:	e00f      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8de:	3328      	adds	r3, #40	@ 0x28
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 fdac 	bl	800b440 <RCCEx_PLL3_Config>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a8ee:	e004      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a8f6:	e000      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10a      	bne.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a902:	4bbf      	ldr	r3, [pc, #764]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a906:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a90e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a910:	4abb      	ldr	r2, [pc, #748]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a912:	430b      	orrs	r3, r1
 800a914:	6553      	str	r3, [r2, #84]	@ 0x54
 800a916:	e003      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a91c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	f002 0302 	and.w	r3, r2, #2
 800a92c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a930:	2300      	movs	r3, #0
 800a932:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a936:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a93a:	460b      	mov	r3, r1
 800a93c:	4313      	orrs	r3, r2
 800a93e:	d041      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a946:	2b05      	cmp	r3, #5
 800a948:	d824      	bhi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a94a:	a201      	add	r2, pc, #4	@ (adr r2, 800a950 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a950:	0800a99d 	.word	0x0800a99d
 800a954:	0800a969 	.word	0x0800a969
 800a958:	0800a97f 	.word	0x0800a97f
 800a95c:	0800a99d 	.word	0x0800a99d
 800a960:	0800a99d 	.word	0x0800a99d
 800a964:	0800a99d 	.word	0x0800a99d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a96c:	3308      	adds	r3, #8
 800a96e:	2101      	movs	r1, #1
 800a970:	4618      	mov	r0, r3
 800a972:	f000 fcb3 	bl	800b2dc <RCCEx_PLL2_Config>
 800a976:	4603      	mov	r3, r0
 800a978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a97c:	e00f      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a982:	3328      	adds	r3, #40	@ 0x28
 800a984:	2101      	movs	r1, #1
 800a986:	4618      	mov	r0, r3
 800a988:	f000 fd5a 	bl	800b440 <RCCEx_PLL3_Config>
 800a98c:	4603      	mov	r3, r0
 800a98e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a992:	e004      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a99a:	e000      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a99c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a99e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a9a6:	4b96      	ldr	r3, [pc, #600]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9aa:	f023 0107 	bic.w	r1, r3, #7
 800a9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9b4:	4a92      	ldr	r2, [pc, #584]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9b6:	430b      	orrs	r3, r1
 800a9b8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a9ba:	e003      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	f002 0304 	and.w	r3, r2, #4
 800a9d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a9da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	d044      	beq.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9ec:	2b05      	cmp	r3, #5
 800a9ee:	d825      	bhi.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a9f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f6:	bf00      	nop
 800a9f8:	0800aa45 	.word	0x0800aa45
 800a9fc:	0800aa11 	.word	0x0800aa11
 800aa00:	0800aa27 	.word	0x0800aa27
 800aa04:	0800aa45 	.word	0x0800aa45
 800aa08:	0800aa45 	.word	0x0800aa45
 800aa0c:	0800aa45 	.word	0x0800aa45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa14:	3308      	adds	r3, #8
 800aa16:	2101      	movs	r1, #1
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fc5f 	bl	800b2dc <RCCEx_PLL2_Config>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800aa24:	e00f      	b.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa2a:	3328      	adds	r3, #40	@ 0x28
 800aa2c:	2101      	movs	r1, #1
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 fd06 	bl	800b440 <RCCEx_PLL3_Config>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800aa3a:	e004      	b.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa42:	e000      	b.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800aa44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10b      	bne.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aa4e:	4b6c      	ldr	r3, [pc, #432]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa52:	f023 0107 	bic.w	r1, r3, #7
 800aa56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa5e:	4a68      	ldr	r2, [pc, #416]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa60:	430b      	orrs	r3, r1
 800aa62:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa64:	e003      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aa6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa76:	f002 0320 	and.w	r3, r2, #32
 800aa7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	d055      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800aa8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa9a:	d033      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800aa9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aaa0:	d82c      	bhi.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aaa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaa6:	d02f      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800aaa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaac:	d826      	bhi.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aaae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aab2:	d02b      	beq.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800aab4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aab8:	d820      	bhi.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aaba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aabe:	d012      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800aac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aac4:	d81a      	bhi.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d022      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800aaca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aace:	d115      	bne.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad4:	3308      	adds	r3, #8
 800aad6:	2100      	movs	r1, #0
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 fbff 	bl	800b2dc <RCCEx_PLL2_Config>
 800aade:	4603      	mov	r3, r0
 800aae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aae4:	e015      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaea:	3328      	adds	r3, #40	@ 0x28
 800aaec:	2102      	movs	r1, #2
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 fca6 	bl	800b440 <RCCEx_PLL3_Config>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aafa:	e00a      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab02:	e006      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ab04:	bf00      	nop
 800ab06:	e004      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ab08:	bf00      	nop
 800ab0a:	e002      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ab0c:	bf00      	nop
 800ab0e:	e000      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ab10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10b      	bne.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab1a:	4b39      	ldr	r3, [pc, #228]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab1e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ab22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab2a:	4a35      	ldr	r2, [pc, #212]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab2c:	430b      	orrs	r3, r1
 800ab2e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ab30:	e003      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ab3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab42:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ab46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ab50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4313      	orrs	r3, r2
 800ab58:	d058      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ab5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab62:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ab66:	d033      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ab68:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ab6c:	d82c      	bhi.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ab6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab72:	d02f      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ab74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab78:	d826      	bhi.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ab7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab7e:	d02b      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ab80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab84:	d820      	bhi.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ab86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab8a:	d012      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ab8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab90:	d81a      	bhi.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d022      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ab96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab9a:	d115      	bne.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba0:	3308      	adds	r3, #8
 800aba2:	2100      	movs	r1, #0
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 fb99 	bl	800b2dc <RCCEx_PLL2_Config>
 800abaa:	4603      	mov	r3, r0
 800abac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800abb0:	e015      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abb6:	3328      	adds	r3, #40	@ 0x28
 800abb8:	2102      	movs	r1, #2
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 fc40 	bl	800b440 <RCCEx_PLL3_Config>
 800abc0:	4603      	mov	r3, r0
 800abc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800abc6:	e00a      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800abce:	e006      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800abd0:	bf00      	nop
 800abd2:	e004      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800abd4:	bf00      	nop
 800abd6:	e002      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800abd8:	bf00      	nop
 800abda:	e000      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800abdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10e      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800abe6:	4b06      	ldr	r3, [pc, #24]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800abe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800abee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abf6:	4a02      	ldr	r2, [pc, #8]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800abf8:	430b      	orrs	r3, r1
 800abfa:	6593      	str	r3, [r2, #88]	@ 0x58
 800abfc:	e006      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800abfe:	bf00      	nop
 800ac00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ac0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ac18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ac22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ac26:	460b      	mov	r3, r1
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	d055      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ac2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac34:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ac38:	d033      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ac3a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ac3e:	d82c      	bhi.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ac40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac44:	d02f      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ac46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac4a:	d826      	bhi.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ac4c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ac50:	d02b      	beq.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ac52:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ac56:	d820      	bhi.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ac58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac5c:	d012      	beq.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ac5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac62:	d81a      	bhi.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d022      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ac68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac6c:	d115      	bne.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac72:	3308      	adds	r3, #8
 800ac74:	2100      	movs	r1, #0
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 fb30 	bl	800b2dc <RCCEx_PLL2_Config>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ac82:	e015      	b.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac88:	3328      	adds	r3, #40	@ 0x28
 800ac8a:	2102      	movs	r1, #2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 fbd7 	bl	800b440 <RCCEx_PLL3_Config>
 800ac92:	4603      	mov	r3, r0
 800ac94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ac98:	e00a      	b.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aca0:	e006      	b.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aca2:	bf00      	nop
 800aca4:	e004      	b.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aca6:	bf00      	nop
 800aca8:	e002      	b.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800acaa:	bf00      	nop
 800acac:	e000      	b.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800acae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10b      	bne.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800acb8:	4ba1      	ldr	r3, [pc, #644]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acbc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800acc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800acc8:	4a9d      	ldr	r2, [pc, #628]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acca:	430b      	orrs	r3, r1
 800accc:	6593      	str	r3, [r2, #88]	@ 0x58
 800acce:	e003      	b.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800acd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f002 0308 	and.w	r3, r2, #8
 800ace4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ace8:	2300      	movs	r3, #0
 800acea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800acf2:	460b      	mov	r3, r1
 800acf4:	4313      	orrs	r3, r2
 800acf6:	d01e      	beq.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800acf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad04:	d10c      	bne.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad0a:	3328      	adds	r3, #40	@ 0x28
 800ad0c:	2102      	movs	r1, #2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fb96 	bl	800b440 <RCCEx_PLL3_Config>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d002      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ad20:	4b87      	ldr	r3, [pc, #540]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad24:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad30:	4a83      	ldr	r2, [pc, #524]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad32:	430b      	orrs	r3, r1
 800ad34:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	f002 0310 	and.w	r3, r2, #16
 800ad42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad46:	2300      	movs	r3, #0
 800ad48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ad4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ad50:	460b      	mov	r3, r1
 800ad52:	4313      	orrs	r3, r2
 800ad54:	d01e      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ad56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad62:	d10c      	bne.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad68:	3328      	adds	r3, #40	@ 0x28
 800ad6a:	2102      	movs	r1, #2
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 fb67 	bl	800b440 <RCCEx_PLL3_Config>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d002      	beq.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad7e:	4b70      	ldr	r3, [pc, #448]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ad86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad8e:	4a6c      	ldr	r2, [pc, #432]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad90:	430b      	orrs	r3, r1
 800ad92:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ada0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ada4:	2300      	movs	r3, #0
 800ada6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800adaa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800adae:	460b      	mov	r3, r1
 800adb0:	4313      	orrs	r3, r2
 800adb2:	d03e      	beq.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800adb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800adbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adc0:	d022      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800adc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adc6:	d81b      	bhi.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800adcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800add0:	d00b      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800add2:	e015      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800add4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800add8:	3308      	adds	r3, #8
 800adda:	2100      	movs	r1, #0
 800addc:	4618      	mov	r0, r3
 800adde:	f000 fa7d 	bl	800b2dc <RCCEx_PLL2_Config>
 800ade2:	4603      	mov	r3, r0
 800ade4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ade8:	e00f      	b.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adee:	3328      	adds	r3, #40	@ 0x28
 800adf0:	2102      	movs	r1, #2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 fb24 	bl	800b440 <RCCEx_PLL3_Config>
 800adf8:	4603      	mov	r3, r0
 800adfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800adfe:	e004      	b.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae06:	e000      	b.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ae08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10b      	bne.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ae12:	4b4b      	ldr	r3, [pc, #300]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ae1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae22:	4a47      	ldr	r2, [pc, #284]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae24:	430b      	orrs	r3, r1
 800ae26:	6593      	str	r3, [r2, #88]	@ 0x58
 800ae28:	e003      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ae32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ae3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae40:	2300      	movs	r3, #0
 800ae42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ae48:	460b      	mov	r3, r1
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	d03b      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ae4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae5a:	d01f      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ae5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae60:	d818      	bhi.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ae62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae66:	d003      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ae68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae6c:	d007      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ae6e:	e011      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae70:	4b33      	ldr	r3, [pc, #204]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae74:	4a32      	ldr	r2, [pc, #200]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ae7c:	e00f      	b.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae82:	3328      	adds	r3, #40	@ 0x28
 800ae84:	2101      	movs	r1, #1
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 fada 	bl	800b440 <RCCEx_PLL3_Config>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ae92:	e004      	b.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae9a:	e000      	b.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ae9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10b      	bne.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aea6:	4b26      	ldr	r3, [pc, #152]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeaa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aeae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeb6:	4a22      	ldr	r2, [pc, #136]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	6553      	str	r3, [r2, #84]	@ 0x54
 800aebc:	e003      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800aed2:	673b      	str	r3, [r7, #112]	@ 0x70
 800aed4:	2300      	movs	r3, #0
 800aed6:	677b      	str	r3, [r7, #116]	@ 0x74
 800aed8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800aedc:	460b      	mov	r3, r1
 800aede:	4313      	orrs	r3, r2
 800aee0:	d034      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800aee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800aeec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aef0:	d007      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800aef2:	e011      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aef4:	4b12      	ldr	r3, [pc, #72]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef8:	4a11      	ldr	r2, [pc, #68]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aefa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aefe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800af00:	e00e      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af06:	3308      	adds	r3, #8
 800af08:	2102      	movs	r1, #2
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 f9e6 	bl	800b2dc <RCCEx_PLL2_Config>
 800af10:	4603      	mov	r3, r0
 800af12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800af16:	e003      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800af1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af24:	2b00      	cmp	r3, #0
 800af26:	d10d      	bne.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800af28:	4b05      	ldr	r3, [pc, #20]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800af2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af36:	4a02      	ldr	r2, [pc, #8]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800af38:	430b      	orrs	r3, r1
 800af3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800af3c:	e006      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800af3e:	bf00      	nop
 800af40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800af4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800af58:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af5a:	2300      	movs	r3, #0
 800af5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800af5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800af62:	460b      	mov	r3, r1
 800af64:	4313      	orrs	r3, r2
 800af66:	d00c      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800af68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af6c:	3328      	adds	r3, #40	@ 0x28
 800af6e:	2102      	movs	r1, #2
 800af70:	4618      	mov	r0, r3
 800af72:	f000 fa65 	bl	800b440 <RCCEx_PLL3_Config>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800af82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800af8e:	663b      	str	r3, [r7, #96]	@ 0x60
 800af90:	2300      	movs	r3, #0
 800af92:	667b      	str	r3, [r7, #100]	@ 0x64
 800af94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800af98:	460b      	mov	r3, r1
 800af9a:	4313      	orrs	r3, r2
 800af9c:	d038      	beq.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800af9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afaa:	d018      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800afac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afb0:	d811      	bhi.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800afb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afb6:	d014      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800afb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afbc:	d80b      	bhi.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d011      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800afc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afc6:	d106      	bne.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afc8:	4bc3      	ldr	r3, [pc, #780]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afcc:	4ac2      	ldr	r2, [pc, #776]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800afd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800afd4:	e008      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800afdc:	e004      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800afde:	bf00      	nop
 800afe0:	e002      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800afe2:	bf00      	nop
 800afe4:	e000      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800afe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10b      	bne.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aff0:	4bb9      	ldr	r3, [pc, #740]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800affc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b000:	4ab5      	ldr	r2, [pc, #724]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b002:	430b      	orrs	r3, r1
 800b004:	6553      	str	r3, [r2, #84]	@ 0x54
 800b006:	e003      	b.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b00c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b018:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b01c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b01e:	2300      	movs	r3, #0
 800b020:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b022:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b026:	460b      	mov	r3, r1
 800b028:	4313      	orrs	r3, r2
 800b02a:	d009      	beq.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b02c:	4baa      	ldr	r3, [pc, #680]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b02e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b030:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b03a:	4aa7      	ldr	r2, [pc, #668]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b03c:	430b      	orrs	r3, r1
 800b03e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b048:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b04c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b04e:	2300      	movs	r3, #0
 800b050:	657b      	str	r3, [r7, #84]	@ 0x54
 800b052:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b056:	460b      	mov	r3, r1
 800b058:	4313      	orrs	r3, r2
 800b05a:	d00a      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b05c:	4b9e      	ldr	r3, [pc, #632]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b068:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b06c:	4a9a      	ldr	r2, [pc, #616]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b06e:	430b      	orrs	r3, r1
 800b070:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b07e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b080:	2300      	movs	r3, #0
 800b082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b084:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b088:	460b      	mov	r3, r1
 800b08a:	4313      	orrs	r3, r2
 800b08c:	d009      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b08e:	4b92      	ldr	r3, [pc, #584]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b092:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b09a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b09c:	4a8e      	ldr	r2, [pc, #568]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b09e:	430b      	orrs	r3, r1
 800b0a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b0ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	d00e      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b0be:	4b86      	ldr	r3, [pc, #536]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	4a85      	ldr	r2, [pc, #532]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b0c8:	6113      	str	r3, [r2, #16]
 800b0ca:	4b83      	ldr	r3, [pc, #524]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0cc:	6919      	ldr	r1, [r3, #16]
 800b0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b0d6:	4a80      	ldr	r2, [pc, #512]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0d8:	430b      	orrs	r3, r1
 800b0da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b0e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	d009      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b0f8:	4b77      	ldr	r3, [pc, #476]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b106:	4a74      	ldr	r2, [pc, #464]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b108:	430b      	orrs	r3, r1
 800b10a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b114:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b118:	633b      	str	r3, [r7, #48]	@ 0x30
 800b11a:	2300      	movs	r3, #0
 800b11c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b11e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b122:	460b      	mov	r3, r1
 800b124:	4313      	orrs	r3, r2
 800b126:	d00a      	beq.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b128:	4b6b      	ldr	r3, [pc, #428]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b12a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b12c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b138:	4a67      	ldr	r2, [pc, #412]	@ (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b13a:	430b      	orrs	r3, r1
 800b13c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b146:	2100      	movs	r1, #0
 800b148:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b150:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b154:	460b      	mov	r3, r1
 800b156:	4313      	orrs	r3, r2
 800b158:	d011      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b15e:	3308      	adds	r3, #8
 800b160:	2100      	movs	r1, #0
 800b162:	4618      	mov	r0, r3
 800b164:	f000 f8ba 	bl	800b2dc <RCCEx_PLL2_Config>
 800b168:	4603      	mov	r3, r0
 800b16a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b16e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b17a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	2100      	movs	r1, #0
 800b188:	6239      	str	r1, [r7, #32]
 800b18a:	f003 0302 	and.w	r3, r3, #2
 800b18e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b190:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b194:	460b      	mov	r3, r1
 800b196:	4313      	orrs	r3, r2
 800b198:	d011      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b19e:	3308      	adds	r3, #8
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f89a 	bl	800b2dc <RCCEx_PLL2_Config>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	61b9      	str	r1, [r7, #24]
 800b1ca:	f003 0304 	and.w	r3, r3, #4
 800b1ce:	61fb      	str	r3, [r7, #28]
 800b1d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	d011      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1de:	3308      	adds	r3, #8
 800b1e0:	2102      	movs	r1, #2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 f87a 	bl	800b2dc <RCCEx_PLL2_Config>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b206:	2100      	movs	r1, #0
 800b208:	6139      	str	r1, [r7, #16]
 800b20a:	f003 0308 	and.w	r3, r3, #8
 800b20e:	617b      	str	r3, [r7, #20]
 800b210:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b214:	460b      	mov	r3, r1
 800b216:	4313      	orrs	r3, r2
 800b218:	d011      	beq.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b21e:	3328      	adds	r3, #40	@ 0x28
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f000 f90c 	bl	800b440 <RCCEx_PLL3_Config>
 800b228:	4603      	mov	r3, r0
 800b22a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b22e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b23a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	2100      	movs	r1, #0
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	f003 0310 	and.w	r3, r3, #16
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b254:	460b      	mov	r3, r1
 800b256:	4313      	orrs	r3, r2
 800b258:	d011      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b25e:	3328      	adds	r3, #40	@ 0x28
 800b260:	2101      	movs	r1, #1
 800b262:	4618      	mov	r0, r3
 800b264:	f000 f8ec 	bl	800b440 <RCCEx_PLL3_Config>
 800b268:	4603      	mov	r3, r0
 800b26a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b26e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b27a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	2100      	movs	r1, #0
 800b288:	6039      	str	r1, [r7, #0]
 800b28a:	f003 0320 	and.w	r3, r3, #32
 800b28e:	607b      	str	r3, [r7, #4]
 800b290:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b294:	460b      	mov	r3, r1
 800b296:	4313      	orrs	r3, r2
 800b298:	d011      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b29e:	3328      	adds	r3, #40	@ 0x28
 800b2a0:	2102      	movs	r1, #2
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f000 f8cc 	bl	800b440 <RCCEx_PLL3_Config>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b2ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b2ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b2be:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d101      	bne.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e000      	b.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2d8:	58024400 	.word	0x58024400

0800b2dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2ea:	4b53      	ldr	r3, [pc, #332]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ee:	f003 0303 	and.w	r3, r3, #3
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d101      	bne.n	800b2fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e099      	b.n	800b42e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b2fa:	4b4f      	ldr	r3, [pc, #316]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a4e      	ldr	r2, [pc, #312]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b300:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b306:	f7fb f9b1 	bl	800666c <HAL_GetTick>
 800b30a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b30c:	e008      	b.n	800b320 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b30e:	f7fb f9ad 	bl	800666c <HAL_GetTick>
 800b312:	4602      	mov	r2, r0
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d901      	bls.n	800b320 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e086      	b.n	800b42e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b320:	4b45      	ldr	r3, [pc, #276]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1f0      	bne.n	800b30e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b32c:	4b42      	ldr	r3, [pc, #264]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b330:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	031b      	lsls	r3, r3, #12
 800b33a:	493f      	ldr	r1, [pc, #252]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	3b01      	subs	r3, #1
 800b346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	3b01      	subs	r3, #1
 800b350:	025b      	lsls	r3, r3, #9
 800b352:	b29b      	uxth	r3, r3
 800b354:	431a      	orrs	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	041b      	lsls	r3, r3, #16
 800b35e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b362:	431a      	orrs	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	3b01      	subs	r3, #1
 800b36a:	061b      	lsls	r3, r3, #24
 800b36c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b370:	4931      	ldr	r1, [pc, #196]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b372:	4313      	orrs	r3, r2
 800b374:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b376:	4b30      	ldr	r3, [pc, #192]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	695b      	ldr	r3, [r3, #20]
 800b382:	492d      	ldr	r1, [pc, #180]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b384:	4313      	orrs	r3, r2
 800b386:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b388:	4b2b      	ldr	r3, [pc, #172]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38c:	f023 0220 	bic.w	r2, r3, #32
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	4928      	ldr	r1, [pc, #160]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b396:	4313      	orrs	r3, r2
 800b398:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b39a:	4b27      	ldr	r3, [pc, #156]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39e:	4a26      	ldr	r2, [pc, #152]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3a0:	f023 0310 	bic.w	r3, r3, #16
 800b3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3a6:	4b24      	ldr	r3, [pc, #144]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3aa:	4b24      	ldr	r3, [pc, #144]	@ (800b43c <RCCEx_PLL2_Config+0x160>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	69d2      	ldr	r2, [r2, #28]
 800b3b2:	00d2      	lsls	r2, r2, #3
 800b3b4:	4920      	ldr	r1, [pc, #128]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b3ba:	4b1f      	ldr	r3, [pc, #124]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3be:	4a1e      	ldr	r2, [pc, #120]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3c0:	f043 0310 	orr.w	r3, r3, #16
 800b3c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d106      	bne.n	800b3da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b3cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d0:	4a19      	ldr	r2, [pc, #100]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3d8:	e00f      	b.n	800b3fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d106      	bne.n	800b3ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b3e0:	4b15      	ldr	r3, [pc, #84]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e4:	4a14      	ldr	r2, [pc, #80]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3ec:	e005      	b.n	800b3fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b3ee:	4b12      	ldr	r3, [pc, #72]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f2:	4a11      	ldr	r2, [pc, #68]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b3f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a0e      	ldr	r2, [pc, #56]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b400:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b406:	f7fb f931 	bl	800666c <HAL_GetTick>
 800b40a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b40c:	e008      	b.n	800b420 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b40e:	f7fb f92d 	bl	800666c <HAL_GetTick>
 800b412:	4602      	mov	r2, r0
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d901      	bls.n	800b420 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e006      	b.n	800b42e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b420:	4b05      	ldr	r3, [pc, #20]	@ (800b438 <RCCEx_PLL2_Config+0x15c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d0f0      	beq.n	800b40e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	58024400 	.word	0x58024400
 800b43c:	ffff0007 	.word	0xffff0007

0800b440 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b44a:	2300      	movs	r3, #0
 800b44c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b44e:	4b53      	ldr	r3, [pc, #332]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b452:	f003 0303 	and.w	r3, r3, #3
 800b456:	2b03      	cmp	r3, #3
 800b458:	d101      	bne.n	800b45e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e099      	b.n	800b592 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b45e:	4b4f      	ldr	r3, [pc, #316]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a4e      	ldr	r2, [pc, #312]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b46a:	f7fb f8ff 	bl	800666c <HAL_GetTick>
 800b46e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b470:	e008      	b.n	800b484 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b472:	f7fb f8fb 	bl	800666c <HAL_GetTick>
 800b476:	4602      	mov	r2, r0
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d901      	bls.n	800b484 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e086      	b.n	800b592 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b484:	4b45      	ldr	r3, [pc, #276]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1f0      	bne.n	800b472 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b490:	4b42      	ldr	r3, [pc, #264]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b494:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	051b      	lsls	r3, r3, #20
 800b49e:	493f      	ldr	r1, [pc, #252]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	025b      	lsls	r3, r3, #9
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	431a      	orrs	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	041b      	lsls	r3, r3, #16
 800b4c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	061b      	lsls	r3, r3, #24
 800b4d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b4d4:	4931      	ldr	r1, [pc, #196]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b4da:	4b30      	ldr	r3, [pc, #192]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	695b      	ldr	r3, [r3, #20]
 800b4e6:	492d      	ldr	r1, [pc, #180]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b4ec:	4b2b      	ldr	r3, [pc, #172]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	4928      	ldr	r1, [pc, #160]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b4fe:	4b27      	ldr	r3, [pc, #156]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b502:	4a26      	ldr	r2, [pc, #152]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b508:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b50a:	4b24      	ldr	r3, [pc, #144]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b50c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b50e:	4b24      	ldr	r3, [pc, #144]	@ (800b5a0 <RCCEx_PLL3_Config+0x160>)
 800b510:	4013      	ands	r3, r2
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	69d2      	ldr	r2, [r2, #28]
 800b516:	00d2      	lsls	r2, r2, #3
 800b518:	4920      	ldr	r1, [pc, #128]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b51a:	4313      	orrs	r3, r2
 800b51c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b51e:	4b1f      	ldr	r3, [pc, #124]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b522:	4a1e      	ldr	r2, [pc, #120]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b528:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d106      	bne.n	800b53e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b530:	4b1a      	ldr	r3, [pc, #104]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b534:	4a19      	ldr	r2, [pc, #100]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b536:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b53a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b53c:	e00f      	b.n	800b55e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d106      	bne.n	800b552 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b544:	4b15      	ldr	r3, [pc, #84]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b548:	4a14      	ldr	r2, [pc, #80]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b54a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b54e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b550:	e005      	b.n	800b55e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b552:	4b12      	ldr	r3, [pc, #72]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b556:	4a11      	ldr	r2, [pc, #68]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b558:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b55c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b55e:	4b0f      	ldr	r3, [pc, #60]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a0e      	ldr	r2, [pc, #56]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b56a:	f7fb f87f 	bl	800666c <HAL_GetTick>
 800b56e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b570:	e008      	b.n	800b584 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b572:	f7fb f87b 	bl	800666c <HAL_GetTick>
 800b576:	4602      	mov	r2, r0
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d901      	bls.n	800b584 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b580:	2303      	movs	r3, #3
 800b582:	e006      	b.n	800b592 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b584:	4b05      	ldr	r3, [pc, #20]	@ (800b59c <RCCEx_PLL3_Config+0x15c>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d0f0      	beq.n	800b572 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b590:	7bfb      	ldrb	r3, [r7, #15]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	58024400 	.word	0x58024400
 800b5a0:	ffff0007 	.word	0xffff0007

0800b5a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e02b      	b.n	800b610 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d106      	bne.n	800b5d2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f825 	bl	800b61c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	f000 fca9 	bl	800bf3c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6818      	ldr	r0, [r3, #0]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	f000 fcfd 	bl	800bff4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b5fa:	4b07      	ldr	r3, [pc, #28]	@ (800b618 <HAL_SDRAM_Init+0x74>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a06      	ldr	r2, [pc, #24]	@ (800b618 <HAL_SDRAM_Init+0x74>)
 800b600:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b604:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	52004000 	.word	0x52004000

0800b61c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b642:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b644:	7dfb      	ldrb	r3, [r7, #23]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d101      	bne.n	800b64e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b64a:	2302      	movs	r3, #2
 800b64c:	e021      	b.n	800b692 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b64e:	7dfb      	ldrb	r3, [r7, #23]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d002      	beq.n	800b65a <HAL_SDRAM_SendCommand+0x2a>
 800b654:	7dfb      	ldrb	r3, [r7, #23]
 800b656:	2b05      	cmp	r3, #5
 800b658:	d118      	bne.n	800b68c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2202      	movs	r2, #2
 800b65e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	68b9      	ldr	r1, [r7, #8]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 fd2c 	bl	800c0c8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b02      	cmp	r3, #2
 800b676:	d104      	bne.n	800b682 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2205      	movs	r2, #5
 800b67c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b680:	e006      	b.n	800b690 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b68a:	e001      	b.n	800b690 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e000      	b.n	800b692 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3718      	adds	r7, #24
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
 800b6a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d101      	bne.n	800b6b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	e016      	b.n	800b6e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d10f      	bne.n	800b6e0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 fd1e 	bl	800c110 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	e000      	b.n	800b6e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d101      	bne.n	800b6fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e049      	b.n	800b790 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b00      	cmp	r3, #0
 800b706:	d106      	bne.n	800b716 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f841 	bl	800b798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2202      	movs	r2, #2
 800b71a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3304      	adds	r3, #4
 800b726:	4619      	mov	r1, r3
 800b728:	4610      	mov	r0, r2
 800b72a:	f000 fac5 	bl	800bcb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b7a0:	bf00      	nop
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d001      	beq.n	800b7c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e054      	b.n	800b86e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68da      	ldr	r2, [r3, #12]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f042 0201 	orr.w	r2, r2, #1
 800b7da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a26      	ldr	r2, [pc, #152]	@ (800b87c <HAL_TIM_Base_Start_IT+0xd0>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d022      	beq.n	800b82c <HAL_TIM_Base_Start_IT+0x80>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7ee:	d01d      	beq.n	800b82c <HAL_TIM_Base_Start_IT+0x80>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a22      	ldr	r2, [pc, #136]	@ (800b880 <HAL_TIM_Base_Start_IT+0xd4>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d018      	beq.n	800b82c <HAL_TIM_Base_Start_IT+0x80>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a21      	ldr	r2, [pc, #132]	@ (800b884 <HAL_TIM_Base_Start_IT+0xd8>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d013      	beq.n	800b82c <HAL_TIM_Base_Start_IT+0x80>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a1f      	ldr	r2, [pc, #124]	@ (800b888 <HAL_TIM_Base_Start_IT+0xdc>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d00e      	beq.n	800b82c <HAL_TIM_Base_Start_IT+0x80>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a1e      	ldr	r2, [pc, #120]	@ (800b88c <HAL_TIM_Base_Start_IT+0xe0>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d009      	beq.n	800b82c <HAL_TIM_Base_Start_IT+0x80>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a1c      	ldr	r2, [pc, #112]	@ (800b890 <HAL_TIM_Base_Start_IT+0xe4>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d004      	beq.n	800b82c <HAL_TIM_Base_Start_IT+0x80>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a1b      	ldr	r2, [pc, #108]	@ (800b894 <HAL_TIM_Base_Start_IT+0xe8>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d115      	bne.n	800b858 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	689a      	ldr	r2, [r3, #8]
 800b832:	4b19      	ldr	r3, [pc, #100]	@ (800b898 <HAL_TIM_Base_Start_IT+0xec>)
 800b834:	4013      	ands	r3, r2
 800b836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b06      	cmp	r3, #6
 800b83c:	d015      	beq.n	800b86a <HAL_TIM_Base_Start_IT+0xbe>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b844:	d011      	beq.n	800b86a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f042 0201 	orr.w	r2, r2, #1
 800b854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b856:	e008      	b.n	800b86a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f042 0201 	orr.w	r2, r2, #1
 800b866:	601a      	str	r2, [r3, #0]
 800b868:	e000      	b.n	800b86c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b86a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	40010000 	.word	0x40010000
 800b880:	40000400 	.word	0x40000400
 800b884:	40000800 	.word	0x40000800
 800b888:	40000c00 	.word	0x40000c00
 800b88c:	40010400 	.word	0x40010400
 800b890:	40001800 	.word	0x40001800
 800b894:	40014000 	.word	0x40014000
 800b898:	00010007 	.word	0x00010007

0800b89c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e049      	b.n	800b942 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d106      	bne.n	800b8c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f89d 	bl	800ba02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4610      	mov	r0, r2
 800b8dc:	f000 f9ec 	bl	800bcb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2202      	movs	r2, #2
 800b956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	6a1a      	ldr	r2, [r3, #32]
 800b960:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b964:	4013      	ands	r3, r2
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10f      	bne.n	800b98a <HAL_TIM_PWM_DeInit+0x40>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	6a1a      	ldr	r2, [r3, #32]
 800b970:	f240 4344 	movw	r3, #1092	@ 0x444
 800b974:	4013      	ands	r3, r2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d107      	bne.n	800b98a <HAL_TIM_PWM_DeInit+0x40>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f022 0201 	bic.w	r2, r2, #1
 800b988:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f843 	bl	800ba16 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ba02:	b480      	push	{r7}
 800ba04:	b083      	sub	sp, #12
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ba0a:	bf00      	nop
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b083      	sub	sp, #12
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800ba1e:	bf00      	nop
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b082      	sub	sp, #8
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	691b      	ldr	r3, [r3, #16]
 800ba38:	f003 0302 	and.w	r3, r3, #2
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d122      	bne.n	800ba86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d11b      	bne.n	800ba86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f06f 0202 	mvn.w	r2, #2
 800ba56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	f003 0303 	and.w	r3, r3, #3
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d003      	beq.n	800ba74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f905 	bl	800bc7c <HAL_TIM_IC_CaptureCallback>
 800ba72:	e005      	b.n	800ba80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f8f7 	bl	800bc68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f908 	bl	800bc90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	f003 0304 	and.w	r3, r3, #4
 800ba90:	2b04      	cmp	r3, #4
 800ba92:	d122      	bne.n	800bada <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	f003 0304 	and.w	r3, r3, #4
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d11b      	bne.n	800bada <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f06f 0204 	mvn.w	r2, #4
 800baaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2202      	movs	r2, #2
 800bab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	699b      	ldr	r3, [r3, #24]
 800bab8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800babc:	2b00      	cmp	r3, #0
 800babe:	d003      	beq.n	800bac8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f8db 	bl	800bc7c <HAL_TIM_IC_CaptureCallback>
 800bac6:	e005      	b.n	800bad4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f8cd 	bl	800bc68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f8de 	bl	800bc90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	f003 0308 	and.w	r3, r3, #8
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	d122      	bne.n	800bb2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	f003 0308 	and.w	r3, r3, #8
 800baf2:	2b08      	cmp	r3, #8
 800baf4:	d11b      	bne.n	800bb2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f06f 0208 	mvn.w	r2, #8
 800bafe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2204      	movs	r2, #4
 800bb04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	f003 0303 	and.w	r3, r3, #3
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d003      	beq.n	800bb1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f8b1 	bl	800bc7c <HAL_TIM_IC_CaptureCallback>
 800bb1a:	e005      	b.n	800bb28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f8a3 	bl	800bc68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f8b4 	bl	800bc90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	f003 0310 	and.w	r3, r3, #16
 800bb38:	2b10      	cmp	r3, #16
 800bb3a:	d122      	bne.n	800bb82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	f003 0310 	and.w	r3, r3, #16
 800bb46:	2b10      	cmp	r3, #16
 800bb48:	d11b      	bne.n	800bb82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f06f 0210 	mvn.w	r2, #16
 800bb52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2208      	movs	r2, #8
 800bb58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	69db      	ldr	r3, [r3, #28]
 800bb60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d003      	beq.n	800bb70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f887 	bl	800bc7c <HAL_TIM_IC_CaptureCallback>
 800bb6e:	e005      	b.n	800bb7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f879 	bl	800bc68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f88a 	bl	800bc90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	f003 0301 	and.w	r3, r3, #1
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d10e      	bne.n	800bbae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d107      	bne.n	800bbae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f06f 0201 	mvn.w	r2, #1
 800bba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f9b3 	bl	800bf14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbb8:	2b80      	cmp	r3, #128	@ 0x80
 800bbba:	d10e      	bne.n	800bbda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbc6:	2b80      	cmp	r3, #128	@ 0x80
 800bbc8:	d107      	bne.n	800bbda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bbd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f913 	bl	800be00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbe8:	d10e      	bne.n	800bc08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbf4:	2b80      	cmp	r3, #128	@ 0x80
 800bbf6:	d107      	bne.n	800bc08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f906 	bl	800be14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc12:	2b40      	cmp	r3, #64	@ 0x40
 800bc14:	d10e      	bne.n	800bc34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc20:	2b40      	cmp	r3, #64	@ 0x40
 800bc22:	d107      	bne.n	800bc34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f838 	bl	800bca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	f003 0320 	and.w	r3, r3, #32
 800bc3e:	2b20      	cmp	r3, #32
 800bc40:	d10e      	bne.n	800bc60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	f003 0320 	and.w	r3, r3, #32
 800bc4c:	2b20      	cmp	r3, #32
 800bc4e:	d107      	bne.n	800bc60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f06f 0220 	mvn.w	r2, #32
 800bc58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f8c6 	bl	800bdec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc60:	bf00      	nop
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a40      	ldr	r2, [pc, #256]	@ (800bdcc <TIM_Base_SetConfig+0x114>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d013      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcd6:	d00f      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a3d      	ldr	r2, [pc, #244]	@ (800bdd0 <TIM_Base_SetConfig+0x118>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d00b      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a3c      	ldr	r2, [pc, #240]	@ (800bdd4 <TIM_Base_SetConfig+0x11c>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d007      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a3b      	ldr	r2, [pc, #236]	@ (800bdd8 <TIM_Base_SetConfig+0x120>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d003      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a3a      	ldr	r2, [pc, #232]	@ (800bddc <TIM_Base_SetConfig+0x124>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d108      	bne.n	800bd0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a2f      	ldr	r2, [pc, #188]	@ (800bdcc <TIM_Base_SetConfig+0x114>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d01f      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd18:	d01b      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a2c      	ldr	r2, [pc, #176]	@ (800bdd0 <TIM_Base_SetConfig+0x118>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d017      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a2b      	ldr	r2, [pc, #172]	@ (800bdd4 <TIM_Base_SetConfig+0x11c>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d013      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a2a      	ldr	r2, [pc, #168]	@ (800bdd8 <TIM_Base_SetConfig+0x120>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d00f      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a29      	ldr	r2, [pc, #164]	@ (800bddc <TIM_Base_SetConfig+0x124>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d00b      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a28      	ldr	r2, [pc, #160]	@ (800bde0 <TIM_Base_SetConfig+0x128>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d007      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a27      	ldr	r2, [pc, #156]	@ (800bde4 <TIM_Base_SetConfig+0x12c>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d003      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a26      	ldr	r2, [pc, #152]	@ (800bde8 <TIM_Base_SetConfig+0x130>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d108      	bne.n	800bd64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	689a      	ldr	r2, [r3, #8]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a10      	ldr	r2, [pc, #64]	@ (800bdcc <TIM_Base_SetConfig+0x114>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d00f      	beq.n	800bdb0 <TIM_Base_SetConfig+0xf8>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a12      	ldr	r2, [pc, #72]	@ (800bddc <TIM_Base_SetConfig+0x124>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d00b      	beq.n	800bdb0 <TIM_Base_SetConfig+0xf8>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a11      	ldr	r2, [pc, #68]	@ (800bde0 <TIM_Base_SetConfig+0x128>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d007      	beq.n	800bdb0 <TIM_Base_SetConfig+0xf8>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a10      	ldr	r2, [pc, #64]	@ (800bde4 <TIM_Base_SetConfig+0x12c>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d003      	beq.n	800bdb0 <TIM_Base_SetConfig+0xf8>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4a0f      	ldr	r2, [pc, #60]	@ (800bde8 <TIM_Base_SetConfig+0x130>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d103      	bne.n	800bdb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	691a      	ldr	r2, [r3, #16]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	615a      	str	r2, [r3, #20]
}
 800bdbe:	bf00      	nop
 800bdc0:	3714      	adds	r7, #20
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	40010000 	.word	0x40010000
 800bdd0:	40000400 	.word	0x40000400
 800bdd4:	40000800 	.word	0x40000800
 800bdd8:	40000c00 	.word	0x40000c00
 800bddc:	40010400 	.word	0x40010400
 800bde0:	40014000 	.word	0x40014000
 800bde4:	40014400 	.word	0x40014400
 800bde8:	40014800 	.word	0x40014800

0800bdec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b090      	sub	sp, #64	@ 0x40
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800be30:	4b33      	ldr	r3, [pc, #204]	@ (800bf00 <HAL_InitTick+0xd8>)
 800be32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be36:	4a32      	ldr	r2, [pc, #200]	@ (800bf00 <HAL_InitTick+0xd8>)
 800be38:	f043 0310 	orr.w	r3, r3, #16
 800be3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800be40:	4b2f      	ldr	r3, [pc, #188]	@ (800bf00 <HAL_InitTick+0xd8>)
 800be42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be46:	f003 0310 	and.w	r3, r3, #16
 800be4a:	60bb      	str	r3, [r7, #8]
 800be4c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800be4e:	f107 020c 	add.w	r2, r7, #12
 800be52:	f107 0310 	add.w	r3, r7, #16
 800be56:	4611      	mov	r1, r2
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fd fff3 	bl	8009e44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800be5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be60:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800be62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be64:	2b00      	cmp	r3, #0
 800be66:	d103      	bne.n	800be70 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800be68:	f7fd ffc0 	bl	8009dec <HAL_RCC_GetPCLK1Freq>
 800be6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800be6e:	e004      	b.n	800be7a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800be70:	f7fd ffbc 	bl	8009dec <HAL_RCC_GetPCLK1Freq>
 800be74:	4603      	mov	r3, r0
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800be7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be7c:	4a21      	ldr	r2, [pc, #132]	@ (800bf04 <HAL_InitTick+0xdc>)
 800be7e:	fba2 2303 	umull	r2, r3, r2, r3
 800be82:	0c9b      	lsrs	r3, r3, #18
 800be84:	3b01      	subs	r3, #1
 800be86:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 800be88:	4b1f      	ldr	r3, [pc, #124]	@ (800bf08 <HAL_InitTick+0xe0>)
 800be8a:	4a20      	ldr	r2, [pc, #128]	@ (800bf0c <HAL_InitTick+0xe4>)
 800be8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800be8e:	4b1e      	ldr	r3, [pc, #120]	@ (800bf08 <HAL_InitTick+0xe0>)
 800be90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800be94:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800be96:	4a1c      	ldr	r2, [pc, #112]	@ (800bf08 <HAL_InitTick+0xe0>)
 800be98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9a:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0U;
 800be9c:	4b1a      	ldr	r3, [pc, #104]	@ (800bf08 <HAL_InitTick+0xe0>)
 800be9e:	2200      	movs	r2, #0
 800bea0:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bea2:	4b19      	ldr	r3, [pc, #100]	@ (800bf08 <HAL_InitTick+0xe0>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&TimHandle);
 800bea8:	4817      	ldr	r0, [pc, #92]	@ (800bf08 <HAL_InitTick+0xe0>)
 800beaa:	f7ff fc1e 	bl	800b6ea <HAL_TIM_Base_Init>
 800beae:	4603      	mov	r3, r0
 800beb0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (status == HAL_OK)
 800beb4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d11b      	bne.n	800bef4 <HAL_InitTick+0xcc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&TimHandle);
 800bebc:	4812      	ldr	r0, [pc, #72]	@ (800bf08 <HAL_InitTick+0xe0>)
 800bebe:	f7ff fc75 	bl	800b7ac <HAL_TIM_Base_Start_IT>
 800bec2:	4603      	mov	r3, r0
 800bec4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (status == HAL_OK)
 800bec8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800becc:	2b00      	cmp	r3, #0
 800bece:	d111      	bne.n	800bef4 <HAL_InitTick+0xcc>
    {
	  /* Enable the TIM6 global Interrupt */
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800bed0:	2036      	movs	r0, #54	@ 0x36
 800bed2:	f7fa fce9 	bl	80068a8 <HAL_NVIC_EnableIRQ>
   
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b0f      	cmp	r3, #15
 800beda:	d808      	bhi.n	800beee <HAL_InitTick+0xc6>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 800bedc:	2200      	movs	r2, #0
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	2036      	movs	r0, #54	@ 0x36
 800bee2:	f7fa fcc7 	bl	8006874 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bee6:	4a0a      	ldr	r2, [pc, #40]	@ (800bf10 <HAL_InitTick+0xe8>)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6013      	str	r3, [r2, #0]
 800beec:	e002      	b.n	800bef4 <HAL_InitTick+0xcc>
      }
      else
      {
        status = HAL_ERROR;
 800beee:	2301      	movs	r3, #1
 800bef0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }
   }
}

  /* Return function status */
  return status;
 800bef4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3740      	adds	r7, #64	@ 0x40
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	58024400 	.word	0x58024400
 800bf04:	431bde83 	.word	0x431bde83
 800bf08:	24000f24 	.word	0x24000f24
 800bf0c:	40001000 	.word	0x40001000
 800bf10:	2400006c 	.word	0x2400006c

0800bf14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800bf1c:	f7fa fb92 	bl	8006644 <HAL_IncTick>
}
 800bf20:	bf00      	nop
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800bf2c:	4802      	ldr	r0, [pc, #8]	@ (800bf38 <TIM6_DAC_IRQHandler+0x10>)
 800bf2e:	f7ff fd7c 	bl	800ba2a <HAL_TIM_IRQHandler>
}
 800bf32:	bf00      	nop
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	24000f24 	.word	0x24000f24

0800bf3c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d121      	bne.n	800bf92 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	4b27      	ldr	r3, [pc, #156]	@ (800bff0 <FMC_SDRAM_Init+0xb4>)
 800bf54:	4013      	ands	r3, r2
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	6851      	ldr	r1, [r2, #4]
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	6892      	ldr	r2, [r2, #8]
 800bf5e:	4311      	orrs	r1, r2
 800bf60:	683a      	ldr	r2, [r7, #0]
 800bf62:	68d2      	ldr	r2, [r2, #12]
 800bf64:	4311      	orrs	r1, r2
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	6912      	ldr	r2, [r2, #16]
 800bf6a:	4311      	orrs	r1, r2
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	6952      	ldr	r2, [r2, #20]
 800bf70:	4311      	orrs	r1, r2
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	6992      	ldr	r2, [r2, #24]
 800bf76:	4311      	orrs	r1, r2
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	69d2      	ldr	r2, [r2, #28]
 800bf7c:	4311      	orrs	r1, r2
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	6a12      	ldr	r2, [r2, #32]
 800bf82:	4311      	orrs	r1, r2
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bf88:	430a      	orrs	r2, r1
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	601a      	str	r2, [r3, #0]
 800bf90:	e026      	b.n	800bfe0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	69d9      	ldr	r1, [r3, #28]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	6a1b      	ldr	r3, [r3, #32]
 800bfa2:	4319      	orrs	r1, r3
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfa8:	430b      	orrs	r3, r1
 800bfaa:	431a      	orrs	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	4b0e      	ldr	r3, [pc, #56]	@ (800bff0 <FMC_SDRAM_Init+0xb4>)
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	683a      	ldr	r2, [r7, #0]
 800bfba:	6851      	ldr	r1, [r2, #4]
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	6892      	ldr	r2, [r2, #8]
 800bfc0:	4311      	orrs	r1, r2
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	68d2      	ldr	r2, [r2, #12]
 800bfc6:	4311      	orrs	r1, r2
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	6912      	ldr	r2, [r2, #16]
 800bfcc:	4311      	orrs	r1, r2
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	6952      	ldr	r2, [r2, #20]
 800bfd2:	4311      	orrs	r1, r2
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	6992      	ldr	r2, [r2, #24]
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	431a      	orrs	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	ffff8000 	.word	0xffff8000

0800bff4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d128      	bne.n	800c058 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	1e59      	subs	r1, r3, #1
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	3b01      	subs	r3, #1
 800c01a:	011b      	lsls	r3, r3, #4
 800c01c:	4319      	orrs	r1, r3
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	3b01      	subs	r3, #1
 800c024:	021b      	lsls	r3, r3, #8
 800c026:	4319      	orrs	r1, r3
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	031b      	lsls	r3, r3, #12
 800c030:	4319      	orrs	r1, r3
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	3b01      	subs	r3, #1
 800c038:	041b      	lsls	r3, r3, #16
 800c03a:	4319      	orrs	r1, r3
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	695b      	ldr	r3, [r3, #20]
 800c040:	3b01      	subs	r3, #1
 800c042:	051b      	lsls	r3, r3, #20
 800c044:	4319      	orrs	r1, r3
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	699b      	ldr	r3, [r3, #24]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	061b      	lsls	r3, r3, #24
 800c04e:	430b      	orrs	r3, r1
 800c050:	431a      	orrs	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	609a      	str	r2, [r3, #8]
 800c056:	e02d      	b.n	800c0b4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	689a      	ldr	r2, [r3, #8]
 800c05c:	4b19      	ldr	r3, [pc, #100]	@ (800c0c4 <FMC_SDRAM_Timing_Init+0xd0>)
 800c05e:	4013      	ands	r3, r2
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	68d2      	ldr	r2, [r2, #12]
 800c064:	3a01      	subs	r2, #1
 800c066:	0311      	lsls	r1, r2, #12
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	6952      	ldr	r2, [r2, #20]
 800c06c:	3a01      	subs	r2, #1
 800c06e:	0512      	lsls	r2, r2, #20
 800c070:	430a      	orrs	r2, r1
 800c072:	431a      	orrs	r2, r3
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	1e59      	subs	r1, r3, #1
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	011b      	lsls	r3, r3, #4
 800c08e:	4319      	orrs	r1, r3
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	3b01      	subs	r3, #1
 800c096:	021b      	lsls	r3, r3, #8
 800c098:	4319      	orrs	r1, r3
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	041b      	lsls	r3, r3, #16
 800c0a2:	4319      	orrs	r1, r3
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	061b      	lsls	r3, r3, #24
 800c0ac:	430b      	orrs	r3, r1
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	ff0f0fff 	.word	0xff0f0fff

0800c0c8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	691a      	ldr	r2, [r3, #16]
 800c0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800c10c <FMC_SDRAM_SendCommand+0x44>)
 800c0da:	4013      	ands	r3, r2
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	6811      	ldr	r1, [r2, #0]
 800c0e0:	68ba      	ldr	r2, [r7, #8]
 800c0e2:	6852      	ldr	r2, [r2, #4]
 800c0e4:	4311      	orrs	r1, r2
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	6892      	ldr	r2, [r2, #8]
 800c0ea:	3a01      	subs	r2, #1
 800c0ec:	0152      	lsls	r2, r2, #5
 800c0ee:	4311      	orrs	r1, r2
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	68d2      	ldr	r2, [r2, #12]
 800c0f4:	0252      	lsls	r2, r2, #9
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	431a      	orrs	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	ffc00000 	.word	0xffc00000

0800c110 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	695a      	ldr	r2, [r3, #20]
 800c11e:	4b07      	ldr	r3, [pc, #28]	@ (800c13c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c120:	4013      	ands	r3, r2
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	0052      	lsls	r2, r2, #1
 800c126:	431a      	orrs	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	ffffc001 	.word	0xffffc001

0800c140 <std>:
 800c140:	2300      	movs	r3, #0
 800c142:	b510      	push	{r4, lr}
 800c144:	4604      	mov	r4, r0
 800c146:	e9c0 3300 	strd	r3, r3, [r0]
 800c14a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c14e:	6083      	str	r3, [r0, #8]
 800c150:	8181      	strh	r1, [r0, #12]
 800c152:	6643      	str	r3, [r0, #100]	@ 0x64
 800c154:	81c2      	strh	r2, [r0, #14]
 800c156:	6183      	str	r3, [r0, #24]
 800c158:	4619      	mov	r1, r3
 800c15a:	2208      	movs	r2, #8
 800c15c:	305c      	adds	r0, #92	@ 0x5c
 800c15e:	f000 f926 	bl	800c3ae <memset>
 800c162:	4b0d      	ldr	r3, [pc, #52]	@ (800c198 <std+0x58>)
 800c164:	6263      	str	r3, [r4, #36]	@ 0x24
 800c166:	4b0d      	ldr	r3, [pc, #52]	@ (800c19c <std+0x5c>)
 800c168:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c16a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a0 <std+0x60>)
 800c16c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c16e:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a4 <std+0x64>)
 800c170:	6323      	str	r3, [r4, #48]	@ 0x30
 800c172:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a8 <std+0x68>)
 800c174:	6224      	str	r4, [r4, #32]
 800c176:	429c      	cmp	r4, r3
 800c178:	d006      	beq.n	800c188 <std+0x48>
 800c17a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c17e:	4294      	cmp	r4, r2
 800c180:	d002      	beq.n	800c188 <std+0x48>
 800c182:	33d0      	adds	r3, #208	@ 0xd0
 800c184:	429c      	cmp	r4, r3
 800c186:	d105      	bne.n	800c194 <std+0x54>
 800c188:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c190:	f000 b986 	b.w	800c4a0 <__retarget_lock_init_recursive>
 800c194:	bd10      	pop	{r4, pc}
 800c196:	bf00      	nop
 800c198:	0800c329 	.word	0x0800c329
 800c19c:	0800c34b 	.word	0x0800c34b
 800c1a0:	0800c383 	.word	0x0800c383
 800c1a4:	0800c3a7 	.word	0x0800c3a7
 800c1a8:	24000f70 	.word	0x24000f70

0800c1ac <stdio_exit_handler>:
 800c1ac:	4a02      	ldr	r2, [pc, #8]	@ (800c1b8 <stdio_exit_handler+0xc>)
 800c1ae:	4903      	ldr	r1, [pc, #12]	@ (800c1bc <stdio_exit_handler+0x10>)
 800c1b0:	4803      	ldr	r0, [pc, #12]	@ (800c1c0 <stdio_exit_handler+0x14>)
 800c1b2:	f000 b869 	b.w	800c288 <_fwalk_sglue>
 800c1b6:	bf00      	nop
 800c1b8:	24000074 	.word	0x24000074
 800c1bc:	0800cff1 	.word	0x0800cff1
 800c1c0:	24000084 	.word	0x24000084

0800c1c4 <cleanup_stdio>:
 800c1c4:	6841      	ldr	r1, [r0, #4]
 800c1c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c1f8 <cleanup_stdio+0x34>)
 800c1c8:	4299      	cmp	r1, r3
 800c1ca:	b510      	push	{r4, lr}
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	d001      	beq.n	800c1d4 <cleanup_stdio+0x10>
 800c1d0:	f000 ff0e 	bl	800cff0 <_fflush_r>
 800c1d4:	68a1      	ldr	r1, [r4, #8]
 800c1d6:	4b09      	ldr	r3, [pc, #36]	@ (800c1fc <cleanup_stdio+0x38>)
 800c1d8:	4299      	cmp	r1, r3
 800c1da:	d002      	beq.n	800c1e2 <cleanup_stdio+0x1e>
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f000 ff07 	bl	800cff0 <_fflush_r>
 800c1e2:	68e1      	ldr	r1, [r4, #12]
 800c1e4:	4b06      	ldr	r3, [pc, #24]	@ (800c200 <cleanup_stdio+0x3c>)
 800c1e6:	4299      	cmp	r1, r3
 800c1e8:	d004      	beq.n	800c1f4 <cleanup_stdio+0x30>
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1f0:	f000 befe 	b.w	800cff0 <_fflush_r>
 800c1f4:	bd10      	pop	{r4, pc}
 800c1f6:	bf00      	nop
 800c1f8:	24000f70 	.word	0x24000f70
 800c1fc:	24000fd8 	.word	0x24000fd8
 800c200:	24001040 	.word	0x24001040

0800c204 <global_stdio_init.part.0>:
 800c204:	b510      	push	{r4, lr}
 800c206:	4b0b      	ldr	r3, [pc, #44]	@ (800c234 <global_stdio_init.part.0+0x30>)
 800c208:	4c0b      	ldr	r4, [pc, #44]	@ (800c238 <global_stdio_init.part.0+0x34>)
 800c20a:	4a0c      	ldr	r2, [pc, #48]	@ (800c23c <global_stdio_init.part.0+0x38>)
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	4620      	mov	r0, r4
 800c210:	2200      	movs	r2, #0
 800c212:	2104      	movs	r1, #4
 800c214:	f7ff ff94 	bl	800c140 <std>
 800c218:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c21c:	2201      	movs	r2, #1
 800c21e:	2109      	movs	r1, #9
 800c220:	f7ff ff8e 	bl	800c140 <std>
 800c224:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c228:	2202      	movs	r2, #2
 800c22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c22e:	2112      	movs	r1, #18
 800c230:	f7ff bf86 	b.w	800c140 <std>
 800c234:	240010a8 	.word	0x240010a8
 800c238:	24000f70 	.word	0x24000f70
 800c23c:	0800c1ad 	.word	0x0800c1ad

0800c240 <__sfp_lock_acquire>:
 800c240:	4801      	ldr	r0, [pc, #4]	@ (800c248 <__sfp_lock_acquire+0x8>)
 800c242:	f000 b92e 	b.w	800c4a2 <__retarget_lock_acquire_recursive>
 800c246:	bf00      	nop
 800c248:	240010b1 	.word	0x240010b1

0800c24c <__sfp_lock_release>:
 800c24c:	4801      	ldr	r0, [pc, #4]	@ (800c254 <__sfp_lock_release+0x8>)
 800c24e:	f000 b929 	b.w	800c4a4 <__retarget_lock_release_recursive>
 800c252:	bf00      	nop
 800c254:	240010b1 	.word	0x240010b1

0800c258 <__sinit>:
 800c258:	b510      	push	{r4, lr}
 800c25a:	4604      	mov	r4, r0
 800c25c:	f7ff fff0 	bl	800c240 <__sfp_lock_acquire>
 800c260:	6a23      	ldr	r3, [r4, #32]
 800c262:	b11b      	cbz	r3, 800c26c <__sinit+0x14>
 800c264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c268:	f7ff bff0 	b.w	800c24c <__sfp_lock_release>
 800c26c:	4b04      	ldr	r3, [pc, #16]	@ (800c280 <__sinit+0x28>)
 800c26e:	6223      	str	r3, [r4, #32]
 800c270:	4b04      	ldr	r3, [pc, #16]	@ (800c284 <__sinit+0x2c>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1f5      	bne.n	800c264 <__sinit+0xc>
 800c278:	f7ff ffc4 	bl	800c204 <global_stdio_init.part.0>
 800c27c:	e7f2      	b.n	800c264 <__sinit+0xc>
 800c27e:	bf00      	nop
 800c280:	0800c1c5 	.word	0x0800c1c5
 800c284:	240010a8 	.word	0x240010a8

0800c288 <_fwalk_sglue>:
 800c288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c28c:	4607      	mov	r7, r0
 800c28e:	4688      	mov	r8, r1
 800c290:	4614      	mov	r4, r2
 800c292:	2600      	movs	r6, #0
 800c294:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c298:	f1b9 0901 	subs.w	r9, r9, #1
 800c29c:	d505      	bpl.n	800c2aa <_fwalk_sglue+0x22>
 800c29e:	6824      	ldr	r4, [r4, #0]
 800c2a0:	2c00      	cmp	r4, #0
 800c2a2:	d1f7      	bne.n	800c294 <_fwalk_sglue+0xc>
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2aa:	89ab      	ldrh	r3, [r5, #12]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d907      	bls.n	800c2c0 <_fwalk_sglue+0x38>
 800c2b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	d003      	beq.n	800c2c0 <_fwalk_sglue+0x38>
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	47c0      	blx	r8
 800c2be:	4306      	orrs	r6, r0
 800c2c0:	3568      	adds	r5, #104	@ 0x68
 800c2c2:	e7e9      	b.n	800c298 <_fwalk_sglue+0x10>

0800c2c4 <iprintf>:
 800c2c4:	b40f      	push	{r0, r1, r2, r3}
 800c2c6:	b507      	push	{r0, r1, r2, lr}
 800c2c8:	4906      	ldr	r1, [pc, #24]	@ (800c2e4 <iprintf+0x20>)
 800c2ca:	ab04      	add	r3, sp, #16
 800c2cc:	6808      	ldr	r0, [r1, #0]
 800c2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d2:	6881      	ldr	r1, [r0, #8]
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	f000 fb61 	bl	800c99c <_vfiprintf_r>
 800c2da:	b003      	add	sp, #12
 800c2dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2e0:	b004      	add	sp, #16
 800c2e2:	4770      	bx	lr
 800c2e4:	24000080 	.word	0x24000080

0800c2e8 <siprintf>:
 800c2e8:	b40e      	push	{r1, r2, r3}
 800c2ea:	b500      	push	{lr}
 800c2ec:	b09c      	sub	sp, #112	@ 0x70
 800c2ee:	ab1d      	add	r3, sp, #116	@ 0x74
 800c2f0:	9002      	str	r0, [sp, #8]
 800c2f2:	9006      	str	r0, [sp, #24]
 800c2f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c2f8:	4809      	ldr	r0, [pc, #36]	@ (800c320 <siprintf+0x38>)
 800c2fa:	9107      	str	r1, [sp, #28]
 800c2fc:	9104      	str	r1, [sp, #16]
 800c2fe:	4909      	ldr	r1, [pc, #36]	@ (800c324 <siprintf+0x3c>)
 800c300:	f853 2b04 	ldr.w	r2, [r3], #4
 800c304:	9105      	str	r1, [sp, #20]
 800c306:	6800      	ldr	r0, [r0, #0]
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	a902      	add	r1, sp, #8
 800c30c:	f000 fa20 	bl	800c750 <_svfiprintf_r>
 800c310:	9b02      	ldr	r3, [sp, #8]
 800c312:	2200      	movs	r2, #0
 800c314:	701a      	strb	r2, [r3, #0]
 800c316:	b01c      	add	sp, #112	@ 0x70
 800c318:	f85d eb04 	ldr.w	lr, [sp], #4
 800c31c:	b003      	add	sp, #12
 800c31e:	4770      	bx	lr
 800c320:	24000080 	.word	0x24000080
 800c324:	ffff0208 	.word	0xffff0208

0800c328 <__sread>:
 800c328:	b510      	push	{r4, lr}
 800c32a:	460c      	mov	r4, r1
 800c32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c330:	f000 f868 	bl	800c404 <_read_r>
 800c334:	2800      	cmp	r0, #0
 800c336:	bfab      	itete	ge
 800c338:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c33a:	89a3      	ldrhlt	r3, [r4, #12]
 800c33c:	181b      	addge	r3, r3, r0
 800c33e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c342:	bfac      	ite	ge
 800c344:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c346:	81a3      	strhlt	r3, [r4, #12]
 800c348:	bd10      	pop	{r4, pc}

0800c34a <__swrite>:
 800c34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c34e:	461f      	mov	r7, r3
 800c350:	898b      	ldrh	r3, [r1, #12]
 800c352:	05db      	lsls	r3, r3, #23
 800c354:	4605      	mov	r5, r0
 800c356:	460c      	mov	r4, r1
 800c358:	4616      	mov	r6, r2
 800c35a:	d505      	bpl.n	800c368 <__swrite+0x1e>
 800c35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c360:	2302      	movs	r3, #2
 800c362:	2200      	movs	r2, #0
 800c364:	f000 f83c 	bl	800c3e0 <_lseek_r>
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c36e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c372:	81a3      	strh	r3, [r4, #12]
 800c374:	4632      	mov	r2, r6
 800c376:	463b      	mov	r3, r7
 800c378:	4628      	mov	r0, r5
 800c37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c37e:	f000 b853 	b.w	800c428 <_write_r>

0800c382 <__sseek>:
 800c382:	b510      	push	{r4, lr}
 800c384:	460c      	mov	r4, r1
 800c386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c38a:	f000 f829 	bl	800c3e0 <_lseek_r>
 800c38e:	1c43      	adds	r3, r0, #1
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	bf15      	itete	ne
 800c394:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c396:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c39a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c39e:	81a3      	strheq	r3, [r4, #12]
 800c3a0:	bf18      	it	ne
 800c3a2:	81a3      	strhne	r3, [r4, #12]
 800c3a4:	bd10      	pop	{r4, pc}

0800c3a6 <__sclose>:
 800c3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3aa:	f000 b809 	b.w	800c3c0 <_close_r>

0800c3ae <memset>:
 800c3ae:	4402      	add	r2, r0
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d100      	bne.n	800c3b8 <memset+0xa>
 800c3b6:	4770      	bx	lr
 800c3b8:	f803 1b01 	strb.w	r1, [r3], #1
 800c3bc:	e7f9      	b.n	800c3b2 <memset+0x4>
	...

0800c3c0 <_close_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d06      	ldr	r5, [pc, #24]	@ (800c3dc <_close_r+0x1c>)
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	602b      	str	r3, [r5, #0]
 800c3cc:	f7f7 fc6a 	bl	8003ca4 <_close>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d102      	bne.n	800c3da <_close_r+0x1a>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	b103      	cbz	r3, 800c3da <_close_r+0x1a>
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	240010ac 	.word	0x240010ac

0800c3e0 <_lseek_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d07      	ldr	r5, [pc, #28]	@ (800c400 <_lseek_r+0x20>)
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	4608      	mov	r0, r1
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	602a      	str	r2, [r5, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	f7f7 fc7f 	bl	8003cf2 <_lseek>
 800c3f4:	1c43      	adds	r3, r0, #1
 800c3f6:	d102      	bne.n	800c3fe <_lseek_r+0x1e>
 800c3f8:	682b      	ldr	r3, [r5, #0]
 800c3fa:	b103      	cbz	r3, 800c3fe <_lseek_r+0x1e>
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
 800c400:	240010ac 	.word	0x240010ac

0800c404 <_read_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4d07      	ldr	r5, [pc, #28]	@ (800c424 <_read_r+0x20>)
 800c408:	4604      	mov	r4, r0
 800c40a:	4608      	mov	r0, r1
 800c40c:	4611      	mov	r1, r2
 800c40e:	2200      	movs	r2, #0
 800c410:	602a      	str	r2, [r5, #0]
 800c412:	461a      	mov	r2, r3
 800c414:	f7f7 fc0d 	bl	8003c32 <_read>
 800c418:	1c43      	adds	r3, r0, #1
 800c41a:	d102      	bne.n	800c422 <_read_r+0x1e>
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	b103      	cbz	r3, 800c422 <_read_r+0x1e>
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	bd38      	pop	{r3, r4, r5, pc}
 800c424:	240010ac 	.word	0x240010ac

0800c428 <_write_r>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	4d07      	ldr	r5, [pc, #28]	@ (800c448 <_write_r+0x20>)
 800c42c:	4604      	mov	r4, r0
 800c42e:	4608      	mov	r0, r1
 800c430:	4611      	mov	r1, r2
 800c432:	2200      	movs	r2, #0
 800c434:	602a      	str	r2, [r5, #0]
 800c436:	461a      	mov	r2, r3
 800c438:	f7f7 fc18 	bl	8003c6c <_write>
 800c43c:	1c43      	adds	r3, r0, #1
 800c43e:	d102      	bne.n	800c446 <_write_r+0x1e>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	b103      	cbz	r3, 800c446 <_write_r+0x1e>
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	bd38      	pop	{r3, r4, r5, pc}
 800c448:	240010ac 	.word	0x240010ac

0800c44c <__errno>:
 800c44c:	4b01      	ldr	r3, [pc, #4]	@ (800c454 <__errno+0x8>)
 800c44e:	6818      	ldr	r0, [r3, #0]
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	24000080 	.word	0x24000080

0800c458 <__libc_init_array>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	4d0d      	ldr	r5, [pc, #52]	@ (800c490 <__libc_init_array+0x38>)
 800c45c:	4c0d      	ldr	r4, [pc, #52]	@ (800c494 <__libc_init_array+0x3c>)
 800c45e:	1b64      	subs	r4, r4, r5
 800c460:	10a4      	asrs	r4, r4, #2
 800c462:	2600      	movs	r6, #0
 800c464:	42a6      	cmp	r6, r4
 800c466:	d109      	bne.n	800c47c <__libc_init_array+0x24>
 800c468:	4d0b      	ldr	r5, [pc, #44]	@ (800c498 <__libc_init_array+0x40>)
 800c46a:	4c0c      	ldr	r4, [pc, #48]	@ (800c49c <__libc_init_array+0x44>)
 800c46c:	f000 ff6e 	bl	800d34c <_init>
 800c470:	1b64      	subs	r4, r4, r5
 800c472:	10a4      	asrs	r4, r4, #2
 800c474:	2600      	movs	r6, #0
 800c476:	42a6      	cmp	r6, r4
 800c478:	d105      	bne.n	800c486 <__libc_init_array+0x2e>
 800c47a:	bd70      	pop	{r4, r5, r6, pc}
 800c47c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c480:	4798      	blx	r3
 800c482:	3601      	adds	r6, #1
 800c484:	e7ee      	b.n	800c464 <__libc_init_array+0xc>
 800c486:	f855 3b04 	ldr.w	r3, [r5], #4
 800c48a:	4798      	blx	r3
 800c48c:	3601      	adds	r6, #1
 800c48e:	e7f2      	b.n	800c476 <__libc_init_array+0x1e>
 800c490:	0801c068 	.word	0x0801c068
 800c494:	0801c068 	.word	0x0801c068
 800c498:	0801c068 	.word	0x0801c068
 800c49c:	0801c06c 	.word	0x0801c06c

0800c4a0 <__retarget_lock_init_recursive>:
 800c4a0:	4770      	bx	lr

0800c4a2 <__retarget_lock_acquire_recursive>:
 800c4a2:	4770      	bx	lr

0800c4a4 <__retarget_lock_release_recursive>:
 800c4a4:	4770      	bx	lr
	...

0800c4a8 <_free_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	2900      	cmp	r1, #0
 800c4ae:	d041      	beq.n	800c534 <_free_r+0x8c>
 800c4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4b4:	1f0c      	subs	r4, r1, #4
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	bfb8      	it	lt
 800c4ba:	18e4      	addlt	r4, r4, r3
 800c4bc:	f000 f8e0 	bl	800c680 <__malloc_lock>
 800c4c0:	4a1d      	ldr	r2, [pc, #116]	@ (800c538 <_free_r+0x90>)
 800c4c2:	6813      	ldr	r3, [r2, #0]
 800c4c4:	b933      	cbnz	r3, 800c4d4 <_free_r+0x2c>
 800c4c6:	6063      	str	r3, [r4, #4]
 800c4c8:	6014      	str	r4, [r2, #0]
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4d0:	f000 b8dc 	b.w	800c68c <__malloc_unlock>
 800c4d4:	42a3      	cmp	r3, r4
 800c4d6:	d908      	bls.n	800c4ea <_free_r+0x42>
 800c4d8:	6820      	ldr	r0, [r4, #0]
 800c4da:	1821      	adds	r1, r4, r0
 800c4dc:	428b      	cmp	r3, r1
 800c4de:	bf01      	itttt	eq
 800c4e0:	6819      	ldreq	r1, [r3, #0]
 800c4e2:	685b      	ldreq	r3, [r3, #4]
 800c4e4:	1809      	addeq	r1, r1, r0
 800c4e6:	6021      	streq	r1, [r4, #0]
 800c4e8:	e7ed      	b.n	800c4c6 <_free_r+0x1e>
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	b10b      	cbz	r3, 800c4f4 <_free_r+0x4c>
 800c4f0:	42a3      	cmp	r3, r4
 800c4f2:	d9fa      	bls.n	800c4ea <_free_r+0x42>
 800c4f4:	6811      	ldr	r1, [r2, #0]
 800c4f6:	1850      	adds	r0, r2, r1
 800c4f8:	42a0      	cmp	r0, r4
 800c4fa:	d10b      	bne.n	800c514 <_free_r+0x6c>
 800c4fc:	6820      	ldr	r0, [r4, #0]
 800c4fe:	4401      	add	r1, r0
 800c500:	1850      	adds	r0, r2, r1
 800c502:	4283      	cmp	r3, r0
 800c504:	6011      	str	r1, [r2, #0]
 800c506:	d1e0      	bne.n	800c4ca <_free_r+0x22>
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	6053      	str	r3, [r2, #4]
 800c50e:	4408      	add	r0, r1
 800c510:	6010      	str	r0, [r2, #0]
 800c512:	e7da      	b.n	800c4ca <_free_r+0x22>
 800c514:	d902      	bls.n	800c51c <_free_r+0x74>
 800c516:	230c      	movs	r3, #12
 800c518:	602b      	str	r3, [r5, #0]
 800c51a:	e7d6      	b.n	800c4ca <_free_r+0x22>
 800c51c:	6820      	ldr	r0, [r4, #0]
 800c51e:	1821      	adds	r1, r4, r0
 800c520:	428b      	cmp	r3, r1
 800c522:	bf04      	itt	eq
 800c524:	6819      	ldreq	r1, [r3, #0]
 800c526:	685b      	ldreq	r3, [r3, #4]
 800c528:	6063      	str	r3, [r4, #4]
 800c52a:	bf04      	itt	eq
 800c52c:	1809      	addeq	r1, r1, r0
 800c52e:	6021      	streq	r1, [r4, #0]
 800c530:	6054      	str	r4, [r2, #4]
 800c532:	e7ca      	b.n	800c4ca <_free_r+0x22>
 800c534:	bd38      	pop	{r3, r4, r5, pc}
 800c536:	bf00      	nop
 800c538:	240010b8 	.word	0x240010b8

0800c53c <sbrk_aligned>:
 800c53c:	b570      	push	{r4, r5, r6, lr}
 800c53e:	4e0f      	ldr	r6, [pc, #60]	@ (800c57c <sbrk_aligned+0x40>)
 800c540:	460c      	mov	r4, r1
 800c542:	6831      	ldr	r1, [r6, #0]
 800c544:	4605      	mov	r5, r0
 800c546:	b911      	cbnz	r1, 800c54e <sbrk_aligned+0x12>
 800c548:	f000 fe28 	bl	800d19c <_sbrk_r>
 800c54c:	6030      	str	r0, [r6, #0]
 800c54e:	4621      	mov	r1, r4
 800c550:	4628      	mov	r0, r5
 800c552:	f000 fe23 	bl	800d19c <_sbrk_r>
 800c556:	1c43      	adds	r3, r0, #1
 800c558:	d103      	bne.n	800c562 <sbrk_aligned+0x26>
 800c55a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c55e:	4620      	mov	r0, r4
 800c560:	bd70      	pop	{r4, r5, r6, pc}
 800c562:	1cc4      	adds	r4, r0, #3
 800c564:	f024 0403 	bic.w	r4, r4, #3
 800c568:	42a0      	cmp	r0, r4
 800c56a:	d0f8      	beq.n	800c55e <sbrk_aligned+0x22>
 800c56c:	1a21      	subs	r1, r4, r0
 800c56e:	4628      	mov	r0, r5
 800c570:	f000 fe14 	bl	800d19c <_sbrk_r>
 800c574:	3001      	adds	r0, #1
 800c576:	d1f2      	bne.n	800c55e <sbrk_aligned+0x22>
 800c578:	e7ef      	b.n	800c55a <sbrk_aligned+0x1e>
 800c57a:	bf00      	nop
 800c57c:	240010b4 	.word	0x240010b4

0800c580 <_malloc_r>:
 800c580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c584:	1ccd      	adds	r5, r1, #3
 800c586:	f025 0503 	bic.w	r5, r5, #3
 800c58a:	3508      	adds	r5, #8
 800c58c:	2d0c      	cmp	r5, #12
 800c58e:	bf38      	it	cc
 800c590:	250c      	movcc	r5, #12
 800c592:	2d00      	cmp	r5, #0
 800c594:	4606      	mov	r6, r0
 800c596:	db01      	blt.n	800c59c <_malloc_r+0x1c>
 800c598:	42a9      	cmp	r1, r5
 800c59a:	d904      	bls.n	800c5a6 <_malloc_r+0x26>
 800c59c:	230c      	movs	r3, #12
 800c59e:	6033      	str	r3, [r6, #0]
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c67c <_malloc_r+0xfc>
 800c5aa:	f000 f869 	bl	800c680 <__malloc_lock>
 800c5ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c5b2:	461c      	mov	r4, r3
 800c5b4:	bb44      	cbnz	r4, 800c608 <_malloc_r+0x88>
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7ff ffbf 	bl	800c53c <sbrk_aligned>
 800c5be:	1c43      	adds	r3, r0, #1
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	d158      	bne.n	800c676 <_malloc_r+0xf6>
 800c5c4:	f8d8 4000 	ldr.w	r4, [r8]
 800c5c8:	4627      	mov	r7, r4
 800c5ca:	2f00      	cmp	r7, #0
 800c5cc:	d143      	bne.n	800c656 <_malloc_r+0xd6>
 800c5ce:	2c00      	cmp	r4, #0
 800c5d0:	d04b      	beq.n	800c66a <_malloc_r+0xea>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	4639      	mov	r1, r7
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	eb04 0903 	add.w	r9, r4, r3
 800c5dc:	f000 fdde 	bl	800d19c <_sbrk_r>
 800c5e0:	4581      	cmp	r9, r0
 800c5e2:	d142      	bne.n	800c66a <_malloc_r+0xea>
 800c5e4:	6821      	ldr	r1, [r4, #0]
 800c5e6:	1a6d      	subs	r5, r5, r1
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f7ff ffa6 	bl	800c53c <sbrk_aligned>
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	d03a      	beq.n	800c66a <_malloc_r+0xea>
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	442b      	add	r3, r5
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	bb62      	cbnz	r2, 800c65c <_malloc_r+0xdc>
 800c602:	f8c8 7000 	str.w	r7, [r8]
 800c606:	e00f      	b.n	800c628 <_malloc_r+0xa8>
 800c608:	6822      	ldr	r2, [r4, #0]
 800c60a:	1b52      	subs	r2, r2, r5
 800c60c:	d420      	bmi.n	800c650 <_malloc_r+0xd0>
 800c60e:	2a0b      	cmp	r2, #11
 800c610:	d917      	bls.n	800c642 <_malloc_r+0xc2>
 800c612:	1961      	adds	r1, r4, r5
 800c614:	42a3      	cmp	r3, r4
 800c616:	6025      	str	r5, [r4, #0]
 800c618:	bf18      	it	ne
 800c61a:	6059      	strne	r1, [r3, #4]
 800c61c:	6863      	ldr	r3, [r4, #4]
 800c61e:	bf08      	it	eq
 800c620:	f8c8 1000 	streq.w	r1, [r8]
 800c624:	5162      	str	r2, [r4, r5]
 800c626:	604b      	str	r3, [r1, #4]
 800c628:	4630      	mov	r0, r6
 800c62a:	f000 f82f 	bl	800c68c <__malloc_unlock>
 800c62e:	f104 000b 	add.w	r0, r4, #11
 800c632:	1d23      	adds	r3, r4, #4
 800c634:	f020 0007 	bic.w	r0, r0, #7
 800c638:	1ac2      	subs	r2, r0, r3
 800c63a:	bf1c      	itt	ne
 800c63c:	1a1b      	subne	r3, r3, r0
 800c63e:	50a3      	strne	r3, [r4, r2]
 800c640:	e7af      	b.n	800c5a2 <_malloc_r+0x22>
 800c642:	6862      	ldr	r2, [r4, #4]
 800c644:	42a3      	cmp	r3, r4
 800c646:	bf0c      	ite	eq
 800c648:	f8c8 2000 	streq.w	r2, [r8]
 800c64c:	605a      	strne	r2, [r3, #4]
 800c64e:	e7eb      	b.n	800c628 <_malloc_r+0xa8>
 800c650:	4623      	mov	r3, r4
 800c652:	6864      	ldr	r4, [r4, #4]
 800c654:	e7ae      	b.n	800c5b4 <_malloc_r+0x34>
 800c656:	463c      	mov	r4, r7
 800c658:	687f      	ldr	r7, [r7, #4]
 800c65a:	e7b6      	b.n	800c5ca <_malloc_r+0x4a>
 800c65c:	461a      	mov	r2, r3
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	42a3      	cmp	r3, r4
 800c662:	d1fb      	bne.n	800c65c <_malloc_r+0xdc>
 800c664:	2300      	movs	r3, #0
 800c666:	6053      	str	r3, [r2, #4]
 800c668:	e7de      	b.n	800c628 <_malloc_r+0xa8>
 800c66a:	230c      	movs	r3, #12
 800c66c:	6033      	str	r3, [r6, #0]
 800c66e:	4630      	mov	r0, r6
 800c670:	f000 f80c 	bl	800c68c <__malloc_unlock>
 800c674:	e794      	b.n	800c5a0 <_malloc_r+0x20>
 800c676:	6005      	str	r5, [r0, #0]
 800c678:	e7d6      	b.n	800c628 <_malloc_r+0xa8>
 800c67a:	bf00      	nop
 800c67c:	240010b8 	.word	0x240010b8

0800c680 <__malloc_lock>:
 800c680:	4801      	ldr	r0, [pc, #4]	@ (800c688 <__malloc_lock+0x8>)
 800c682:	f7ff bf0e 	b.w	800c4a2 <__retarget_lock_acquire_recursive>
 800c686:	bf00      	nop
 800c688:	240010b0 	.word	0x240010b0

0800c68c <__malloc_unlock>:
 800c68c:	4801      	ldr	r0, [pc, #4]	@ (800c694 <__malloc_unlock+0x8>)
 800c68e:	f7ff bf09 	b.w	800c4a4 <__retarget_lock_release_recursive>
 800c692:	bf00      	nop
 800c694:	240010b0 	.word	0x240010b0

0800c698 <__ssputs_r>:
 800c698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c69c:	688e      	ldr	r6, [r1, #8]
 800c69e:	461f      	mov	r7, r3
 800c6a0:	42be      	cmp	r6, r7
 800c6a2:	680b      	ldr	r3, [r1, #0]
 800c6a4:	4682      	mov	sl, r0
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	4690      	mov	r8, r2
 800c6aa:	d82d      	bhi.n	800c708 <__ssputs_r+0x70>
 800c6ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c6b4:	d026      	beq.n	800c704 <__ssputs_r+0x6c>
 800c6b6:	6965      	ldr	r5, [r4, #20]
 800c6b8:	6909      	ldr	r1, [r1, #16]
 800c6ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6be:	eba3 0901 	sub.w	r9, r3, r1
 800c6c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6c6:	1c7b      	adds	r3, r7, #1
 800c6c8:	444b      	add	r3, r9
 800c6ca:	106d      	asrs	r5, r5, #1
 800c6cc:	429d      	cmp	r5, r3
 800c6ce:	bf38      	it	cc
 800c6d0:	461d      	movcc	r5, r3
 800c6d2:	0553      	lsls	r3, r2, #21
 800c6d4:	d527      	bpl.n	800c726 <__ssputs_r+0x8e>
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	f7ff ff52 	bl	800c580 <_malloc_r>
 800c6dc:	4606      	mov	r6, r0
 800c6de:	b360      	cbz	r0, 800c73a <__ssputs_r+0xa2>
 800c6e0:	6921      	ldr	r1, [r4, #16]
 800c6e2:	464a      	mov	r2, r9
 800c6e4:	f000 fd6a 	bl	800d1bc <memcpy>
 800c6e8:	89a3      	ldrh	r3, [r4, #12]
 800c6ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6f2:	81a3      	strh	r3, [r4, #12]
 800c6f4:	6126      	str	r6, [r4, #16]
 800c6f6:	6165      	str	r5, [r4, #20]
 800c6f8:	444e      	add	r6, r9
 800c6fa:	eba5 0509 	sub.w	r5, r5, r9
 800c6fe:	6026      	str	r6, [r4, #0]
 800c700:	60a5      	str	r5, [r4, #8]
 800c702:	463e      	mov	r6, r7
 800c704:	42be      	cmp	r6, r7
 800c706:	d900      	bls.n	800c70a <__ssputs_r+0x72>
 800c708:	463e      	mov	r6, r7
 800c70a:	6820      	ldr	r0, [r4, #0]
 800c70c:	4632      	mov	r2, r6
 800c70e:	4641      	mov	r1, r8
 800c710:	f000 fd2a 	bl	800d168 <memmove>
 800c714:	68a3      	ldr	r3, [r4, #8]
 800c716:	1b9b      	subs	r3, r3, r6
 800c718:	60a3      	str	r3, [r4, #8]
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	4433      	add	r3, r6
 800c71e:	6023      	str	r3, [r4, #0]
 800c720:	2000      	movs	r0, #0
 800c722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c726:	462a      	mov	r2, r5
 800c728:	f000 fd56 	bl	800d1d8 <_realloc_r>
 800c72c:	4606      	mov	r6, r0
 800c72e:	2800      	cmp	r0, #0
 800c730:	d1e0      	bne.n	800c6f4 <__ssputs_r+0x5c>
 800c732:	6921      	ldr	r1, [r4, #16]
 800c734:	4650      	mov	r0, sl
 800c736:	f7ff feb7 	bl	800c4a8 <_free_r>
 800c73a:	230c      	movs	r3, #12
 800c73c:	f8ca 3000 	str.w	r3, [sl]
 800c740:	89a3      	ldrh	r3, [r4, #12]
 800c742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c746:	81a3      	strh	r3, [r4, #12]
 800c748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c74c:	e7e9      	b.n	800c722 <__ssputs_r+0x8a>
	...

0800c750 <_svfiprintf_r>:
 800c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c754:	4698      	mov	r8, r3
 800c756:	898b      	ldrh	r3, [r1, #12]
 800c758:	061b      	lsls	r3, r3, #24
 800c75a:	b09d      	sub	sp, #116	@ 0x74
 800c75c:	4607      	mov	r7, r0
 800c75e:	460d      	mov	r5, r1
 800c760:	4614      	mov	r4, r2
 800c762:	d510      	bpl.n	800c786 <_svfiprintf_r+0x36>
 800c764:	690b      	ldr	r3, [r1, #16]
 800c766:	b973      	cbnz	r3, 800c786 <_svfiprintf_r+0x36>
 800c768:	2140      	movs	r1, #64	@ 0x40
 800c76a:	f7ff ff09 	bl	800c580 <_malloc_r>
 800c76e:	6028      	str	r0, [r5, #0]
 800c770:	6128      	str	r0, [r5, #16]
 800c772:	b930      	cbnz	r0, 800c782 <_svfiprintf_r+0x32>
 800c774:	230c      	movs	r3, #12
 800c776:	603b      	str	r3, [r7, #0]
 800c778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c77c:	b01d      	add	sp, #116	@ 0x74
 800c77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c782:	2340      	movs	r3, #64	@ 0x40
 800c784:	616b      	str	r3, [r5, #20]
 800c786:	2300      	movs	r3, #0
 800c788:	9309      	str	r3, [sp, #36]	@ 0x24
 800c78a:	2320      	movs	r3, #32
 800c78c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c790:	f8cd 800c 	str.w	r8, [sp, #12]
 800c794:	2330      	movs	r3, #48	@ 0x30
 800c796:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c934 <_svfiprintf_r+0x1e4>
 800c79a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c79e:	f04f 0901 	mov.w	r9, #1
 800c7a2:	4623      	mov	r3, r4
 800c7a4:	469a      	mov	sl, r3
 800c7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7aa:	b10a      	cbz	r2, 800c7b0 <_svfiprintf_r+0x60>
 800c7ac:	2a25      	cmp	r2, #37	@ 0x25
 800c7ae:	d1f9      	bne.n	800c7a4 <_svfiprintf_r+0x54>
 800c7b0:	ebba 0b04 	subs.w	fp, sl, r4
 800c7b4:	d00b      	beq.n	800c7ce <_svfiprintf_r+0x7e>
 800c7b6:	465b      	mov	r3, fp
 800c7b8:	4622      	mov	r2, r4
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	4638      	mov	r0, r7
 800c7be:	f7ff ff6b 	bl	800c698 <__ssputs_r>
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	f000 80a7 	beq.w	800c916 <_svfiprintf_r+0x1c6>
 800c7c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7ca:	445a      	add	r2, fp
 800c7cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f000 809f 	beq.w	800c916 <_svfiprintf_r+0x1c6>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7e2:	f10a 0a01 	add.w	sl, sl, #1
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	9307      	str	r3, [sp, #28]
 800c7ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7f0:	4654      	mov	r4, sl
 800c7f2:	2205      	movs	r2, #5
 800c7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f8:	484e      	ldr	r0, [pc, #312]	@ (800c934 <_svfiprintf_r+0x1e4>)
 800c7fa:	f7f3 fd71 	bl	80002e0 <memchr>
 800c7fe:	9a04      	ldr	r2, [sp, #16]
 800c800:	b9d8      	cbnz	r0, 800c83a <_svfiprintf_r+0xea>
 800c802:	06d0      	lsls	r0, r2, #27
 800c804:	bf44      	itt	mi
 800c806:	2320      	movmi	r3, #32
 800c808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c80c:	0711      	lsls	r1, r2, #28
 800c80e:	bf44      	itt	mi
 800c810:	232b      	movmi	r3, #43	@ 0x2b
 800c812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c816:	f89a 3000 	ldrb.w	r3, [sl]
 800c81a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c81c:	d015      	beq.n	800c84a <_svfiprintf_r+0xfa>
 800c81e:	9a07      	ldr	r2, [sp, #28]
 800c820:	4654      	mov	r4, sl
 800c822:	2000      	movs	r0, #0
 800c824:	f04f 0c0a 	mov.w	ip, #10
 800c828:	4621      	mov	r1, r4
 800c82a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c82e:	3b30      	subs	r3, #48	@ 0x30
 800c830:	2b09      	cmp	r3, #9
 800c832:	d94b      	bls.n	800c8cc <_svfiprintf_r+0x17c>
 800c834:	b1b0      	cbz	r0, 800c864 <_svfiprintf_r+0x114>
 800c836:	9207      	str	r2, [sp, #28]
 800c838:	e014      	b.n	800c864 <_svfiprintf_r+0x114>
 800c83a:	eba0 0308 	sub.w	r3, r0, r8
 800c83e:	fa09 f303 	lsl.w	r3, r9, r3
 800c842:	4313      	orrs	r3, r2
 800c844:	9304      	str	r3, [sp, #16]
 800c846:	46a2      	mov	sl, r4
 800c848:	e7d2      	b.n	800c7f0 <_svfiprintf_r+0xa0>
 800c84a:	9b03      	ldr	r3, [sp, #12]
 800c84c:	1d19      	adds	r1, r3, #4
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	9103      	str	r1, [sp, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	bfbb      	ittet	lt
 800c856:	425b      	neglt	r3, r3
 800c858:	f042 0202 	orrlt.w	r2, r2, #2
 800c85c:	9307      	strge	r3, [sp, #28]
 800c85e:	9307      	strlt	r3, [sp, #28]
 800c860:	bfb8      	it	lt
 800c862:	9204      	strlt	r2, [sp, #16]
 800c864:	7823      	ldrb	r3, [r4, #0]
 800c866:	2b2e      	cmp	r3, #46	@ 0x2e
 800c868:	d10a      	bne.n	800c880 <_svfiprintf_r+0x130>
 800c86a:	7863      	ldrb	r3, [r4, #1]
 800c86c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c86e:	d132      	bne.n	800c8d6 <_svfiprintf_r+0x186>
 800c870:	9b03      	ldr	r3, [sp, #12]
 800c872:	1d1a      	adds	r2, r3, #4
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	9203      	str	r2, [sp, #12]
 800c878:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c87c:	3402      	adds	r4, #2
 800c87e:	9305      	str	r3, [sp, #20]
 800c880:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c944 <_svfiprintf_r+0x1f4>
 800c884:	7821      	ldrb	r1, [r4, #0]
 800c886:	2203      	movs	r2, #3
 800c888:	4650      	mov	r0, sl
 800c88a:	f7f3 fd29 	bl	80002e0 <memchr>
 800c88e:	b138      	cbz	r0, 800c8a0 <_svfiprintf_r+0x150>
 800c890:	9b04      	ldr	r3, [sp, #16]
 800c892:	eba0 000a 	sub.w	r0, r0, sl
 800c896:	2240      	movs	r2, #64	@ 0x40
 800c898:	4082      	lsls	r2, r0
 800c89a:	4313      	orrs	r3, r2
 800c89c:	3401      	adds	r4, #1
 800c89e:	9304      	str	r3, [sp, #16]
 800c8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a4:	4824      	ldr	r0, [pc, #144]	@ (800c938 <_svfiprintf_r+0x1e8>)
 800c8a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8aa:	2206      	movs	r2, #6
 800c8ac:	f7f3 fd18 	bl	80002e0 <memchr>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d036      	beq.n	800c922 <_svfiprintf_r+0x1d2>
 800c8b4:	4b21      	ldr	r3, [pc, #132]	@ (800c93c <_svfiprintf_r+0x1ec>)
 800c8b6:	bb1b      	cbnz	r3, 800c900 <_svfiprintf_r+0x1b0>
 800c8b8:	9b03      	ldr	r3, [sp, #12]
 800c8ba:	3307      	adds	r3, #7
 800c8bc:	f023 0307 	bic.w	r3, r3, #7
 800c8c0:	3308      	adds	r3, #8
 800c8c2:	9303      	str	r3, [sp, #12]
 800c8c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c6:	4433      	add	r3, r6
 800c8c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8ca:	e76a      	b.n	800c7a2 <_svfiprintf_r+0x52>
 800c8cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	2001      	movs	r0, #1
 800c8d4:	e7a8      	b.n	800c828 <_svfiprintf_r+0xd8>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	3401      	adds	r4, #1
 800c8da:	9305      	str	r3, [sp, #20]
 800c8dc:	4619      	mov	r1, r3
 800c8de:	f04f 0c0a 	mov.w	ip, #10
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8e8:	3a30      	subs	r2, #48	@ 0x30
 800c8ea:	2a09      	cmp	r2, #9
 800c8ec:	d903      	bls.n	800c8f6 <_svfiprintf_r+0x1a6>
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0c6      	beq.n	800c880 <_svfiprintf_r+0x130>
 800c8f2:	9105      	str	r1, [sp, #20]
 800c8f4:	e7c4      	b.n	800c880 <_svfiprintf_r+0x130>
 800c8f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e7f0      	b.n	800c8e2 <_svfiprintf_r+0x192>
 800c900:	ab03      	add	r3, sp, #12
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	462a      	mov	r2, r5
 800c906:	4b0e      	ldr	r3, [pc, #56]	@ (800c940 <_svfiprintf_r+0x1f0>)
 800c908:	a904      	add	r1, sp, #16
 800c90a:	4638      	mov	r0, r7
 800c90c:	f3af 8000 	nop.w
 800c910:	1c42      	adds	r2, r0, #1
 800c912:	4606      	mov	r6, r0
 800c914:	d1d6      	bne.n	800c8c4 <_svfiprintf_r+0x174>
 800c916:	89ab      	ldrh	r3, [r5, #12]
 800c918:	065b      	lsls	r3, r3, #25
 800c91a:	f53f af2d 	bmi.w	800c778 <_svfiprintf_r+0x28>
 800c91e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c920:	e72c      	b.n	800c77c <_svfiprintf_r+0x2c>
 800c922:	ab03      	add	r3, sp, #12
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	462a      	mov	r2, r5
 800c928:	4b05      	ldr	r3, [pc, #20]	@ (800c940 <_svfiprintf_r+0x1f0>)
 800c92a:	a904      	add	r1, sp, #16
 800c92c:	4638      	mov	r0, r7
 800c92e:	f000 f9bb 	bl	800cca8 <_printf_i>
 800c932:	e7ed      	b.n	800c910 <_svfiprintf_r+0x1c0>
 800c934:	0801c02a 	.word	0x0801c02a
 800c938:	0801c034 	.word	0x0801c034
 800c93c:	00000000 	.word	0x00000000
 800c940:	0800c699 	.word	0x0800c699
 800c944:	0801c030 	.word	0x0801c030

0800c948 <__sfputc_r>:
 800c948:	6893      	ldr	r3, [r2, #8]
 800c94a:	3b01      	subs	r3, #1
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	b410      	push	{r4}
 800c950:	6093      	str	r3, [r2, #8]
 800c952:	da08      	bge.n	800c966 <__sfputc_r+0x1e>
 800c954:	6994      	ldr	r4, [r2, #24]
 800c956:	42a3      	cmp	r3, r4
 800c958:	db01      	blt.n	800c95e <__sfputc_r+0x16>
 800c95a:	290a      	cmp	r1, #10
 800c95c:	d103      	bne.n	800c966 <__sfputc_r+0x1e>
 800c95e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c962:	f000 bb6d 	b.w	800d040 <__swbuf_r>
 800c966:	6813      	ldr	r3, [r2, #0]
 800c968:	1c58      	adds	r0, r3, #1
 800c96a:	6010      	str	r0, [r2, #0]
 800c96c:	7019      	strb	r1, [r3, #0]
 800c96e:	4608      	mov	r0, r1
 800c970:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <__sfputs_r>:
 800c976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c978:	4606      	mov	r6, r0
 800c97a:	460f      	mov	r7, r1
 800c97c:	4614      	mov	r4, r2
 800c97e:	18d5      	adds	r5, r2, r3
 800c980:	42ac      	cmp	r4, r5
 800c982:	d101      	bne.n	800c988 <__sfputs_r+0x12>
 800c984:	2000      	movs	r0, #0
 800c986:	e007      	b.n	800c998 <__sfputs_r+0x22>
 800c988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c98c:	463a      	mov	r2, r7
 800c98e:	4630      	mov	r0, r6
 800c990:	f7ff ffda 	bl	800c948 <__sfputc_r>
 800c994:	1c43      	adds	r3, r0, #1
 800c996:	d1f3      	bne.n	800c980 <__sfputs_r+0xa>
 800c998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c99c <_vfiprintf_r>:
 800c99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a0:	460d      	mov	r5, r1
 800c9a2:	b09d      	sub	sp, #116	@ 0x74
 800c9a4:	4614      	mov	r4, r2
 800c9a6:	4698      	mov	r8, r3
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	b118      	cbz	r0, 800c9b4 <_vfiprintf_r+0x18>
 800c9ac:	6a03      	ldr	r3, [r0, #32]
 800c9ae:	b90b      	cbnz	r3, 800c9b4 <_vfiprintf_r+0x18>
 800c9b0:	f7ff fc52 	bl	800c258 <__sinit>
 800c9b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9b6:	07d9      	lsls	r1, r3, #31
 800c9b8:	d405      	bmi.n	800c9c6 <_vfiprintf_r+0x2a>
 800c9ba:	89ab      	ldrh	r3, [r5, #12]
 800c9bc:	059a      	lsls	r2, r3, #22
 800c9be:	d402      	bmi.n	800c9c6 <_vfiprintf_r+0x2a>
 800c9c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9c2:	f7ff fd6e 	bl	800c4a2 <__retarget_lock_acquire_recursive>
 800c9c6:	89ab      	ldrh	r3, [r5, #12]
 800c9c8:	071b      	lsls	r3, r3, #28
 800c9ca:	d501      	bpl.n	800c9d0 <_vfiprintf_r+0x34>
 800c9cc:	692b      	ldr	r3, [r5, #16]
 800c9ce:	b99b      	cbnz	r3, 800c9f8 <_vfiprintf_r+0x5c>
 800c9d0:	4629      	mov	r1, r5
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f000 fb72 	bl	800d0bc <__swsetup_r>
 800c9d8:	b170      	cbz	r0, 800c9f8 <_vfiprintf_r+0x5c>
 800c9da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9dc:	07dc      	lsls	r4, r3, #31
 800c9de:	d504      	bpl.n	800c9ea <_vfiprintf_r+0x4e>
 800c9e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9e4:	b01d      	add	sp, #116	@ 0x74
 800c9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ea:	89ab      	ldrh	r3, [r5, #12]
 800c9ec:	0598      	lsls	r0, r3, #22
 800c9ee:	d4f7      	bmi.n	800c9e0 <_vfiprintf_r+0x44>
 800c9f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9f2:	f7ff fd57 	bl	800c4a4 <__retarget_lock_release_recursive>
 800c9f6:	e7f3      	b.n	800c9e0 <_vfiprintf_r+0x44>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9fc:	2320      	movs	r3, #32
 800c9fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca02:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca06:	2330      	movs	r3, #48	@ 0x30
 800ca08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cbb8 <_vfiprintf_r+0x21c>
 800ca0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca10:	f04f 0901 	mov.w	r9, #1
 800ca14:	4623      	mov	r3, r4
 800ca16:	469a      	mov	sl, r3
 800ca18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca1c:	b10a      	cbz	r2, 800ca22 <_vfiprintf_r+0x86>
 800ca1e:	2a25      	cmp	r2, #37	@ 0x25
 800ca20:	d1f9      	bne.n	800ca16 <_vfiprintf_r+0x7a>
 800ca22:	ebba 0b04 	subs.w	fp, sl, r4
 800ca26:	d00b      	beq.n	800ca40 <_vfiprintf_r+0xa4>
 800ca28:	465b      	mov	r3, fp
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	4630      	mov	r0, r6
 800ca30:	f7ff ffa1 	bl	800c976 <__sfputs_r>
 800ca34:	3001      	adds	r0, #1
 800ca36:	f000 80a7 	beq.w	800cb88 <_vfiprintf_r+0x1ec>
 800ca3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca3c:	445a      	add	r2, fp
 800ca3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca40:	f89a 3000 	ldrb.w	r3, [sl]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f000 809f 	beq.w	800cb88 <_vfiprintf_r+0x1ec>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca54:	f10a 0a01 	add.w	sl, sl, #1
 800ca58:	9304      	str	r3, [sp, #16]
 800ca5a:	9307      	str	r3, [sp, #28]
 800ca5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca60:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca62:	4654      	mov	r4, sl
 800ca64:	2205      	movs	r2, #5
 800ca66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca6a:	4853      	ldr	r0, [pc, #332]	@ (800cbb8 <_vfiprintf_r+0x21c>)
 800ca6c:	f7f3 fc38 	bl	80002e0 <memchr>
 800ca70:	9a04      	ldr	r2, [sp, #16]
 800ca72:	b9d8      	cbnz	r0, 800caac <_vfiprintf_r+0x110>
 800ca74:	06d1      	lsls	r1, r2, #27
 800ca76:	bf44      	itt	mi
 800ca78:	2320      	movmi	r3, #32
 800ca7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca7e:	0713      	lsls	r3, r2, #28
 800ca80:	bf44      	itt	mi
 800ca82:	232b      	movmi	r3, #43	@ 0x2b
 800ca84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca88:	f89a 3000 	ldrb.w	r3, [sl]
 800ca8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca8e:	d015      	beq.n	800cabc <_vfiprintf_r+0x120>
 800ca90:	9a07      	ldr	r2, [sp, #28]
 800ca92:	4654      	mov	r4, sl
 800ca94:	2000      	movs	r0, #0
 800ca96:	f04f 0c0a 	mov.w	ip, #10
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caa0:	3b30      	subs	r3, #48	@ 0x30
 800caa2:	2b09      	cmp	r3, #9
 800caa4:	d94b      	bls.n	800cb3e <_vfiprintf_r+0x1a2>
 800caa6:	b1b0      	cbz	r0, 800cad6 <_vfiprintf_r+0x13a>
 800caa8:	9207      	str	r2, [sp, #28]
 800caaa:	e014      	b.n	800cad6 <_vfiprintf_r+0x13a>
 800caac:	eba0 0308 	sub.w	r3, r0, r8
 800cab0:	fa09 f303 	lsl.w	r3, r9, r3
 800cab4:	4313      	orrs	r3, r2
 800cab6:	9304      	str	r3, [sp, #16]
 800cab8:	46a2      	mov	sl, r4
 800caba:	e7d2      	b.n	800ca62 <_vfiprintf_r+0xc6>
 800cabc:	9b03      	ldr	r3, [sp, #12]
 800cabe:	1d19      	adds	r1, r3, #4
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	9103      	str	r1, [sp, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	bfbb      	ittet	lt
 800cac8:	425b      	neglt	r3, r3
 800caca:	f042 0202 	orrlt.w	r2, r2, #2
 800cace:	9307      	strge	r3, [sp, #28]
 800cad0:	9307      	strlt	r3, [sp, #28]
 800cad2:	bfb8      	it	lt
 800cad4:	9204      	strlt	r2, [sp, #16]
 800cad6:	7823      	ldrb	r3, [r4, #0]
 800cad8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cada:	d10a      	bne.n	800caf2 <_vfiprintf_r+0x156>
 800cadc:	7863      	ldrb	r3, [r4, #1]
 800cade:	2b2a      	cmp	r3, #42	@ 0x2a
 800cae0:	d132      	bne.n	800cb48 <_vfiprintf_r+0x1ac>
 800cae2:	9b03      	ldr	r3, [sp, #12]
 800cae4:	1d1a      	adds	r2, r3, #4
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	9203      	str	r2, [sp, #12]
 800caea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caee:	3402      	adds	r4, #2
 800caf0:	9305      	str	r3, [sp, #20]
 800caf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbc8 <_vfiprintf_r+0x22c>
 800caf6:	7821      	ldrb	r1, [r4, #0]
 800caf8:	2203      	movs	r2, #3
 800cafa:	4650      	mov	r0, sl
 800cafc:	f7f3 fbf0 	bl	80002e0 <memchr>
 800cb00:	b138      	cbz	r0, 800cb12 <_vfiprintf_r+0x176>
 800cb02:	9b04      	ldr	r3, [sp, #16]
 800cb04:	eba0 000a 	sub.w	r0, r0, sl
 800cb08:	2240      	movs	r2, #64	@ 0x40
 800cb0a:	4082      	lsls	r2, r0
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	3401      	adds	r4, #1
 800cb10:	9304      	str	r3, [sp, #16]
 800cb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb16:	4829      	ldr	r0, [pc, #164]	@ (800cbbc <_vfiprintf_r+0x220>)
 800cb18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb1c:	2206      	movs	r2, #6
 800cb1e:	f7f3 fbdf 	bl	80002e0 <memchr>
 800cb22:	2800      	cmp	r0, #0
 800cb24:	d03f      	beq.n	800cba6 <_vfiprintf_r+0x20a>
 800cb26:	4b26      	ldr	r3, [pc, #152]	@ (800cbc0 <_vfiprintf_r+0x224>)
 800cb28:	bb1b      	cbnz	r3, 800cb72 <_vfiprintf_r+0x1d6>
 800cb2a:	9b03      	ldr	r3, [sp, #12]
 800cb2c:	3307      	adds	r3, #7
 800cb2e:	f023 0307 	bic.w	r3, r3, #7
 800cb32:	3308      	adds	r3, #8
 800cb34:	9303      	str	r3, [sp, #12]
 800cb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb38:	443b      	add	r3, r7
 800cb3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb3c:	e76a      	b.n	800ca14 <_vfiprintf_r+0x78>
 800cb3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb42:	460c      	mov	r4, r1
 800cb44:	2001      	movs	r0, #1
 800cb46:	e7a8      	b.n	800ca9a <_vfiprintf_r+0xfe>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	3401      	adds	r4, #1
 800cb4c:	9305      	str	r3, [sp, #20]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	f04f 0c0a 	mov.w	ip, #10
 800cb54:	4620      	mov	r0, r4
 800cb56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb5a:	3a30      	subs	r2, #48	@ 0x30
 800cb5c:	2a09      	cmp	r2, #9
 800cb5e:	d903      	bls.n	800cb68 <_vfiprintf_r+0x1cc>
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d0c6      	beq.n	800caf2 <_vfiprintf_r+0x156>
 800cb64:	9105      	str	r1, [sp, #20]
 800cb66:	e7c4      	b.n	800caf2 <_vfiprintf_r+0x156>
 800cb68:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e7f0      	b.n	800cb54 <_vfiprintf_r+0x1b8>
 800cb72:	ab03      	add	r3, sp, #12
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	462a      	mov	r2, r5
 800cb78:	4b12      	ldr	r3, [pc, #72]	@ (800cbc4 <_vfiprintf_r+0x228>)
 800cb7a:	a904      	add	r1, sp, #16
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	f3af 8000 	nop.w
 800cb82:	4607      	mov	r7, r0
 800cb84:	1c78      	adds	r0, r7, #1
 800cb86:	d1d6      	bne.n	800cb36 <_vfiprintf_r+0x19a>
 800cb88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb8a:	07d9      	lsls	r1, r3, #31
 800cb8c:	d405      	bmi.n	800cb9a <_vfiprintf_r+0x1fe>
 800cb8e:	89ab      	ldrh	r3, [r5, #12]
 800cb90:	059a      	lsls	r2, r3, #22
 800cb92:	d402      	bmi.n	800cb9a <_vfiprintf_r+0x1fe>
 800cb94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb96:	f7ff fc85 	bl	800c4a4 <__retarget_lock_release_recursive>
 800cb9a:	89ab      	ldrh	r3, [r5, #12]
 800cb9c:	065b      	lsls	r3, r3, #25
 800cb9e:	f53f af1f 	bmi.w	800c9e0 <_vfiprintf_r+0x44>
 800cba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cba4:	e71e      	b.n	800c9e4 <_vfiprintf_r+0x48>
 800cba6:	ab03      	add	r3, sp, #12
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	462a      	mov	r2, r5
 800cbac:	4b05      	ldr	r3, [pc, #20]	@ (800cbc4 <_vfiprintf_r+0x228>)
 800cbae:	a904      	add	r1, sp, #16
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f000 f879 	bl	800cca8 <_printf_i>
 800cbb6:	e7e4      	b.n	800cb82 <_vfiprintf_r+0x1e6>
 800cbb8:	0801c02a 	.word	0x0801c02a
 800cbbc:	0801c034 	.word	0x0801c034
 800cbc0:	00000000 	.word	0x00000000
 800cbc4:	0800c977 	.word	0x0800c977
 800cbc8:	0801c030 	.word	0x0801c030

0800cbcc <_printf_common>:
 800cbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbd0:	4616      	mov	r6, r2
 800cbd2:	4698      	mov	r8, r3
 800cbd4:	688a      	ldr	r2, [r1, #8]
 800cbd6:	690b      	ldr	r3, [r1, #16]
 800cbd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	bfb8      	it	lt
 800cbe0:	4613      	movlt	r3, r2
 800cbe2:	6033      	str	r3, [r6, #0]
 800cbe4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cbe8:	4607      	mov	r7, r0
 800cbea:	460c      	mov	r4, r1
 800cbec:	b10a      	cbz	r2, 800cbf2 <_printf_common+0x26>
 800cbee:	3301      	adds	r3, #1
 800cbf0:	6033      	str	r3, [r6, #0]
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	0699      	lsls	r1, r3, #26
 800cbf6:	bf42      	ittt	mi
 800cbf8:	6833      	ldrmi	r3, [r6, #0]
 800cbfa:	3302      	addmi	r3, #2
 800cbfc:	6033      	strmi	r3, [r6, #0]
 800cbfe:	6825      	ldr	r5, [r4, #0]
 800cc00:	f015 0506 	ands.w	r5, r5, #6
 800cc04:	d106      	bne.n	800cc14 <_printf_common+0x48>
 800cc06:	f104 0a19 	add.w	sl, r4, #25
 800cc0a:	68e3      	ldr	r3, [r4, #12]
 800cc0c:	6832      	ldr	r2, [r6, #0]
 800cc0e:	1a9b      	subs	r3, r3, r2
 800cc10:	42ab      	cmp	r3, r5
 800cc12:	dc26      	bgt.n	800cc62 <_printf_common+0x96>
 800cc14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cc18:	6822      	ldr	r2, [r4, #0]
 800cc1a:	3b00      	subs	r3, #0
 800cc1c:	bf18      	it	ne
 800cc1e:	2301      	movne	r3, #1
 800cc20:	0692      	lsls	r2, r2, #26
 800cc22:	d42b      	bmi.n	800cc7c <_printf_common+0xb0>
 800cc24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cc28:	4641      	mov	r1, r8
 800cc2a:	4638      	mov	r0, r7
 800cc2c:	47c8      	blx	r9
 800cc2e:	3001      	adds	r0, #1
 800cc30:	d01e      	beq.n	800cc70 <_printf_common+0xa4>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	6922      	ldr	r2, [r4, #16]
 800cc36:	f003 0306 	and.w	r3, r3, #6
 800cc3a:	2b04      	cmp	r3, #4
 800cc3c:	bf02      	ittt	eq
 800cc3e:	68e5      	ldreq	r5, [r4, #12]
 800cc40:	6833      	ldreq	r3, [r6, #0]
 800cc42:	1aed      	subeq	r5, r5, r3
 800cc44:	68a3      	ldr	r3, [r4, #8]
 800cc46:	bf0c      	ite	eq
 800cc48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc4c:	2500      	movne	r5, #0
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	bfc4      	itt	gt
 800cc52:	1a9b      	subgt	r3, r3, r2
 800cc54:	18ed      	addgt	r5, r5, r3
 800cc56:	2600      	movs	r6, #0
 800cc58:	341a      	adds	r4, #26
 800cc5a:	42b5      	cmp	r5, r6
 800cc5c:	d11a      	bne.n	800cc94 <_printf_common+0xc8>
 800cc5e:	2000      	movs	r0, #0
 800cc60:	e008      	b.n	800cc74 <_printf_common+0xa8>
 800cc62:	2301      	movs	r3, #1
 800cc64:	4652      	mov	r2, sl
 800cc66:	4641      	mov	r1, r8
 800cc68:	4638      	mov	r0, r7
 800cc6a:	47c8      	blx	r9
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	d103      	bne.n	800cc78 <_printf_common+0xac>
 800cc70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc78:	3501      	adds	r5, #1
 800cc7a:	e7c6      	b.n	800cc0a <_printf_common+0x3e>
 800cc7c:	18e1      	adds	r1, r4, r3
 800cc7e:	1c5a      	adds	r2, r3, #1
 800cc80:	2030      	movs	r0, #48	@ 0x30
 800cc82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc86:	4422      	add	r2, r4
 800cc88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc90:	3302      	adds	r3, #2
 800cc92:	e7c7      	b.n	800cc24 <_printf_common+0x58>
 800cc94:	2301      	movs	r3, #1
 800cc96:	4622      	mov	r2, r4
 800cc98:	4641      	mov	r1, r8
 800cc9a:	4638      	mov	r0, r7
 800cc9c:	47c8      	blx	r9
 800cc9e:	3001      	adds	r0, #1
 800cca0:	d0e6      	beq.n	800cc70 <_printf_common+0xa4>
 800cca2:	3601      	adds	r6, #1
 800cca4:	e7d9      	b.n	800cc5a <_printf_common+0x8e>
	...

0800cca8 <_printf_i>:
 800cca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccac:	7e0f      	ldrb	r7, [r1, #24]
 800ccae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ccb0:	2f78      	cmp	r7, #120	@ 0x78
 800ccb2:	4691      	mov	r9, r2
 800ccb4:	4680      	mov	r8, r0
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	469a      	mov	sl, r3
 800ccba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ccbe:	d807      	bhi.n	800ccd0 <_printf_i+0x28>
 800ccc0:	2f62      	cmp	r7, #98	@ 0x62
 800ccc2:	d80a      	bhi.n	800ccda <_printf_i+0x32>
 800ccc4:	2f00      	cmp	r7, #0
 800ccc6:	f000 80d2 	beq.w	800ce6e <_printf_i+0x1c6>
 800ccca:	2f58      	cmp	r7, #88	@ 0x58
 800cccc:	f000 80b9 	beq.w	800ce42 <_printf_i+0x19a>
 800ccd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ccd8:	e03a      	b.n	800cd50 <_printf_i+0xa8>
 800ccda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ccde:	2b15      	cmp	r3, #21
 800cce0:	d8f6      	bhi.n	800ccd0 <_printf_i+0x28>
 800cce2:	a101      	add	r1, pc, #4	@ (adr r1, 800cce8 <_printf_i+0x40>)
 800cce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cce8:	0800cd41 	.word	0x0800cd41
 800ccec:	0800cd55 	.word	0x0800cd55
 800ccf0:	0800ccd1 	.word	0x0800ccd1
 800ccf4:	0800ccd1 	.word	0x0800ccd1
 800ccf8:	0800ccd1 	.word	0x0800ccd1
 800ccfc:	0800ccd1 	.word	0x0800ccd1
 800cd00:	0800cd55 	.word	0x0800cd55
 800cd04:	0800ccd1 	.word	0x0800ccd1
 800cd08:	0800ccd1 	.word	0x0800ccd1
 800cd0c:	0800ccd1 	.word	0x0800ccd1
 800cd10:	0800ccd1 	.word	0x0800ccd1
 800cd14:	0800ce55 	.word	0x0800ce55
 800cd18:	0800cd7f 	.word	0x0800cd7f
 800cd1c:	0800ce0f 	.word	0x0800ce0f
 800cd20:	0800ccd1 	.word	0x0800ccd1
 800cd24:	0800ccd1 	.word	0x0800ccd1
 800cd28:	0800ce77 	.word	0x0800ce77
 800cd2c:	0800ccd1 	.word	0x0800ccd1
 800cd30:	0800cd7f 	.word	0x0800cd7f
 800cd34:	0800ccd1 	.word	0x0800ccd1
 800cd38:	0800ccd1 	.word	0x0800ccd1
 800cd3c:	0800ce17 	.word	0x0800ce17
 800cd40:	6833      	ldr	r3, [r6, #0]
 800cd42:	1d1a      	adds	r2, r3, #4
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6032      	str	r2, [r6, #0]
 800cd48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cd50:	2301      	movs	r3, #1
 800cd52:	e09d      	b.n	800ce90 <_printf_i+0x1e8>
 800cd54:	6833      	ldr	r3, [r6, #0]
 800cd56:	6820      	ldr	r0, [r4, #0]
 800cd58:	1d19      	adds	r1, r3, #4
 800cd5a:	6031      	str	r1, [r6, #0]
 800cd5c:	0606      	lsls	r6, r0, #24
 800cd5e:	d501      	bpl.n	800cd64 <_printf_i+0xbc>
 800cd60:	681d      	ldr	r5, [r3, #0]
 800cd62:	e003      	b.n	800cd6c <_printf_i+0xc4>
 800cd64:	0645      	lsls	r5, r0, #25
 800cd66:	d5fb      	bpl.n	800cd60 <_printf_i+0xb8>
 800cd68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd6c:	2d00      	cmp	r5, #0
 800cd6e:	da03      	bge.n	800cd78 <_printf_i+0xd0>
 800cd70:	232d      	movs	r3, #45	@ 0x2d
 800cd72:	426d      	negs	r5, r5
 800cd74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd78:	4859      	ldr	r0, [pc, #356]	@ (800cee0 <_printf_i+0x238>)
 800cd7a:	230a      	movs	r3, #10
 800cd7c:	e011      	b.n	800cda2 <_printf_i+0xfa>
 800cd7e:	6821      	ldr	r1, [r4, #0]
 800cd80:	6833      	ldr	r3, [r6, #0]
 800cd82:	0608      	lsls	r0, r1, #24
 800cd84:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd88:	d402      	bmi.n	800cd90 <_printf_i+0xe8>
 800cd8a:	0649      	lsls	r1, r1, #25
 800cd8c:	bf48      	it	mi
 800cd8e:	b2ad      	uxthmi	r5, r5
 800cd90:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd92:	4853      	ldr	r0, [pc, #332]	@ (800cee0 <_printf_i+0x238>)
 800cd94:	6033      	str	r3, [r6, #0]
 800cd96:	bf14      	ite	ne
 800cd98:	230a      	movne	r3, #10
 800cd9a:	2308      	moveq	r3, #8
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cda2:	6866      	ldr	r6, [r4, #4]
 800cda4:	60a6      	str	r6, [r4, #8]
 800cda6:	2e00      	cmp	r6, #0
 800cda8:	bfa2      	ittt	ge
 800cdaa:	6821      	ldrge	r1, [r4, #0]
 800cdac:	f021 0104 	bicge.w	r1, r1, #4
 800cdb0:	6021      	strge	r1, [r4, #0]
 800cdb2:	b90d      	cbnz	r5, 800cdb8 <_printf_i+0x110>
 800cdb4:	2e00      	cmp	r6, #0
 800cdb6:	d04b      	beq.n	800ce50 <_printf_i+0x1a8>
 800cdb8:	4616      	mov	r6, r2
 800cdba:	fbb5 f1f3 	udiv	r1, r5, r3
 800cdbe:	fb03 5711 	mls	r7, r3, r1, r5
 800cdc2:	5dc7      	ldrb	r7, [r0, r7]
 800cdc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cdc8:	462f      	mov	r7, r5
 800cdca:	42bb      	cmp	r3, r7
 800cdcc:	460d      	mov	r5, r1
 800cdce:	d9f4      	bls.n	800cdba <_printf_i+0x112>
 800cdd0:	2b08      	cmp	r3, #8
 800cdd2:	d10b      	bne.n	800cdec <_printf_i+0x144>
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	07df      	lsls	r7, r3, #31
 800cdd8:	d508      	bpl.n	800cdec <_printf_i+0x144>
 800cdda:	6923      	ldr	r3, [r4, #16]
 800cddc:	6861      	ldr	r1, [r4, #4]
 800cdde:	4299      	cmp	r1, r3
 800cde0:	bfde      	ittt	le
 800cde2:	2330      	movle	r3, #48	@ 0x30
 800cde4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cde8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cdec:	1b92      	subs	r2, r2, r6
 800cdee:	6122      	str	r2, [r4, #16]
 800cdf0:	f8cd a000 	str.w	sl, [sp]
 800cdf4:	464b      	mov	r3, r9
 800cdf6:	aa03      	add	r2, sp, #12
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	f7ff fee6 	bl	800cbcc <_printf_common>
 800ce00:	3001      	adds	r0, #1
 800ce02:	d14a      	bne.n	800ce9a <_printf_i+0x1f2>
 800ce04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce08:	b004      	add	sp, #16
 800ce0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce0e:	6823      	ldr	r3, [r4, #0]
 800ce10:	f043 0320 	orr.w	r3, r3, #32
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	4833      	ldr	r0, [pc, #204]	@ (800cee4 <_printf_i+0x23c>)
 800ce18:	2778      	movs	r7, #120	@ 0x78
 800ce1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ce1e:	6823      	ldr	r3, [r4, #0]
 800ce20:	6831      	ldr	r1, [r6, #0]
 800ce22:	061f      	lsls	r7, r3, #24
 800ce24:	f851 5b04 	ldr.w	r5, [r1], #4
 800ce28:	d402      	bmi.n	800ce30 <_printf_i+0x188>
 800ce2a:	065f      	lsls	r7, r3, #25
 800ce2c:	bf48      	it	mi
 800ce2e:	b2ad      	uxthmi	r5, r5
 800ce30:	6031      	str	r1, [r6, #0]
 800ce32:	07d9      	lsls	r1, r3, #31
 800ce34:	bf44      	itt	mi
 800ce36:	f043 0320 	orrmi.w	r3, r3, #32
 800ce3a:	6023      	strmi	r3, [r4, #0]
 800ce3c:	b11d      	cbz	r5, 800ce46 <_printf_i+0x19e>
 800ce3e:	2310      	movs	r3, #16
 800ce40:	e7ac      	b.n	800cd9c <_printf_i+0xf4>
 800ce42:	4827      	ldr	r0, [pc, #156]	@ (800cee0 <_printf_i+0x238>)
 800ce44:	e7e9      	b.n	800ce1a <_printf_i+0x172>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	f023 0320 	bic.w	r3, r3, #32
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	e7f6      	b.n	800ce3e <_printf_i+0x196>
 800ce50:	4616      	mov	r6, r2
 800ce52:	e7bd      	b.n	800cdd0 <_printf_i+0x128>
 800ce54:	6833      	ldr	r3, [r6, #0]
 800ce56:	6825      	ldr	r5, [r4, #0]
 800ce58:	6961      	ldr	r1, [r4, #20]
 800ce5a:	1d18      	adds	r0, r3, #4
 800ce5c:	6030      	str	r0, [r6, #0]
 800ce5e:	062e      	lsls	r6, r5, #24
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	d501      	bpl.n	800ce68 <_printf_i+0x1c0>
 800ce64:	6019      	str	r1, [r3, #0]
 800ce66:	e002      	b.n	800ce6e <_printf_i+0x1c6>
 800ce68:	0668      	lsls	r0, r5, #25
 800ce6a:	d5fb      	bpl.n	800ce64 <_printf_i+0x1bc>
 800ce6c:	8019      	strh	r1, [r3, #0]
 800ce6e:	2300      	movs	r3, #0
 800ce70:	6123      	str	r3, [r4, #16]
 800ce72:	4616      	mov	r6, r2
 800ce74:	e7bc      	b.n	800cdf0 <_printf_i+0x148>
 800ce76:	6833      	ldr	r3, [r6, #0]
 800ce78:	1d1a      	adds	r2, r3, #4
 800ce7a:	6032      	str	r2, [r6, #0]
 800ce7c:	681e      	ldr	r6, [r3, #0]
 800ce7e:	6862      	ldr	r2, [r4, #4]
 800ce80:	2100      	movs	r1, #0
 800ce82:	4630      	mov	r0, r6
 800ce84:	f7f3 fa2c 	bl	80002e0 <memchr>
 800ce88:	b108      	cbz	r0, 800ce8e <_printf_i+0x1e6>
 800ce8a:	1b80      	subs	r0, r0, r6
 800ce8c:	6060      	str	r0, [r4, #4]
 800ce8e:	6863      	ldr	r3, [r4, #4]
 800ce90:	6123      	str	r3, [r4, #16]
 800ce92:	2300      	movs	r3, #0
 800ce94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce98:	e7aa      	b.n	800cdf0 <_printf_i+0x148>
 800ce9a:	6923      	ldr	r3, [r4, #16]
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	4649      	mov	r1, r9
 800cea0:	4640      	mov	r0, r8
 800cea2:	47d0      	blx	sl
 800cea4:	3001      	adds	r0, #1
 800cea6:	d0ad      	beq.n	800ce04 <_printf_i+0x15c>
 800cea8:	6823      	ldr	r3, [r4, #0]
 800ceaa:	079b      	lsls	r3, r3, #30
 800ceac:	d413      	bmi.n	800ced6 <_printf_i+0x22e>
 800ceae:	68e0      	ldr	r0, [r4, #12]
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	4298      	cmp	r0, r3
 800ceb4:	bfb8      	it	lt
 800ceb6:	4618      	movlt	r0, r3
 800ceb8:	e7a6      	b.n	800ce08 <_printf_i+0x160>
 800ceba:	2301      	movs	r3, #1
 800cebc:	4632      	mov	r2, r6
 800cebe:	4649      	mov	r1, r9
 800cec0:	4640      	mov	r0, r8
 800cec2:	47d0      	blx	sl
 800cec4:	3001      	adds	r0, #1
 800cec6:	d09d      	beq.n	800ce04 <_printf_i+0x15c>
 800cec8:	3501      	adds	r5, #1
 800ceca:	68e3      	ldr	r3, [r4, #12]
 800cecc:	9903      	ldr	r1, [sp, #12]
 800cece:	1a5b      	subs	r3, r3, r1
 800ced0:	42ab      	cmp	r3, r5
 800ced2:	dcf2      	bgt.n	800ceba <_printf_i+0x212>
 800ced4:	e7eb      	b.n	800ceae <_printf_i+0x206>
 800ced6:	2500      	movs	r5, #0
 800ced8:	f104 0619 	add.w	r6, r4, #25
 800cedc:	e7f5      	b.n	800ceca <_printf_i+0x222>
 800cede:	bf00      	nop
 800cee0:	0801c03b 	.word	0x0801c03b
 800cee4:	0801c04c 	.word	0x0801c04c

0800cee8 <__sflush_r>:
 800cee8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ceec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef0:	0716      	lsls	r6, r2, #28
 800cef2:	4605      	mov	r5, r0
 800cef4:	460c      	mov	r4, r1
 800cef6:	d454      	bmi.n	800cfa2 <__sflush_r+0xba>
 800cef8:	684b      	ldr	r3, [r1, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	dc02      	bgt.n	800cf04 <__sflush_r+0x1c>
 800cefe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	dd48      	ble.n	800cf96 <__sflush_r+0xae>
 800cf04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf06:	2e00      	cmp	r6, #0
 800cf08:	d045      	beq.n	800cf96 <__sflush_r+0xae>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf10:	682f      	ldr	r7, [r5, #0]
 800cf12:	6a21      	ldr	r1, [r4, #32]
 800cf14:	602b      	str	r3, [r5, #0]
 800cf16:	d030      	beq.n	800cf7a <__sflush_r+0x92>
 800cf18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf1a:	89a3      	ldrh	r3, [r4, #12]
 800cf1c:	0759      	lsls	r1, r3, #29
 800cf1e:	d505      	bpl.n	800cf2c <__sflush_r+0x44>
 800cf20:	6863      	ldr	r3, [r4, #4]
 800cf22:	1ad2      	subs	r2, r2, r3
 800cf24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf26:	b10b      	cbz	r3, 800cf2c <__sflush_r+0x44>
 800cf28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf2a:	1ad2      	subs	r2, r2, r3
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf30:	6a21      	ldr	r1, [r4, #32]
 800cf32:	4628      	mov	r0, r5
 800cf34:	47b0      	blx	r6
 800cf36:	1c43      	adds	r3, r0, #1
 800cf38:	89a3      	ldrh	r3, [r4, #12]
 800cf3a:	d106      	bne.n	800cf4a <__sflush_r+0x62>
 800cf3c:	6829      	ldr	r1, [r5, #0]
 800cf3e:	291d      	cmp	r1, #29
 800cf40:	d82b      	bhi.n	800cf9a <__sflush_r+0xb2>
 800cf42:	4a2a      	ldr	r2, [pc, #168]	@ (800cfec <__sflush_r+0x104>)
 800cf44:	410a      	asrs	r2, r1
 800cf46:	07d6      	lsls	r6, r2, #31
 800cf48:	d427      	bmi.n	800cf9a <__sflush_r+0xb2>
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	6062      	str	r2, [r4, #4]
 800cf4e:	04d9      	lsls	r1, r3, #19
 800cf50:	6922      	ldr	r2, [r4, #16]
 800cf52:	6022      	str	r2, [r4, #0]
 800cf54:	d504      	bpl.n	800cf60 <__sflush_r+0x78>
 800cf56:	1c42      	adds	r2, r0, #1
 800cf58:	d101      	bne.n	800cf5e <__sflush_r+0x76>
 800cf5a:	682b      	ldr	r3, [r5, #0]
 800cf5c:	b903      	cbnz	r3, 800cf60 <__sflush_r+0x78>
 800cf5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf62:	602f      	str	r7, [r5, #0]
 800cf64:	b1b9      	cbz	r1, 800cf96 <__sflush_r+0xae>
 800cf66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf6a:	4299      	cmp	r1, r3
 800cf6c:	d002      	beq.n	800cf74 <__sflush_r+0x8c>
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f7ff fa9a 	bl	800c4a8 <_free_r>
 800cf74:	2300      	movs	r3, #0
 800cf76:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf78:	e00d      	b.n	800cf96 <__sflush_r+0xae>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	47b0      	blx	r6
 800cf80:	4602      	mov	r2, r0
 800cf82:	1c50      	adds	r0, r2, #1
 800cf84:	d1c9      	bne.n	800cf1a <__sflush_r+0x32>
 800cf86:	682b      	ldr	r3, [r5, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d0c6      	beq.n	800cf1a <__sflush_r+0x32>
 800cf8c:	2b1d      	cmp	r3, #29
 800cf8e:	d001      	beq.n	800cf94 <__sflush_r+0xac>
 800cf90:	2b16      	cmp	r3, #22
 800cf92:	d11e      	bne.n	800cfd2 <__sflush_r+0xea>
 800cf94:	602f      	str	r7, [r5, #0]
 800cf96:	2000      	movs	r0, #0
 800cf98:	e022      	b.n	800cfe0 <__sflush_r+0xf8>
 800cf9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf9e:	b21b      	sxth	r3, r3
 800cfa0:	e01b      	b.n	800cfda <__sflush_r+0xf2>
 800cfa2:	690f      	ldr	r7, [r1, #16]
 800cfa4:	2f00      	cmp	r7, #0
 800cfa6:	d0f6      	beq.n	800cf96 <__sflush_r+0xae>
 800cfa8:	0793      	lsls	r3, r2, #30
 800cfaa:	680e      	ldr	r6, [r1, #0]
 800cfac:	bf08      	it	eq
 800cfae:	694b      	ldreq	r3, [r1, #20]
 800cfb0:	600f      	str	r7, [r1, #0]
 800cfb2:	bf18      	it	ne
 800cfb4:	2300      	movne	r3, #0
 800cfb6:	eba6 0807 	sub.w	r8, r6, r7
 800cfba:	608b      	str	r3, [r1, #8]
 800cfbc:	f1b8 0f00 	cmp.w	r8, #0
 800cfc0:	dde9      	ble.n	800cf96 <__sflush_r+0xae>
 800cfc2:	6a21      	ldr	r1, [r4, #32]
 800cfc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cfc6:	4643      	mov	r3, r8
 800cfc8:	463a      	mov	r2, r7
 800cfca:	4628      	mov	r0, r5
 800cfcc:	47b0      	blx	r6
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	dc08      	bgt.n	800cfe4 <__sflush_r+0xfc>
 800cfd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfda:	81a3      	strh	r3, [r4, #12]
 800cfdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe4:	4407      	add	r7, r0
 800cfe6:	eba8 0800 	sub.w	r8, r8, r0
 800cfea:	e7e7      	b.n	800cfbc <__sflush_r+0xd4>
 800cfec:	dfbffffe 	.word	0xdfbffffe

0800cff0 <_fflush_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	690b      	ldr	r3, [r1, #16]
 800cff4:	4605      	mov	r5, r0
 800cff6:	460c      	mov	r4, r1
 800cff8:	b913      	cbnz	r3, 800d000 <_fflush_r+0x10>
 800cffa:	2500      	movs	r5, #0
 800cffc:	4628      	mov	r0, r5
 800cffe:	bd38      	pop	{r3, r4, r5, pc}
 800d000:	b118      	cbz	r0, 800d00a <_fflush_r+0x1a>
 800d002:	6a03      	ldr	r3, [r0, #32]
 800d004:	b90b      	cbnz	r3, 800d00a <_fflush_r+0x1a>
 800d006:	f7ff f927 	bl	800c258 <__sinit>
 800d00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d0f3      	beq.n	800cffa <_fflush_r+0xa>
 800d012:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d014:	07d0      	lsls	r0, r2, #31
 800d016:	d404      	bmi.n	800d022 <_fflush_r+0x32>
 800d018:	0599      	lsls	r1, r3, #22
 800d01a:	d402      	bmi.n	800d022 <_fflush_r+0x32>
 800d01c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d01e:	f7ff fa40 	bl	800c4a2 <__retarget_lock_acquire_recursive>
 800d022:	4628      	mov	r0, r5
 800d024:	4621      	mov	r1, r4
 800d026:	f7ff ff5f 	bl	800cee8 <__sflush_r>
 800d02a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d02c:	07da      	lsls	r2, r3, #31
 800d02e:	4605      	mov	r5, r0
 800d030:	d4e4      	bmi.n	800cffc <_fflush_r+0xc>
 800d032:	89a3      	ldrh	r3, [r4, #12]
 800d034:	059b      	lsls	r3, r3, #22
 800d036:	d4e1      	bmi.n	800cffc <_fflush_r+0xc>
 800d038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d03a:	f7ff fa33 	bl	800c4a4 <__retarget_lock_release_recursive>
 800d03e:	e7dd      	b.n	800cffc <_fflush_r+0xc>

0800d040 <__swbuf_r>:
 800d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d042:	460e      	mov	r6, r1
 800d044:	4614      	mov	r4, r2
 800d046:	4605      	mov	r5, r0
 800d048:	b118      	cbz	r0, 800d052 <__swbuf_r+0x12>
 800d04a:	6a03      	ldr	r3, [r0, #32]
 800d04c:	b90b      	cbnz	r3, 800d052 <__swbuf_r+0x12>
 800d04e:	f7ff f903 	bl	800c258 <__sinit>
 800d052:	69a3      	ldr	r3, [r4, #24]
 800d054:	60a3      	str	r3, [r4, #8]
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	071a      	lsls	r2, r3, #28
 800d05a:	d501      	bpl.n	800d060 <__swbuf_r+0x20>
 800d05c:	6923      	ldr	r3, [r4, #16]
 800d05e:	b943      	cbnz	r3, 800d072 <__swbuf_r+0x32>
 800d060:	4621      	mov	r1, r4
 800d062:	4628      	mov	r0, r5
 800d064:	f000 f82a 	bl	800d0bc <__swsetup_r>
 800d068:	b118      	cbz	r0, 800d072 <__swbuf_r+0x32>
 800d06a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d06e:	4638      	mov	r0, r7
 800d070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d072:	6823      	ldr	r3, [r4, #0]
 800d074:	6922      	ldr	r2, [r4, #16]
 800d076:	1a98      	subs	r0, r3, r2
 800d078:	6963      	ldr	r3, [r4, #20]
 800d07a:	b2f6      	uxtb	r6, r6
 800d07c:	4283      	cmp	r3, r0
 800d07e:	4637      	mov	r7, r6
 800d080:	dc05      	bgt.n	800d08e <__swbuf_r+0x4e>
 800d082:	4621      	mov	r1, r4
 800d084:	4628      	mov	r0, r5
 800d086:	f7ff ffb3 	bl	800cff0 <_fflush_r>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d1ed      	bne.n	800d06a <__swbuf_r+0x2a>
 800d08e:	68a3      	ldr	r3, [r4, #8]
 800d090:	3b01      	subs	r3, #1
 800d092:	60a3      	str	r3, [r4, #8]
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	1c5a      	adds	r2, r3, #1
 800d098:	6022      	str	r2, [r4, #0]
 800d09a:	701e      	strb	r6, [r3, #0]
 800d09c:	6962      	ldr	r2, [r4, #20]
 800d09e:	1c43      	adds	r3, r0, #1
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d004      	beq.n	800d0ae <__swbuf_r+0x6e>
 800d0a4:	89a3      	ldrh	r3, [r4, #12]
 800d0a6:	07db      	lsls	r3, r3, #31
 800d0a8:	d5e1      	bpl.n	800d06e <__swbuf_r+0x2e>
 800d0aa:	2e0a      	cmp	r6, #10
 800d0ac:	d1df      	bne.n	800d06e <__swbuf_r+0x2e>
 800d0ae:	4621      	mov	r1, r4
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	f7ff ff9d 	bl	800cff0 <_fflush_r>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d0d9      	beq.n	800d06e <__swbuf_r+0x2e>
 800d0ba:	e7d6      	b.n	800d06a <__swbuf_r+0x2a>

0800d0bc <__swsetup_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4b29      	ldr	r3, [pc, #164]	@ (800d164 <__swsetup_r+0xa8>)
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	6818      	ldr	r0, [r3, #0]
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	b118      	cbz	r0, 800d0d0 <__swsetup_r+0x14>
 800d0c8:	6a03      	ldr	r3, [r0, #32]
 800d0ca:	b90b      	cbnz	r3, 800d0d0 <__swsetup_r+0x14>
 800d0cc:	f7ff f8c4 	bl	800c258 <__sinit>
 800d0d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0d4:	0719      	lsls	r1, r3, #28
 800d0d6:	d422      	bmi.n	800d11e <__swsetup_r+0x62>
 800d0d8:	06da      	lsls	r2, r3, #27
 800d0da:	d407      	bmi.n	800d0ec <__swsetup_r+0x30>
 800d0dc:	2209      	movs	r2, #9
 800d0de:	602a      	str	r2, [r5, #0]
 800d0e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0e4:	81a3      	strh	r3, [r4, #12]
 800d0e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0ea:	e033      	b.n	800d154 <__swsetup_r+0x98>
 800d0ec:	0758      	lsls	r0, r3, #29
 800d0ee:	d512      	bpl.n	800d116 <__swsetup_r+0x5a>
 800d0f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0f2:	b141      	cbz	r1, 800d106 <__swsetup_r+0x4a>
 800d0f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0f8:	4299      	cmp	r1, r3
 800d0fa:	d002      	beq.n	800d102 <__swsetup_r+0x46>
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	f7ff f9d3 	bl	800c4a8 <_free_r>
 800d102:	2300      	movs	r3, #0
 800d104:	6363      	str	r3, [r4, #52]	@ 0x34
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d10c:	81a3      	strh	r3, [r4, #12]
 800d10e:	2300      	movs	r3, #0
 800d110:	6063      	str	r3, [r4, #4]
 800d112:	6923      	ldr	r3, [r4, #16]
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	89a3      	ldrh	r3, [r4, #12]
 800d118:	f043 0308 	orr.w	r3, r3, #8
 800d11c:	81a3      	strh	r3, [r4, #12]
 800d11e:	6923      	ldr	r3, [r4, #16]
 800d120:	b94b      	cbnz	r3, 800d136 <__swsetup_r+0x7a>
 800d122:	89a3      	ldrh	r3, [r4, #12]
 800d124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d12c:	d003      	beq.n	800d136 <__swsetup_r+0x7a>
 800d12e:	4621      	mov	r1, r4
 800d130:	4628      	mov	r0, r5
 800d132:	f000 f8a5 	bl	800d280 <__smakebuf_r>
 800d136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d13a:	f013 0201 	ands.w	r2, r3, #1
 800d13e:	d00a      	beq.n	800d156 <__swsetup_r+0x9a>
 800d140:	2200      	movs	r2, #0
 800d142:	60a2      	str	r2, [r4, #8]
 800d144:	6962      	ldr	r2, [r4, #20]
 800d146:	4252      	negs	r2, r2
 800d148:	61a2      	str	r2, [r4, #24]
 800d14a:	6922      	ldr	r2, [r4, #16]
 800d14c:	b942      	cbnz	r2, 800d160 <__swsetup_r+0xa4>
 800d14e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d152:	d1c5      	bne.n	800d0e0 <__swsetup_r+0x24>
 800d154:	bd38      	pop	{r3, r4, r5, pc}
 800d156:	0799      	lsls	r1, r3, #30
 800d158:	bf58      	it	pl
 800d15a:	6962      	ldrpl	r2, [r4, #20]
 800d15c:	60a2      	str	r2, [r4, #8]
 800d15e:	e7f4      	b.n	800d14a <__swsetup_r+0x8e>
 800d160:	2000      	movs	r0, #0
 800d162:	e7f7      	b.n	800d154 <__swsetup_r+0x98>
 800d164:	24000080 	.word	0x24000080

0800d168 <memmove>:
 800d168:	4288      	cmp	r0, r1
 800d16a:	b510      	push	{r4, lr}
 800d16c:	eb01 0402 	add.w	r4, r1, r2
 800d170:	d902      	bls.n	800d178 <memmove+0x10>
 800d172:	4284      	cmp	r4, r0
 800d174:	4623      	mov	r3, r4
 800d176:	d807      	bhi.n	800d188 <memmove+0x20>
 800d178:	1e43      	subs	r3, r0, #1
 800d17a:	42a1      	cmp	r1, r4
 800d17c:	d008      	beq.n	800d190 <memmove+0x28>
 800d17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d182:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d186:	e7f8      	b.n	800d17a <memmove+0x12>
 800d188:	4402      	add	r2, r0
 800d18a:	4601      	mov	r1, r0
 800d18c:	428a      	cmp	r2, r1
 800d18e:	d100      	bne.n	800d192 <memmove+0x2a>
 800d190:	bd10      	pop	{r4, pc}
 800d192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d19a:	e7f7      	b.n	800d18c <memmove+0x24>

0800d19c <_sbrk_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d06      	ldr	r5, [pc, #24]	@ (800d1b8 <_sbrk_r+0x1c>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7f6 fdb0 	bl	8003d0c <_sbrk>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_sbrk_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_sbrk_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	240010ac 	.word	0x240010ac

0800d1bc <memcpy>:
 800d1bc:	440a      	add	r2, r1
 800d1be:	4291      	cmp	r1, r2
 800d1c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d1c4:	d100      	bne.n	800d1c8 <memcpy+0xc>
 800d1c6:	4770      	bx	lr
 800d1c8:	b510      	push	{r4, lr}
 800d1ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1d2:	4291      	cmp	r1, r2
 800d1d4:	d1f9      	bne.n	800d1ca <memcpy+0xe>
 800d1d6:	bd10      	pop	{r4, pc}

0800d1d8 <_realloc_r>:
 800d1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1dc:	4680      	mov	r8, r0
 800d1de:	4615      	mov	r5, r2
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	b921      	cbnz	r1, 800d1ee <_realloc_r+0x16>
 800d1e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	f7ff b9c9 	b.w	800c580 <_malloc_r>
 800d1ee:	b92a      	cbnz	r2, 800d1fc <_realloc_r+0x24>
 800d1f0:	f7ff f95a 	bl	800c4a8 <_free_r>
 800d1f4:	2400      	movs	r4, #0
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1fc:	f000 f89e 	bl	800d33c <_malloc_usable_size_r>
 800d200:	4285      	cmp	r5, r0
 800d202:	4606      	mov	r6, r0
 800d204:	d802      	bhi.n	800d20c <_realloc_r+0x34>
 800d206:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d20a:	d8f4      	bhi.n	800d1f6 <_realloc_r+0x1e>
 800d20c:	4629      	mov	r1, r5
 800d20e:	4640      	mov	r0, r8
 800d210:	f7ff f9b6 	bl	800c580 <_malloc_r>
 800d214:	4607      	mov	r7, r0
 800d216:	2800      	cmp	r0, #0
 800d218:	d0ec      	beq.n	800d1f4 <_realloc_r+0x1c>
 800d21a:	42b5      	cmp	r5, r6
 800d21c:	462a      	mov	r2, r5
 800d21e:	4621      	mov	r1, r4
 800d220:	bf28      	it	cs
 800d222:	4632      	movcs	r2, r6
 800d224:	f7ff ffca 	bl	800d1bc <memcpy>
 800d228:	4621      	mov	r1, r4
 800d22a:	4640      	mov	r0, r8
 800d22c:	f7ff f93c 	bl	800c4a8 <_free_r>
 800d230:	463c      	mov	r4, r7
 800d232:	e7e0      	b.n	800d1f6 <_realloc_r+0x1e>

0800d234 <__swhatbuf_r>:
 800d234:	b570      	push	{r4, r5, r6, lr}
 800d236:	460c      	mov	r4, r1
 800d238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d23c:	2900      	cmp	r1, #0
 800d23e:	b096      	sub	sp, #88	@ 0x58
 800d240:	4615      	mov	r5, r2
 800d242:	461e      	mov	r6, r3
 800d244:	da0d      	bge.n	800d262 <__swhatbuf_r+0x2e>
 800d246:	89a3      	ldrh	r3, [r4, #12]
 800d248:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d24c:	f04f 0100 	mov.w	r1, #0
 800d250:	bf14      	ite	ne
 800d252:	2340      	movne	r3, #64	@ 0x40
 800d254:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d258:	2000      	movs	r0, #0
 800d25a:	6031      	str	r1, [r6, #0]
 800d25c:	602b      	str	r3, [r5, #0]
 800d25e:	b016      	add	sp, #88	@ 0x58
 800d260:	bd70      	pop	{r4, r5, r6, pc}
 800d262:	466a      	mov	r2, sp
 800d264:	f000 f848 	bl	800d2f8 <_fstat_r>
 800d268:	2800      	cmp	r0, #0
 800d26a:	dbec      	blt.n	800d246 <__swhatbuf_r+0x12>
 800d26c:	9901      	ldr	r1, [sp, #4]
 800d26e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d272:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d276:	4259      	negs	r1, r3
 800d278:	4159      	adcs	r1, r3
 800d27a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d27e:	e7eb      	b.n	800d258 <__swhatbuf_r+0x24>

0800d280 <__smakebuf_r>:
 800d280:	898b      	ldrh	r3, [r1, #12]
 800d282:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d284:	079d      	lsls	r5, r3, #30
 800d286:	4606      	mov	r6, r0
 800d288:	460c      	mov	r4, r1
 800d28a:	d507      	bpl.n	800d29c <__smakebuf_r+0x1c>
 800d28c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	6123      	str	r3, [r4, #16]
 800d294:	2301      	movs	r3, #1
 800d296:	6163      	str	r3, [r4, #20]
 800d298:	b003      	add	sp, #12
 800d29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d29c:	ab01      	add	r3, sp, #4
 800d29e:	466a      	mov	r2, sp
 800d2a0:	f7ff ffc8 	bl	800d234 <__swhatbuf_r>
 800d2a4:	9f00      	ldr	r7, [sp, #0]
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	4639      	mov	r1, r7
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	f7ff f968 	bl	800c580 <_malloc_r>
 800d2b0:	b948      	cbnz	r0, 800d2c6 <__smakebuf_r+0x46>
 800d2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b6:	059a      	lsls	r2, r3, #22
 800d2b8:	d4ee      	bmi.n	800d298 <__smakebuf_r+0x18>
 800d2ba:	f023 0303 	bic.w	r3, r3, #3
 800d2be:	f043 0302 	orr.w	r3, r3, #2
 800d2c2:	81a3      	strh	r3, [r4, #12]
 800d2c4:	e7e2      	b.n	800d28c <__smakebuf_r+0xc>
 800d2c6:	89a3      	ldrh	r3, [r4, #12]
 800d2c8:	6020      	str	r0, [r4, #0]
 800d2ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2ce:	81a3      	strh	r3, [r4, #12]
 800d2d0:	9b01      	ldr	r3, [sp, #4]
 800d2d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d2d6:	b15b      	cbz	r3, 800d2f0 <__smakebuf_r+0x70>
 800d2d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2dc:	4630      	mov	r0, r6
 800d2de:	f000 f81d 	bl	800d31c <_isatty_r>
 800d2e2:	b128      	cbz	r0, 800d2f0 <__smakebuf_r+0x70>
 800d2e4:	89a3      	ldrh	r3, [r4, #12]
 800d2e6:	f023 0303 	bic.w	r3, r3, #3
 800d2ea:	f043 0301 	orr.w	r3, r3, #1
 800d2ee:	81a3      	strh	r3, [r4, #12]
 800d2f0:	89a3      	ldrh	r3, [r4, #12]
 800d2f2:	431d      	orrs	r5, r3
 800d2f4:	81a5      	strh	r5, [r4, #12]
 800d2f6:	e7cf      	b.n	800d298 <__smakebuf_r+0x18>

0800d2f8 <_fstat_r>:
 800d2f8:	b538      	push	{r3, r4, r5, lr}
 800d2fa:	4d07      	ldr	r5, [pc, #28]	@ (800d318 <_fstat_r+0x20>)
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	4604      	mov	r4, r0
 800d300:	4608      	mov	r0, r1
 800d302:	4611      	mov	r1, r2
 800d304:	602b      	str	r3, [r5, #0]
 800d306:	f7f6 fcd9 	bl	8003cbc <_fstat>
 800d30a:	1c43      	adds	r3, r0, #1
 800d30c:	d102      	bne.n	800d314 <_fstat_r+0x1c>
 800d30e:	682b      	ldr	r3, [r5, #0]
 800d310:	b103      	cbz	r3, 800d314 <_fstat_r+0x1c>
 800d312:	6023      	str	r3, [r4, #0]
 800d314:	bd38      	pop	{r3, r4, r5, pc}
 800d316:	bf00      	nop
 800d318:	240010ac 	.word	0x240010ac

0800d31c <_isatty_r>:
 800d31c:	b538      	push	{r3, r4, r5, lr}
 800d31e:	4d06      	ldr	r5, [pc, #24]	@ (800d338 <_isatty_r+0x1c>)
 800d320:	2300      	movs	r3, #0
 800d322:	4604      	mov	r4, r0
 800d324:	4608      	mov	r0, r1
 800d326:	602b      	str	r3, [r5, #0]
 800d328:	f7f6 fcd8 	bl	8003cdc <_isatty>
 800d32c:	1c43      	adds	r3, r0, #1
 800d32e:	d102      	bne.n	800d336 <_isatty_r+0x1a>
 800d330:	682b      	ldr	r3, [r5, #0]
 800d332:	b103      	cbz	r3, 800d336 <_isatty_r+0x1a>
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	bd38      	pop	{r3, r4, r5, pc}
 800d338:	240010ac 	.word	0x240010ac

0800d33c <_malloc_usable_size_r>:
 800d33c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d340:	1f18      	subs	r0, r3, #4
 800d342:	2b00      	cmp	r3, #0
 800d344:	bfbc      	itt	lt
 800d346:	580b      	ldrlt	r3, [r1, r0]
 800d348:	18c0      	addlt	r0, r0, r3
 800d34a:	4770      	bx	lr

0800d34c <_init>:
 800d34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34e:	bf00      	nop
 800d350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d352:	bc08      	pop	{r3}
 800d354:	469e      	mov	lr, r3
 800d356:	4770      	bx	lr

0800d358 <_fini>:
 800d358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35a:	bf00      	nop
 800d35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d35e:	bc08      	pop	{r3}
 800d360:	469e      	mov	lr, r3
 800d362:	4770      	bx	lr
